<Type Name="String" FullName="System.String">
  <TypeSignature Language="C#" Value="public sealed class String : ICloneable, IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" />
  <TypeSignature Language="DocId" Value="T:System.String" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements ICloneable, IComparable, IComparable(Of String), IConvertible, IEnumerable(Of Char), IEquatable(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : ICloneable, IComparable, IComparable&lt;System::String ^&gt;, IConvertible, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="43ecc-101">テキストを一連の UTF-16 コード単位として表現します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-101">Represents text as a sequence of UTF-16 code units.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="43ecc-102">文字列は、テキストを表現するために使用される文字のシーケンシャル コレクションです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-102">A string is a sequential collection of characters that is used to represent text.</span></span> <span data-ttu-id="43ecc-103">A<xref:System.String>オブジェクトは、シーケンシャル コレクションの<xref:System.Char?displayProperty=nameWithType>オブジェクトを表す文字列です。<xref:System.Char?displayProperty=nameWithType>オブジェクトは utf-16 コード単位に対応します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-103">A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=nameWithType> objects that represent a string; a <xref:System.Char?displayProperty=nameWithType> object corresponds to a UTF-16 code unit.</span></span> <span data-ttu-id="43ecc-104">値、<xref:System.String>オブジェクトのシーケンシャル コレクションの内容は、<xref:System.Char?displayProperty=nameWithType>オブジェクト、および値が変更可能である (つまり、これが読み取り専用)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-104">The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=nameWithType> objects, and that value is immutable (that is, it is read-only).</span></span> <span data-ttu-id="43ecc-105">文字列の不変性に関する詳細については、次を参照してください。、[不変性と StringBuilder クラス](#Immutability)このトピックで後述します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-105">For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section later in this topic.</span></span> <span data-ttu-id="43ecc-106">最大サイズ、<xref:System.String>メモリ内のオブジェクトが 2 GB、または約 10億文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-106">The maximum size of a <xref:System.String> object in memory is 2GB, or about 1 billion characters.</span></span>  
  
 <span data-ttu-id="43ecc-107">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="43ecc-107">In this section:</span></span>  
  
 <span data-ttu-id="43ecc-108">[文字列オブジェクトをインスタンス化します。](#Instantiation) </span><span class="sxs-lookup"><span data-stu-id="43ecc-108">[Instantiating a String object](#Instantiation) </span></span>  
 <span data-ttu-id="43ecc-109">[Char 型のオブジェクトと Unicode 文字](#Characters) </span><span class="sxs-lookup"><span data-stu-id="43ecc-109">[Char objects and Unicode characters](#Characters) </span></span>  
 <span data-ttu-id="43ecc-110">[文字列と Unicode 標準](#Unicode) </span><span class="sxs-lookup"><span data-stu-id="43ecc-110">[Strings and The Unicode Standard](#Unicode) </span></span>  
 <span data-ttu-id="43ecc-111">[文字列と埋め込まれた null 文字](#EmbeddedNulls) </span><span class="sxs-lookup"><span data-stu-id="43ecc-111">[Strings and embedded null characters](#EmbeddedNulls) </span></span>  
 <span data-ttu-id="43ecc-112">[文字列とインデックス](#Indexes) </span><span class="sxs-lookup"><span data-stu-id="43ecc-112">[Strings and indexes](#Indexes) </span></span>  
 <span data-ttu-id="43ecc-113">[Null 文字列と空の文字列](#Nulls) </span><span class="sxs-lookup"><span data-stu-id="43ecc-113">[Null strings and empty strings](#Nulls) </span></span>  
 <span data-ttu-id="43ecc-114">[不変性と StringBuilder クラス](#Immutability) </span><span class="sxs-lookup"><span data-stu-id="43ecc-114">[Immutability and the StringBuilder class](#Immutability) </span></span>  
 <span data-ttu-id="43ecc-115">[カルチャに依存する操作との序数](#CultureSensitive) </span><span class="sxs-lookup"><span data-stu-id="43ecc-115">[Ordinal vs. culture-sensitive operations](#CultureSensitive) </span></span>  
 <span data-ttu-id="43ecc-116">[正規化](#Normalization) </span><span class="sxs-lookup"><span data-stu-id="43ecc-116">[Normalization](#Normalization) </span></span>  
 [<span data-ttu-id="43ecc-117">カテゴリ別の文字列操作</span><span class="sxs-lookup"><span data-stu-id="43ecc-117">String operations by category</span></span>](#ByCategory)  
  
<a name="Instantiation"></a>   
## <a name="instantiating-a-string-object"></a><span data-ttu-id="43ecc-118">文字列オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-118">Instantiating a String object</span></span>  
 <span data-ttu-id="43ecc-119">インスタンス化することができます、<xref:System.String>次の方法でオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-119">You can instantiate a <xref:System.String> object in the following ways:</span></span>  
  
-   <span data-ttu-id="43ecc-120">文字列リテラルを割り当てることによって、<xref:System.String>変数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-120">By assigning a string literal to a <xref:System.String> variable.</span></span> <span data-ttu-id="43ecc-121">これは、文字列を作成するための最も一般的に使用されるメソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-121">This is the most commonly used method for creating a string.</span></span> <span data-ttu-id="43ecc-122">次の例では、割り当てを使用して、いくつかの文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-122">The following example uses assignment to create several strings.</span></span> <span data-ttu-id="43ecc-123">C# の場合は、なお、円記号 (\\) は、エスケープ文字、文字列にリテラル円記号をエスケープする必要がありますまたは文字列全体である必要があります@-quotedです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-123">Note that in C#, because the backslash (\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)]
     [!code-csharp[System.String.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)]
     [!code-vb[System.String.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)]  
  
-   <span data-ttu-id="43ecc-124">呼び出して、<xref:System.String>クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-124">By calling a <xref:System.String> class constructor.</span></span> <span data-ttu-id="43ecc-125">次の例では、いくつかのクラスのコンス トラクターを呼び出すことによって文字列がインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-125">The following example instantiates strings by calling several class constructors.</span></span> <span data-ttu-id="43ecc-126">文字配列またはパラメーターとして符号付きバイト配列へのポインターを含めるいくつかのコンス トラクターのことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-126">Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters.</span></span> <span data-ttu-id="43ecc-127">Visual Basic は、これらのコンス トラクターの呼び出しをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-127">Visual Basic does not support calls to these constructors.</span></span> <span data-ttu-id="43ecc-128">詳細については<xref:System.String>コンス トラクターを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-128">For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)]
     [!code-csharp[System.String.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)]
     [!code-vb[System.String.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)]  
  
-   <span data-ttu-id="43ecc-129">文字列連結演算子を使用して、(+ (C#) と (& a) または + Visual Basic で) の任意の組み合わせから 1 つの文字列を作成する<xref:System.String>インスタンスと文字列リテラルです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-129">By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals.</span></span> <span data-ttu-id="43ecc-130">次の例では、文字列連結演算子の使用を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-130">The following example illustrates the use of the string concatenation operator.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)]
     [!code-csharp[System.String.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)]
     [!code-vb[System.String.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)]  
  
-   <span data-ttu-id="43ecc-131">プロパティを取得するか、メソッドを呼び出すとしている文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-131">By retrieving a property or calling a method that returns a string.</span></span> <span data-ttu-id="43ecc-132">次の例のメソッドを使用して、<xref:System.String>大きな文字列から部分文字列を抽出するクラス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-132">The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)]
     [!code-csharp[System.String.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)]
     [!code-vb[System.String.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)]  
  
-   <span data-ttu-id="43ecc-133">値またはオブジェクトを文字列形式に変換する書式指定メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-133">By calling a formatting method to convert a value or object to its string representation.</span></span> <span data-ttu-id="43ecc-134">次の例では、[複合書式指定](~/docs/standard/base-types/composite-formatting.md)を文字列に 2 つのオブジェクトの文字列形式を埋め込むには機能します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-134">The following example uses the                [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature to embed the string representation of two objects into a string.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)]
     [!code-csharp[System.String.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)]
     [!code-vb[System.String.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)]  
  
<a name="Characters"></a>   
## <a name="char-objects-and-unicode-characters"></a><span data-ttu-id="43ecc-135">Char 型のオブジェクトと Unicode 文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-135">Char objects and Unicode characters</span></span>  
 <span data-ttu-id="43ecc-136">文字列内の各文字は、Unicode コード ポイントまたは Unicode 文字の序数 (数値) 値とも呼ばれます、Unicode スカラー値によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-136">Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character.</span></span> <span data-ttu-id="43ecc-137">各コード ポイントは utf-16 エンコーディングを使用してエンコードされており、エンコーディングの各要素の数値として表されます、<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-137">Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-138">注意してください。、 <xref:System.String> utf-16 コード単位のシーケンシャル コレクションのインスタンスを構成、作成することは、<xref:System.String>整形式の Unicode 文字列ではないオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-138">Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string.</span></span> <span data-ttu-id="43ecc-139">たとえば、対応する上位サロゲートせず、下位サロゲートを含む文字列を作成することはできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-139">For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate.</span></span> <span data-ttu-id="43ecc-140">エンコードとデコード内のオブジェクトのメソッドなど、いくつかの方法、<xref:System.Text>名前空間がチェックを実行して文字列が整形式であることを確認<xref:System.String>クラスのメンバーはない文字列が整形式であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-140">Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members don't ensure that a string is well-formed.</span></span>  
  
 <span data-ttu-id="43ecc-141">1 つ<xref:System.Char>オブジェクトは通常、1 つを表すコード ポイントです。 つまり、の数値、<xref:System.Char>コード ポイントに等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-141">A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point.</span></span> <span data-ttu-id="43ecc-142">たとえば、コード ポイントの文字"a"は U +0 0061 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-142">For example, the code point for the character "a" is U+0061.</span></span> <span data-ttu-id="43ecc-143">ただし、コード ポイントがエンコードされた 1 つ以上の要素を必要があります (1 つ以上<xref:System.Char>オブジェクト)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-143">However, a code point might require more than one encoded element (more than one <xref:System.Char> object).</span></span> <span data-ttu-id="43ecc-144">Unicode 標準を複数の対応する文字の 2 種類の定義<xref:System.Char>オブジェクト: graphemes、および Unicode の補助平面内の文字に対応する Unicode 補助コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="43ecc-144">The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.</span></span>  
  
-   <span data-ttu-id="43ecc-145">書記素は、基本文字の後に 1 つまたは複数の結合文字で表されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-145">A grapheme is represented by a base character followed by one or more combining characters.</span></span> <span data-ttu-id="43ecc-146">たとえば、ä 文字が a で表されます<xref:System.Char>オブジェクトがコード ポイントは U +0 0061 a 続けて<xref:System.Char>コード ポイントが u+0308 オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-146">For example, the character ä is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308.</span></span> <span data-ttu-id="43ecc-147">この文字は、1 つで定義することも<xref:System.Char>U +0 00E4 のコード ポイントを持つオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-147">This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4.</span></span> <span data-ttu-id="43ecc-148">次の例に示す等値のカルチャに依存した比較を示しますこれら 2 つの表現と等しい場合は、通常の序数に基づく比較はありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-148">As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not.</span></span> <span data-ttu-id="43ecc-149">ただし、2 つの文字列は、正規化された場合、序数に基づく比較もあることを示します等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-149">However, if the two strings are normalized, an ordinal comparison also indicates that they are equal.</span></span> <span data-ttu-id="43ecc-150">(文字列を正規化する方法については、次を参照してください、[正規化](#Normalization)セクションです。)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-150">(For more information on normalizing strings, see the [Normalization](#Normalization) section.)</span></span>  
  
     [!code-cpp[System.String.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)]
     [!code-csharp[System.String.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)]
     [!code-vb[System.String.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)]  
  
-   <span data-ttu-id="43ecc-151">補助コード ポイント (サロゲート ペア) として表されます、Unicode、<xref:System.Char>コード ポイントが上位サロゲート オブジェクトが続く、<xref:System.Char>コード ポイントが下位サロゲートであるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-151">A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate.</span></span> <span data-ttu-id="43ecc-152">高サロゲート範囲が u+d800 から U+DBFF のコード単位です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-152">The code units of high surrogates range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="43ecc-153">低サロゲート範囲が u+dc00 から U+DFFF のコード単位です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-153">The code units of low surrogates range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="43ecc-154">サロゲート ペアは、16 の Unicode 補助平面内の文字を表すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-154">Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes.</span></span> <span data-ttu-id="43ecc-155">次の例は、サロゲート文字を作成しに渡します、<xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType>サロゲート ペアであるかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-155">The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType> method to determine whether it is a surrogate pair.</span></span>  
  
     [!code-cpp[System.String.Class#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)]
     [!code-csharp[System.String.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)]
     [!code-vb[System.String.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)]  
  
<a name="Unicode"></a>   
## <a name="strings-and-the-unicode-standard"></a><span data-ttu-id="43ecc-156">文字列と Unicode 標準</span><span class="sxs-lookup"><span data-stu-id="43ecc-156">Strings and The Unicode Standard</span></span>  
 <span data-ttu-id="43ecc-157">文字列の文字に対応する utf-16 でエンコードされたコード単位で表される<xref:System.Char>値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-157">Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values.</span></span>  
  
 <span data-ttu-id="43ecc-158">文字列内の各文字が、関連付けられている Unicode 文字カテゴリで .NET Framework で表現される、<xref:System.Globalization.UnicodeCategory>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-158">Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <xref:System.Globalization.UnicodeCategory> enumeration.</span></span> <span data-ttu-id="43ecc-159">文字またはサロゲート ペアのカテゴリを呼び出すことで決定できます、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-159">The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="43ecc-160">.NET では、文字と、対応するカテゴリのさまざまなプラットフォームで実行されている .NET の実装の特定のバージョンが同一文字カテゴリ情報を返すことを実行できるように独自のテーブルを保持します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-160">.NET maintains its own table of characters and their corresponding categories, which ensures that a specific version of a .NET implementation running on different platforms returns identical character category information.</span></span> <span data-ttu-id="43ecc-161">次の表には、.NET のバージョンおよびそれらの文字のカテゴリを基になる Unicode 標準のバージョンが一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-161">The following table lists .NET versions and the versions of the Unicode Standard on which their character categories are based.</span></span>  
  
|<span data-ttu-id="43ecc-162">.NET Framework のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-162">.NET Framework version</span></span>|<span data-ttu-id="43ecc-163">Unicode 標準のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-163">Version of the Unicode Standard</span></span>|  
|----------------------------|-------------------------------------|  
|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[<span data-ttu-id="43ecc-164">Unicode 標準にバージョン 4.0.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-164">The Unicode Standard, Version 4.0.0</span></span>](https://www.unicode.org/versions/Unicode4.0.0/)|  
|<span data-ttu-id="43ecc-165">.NET Framework 2.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-165">The .NET Framework 2.0</span></span>|[<span data-ttu-id="43ecc-166">Unicode 標準に 5.0.0 以降のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-166">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[<span data-ttu-id="43ecc-167">Unicode 標準に 5.0.0 以降のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-167">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[<span data-ttu-id="43ecc-168">Unicode 標準に 5.0.0 以降のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-168">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]|[<span data-ttu-id="43ecc-169">Unicode 標準にバージョン 6.3.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-169">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v451](~/includes/net-v451-md.md)]|[<span data-ttu-id="43ecc-170">Unicode 標準にバージョン 6.3.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-170">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v452](~/includes/net-v452-md.md)]|[<span data-ttu-id="43ecc-171">Unicode 標準にバージョン 6.3.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-171">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v46](~/includes/net-v46-md.md)]|[<span data-ttu-id="43ecc-172">Unicode 標準にバージョン 6.3.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-172">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v461](~/includes/net-v461-md.md)]|[<span data-ttu-id="43ecc-173">Unicode 標準にバージョン 6.3.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-173">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v462](~/includes/net-v462-md.md)]|[<span data-ttu-id="43ecc-174">Unicode 標準にバージョン 8.0.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-174">The Unicode Standard, Version 8.0.0</span></span>](https://www.unicode.org/versions/Unicode8.0.0/)|  
|<span data-ttu-id="43ecc-175">.NET core (すべてのバージョン)</span><span class="sxs-lookup"><span data-stu-id="43ecc-175">.NET Core (all versions)</span></span>|[<span data-ttu-id="43ecc-176">Unicode 標準にバージョン 8.0.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-176">The Unicode Standard, Version 8.0.0</span></span>](https://www.unicode.org/versions/Unicode8.0.0/)|
  
 <span data-ttu-id="43ecc-177">さらに、.NET Framework は、文字列比較をサポートし、Unicode 標準に基づく並べ替え。</span><span class="sxs-lookup"><span data-stu-id="43ecc-177">In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard.</span></span> <span data-ttu-id="43ecc-178">を介して、.NET Framework のバージョンでは、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、.NET Framework は、独自の文字列データのテーブルを保持します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-178">In versions of the .NET Framework through the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework maintains its own table of string data.</span></span> <span data-ttu-id="43ecc-179">以降の .NET Framework のバージョンの場合は true。 これはまた、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] Windows 7 で実行されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-179">This is also true of versions of the .NET Framework starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Windows 7.</span></span> <span data-ttu-id="43ecc-180">以降で、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]ウィンドウ 8 と Windows オペレーティング システムの以降のバージョンで実行して、実行時デリゲート文字列の比較と並べ替え、オペレーティング システムを操作します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-180">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system.</span></span> <span data-ttu-id="43ecc-181">次の表には、.NET Framework のバージョンと文字比較と並べ替えの基に、Unicode 規格のバージョンが一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-181">The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.</span></span>  
  
|<span data-ttu-id="43ecc-182">.NET Framework のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-182">.NET Framework version</span></span>|<span data-ttu-id="43ecc-183">Unicode 標準のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-183">Version of the Unicode Standard</span></span>|  
|----------------------------|-------------------------------------|  
|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[<span data-ttu-id="43ecc-184">Unicode 標準にバージョン 4.0.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-184">The Unicode Standard, Version 4.0.0</span></span>](https://www.unicode.org/versions/Unicode4.0.0/)|  
|<span data-ttu-id="43ecc-185">.NET Framework 2.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-185">The .NET Framework 2.0</span></span>|[<span data-ttu-id="43ecc-186">Unicode 標準に 5.0.0 以降のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-186">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[<span data-ttu-id="43ecc-187">Unicode 標準に 5.0.0 以降のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-187">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[<span data-ttu-id="43ecc-188">Unicode 標準に 5.0.0 以降のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-188">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]<span data-ttu-id="43ecc-189"> Windows 7 以降</span><span class="sxs-lookup"><span data-stu-id="43ecc-189"> and later on Windows 7</span></span>|[<span data-ttu-id="43ecc-190">Unicode 標準に 5.0.0 以降のバージョン</span><span class="sxs-lookup"><span data-stu-id="43ecc-190">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]<span data-ttu-id="43ecc-191"> および Windows 8 以降の Windows オペレーティング システムでそれ以降</span><span class="sxs-lookup"><span data-stu-id="43ecc-191"> and later on Windows 8 and later Windows operating systems</span></span>|[<span data-ttu-id="43ecc-192">Unicode 標準にバージョン 6.3.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-192">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  

<span data-ttu-id="43ecc-193">.NET Core での並べ替えと比較の操作はに基づいて[Unicode 標準のバージョン 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-193">In .NET Core, sorting and comparison operations are based on [Version 8.0.0 of the Unicode Standard](https://www.unicode.org/versions/Unicode8.0.0/).</span></span>

<a name="EmbeddedNulls"></a>   
## <a name="strings-and-embedded-null-characters"></a><span data-ttu-id="43ecc-194">文字列と埋め込まれた null 文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-194">Strings and embedded null characters</span></span>  
 <span data-ttu-id="43ecc-195">.NET Framework で、<xref:System.String>オブジェクトは、文字列の長さの一部としてカウント埋め込まれた null 文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-195">In the .NET Framework, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length.</span></span> <span data-ttu-id="43ecc-196">ただし、C や C++ などの一部の言語で null 文字が文字列の末尾を示す以外の場合は、文字列の一部ではありませんし、文字列の長さの一部としてはカウントされません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-196">However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string's length.</span></span> <span data-ttu-id="43ecc-197">つまり、文字列は C および C++ プログラマまたは C または C++ で記述されたライブラリを使用する次の一般的な前提条件に適用すると、必ずしも無効である<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-197">This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:</span></span>  
  
-   <span data-ttu-id="43ecc-198">によって返される値、`strlen`または`wcslen`関数が必ずしもと等しくない<xref:System.String.Length%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-198">The value returned by the `strlen` or `wcslen` functions does not necessarily equal <xref:System.String.Length%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="43ecc-199">によって作成される文字列、`strcpy_s`または`wcscpy_s`関数が必ずしも同じによって作成される文字列ではありません、<xref:System.String.Copy%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-199">The string created by the `strcpy_s` or `wcscpy_s` functions is not necessarily identical to the string created by the <xref:System.String.Copy%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="43ecc-200">そのネイティブ C および C++ コードをインスタンス化することを確認する必要があります<xref:System.String>オブジェクト、および渡されるコード<xref:System.String>プラットフォームを使用したオブジェクトの起動に埋め込まれた null 文字が文字列の末尾をマークしないと仮定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-200">You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, don't assume that an embedded null character marks the end of the string.</span></span>  
  
 <span data-ttu-id="43ecc-201">文字列に埋め込まれた null 文字は文字列が並べ替えられます (またはと比較して) と、文字列が検索時に異なる方法でも扱われます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-201">Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched.</span></span> <span data-ttu-id="43ecc-202">インバリアント カルチャを使用する比較を含む 2 つの文字列のカルチャに依存した比較を実行するときに、null 文字は無視されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-202">Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture.</span></span> <span data-ttu-id="43ecc-203">序数に基づくまたは区別しない序数に基づく比較ののみと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-203">They are considered only for ordinal or case-insensitive ordinal comparisons.</span></span> <span data-ttu-id="43ecc-204">その一方で、埋め込まれた null 文字は常に考慮などのメソッドに文字列を検索するときに<xref:System.String.Contains%2A>、 <xref:System.String.StartsWith%2A>、および<xref:System.String.IndexOf%2A>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-204">On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.</span></span>  
  
<a name="Indexes"></a>   
## <a name="strings-and-indexes"></a><span data-ttu-id="43ecc-205">文字列とインデックス</span><span class="sxs-lookup"><span data-stu-id="43ecc-205">Strings and indexes</span></span>  
 <span data-ttu-id="43ecc-206">インデックスの位置とは、<xref:System.Char>内のオブジェクト (Unicode 文字ではない)、<xref:System.String>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-206">An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>.</span></span> <span data-ttu-id="43ecc-207">インデックスとは、0 から始まる、負でない番号を文字列で、インデックス位置 0 は、最初の位置から開始します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-207">An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero.</span></span> <span data-ttu-id="43ecc-208">いくつかの検索方法など<xref:System.String.IndexOf%2A>と<xref:System.String.LastIndexOf%2A>文字のインデックスを返しますまたは、文字列インスタンスで文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-208">A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.</span></span>  
  
 <span data-ttu-id="43ecc-209"><xref:System.String.Chars%2A>プロパティでは、個別にアクセスできます。<xref:System.Char>文字列内のインデックス位置でのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-209">The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string.</span></span> <span data-ttu-id="43ecc-210"><xref:System.String.Chars%2A>プロパティ (Visual Basic) の既定のプロパティまたはインデクサー (C# の場合) は、個別にアクセスすることができます<xref:System.Char>次のようなコードを使用して、文字列内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-210">Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following.</span></span> <span data-ttu-id="43ecc-211">このコードは、空白文字または文字列に含まれる文字数を判断するための文字列の区切り文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-211">This code looks for white space or punctuation characters in a string to determine how many words the string contains.</span></span>  
  
 [!code-cpp[System.String.Class#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)]
 [!code-csharp[System.String.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)]
 [!code-vb[System.String.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)]  
  
 <span data-ttu-id="43ecc-212"><xref:System.String>クラスが実装する、<xref:System.Collections.IEnumerable>インターフェイスも反復処理できる、<xref:System.Char>を使用して、文字列内のオブジェクト、`foreach`構築は、次の例のようにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-212">Because the <xref:System.String> class implements the <xref:System.Collections.IEnumerable> interface, you can also iterate through the <xref:System.Char> objects in a string by using a `foreach` construct, as the following example shows.</span></span>  
  
 [!code-cpp[System.String.Class#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)]
 [!code-csharp[System.String.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)]
 [!code-vb[System.String.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)]  
  
 <span data-ttu-id="43ecc-213">文字は、Unicode でエンコードされた 1 つ以上にするために、連続したインデックス値が連続する Unicode 文字に対応していません<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-213">Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object.</span></span> <span data-ttu-id="43ecc-214">具体的には、文字列には、基本文字の後に 1 つまたは複数の結合文字またはサロゲート ペアで形成されるテキストの複数の文字の単位があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-214">In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs.</span></span> <span data-ttu-id="43ecc-215">代わりに Unicode 文字を使用する<xref:System.Char>オブジェクトを使用して、<xref:System.Globalization.StringInfo?displayProperty=nameWithType>と<xref:System.Globalization.TextElementEnumerator>クラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-215">To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> and <xref:System.Globalization.TextElementEnumerator> classes.</span></span> <span data-ttu-id="43ecc-216">次の例は、コードで動作する違いを示しています。<xref:System.Char>オブジェクトと Unicode 文字を操作するコードです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-216">The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters.</span></span> <span data-ttu-id="43ecc-217">文字または文の各単語のテキスト要素の数を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-217">It compares the number of characters or text elements in each word of a sentence.</span></span> <span data-ttu-id="43ecc-218">文字列には、基本文字、組み合わせ文字の 2 つのシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-218">The string includes two sequences of a base character followed by a combining character.</span></span>  
  
 [!code-cpp[System.String.Class#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)]
 [!code-csharp[System.String.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)]
 [!code-vb[System.String.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)]  
  
 <span data-ttu-id="43ecc-219">この例を使用して、テキスト要素では処理、<xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType>メソッドおよび<xref:System.Globalization.TextElementEnumerator>文字列内のすべてのテキスト要素を列挙するクラス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-219">This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string.</span></span> <span data-ttu-id="43ecc-220">呼び出すことによってテキストの各要素の開始インデックスを含む配列を取得することも、<xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-220">You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="43ecc-221">個人ではなくテキスト単位の使用の詳細については<xref:System.Char>値を参照してください、<xref:System.Globalization.StringInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-221">For more information about working with units of text rather than individual <xref:System.Char> values, see the <xref:System.Globalization.StringInfo> class.</span></span>  
  
<a name="Nulls"></a>   
## <a name="null-strings-and-empty-strings"></a><span data-ttu-id="43ecc-222">Null 文字列と空の文字列</span><span class="sxs-lookup"><span data-stu-id="43ecc-222">Null strings and empty strings</span></span>  
 <span data-ttu-id="43ecc-223">宣言されていますが、値が割り当てられていない文字列が`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-223">A string that has been declared but has not been assigned a value is `null`.</span></span> <span data-ttu-id="43ecc-224">その文字列に対するメソッドの呼び出しを試みるとスロー、<xref:System.NullReferenceException>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-224">Attempting to call methods on that string throws a <xref:System.NullReferenceException>.</span></span> <span data-ttu-id="43ecc-225">Null 文字列とは異なる値が文字列である空の文字列""または<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-225">A null string is different from an empty string, which is a string whose value is "" or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-226">場合によっては、メソッド呼び出しで引数として文字列を null または空の文字列のいずれかを渡すことによってスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="43ecc-226">In some cases, passing either a null string or an empty string as an argument in a method call throws an exception.</span></span> <span data-ttu-id="43ecc-227">たとえば、null 文字列を渡すこと、<xref:System.Int32.Parse%2A?displayProperty=nameWithType>メソッドがスローされます、<xref:System.ArgumentNullException>がスローされます、空の文字列を渡すと、<xref:System.FormatException>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-227">For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=nameWithType> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="43ecc-228">それ以外の場合に、メソッド引数は、null 文字列または空の文字列のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-228">In other cases, a method argument can be either a null string or an empty string.</span></span> <span data-ttu-id="43ecc-229">たとえば、提供している場合、<xref:System.IFormattable>と同じ null 文字列と空の文字列の両方で [全般] ("G") 書式指定子とするクラスの実装、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-229">For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general ("G") format specifier.</span></span>  
  
 <span data-ttu-id="43ecc-230"><xref:System.String>クラスには、文字列があるかどうかをテストすることができるようにする次の 2 つの便利なメソッドが含まれています。`null`または空。</span><span class="sxs-lookup"><span data-stu-id="43ecc-230">The <xref:System.String> class includes the following two convenience methods that enable you to test whether a string is `null` or empty:</span></span>  
  
-   <span data-ttu-id="43ecc-231"><xref:System.String.IsNullOrEmpty%2A>、文字列のいずれかの形式がかどうかを示します`null`と等しいか<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-231"><xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-232">このメソッドは、次のようなコードを使用する必要を排除できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-232">This method eliminates the need to use code such as the following:</span></span>  
  
     [!code-cpp[System.String.Class.Null#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)]
     [!code-csharp[System.String.Class.Null#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)]
     [!code-vb[System.String.Class.Null#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)]  
  
-   <span data-ttu-id="43ecc-233"><xref:System.String.IsNullOrWhiteSpace%2A>、文字列の形式があるかどうかを示します`null`、equals <xref:System.String.Empty?displayProperty=nameWithType>、または空白文字のみで構成されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-233"><xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=nameWithType>, or consists exclusively of white-space characters.</span></span> <span data-ttu-id="43ecc-234">このメソッドは、次のようなコードを使用する必要を排除できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-234">This method eliminates the need to use code such as the following:</span></span>  
  
     [!code-cpp[System.String.Class.Null#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)]
     [!code-csharp[System.String.Class.Null#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)]
     [!code-vb[System.String.Class.Null#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)]  
  
 <span data-ttu-id="43ecc-235">次の例では、<xref:System.String.IsNullOrEmpty%2A>メソッドで、 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 、カスタムの実装`Temperature`クラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-235">The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation of a custom `Temperature` class.</span></span> <span data-ttu-id="43ecc-236">メソッドは、"G"、"C"、"F"および"K"書式指定文字列をサポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-236">The method supports the "G", "C", "F", and "K" format strings.</span></span> <span data-ttu-id="43ecc-237">空の書式指定文字列または形式の文字列値を持つ場合は、`null`渡される、メソッドにその値が"G"書式指定文字列に変更します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-237">If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the "G" format string.</span></span>  
  
 [!code-cpp[System.String.Class.Null#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)]
 [!code-csharp[System.String.Class.Null#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)]
 [!code-vb[System.String.Class.Null#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)]  
  
<a name="Immutability"></a>   
## <a name="immutability-and-the-stringbuilder-class"></a><span data-ttu-id="43ecc-238">不変性と StringBuilder クラス</span><span class="sxs-lookup"><span data-stu-id="43ecc-238">Immutability and the StringBuilder class</span></span>  
 <span data-ttu-id="43ecc-239">A<xref:System.String>オブジェクトは不変と呼ばれる (読み取り専用)、作成した後、その値を変更できないためです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-239">A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created.</span></span> <span data-ttu-id="43ecc-240">表示を変更する方法、<xref:System.String>オブジェクトは実際には、新しい返す<xref:System.String>変更を含むオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-240">Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.</span></span>  
  
 <span data-ttu-id="43ecc-241">文字列は変更できないために、追加または削除する 1 つの文字列が、大幅なパフォーマンスの低下を正確に表示される内容を実行する文字列操作ルーチンが繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-241">Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty.</span></span> <span data-ttu-id="43ecc-242">たとえば、次のコードは、乱数ジェネレーターを使用して、0x0001 に 0x052F の範囲の 1000 文字の文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-242">For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F.</span></span> <span data-ttu-id="43ecc-243">という名前の既存の文字列に文字を追加する文字列の連結を使用するように見えますが、コード`str`、実際に作成、新しい<xref:System.String>各連結操作のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-243">Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation.</span></span>  
  
 [!code-cpp[System.String.Class#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)]
 [!code-csharp[System.String.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)]
 [!code-vb[System.String.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)]  
  
 <span data-ttu-id="43ecc-244">使用することができます、<xref:System.Text.StringBuilder>クラスの代わりに、<xref:System.String>文字列の値に複数の変更を構成する操作のクラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-244">You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string.</span></span> <span data-ttu-id="43ecc-245">インスタンスとは異なり、<xref:System.String>クラス、<xref:System.Text.StringBuilder>オブジェクトが変更可能です。 1 つの文字列で行われる連結、追加、または文字列から部分文字列を削除するときにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-245">Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string.</span></span> <span data-ttu-id="43ecc-246">値の変更が完了したら、<xref:System.Text.StringBuilder>オブジェクトを呼び出すことができます、<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>を文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-246">When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method to convert it to a string.</span></span> <span data-ttu-id="43ecc-247">次の例が置き換えられます、<xref:System.String>で 0x052F を 0x0001 に範囲の 1000 ランダムな文字を連結する、前の例で使用される、<xref:System.Text.StringBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-247">The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.</span></span>  
  
 [!code-cpp[System.String.Class#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)]
 [!code-csharp[System.String.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)]
 [!code-vb[System.String.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)]  
  
<a name="CultureSensitive"></a>   
## <a name="ordinal-vs-culture-sensitive-operations"></a><span data-ttu-id="43ecc-248">カルチャに依存する操作との序数</span><span class="sxs-lookup"><span data-stu-id="43ecc-248">Ordinal vs. culture-sensitive operations</span></span>  
 <span data-ttu-id="43ecc-249">メンバー、<xref:System.String>クラスで序数に基づくか、カルチャ (言語) 操作を実行する、<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-249">Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object.</span></span> <span data-ttu-id="43ecc-250">序数に基づく操作の対象とそれぞれの数値に基づいて<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-250">An ordinal operation acts on the numeric value of each <xref:System.Char> object.</span></span> <span data-ttu-id="43ecc-251">カルチャに依存した操作の値には、機能、<xref:System.String>オブジェクト、およびはカルチャに固有の大文字小文字の区別、並べ替え、書式設定、およびアカウントにルールを解析します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-251">A culture-sensitive operation acts on the value of the <xref:System.String> object, and takes culture-specific casing, sorting, formatting, and parsing rules into account.</span></span> <span data-ttu-id="43ecc-252">カルチャに依存する操作は、明示的に宣言されたカルチャまたは現在のカルチャのコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-252">Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture.</span></span> <span data-ttu-id="43ecc-253">操作の 2 つの種類は、同じ文字列で実行されるときに、非常に異なる結果を生成できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-253">The two kinds of operations can produce very different results when they are performed on the same string.</span></span>  
  
 <span data-ttu-id="43ecc-254">.NET Framework では、インバリアント カルチャを使用してカルチャに依存しない言語的な文字列操作もがサポートしています (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>)、これは、領域の独立した英語の言語のカルチャ設定に基づいて疎です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-254">The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>), which is loosely based on the culture settings of the English language independent of region.</span></span> <span data-ttu-id="43ecc-255">その他のとは異なり<xref:System.Globalization.CultureInfo?displayProperty=nameWithType>設定、インバリアント カルチャの設定はシステム、および .NET Framework のバージョン間でのシステムからの 1 台のコンピューター上の一貫性を保持することが保証されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-255">Unlike other <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework.</span></span> <span data-ttu-id="43ecc-256">インバリアント カルチャでは、すべてのカルチャに種類の文字列比較の安定性を保証するための黒いボックスとして表示と順序を存在できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-256">The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="43ecc-257">アプリケーションの場合、ファイル名などのシンボル id のセキュリティを決定や名前付きパイプ、または XML ファイル内のテキスト ベースのデータなどの永続化されたデータは、操作は、カルチャに依存した比較ではなく、序数に基づく比較を使用してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-257">If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-258">これは、序数に基づく比較が比較する文字のバイナリ値にのみ異なりますが、カルチャに依存した比較では、カルチャによって異なる結果を実際には、yield ためです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-258">This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="43ecc-259">文字列操作を実行するほとんどのメソッドを型のパラメーターを持つオーバー ロードは、<xref:System.StringComparison>メソッドが序数に基づくまたはカルチャに依存した操作を実行しているかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-259">Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation.</span></span> <span data-ttu-id="43ecc-260">一般に、このオーバー ロードを呼び出し、クリア、メソッドの意図を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-260">In general, you should call this overload to make the intent of your method call clear.</span></span> <span data-ttu-id="43ecc-261">ベスト プラクティスと序数とカルチャの文字列の操作の使用に関するガイダンスは、次を参照してください。[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-261">For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="43ecc-262">操作を[大文字小文字の区別](#casing)、[解析および書式設定](#parsing)、[比較と並べ替え](#comparison)、および[等価性テスト](#equality)序数またはカルチャに依存できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-262">Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive.</span></span> <span data-ttu-id="43ecc-263">次のセクションでは、操作の各カテゴリについて説明します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-263">The following sections discuss each category of operation.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="43ecc-264">常に呼び出し、クリア、メソッドの意図は、メソッドのオーバー ロードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-264">You should always call a method overload that makes the intent of your method call clear.</span></span> <span data-ttu-id="43ecc-265">たとえば、呼び出す代わりに、 <xref:System.String.Compare%28System.String%2CSystem.String%29> 、現在のカルチャの規則を使用して 2 つの文字列のカルチャに依存した比較を実行するメソッドを呼び出す必要があります、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>の値を持つメソッド<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-265">For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> for the `comparisonType` argument.</span></span> <span data-ttu-id="43ecc-266">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-266">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
<a name="casing"></a>   
### <a name="casing"></a><span data-ttu-id="43ecc-267">大文字小文字の区別</span><span class="sxs-lookup"><span data-stu-id="43ecc-267">Casing</span></span>  
 <span data-ttu-id="43ecc-268">大文字小文字の規則は Unicode 文字の大文字と小文字を変更する方法を決定します。たとえばから小文字を大文字にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-268">Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase.</span></span> <span data-ttu-id="43ecc-269">多くの場合、大文字と小文字の操作は、文字列を比較する前に実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-269">Often, a casing operation is performed before a string comparison.</span></span> <span data-ttu-id="43ecc-270">たとえば、別の文字列を大文字で比較ができるように文字列を大文字に変換する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-270">For example, a string might be converted to uppercase so that it can be compared with another uppercase string.</span></span> <span data-ttu-id="43ecc-271">呼び出すことによって小文字文字列内の文字に変換することができます、<xref:System.String.ToLower%2A>または<xref:System.String.ToLowerInvariant%2A>メソッド、およびはそれらを呼び出すことによって大文字で変換できます、<xref:System.String.ToUpper%2A>または<xref:System.String.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-271">You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="43ecc-272">さらに、使用することができます、<xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType>文字列を大文字に変換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-272">In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType> method to convert a string to title case.</span></span>  
  
 <span data-ttu-id="43ecc-273">大文字と小文字の操作は、現在のカルチャ、特定のカルチャまたはインバリアント カルチャの規則に基づくことができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-273">Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture.</span></span> <span data-ttu-id="43ecc-274">大文字小文字マップは、使用するカルチャによって異なることができます、ため、大文字と小文字の操作の結果がカルチャによって異なることができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-274">Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture.</span></span> <span data-ttu-id="43ecc-275">大文字と小文字の実際の相違点は、次の 3 種類のことです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-275">The actual differences in casing are of three kinds:</span></span>  
  
-   <span data-ttu-id="43ecc-276">大文字のマッピングに、ラテン語 I CAPITAL LETTER の相違点 (u+0049)、LATIN SMALL 文字 I (u+0069)、LATIN CAPITAL LETTER I (u+0130) 上のドットと LATIN SMALL 文字ドットなし I (U +0 0131)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-276">Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131).</span></span> <span data-ttu-id="43ecc-277">TR-TR (トルコ語 (トルコ)) と (アゼルバイジャン、ラテン文字) の az-Latn-AZ カルチャ、および tr、az、および-az-latn ニュートラル カルチャで LATIN SMALL 文字ドットなし I、LATIN CAPITAL LETTER I の小文字表現は、LATIN SMALL 文字 I の大文字表現 LATIN CAPITAL LETTER I とドットの上。</span><span class="sxs-lookup"><span data-stu-id="43ecc-277">In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span> <span data-ttu-id="43ecc-278">その他のすべてのカルチャで LATIN SMALL 文字 I と同等の大文字と小文字は LATIN CAPITAL LETTER、インバリアント カルチャをなどです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-278">In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.</span></span>  
  
     <span data-ttu-id="43ecc-279">次の例は、ファイル システムへのアクセスを防ぐために失敗する場合、カルチャの大文字と小文字の比較に依存しているに設計された、文字列の比較方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-279">The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison.</span></span> <span data-ttu-id="43ecc-280">(インバリアント カルチャの大文字と小文字の規則が使用されています。)</span><span class="sxs-lookup"><span data-stu-id="43ecc-280">(The casing conventions of the invariant culture should have been used.)</span></span>  
  
     [!code-csharp[System.String.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)]
     [!code-vb[System.String.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)]  
  
-   <span data-ttu-id="43ecc-281">インバリアント カルチャと他のすべてのカルチャで大文字小文字マップ違いです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-281">Differences in case mappings between the invariant culture and all other cultures.</span></span> <span data-ttu-id="43ecc-282">このような場合、インバリアント カルチャの大文字小文字の規則を使用して、文字を大文字または小文字を変更すると、同じ文字を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-282">In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character.</span></span> <span data-ttu-id="43ecc-283">他のすべてのカルチャの場合は、別の文字を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-283">For all other cultures, it returns a different character.</span></span> <span data-ttu-id="43ecc-284">一部の影響を受ける文字は、次の表に一覧表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-284">Some of the affected characters are listed in the following table.</span></span>  
  
    |<span data-ttu-id="43ecc-285">文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-285">Character</span></span>|<span data-ttu-id="43ecc-286">変更した場合</span><span class="sxs-lookup"><span data-stu-id="43ecc-286">If changed to</span></span>|<span data-ttu-id="43ecc-287">戻り値</span><span class="sxs-lookup"><span data-stu-id="43ecc-287">Returns</span></span>|  
    |---------------|-------------------|-------------|  
    |<span data-ttu-id="43ecc-288">ミクロン記号 (U +0 00B5)</span><span class="sxs-lookup"><span data-stu-id="43ecc-288">MICRON SIGN (U+00B5)</span></span>|<span data-ttu-id="43ecc-289">大文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-289">Uppercase</span></span>|<span data-ttu-id="43ecc-290">ギリシャ語 CAPITAL LETTER MU (U +0-39 C)</span><span class="sxs-lookup"><span data-stu-id="43ecc-290">GREEK CAPITAL LETTER MU (U+-39C)</span></span>|  
    |<span data-ttu-id="43ecc-291">ラテン文字の大文字、文字ではドット (U+0130) 上</span><span class="sxs-lookup"><span data-stu-id="43ecc-291">LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</span></span>|<span data-ttu-id="43ecc-292">小文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-292">Lowercase</span></span>|<span data-ttu-id="43ecc-293">文字で表されるラテン小 (U+0069)</span><span class="sxs-lookup"><span data-stu-id="43ecc-293">LATIN SMALL LETTER I (U+0069)</span></span>|  
    |<span data-ttu-id="43ecc-294">ドットなしの LATIN SMALL LETTER $I (U +0 0131)</span><span class="sxs-lookup"><span data-stu-id="43ecc-294">LATIN SMALL LETTER DOTLESS I (U+0131)</span></span>|<span data-ttu-id="43ecc-295">大文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-295">Uppercase</span></span>|<span data-ttu-id="43ecc-296">文字でラテン文字の大文字 (U+0049)</span><span class="sxs-lookup"><span data-stu-id="43ecc-296">LATIN CAPITAL LETTER I (U+0049)</span></span>|  
    |<span data-ttu-id="43ecc-297">LATIN SMALL LETTER 長い S (U +0 017F)</span><span class="sxs-lookup"><span data-stu-id="43ecc-297">LATIN SMALL LETTER LONG S (U+017F)</span></span>|<span data-ttu-id="43ecc-298">大文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-298">Uppercase</span></span>|<span data-ttu-id="43ecc-299">LATIN CAPITAL LETTER S (U +0 0053)</span><span class="sxs-lookup"><span data-stu-id="43ecc-299">LATIN CAPITAL LETTER S (U+0053)</span></span>|  
    |<span data-ttu-id="43ecc-300">キャロン付き文字 Z で LATIN CAPITAL LETTER D (U +0 01C 5)</span><span class="sxs-lookup"><span data-stu-id="43ecc-300">LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)</span></span>|<span data-ttu-id="43ecc-301">小文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-301">Lowercase</span></span>|<span data-ttu-id="43ecc-302">キャロン付き LATIN SMALL LETTER DZ (U +0 01C 6)</span><span class="sxs-lookup"><span data-stu-id="43ecc-302">LATIN SMALL LETTER DZ WITH CARON (U+01C6)</span></span>|  
    |<span data-ttu-id="43ecc-303">結合ギリシャ YPOGEGRAMMENI (U +0 0345)</span><span class="sxs-lookup"><span data-stu-id="43ecc-303">COMBINING GREEK YPOGEGRAMMENI (U+0345)</span></span>|<span data-ttu-id="43ecc-304">大文字</span><span class="sxs-lookup"><span data-stu-id="43ecc-304">Uppercase</span></span>|<span data-ttu-id="43ecc-305">ギリシャ語 CAPITAL LETTER IOTA (U +0 0399)</span><span class="sxs-lookup"><span data-stu-id="43ecc-305">GREEK CAPITAL LETTER IOTA (U+0399)</span></span>|  
  
-   <span data-ttu-id="43ecc-306">ASCII 文字の範囲内で、大文字と小文字が混在ペアの 2 文字の大文字小文字マップの違い。</span><span class="sxs-lookup"><span data-stu-id="43ecc-306">Differences in case mappings of two-letter mixed-case pairs in the ASCII character range.</span></span> <span data-ttu-id="43ecc-307">ほとんどのカルチャで 2 文字の大文字と小文字が混在ペアは、等価 2 文字の大文字または小文字の組み合わせと同じです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-307">In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair.</span></span> <span data-ttu-id="43ecc-308">次のカルチャで次の 2 文字のペアの場合は true、digraph に各ケースで比較されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-308">This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:</span></span>  
  
    -   <span data-ttu-id="43ecc-309">"lJ"と"nJ"HR-HR (クロアチア語 (クロアチア)) のカルチャ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-309">"lJ" and "nJ" in the hr-HR (Croatian (Croatia)) culture.</span></span>  
  
    -   <span data-ttu-id="43ecc-310">"cH"CS-CZ (チェコ語 (チェコ共和国)) と sk-SK (スロバキア語 (スロバキア)) のカルチャでします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-310">"cH" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.</span></span>  
  
    -   <span data-ttu-id="43ecc-311">"aA"DA-DK (デンマーク語 (デンマーク)) のカルチャ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-311">"aA" in the da-DK (Danish (Denmark)) culture.</span></span>  
  
    -   <span data-ttu-id="43ecc-312">"cS"、"dZ"、"dZS"、"nY"、"sZ"、"tY"および"zS"HU-HU (ハンガリー語 (ハンガリー)) のカルチャ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-312">"cS", "dZ", "dZS", "nY", "sZ", "tY", and "zS" in the hu-HU (Hungarian (Hungary)) culture.</span></span>  
  
    -   <span data-ttu-id="43ecc-313">"cH"と"lL"es-es_tradnl (スペイン語 (スペイン、トラディショナル ソート)) のカルチャ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-313">"cH" and "lL" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.</span></span>  
  
    -   <span data-ttu-id="43ecc-314">"cH"、"gI"、"kH"、"nG""nH"、"pH"、"qU'、"tH"と"tR"vi VN (ベトナム語 (ベトナム)) のカルチャ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-314">"cH", "gI", "kH", "nG" "nH", "pH", "qU', "tH", and "tR" in the vi-VN (Vietnamese (Vietnam)) culture.</span></span>  
  
     <span data-ttu-id="43ecc-315">ただし、これらのペアは固定文字列または識別子が一般的ではないために、これらのペアのカルチャに依存した比較が、問題を作成する状態を発生するのにいつもはありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-315">However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.</span></span>  
  
 <span data-ttu-id="43ecc-316">次の例は、大文字小文字の規則のカルチャ文字列を大文字に変換するときに間の違いの一部を示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-316">The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.</span></span>  
  
 [!code-cpp[System.String.Class#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)]
 [!code-csharp[System.String.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)]
 [!code-vb[System.String.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)]  
  
<a name="parsing"></a>   
### <a name="parsing-and-formatting"></a><span data-ttu-id="43ecc-317">解析および書式設定</span><span class="sxs-lookup"><span data-stu-id="43ecc-317">Parsing and formatting</span></span>  
 <span data-ttu-id="43ecc-318">書式設定と解析、逆の操作です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-318">Formatting and parsing are inverse operations.</span></span> <span data-ttu-id="43ecc-319">書式設定規則は、解析規則など、日付と時刻の値を文字列形式に変換する方法を決定する一方、日付と時刻や数値など、値をその文字列形式に変換する方法を決定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-319">Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time.</span></span> <span data-ttu-id="43ecc-320">書式設定と解析規則の両方には、文化的慣習に依存します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-320">Both formatting and parsing rules are dependent on cultural conventions.</span></span> <span data-ttu-id="43ecc-321">次の例は、カルチャ固有の日付文字列を解釈するときに生じる可能性のある、あいまいさを示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-321">The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string.</span></span> <span data-ttu-id="43ecc-322">日付の文字列を生成するために使用されたカルチャの規則がわからなければ、2011 年 1 月 3 日または 2011 年 3 月 1 日の 03/01/2011、2011 年 3 月 1 日と 01/03/2011 を表すかどうかを知ることはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-322">Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.</span></span>  
  
 [!code-cpp[System.String.Class#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)]
 [!code-csharp[System.String.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)]
 [!code-vb[System.String.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)]  
  
 <span data-ttu-id="43ecc-323">同様に、次の例に示す 1 つの文字列は解析操作での規則を使用する、カルチャによって異なる日付を生成できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-323">Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.</span></span>  
  
 [!code-cpp[System.String.Class#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)]
 [!code-csharp[System.String.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)]
 [!code-vb[System.String.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)]  
  
<a name="comparison"></a>   
### <a name="string-comparison-and-sorting"></a><span data-ttu-id="43ecc-324">文字列比較と並べ替え</span><span class="sxs-lookup"><span data-stu-id="43ecc-324">String comparison and sorting</span></span>  
 <span data-ttu-id="43ecc-325">比較して、文字列の並べ替えに関する規則には、カルチャが異なります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-325">Conventions for comparing and sorting strings vary from culture to culture.</span></span> <span data-ttu-id="43ecc-326">たとえば、並べ替え順序は、表音または文字のビジュアル表現に基づいて可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-326">For example, the sort order may be based on phonetics or on the visual representation of characters.</span></span> <span data-ttu-id="43ecc-327">東アジア圏の言語では、文字が表意文字の画数と部首によって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-327">In East Asian languages, characters are sorted by the stroke and radical of ideographs.</span></span> <span data-ttu-id="43ecc-328">また、並べ替えは、言語やカルチャで使用されているアルファベットの順序によっても異なります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-328">Sorting also depends on the order languages and cultures use for the alphabet.</span></span> <span data-ttu-id="43ecc-329">たとえば、デンマーク語の文字 "Æ" は、アルファベットでは "Z" の後に位置します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-329">For example, the Danish language has an "Æ" character that it sorts after "Z" in the alphabet.</span></span> <span data-ttu-id="43ecc-330">さらに、または、区別しない比較を実行でき、場合によっては大文字小文字の規則もカルチャによって異なります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-330">In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture.</span></span> <span data-ttu-id="43ecc-331">序数に基づく比較は、その一方で、文字列を比較すると、文字列の並べ替えで個別の文字の Unicode コード ポイントを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-331">Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.</span></span>  
  
 <span data-ttu-id="43ecc-332">並べ替えに関する規則は、Unicode 文字のアルファベット順とどのように 2 つの文字列を相互に比較を決定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-332">Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other.</span></span> <span data-ttu-id="43ecc-333">たとえば、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType>メソッドに基づく 2 つの文字列を比較し、<xref:System.StringComparison>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-333">For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method compares two strings based on the <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="43ecc-334">パラメーター値が場合<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>、メソッドは、パラメーターの値がある場合、現在のカルチャの規則を使用する言語的な比較を実行します<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>メソッドは、序数に基づく比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-334">If the parameter value is <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>, the method performs an ordinal comparison.</span></span> <span data-ttu-id="43ecc-335">そのため、例を次に、現在のカルチャが米国の場合英語、最初の呼び出し、 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> (カルチャに依存した比較を使用して) メソッドが"A","a"未満と見なしますが、(序数に基づく比較を使用して)、同じメソッドに 2 番目の呼び出しでは考慮"a""A"より大きい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-335">Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method (using culture-sensitive comparison) considers "a" less than "A", but the second call to the same method (using ordinal comparison) considers "a" greater than "A".</span></span>  
  
 [!code-cpp[System.String.Class#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)]
 [!code-csharp[System.String.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)]
 [!code-vb[System.String.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)]  
  
 <span data-ttu-id="43ecc-336">.NET Framework には、word、文字列、および序数の並べ替え規則がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-336">The .NET Framework supports word, string, and ordinal sort rules:</span></span>  
  
-   <span data-ttu-id="43ecc-337">単語での並べ替えでは、英数字以外の特定の Unicode 文字には特別な重みが割り当てられる、カルチャに依存した文字列の比較が行われます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-337">A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them.</span></span> <span data-ttu-id="43ecc-338">たとえば、ハイフン (-) は、"coop"と"co-op"、並べ替え済みリストで互いの横に表示されるように割り当てられている重みは非常に小さい場合があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-338">For example, the hyphen (-) might have a very small weight assigned to it so that "coop" and "co-op" appear next to each other in a sorted list.</span></span> <span data-ttu-id="43ecc-339">一覧については、<xref:System.String>単語の並べ替え規則を使用して 2 つの文字列を比較するメソッドを参照してください、[カテゴリ別の文字列操作](#ByCategory)セクションです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-339">For a list of the <xref:System.String> methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section.</span></span>  
  
-   <span data-ttu-id="43ecc-340">文字列の並べ替えには、カルチャに依存した比較もを実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-340">A string sort also performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-341">特殊なケースがないと、英数字以外のすべてのシンボルは英数字のすべての Unicode 文字の前にする点を除いて、単語の並べ替えに似ています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-341">It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters.</span></span> <span data-ttu-id="43ecc-342">文字列の並べ替え規則を使用して呼び出すことによって、2 つの文字列を比較することができます、<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType>を持つメソッド オーバー ロード、`options`がパラメーターには、値が指定されている<xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-342">Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-343">これは文字列の並べ替え規則を使用して 2 つの文字列を比較する、.NET Framework が提供する唯一の方法であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-343">Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.</span></span>  
  
-   <span data-ttu-id="43ecc-344">序数の並べ替えでは、文字列内の各 <xref:System.Char> オブジェクトの数値に基づいて文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-344">An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string.</span></span> <span data-ttu-id="43ecc-345">序数に基づく比較は、文字の大文字と小文字のバージョンがあるコード ポイントが異なるため自動的に区別されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-345">An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points.</span></span> <span data-ttu-id="43ecc-346">ただし、ケースが重要ではない場合は、小文字を無視する序数に基づく比較を指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-346">However, if case is not important, you can specify an ordinal comparison that ignores case.</span></span> <span data-ttu-id="43ecc-347">これは、インバリアント カルチャを使用して、結果に序数に基づく比較を実行することで大文字に文字列の変換と同じです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-347">This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result.</span></span> <span data-ttu-id="43ecc-348">一覧については、<xref:System.String>序数の並べ替え規則を使用して 2 つの文字列を比較するメソッドを参照してください、[カテゴリ別の文字列操作](#ByCategory)セクションです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-348">For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section.</span></span>  
  
 <span data-ttu-id="43ecc-349">カルチャに依存した比較は、明示的または暗黙的に使用する任意の比較、<xref:System.Globalization.CultureInfo>を含む、インバリアント カルチャで指定されているオブジェクト、<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-349">A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="43ecc-350">暗黙のカルチャは、現在のカルチャで指定されている、<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>と<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-350">The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="43ecc-351">アルファベット文字の並べ替え順序ではかなりのばらつきがある (つまり、対象の文字、<xref:System.Char.IsLetter%2A?displayProperty=nameWithType>プロパティから返される`true`) 複数のカルチャでします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-351">There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=nameWithType> property returns `true`) across cultures.</span></span> <span data-ttu-id="43ecc-352">指定することによって、特定のカルチャの規則を使用するカルチャに依存した比較を指定することができます、<xref:System.Globalization.CultureInfo>などオブジェクトの文字列比較メソッドを<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-352">You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>.</span></span> <span data-ttu-id="43ecc-353">指定することによって、現在のカルチャの規則を使用するカルチャに依存した比較を指定する<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>、 <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>、またはのメンバーはすべて、<xref:System.Globalization.CompareOptions>以外の列挙<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>の適切なオーバー ロードに、<xref:System.String.Compare%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-353">You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> to an appropriate overload of the <xref:System.String.Compare%2A> method.</span></span> <span data-ttu-id="43ecc-354">カルチャに依存した比較は序数比較では、一方の並べ替えは適切です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-354">A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not.</span></span> <span data-ttu-id="43ecc-355">序数に基づく比較は 2 つの文字列が等しいかどうかを決定するため、通常、適切な (つまり、識別情報を確認するため) カルチャに依存した比較ではなく一方です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-355">An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.</span></span>  
  
 <span data-ttu-id="43ecc-356">次の例は、カルチャと序数の比較の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-356">The following example illustrates the difference between culture-sensitive and ordinal comparison.</span></span> <span data-ttu-id="43ecc-357">例では、評価の 3 つの文字列、"Apple"、"Æble"および"AEble"、序数に基づく比較と DA-DK および EN-US カルチャの規則を使用して (時の既定のカルチャは、それぞれが、<xref:System.String.Compare%2A>メソッドが呼び出されます)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-357">The example evaluates three strings, "Apple", "Æble", and "AEble", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called).</span></span> <span data-ttu-id="43ecc-358">デンマーク語の言語では、個々 の文字として文字「Æ」を処理し、アルファベットでは、"Z"の後に並べ替え、ため、文字列"Æble"が"Apple"を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-358">Because the Danish language treats the character "Æ" as an individual letter and sorts it after "Z" in the alphabet, the string "Æble" is greater than "Apple".</span></span> <span data-ttu-id="43ecc-359">ただし、"Æble"がないと見なされます"AEble"に相当"Æble"が"AEble"より大きいも。</span><span class="sxs-lookup"><span data-stu-id="43ecc-359">However, "Æble" is not considered equivalent to "AEble", so "Æble" is also greater than "AEble".</span></span> <span data-ttu-id="43ecc-360">EN-US カルチャでは、文字「Æ」が含まれていないが、"AE"は、"Æble"は、"Apple"よりも"AEble"に等しい少ない理由について説明しますと同等として扱われます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-360">The en-US culture doesn't include the letter"Æ" but treats it as equivalent to "AE", which explains why  "Æble" is less than "Apple" but equal to "AEble".</span></span> <span data-ttu-id="43ecc-361">序数に基づく比較は、その一方で、"AEble"より大きい値を指定するには、"Æble"と"Æble"よりも小さくするには、"Apple"を考慮します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-361">Ordinal comparison, on the other hand, considers "Apple" to be less than "Æble", and "Æble" to be greater than "AEble".</span></span>  
  
 [!code-csharp[System.String.Class#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)]
 [!code-vb[System.String.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)]  
  
 <span data-ttu-id="43ecc-362">適切な文字列の並べ替えまたは比較方法を選択するのにには、次の一般的なガイドラインを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-362">Use the following general guidelines to choose an appropriate sorting or string comparison method:</span></span>  
  
-   <span data-ttu-id="43ecc-363">順序付けるために、文字列をユーザーのカルチャに基づいて、する場合の現在のカルチャの規則に基づいてを注文する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-363">If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture.</span></span> <span data-ttu-id="43ecc-364">ユーザーのカルチャが変更された場合の文字列の並べ替え順序はそれに従って変更もできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-364">If the user's culture changes, the order of sorted strings will also change accordingly.</span></span> <span data-ttu-id="43ecc-365">たとえば、類義語辞典アプリケーションは、ユーザーのカルチャに基づいて単語を常に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-365">For example, a thesaurus application should always sort words based on the user's culture.</span></span>  
  
-   <span data-ttu-id="43ecc-366">する場合は、文字列を並べ替える特定のカルチャの規則に基づいて、する必要があります順序を指定することによって、<xref:System.Globalization.CultureInfo>比較方法をカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-366">If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method.</span></span> <span data-ttu-id="43ecc-367">たとえば、アプリケーションでは、特定の言語について説明するように設計、たいを順序付ける文字列で、その言語のカルチャのいずれかの規則に基づいて。</span><span class="sxs-lookup"><span data-stu-id="43ecc-367">For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.</span></span>  
  
-   <span data-ttu-id="43ecc-368">そのまま複数のカルチャで文字列の順序を設定する場合は、インバリアント カルチャの規則に基づく順序か、序数に基づく比較を使用してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-368">If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison.</span></span> <span data-ttu-id="43ecc-369">たとえば、ファイル、プロセス、ミュー テックスの名前を整理する序数の並べ替えを使用して、または、名前付きパイプです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-369">For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.</span></span>  
  
-   <span data-ttu-id="43ecc-370">比較については、セキュリティ上の決定 (ユーザー名が有効かどうか) などを含むは常にテストを実行する、序数に基づく等しいかどうかのオーバー ロードを呼び出すことによって、<xref:System.String.Equals%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-370">For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-371">カルチャに依存した並べ替えおよび文字列比較で使用されるルール大文字小文字の区別は、.NET Framework のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-371">The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework.</span></span> <span data-ttu-id="43ecc-372">.NET Framework における[!INCLUDE[net_v45](~/includes/net-v45-md.md)]で実行されている、 [!INCLUDE[win8](~/includes/win8-md.md)] Unicode 6.0 標準に準拠しているオペレーティング システム、並べ替え、大文字小文字の区別、正規化、および Unicode 文字に関する情報。</span><span class="sxs-lookup"><span data-stu-id="43ecc-372">In the .NET Framework [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard.</span></span> <span data-ttu-id="43ecc-373">他のオペレーティング システムでは、Unicode 5.0 標準に準拠しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-373">On other operating systems, it conforms to the Unicode 5.0 standard.</span></span>  
  
 <span data-ttu-id="43ecc-374">Word、文字列、および序数の並べ替え規則に関する詳細については、次を参照してください。、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>トピックです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-374">For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> topic.</span></span> <span data-ttu-id="43ecc-375">各ルールを使用する場合の追加の推奨事項を参照してください[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-375">For additional recommendations on when to use each rule, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="43ecc-376">通常、しない文字列比較のメソッドを呼び出すように<xref:System.String.Compare%2A>直接を文字列の並べ替え順序を決定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-376">Ordinarily, you don't call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings.</span></span> <span data-ttu-id="43ecc-377">などのメソッドを並べ替えて比較メソッドが呼び出されます代わりに、<xref:System.Array.Sort%2A?displayProperty=nameWithType>または<xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-377">Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=nameWithType> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-378">次の例を使用する比較の種類を指定する操作を行いますが、文字列比較メソッドを明示的に呼び出さずに 4 つの異なる並べ替え操作 (単語の並べ替えは、現在のカルチャ、インバリアント カルチャを使用して word 並べ替え、序数に基づく並べ替え、およびインバリアント カルチャを使用して文字列の並べ替えを使用して) を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-378">The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use.</span></span> <span data-ttu-id="43ecc-379">並べ替えの種類ごとに、配列内の文字列の一意な順序付けが生成されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-379">Note that each type of sort produces a unique ordering of strings in its array.</span></span>  
  
 [!code-cpp[System.String.Class#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)]
 [!code-csharp[System.String.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)]
 [!code-vb[System.String.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)]  
  
> [!TIP]
>  <span data-ttu-id="43ecc-380">内部的には、.net Framework では、並べ替えキーを使用して、culturallysensitive 文字列比較をサポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-380">Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison.</span></span> <span data-ttu-id="43ecc-381">文字列内の各文字には、アルファベット順、大文字と小文字の区別、発音の区別など、さまざまなカテゴリの並べ替えウェイトが指定されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-381">Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic.</span></span> <span data-ttu-id="43ecc-382">並べ替えキーがで表される、<xref:System.Globalization.SortKey>クラス、特定の文字列をこれらの規則のリポジトリを提供します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-382">A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string.</span></span> <span data-ttu-id="43ecc-383">アプリでは、多数の検索や並べ替え文字列の同じセットの操作を実行する場合を生成するために使用するすべての文字列の並べ替えキーを格納することによって、パフォーマンスを向上できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-383">If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses.</span></span> <span data-ttu-id="43ecc-384">並べ替えまたは比較操作が必要な場合は、文字列の代わりに並べ替えキーを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-384">When a sort or comparison operation is required, you use the sort keys instead of the strings.</span></span> <span data-ttu-id="43ecc-385">詳細については、<xref:System.Globalization.SortKey> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-385">For more information, see the <xref:System.Globalization.SortKey> class.</span></span>  
  
 <span data-ttu-id="43ecc-386">文字列の比較規則を指定しない場合は、並べ替え方法など、<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>は、文字列のカルチャ、大文字小文字を区別する並べ替えを実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-386">If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> perform a culture-sensitive, case-sensitive sort on strings.</span></span> <span data-ttu-id="43ecc-387">次の例は、現在のカルチャを変更すると、配列の並べ替えられた文字列の順序にどのように影響する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-387">The following example illustrates how changing the current culture affects the order of sorted strings in an array.</span></span> <span data-ttu-id="43ecc-388">3 つの文字列の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-388">It creates an array of three strings.</span></span> <span data-ttu-id="43ecc-389">最初に、`System.Threading.Thread.CurrentThread.CurrentCulture` プロパティを en-US に設定し、<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-389">First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43ecc-390">これよって、英語 (米国) カルチャの並べ替え規則に基づく並べ替え順序が適用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-390">The resulting sort order is based on sorting conventions for the English (United States) culture.</span></span> <span data-ttu-id="43ecc-391">次に、`System.Threading.Thread.CurrentThread.CurrentCulture` プロパティを da-DK に設定し、再度 <xref:System.Array.Sort%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-391">Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method again.</span></span> <span data-ttu-id="43ecc-392">適用される並べ替え順序が en-US の並べ替え順序と異なる点に注意してください。これは、デンマーク語 (デンマーク) の並べ替え規則が使用されるためです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-392">Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).</span></span>  
  
 [!code-csharp[Conceptual.Strings.Comparing#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)]
 [!code-vb[Conceptual.Strings.Comparing#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)]  
  
> [!WARNING]
>  <span data-ttu-id="43ecc-393">文字列を比較する主な目的はこれらが等しいかどうかを呼び出す必要がありますを決定する場合、<xref:System.String.Equals%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-393">If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43ecc-394">通常、使用する必要があります<xref:System.String.Equals%2A>序数に基づく比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-394">Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison.</span></span> <span data-ttu-id="43ecc-395"><xref:System.String.Compare%2A?displayProperty=nameWithType>メソッドは、主に文字列を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-395">The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is intended primarily to sort strings.</span></span>  
  
 <span data-ttu-id="43ecc-396">などの文字列検索メソッド、<xref:System.String.StartsWith%2A?displayProperty=nameWithType>と<xref:System.String.IndexOf%2A?displayProperty=nameWithType>、またカルチャまたは序数の文字列比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-396">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons.</span></span> <span data-ttu-id="43ecc-397">次の例を使用する序数とカルチャに依存した比較の違いを示しています、<xref:System.String.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-397">The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="43ecc-398">これで、現在のカルチャが英語 (米国) カルチャに依存した検索では、"oe"合字の「œ」と一致する部分文字列と見なします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-398">A culture-sensitive search in which the current culture is English (United States) considers the substring "oe" to match the ligature "œ".</span></span> <span data-ttu-id="43ecc-399">検索はソフト ハイフンと同等として処理にソフト ハイフン (U +0 00AD) は、ゼロ幅の文字であるため<xref:System.String.Empty>文字列の先頭で一致を見つけるとします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-399">Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty> and finds a match at the beginning of the string.</span></span> <span data-ttu-id="43ecc-400">序数に基づく検索の場合、一方は一致が見つかりませんいずれの場合。</span><span class="sxs-lookup"><span data-stu-id="43ecc-400">An ordinal search, on the other hand, does not find a match in either case.</span></span>  
  
 [!code-cpp[System.String.Class#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)]
 [!code-csharp[System.String.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)]
 [!code-vb[System.String.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)]  
  
### <a name="searching-strings"></a><span data-ttu-id="43ecc-401">文字列の検索</span><span class="sxs-lookup"><span data-stu-id="43ecc-401">Searching Strings</span></span>  
 <span data-ttu-id="43ecc-402">などの文字列検索メソッド、<xref:System.String.StartsWith%2A?displayProperty=nameWithType>と<xref:System.String.IndexOf%2A?displayProperty=nameWithType>も、カルチャを実行することができます、または指定した文字列の文字または部分文字列かどうかを決定する序数に基づく文字列比較を検出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-402">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.</span></span>  
  
 <span data-ttu-id="43ecc-403">検索方法、<xref:System.String>など、個々 の文字を検索するクラス、<xref:System.String.IndexOf%2A>メソッド、または文字のセットのいずれかのように、<xref:System.String.IndexOfAny%2A>メソッド、序数に基づく検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-403">The search methods in the <xref:System.String> class that search for an individual character, such as the <xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search.</span></span> <span data-ttu-id="43ecc-404">呼び出す必要がありますの文字をカルチャに依存した検索を実行する、<xref:System.Globalization.CompareInfo>などのメソッド<xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>または<xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-404">To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-405">序数とカルチャに依存した比較を使用して文字の検索の結果が大きく異なるできることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-405">Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different.</span></span> <span data-ttu-id="43ecc-406">たとえば、合字の「Æ」などの構成済みの Unicode 文字の検索 (U + 00 C 6) 可能性があります一致"AE"など、正しいシーケンスでは、そのコンポーネントで見つかった (U +0 041U + 0045)、カルチャに応じて。</span><span class="sxs-lookup"><span data-stu-id="43ecc-406">For example, a search for a precomposed Unicode character such as the ligature "Æ" (U+00C6) might match any occurrence of its components in the correct sequence, such as "AE" (U+041U+0045), depending on the culture.</span></span> <span data-ttu-id="43ecc-407">次の例は、違いを示しています、<xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType>と<xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>個々 の文字を検索するときの方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-407">The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> methods when searching for an individual character.</span></span> <span data-ttu-id="43ecc-408">合字の「æ」(U +0 00E6) は、文字列内にある「航空写真」EN-US カルチャの規則を使用する場合は da DK カルチャの規則を使用するときではなくまたは序数に基づく比較を実行するときにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-408">The ligature "æ" (U+00E6) is found in the string "aerial" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)]
 [!code-vb[System.String.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)]  
  
 <span data-ttu-id="43ecc-409">その一方で、<xref:System.String>を検索する文字ではなく、文字列型のパラメーターは、検索オプションを明示的に指定しない場合、カルチャに依存した検索を実行するメソッドをクラス<xref:System.StringComparison>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-409">On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>.</span></span> <span data-ttu-id="43ecc-410">唯一の例外は<xref:System.String.Contains%2A>、序数に基づく検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-410">The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.</span></span>  
  
<a name="equality"></a>   
### <a name="testing-for-equality"></a><span data-ttu-id="43ecc-411">等価性テスト</span><span class="sxs-lookup"><span data-stu-id="43ecc-411">Testing for equality</span></span>  
 <span data-ttu-id="43ecc-412">使用して、<xref:System.String.Compare%2A?displayProperty=nameWithType>並べ替え順序で 2 つの文字列の関係を判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-412">Use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to determine the relationship of two strings in the sort order.</span></span> <span data-ttu-id="43ecc-413">通常、これは、カルチャに依存した操作です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-413">Typically, this is a culture-sensitive operation.</span></span> <span data-ttu-id="43ecc-414">これに対しを呼び出す、<xref:System.String.Equals%2A?displayProperty=nameWithType>等しいかどうかをテストするメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-414">In contrast, call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method to test for equality.</span></span> <span data-ttu-id="43ecc-415">等しいかどうかテストが通常有効なユーザー名、パスワード、または、ファイル システム パスなど、いくつかの既知の文字列でユーザー入力を比較するため、序数に基づく操作では通常です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-415">Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="43ecc-416">呼び出して等価性をテストすることは、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッドおよび戻り値が 0 であるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-416">It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=nameWithType> method and determining whether the return value is zero.</span></span> <span data-ttu-id="43ecc-417">ただし、この方法はお勧めできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-417">However, this practice is not recommended.</span></span> <span data-ttu-id="43ecc-418">2 つの文字列が等しいかどうかを判断するのに、1 つのオーバー ロードを呼び出す必要があります、<xref:System.String.Equals%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-418">To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43ecc-419">優先オーバー ロードを呼び出すには、いずれかのインスタンス<xref:System.String.Equals%28System.String%2CSystem.StringComparison%29>メソッドまたは静的<xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29>メソッド、両方のメソッドが含まれるため、<xref:System.StringComparison?displayProperty=nameWithType>パラメーターを明示的に比較の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-419">The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=nameWithType> parameter that explicitly specifies the type of comparison.</span></span>  
  
 <span data-ttu-id="43ecc-420">次の例は、カルチャに依存した比較を実行するときにいずれかの代わりに使用する必要があります、序数に等しいかどうかの危険があることを示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-420">The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead.</span></span> <span data-ttu-id="43ecc-421">この場合、コードの意図は、文字列 FILE:// で URL の先頭の大文字と小文字を実行することによって FILE:// または file:// で始まる Url をファイル システムへのアクセスを禁止するです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-421">In this case, the intent of the code is to prohibit file system access from URLs that begin with "FILE://" or "file://" by performing a case-insensitive comparison of the beginning of a URL with the string "FILE://".</span></span> <span data-ttu-id="43ecc-422">ただし、file:// で始まる URL をトルコ語 (トルコ) のカルチャを使用してカルチャに依存した比較を実行する場合の等価比較、失敗、トルコ語の大文字表現小文字の"i"は「İ」、"I"の代わりにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-422">However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with "file://", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase "i" is "İ" instead of "I".</span></span> <span data-ttu-id="43ecc-423">その結果、ファイル システム アクセスは許可されている誤ってです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-423">As a result, file system access is inadvertently permitted.</span></span> <span data-ttu-id="43ecc-424">その一方で、序数に基づく比較を実行する場合は、等価性の比較は成功し、ファイル システム アクセスが拒否されました。</span><span class="sxs-lookup"><span data-stu-id="43ecc-424">On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.</span></span>  
  
 [!code-cpp[System.String.Class#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)]
 [!code-csharp[System.String.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)]
 [!code-vb[System.String.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)]  
  
<a name="Normalization"></a>   
## <a name="normalization"></a><span data-ttu-id="43ecc-425">正規化</span><span class="sxs-lookup"><span data-stu-id="43ecc-425">Normalization</span></span>  
 <span data-ttu-id="43ecc-426">Unicode 文字の一部では、複数の表現があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-426">Some Unicode characters have multiple representations.</span></span> <span data-ttu-id="43ecc-427">たとえば、次のコード ポイントのいずれか、文字「いずれも」を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-427">For example, any of the following code points can represent the letter "ắ":</span></span>  
  
-   <span data-ttu-id="43ecc-428">U+1EAF</span><span class="sxs-lookup"><span data-stu-id="43ecc-428">U+1EAF</span></span>  
  
-   <span data-ttu-id="43ecc-429">U +0 0103 U +0 0301</span><span class="sxs-lookup"><span data-stu-id="43ecc-429">U+0103 U+0301</span></span>  
  
-   <span data-ttu-id="43ecc-430">U +0 0061 U +0 0306 U +0 0301</span><span class="sxs-lookup"><span data-stu-id="43ecc-430">U+0061 U+0306 U+0301</span></span>  
  
 <span data-ttu-id="43ecc-431">1 つの文字の複数の表現には、検索、並べ替え、照合、およびその他の文字列操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-431">Multiple representations for a single character complicate searching, sorting, matching, and other string operations.</span></span>  
  
 <span data-ttu-id="43ecc-432">Unicode 規格では、そのバイナリ表現のいずれかの Unicode 文字の 1 つのバイナリ表現を返します正規化と呼ばれるプロセスを定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-432">The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations.</span></span> <span data-ttu-id="43ecc-433">正規化には、異なる規則に従って、正規化形式と呼ばれるいくつかのアルゴリズムを使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-433">Normalization can use several algorithms, called normalization forms, that follow different rules.</span></span> <span data-ttu-id="43ecc-434">.NET Framework では、C、D、KC、および KD の Unicode 正規化形式をサポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-434">The .NET Framework supports Unicode normalization forms C, D, KC, and KD.</span></span> <span data-ttu-id="43ecc-435">文字列は、同じ正規形で正規化されている、ときに、序数に基づく比較を使用して比較できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-435">When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="43ecc-436">序数に基づく比較は対応する Unicode スカラー値のバイナリ比較<xref:System.Char>それぞれの文字列オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-436">An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string.</span></span> <span data-ttu-id="43ecc-437"><xref:System.String>クラスには、次を含む、序数に基づく比較を実行できるメソッドの数が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-437">The <xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:</span></span>  
  
-   <span data-ttu-id="43ecc-438">オーバー ロード、 <xref:System.String.Compare%2A>、 <xref:System.String.Equals%2A>、 <xref:System.String.StartsWith%2A>、 <xref:System.String.EndsWith%2A>、 <xref:System.String.IndexOf%2A>、および<xref:System.String.LastIndexOf%2A>メソッドを含む、<xref:System.StringComparison>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-438">Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>, and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="43ecc-439">値を指定する場合、このメソッドは序数に基づく比較を実行<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>または<xref:System.StringComparison.OrdinalIgnoreCase>このパラメーターにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-439">The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.</span></span>  
  
-   <span data-ttu-id="43ecc-440">オーバー ロード、<xref:System.String.CompareOrdinal%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-440">The overloads of the <xref:System.String.CompareOrdinal%2A> method.</span></span>  
  
-   <span data-ttu-id="43ecc-441">既定では、序数に基づく比較を使用するメソッド<xref:System.String.Contains%2A>、 <xref:System.String.Replace%2A>、および<xref:System.String.Split%2A>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-441">Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>.</span></span>  
  
-   <span data-ttu-id="43ecc-442">検索する方法、<xref:System.Char>値内の要素、または、<xref:System.Char>文字列インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-442">Methods that search for a <xref:System.Char> value or for the elements in a <xref:System.Char> array in a string instance.</span></span> <span data-ttu-id="43ecc-443">このようなメソッドを含める<xref:System.String.IndexOf%28System.Char%29>と<xref:System.String.Split%28System.Char%5B%5D%29>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-443">Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>.</span></span>  
  
 <span data-ttu-id="43ecc-444">呼び出して、文字列が正規形 C に正規化されたかどうかを決定できます、<xref:System.String.IsNormalized?displayProperty=nameWithType>するか、メソッドを呼び出すことができます、<xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType>文字列が、指定された正規形を正規化されたかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-444">You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=nameWithType> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType> method to determine whether a string is normalized to a specified normalization form.</span></span> <span data-ttu-id="43ecc-445">呼び出すことも、<xref:System.String.Normalize?displayProperty=nameWithType>正規形 C、または文字列に変換するメソッドを呼び出すことができます、<xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType>文字列を指定された正規形に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-445">You can also call the <xref:System.String.Normalize?displayProperty=nameWithType> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType> method to convert a string to a specified normalization form.</span></span> <span data-ttu-id="43ecc-446">正規化して、文字列の比較に関する詳細な手順については、次を参照してください。、<xref:System.String.Normalize>と<xref:System.String.Normalize%28System.Text.NormalizationForm%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-446">For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods.</span></span>  
  
 <span data-ttu-id="43ecc-447">次の例は、文字列の正規化を示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-447">The following simple example illustrates string normalization.</span></span> <span data-ttu-id="43ecc-448">次の 3 つの異なる文字列に 3 つの異なる方法で、文字「ố」を定義し、等しいかどうか序数に基づく比較を使用して、各文字列が、その他の 2 つの文字列と異なることを決定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-448">It defines the letter "ố" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings.</span></span> <span data-ttu-id="43ecc-449">各文字列をサポートされている正規化形式に変換し、指定された正規形で各文字列の序数に基づく比較をもう一度実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-449">It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form.</span></span> <span data-ttu-id="43ecc-450">各ケースでは、等しいかどうかは、2 番目のテストは、文字列が等しいことを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-450">In each case, the second test for equality shows that the strings are equal.</span></span>  
  
 [!code-cpp[System.String.Class#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)]
 [!code-csharp[System.String.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)]
 [!code-vb[System.String.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)]  
  
 <span data-ttu-id="43ecc-451">正規化と正規化フォームの詳細については、次を参照してください。 <xref:System.Text.NormalizationForm?displayProperty=nameWithType>、だけでなく[Unicode Standard Annex #15: Unicode 正規化形式](https://unicode.org/reports/tr15/)と[正規化 FAQ](https://www.unicode.org/faq/normalization.html) unicode.org web サイトです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-451">For more information about normalization and normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>, as well as [Unicode Standard Annex #15: Unicode Normalization Forms](https://unicode.org/reports/tr15/) and the [Normalization FAQ](https://www.unicode.org/faq/normalization.html) on the unicode.org website.</span></span>  
  
<a name="ByCategory"></a>   
## <a name="string-operations-by-category"></a><span data-ttu-id="43ecc-452">カテゴリ別の文字列操作</span><span class="sxs-lookup"><span data-stu-id="43ecc-452">String operations by category</span></span>  
 <span data-ttu-id="43ecc-453"><xref:System.String>クラス文字列を比較する、文字列の等価性をテスト、文字を検索するメンバーを提供または文字列の組み合わせ、値の書式設定、文字列のコピー、および文字列の正規化文字列から部分文字列の抽出、文字列を変更する、文字列の部分文字列します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-453">The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.</span></span>  
  
### <a name="comparing-strings"></a><span data-ttu-id="43ecc-454">文字列の比較</span><span class="sxs-lookup"><span data-stu-id="43ecc-454">Comparing strings</span></span>  
 <span data-ttu-id="43ecc-455">以下を使用して、並べ替え順序におけるそれらの相対位置を決定する文字列を比較することができます<xref:System.String>メソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-455">You can compare strings to determine their relative position in the sort order by using the following <xref:System.String> methods:</span></span>  
  
-   <span data-ttu-id="43ecc-456"><xref:System.String.Compare%2A> 並べ替え順序で 2 番目の文字列を 1 つの文字列の関係を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-456"><xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order.</span></span>  
  
-   <span data-ttu-id="43ecc-457"><xref:System.String.CompareOrdinal%2A> コード ポイントの比較に基づく 2 番目の文字列を 1 つの文字列の関係を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-457"><xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.</span></span>  
  
-   <span data-ttu-id="43ecc-458"><xref:System.String.CompareTo%2A> 並べ替え順序で 2 番目の文字列を現在の文字列インスタンスの関係を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-458"><xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order.</span></span> <span data-ttu-id="43ecc-459"><xref:System.String.CompareTo%28System.String%29>メソッドには、<xref:System.IComparable>と<xref:System.IComparable%601>の実装、<xref:System.String>クラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-459">The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.</span></span>  
  
### <a name="testing-strings-for-equality"></a><span data-ttu-id="43ecc-460">文字列の等価性をテストします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-460">Testing strings for equality</span></span>  
 <span data-ttu-id="43ecc-461">呼び出す、 <xref:System.String.Equals%2A> 2 つの文字列が等しいかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-461">You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal.</span></span> <span data-ttu-id="43ecc-462">インスタンス<xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29>と静的<xref:System.String.Equals%28System.String%2CSystem.StringComparison%29>オーバー ロードを使用して、比較ではカルチャを区別するか、序数に基づくかどうかと、ケースと見なされますまたは無視するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-462">The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored.</span></span> <span data-ttu-id="43ecc-463">等しいかどうかのほとんどのテストは、序数に基づくと、システム リソース (ファイル システム オブジェクトなど) へのアクセスを決定する等価性の比較は序数は常にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-463">Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.</span></span>  
  
### <a name="finding-characters-in-a-string"></a><span data-ttu-id="43ecc-464">文字列の文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-464">Finding characters in a string</span></span>  
 <span data-ttu-id="43ecc-465"><xref:System.String>クラスには、検索方法の 2 種類が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-465">The <xref:System.String> class includes two kinds of search methods:</span></span>  
  
-   <span data-ttu-id="43ecc-466">返すメソッド、<xref:System.Boolean>特定の部分文字列が文字列のインスタンス上に存在するかどうかを示す値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-466">Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance.</span></span> <span data-ttu-id="43ecc-467">ように、 <xref:System.String.Contains%2A>、 <xref:System.String.EndsWith%2A>、および<xref:System.String.StartsWith%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-467">These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.</span></span>  
  
-   <span data-ttu-id="43ecc-468">文字列インスタンス内の部分文字列の開始位置を示すメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-468">Methods that indicate the starting position of a substring in a string instance.</span></span> <span data-ttu-id="43ecc-469">ように、 <xref:System.String.IndexOf%2A>、 <xref:System.String.IndexOfAny%2A>、 <xref:System.String.LastIndexOf%2A>、および<xref:System.String.LastIndexOfAny%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-469">These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="43ecc-470">特定の部分文字列ではなく、特定のパターンの文字列を検索する場合は、正規表現を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-470">If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions.</span></span> <span data-ttu-id="43ecc-471">詳細については、「[.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-471">For more information, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
### <a name="modifying-a-string"></a><span data-ttu-id="43ecc-472">文字列を変更します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-472">Modifying a string</span></span>  
 <span data-ttu-id="43ecc-473"><xref:System.String>クラスには、文字列の値を変更する表示される次のメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-473">The <xref:System.String> class includes the following methods that appear to modify the value of a string:</span></span>  
  
-   <span data-ttu-id="43ecc-474"><xref:System.String.Insert%2A> 現在に文字列を挿入<xref:System.String>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-474"><xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="43ecc-475"><xref:System.String.PadLeft%2A> 文字列の先頭に 1 つまたは複数出現する指定された文字を挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-475"><xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string.</span></span>  
  
-   <span data-ttu-id="43ecc-476"><xref:System.String.PadRight%2A> 文字列の末尾には、1 つまたは複数出現する指定された文字を挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-476"><xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the end of a string.</span></span>  
  
-   <span data-ttu-id="43ecc-477"><xref:System.String.Remove%2A> 現在の部分文字列を削除<xref:System.String>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-477"><xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="43ecc-478"><xref:System.String.Replace%2A> 現在の別の部分文字列の部分文字列に置換<xref:System.String>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-478"><xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="43ecc-479"><xref:System.String.ToLower%2A> および<xref:System.String.ToLowerInvariant%2A>文字列のすべての文字を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-479"><xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase.</span></span>  
  
-   <span data-ttu-id="43ecc-480"><xref:System.String.ToUpper%2A> および<xref:System.String.ToUpperInvariant%2A>文字列のすべての文字を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-480"><xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase.</span></span>  
  
-   <span data-ttu-id="43ecc-481"><xref:System.String.Trim%2A> 先頭と文字列の末尾から文字のすべての出現を削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-481"><xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string.</span></span>  
  
-   <span data-ttu-id="43ecc-482"><xref:System.String.TrimEnd%2A> 文字列の末尾から文字のすべての出現を削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-482"><xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string.</span></span>  
  
-   <span data-ttu-id="43ecc-483"><xref:System.String.TrimStart%2A> 文字列の先頭から文字のすべての出現を削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-483"><xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="43ecc-484">すべての文字列の変更メソッドを返す新しい<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-484">All string modification methods return a new <xref:System.String> object.</span></span> <span data-ttu-id="43ecc-485">現在のインスタンスの値が変更しないでください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-485">They don't modify the value of the current instance.</span></span>  
  
### <a name="extracting-substrings-from-a-string"></a><span data-ttu-id="43ecc-486">文字列から部分文字列の抽出</span><span class="sxs-lookup"><span data-stu-id="43ecc-486">Extracting substrings from a string</span></span>  
 <span data-ttu-id="43ecc-487"><xref:System.String.Split%2A?displayProperty=nameWithType>メソッドで複数の文字列を 1 つの文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-487">The <xref:System.String.Split%2A?displayProperty=nameWithType> method separates a single string into multiple strings.</span></span> <span data-ttu-id="43ecc-488">メソッドのオーバー ロードを使用すると、複数の区切り記号、メソッドを抽出する部分文字列の最大数を決定し、空の文字列 (区切り文字が隣接する場合に発生する) が返される文字列に含まれるかどうかを決定するを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-488">Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.</span></span>  
  
### <a name="combining-strings"></a><span data-ttu-id="43ecc-489">文字列の結合</span><span class="sxs-lookup"><span data-stu-id="43ecc-489">Combining strings</span></span>  
 <span data-ttu-id="43ecc-490">次<xref:System.String>メソッドは、文字列の連結を使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-490">The following <xref:System.String> methods can be used for string concatenation:</span></span>  
  
-   <span data-ttu-id="43ecc-491"><xref:System.String.Concat%2A> 1 つの文字列の 1 つまたは複数の部分文字列を結合します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-491"><xref:System.String.Concat%2A> combines one or more substrings into a single string.</span></span>  
  
-   <span data-ttu-id="43ecc-492"><xref:System.String.Join%2A> 1 つの要素に 1 つまたは複数の部分文字列を連結し、各部分文字列間の区切り記号を追加します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-492"><xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring.</span></span>  
  
### <a name="formatting-values"></a><span data-ttu-id="43ecc-493">値の書式設定</span><span class="sxs-lookup"><span data-stu-id="43ecc-493">Formatting values</span></span>  
 <span data-ttu-id="43ecc-494"><xref:System.String.Format%2A?displayProperty=nameWithType>メソッドでは、複合書式指定機能を使用して、文字列内の 1 つまたは複数のプレース ホルダーをいくつかのオブジェクトまたは値の文字列形式に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-494">The <xref:System.String.Format%2A?displayProperty=nameWithType> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value.</span></span> <span data-ttu-id="43ecc-495"><xref:System.String.Format%2A>メソッドは、次の操作によく使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-495">The <xref:System.String.Format%2A> method is often used to do the following:</span></span>  
  
-   <span data-ttu-id="43ecc-496">文字列に数値の文字列形式を埋め込む。</span><span class="sxs-lookup"><span data-stu-id="43ecc-496">To embed the string representation of a numeric value in a string.</span></span>  
  
-   <span data-ttu-id="43ecc-497">文字列の日付と時刻の値の文字列形式を埋め込む。</span><span class="sxs-lookup"><span data-stu-id="43ecc-497">To embed the string representation of a date and time value in a string.</span></span>  
  
-   <span data-ttu-id="43ecc-498">文字列の列挙値の文字列形式を埋め込む。</span><span class="sxs-lookup"><span data-stu-id="43ecc-498">To embed the string representation of an enumeration value in a string.</span></span>  
  
-   <span data-ttu-id="43ecc-499">サポートするいくつかのオブジェクトの文字列形式を埋め込むには、<xref:System.IFormattable>文字列内のインターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-499">To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string.</span></span>  
  
-   <span data-ttu-id="43ecc-500">右揃えまたは左揃えの文字列内のフィールド内の部分文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-500">To right-justify or left-justify a substring in a field within a larger string.</span></span>  
  
 <span data-ttu-id="43ecc-501">操作と例を書式設定に関する詳細については、次を参照してください。、<xref:System.String.Format%2A>オーバー ロードの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-501">For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary.</span></span>  
  
### <a name="copying-a-string"></a><span data-ttu-id="43ecc-502">文字列のコピー</span><span class="sxs-lookup"><span data-stu-id="43ecc-502">Copying a string</span></span>  
 <span data-ttu-id="43ecc-503">以下を呼び出すことができます<xref:System.String>文字列のコピーを作成する方法。</span><span class="sxs-lookup"><span data-stu-id="43ecc-503">You can call the following <xref:System.String> methods to make a copy of a string:</span></span>  
  
-   <span data-ttu-id="43ecc-504"><xref:System.String.Clone%2A> 既存の参照を返します<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-504"><xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object.</span></span>  
  
-   <span data-ttu-id="43ecc-505"><xref:System.String.Copy%2A> 既存の文字列のコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-505"><xref:System.String.Copy%2A> creates a copy of an existing string.</span></span>  
  
-   <span data-ttu-id="43ecc-506"><xref:System.String.CopyTo%2A> 文字列の一部を文字配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-506"><xref:System.String.CopyTo%2A> copies a portion of a string to a character array.</span></span>  
  
### <a name="normalizing-a-string"></a><span data-ttu-id="43ecc-507">文字列の正規化</span><span class="sxs-lookup"><span data-stu-id="43ecc-507">Normalizing a string</span></span>  
 <span data-ttu-id="43ecc-508">Unicode では、1 つの文字は、複数のコード ポイントを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-508">In Unicode, a single character can have multiple code points.</span></span> <span data-ttu-id="43ecc-509">正規化は、これらと同等の文字を同じのバイナリ表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-509">Normalization converts these equivalent characters into the same binary representation.</span></span> <span data-ttu-id="43ecc-510"><xref:System.String.Normalize%2A?displayProperty=nameWithType>メソッドは、正規化を実行し、<xref:System.String.IsNormalized%2A?displayProperty=nameWithType>メソッドでは、文字列を正規化するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-510">The <xref:System.String.Normalize%2A?displayProperty=nameWithType> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=nameWithType> method determines whether a string is normalized.</span></span>  
  
 <span data-ttu-id="43ecc-511">例および詳細については、次を参照してください。、[正規化](#Normalization)このトピックで前に説明します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-511">For more information and an example, see the [Normalization](#Normalization) section earlier in this topic.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="43ecc-512">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-512">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.ICloneable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Text.StringBuilder" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-513"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-513">Initializes a new instance of the <see cref="T:System.String" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-514">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="43ecc-514">In this section:</span></span>  
  
 <span data-ttu-id="43ecc-515">[オーバー ロードされたコンス トラクターの構文](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="43ecc-515">[Overloaded constructor syntax](#Syntax) </span></span>  
 <span data-ttu-id="43ecc-516">[パラメーター](#Params) </span><span class="sxs-lookup"><span data-stu-id="43ecc-516">[Parameters](#Params) </span></span>  
 <span data-ttu-id="43ecc-517">[例外](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="43ecc-517">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="43ecc-518">[どのメソッドが呼び出ししますか。](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="43ecc-518">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="43ecc-519">[文字列の作成](#Creating_Strings) </span><span class="sxs-lookup"><span data-stu-id="43ecc-519">[Creating strings](#Creating_Strings) </span></span>  
 <span data-ttu-id="43ecc-520">[反復的な文字列を処理します。](#Repetitive) </span><span class="sxs-lookup"><span data-stu-id="43ecc-520">[Handling repetitive strings](#Repetitive) </span></span>  
 <span data-ttu-id="43ecc-521">インスタンス化する文字列の例:</span><span class="sxs-lookup"><span data-stu-id="43ecc-521">Examples of instantiating strings:</span></span>   
 [<span data-ttu-id="43ecc-522">文字列の割り当てを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-522">Using string assignment</span></span>](#Ctor1_Example)  
 [<span data-ttu-id="43ecc-523">文字配列を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-523">Using a character array</span></span>](#Ctor2_Example)  
 [<span data-ttu-id="43ecc-524">文字配列の部分を使用して、1 つの文字の繰り返し</span><span class="sxs-lookup"><span data-stu-id="43ecc-524">Using a portion of a character array and repeating a single character</span></span>](#Ctor3_Example)  
 [<span data-ttu-id="43ecc-525">文字配列へのポインターを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-525">Using a pointer to a character array</span></span>](#Ctor4_Example)  
 [<span data-ttu-id="43ecc-526">ポインターと配列の範囲を使用してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-526">Using  a pointer and a range of an array</span></span>](#Ctor5_Example)  
 [<span data-ttu-id="43ecc-527">符号付きバイト配列へのポインターを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-527">Using a pointer to a signed byte array</span></span>](#Ctor6_Example)  
[<span data-ttu-id="43ecc-528">バージョン情報</span><span class="sxs-lookup"><span data-stu-id="43ecc-528">Version information</span></span>](#Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-constructor-syntax"></a><span data-ttu-id="43ecc-529">オーバー ロードされたコンス トラクターの構文</span><span class="sxs-lookup"><span data-stu-id="43ecc-529">Overloaded constructor syntax</span></span>  
 <span data-ttu-id="43ecc-530">文字列のコンス トラクターは 2 つのカテゴリに分類されます。 ポインター パラメーターを指定しないと、ポインター パラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-530">String constructors fall into two categories: those without pointer parameters, and those with pointer parameters.</span></span> <span data-ttu-id="43ecc-531">ポインターを使用するコンス トラクターは CLS 準拠ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-531">The constructors that use pointers are not CLS-compliant.</span></span> <span data-ttu-id="43ecc-532">さらに、Visual Basic は、ポインターの使用をサポートしていませんし、C# の場合、unsafe コンテキストで実行するポインターを使用したコードが必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-532">In addition, Visual Basic does not support the use of pointers, and C# requires code that uses pointers to run in an unsafe context.</span></span> <span data-ttu-id="43ecc-533">詳しくは、「[unsafe](~/docs/csharp/language-reference/keywords/unsafe.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-533">For more information, see [unsafe](~/docs/csharp/language-reference/keywords/unsafe.md).</span></span>  
  
 <span data-ttu-id="43ecc-534">オーバー ロードを選択するための追加のガイダンスについては、次を参照してください[どのメソッドが呼び出ししますか?。](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="43ecc-534">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 `String(Char[] value)`  
 <span data-ttu-id="43ecc-535">Unicode 文字の配列により示される値の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-535">Initializes the new instance to the value indicated by an array of Unicode characters.</span></span> <span data-ttu-id="43ecc-536">このコンス トラクターは、Unicode 文字をコピー ([例](#Ctor2_Example))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-536">This constructor copies Unicode characters([example](#Ctor2_Example)).</span></span>  
  
 `String(Char[] value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="43ecc-537">配列、および長さ内の開始文字位置の Unicode 文字の配列により示される値に新しいインスタンスを初期化します ([例](#Ctor3_Example))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-537">Initializes the new instance to the value indicated by an array of Unicode characters, a starting character position within that array, and a length ([example](#Ctor3_Example)).</span></span>  
  
 `String(Char c, Int32 count)`  
 <span data-ttu-id="43ecc-538">指定した Unicode 文字で示される値の新しいインスタンスを初期化しますが、指定した回数だけを繰り返す ([例](#Ctor3_Example))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-538">Initializes the new instance to the value indicated by a specified Unicode character repeated a specified number of times ([example](#Ctor3_Example)).</span></span>  
  
 `String(char* value)`  
 <span data-ttu-id="43ecc-539">**(非 CLS 準拠)** は null 文字で終了する Unicode 文字の配列を指すポインターにより示される値に新しいインスタンスを初期化します (u+0000 と '\0')。</span><span class="sxs-lookup"><span data-stu-id="43ecc-539">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters that is terminated by a null character (U+0000 or '\0').</span></span> <span data-ttu-id="43ecc-540">([例](#Ctor4_Example))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-540">([example](#Ctor4_Example)).</span></span>  
  
 <span data-ttu-id="43ecc-541">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>、直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-541">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-542">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-542">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(char* value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="43ecc-543">**(非 CLS 準拠)** Unicode 文字配列、および長さ内の開始文字位置の配列を指すポインターにより示される値に新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-543">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span> <span data-ttu-id="43ecc-544">コンス トラクターから Unicode 文字をコピーする`value`インデックスから始まります`startIndex`日と終了インデックスに`startIndex`  +  `length` – 1 ([例](#Ctor5_Example))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-544">The constructor copies the Unicode characters from `value` starting at index `startIndex` and ending at index `startIndex` + `length` – 1 ([example](#Ctor5_Example)).</span></span>  
  
 <span data-ttu-id="43ecc-545">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>、直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-545">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-546">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-546">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value)`  
 <span data-ttu-id="43ecc-547">**(非 CLS 準拠)** 8 ビット符号付き整数の配列を指すポインターにより示される値に新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-547">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="43ecc-548">配列を現在のシステム コード ページを使用してエンコードされた文字列を表すと想定されます (つまりで指定するエンコード<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-548">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="43ecc-549">コンス トラクターから文字を処理する`value`null 文字 (0x00) に到達するまで、ポインターは、指定された場所から起動 ([例](#Ctor6_Example))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-549">The constructor processes characters from `value` starting from the location specified by the pointer until a null character (0x00) is reached ([example](#Ctor6_Example)).</span></span>  
  
 <span data-ttu-id="43ecc-550">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>、直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-550">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-551">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-551">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="43ecc-552">**(非 CLS 準拠)** 8 ビット符号付き整数、配列、および長さ内の開始位置の配列を指すポインターにより示される値に新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-552">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span>  <span data-ttu-id="43ecc-553">配列を現在のシステム コード ページを使用してエンコードされた文字列を表すと想定されます (つまりで指定するエンコード<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-553">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="43ecc-554">コンス トラクターは、値の先頭から文字を処理する`startIndex`で終わる`startIndex`  +  `length` – 1 ([例](#Ctor6_Example))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-554">The constructor processes characters from value starting at `startIndex` and ending at `startIndex` + `length` – 1 ([example](#Ctor6_Example)).</span></span>  
  
 <span data-ttu-id="43ecc-555">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>、直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-555">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-556">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-556">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value, Int32 startIndex, Int32 length, Encoding enc)`  
 <span data-ttu-id="43ecc-557">**(非 CLS 準拠)** 、長さ、配列内の開始位置、8 ビット符号付き整数の配列を指すポインターにより示される値に新しいインスタンスを初期化し、<xref:System.Text.Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-557">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <xref:System.Text.Encoding> object.</span></span>  
  
 <span data-ttu-id="43ecc-558">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>、直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-558">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-559">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-559">This member cannot be used by partially trusted or transparent code.</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="43ecc-560">パラメーター</span><span class="sxs-lookup"><span data-stu-id="43ecc-560">Parameters</span></span>  
 <span data-ttu-id="43ecc-561">によって使用されるパラメーターの完全な一覧を次に示します<xref:System.String>ポインター パラメーターを含まないコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-561">Here is a complete list of parameters used by <xref:System.String> constructors that don't include a pointer parameter.</span></span> <span data-ttu-id="43ecc-562">各オーバー ロードで使用するパラメーター、上記のオーバー ロードの構文を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-562">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="43ecc-563">パラメーター</span><span class="sxs-lookup"><span data-stu-id="43ecc-563">Parameter</span></span>|<span data-ttu-id="43ecc-564">型</span><span class="sxs-lookup"><span data-stu-id="43ecc-564">Type</span></span>|<span data-ttu-id="43ecc-565">説明</span><span class="sxs-lookup"><span data-stu-id="43ecc-565">Description</span></span>|  
|---------------|----------|-----------------|  
|`value`|<span data-ttu-id="43ecc-566"><xref:System.Char>[]</span><span class="sxs-lookup"><span data-stu-id="43ecc-566"><xref:System.Char>[]</span></span>|<span data-ttu-id="43ecc-567">Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-567">An array of Unicode characters.</span></span>|  
|`c`|<xref:System.Char>|<span data-ttu-id="43ecc-568">Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-568">A Unicode character.</span></span>|  
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="43ecc-569">内の開始位置`value`の新しい文字列の最初の文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-569">The starting position in `value` of the first character in the new string.</span></span><br /><br /> <span data-ttu-id="43ecc-570">既定値: 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-570">Default value: 0</span></span>|  
|`length`|<xref:System.Int32>|<span data-ttu-id="43ecc-571">文字数`value`新しい文字列に含めます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-571">The number of characters in `value` to include in the new string.</span></span><br /><br /> <span data-ttu-id="43ecc-572">既定値: <xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="43ecc-572">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|  
|`count`|<xref:System.Int32>|<span data-ttu-id="43ecc-573">回数文字`c`新しい文字列で繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-573">The number of times the character `c` is repeated in the new string.</span></span> <span data-ttu-id="43ecc-574">場合`count`0 の場合は、新しいオブジェクトの値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-574">If `count` is zero, the value of the new object is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="43ecc-575">によって使用されるパラメーターの完全な一覧を次に示します<xref:System.String>ポインター パラメーターを含むコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-575">Here is a complete list of parameters used by <xref:System.String> constructors that include a pointer parameter.</span></span> <span data-ttu-id="43ecc-576">各オーバー ロードで使用するパラメーター、上記のオーバー ロードの構文を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-576">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="43ecc-577">パラメーター</span><span class="sxs-lookup"><span data-stu-id="43ecc-577">Parameter</span></span>|<span data-ttu-id="43ecc-578">型</span><span class="sxs-lookup"><span data-stu-id="43ecc-578">Type</span></span>|<span data-ttu-id="43ecc-579">説明</span><span class="sxs-lookup"><span data-stu-id="43ecc-579">Description</span></span>|  
|---------------|----------|-----------------|  
|`value`|<xref:System.Char>*<br /><br /> <span data-ttu-id="43ecc-580">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-580">-or-</span></span><br /><br /> <xref:System.SByte>\*|<span data-ttu-id="43ecc-581">Unicode 文字の null で終わる配列、または 8 ビット符号付き整数の配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-581">A pointer to a null-terminated array of Unicode characters or an array of 8-bit signed integers.</span></span> <span data-ttu-id="43ecc-582">場合`value`は`null`か、空の配列の新しい文字列の値が<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-582">If `value` is `null` or an empty array, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|  
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="43ecc-583">新しい文字列の最初の文字を定義する配列要素のインデックス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-583">The index of the array element that defines the first character in the new string.</span></span><br /><br /> <span data-ttu-id="43ecc-584">既定値: 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-584">Default value: 0</span></span>|  
|`length`|<xref:System.Int32>|<span data-ttu-id="43ecc-585">使用して、新しい文字列を作成する配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-585">The number of array elements to use to create the new string.</span></span> <span data-ttu-id="43ecc-586">長さが 0 の場合は、コンス トラクターは、値の文字列を作成<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-586">If length is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span><br /><br /> <span data-ttu-id="43ecc-587">既定値: <xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="43ecc-587">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|  
|`enc`|<xref:System.Text.Encoding>|<span data-ttu-id="43ecc-588">オブジェクトを指定する方法、`value`配列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-588">An object that specifies how the `value` array is encoded.</span></span><br /><br /> <span data-ttu-id="43ecc-589">既定値: <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>、またはシステムの現在の ANSI コード ページ</span><span class="sxs-lookup"><span data-stu-id="43ecc-589">Default value: <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>, or the system's current ANSI code page</span></span>|  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="43ecc-590">例外</span><span class="sxs-lookup"><span data-stu-id="43ecc-590">Exceptions</span></span>  
 <span data-ttu-id="43ecc-591">ポインター パラメーターを含まないコンス トラクターによってスローされた例外の一覧を次に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-591">Here's a list of exceptions thrown by constructors that don't include pointer parameters.</span></span>  
  
|<span data-ttu-id="43ecc-592">例外</span><span class="sxs-lookup"><span data-stu-id="43ecc-592">Exception</span></span>|<span data-ttu-id="43ecc-593">条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-593">Condition</span></span>|<span data-ttu-id="43ecc-594">によってスローされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-594">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="43ecc-595">`value` は `null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-595">`value` is `null`.</span></span>|<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="43ecc-596">`startIndex`、`length`、または`count`が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-596">`startIndex`,`length`, or `count` is less than zero.</span></span><br /><br /> <span data-ttu-id="43ecc-597">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-597">-or-</span></span><br /><br /> <span data-ttu-id="43ecc-598">`startIndex` と `length` の合計値が、`value` 内の要素数より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-598">The sum of `startIndex` and `length` is greater than the number of elements in `value`.</span></span><br /><br /> <span data-ttu-id="43ecc-599">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-599">-or-</span></span><br /><br /> <span data-ttu-id="43ecc-600">`count` が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-600">`count` is less than zero.</span></span>|<xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>|  
  
 <span data-ttu-id="43ecc-601">ポインター パラメーターを含むコンス トラクターによってスローされた例外の一覧を次に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-601">Here's a list of exceptions thrown by constructors that include pointer parameters.</span></span>  
  
|<span data-ttu-id="43ecc-602">例外</span><span class="sxs-lookup"><span data-stu-id="43ecc-602">Exception</span></span>|<span data-ttu-id="43ecc-603">条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-603">Condition</span></span>|<span data-ttu-id="43ecc-604">によってスローされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-604">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="43ecc-605">`value` 無効な Unicode 文字を格納する配列を指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-605">`value` specifies an array that contains an invalid Unicode character.</span></span><br /><br /> <span data-ttu-id="43ecc-606">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-606">-or-</span></span><br /><br /> <span data-ttu-id="43ecc-607">`value` または`value`  +  `startIndex` 64 K 未満であるアドレスを指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-607">`value` or `value` + `startIndex` specifies an address that is less than 64K.</span></span><br /><br /> <span data-ttu-id="43ecc-608">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-608">-or-</span></span><br /><br /> <span data-ttu-id="43ecc-609">新しい<xref:System.String>からインスタンスを初期化できませんでした、`value`バイト配列のため`value`既定コード ページ エンコーディングは使用されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-609">A new <xref:System.String> instance could not be initialized from the `value` byte array because `value` does not use the default code page encoding.</span></span>|<span data-ttu-id="43ecc-610">ポインターの使用のすべてのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-610">All constructors with pointers.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="43ecc-611">`value` が null です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-611">`value` is null.</span></span>|<xref:System.String.%23ctor%28System.SByte%2A%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="43ecc-612">現在のプロセスは、アドレス指定されたすべての文字に対する読み取りアクセス権を持っているわけではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-612">The current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="43ecc-613">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-613">-or-</span></span><br /><br /> <span data-ttu-id="43ecc-614">`startIndex` または `length` が 0 未満であるか、`value` + `startIndex` によりポインターのオーバーフローが発生するか、または現在のプロセスにはすべてのアドレス指定された文字に対する読み取りアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-614">`startIndex` or `length` is less than zero, `value` + `startIndex` cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="43ecc-615">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-615">-or-</span></span><br /><br /> <span data-ttu-id="43ecc-616">新しい文字列の長さが大きすぎて割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-616">The length of the new string is too large to allocate.</span></span>|<span data-ttu-id="43ecc-617">ポインターの使用のすべてのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-617">All constructors with pointers.</span></span>|  
|<xref:System.AccessViolationException>|<span data-ttu-id="43ecc-618">`value`、または`value`  +  `startIndex`  +  `length` – 1、無効なアドレスを指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-618">`value`, or `value` + `startIndex` + `length` – 1, specifies an invalid address.</span></span>|<xref:System.String.%23ctor%28System.SByte%2A%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="43ecc-619">どのメソッドが呼び出ししますか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-619">Which method do I call?</span></span>  
  
|<span data-ttu-id="43ecc-620">終了</span><span class="sxs-lookup"><span data-stu-id="43ecc-620">To</span></span>|<span data-ttu-id="43ecc-621">呼び出しまたは使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-621">Call or use</span></span>|  
|--------|-----------------|  
|<span data-ttu-id="43ecc-622">文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-622">Create a string.</span></span>|<span data-ttu-id="43ecc-623">文字列リテラルまたは既存の文字列からの割り当て ([例](#Ctor1_Example))</span><span class="sxs-lookup"><span data-stu-id="43ecc-623">Assignment from a string literal or an existing string ([example](#Ctor1_Example))</span></span>|  
|<span data-ttu-id="43ecc-624">全体の文字配列から文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-624">Create a string from an entire character array.</span></span>|<span data-ttu-id="43ecc-625"><xref:System.String.%23ctor%28System.Char%5B%5D%29> ([例](#Ctor2_Example))</span><span class="sxs-lookup"><span data-stu-id="43ecc-625"><xref:System.String.%23ctor%28System.Char%5B%5D%29> ([example](#Ctor2_Example))</span></span>|  
|<span data-ttu-id="43ecc-626">文字配列の部分から文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-626">Createa string from a portion of a character array.</span></span>|<span data-ttu-id="43ecc-627"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ([例](#Ctor3_Example))</span><span class="sxs-lookup"><span data-stu-id="43ecc-627"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ([example](#Ctor3_Example))</span></span>|  
|<span data-ttu-id="43ecc-628">同じ文字が複数回繰り返されている文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-628">Create a string that repeats the same character multiple times.</span></span>|<span data-ttu-id="43ecc-629"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> ([例](#Ctor3_Example))</span><span class="sxs-lookup"><span data-stu-id="43ecc-629"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> ([example](#Ctor3_Example))</span></span>|  
|<span data-ttu-id="43ecc-630">Unicode またはワイド文字配列へのポインターから文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-630">Create a string from a pointer to a Unicode or wide character array.</span></span>|<xref:System.String.%23ctor%28System.Char%2A%29>|  
|<span data-ttu-id="43ecc-631">Unicode またはワイド文字配列の部分から文字列を作成するには、そのポインターを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-631">Create a string from a portion of a Unicode or wide character array by using its pointer.</span></span>|<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>|  
|<span data-ttu-id="43ecc-632">C++ から文字列を作成して`char`配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-632">Create a string from a C++ `char` array.</span></span>|<span data-ttu-id="43ecc-633"><xref:System.String.%23ctor%28System.SByte%2A%29>, <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29></span><span class="sxs-lookup"><span data-stu-id="43ecc-633"><xref:System.String.%23ctor%28System.SByte%2A%29>, <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29></span></span><br /><br /> <span data-ttu-id="43ecc-634">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-634">-or-</span></span><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
|<span data-ttu-id="43ecc-635">ASCII 文字の文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-635">Create a string from ASCII characters.</span></span>|<xref:System.Text.ASCIIEncoding.GetString%2A?displayProperty=nameWithType>|  
  
<a name="Creating_Strings"></a>   
## <a name="creating-strings"></a><span data-ttu-id="43ecc-636">文字列の作成</span><span class="sxs-lookup"><span data-stu-id="43ecc-636">Creating strings</span></span>  
 <span data-ttu-id="43ecc-637">最もよく使用される手法単純代入では、文字列をプログラムで作成するために示すように[この例](#Ctor1_Example)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-637">The most commonly used technique for creating strings programmatically is simple assignment, as illustrated in [this example](#Ctor1_Example).</span></span> <span data-ttu-id="43ecc-638"><xref:System.String>クラスには、次の値から文字列を作成するのに便利なコンス トラクター オーバー ロードの 4 つの型も含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-638">The <xref:System.String> class also includes four types of constructor overloads that let you create strings from the following values:</span></span>  
  
-   <span data-ttu-id="43ecc-639">文字配列 (UTF 16 でエンコードされた文字の配列)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-639">From a character array (an array of UTF-16-encoded characters).</span></span> <span data-ttu-id="43ecc-640">新規に作成することができます<xref:System.String>オブジェクトの配列全体またはその一部の文字からです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-640">You can create a new <xref:System.String> object from the characters in the entire array or a portion of it.</span></span> <span data-ttu-id="43ecc-641"><xref:System.String.%23ctor%28System.Char%5B%5D%29>コンス トラクターは、配列内のすべての文字を新しい文字列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-641">The <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor copies all the characters in the array to the new string.</span></span> <span data-ttu-id="43ecc-642"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>コンス トラクターは、インデックスから文字をコピー`startIndex`インデックスに`startIndex`  +  `length` – 新しい文字列に 1 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-642">The <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor copies the characters from index `startIndex` to index `startIndex` + `length` – 1 to the new string.</span></span> <span data-ttu-id="43ecc-643">場合`length`0 の場合は、新しい文字列の値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-643">If `length` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
     <span data-ttu-id="43ecc-644">コードは、同じ値を持つ文字列に繰り返しインスタンスを作成する場合、は、その他の文字列を作成する方法を使用して、アプリケーションのパフォーマンスを向上できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-644">If your code repeatedly instantiates strings that have the same value, you can improve application performance by using an alternate means of creating strings.</span></span> <span data-ttu-id="43ecc-645">詳細については、次を参照してください。[反復的な文字列を処理する](#Repetitive)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-645">For more information, see [Handling repetitive strings](#Repetitive).</span></span>  
  
-   <span data-ttu-id="43ecc-646">1 つの文字重複 0、1 つ、または他にも使用して、<xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-646">From a single character that is duplicated zero, one, or more times, by using the <xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> constructor.</span></span> <span data-ttu-id="43ecc-647">場合`count`0 の場合は、新しい文字列の値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-647">If `count` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="43ecc-648">Null で終わる文字配列へのポインターから次を使用して、<xref:System.String.%23ctor%28System.Char%2A%29>または<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-648">From a pointer to a null-terminated character array, by using the <xref:System.String.%23ctor%28System.Char%2A%29> or <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> constructor.</span></span> <span data-ttu-id="43ecc-649">文字列を初期化するためには、配列全体または指定された範囲のいずれかを使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-649">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="43ecc-650">コンス トラクターは、指定したポインターから、またはプラスの指定されたポインターから始まる Unicode 文字のシーケンスをコピーする`startIndex`または配列の末尾を続行して`length`文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-650">The constructor copies a sequence of Unicode characters starting from the specified pointer or from the specified pointer plus `startIndex` and continuing to the end of the array or for `length` characters.</span></span> <span data-ttu-id="43ecc-651">場合`value`null ポインターまたは`length`0 の場合は、コンス トラクターは、値がある文字列を作成する<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-651">If `value` is a null pointer or `length` is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-652">コピー操作は、配列の末尾にプロセスが実行され、配列が null で終わる、コンス トラクターの動作がシステムに依存します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-652">If the copy operation proceeds to the end of the array and the array is not null-terminated, the constructor behavior is system-dependent.</span></span> <span data-ttu-id="43ecc-653">このような条件アクセス違反が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-653">Such a condition might cause an access violation.</span></span>  
  
     <span data-ttu-id="43ecc-654">配列には、埋め込まれた null 文字が含まれている場合 (u+0000 と '\0') と<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>オーバー ロードを呼び出すと、文字列のインスタンスに含まれる`length`も含めて文字には、null 値が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-654">If the array contains any embedded null characters (U+0000 or '\0') and the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="43ecc-655">次の例を次の 2 つの null 文字を含む 10 個の要素の配列へのポインターが渡されたときの動作、<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-655">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="43ecc-656">アドレスは、配列の先頭であり、配列内のすべての要素が文字列に追加するのには、ために、コンス トラクターには、10 文字を 2 つの埋め込み null 値を含む文字列がインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-656">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="43ecc-657">その一方で、同じ配列が渡された場合、<xref:System.String.%23ctor%28System.Char%2A%29>コンス トラクター、結果は、最初の null 文字を含まない 4 文字の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-657">On the other hand, if the same array is passed to the <xref:System.String.%23ctor%28System.Char%2A%29> constructor, the result is a four-character string that does not include the first null character.</span></span>  
  
     [!code-cpp[System.String.ctor#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/chptrctor_null.cpp#5)]
     [!code-csharp[System.String.ctor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/chptrctor_null.cs#5)]  
  
     <span data-ttu-id="43ecc-658">配列には、Unicode 文字を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-658">The array must contain Unicode characters.</span></span> <span data-ttu-id="43ecc-659">C++ では、つまり文字配列でなければならないこと、管理対象として定義されている<xref:System.Char>型またはアンマネージ`wchar_t`型です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-659">In C++, this means that the character array must be defined either as the managed <xref:System.Char>[] type or the unmanaged`wchar_t`[] type.</span></span>  
  
     <span data-ttu-id="43ecc-660">場合、<xref:System.String.%23ctor%28System.Char%2A%29>オーバー ロードが呼び出され、配列が null で終わる場合、または、<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>オーバー ロードが呼び出されたと`startIndex`  +  `length`-1 には、文字のシーケンスに割り当てられたメモリの外側に範囲が含まれています。コンス トラクターの動作はシステムに依存する、およびアクセス違反が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-660">If the <xref:System.String.%23ctor%28System.Char%2A%29> overload is called and the array is not null-terminated, or if the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called and `startIndex` + `length`-1 includes a range that it outside the memory allocated for the sequence of characters, the behavior of the constructor is system-dependent, and an access violation may occur.</span></span> <span data-ttu-id="43ecc-661">さらに、Intel Itanium プロセッサ上への呼び出し、<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>コンス トラクターがスローする可能性があります、<xref:System.DataMisalignedException>例外。</span><span class="sxs-lookup"><span data-stu-id="43ecc-661">In addition, on the Intel Itanium processor, calls to the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> constructor may throw a <xref:System.DataMisalignedException> exception.</span></span> <span data-ttu-id="43ecc-662">この場合、呼び出し、<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-662">If this occurs, call the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> instead.</span></span>  
  
-   <span data-ttu-id="43ecc-663">符号付きバイト配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-663">From a pointer to a signed byte array.</span></span> <span data-ttu-id="43ecc-664">文字列を初期化するためには、配列全体または指定された範囲のいずれかを使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-664">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="43ecc-665">バイト シーケンスにエンコードするには、既定のコード ページを使用して解釈できます。 またはコンス トラクターの呼び出しでのエンコーディングを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-665">The sequence of bytes can be interpreted by using the default code page encoding, or an encoding can be specified in the constructor call.</span></span> <span data-ttu-id="43ecc-666">コンス トラクターは、null 終端ではない配列全体から文字列インスタンスを作成しようとする場合、または配列の範囲`value`  +  `startIndex`に`value`  +  `startIndex`  +  `length` -1 は、配列に割り当てられたメモリの外部では、このコンス トラクターの動作はシステムに依存する、およびアクセス違反が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-666">If the constructor tries to instantiate a string from an entire array that is not null-terminated, or if the range of the array from `value` + `startIndex` to `value` + `startIndex` + `length` -1 is outside of the memory allocated for the array, the behavior of this constructor is system-dependent, and an access violation may occur.</span></span>  
  
     <span data-ttu-id="43ecc-667">パラメーターとして符号付きバイト配列を含む 3 つのコンス トラクターは C++ に変換するには、主に設計されています`char`この例で示すように、文字列配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-667">The three constructors that include a signed byte array as a parameter are designed primarily to convert a C++ `char` array to a string, as shown in this example:</span></span>  
  
     [!code-cpp[System.String.Ctor#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/sbyte_ctor1.cpp#4)]  
  
     <span data-ttu-id="43ecc-668">値が 0、null 文字 ('\0') またはバイト配列が含まれている場合、<xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29>オーバー ロードを呼び出すと、文字列のインスタンスに含まれる`length`も含めて文字には、null 値が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-668">If the array contains any null characters ('\0') or bytes whose value is 0 and the <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="43ecc-669">次の例を次の 2 つの null 文字を含む 10 個の要素の配列へのポインターが渡されたときの動作、<xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-669">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="43ecc-670">アドレスは、配列の先頭であり、配列内のすべての要素が文字列に追加するのには、ために、コンス トラクターには、10 文字を 2 つの埋め込み null 値を含む文字列がインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-670">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="43ecc-671">その一方で、同じ配列が渡された場合、<xref:System.String.%23ctor%28System.SByte%2A%29>コンス トラクター、結果は、最初の null 文字を含まない 4 文字の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-671">On the other hand, if the same array is passed to the <xref:System.String.%23ctor%28System.SByte%2A%29> constructor, the result is a four-character string that does not include the first null character.</span></span>  
  
     [!code-cpp[System.String.ctor#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/ptrctor_null.cpp#6)]
     [!code-csharp[System.String.ctor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ptrctor_null.cs#6)]  
  
     <span data-ttu-id="43ecc-672"><xref:System.String.%23ctor%28System.SByte%2A%29>と<xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29>コンス トラクターを解釈`value`既定の ANSI コード ページを使用すると、同一のバイト配列でこれらのコンス トラクターを呼び出すことがあります文字列を作成をそれぞれ異なるシステムで異なる値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-672">Because the <xref:System.String.%23ctor%28System.SByte%2A%29> and <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> constructors interpret `value` by using the default ANSI code page, calling these constructors with identical byte arrays may create strings that have different values on different systems.</span></span>  
  
<a name="Repetitive"></a>   
## <a name="handling-repetitive-strings"></a><span data-ttu-id="43ecc-673">反復的な文字列を処理します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-673">Handling repetitive strings</span></span>  
 <span data-ttu-id="43ecc-674">解析、または多くの場合、テキストのストリームをデコードするアプリを使用して、<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>コンス トラクターまたは<xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>の文字のシーケンスを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-674">Apps that parse or decode streams of text often use the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor or the <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to convert sequences of characters into a string.</span></span> <span data-ttu-id="43ecc-675">メモリを浪費繰り返しを作成して、1 つの文字列を再利用ではなく同じ値を持つ新しい文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-675">Repeatedly creating new strings with the same value instead of creating and reusing one string wastes memory.</span></span> <span data-ttu-id="43ecc-676">繰り返し呼び出すことによって同じ文字列値を作成する可能性がありますか、<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>コンス トラクターでかわからない場合でもはそれらのと同じ文字列値がありますを進める、ルックアップ テーブルを代わりに使用することができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-676">If you are likely to create the same string value repeatedly by calling the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor, even if you don't know in advance what those identical string values may be, you can use a lookup table instead.</span></span>  
  
 <span data-ttu-id="43ecc-677">たとえば、読み取り、XML タグと属性を含むファイルからの文字のストリームを解析するとします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-677">For example, suppose you read and parse a stream of characters from a file that contains XML tags and attributes.</span></span> <span data-ttu-id="43ecc-678">ストリームを解析するときに繰り返しが発生する特定のトークン (つまり、シンボリック意味を持つ文字のシーケンス)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-678">When you parse the stream, you repeatedly encounter certain tokens (that is, sequences of characters that have a symbolic meaning).</span></span> <span data-ttu-id="43ecc-679">文字列「0」、「1」、"true"および"false"に相当するトークンは、XML ストリームで頻繁に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-679">Tokens equivalent to the strings "0", "1", "true", and "false" are likely to occur frequently in an XML stream.</span></span>  
  
 <span data-ttu-id="43ecc-680">各トークンを新しい文字列に変換する代わりに作成することができます、<xref:System.Xml.NameTable?displayProperty=nameWithType>頻出する文字列を保持するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-680">Instead of converting each token into a new string, you can create a <xref:System.Xml.NameTable?displayProperty=nameWithType> object to hold commonly occurring strings.</span></span> <span data-ttu-id="43ecc-681"><xref:System.Xml.NameTable>一時メモリを割り当てずに格納された文字列を取得するために、オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-681">The <xref:System.Xml.NameTable> object improves performance, because it retrieves stored strings without allocating temporary memory.</span></span> <span data-ttu-id="43ecc-682">トークンを検出するときに使用して、<xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>テーブルからトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-682">When you encounter a token, use the <xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to retrieve the token from the table.</span></span> <span data-ttu-id="43ecc-683">トークンが存在する場合、メソッドは、対応する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-683">If the token exists, the method returns the corresponding string.</span></span> <span data-ttu-id="43ecc-684">トークンが存在しない場合は、使用、<xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>メソッド テーブルに、トークンを挿入して、対応する文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-684">If the token does not exist, use the <xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to insert the token into the table and to get the corresponding string.</span></span>  
  
<a name="Ctor1_Example"></a>   
## <a name="example-1-using-string-assignment"></a><span data-ttu-id="43ecc-685">例 1: を使用して文字列を代入</span><span class="sxs-lookup"><span data-stu-id="43ecc-685">Example 1: Using string assignment</span></span>  
 <span data-ttu-id="43ecc-686">次の例では、文字列リテラルを割り当てることによって新しい文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-686">The following example creates a new string by assigning it a string literal.</span></span> <span data-ttu-id="43ecc-687">最初の文字列の値を代入によって 2 番目の文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-687">It creates a second string by assigning the value of the first string to it.</span></span> <span data-ttu-id="43ecc-688">これらの新しいインスタンスを作成する 2 つの最も一般的な方法は、<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-688">These are the two most common ways to instantiate a new <xref:System.String> object.</span></span>  
  
 [!code-cpp[System.String.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/assignment.cpp#1)]
 [!code-csharp[System.String.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.String.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.ctor/vb/ctor1.vb#1)]  
  
<a name="Ctor2_Example"></a>   
## <a name="example-2-using-a-character-array"></a><span data-ttu-id="43ecc-689">例 2: 使用する文字配列</span><span class="sxs-lookup"><span data-stu-id="43ecc-689">Example 2: Using a character array</span></span>  
 <span data-ttu-id="43ecc-690">次の例では、新しい<xref:System.String>文字配列からのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-690">The following example demonstrates how to create a new <xref:System.String> object from a character array.</span></span>  
  
 [!code-cpp[stringexample1#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#1)]
 [!code-csharp[stringexample1#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#1)]
 [!code-vb[stringexample1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb#1)]  
  
<a name="Ctor3_Example"></a>   
## <a name="example-3-using-a-portion-of-a-character-array-and-repeating-a-single-character"></a><span data-ttu-id="43ecc-691">例 3: 文字の配列の部分を使用して、1 つの文字の繰り返し</span><span class="sxs-lookup"><span data-stu-id="43ecc-691">Example 3: Using a portion of a character array and repeating a single character</span></span>  
 <span data-ttu-id="43ecc-692">次の例では、新規作成<xref:System.String>オブジェクトを新規作成方法と、文字配列の部分から<xref:System.String>を 1 つの文字の複数の発生を含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-692">The following example demonstrates how to create a new <xref:System.String> object from a portion of a character array, and how to create a new <xref:System.String> object that contains multiple occurrences of a single character.</span></span>  
  
 [!code-cpp[stringexample1#3](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#3)]
 [!code-csharp[stringexample1#3](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#3)]
 [!code-vb[stringexample1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb#3)]  
  
<a name="Ctor4_Example"></a>   
## <a name="example-4-using-a-pointer-to-a-character-array"></a><span data-ttu-id="43ecc-693">例 4: の文字配列へのポインターを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-693">Example 4: Using a pointer to a character array</span></span>  
 <span data-ttu-id="43ecc-694">次の例では、新しい<xref:System.String>文字の配列へのポインターからのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-694">The following example demonstrates how to create a new <xref:System.String> object from a pointer to an array of characters.</span></span> <span data-ttu-id="43ecc-695">C# の例を使用してコンパイルする必要があります、`/unsafe`コンパイラ スイッチ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-695">The C# example must be compiled by using the `/unsafe` compiler switch.</span></span>  
  
 [!code-cpp[System.String.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char1_ctor.cpp#2)]
 [!code-csharp[System.String.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor2.cs#2)]  
  
<a name="Ctor5_Example"></a>   
## <a name="example-5-instantiating-a-string-from-a-pointer-and-a-range-of-an-array"></a><span data-ttu-id="43ecc-696">例 5: ポインターと配列の範囲から文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-696">Example 5: Instantiating a string from a pointer and a range of an array</span></span>  
 <span data-ttu-id="43ecc-697">次の例では、ピリオドまたは感嘆符のいずれかの文字の配列の要素を調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-697">The following example examines the elements of a character array for either a period or an exclamation point.</span></span> <span data-ttu-id="43ecc-698">1 つが見つかった場合は、配列内の区切り記号を前にある文字の文字列がインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-698">If one is found, it instantiates a string from the characters in the array that precede the punctuation symbol.</span></span> <span data-ttu-id="43ecc-699">それ以外の場合は、配列の内容全体を含む文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-699">If not, it instantiates a string with the entire contents of the array.</span></span> <span data-ttu-id="43ecc-700">C# の例を使用してコンパイルする必要があります、`/unsafe`コンパイラ スイッチ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-700">The C# example must be compiled using the `/unsafe` compiler switch.</span></span>  
  
 [!code-cpp[System.String.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char2_ctor.cpp#3)]
 [!code-csharp[System.String.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/char2_ctor.cs#3)]  
  
<a name="Ctor6_Example"></a>   
## <a name="example-6-instantiating-a-string-from-a-pointer-to-a-signed-byte-array"></a><span data-ttu-id="43ecc-701">例 6: 符号付きバイト配列へのポインターから文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-701">Example 6: Instantiating a string from a pointer to a signed byte array</span></span>  
 <span data-ttu-id="43ecc-702">次の例では、インスタンスを作成する方法を示しています、<xref:System.String>クラス、<xref:System.String.%23ctor%28System.SByte%2A%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-702">The following example demonstrates how you can create an instance of the <xref:System.String> class with the <xref:System.String.%23ctor%28System.SByte%2A%29> constructor.</span></span>  
  
 [!code-cpp[stringexample1#2](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#2)]
 [!code-csharp[stringexample1#2](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#2)]  
  
<a name="Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="43ecc-703">バージョン情報</span><span class="sxs-lookup"><span data-stu-id="43ecc-703">Version information</span></span>  
 <span data-ttu-id="43ecc-704">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="43ecc-704">.NET Framework</span></span>  
 <span data-ttu-id="43ecc-705">すべてのオーバー ロードではサポートされて: 4.5、4、3.5、3.0、2.0、1.1、1.0</span><span class="sxs-lookup"><span data-stu-id="43ecc-705">All overloads are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
  
 <span data-ttu-id="43ecc-706">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="43ecc-706">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="43ecc-707">すべてのオーバー ロードではサポートされて: 4、3.5 SP1</span><span class="sxs-lookup"><span data-stu-id="43ecc-707">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="43ecc-708">ポータブル クラス ライブラリ</span><span class="sxs-lookup"><span data-stu-id="43ecc-708">Portable Class Library</span></span>  
 <span data-ttu-id="43ecc-709">すべてのオーバー ロードせず、 <xref:System.SByte> `*`パラメーターがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-709">All overloads without an <xref:System.SByte>`*` parameter are supported</span></span>  
  
 <span data-ttu-id="43ecc-710">Windows ストア アプリ用 .NET</span><span class="sxs-lookup"><span data-stu-id="43ecc-710">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="43ecc-711">すべてのオーバー ロードせず、 <xref:System.SByte> `*`でパラメーターがサポートされます: Windows 8</span><span class="sxs-lookup"><span data-stu-id="43ecc-711">All overloads without an <xref:System.SByte>`*` parameter are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-712">Unicode 文字の null で終わる配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-712">A pointer to a null-terminated array of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="43ecc-713"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、指定した Unicode 文字配列を指すポインターにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-713">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-714">例とおよびその他の包括的な使用法について`String`コンス トラクター オーバー ロードを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-714">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-715">現在のプロセスは、アドレス指定されたすべての文字に対する読み取りアクセス権を持っているわけではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-715">The current process does not have read access to all the addressed characters.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-716"><paramref name="value" /> が 無効な Unicode 文字を含む配列を指定しているか、<paramref name="value" /> が 64000 よりも小さいアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-716"><paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="43ecc-717">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-717">requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-718">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-718">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-719">Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-719">An array of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="43ecc-720"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、Unicode 文字の配列により示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-720">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-721">例とおよびその他の包括的な使用法について`String`コンス トラクター オーバー ロードを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-721">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(ReadOnlySpan&lt;char&gt; value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-722">終端が null の 8 ビット符号付き整数の配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-722">A pointer to a null-terminated array of 8-bit signed integers.</span></span> <span data-ttu-id="43ecc-723">整数は、現在のシステム コード ページ エンコーディング (つまり、<see cref="P:System.Text.Encoding.Default" /> が指定したエンコーディング) を使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-723">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span></span></param>
        <summary><span data-ttu-id="43ecc-724"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、8 ビット符号付き整数の配列を指すポインターにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-724">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-725">例とおよびその他の包括的な使用法について`String`コンス トラクター オーバー ロードを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-725">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-726"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-726"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43ecc-727"><see cref="T:System.String" /> の新しいインスタンス を、<paramref name="value" /> を使用して初期化できませんでした。<paramref name="value" /> が ANSI でエンコードされていると想定しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-727">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-728"><paramref name="value" /> の Null 終端文字によって決定される初期化する新しい文字列の長さが、大きすぎて割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-728">The length of the new string to initialize, which is determined by the null termination character of <paramref name="value" />, is too large to allocate.</span></span></exception>
        <exception cref="T:System.AccessViolationException">
          <span data-ttu-id="43ecc-729"><paramref name="value" /> に指定されたアドレスが正しくありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-729"><paramref name="value" /> specifies an invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="43ecc-730">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-730">requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-731">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-731">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char c, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char c, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (c As Char, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char c, int count);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="43ecc-732">Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-732">A Unicode character.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-733"><c>c</c> の発生回数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-733">The number of times <c>c</c> occurs.</span></span></param>
        <summary><span data-ttu-id="43ecc-734"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、指定した回数だけ繰り返した指定の Unicode 文字が示す値に設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-734">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-735">例とおよびその他の包括的な使用法について`String`コンス トラクター オーバー ロードを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-735">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-736"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-736"><paramref name="count" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value, int startIndex, int length);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-737">Unicode 文字の配列を指すポインター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-737">A pointer to an array of Unicode characters.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-738"><c>value</c> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-738">The starting position within <c>value</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-739">使用する <c>value</c> 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-739">The number of characters within <c>value</c> to use.</span></span></param>
        <summary><span data-ttu-id="43ecc-740"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、Unicode 文字の配列を指す指定のポインター、配列内の開始文字位置、および長さにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-740">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-741">例とおよびその他の包括的な使用法について`String`コンス トラクター オーバー ロードを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-741">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-742"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満であるか、<paramref name="value" /> + <paramref name="startIndex" /> によりポインターのオーバーフローが発生するか、または現在のプロセスにはすべてのアドレス指定された文字に対する読み取りアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-742"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-743"><paramref name="value" /> が正しくない Unicode 文字を含む配列を指定しているか、<paramref name="value" /> + <paramref name="startIndex" /> が 64000 未満のアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-743"><paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="43ecc-744">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-744">requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-745">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-745">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value, int startIndex, int length);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-746">Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-746">An array of Unicode characters.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-747"><c>value</c> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-747">The starting position within <c>value</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-748">使用する <c>value</c> 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-748">The number of characters within <c>value</c> to use.</span></span></param>
        <summary><span data-ttu-id="43ecc-749"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、Unicode 文字の配列、配列内の開始文字位置、および長さにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-749">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-750">例とおよびその他の包括的な使用法について`String`コンス トラクター オーバー ロードを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-750">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-751"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-751"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-752"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-752"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>  
  
 <span data-ttu-id="43ecc-753">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-753">-or-</span></span>  
  
 <span data-ttu-id="43ecc-754"><paramref name="startIndex" /> と <paramref name="length" /> の合計値が、<paramref name="value" /> 内の要素数より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-754">The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-755">8 ビット符号付き整数の配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-755">A pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="43ecc-756">整数は、現在のシステム コード ページ エンコーディング (つまり、<see cref="P:System.Text.Encoding.Default" /> が指定したエンコーディング) を使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-756">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-757"><c>value</c> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-757">The starting position within <c>value</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-758">使用する <c>value</c> 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-758">The number of characters within <c>value</c> to use.</span></span></param>
        <summary><span data-ttu-id="43ecc-759"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、8 ビット符号付き整数の配列を指す指定のポインター、配列内の開始位置、および長さにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-759">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-760">例とおよびその他の包括的な使用法について`String`コンス トラクター オーバー ロードを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-760">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-761"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-761"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-762"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-762"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>  
  
 <span data-ttu-id="43ecc-763">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-763">-or-</span></span>  
  
 <span data-ttu-id="43ecc-764"><paramref name="value" /> + <paramref name="startIndex" /> で指定されたアドレスが現在のプラットフォームにとって大きすぎて、アドレス計算がオーバーフローしました。</span><span class="sxs-lookup"><span data-stu-id="43ecc-764">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span></span>  
  
 <span data-ttu-id="43ecc-765">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-765">-or-</span></span>  
  
 <span data-ttu-id="43ecc-766">初期化する新しい文字列の長さが大きすぎて割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-766">The length of the new string to initialize is too large to allocate.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43ecc-767"><paramref name="value" /> + <paramref name="startIndex" /> で指定されるアドレスは 64 K 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-767">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span></span>  
  
 <span data-ttu-id="43ecc-768">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-768">-or-</span></span>  
  
 <span data-ttu-id="43ecc-769"><see cref="T:System.String" /> の新しいインスタンスを、<paramref name="value" /> を使用して初期化できませんでした (<paramref name="value" /> が ANSI でエンコードされていると想定)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-769">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span></span></exception>
        <exception cref="T:System.AccessViolationException">
          <span data-ttu-id="43ecc-770"><paramref name="value" />、<paramref name="startIndex" />、<paramref name="length" /> 全体で、正しくないアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-770"><paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="43ecc-771">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-771">requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-772">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-772">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length, class System.Text.Encoding enc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length, System::Text::Encoding ^ enc);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="enc" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-773">8 ビット符号付き整数の配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-773">A pointer to an array of 8-bit signed integers.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-774"><c>value</c> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-774">The starting position within <c>value</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-775">使用する <c>value</c> 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-775">The number of characters within <c>value</c> to use.</span></span></param>
        <param name="enc"><span data-ttu-id="43ecc-776"><c>value</c> が参照する配列のエンコード方法を指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-776">An object that specifies how the array referenced by <c>value</c> is encoded.</span></span> <span data-ttu-id="43ecc-777"><c>enc</c> が <see langword="null" /> の場合は、ANSI エンコーディングが指定されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-777">If <c>enc</c> is <see langword="null" />, ANSI encoding is assumed.</span></span></param>
        <summary><span data-ttu-id="43ecc-778"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、8 ビット符号付き整数の配列を指す指定のポインター、配列内の開始位置、長さ、および <see cref="T:System.Text.Encoding" /> オブジェクトにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-778">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-779">例とおよびその他の包括的な使用法について`String`コンス トラクター オーバー ロードを参照してください、<xref:System.String.%23ctor%2A>コンス トラクターの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-779">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-780"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-780"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-781"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-781"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>  
  
 <span data-ttu-id="43ecc-782">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-782">-or-</span></span>  
  
 <span data-ttu-id="43ecc-783"><paramref name="value" /> + <paramref name="startIndex" /> で指定されたアドレスが現在のプラットフォームにとって大きすぎて、アドレス計算がオーバーフローしました。</span><span class="sxs-lookup"><span data-stu-id="43ecc-783">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span></span>  
  
 <span data-ttu-id="43ecc-784">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-784">-or-</span></span>  
  
 <span data-ttu-id="43ecc-785">初期化する新しい文字列の長さが大きすぎて割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-785">The length of the new string to initialize is too large to allocate.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43ecc-786"><paramref name="value" /> + <paramref name="startIndex" /> で指定されるアドレスは 64 K 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-786">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span></span>  
  
 <span data-ttu-id="43ecc-787">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-787">-or-</span></span>  
  
 <span data-ttu-id="43ecc-788">(<paramref name="value" /> が <paramref name="value" /> の指定に基づいてエンコードされていると仮定すると) <paramref name="enc" /> では、<see cref="T:System.String" /> の新しいインスタンスを初期化できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-788">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded as specified by <paramref name="enc" />.</span></span></exception>
        <exception cref="T:System.AccessViolationException">
          <span data-ttu-id="43ecc-789"><paramref name="value" />、<paramref name="startIndex" />、<paramref name="length" /> 全体で、正しくないアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-789"><paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="43ecc-790">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-790">requires full trust for the immediate caller.</span></span> <span data-ttu-id="43ecc-791">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-791">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="C#" Value="public char this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Chars(int32)" />
      <MemberSignature Language="DocId" Value="P:System.String.Chars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Chars(index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char default[int] { char get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="43ecc-792">現在の文字列内の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-792">A position in the current string.</span></span></param>
        <summary><span data-ttu-id="43ecc-793">現在の <see cref="T:System.String" /> オブジェクト内の指定された位置にある <see cref="T:System.Char" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-793">Gets the <see cref="T:System.Char" /> object at a specified position in the current <see cref="T:System.String" /> object.</span></span></summary>
        <value><span data-ttu-id="43ecc-794"><paramref name="index" /> 位置にあるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-794">The object at position <paramref name="index" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-795">`index`パラメーターは 0 から始まる。</span><span class="sxs-lookup"><span data-stu-id="43ecc-795">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="43ecc-796">このプロパティを返します、<xref:System.Char>オブジェクトで指定された位置にある、`index`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-796">This property returns the <xref:System.Char> object at the position specified by the `index` parameter.</span></span> <span data-ttu-id="43ecc-797">1 つ以上の Unicode 文字を表す場合がありますただし、<xref:System.Char>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-797">However, a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="43ecc-798">使用して、<xref:System.Globalization.StringInfo?displayProperty=nameWithType>の代わりに文字が Unicode を使用するクラス<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-798">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with Unicode characters instead of <xref:System.Char> objects.</span></span> <span data-ttu-id="43ecc-799">詳細についてを参照してください「のオブジェクトと Unicode の文字を Char する」、<xref:System.String>クラスの概要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-799">For more information, see the "Char Objects and Unicode Characters" section in the <xref:System.String> class overview.</span></span>  
  
 <span data-ttu-id="43ecc-800">C# で、<xref:System.String.Chars%2A>プロパティは、インデクサーです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-800">In C#, the <xref:System.String.Chars%2A> property is an indexer.</span></span> <span data-ttu-id="43ecc-801">Visual basic での既定のプロパティは、<xref:System.String>クラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-801">In Visual Basic, it is the default property of the <xref:System.String> class.</span></span> <span data-ttu-id="43ecc-802">各<xref:System.Char>文字列内のオブジェクトは、次のようなコードを使用してアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-802">Each <xref:System.Char> object in the string can be accessed by using code such as the following.</span></span>  
  
 [!code-csharp[System.String.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs#1)]
 [!code-vb[System.String.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-803">次の例では、文字列を検証するルーチンにこのインデクサーを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-803">The following example demonstrates how you can use this indexer in a routine to validate a string.</span></span>  
  
 [!code-cpp[Uri_IsHexDigit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Uri_IsHexDigit/CPP/uri_ishexdigit.cpp#1)]
 [!code-csharp[Uri_IsHexDigit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Uri_IsHexDigit/CS/uri_ishexdigit.cs#1)]
 [!code-vb[Uri_IsHexDigit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Uri_IsHexDigit/VB/uri_ishexdigit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="43ecc-804"><paramref name="index" /> がこのオブジェクトの長さ以上か、0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-804"><paramref name="index" /> is greater than or equal to the length of this object or less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.GetEnumerator" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-805">この <see cref="T:System.String" /> インスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-805">Returns a reference to this instance of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-806">この <see cref="T:System.String" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-806">This instance of <see cref="T:System.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-807">戻り値は、このインスタンスの独立したコピーではありません。同じデータのもう 1 つのビューです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-807">The return value is not an independent copy of this instance; it is simply another view of the same data.</span></span> <span data-ttu-id="43ecc-808">使用して、<xref:System.String.Copy%2A>または<xref:System.String.CopyTo%2A>メソッドごとに別々 に<xref:System.String>このインスタンスと同じ値を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-808">Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.</span></span>  
  
 <span data-ttu-id="43ecc-809"><xref:System.String.Clone%2A>メソッドでは、既存の文字列インスタンスだけを返します、これを直接呼び出す理由はほとんどがありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-809">Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Copy(System.String)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-810">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、それらの相対位置を並べ替え順序で示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-810">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-811"><xref:System.String.Compare%2A> メソッドのすべてのオーバーロードは、2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-811">All overloads of the <xref:System.String.Compare%2A> method return a 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>  
  
|<span data-ttu-id="43ecc-812">[値]</span><span class="sxs-lookup"><span data-stu-id="43ecc-812">Value</span></span>|<span data-ttu-id="43ecc-813">条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-813">Condition</span></span>|  
|-----------|---------------|  
|<span data-ttu-id="43ecc-814">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-814">Less than zero</span></span>|<span data-ttu-id="43ecc-815">最初の部分文字列には、並べ替え順序で 2 番目の部分文字列が前に付きます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-815">The first substring precedes the second substring in the sort order.</span></span>|  
|<span data-ttu-id="43ecc-816">0</span><span class="sxs-lookup"><span data-stu-id="43ecc-816">Zero</span></span>|<span data-ttu-id="43ecc-817">部分文字列が並べ替え順序内の同じ位置で発生するか、`length`ゼロです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-817">The substrings occur in the same position in the sort order, or `length` is zero.</span></span>|  
|<span data-ttu-id="43ecc-818">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-818">Greater than zero</span></span>|<span data-ttu-id="43ecc-819">最初の部分文字列には、並べ替え順序で 2 番目の部分文字列が次に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-819">The first substring follows the second substring in the sort order.</span></span>|  
  
> [!WARNING]
>  <span data-ttu-id="43ecc-820">オーバー ロードを呼び出す必要があります、可能な限り、<xref:System.String.Compare%2A>メソッドを含む、<xref:System.StringComparison>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-820">Whenever possible, you should call an overload of the <xref:System.String.Compare%2A> method that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="43ecc-821">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-821">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-822">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-822">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-823">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-823">The second string to compare.</span></span></param>
        <summary><span data-ttu-id="43ecc-824">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、それらの相対位置を並べ替え順序で示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-824">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-825">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-825">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-826"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-826"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-827"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-827"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-828"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-828"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-829"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-829"></term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-830"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-830"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-831"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> と同じ位置に出現します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-831"></term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-832"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-832"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-833"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-833"></term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-834">比較では、現在のカルチャを使用して、大文字小文字の規則や個別の文字のアルファベット順などのカルチャに固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-834">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="43ecc-835">たとえば、カルチャでは、文字の並べ替え順が前または後の文字に依存すること、または特定の文字の組み合わせが、1 文字として扱うことも、大文字と小文字の文字が特定の方法で比較することを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-835">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="43ecc-836">単語の並べ替え規則を使用して、比較が実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-836">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="43ecc-837">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-837">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="43ecc-838">文字列を比較するときに呼び出す必要があります、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>メソッドで、メソッドを使用する文字列比較の種類を明示的に指定することが必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-838">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="43ecc-839">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-839">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="43ecc-840">1 つまたは両方の比較対照値を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-840">One or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-841">定義上、任意の文字列を含む空の文字列 ("")、比較に null 参照ですより大きい。2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-841">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-842">非等値が検出されるか、両方の文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-842">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="43ecc-843">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列、に残りの文字の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-843">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-844">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-844">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="43ecc-845">予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-845">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="43ecc-846">たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムでは、文字"i"の言語の文字種の規則が使用されないため"file"にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-846">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)]
 [!code-csharp[System.String.Compare#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)]
 [!code-vb[System.String.Compare#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)]  
  
 <span data-ttu-id="43ecc-847">序数に基づく比較を使用して、"file"パス名を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-847">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="43ecc-848">これを行う正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-848">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)]
 [!code-csharp[System.String.Compare#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)]
 [!code-vb[System.String.Compare#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-849">次の例では、<xref:System.String.Compare%28System.String%2CSystem.String%29>文字列の 3 つのセットを比較するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-849">The following example calls the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to compare three sets of strings.</span></span>  
  
 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]  
  
 <span data-ttu-id="43ecc-850">次の例で、`ReverseStringComparer`クラスで 2 つの文字列を評価する方法を示しています、<xref:System.String.Compare%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-850">In the following example, the `ReverseStringComparer` class demonstrates how you can evaluate two strings with the <xref:System.String.Compare%2A> method.</span></span>  
  
 [!code-cpp[ArrayList#7](~/samples/snippets/cpp/VS_Snippets_CLR/ArrayList/CPP/ArrayListSample.cpp#7)]
 [!code-csharp[ArrayList#7](~/samples/snippets/csharp/VS_Snippets_CLR/ArrayList/CS/ArrayListSample.cs#7)]
 [!code-vb[ArrayList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/ArrayList/VB/ArrayListSample.vb#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-851">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-851">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-852"><see cref="M:System.String.Compare(System.String,System.String)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-852">The <see cref="M:System.String.Compare(System.String,System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-853">次のコードを実行した場合など、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]または、後で、「動物」と「ani-正しくない」(ソフト ハイフン、または U +0 00AD 使用) のカルチャに依存した比較では 2 つの文字列が同等であることを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-853">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>  
  
 [!code-csharp[System.String.Compare#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare21.cs#21)]
 [!code-vb[System.String.Compare#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare21.vb#21)]  
  
 <span data-ttu-id="43ecc-854">文字列比較で無視できる文字を認識するように呼び出す、<see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" />メソッドといずれかの値を供給<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の`comparisonType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-854">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the `comparisonType` parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-855">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-855">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-856">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-856">The second string to compare.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="43ecc-857">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-857"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-858">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。比較時に、大文字と小文字を区別するかどうかを設定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-858">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-859">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-859">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-860"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-860"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-861"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-861"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-862"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-862"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-863"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-863"></term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-864"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-864"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-865"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> と同じ位置に出現します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-865"></term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-866"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-866"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-867"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-867"></term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-868">比較では、現在のカルチャを使用して、大文字小文字の規則や個別の文字のアルファベット順などのカルチャに固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-868">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="43ecc-869">たとえば、カルチャでは、文字の並べ替え順が前または後の文字に依存すること、または特定の文字の組み合わせが、1 文字として扱うことも、大文字と小文字の文字が特定の方法で比較することを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-869">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="43ecc-870">単語の並べ替え規則を使用して、比較が実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-870">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="43ecc-871">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-871">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="43ecc-872">文字列を比較するときに呼び出す必要があります、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>メソッドで、メソッドを使用する文字列比較の種類を明示的に指定することが必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-872">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="43ecc-873">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-873">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="43ecc-874">1 つまたは両方の比較対照値を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-874">One or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-875">定義上、任意の文字列を含む空の文字列 ("")、比較に null 参照ですより大きい。2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-875">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-876">非等値が検出されるか、両方の文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-876">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="43ecc-877">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列、に残りの文字の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-877">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-878">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-878">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="43ecc-879">予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-879">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="43ecc-880">たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムでは、文字"i"の言語の文字種の規則が使用されないため"file"にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-880">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)]
 [!code-csharp[System.String.Compare#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)]
 [!code-vb[System.String.Compare#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)]  
  
 <span data-ttu-id="43ecc-881">序数に基づく比較を使用して、"file"パス名を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-881">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="43ecc-882">これを行う正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-882">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)]
 [!code-csharp[System.String.Compare#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)]
 [!code-vb[System.String.Compare#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-883">次の例では、ことを示します、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29>はメソッドを使用すると同じ<xref:System.String.ToUpper%2A>または<xref:System.String.ToLower%2A>文字列を比較するときにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-883">The following example demonstrates that the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29> method is equivalent to using <xref:System.String.ToUpper%2A> or <xref:System.String.ToLower%2A> when comparing strings.</span></span>  
  
 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-884">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-884">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-885"><see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-885">The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-886">次のコードを実行した場合など、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]または、後で、「動物」と「Ani-正しくない」(ソフト ハイフン、または U +0 00AD 使用) のカルチャ、大文字と小文字の比較では 2 つの文字列が同等であることを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-886">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive, case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>  
  
 [!code-csharp[System.String.Compare#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare22.cs#22)]
 [!code-vb[System.String.Compare#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare22.vb#22)]  
  
 <span data-ttu-id="43ecc-887">文字列比較で無視できる文字を認識するように呼び出す、<see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" />メソッドといずれかの値を供給<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-887">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-888">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-888">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-889">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-889">The second string to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-890">比較で使用する規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-890">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="43ecc-891">指定した規則を使用して、指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-891">Compares two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-892">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-892">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-893"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-893"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-894"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-894"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-895"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-895"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-896"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-896"></term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-897"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-897"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-898"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> と同じ位置にあります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-898"></term><description><paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-899"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-899"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-900"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-900"></term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-901">`comparisonType`パラメーターかを示します比較は、現在またはインバリアント カルチャを使用する必要があります、優先するか、比較対照値の大文字と小文字を無視する word (カルチャ) を使用してまたは序数に基づく (カルチャに依存しない) の並べ替え規則。</span><span class="sxs-lookup"><span data-stu-id="43ecc-901">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>  
  
 <span data-ttu-id="43ecc-902">1 つまたは両方の比較対照値を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-902">One or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-903">定義上、任意の文字列を含む空の文字列 ("")、比較に null 参照ですより大きい。2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-903">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-904">非等値が検出されるか、両方の文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-904">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="43ecc-905">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列場合は、残りの文字の文字列は大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-905">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-906">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-906">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="43ecc-907">予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-907">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="43ecc-908">たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムでは、文字"i"の言語の文字種の規則が使用されないため"file"にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-908">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)]
 [!code-csharp[System.String.Compare#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)]
 [!code-vb[System.String.Compare#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)]  
  
 <span data-ttu-id="43ecc-909">序数に基づく比較を使用して、"file"パス名を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-909">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="43ecc-910">これを行う正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-910">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)]
 [!code-csharp[System.String.Compare#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)]
 [!code-vb[System.String.Compare#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-911">次の例は、文字の 3 つのバージョンを比較"I"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-911">The following example compares three versions of the letter "I".</span></span> <span data-ttu-id="43ecc-912">結果は、カルチャ、大文字と小文字の区別するかどうか、および序数に基づく比較を実行するかどうかの選択の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-912">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>  
  
 [!code-cpp[System.String.CompareCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.CompareCmp/cpp/cmpcmp.cpp#1)]
 [!code-csharp[System.String.CompareCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.CompareCmp/cs/cmpcmp.cs#1)]
 [!code-vb[System.String.CompareCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.CompareCmp/vb/cmpcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-913"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-913"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="43ecc-914"><see cref="T:System.StringComparison" /> がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-914"><see cref="T:System.StringComparison" /> is not supported.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-915">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-915">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-916"><see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-916">The <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-917">比較で無視できる文字を認識するには、値を指定<see cref="F:System.StringComparison.Ordinal" />または<see cref="F:System.StringComparison.OrdinalIgnoreCase" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-917">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-918">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-918">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-919">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-919">The second string to compare.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="43ecc-920">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-920"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="43ecc-921">カルチャ固有の比較情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-921">An object that supplies culture-specific comparison information.</span></span></param>
        <summary><span data-ttu-id="43ecc-922">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。比較時に、大文字と小文字を区別するかどうかを指定し、比較に影響を及ぼすカルチャ固有の情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-922">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-923">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-923">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-924"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-924"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-925"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-925"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-926"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-926"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-927"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-927"></term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-928"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-928"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-929"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> と同じ位置に出現します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-929"></term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-930"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-930"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-931"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-931"></term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-932">比較を使用して、`culture`パラメーターを大文字小文字の規則や個別の文字のアルファベット順などのカルチャに固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-932">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="43ecc-933">たとえば、カルチャでは、文字の並べ替え順が前または後の文字に依存すること、または特定の文字の組み合わせが、1 文字として扱うことも、大文字と小文字の文字が特定の方法で比較することを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-933">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="43ecc-934">単語の並べ替え規則を使用して、比較が実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-934">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="43ecc-935">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-935">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="43ecc-936">1 つまたは両方の比較対照値を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-936">One or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-937">定義上、任意の文字列を含む空の文字列 ("")、比較に null 参照ですより大きい。2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-937">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-938">非等値が検出されるか、両方の文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-938">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="43ecc-939">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列、に残りの文字の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-939">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-940">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-940">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="43ecc-941">予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-941">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="43ecc-942">たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムでは、文字"i"の言語の文字種の規則が使用されないため"file"にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-942">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)]
 [!code-csharp[System.String.Compare#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)]
 [!code-vb[System.String.Compare#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)]  
  
 <span data-ttu-id="43ecc-943">序数に基づく比較を使用して、"file"パス名を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-943">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="43ecc-944">これを行う正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-944">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)]
 [!code-csharp[System.String.Compare#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)]
 [!code-vb[System.String.Compare#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-945">次の例では、カルチャが比較に影響を及ぼすを示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-945">The following example demonstrates how culture can affect a comparison.</span></span> <span data-ttu-id="43ecc-946">チェコ語、チェコ共和国カルチャ"ch"は単一の文字"d"よりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-946">In Czech - Czech Republic culture, "ch" is a single character that is greater than "d".</span></span> <span data-ttu-id="43ecc-947">ただし、英語 - 米国のカルチャで"ch"から成る 2 つの文字と、"c"が"d"より小さい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-947">However, in English - United States culture, "ch" consists of two characters, and "c" is less than "d".</span></span>  
  
 [!code-cpp[string.comp4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.comp4/CPP/string.comp4.cpp#1)]
 [!code-csharp[string.comp4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.comp4/CS/string.comp4.cs#1)]
 [!code-vb[string.comp4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.comp4/VB/string.comp4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-948"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-948"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-949">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-949">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-950"><see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-950">The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-951">次のコードを実行した場合など、 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 「Ani-正しくない」(ソフト ハイフン、または U +0 00AD 使用) に「動物」の大文字と小文字を使用してインバリアント、またはカルチャでは、2 つの文字列が同等であることを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-951">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) using the invariant culture indicates that the two strings are equivalent.</span></span>  
  
 [!code-csharp[System.String.Compare#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare23.cs#23)]
 [!code-vb[System.String.Compare#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare23.vb#23)]  
  
 <span data-ttu-id="43ecc-952">文字列比較で無視できる文字を認識するように呼び出す、<see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />メソッドといずれかの値を供給<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-952">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-953">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-953">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-954">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-954">The second string to compare.</span></span></param>
        <param name="culture"><span data-ttu-id="43ecc-955">カルチャ固有の比較情報を提供するカルチャ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-955">The culture that supplies culture-specific comparison information.</span></span></param>
        <param name="options"><span data-ttu-id="43ecc-956">比較の実行時に使用するオプション (大文字と小文字の違いや記号を無視するなど)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-956">Options to use when performing the comparison (such as ignoring case or symbols).</span></span></param>
        <summary><span data-ttu-id="43ecc-957">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、2 つの文字列の互いのリレーションシップを並べ替え順序で示す整数を返します。比較時に、指定した比較オプションと、比較に影響を及ぼすカルチャ固有の情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-957">Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-958">
            <paramref name="strA" /> と <paramref name="strB" /> との構文上の関係を示す 32 ビット符号付き整数。次の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-958">A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />, as shown in the following table</span></span>  
 
  <span data-ttu-id="43ecc-959"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-959"><list type="table"><listheader><term> Value</span></span>  
 
  <span data-ttu-id="43ecc-960"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-960"></term><description> Condition</span></span>  
 
  <span data-ttu-id="43ecc-961"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-961"></description></listheader><item><term> Less than zero</span></span>  
 
  <span data-ttu-id="43ecc-962"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-962"></term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
 
  <span data-ttu-id="43ecc-963"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-963"></description></item><item><term> Zero</span></span>  
 
  <span data-ttu-id="43ecc-964"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> と同じ位置に出現します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-964"></term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>  
 
  <span data-ttu-id="43ecc-965"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-965"></description></item><item><term> Greater than zero</span></span>  
 
  <span data-ttu-id="43ecc-966"></term><description>並べ替え順序で、<paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-966"></term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
 
</description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-967">比較を使用して、`culture`パラメーターを大文字小文字の規則や個別の文字のアルファベット順など、カルチャに固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-967">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="43ecc-968">たとえば、特定のカルチャでは、すべてのユーザーを特定の方法で大文字と小文字を比較することや、文字の並べ替え順序は、その前またはそれに続く文字によって異なりますが 1 文字として扱われる特定の文字の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-968">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="43ecc-969"><xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>メソッドが、主に並べ替えや操作をアルファベット順に並べ替えに使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-969">The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="43ecc-970">これはできません、メソッド呼び出しの主な目的は、(メソッド呼び出しの目的は、ゼロの戻り値をテストするには) の場合は、2 つの文字列が等価かどうかを決定するときに使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-970">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="43ecc-971">2 つの文字列が等価かどうかを判断するのには、呼び出し、<xref:System.String.Equals%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-971">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="43ecc-972">によってさらに、比較を指定することができます、`options`パラメーターの 1 つまたは複数のメンバーで構成される<xref:System.Globalization.CompareOptions>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-972">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration.</span></span> <span data-ttu-id="43ecc-973">ただし、このメソッドの目的は、カルチャに依存した文字列の比較を実行するため、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>と<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>値がある影響しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-973">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>  
  
 <span data-ttu-id="43ecc-974">比較対象値のいずれかまたは両方を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-974">Either or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-975">定義上、任意の文字列を含む<xref:System.String.Empty?displayProperty=nameWithType>比較を超える null 参照では、2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-975">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-976">非等値が検出されるか、両方の文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-976">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="43ecc-977">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列場合は、残りの文字の文字列は大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-977">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-978">次の例は、次の 3 つの異なる方法で 2 つの文字列を比較します、EN-US カルチャでは、の言語的な比較を使用する。EN-US カルチャの大文字小文字を区別の言語的な比較を使用します。序数に基づく比較を使用してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-978">The following example compares two strings in three different ways: using linguistic comparison for the en-US culture; using linguistic case-sensitive comparison for the en-US culture; and using an ordinal comparison.</span></span> <span data-ttu-id="43ecc-979">比較の 3 つのメソッドが 3 つの異なる結果を生成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-979">It illustrates how the three methods of comparison produce three different results.</span></span>  
  
 [!code-cpp[System.String.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/example.cpp#1)]
 [!code-csharp[System.String.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/Example.cs#1)]
 [!code-vb[System.String.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-980"><paramref name="options" /> が <see cref="T:System.Globalization.CompareOptions" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-980"><paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-981"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-981"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-982">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-982">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-983"><see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-983">The <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-984">比較で無視できる文字を認識するには、値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-984">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para>
        </block>
        <altmember cref="Overload:System.String.CompareOrdinal" />
        <altmember cref="Overload:System.String.CompareTo" />
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-985">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-985">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="43ecc-986"><c>strA</c> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-986">The position of the substring within <c>strA</c>.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-987">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-987">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="43ecc-988"><c>strB</c> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-988">The position of the substring within <c>strB</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-989">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-989">The maximum number of characters in the substrings to compare.</span></span></param>
        <summary><span data-ttu-id="43ecc-990">指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、それらの相対位置を並べ替え順序で示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-990">Compares substrings of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-991">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-991">A 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-992"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-992"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-993"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-993"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-994"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-994"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-995"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-995"></term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-996"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-996"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-997"></term><description> 部分文字列は並べ替え順序で同じ位置に出現するか、<paramref name="length" /> はゼロです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-997"></term><description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>  
  
 <span data-ttu-id="43ecc-998"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-998"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-999"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-999"></term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1000">比較する部分文字列を起動`strA`で`indexA`し、`strB`で`indexB`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1000">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="43ecc-1001">両方`indexA`と`indexB`は 0 から始まるです。 つまり、最初の文字`strA`と`strB`位置 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1001">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="43ecc-1002">最初の部分文字列の長さがの長さと等しい`strA`マイナス`indexA`1 を加算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1002">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="43ecc-1003">2 番目の部分文字列の長さがの長さと等しい`strB`マイナス`indexB`1 を加算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1003">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="43ecc-1004">比較する文字の数が 2 つの部分文字列の長さの小さい方と`length`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1004">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="43ecc-1005">`indexA`、 `indexB`、および`length`パラメーターを負にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1005">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="43ecc-1006">比較では、現在のカルチャを使用して、大文字小文字の規則や個別の文字のアルファベット順などのカルチャに固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1006">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="43ecc-1007">たとえば、カルチャでは、文字の並べ替え順が前または後の文字に依存すること、または特定の文字の組み合わせが、1 文字として扱うことも、大文字と小文字の文字が特定の方法で比較することを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1007">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="43ecc-1008">単語の並べ替え規則を使用して、比較が実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1008">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="43ecc-1009">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1009">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="43ecc-1010">文字列を比較するときに呼び出す必要があります、<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>メソッドで、メソッドを使用する文字列比較の種類を明示的に指定することが必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1010">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="43ecc-1011">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1011">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="43ecc-1012">1 つまたは両方の比較対照値を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1012">One or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-1013">定義上、任意の文字列を含む空の文字列 ("")、比較に null 参照ですより大きい。2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1013">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-1014">非等値が検出されるか、両方の部分文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1014">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="43ecc-1015">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列、に残りの文字の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1015">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-1016">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1016">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="43ecc-1017">予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1017">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="43ecc-1018">たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムでは、文字"i"の言語の文字種の規則が使用されないため"file"にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1018">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)]
 [!code-csharp[System.String.Compare#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)]
 [!code-vb[System.String.Compare#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)]  
  
 <span data-ttu-id="43ecc-1019">序数に基づく比較を使用して、"file"パス名を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1019">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="43ecc-1020">これを行う正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1020">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)]
 [!code-csharp[System.String.Compare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)]
 [!code-vb[System.String.Compare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1021">次の例では、次の 2 つの部分文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1021">The following example compares two substrings.</span></span>  
  
 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-1022"><paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1022"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1023">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1023">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1024"><paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1024"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1025">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1025">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1026"><paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1026"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-1027">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1027">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1028"><paramref name="indexA" /> または <paramref name="indexB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1028">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1029">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1029">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-1030"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1030">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1031">比較で無視できる文字を認識するように呼び出して、<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />メソッドの値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1031">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-1032">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1032">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="43ecc-1033"><c>strA</c> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1033">The position of the substring within <c>strA</c>.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-1034">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1034">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="43ecc-1035"><c>strB</c> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1035">The position of the substring within <c>strB</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-1036">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1036">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="43ecc-1037">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1037"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-1038">指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。比較時に、大文字と小文字を区別するかどうかを設定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1038">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1039">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1039">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-1040"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1040"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-1041"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-1041"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-1042"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1042"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-1043"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1043"></term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-1044"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-1044"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-1045"></term><description> 部分文字列は並べ替え順序で同じ位置に出現するか、<paramref name="length" /> はゼロです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1045"></term><description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>  
  
 <span data-ttu-id="43ecc-1046"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1046"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-1047"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1047"></term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1048">比較する部分文字列を起動`strA`で`indexA`、し、`strB`で`indexB`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1048">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="43ecc-1049">両方`indexA`と`indexB`は 0 から始まるです。 つまり、最初の文字`strA`と`strB`位置 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1049">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="43ecc-1050">最初の部分文字列の長さがの長さと等しい`strA`マイナス`indexA`1 を加算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1050">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="43ecc-1051">2 番目の部分文字列の長さがの長さと等しい`strB`マイナス`indexB`1 を加算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1051">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="43ecc-1052">比較する文字の数が 2 つの部分文字列の長さの小さい方と`length`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1052">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="43ecc-1053">`indexA`、 `indexB`、および`length`パラメーターを負にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1053">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="43ecc-1054">比較では、現在のカルチャを使用して、大文字小文字の規則や個別の文字のアルファベット順などのカルチャに固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1054">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="43ecc-1055">たとえば、カルチャでは、文字の並べ替え順が前または後の文字に依存すること、または特定の文字の組み合わせが、1 文字として扱うことも、大文字と小文字の文字が特定の方法で比較することを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1055">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="43ecc-1056">単語の並べ替え規則を使用して、比較が実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1056">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="43ecc-1057">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1057">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="43ecc-1058">文字列を比較するときに呼び出す必要があります、<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>メソッドで、メソッドを使用する文字列比較の種類を明示的に指定することが必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1058">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="43ecc-1059">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1059">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="43ecc-1060">1 つまたは両方の比較対照値を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1060">One or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-1061">定義上、任意の文字列を含む空の文字列 ("")、比較に null 参照ですより大きい。2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1061">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-1062">非等値が検出されるか、両方の部分文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1062">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="43ecc-1063">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列、に残りの文字の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1063">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-1064">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1064">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="43ecc-1065">予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1065">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="43ecc-1066">たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムでは、文字"i"の言語の文字種の規則が使用されないため"file"にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1066">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)]
 [!code-csharp[System.String.Compare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)]
 [!code-vb[System.String.Compare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)]  
  
 <span data-ttu-id="43ecc-1067">パス名は、ロケールに依存しない方法で比較する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1067">The path name needs to be compared in an invariant manner.</span></span> <span data-ttu-id="43ecc-1068">これを行う正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1068">The correct code to do this is as follows.</span></span>  
  
 [!code-cpp[System.String.Compare#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)]
 [!code-csharp[System.String.Compare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)]
 [!code-vb[System.String.Compare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1069">次の例では、場合のみが異なる 2 つの部分文字列を比較する 2 を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1069">The following example performs two comparisons of two substrings that only differ in case.</span></span> <span data-ttu-id="43ecc-1070">最初の比較と小文字を無視し、2 つ目の比較では大文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1070">The first comparison ignores case and the second comparison considers case.</span></span>  
  
 [!code-cpp[string.compare4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare4/CPP/comp4.cpp#1)]
 [!code-csharp[string.compare4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare4/CS/comp4.cs#1)]
 [!code-vb[string.compare4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare4/VB/comp4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-1071"><paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1071"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1072">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1072">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1073"><paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1073"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1074">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1074">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1075"><paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1075"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-1076">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1076">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1077"><paramref name="indexA" /> または <paramref name="indexB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1077">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1078">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1078">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-1079"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1079">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1080">比較で無視できる文字を認識するように呼び出して、<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />メソッドの値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1080">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-1081">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1081">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="43ecc-1082"><c>strA</c> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1082">The position of the substring within <c>strA</c>.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-1083">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1083">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="43ecc-1084"><c>strB</c> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1084">The position of the substring within <c>strB</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-1085">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1085">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-1086">比較で使用する規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1086">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="43ecc-1087">指定した規則を使用して、指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1087">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1088">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1088">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-1089"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1089"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-1090"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-1090"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-1091"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1091"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-1092"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1092"></term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-1093"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-1093"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-1094"></term><description> 部分文字列は並べ替え順序で同じ位置に出現するか、<paramref name="length" /> パラメーターはゼロです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1094"></term><description> The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero.</span></span>  
  
 <span data-ttu-id="43ecc-1095"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1095"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-1096"></term><description> 並べ替えで、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1096"></term><description> The substring in <paramref name="strA" /> follllows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1097">比較する部分文字列を起動`strA`で`indexA`し、`strB`で`indexB`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1097">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="43ecc-1098">両方`indexA`と`indexB`は 0 から始まるです。 つまり、最初の文字`strA`と`strB`がゼロの位置にある、1 つを配置できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1098">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="43ecc-1099">最初の部分文字列の長さがの長さと等しい`strA`マイナス`indexA`1 を加算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1099">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="43ecc-1100">2 番目の部分文字列の長さがの長さと等しい`strB`マイナス`indexB`1 を加算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1100">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="43ecc-1101">比較する文字の数が 2 つの部分文字列の長さの小さい方と`length`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1101">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="43ecc-1102">`indexA`、 `indexB`、および`length`パラメーターを負にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1102">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="43ecc-1103">`comparisonType`パラメーターかを示します比較は、現在またはインバリアント カルチャを使用する必要があります、優先するか、比較対照値の大文字と小文字を無視する word (カルチャ) を使用してまたは序数に基づく (カルチャに依存しない) の並べ替え規則。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1103">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>  
  
 <span data-ttu-id="43ecc-1104">1 つまたは両方の比較対照値を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1104">One or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-1105">定義上、任意の文字列を含む空の文字列 ("")、比較に null 参照ですより大きい。2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1105">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-1106">非等値が検出されるか、両方の部分文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1106">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="43ecc-1107">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列場合は、残りの文字の文字列は大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1107">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-1108">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1108">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="43ecc-1109">予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1109">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="43ecc-1110">たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムでは、文字"i"の言語の文字種の規則が使用されないため"file"にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1110">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)]
 [!code-csharp[System.String.Compare#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)]
 [!code-vb[System.String.Compare#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)]  
  
 <span data-ttu-id="43ecc-1111">序数に基づく比較を使用して、"file"パス名を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1111">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="43ecc-1112">これを行う正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1112">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)]
 [!code-csharp[System.String.Compare#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)]
 [!code-vb[System.String.Compare#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1113">次の例では、次の 2 つの部分文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1113">The following example compares two substrings.</span></span>  
  
 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-1114"><paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1114"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1115">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1115">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1116"><paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1116"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1117">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1117">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1118"><paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1118"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-1119">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1119">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1120"><paramref name="indexA" /> または <paramref name="indexB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1120">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-1121"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1121"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1122">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1122">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-1123"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1123">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1124">比較で無視できる文字を認識するには、値を指定<see cref="F:System.StringComparison.Ordinal" />または<see cref="F:System.StringComparison.OrdinalIgnoreCase" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1124">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-1125">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1125">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="43ecc-1126"><c>strA</c> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1126">The position of the substring within <c>strA</c>.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-1127">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1127">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="43ecc-1128"><c>strB</c> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1128">The position of the substring within <c>strB</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-1129">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1129">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="43ecc-1130">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1130"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="43ecc-1131">カルチャ固有の比較情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1131">An object that supplies culture-specific comparison information.</span></span></param>
        <summary><span data-ttu-id="43ecc-1132">指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。比較時に、大文字と小文字を区別するかどうかを指定し、比較に影響を及ぼすカルチャ固有の情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1132">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1133">2 つの比較対照値の構文上の関係を示す整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1133">An integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-1134"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1134"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-1135"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-1135"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-1136"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1136"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-1137"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1137"></term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-1138"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-1138"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-1139"></term><description> 部分文字列は並べ替え順序で同じ位置に出現するか、<paramref name="length" /> はゼロです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1139"></term><description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>  
  
 <span data-ttu-id="43ecc-1140"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1140"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-1141"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1141"></term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1142">比較する部分文字列を起動`strA`で`indexA`、し、`strB`で`indexB`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1142">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="43ecc-1143">両方`indexA`と`indexB`は 0 から始まるです。 つまり、最初の文字`strA`と`strB`がゼロの位置にある、1 つを配置できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1143">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="43ecc-1144">最初の部分文字列の長さがの長さと等しい`strA`マイナス`indexA`1 を加算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1144">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="43ecc-1145">2 番目の部分文字列の長さがの長さと等しい`strB`マイナス`indexB`1 を加算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1145">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="43ecc-1146">比較する文字の数が 2 つの部分文字列の長さの小さい方と`length`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1146">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="43ecc-1147">`indexA`、 `indexB`、および`length`パラメーターを負にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1147">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="43ecc-1148">比較を使用して、`culture`パラメーターを大文字小文字の規則や個別の文字のアルファベット順などのカルチャに固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1148">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="43ecc-1149">たとえば、カルチャでは、文字の並べ替え順が前または後の文字に依存すること、または特定の文字の組み合わせが、1 文字として扱うことも、大文字と小文字の文字が特定の方法で比較することを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1149">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="43ecc-1150">単語の並べ替え規則を使用して、比較が実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1150">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="43ecc-1151">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1151">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="43ecc-1152">1 つまたは両方の比較対照値を指定できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1152">One or both comparands can be `null`.</span></span> <span data-ttu-id="43ecc-1153">定義上、任意の文字列を含む空の文字列 ("")、比較に null 参照ですより大きい。2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1153">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-1154">非等値が検出されるか、両方の部分文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1154">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="43ecc-1155">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列、に残りの文字の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1155">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-1156">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1156">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="43ecc-1157">予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1157">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="43ecc-1158">たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムでは、文字"i"の言語の文字種の規則が使用されないため"file"にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1158">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)]
 [!code-csharp[System.String.Compare#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)]
 [!code-vb[System.String.Compare#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)]  
  
 <span data-ttu-id="43ecc-1159">序数に基づく比較を使用して、"file"パス名を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1159">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="43ecc-1160">これを行う正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1160">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)]
 [!code-csharp[System.String.Compare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)]
 [!code-vb[System.String.Compare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1161">次の例では、異なるカルチャを使用して部分文字列の大文字と小文字を無視して 2 つの部分文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1161">The following example compares two substrings using different cultures and ignoring the case of the substrings.</span></span> <span data-ttu-id="43ecc-1162">選択したカルチャに影響する方法は、文字"I"が比較されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1162">The choice of culture affects how the letter "I" is compared.</span></span>  
  
 [!code-cpp[string.compare5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare5/CPP/comp5.cpp#1)]
 [!code-csharp[string.compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare5/CS/comp5.cs#1)]
 [!code-vb[string.compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare5/VB/comp5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-1163"><paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1163"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1164">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1164">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1165"><paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1165"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1166">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1166">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1167"><paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1167"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-1168">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1168">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1169"><paramref name="strA" /> または <paramref name="strB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1169">Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1170"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1170"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1171">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1171">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-1172"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1172">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1173">比較で無視できる文字を認識するように呼び出して、<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />メソッドの値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1173">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-1174">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1174">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="43ecc-1175"><c>strA</c> 内の部分文字列の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1175">The starting position of the substring within <c>strA</c>.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-1176">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1176">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="43ecc-1177"><c>strB</c> 内の部分文字列の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1177">The starting position of the substring within <c>strB</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-1178">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1178">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="culture"><span data-ttu-id="43ecc-1179">カルチャ固有の比較情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1179">An object that supplies culture-specific comparison information.</span></span></param>
        <param name="options"><span data-ttu-id="43ecc-1180">比較の実行時に使用するオプション (大文字と小文字の違いや記号を無視するなど)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1180">Options to use when performing the comparison (such as ignoring case or symbols).</span></span></param>
        <summary><span data-ttu-id="43ecc-1181">指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、2 つの部分文字列の互いのリレーションシップを並べ替え順序で示す整数を返します。比較時に、指定した比較オプションと、比較に影響を及ぼすカルチャ固有の情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1181">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1182">2 つの部分文字列の構文上の関係を示す整数。次の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1182">An integer that indicates the lexical relationship between the two substrings, as shown in the following table.</span></span>  
  
 <span data-ttu-id="43ecc-1183"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1183"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-1184"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-1184"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-1185"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1185"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-1186"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の前になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1186"></term><description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 <span data-ttu-id="43ecc-1187"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-1187"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-1188"></term><description> 部分文字列は並べ替え順序で同じ位置に出現するか、<paramref name="length" /> はゼロです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1188"></term><description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>  
  
 <span data-ttu-id="43ecc-1189"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1189"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-1190"></term><description> 並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1190"></term><description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1191">比較する部分文字列の開始`strA`位置にある`indexA`し、`strB`位置にある`indexB`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1191">The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`.</span></span> <span data-ttu-id="43ecc-1192">最初の部分文字列の長さがの長さ`strA`マイナス`indexA`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1192">The length of the first substring is the length of `strA` minus `indexA`.</span></span> <span data-ttu-id="43ecc-1193">2 番目の部分文字列の長さがの長さ`strB`マイナス`indexB`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1193">The length of the second substring is the length of `strB` minus `indexB`.</span></span>  
  
 <span data-ttu-id="43ecc-1194">比較する文字の数が 2 つの部分文字列の長さの小さい方と`length`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1194">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="43ecc-1195">`indexA`、 `indexB`、および`length`パラメーターを負にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1195">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="43ecc-1196">比較を使用して、`culture`パラメーターを大文字小文字の規則や個別の文字のアルファベット順など、カルチャに固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1196">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="43ecc-1197">たとえば、特定のカルチャでは、すべてのユーザーを特定の方法で大文字と小文字を比較することや、文字の並べ替え順序は、その前またはそれに続く文字によって異なりますが 1 文字として扱われる特定の文字の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1197">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="43ecc-1198"><xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>メソッドが、主に並べ替えや操作をアルファベット順に並べ替えに使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1198">The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="43ecc-1199">これはできません、メソッド呼び出しの主な目的は、(メソッド呼び出しの目的は、ゼロの戻り値をテストするには) の場合は、次の 2 つの部分文字列が等価かどうかを決定するときに使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1199">It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="43ecc-1200">2 つの文字列が等価かどうかを判断するのには、呼び出し、<xref:System.String.Equals%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1200">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="43ecc-1201">一方または両方の`strA`と`strB`できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1201">One or both of `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="43ecc-1202">定義上、任意の文字列を含む<xref:System.String.Empty?displayProperty=nameWithType>比較を超える null 参照では、2 つの null 参照が互いに等しいと比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1202">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="43ecc-1203">によってさらに、比較を指定することができます、`options`パラメーターの 1 つまたは複数のメンバーで構成される<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1203">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="43ecc-1204">ただし、このメソッドの目的は、カルチャに依存した文字列の比較を実行するため、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>と<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>値がある影響しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1204">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>  
  
 <span data-ttu-id="43ecc-1205">非等値が検出されるか、両方の部分文字列を比較したときに、比較が終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1205">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="43ecc-1206">ただし、2 つの文字列の比較で 1 つの文字列の末尾に等しく、残りの文字があるその他の文字列場合は、残りの文字の文字列は大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1206">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span> <span data-ttu-id="43ecc-1207">戻り値は、最後に実行される比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1207">The return value is the result of the last comparison performed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1208">次の例では、 <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> 2 人のユーザーの姓を比較するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1208">The following example uses the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method to compare the last names of two people.</span></span> <span data-ttu-id="43ecc-1209">次にアルファベット順に表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1209">It then lists them in alphabetical order.</span></span>  
  
 [!code-csharp[System.String.Compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare5/cs/Example.cs#1)]
 [!code-vb[System.String.Compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare5/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-1210"><paramref name="options" /> が <see cref="T:System.Globalization.CompareOptions" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1210"><paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-1211"><paramref name="indexA" /> は <paramref name="strA" /><see langword=".Length" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1211"><paramref name="indexA" /> is greater than <paramref name="strA" /><see langword=".Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1212">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1212">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1213"><paramref name="indexB" /> は <paramref name="strB" /><see langword=".Length" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1213"><paramref name="indexB" /> is greater than <paramref name="strB" /><see langword=".Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1214">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1214">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1215"><paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1215"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-1216">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1216">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1217"><paramref name="strA" /> または <paramref name="strB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1217">Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1218"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1218"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1219">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1219">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-1220"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1220">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1221">比較で無視できる文字を認識するには、値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1221">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para>
        </block>
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareOrdinal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-1222">それぞれの文字列の対応する <see cref="T:System.String" /> オブジェクトの数値を評価することで、2 つの <see cref="T:System.Char" /> を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1222">Compares two <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, System::String ^ strB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-1223">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1223">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-1224">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1224">The second string to compare.</span></span></param>
        <summary><span data-ttu-id="43ecc-1225">それぞれの文字列の対応する <see cref="T:System.String" /> オブジェクトの数値を評価することで、指定した 2 つの <see cref="T:System.Char" /> を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1225">Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1226">2 つの比較対照値の構文上の関係を示す整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1226">An integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-1227"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1227"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-1228"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-1228"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-1229"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1229"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-1230"></term><description><paramref name="strA" /> が <paramref name="strB" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1230"></term><description><paramref name="strA" /> is less than <paramref name="strB" />.</span></span>  
  
 <span data-ttu-id="43ecc-1231"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-1231"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-1232"></term><description><paramref name="strA" /> と <paramref name="strB" /> が等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1232"></term><description><paramref name="strA" /> and <paramref name="strB" /> are equal.</span></span>  
  
 <span data-ttu-id="43ecc-1233"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1233"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-1234"></term><description><paramref name="strA" /> は <paramref name="strB" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1234"></term><description><paramref name="strA" /> is greater than <paramref name="strB" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1235">このメソッドは、序数の並べ替え規則を使用して、区別する比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1235">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="43ecc-1236">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1236">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-1237">実行するには、大文字と小文字は序数の並べ替え規則を使用して呼び出し、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>メソッドを`comparisonType`引数に設定されて<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1237">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="43ecc-1238"><xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29>静的メソッドでは、`strA`と`strB`できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1238">Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="43ecc-1239">両方の値が場合`null`、メソッドがあることを示す 0 (ゼロ) を返します`strA`と`strB`が等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1239">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="43ecc-1240">値の一方のみが`null`メソッドが長くなるように null 以外の値を考慮します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1240">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1241">次の例を実行し、2 つの序数に基づく比較文字列の場合のみが異なります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1241">The following example performs and ordinal comparison of two strings that only differ in case.</span></span>  
  
 [!code-cpp[string.compareordinal#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compareordinal/CPP/comp0.cpp#1)]
 [!code-csharp[string.compareordinal#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compareordinal/CS/comp0.cs#1)]
 [!code-vb[string.compareordinal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compareordinal/VB/comp0.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="43ecc-1242">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1242">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="43ecc-1243"><c>strA</c> 内の部分文字列の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1243">The starting index of the substring in <c>strA</c>.</span></span></param>
        <param name="strB"><span data-ttu-id="43ecc-1244">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1244">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="43ecc-1245"><c>strA</c> 内の部分文字列の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1245">The starting index of the substring in <c>strB</c>.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-1246">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1246">The maximum number of characters in the substrings to compare.</span></span></param>
        <summary><span data-ttu-id="43ecc-1247">それぞれの部分文字列の対応する <see cref="T:System.Char" /> オブジェクトの数値を評価することにより、指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1247">Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1248">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1248">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <span data-ttu-id="43ecc-1249"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1249"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-1250"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-1250"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-1251"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1251"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-1252"></term><description> <paramref name="strA" /> 内の部分文字列が <paramref name="strB" /> 内の部分文字列より小さくなっています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1252"></term><description> The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</span></span>  
  
 <span data-ttu-id="43ecc-1253"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-1253"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-1254"></term><description> これらの部分文字列が等しいか、または <paramref name="length" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1254"></term><description> The substrings are equal, or <paramref name="length" /> is zero.</span></span>  
  
 <span data-ttu-id="43ecc-1255"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1255"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-1256"></term><description> <paramref name="strA" /> 内の部分文字列が <paramref name="strB" /> 内の部分文字列より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1256"></term><description> The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1257">`indexA`、 `indexB`、および`length`パラメーターを負にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1257">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="43ecc-1258">比較する文字数は、いずれか小さいほうの長さの`strA`小さい`indexA`の長さ`strB`小さい`indexB`、および`length`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1258">The number of characters compared is the lesser of the length of `strA` less `indexA`, the length of `strB` less `indexB`, and `length`.</span></span>  
  
 <span data-ttu-id="43ecc-1259">このメソッドは、序数の並べ替え規則を使用して、区別する比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1259">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="43ecc-1260">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1260">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-1261">実行するには、大文字と小文字は序数の並べ替え規則を使用して呼び出し、<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>メソッドを`comparisonType`引数に設定されて<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1261">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="43ecc-1262"><xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29>静的メソッドでは、`strA`と`strB`できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1262">Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="43ecc-1263">両方の値が場合`null`、メソッドがあることを示す 0 (ゼロ) を返します`strA`と`strB`が等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1263">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="43ecc-1264">値の一方のみが`null`メソッドが長くなるように null 以外の値を考慮します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1264">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1265">次の例では、ことを示します<xref:System.String.CompareOrdinal%2A>と<xref:System.String.Compare%2A>異なる並べ替え順を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1265">This following example demonstrates that <xref:System.String.CompareOrdinal%2A> and <xref:System.String.Compare%2A> use different sort orders.</span></span>  
  
 [!code-cpp[StringCompareOrdinal#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareOrdinal/CPP/stringcompareordinal.cpp#1)]
 [!code-csharp[StringCompareOrdinal#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareOrdinal/CS/stringcompareordinal.cs#1)]
 [!code-vb[StringCompareOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareOrdinal/VB/stringcompareordinal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-1266"><paramref name="strA" /> が <see langword="null" /> ではなく、<paramref name="indexA" /> は <paramref name="strA" />.<see cref="P:System.String.Length" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1266"><paramref name="strA" /> is not <see langword="null" /> and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1267">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1267">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1268"><paramref name="strB" /> が <see langword="null" /> ではなく、<paramref name="indexB" /> は <paramref name="strB" />.<see cref="P:System.String.Length" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1268"><paramref name="strB" /> is not <see langword="null" /> and <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
 <span data-ttu-id="43ecc-1269">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1269">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1270"><paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1270"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span></exception>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-1271">このインスタンスと指定したオブジェクトまたは <see cref="T:System.String" /> とを比較し、並べ替え順序において、このインスタンスの位置が指定したオブジェクトまたは <see cref="T:System.String" /> の前、後ろ、または同じのいずれであるかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1271">Compares this instance with a specified object or <see cref="T:System.String" /> and returns an integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or <see cref="T:System.String" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1272">両方のオーバー ロード、<xref:System.String.CompareTo%2A>メソッドはカルチャと区別する比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1272">Both overloads of the <xref:System.String.CompareTo%2A> method perform culture-sensitive and case-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1273">このメソッドを使用して、カルチャに依存しないまたは序数比較を実行することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1273">You cannot use this method to perform culture-insensitive or ordinal comparisons.</span></span> <span data-ttu-id="43ecc-1274">コードをわかりやすく、ことをお勧めは避けること、<xref:System.String.CompareTo%2A>メソッドを呼び出し、<xref:System.String.Compare%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1274">For code clarity, we recommend that you avoid the <xref:System.String.CompareTo%2A> method and call the <xref:System.String.Compare%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1275"><see cref="T:System.String" /> に評価されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1275">An object that evaluates to a <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-1276">このインスタンスと指定した <see cref="T:System.Object" /> とを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Object" /> の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1276">Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1277">並べ替え順序において、このインスタンスの位置が <paramref name="value" /> パラメーターよりも前、後ろ、または同じのいずれであるかを示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1277">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.</span></span>  
  
 <span data-ttu-id="43ecc-1278"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1278"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-1279"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-1279"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-1280"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1280"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-1281"></term><description> このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1281"></term><description> This instance precedes <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="43ecc-1282"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-1282"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-1283"></term><description> 並べ替え順序で、このインスタンスの位置が <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1283"></term><description> This instance has the same position in the sort order as <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="43ecc-1284"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1284"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-1285"></term><description> このインスタンスの位置は <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1285"></term><description> This instance follows <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="43ecc-1286">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1286">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1287"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1287"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1288">`value` 必要があります、<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1288">`value` must be a <xref:System.String> object.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="43ecc-1289"><xref:System.String.CompareTo%2A>メソッドが並べ替えまたは操作をアルファベット順に並べ替えで使用するため、主に設計されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1289">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="43ecc-1290">これはありません、メソッド呼び出しの主な目的は、2 つの文字列が等価かどうかを決定するときに使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1290">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="43ecc-1291">2 つの文字列が等価かどうかを判断するのには、呼び出し、<xref:System.String.Equals%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1291">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="43ecc-1292">このメソッドは、現在のカルチャを使用して、単語 (大文字小文字を区別やカルチャ) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1292">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="43ecc-1293">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1293">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="43ecc-1294">このメソッドの動作に関する詳細については、の「解説」セクションを参照してください、<xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1294">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1295">次の例では、<xref:System.String.CompareTo%2A>メソッドを<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1295">The following example uses the <xref:System.String.CompareTo%2A> method with an <xref:System.Object>.</span></span> <span data-ttu-id="43ecc-1296">しようとすると比較するため、<xref:System.String>インスタンスを`TestClass`オブジェクト、メソッドをスロー、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1296">Because it attempts to compare a <xref:System.String> instance to a `TestClass` object, the method throws an <xref:System.ArgumentException>.</span></span>  
  
 [!code-cpp[ExToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ExToString/CPP/extostring.cpp#1)]
 [!code-csharp[ExToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ExToString/CS/extostring.cs#1)]
 [!code-vb[ExToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ExToString/VB/extostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-1297"><paramref name="value" /> が <see cref="T:System.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1297"><paramref name="value" /> is not a <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1298">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1298">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-1299"><see cref="M:System.String.CompareTo(System.Object)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1299">The <see cref="M:System.String.CompareTo(System.Object)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1300">次のコードを実行した場合など、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]または、後で、「動物」「ani-正しくない」(ソフト ハイフン、または U +0 00AD 使用) との比較では 2 つの文字列が同等であることを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1300">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>  
  
 [!code-csharp[System.String.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.String.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]  
  
 <span data-ttu-id="43ecc-1301">文字列比較で無視できる文字を認識するように呼び出して、<see cref="M:System.String.CompareOrdinal(System.String,System.String)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1301">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</span></span></para>
        </block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::String ^ strB);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strB"><span data-ttu-id="43ecc-1302">このインスタンスと比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1302">The string to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-1303">このインスタンスと指定した <see cref="T:System.String" /> オブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した文字列の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1303">Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1304">並べ替え順序において、このインスタンスの位置が <paramref name="strB" /> パラメーターよりも前、後ろ、または同じのいずれであるかを示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1304">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="strB" /> parameter.</span></span>  
  
 <span data-ttu-id="43ecc-1305"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1305"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="43ecc-1306"></term><description>条件</span><span class="sxs-lookup"><span data-stu-id="43ecc-1306"></term><description> Condition</span></span>  
  
 <span data-ttu-id="43ecc-1307"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1307"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="43ecc-1308"></term><description> このインスタンスの位置が <paramref name="strB" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1308"></term><description> This instance precedes <paramref name="strB" />.</span></span>  
  
 <span data-ttu-id="43ecc-1309"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="43ecc-1309"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="43ecc-1310"></term><description> 並べ替え順序で、このインスタンスの位置が <paramref name="strB" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1310"></term><description> This instance has the same position in the sort order as <paramref name="strB" />.</span></span>  
  
 <span data-ttu-id="43ecc-1311"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="43ecc-1311"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="43ecc-1312"></term><description> このインスタンスの位置は <paramref name="strB" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1312"></term><description> This instance follows <paramref name="strB" />.</span></span>  
  
 <span data-ttu-id="43ecc-1313">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1313">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1314"><paramref name="strB" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1314"><paramref name="strB" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1315">このメソッドは、現在のカルチャを使用して、単語 (大文字小文字を区別やカルチャ) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1315">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="43ecc-1316">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1316">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="43ecc-1317"><xref:System.String.CompareTo%2A>メソッドが並べ替えまたは操作をアルファベット順に並べ替えで使用するため、主に設計されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1317">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="43ecc-1318">これはありません、メソッド呼び出しの主な目的は、2 つの文字列が等価かどうかを決定するときに使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1318">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="43ecc-1319">2 つの文字列が等価かどうかを判断するのには、呼び出し、<xref:System.String.Equals%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1319">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="43ecc-1320">このメソッドの動作に関する詳細については、の「解説」セクションを参照してください、<xref:System.String.Compare%28System.String%2CSystem.String%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1320">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29> method.</span></span>  
  
 <span data-ttu-id="43ecc-1321">このメソッドを実装する、<xref:System.IComparable%601?displayProperty=nameWithType>インターフェイスし、実行よりもわずかに向上、<xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType>メソッドを決定するがあるないためかどうか、`strB`引数は、ボックス化する必要があります変更可能な値の型とキャストする必要はありません、パラメーターから、<xref:System.Object>を<xref:System.String>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1321">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType> method, because it does not have to determine whether the `strB` argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref:System.Object> to a <xref:System.String>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1322">次の例では、<xref:System.String.CompareTo%2A>別の文字列の現在の文字列インスタンスと比較するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1322">The following example uses the <xref:System.String.CompareTo%2A> method to compare the current string instance with another string.</span></span>  
  
 [!code-cpp[stringcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareTo/CPP/stringcompareto.cpp#1)]
 [!code-csharp[stringcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareTo/CS/stringcompareto.cs#1)]
 [!code-vb[stringcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareTo/VB/stringcompareto.vb#1)]  
  
 <span data-ttu-id="43ecc-1323">次の例では、いくつかの値と参照型の CompareTo メソッドのジェネリックと非ジェネリックのバージョンを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1323">The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1324">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1324">Character sets include ignorable characters.</span></span> <span data-ttu-id="43ecc-1325"><see cref="M:System.String.CompareTo(System.String)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1325">The <see cref="M:System.String.CompareTo(System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1326">次のコードを実行した場合など、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]または、後で、「動物」「ani-正しくない」(ソフト ハイフン、または U +0 00AD 使用) との比較では 2 つの文字列が同等であることを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1326">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>  
  
 [!code-csharp[System.String.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.String.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]  
  
 <span data-ttu-id="43ecc-1327">文字列比較で無視できる文字を認識するように呼び出して、<see cref="M:System.String.CompareOrdinal(System.String,System.String)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1327">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</span></span></para>
        </block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Concat">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-1328"><see cref="T:System.String" /> の 1 つ以上のインスタンス、または <see cref="T:System.String" /> の 1 つ以上のインスタンスの <see cref="T:System.Object" /> 形式の値を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1328">Concatenates one or more instances of <see cref="T:System.String" />, or the <see cref="T:System.String" /> representations of the values of one or more instances of <see cref="T:System.Object" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (System.Collections.Generic.IEnumerable&lt;string&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="43ecc-1329"><see cref="T:System.Collections.Generic.IEnumerable`1" /> を実装し、ジェネリック型引数が <see cref="T:System.String" /> であるコレクション オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1329">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> and whose generic type argument is <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-1330"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 型の構築された <see cref="T:System.String" /> コレクションのメンバーを連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1330">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1331"><paramref name="values" /> 内の文字列の連結結果。または、<paramref name="values" /> が空の <see langword="IEnumerable(Of String)" /> である場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1331">The concatenated strings in <paramref name="values" />, or <see cref="F:System.String.Empty" /> if <paramref name="values" /> is an empty <see langword="IEnumerable(Of String)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1332">メソッド内の各オブジェクトを連結する`values`; 任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1332">The method concatenates each object in `values`; it does not add any delimiters.</span></span> <span data-ttu-id="43ecc-1333">各メンバーの間の区切り記号を指定する`values`を呼び出して、<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1333">To specify a delimiter between each member of `values`, call the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 <span data-ttu-id="43ecc-1334"><xref:System.String.Empty>文字列は、の任意の null 要素の代わりに使用`values`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1334">An <xref:System.String.Empty> string is used in place of any null element in `values`.</span></span>  
  
 <span data-ttu-id="43ecc-1335">場合`values`は、空`IEnumerable(Of String)`、メソッドを返します<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1335">If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-1336">場合`values`は`null`がスローされます、<xref:System.ArgumentNullException>例外。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1336">If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception.</span></span>  
  
 <span data-ttu-id="43ecc-1337"><xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 内の各要素を連結できる便利なメソッドは、`IEnumerable(Of String)`を文字列配列の要素を変換せずコレクション。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1337"><xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="43ecc-1338">統合言語クエリ (LINQ) クエリ式で特に便利です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1338">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="43ecc-1339">次の例では、`List(Of String)`と等しいか (つまり、例では、"M") 特定の文字を超える文字を選択する、ラムダ式にアルファベットの大文字または小文字の文字を含むオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1339">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="43ecc-1340">`IEnumerable(Of String)`によって返されるコレクション、<xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>にメソッドが渡される、<xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29>を 1 つの文字列として結果を表示するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1340">The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.</span></span>  
  
 [!code-csharp[System.String.Concat#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs#3)]
 [!code-vb[System.String.Concat#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1341">次の例では、エラトステネスの篩というアルゴリズムを使用して、小さいか 100 素数を計算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1341">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="43ecc-1342">結果を割り当てます、<xref:System.Collections.Generic.List%601>型のオブジェクト<xref:System.String>、しに渡されます、<xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1342">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Concat#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat1.cs#2)]
 [!code-vb[System.String.Concat#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1343"><paramref name="values" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1343"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="43ecc-1344">表現するオブジェクトまたは <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1344">The object to represent, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-1345">指定されたオブジェクトの文字列形式を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1345">Creates the string  representation of a specified object.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1346"><paramref name="arg0" /> の値の文字列形式。<see cref="F:System.String.Empty" /> が <paramref name="arg0" /> の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1346">The string representation of the value of <paramref name="arg0" />, or <see cref="F:System.String.Empty" /> if <paramref name="arg0" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1347"><xref:System.String.Concat%28System.Object%29>メソッドを表します`arg0`を呼び出して、パラメーターなしの文字列として`ToString`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1347">The <xref:System.String.Concat%28System.Object%29> method represents `arg0` as a string by calling its parameterless `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1348">次の例で、<xref:System.String.Concat%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1348">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="43ecc-1349">連結する要素を格納しているオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1349">An object array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-1350">指定された <see cref="T:System.Object" /> 配列の要素の文字列表記を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1350">Concatenates the string representations of the elements in a specified <see cref="T:System.Object" /> array.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1351"><paramref name="args" /> の各要素の値を連結した文字列表記。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1351">The concatenated string representations of the values of the elements in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1352">メソッド内の各オブジェクトを連結する`args`パラメーターなしで呼び出すことによって`ToString`; オブジェクトのメソッド、区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1352">The method concatenates each object in `args` by calling the parameterless `ToString` method of that object; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="43ecc-1353"><xref:System.String.Empty?displayProperty=nameWithType> null オブジェクトの配列の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1353"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null object in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1354">次の例での使用、<xref:System.String.Concat%2A>メソッドを<xref:System.Object>配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1354">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with an <xref:System.Object> array.</span></span>  
  
 [!code-csharp[stringconcat1#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat1/CS/stringconcat1.cs#1)]
 [!code-vb[stringconcat1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat1/VB/stringconcat1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1355"><paramref name="args" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1355"><paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="43ecc-1356">メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1356">Out of memory.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1357">このメソッドは、C++ コードでは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1357">This method is not called by C++ code.</span></span> <span data-ttu-id="43ecc-1358">C++ コンパイラへの呼び出しを解決する<see cref="Overload:System.String.Concat" />への呼び出しとして 4 つ以上のオブジェクトのパラメーターがある<see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1358">The C++ compiler resolves calls to <see cref="Overload:System.String.Concat" /> that have four or more object parameters as a call to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />.</span></span></para>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params string[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray values As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="43ecc-1359">文字列インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1359">An array of string instances.</span></span></param>
        <summary><span data-ttu-id="43ecc-1360">指定した <see cref="T:System.String" /> 配列の要素を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1360">Concatenates the elements of a specified <see cref="T:System.String" /> array.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1361">連結された <paramref name="values" /> の要素。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1361">The concatenated elements of <paramref name="values" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1362">メソッド内の各オブジェクトを連結する`values`; 任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1362">The method concatenates each object in `values`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="43ecc-1363"><xref:System.String.Empty>文字列は、配列内の任意の null オブジェクトの代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1363">An <xref:System.String.Empty> string is used in place of any null object in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1364">次の例での使用、<xref:System.String.Concat%2A>メソッドを<xref:System.String>配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1364">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with a <xref:System.String> array.</span></span>  
  
 [!code-cpp[stringconcat3#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat3/CPP/stringconcat3.cpp#1)]
 [!code-csharp[stringconcat3#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat3/CS/stringconcat3.cs#1)]
 [!code-vb[stringconcat3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat3/VB/stringconcat3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1365"><paramref name="values" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1365"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="43ecc-1366">メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1366">Out of memory.</span></span></exception>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="43ecc-1367">連結する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1367">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="43ecc-1368">連結する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1368">The second object to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-1369">指定した 2 つのオブジェクトの文字列形式を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1369">Concatenates the string representations of two specified objects.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1370"><paramref name="arg0" /> および <paramref name="arg1" /> の値の文字列形式を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1370">The concatenated string representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1371">メソッドを連結`arg0`と`arg1`パラメーターなしで呼び出すことによって`ToString`メソッドの`arg0`と`arg1`; 任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1371">The method concatenates `arg0` and `arg1` by calling the parameterless `ToString` method of `arg0` and `arg1`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="43ecc-1372"><xref:System.String.Empty?displayProperty=nameWithType> 任意の null の引数の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1372"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
 <span data-ttu-id="43ecc-1373">場合か、引数の配列参照は、メソッドは、そのメンバー (たとえば、"System.String[]") 代わりに、その配列を表す文字列を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1373">If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, "System.String[]").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1374">次の例で、<xref:System.String.Concat%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1374">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="43ecc-1375">連結する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1375">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="43ecc-1376">連結する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1376">The second string to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-1377">指定した 2 つの <see cref="T:System.String" /> インスタンスを連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1377">Concatenates two specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1378"><paramref name="str0" /> と <paramref name="str1" /> の連結。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1378">The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1379">メソッドを連結`str0`と`str1`; 任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1379">The method concatenates `str0` and `str1`; it does not add any delimiters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-1380">など、言語の文字列連結演算子を使用することもできます`+`C# の場合、または`&`と`+`Visual basic)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1380">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)</span></span>  
>   
>  <span data-ttu-id="43ecc-1381">、文字列を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1381">, to concatenate strings.</span></span>  
  
 <span data-ttu-id="43ecc-1382"><xref:System.String.Empty>文字列は、任意の null の引数の代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1382">An <xref:System.String.Empty> string is used in place of any null argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1383">次の例では、個人の最初ミドル ネーム、姓、名を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1383">The following example concatenates a person's first, middle, and last name.</span></span>  
  
 [!code-cpp[stringconcat4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat4/CPP/stringconcat4.cpp#1)]
 [!code-csharp[stringconcat4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat4/CS/stringconcat4.cs#1)]
 [!code-vb[stringconcat4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat4/VB/stringconcat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="43ecc-1384">連結する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1384">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="43ecc-1385">連結する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1385">The second object to concatenate.</span></span></param>
        <param name="arg2"><span data-ttu-id="43ecc-1386">連結する 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1386">The third object to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-1387">指定した 3 つのオブジェクトの文字列形式を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1387">Concatenates the string representations of three specified objects.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1388"><paramref name="arg0" />、<paramref name="arg1" /> および <paramref name="arg2" /> の値の文字列形式を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1388">The concatenated string representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1389">メソッドを連結`arg0`、 `arg1`、および`arg2`パラメーターなしで呼び出すことによって`ToString`; 各オブジェクトの任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1389">The method concatenates `arg0`, `arg1`, and `arg2` by calling the parameterless `ToString` method of each object; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="43ecc-1390"><xref:System.String.Empty?displayProperty=nameWithType> 任意の null の引数の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1390"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1391">次の例で、<xref:System.String.Concat%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1391">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="43ecc-1392">連結する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1392">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="43ecc-1393">連結する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1393">The second string to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="43ecc-1394">連結する 3 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1394">The third string to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-1395"><see cref="T:System.String" /> の指定した 3 つのインスタンスを連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1395">Concatenates three specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1396"><paramref name="str0" />、<paramref name="str1" />、および <paramref name="str2" /> の連結。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1396">The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1397">メソッドを連結`str0`、 `str1`、および`str2`; 任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1397">The method concatenates `str0`, `str1`, and `str2`; it does not add any delimiters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-1398">など、言語の文字列連結演算子を使用することもできます`+`C# の場合、または`&`と`+`Visual basic)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1398">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)</span></span>  
>   
>  <span data-ttu-id="43ecc-1399">、文字列を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1399">, to concatenate strings.</span></span>  
  
 <span data-ttu-id="43ecc-1400"><xref:System.String.Empty>文字列は、任意の null の引数の代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1400">An <xref:System.String.Empty> string is used in place of any null argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1401">次の例では、<xref:System.String.Concat%2A>を連結する 3 つのメソッドは文字列し、結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1401">The following example uses the <xref:System.String.Concat%2A> method to concatenate three strings and displays the result.</span></span>  
  
 [!code-cpp[System.String.Concat#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.concat/cpp/Concat6.cpp#6)]
 [!code-csharp[System.String.Concat#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/Concat6.cs#6)]
 [!code-vb[System.String.Concat#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/Concat6.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="43ecc-1402">連結する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1402">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="43ecc-1403">連結する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1403">The second object to concatenate.</span></span></param>
        <param name="arg2"><span data-ttu-id="43ecc-1404">連結する 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1404">The third object to concatenate.</span></span></param>
        <param name="arg3"><span data-ttu-id="43ecc-1405">連結する 4 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1405">The fourth object to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-1406">4 つの指定したオブジェクトと、オプションの可変長パラメーター リストで指定した任意のオブジェクトの文字列表現を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1406">Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1407">パラメーター リスト内の各値の文字列を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1407">The concatenated string representation of each value in the parameter list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-1408">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1408">This API is not CLS-compliant.</span></span> <span data-ttu-id="43ecc-1409">CLS 準拠の代わりとして <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1409">The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-1410">C# および Visual Basic コンパイラへの呼び出しとして、このメソッドの呼び出しを自動的に解決<xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1410">The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="43ecc-1411">メソッドを呼び出して、パラメーターなしのパラメーター リスト内の各オブジェクトの連結`ToString`メソッド; 任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1411">The method concatenates each object in the parameter list by calling its parameterless `ToString` method; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="43ecc-1412"><xref:System.String.Empty?displayProperty=nameWithType> 任意の null の引数の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1412"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-1413">最後のパラメーター、<xref:System.String.Concat%2A>メソッドは、連結する追加のオブジェクトを 1 つまたは複数のオプションのコンマ区切りリスト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1413">The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1414">次の例では、使用、<xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>変数パラメーターのリストを連結する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1414">The following example illustrates the use of the <xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to concatenate a list of variable parameters.</span></span> <span data-ttu-id="43ecc-1415">この場合、メソッドは 9 個のパラメーターで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1415">In this case, the method is called with nine parameters.</span></span>  
  
 [!code-csharp[System.String.Concat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs#1)]
 [!code-vb[System.String.Concat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1416">このメソッドが付いて、<see langword="vararg" />キーワードで、可変個のパラメーターをサポートしていることを意味します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1416">This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters.</span></span> <span data-ttu-id="43ecc-1417">メソッドは、Visual C から呼び出すことができますが、c# または Visual Basic コードから呼び出すことができません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1417">The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</span></span> <span data-ttu-id="43ecc-1418">C# および Visual Basic コンパイラへの呼び出しを解決する<see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />呼び出しとして<see cref="M:System.String.Concat(System.Object[])" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1418">The C# and Visual Basic compilers resolve calls to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.String.Concat(System.Object[])" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2, string str3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2, string str3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String, str3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2, System::String ^ str3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
        <Parameter Name="str3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="43ecc-1419">連結する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1419">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="43ecc-1420">連結する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1420">The second string to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="43ecc-1421">連結する 3 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1421">The third string to concatenate.</span></span></param>
        <param name="str3"><span data-ttu-id="43ecc-1422">連結する 4 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1422">The fourth string to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-1423">指定した 4 つの <see cref="T:System.String" /> インスタンスを連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1423">Concatenates four specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1424"><paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" />、および <paramref name="str3" /> の連結。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1424">The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1425">メソッドを連結`str0`、 `str1`、 `str2`、および`str3`; 任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1425">The method concatenates `str0`, `str1`, `str2`, and `str3`; it does not add any delimiters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-1426">など、言語の文字列連結演算子を使用することもできます`+`C# の場合、または`&`と`+`Visual basic)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1426">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)</span></span>  
>   
>  <span data-ttu-id="43ecc-1427">、文字列を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1427">, to concatenate strings.</span></span>  
  
 <span data-ttu-id="43ecc-1428"><xref:System.String.Empty>文字列は、配列内の任意の null オブジェクトの代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1428">An <xref:System.String.Empty> string is used in place of any null object in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1429">次の例では、4 文字単語の配列を定義し、それらを暗号化するために、個々 の文字を文字列配列を格納します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1429">The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them.</span></span> <span data-ttu-id="43ecc-1430">呼び出して、<xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29>スクランブルされた単語を再構成するためのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1430">It then calls the <xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> method to reassemble the scrambled words.</span></span>  
  
 [!code-csharp[System.String.Concat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs#1)]
 [!code-vb[System.String.Concat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Concat&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat(Of T) (values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="43ecc-1431">メンバーの種類<c>値</c>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1431">The type of the members of <c>values</c>.</span></span></typeparam>
        <param name="values"><span data-ttu-id="43ecc-1432"><see cref="T:System.Collections.Generic.IEnumerable`1" /> インターフェイスを実装するコレクション オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1432">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface.</span></span></param>
        <summary><span data-ttu-id="43ecc-1433"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 実装のメンバーを連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1433">Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1434"><paramref name="values" /> 内のメンバーの連結結果。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1434">The concatenated members in <paramref name="values" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1435">メソッド内の各オブジェクトを連結する`values`; 任意の区切り記号を追加することはできません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1435">The method concatenates each object in `values`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="43ecc-1436"><xref:System.String.Empty>文字列は、任意の null の引数の代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1436">An <xref:System.String.Empty> string is used in place of any null argument.</span></span>  
  
 <span data-ttu-id="43ecc-1437"><xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 内の各要素を連結できる便利なメソッドは、<xref:System.Collections.Generic.IEnumerable%601>文字列に要素を変換せずコレクション。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1437"><xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings.</span></span> <span data-ttu-id="43ecc-1438">この例に示すように統合言語クエリ (LINQ) のクエリ式で特に便利です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1438">It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates.</span></span> <span data-ttu-id="43ecc-1439">内の各オブジェクトの文字列形式を、<xref:System.Collections.Generic.IEnumerable%601>を呼び出してそのオブジェクトのコレクションを派生`ToString`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1439">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1440">次の例は非常に単純な定義`Animal`動物とそれが属する注文書の名前を表すクラス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1440">The following example defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="43ecc-1441">定義し、<xref:System.Collections.Generic.List%601>の数を格納するオブジェクト`Animal`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1441">It then defines a <xref:System.Collections.Generic.List%601> object to contain a number of `Animal` objects.</span></span> <span data-ttu-id="43ecc-1442"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>を抽出する拡張メソッドが呼び出される、`Animal`オブジェクト`Order`"Rodent"と等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1442">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="43ecc-1443">結果に渡される、<xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドされ、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1443">The result is passed to the <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method and displayed to the console.</span></span>  
  
 [!code-csharp[System.String.Concat#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat3.cs#4)]
 [!code-vb[System.String.Concat#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1444"><paramref name="values" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1444"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1445">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1445">The string to seek.</span></span></param>
        <summary><span data-ttu-id="43ecc-1446">指定した部分文字列がこの文字列内に存在するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1446">Returns a value indicating whether a specified substring occurs within this string.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1447"><paramref name="value" /> パラメーターがこの文字列内に存在するか、<paramref name="value" /> が空の文字列 ("") の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1447"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1448">このメソッドは、序数に基づく (大文字小文字を区別とカルチャに依存しない) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1448">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span> <span data-ttu-id="43ecc-1449">検索は、この文字列の最初の文字位置から開始し、最後の文字位置から続行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1449">The search begins at the first character position of this string and continues through the last character position.</span></span>  
  
 <span data-ttu-id="43ecc-1450">序数に基づく比較 (カルチャに依存した比較や大文字と小文字は序数) 以外のものを使用して指定した部分文字列を含む文字列かどうかを判断する、カスタム メソッドを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1450">To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method.</span></span> <span data-ttu-id="43ecc-1451">次の例では、このような 1 つのアプローチを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1451">The following example illustrates one such approach.</span></span> <span data-ttu-id="43ecc-1452">定義する、<xref:System.String>拡張メソッドが含まれている<xref:System.StringComparison>パラメーターと、文字列では、指定した文字列比較の形式を使用する場合に、部分文字列が含まれるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1452">It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.</span></span>  
  
 [!code-csharp[System.String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#1)]
 [!code-vb[System.String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#1)]  
  
 <span data-ttu-id="43ecc-1453">次の例は、呼び出し、`Contains`序数に基づく比較と大文字と小文字の序数に基づく比較を使用して部分文字列が文字列で見つかったかどうかを決定する拡張メソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1453">The following example then calls the `Contains` extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.Contains#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)]
 [!code-vb[System.String.Contains#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)]  
  
 <span data-ttu-id="43ecc-1454">部分文字列の位置に興味のあるかどうかは`value`、現在のインスタンスで呼び出すことができます、 <xref:System.String.IndexOf%2A> 、最初に見つかった、またはの開始位置を取得するメソッドを呼び出すことができます、<xref:System.String.LastIndexOf%2A>最後に見つかった位置の開始位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1454">If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence.</span></span> <span data-ttu-id="43ecc-1455">例への呼び出しが含まれています、<xref:System.String.IndexOf%28System.String%29>文字列インスタンスの部分文字列が見つかった場合はメソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1455">The example includes a call to the <xref:System.String.IndexOf%28System.String%29> method if a substring is found in a string instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1456">次の例"について fox"という文字列が使い慣れた引用符の部分文字列であるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1456">The following example determines whether the string "fox" is a substring of a familiar quotation.</span></span> <span data-ttu-id="43ecc-1457">"Fox"がある場合、文字列でも、その開始位置を表示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1457">If "fox" is found in the string, it also displays its starting position.</span></span>  
  
 [!code-cpp[String.Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.contains/CPP/cont.cpp#1)]
 [!code-csharp[String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.contains/CS/cont.cs#1)]
 [!code-vb[String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.contains/VB/cont.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1458"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1458"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static string Copy (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Copy(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Copy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Copy (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Copy(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="43ecc-1459">コピーする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1459">The string to copy.</span></span></param>
        <summary><span data-ttu-id="43ecc-1460">指定した <see cref="T:System.String" /> と同じ値を使用して、<see cref="T:System.String" /> の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1460">Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1461"><paramref name="str" /> と同じ値を持つ新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1461">A new string with the same value as <paramref name="str" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1462"><xref:System.String.Copy%2A>メソッドを返します、<xref:System.String>オブジェクトがあるが、元の文字列と同じ値を持つ別のオブジェクトの参照を表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1462">The <xref:System.String.Copy%2A> method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference.</span></span> <span data-ttu-id="43ecc-1463">既存の文字列参照を他のオブジェクトを変数に割り当てます代入演算とは異なります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1463">It differs from an assignment operation, which assigns an existing string reference to an additional object variable.</span></span> <span data-ttu-id="43ecc-1464">この例では、この違いを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1464">The example illustrates the difference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1465">次の例では、値が異なる 2 つの文字列オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1465">The following example creates two string objects with different values.</span></span> <span data-ttu-id="43ecc-1466">呼び出すとき、 <xref:System.String.Copy%2A> 2 番目の文字列に、最初の値を割り当てる方法、出力は、その値が同じようになりましたが、文字列が別のオブジェクト参照を表すことを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1466">When it calls the <xref:System.String.Copy%2A> method to assign the first value to the second string, the output indicates that the strings represent different object references although their values are now equal.</span></span> <span data-ttu-id="43ecc-1467">その一方で、最初の文字列が 2 番目の文字列に割り当てられると、2 つの文字列値を持つ同一同じオブジェクト参照を表すためです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1467">On the other hand, when the first string is assigned to the second string, the two strings have identical values because they represent the same object reference.</span></span>  
  
 [!code-csharp[System.String.Copy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.copy/cs/copy1.cs#1)]
 [!code-vb[System.String.Copy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.copy/vb/copy1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1468"><paramref name="str" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1468"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, cli::array &lt;char&gt; ^ destination, int destinationIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex"><span data-ttu-id="43ecc-1469">コピーする、このインスタンス内の最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1469">The index of the first character in this instance to copy.</span></span></param>
        <param name="destination"><span data-ttu-id="43ecc-1470">このインスタンスの文字のコピー先となる Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1470">An array of Unicode characters to which characters in this instance are copied.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="43ecc-1471">コピー操作を開始する <c>destination</c> のインデックス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1471">The index in <c>destination</c> at which the copy operation begins.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-1472"><c>destination</c> へコピーされるこのインスタンスの文字の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1472">The number of characters in this instance to copy to <c>destination</c>.</span></span></param>
        <summary><span data-ttu-id="43ecc-1473">このインスタンスの指定位置から指定した数の文字を、Unicode 文字の配列内の指定位置へコピーします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1473">Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1474">このメソッドは、コピー`count`の文字、`sourceIndex`とこのインスタンスの位置、`destinationIndex`位置`destination`文字配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1474">This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array.</span></span> <span data-ttu-id="43ecc-1475">このメソッドがサイズ変更されない、`destination`文字配列にコピーされた文字を対応する要素のための十分な数である; またはがスローされます、<xref:System.ArgumentOutOfRangeException>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1475">This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="43ecc-1476">`sourceIndex` および`destinationIndex`は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1476">`sourceIndex` and `destinationIndex` are zero-based.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1477">次の例で、<xref:System.String.CopyTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1477">The following example demonstrates the <xref:System.String.CopyTo%2A> method.</span></span>  
  
 [!code-cpp[stringcopyto#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringcopyto/CPP/stringcopyto.cpp#1)]
 [!code-csharp[stringcopyto#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringcopyto/CS/stringcopyto.cs#1)]
 [!code-vb[stringcopyto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringcopyto/VB/stringcopyto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1478"><paramref name="destination" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1478"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-1479"><paramref name="sourceIndex" />、<paramref name="destinationIndex" />、または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1479"><paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative</span></span>  
  
 <span data-ttu-id="43ecc-1480">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1480">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1481"><paramref name="sourceIndex" /> は、現在のインスタンス内の位置を識別しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1481"><paramref name="sourceIndex" /> does not identify a position in the current instance.</span></span>  
  
 <span data-ttu-id="43ecc-1482">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1482">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1483"><paramref name="destinationIndex" /> は、<paramref name="destination" /> 配列内の有効なインデックスを識別しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1483"><paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array.</span></span>  
  
 <span data-ttu-id="43ecc-1484">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1484">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1485"><paramref name="count" /> が、<paramref name="sourceIndex" /> からこのインスタンスの末尾までの部分文字の長さより大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1485"><paramref name="count" /> is greater than the length of the substring from <paramref name="sourceIndex" /> to the end of this instance</span></span>  
  
 <span data-ttu-id="43ecc-1486">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1486">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1487"><paramref name="count" /> は、<paramref name="destination" /> 配列の <paramref name="destinationIndex" /> から末尾までの部分配列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1487"><paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static string Create&lt;TState&gt; (int length, TState state, System.Buffers.SpanAction&lt;char,TState&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create&lt;TState&gt;(int32 length, !!TState state, class System.Buffers.SpanAction`2&lt;char, !!TState&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TState) (length As Integer, state As TState, action As SpanAction(Of Char, TState)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static System::String ^ Create(int length, TState state, System::Buffers::SpanAction&lt;char, TState&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="action" Type="System.Buffers.SpanAction&lt;System.Char,TState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="state">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly string Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string Empty" />
      <MemberSignature Language="DocId" Value="F:System.String.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ Empty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43ecc-1488">空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1488">Represents the empty string.</span></span> <span data-ttu-id="43ecc-1489">このフィールドは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1489">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1490">このフィールドの値が長さ 0 の文字列""です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1490">The value of this field is the zero-length string, "".</span></span>  
  
 <span data-ttu-id="43ecc-1491">アプリケーション コードでは、このフィールドは割り当てに空の文字列に文字列変数を初期化するために最もよく使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1491">In application code, this field is most commonly used in assignments to initialize a string variable to an empty string.</span></span> <span data-ttu-id="43ecc-1492">文字列の値は、いずれかであるかどうかをテストする`null`または<xref:System.String.Empty?displayProperty=nameWithType>を使用して、<xref:System.String.IsNullOrEmpty%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1492">To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, use the <xref:System.String.IsNullOrEmpty%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EndsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-1493">この文字列インスタンスの末尾が、指定した文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1493">Determines whether the end of this string instance matches a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1494">このインスタンスの末尾の部分文字列と比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1494">The string to compare to the substring at the end of this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-1495">この文字列インスタンスの末尾が、指定した文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1495">Determines whether the end of this string instance matches the specified string.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1496">このインスタンスの末尾が <paramref name="value" /> と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1496"><see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1497">このメソッドは比較`value`、長さと同じであるこのインスタンスの末尾の部分文字列に`value`、し、それらが等しいかどうか示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1497">This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="43ecc-1498">等しく、`value`この同じインスタンスへの参照またはこのインスタンスの末尾と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1498">To be equal, `value` must be a reference to this same instance or match the end of this instance.</span></span>  
  
 <span data-ttu-id="43ecc-1499">このメソッドは、現在のカルチャを使用して、単語 (大文字小文字を区別やカルチャ) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1499">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1500">次の例では、配列内の各文字列がピリオドで終わるかどうかを示します ("です。") です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1500">The following example indicates whether each string in an array ends with a period (".").</span></span>  
  
 [!code-csharp[System.String.EndsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.EndsWith/cs/EndsWith1.cs#1)]
 [!code-vb[System.String.EndsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.EndsWith/vb/EndsWith1.vb#1)]  
  
 <span data-ttu-id="43ecc-1501">次の例では定義、`StripEndTags`で使用する方法、<xref:System.String.EndsWith%28System.String%29>行の末尾からの HTML 終了タグを削除する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1501">The following example defines a `StripEndTags` method that uses the <xref:System.String.EndsWith%28System.String%29> method to remove HTML end tags from the end of a line.</span></span> <span data-ttu-id="43ecc-1502">なお、`StripEndTags`メソッドは再帰的に、行の末尾に複数の HTML 終了タグを削除することを確認します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1502">Note that the  `StripEndTags` method is called recursively to ensure that multiple HTML end tags at the end of the line are removed.</span></span>  
  
 [!code-cpp[stringendswith#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringendswith/CPP/stringendswith.cpp#1)]
 [!code-csharp[stringendswith#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringendswith/CS/stringendswith.cs#1)]
 [!code-vb[stringendswith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringendswith/VB/stringendswith.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1503"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1503"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1504">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列比較メソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1504">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-1505">文字列が現在のカルチャの文字列比較の規則を使用して、特定の部分文字列で終わるかどうかを判断するのには、呼び出し、<see cref="M:System.String.EndsWith(System.String,System.StringComparison)" />の値を持つメソッド オーバー ロード<see cref="F:System.StringComparison.CurrentCulture" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1505">To determine whether a string ends with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="M:System.String.StartsWith(System.String)" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1506">このインスタンスの末尾の部分文字列と比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1506">The string to compare to the substring at the end of this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-1507">この文字列と <c>value</c> との比較方法を決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1507">One of the enumeration values that determines how this string and <c>value</c> are compared.</span></span></param>
        <summary><span data-ttu-id="43ecc-1508">指定された比較オプションを使って比較した場合に、この文字列インスタンスの末尾が、指定された文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1508">Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1509"><paramref name="value" /> パラメーターがこの文字列の末尾と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1509"><see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1510"><xref:System.String.EndsWith%2A>メソッドに比較して、`value`この文字列の末尾の部分文字列にパラメーターをそれらが等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1510">The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="43ecc-1511">等しく、`value`この同じ文字列への参照を指定する必要があります、空の文字列にする必要があります ("")、またはこの文字列の末尾に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1511">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the end of this string.</span></span> <span data-ttu-id="43ecc-1512">によって実行される比較の種類、<xref:System.String.EndsWith%2A>メソッドの値によって異なります、`comparisonType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1512">The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1513">次の例では、文字列が特定の部分文字列で終わるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1513">The following example determines whether a string ends with a particular substring.</span></span> <span data-ttu-id="43ecc-1514">結果は、カルチャ、大文字と小文字の区別するかどうか、および序数に基づく比較を実行するかどうかの選択の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1514">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>  
  
 [!code-cpp[System.String.EndsWithCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cpp/ewcmp.cpp#1)]
 [!code-csharp[System.String.EndsWithCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cs/ewcmp.cs#1)]
 [!code-vb[System.String.EndsWithCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.EndsWithCmp/vb/ewcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1515"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1515"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-1516"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1516"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1517">このインスタンスの末尾の部分文字列と比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1517">The string to compare to the substring at the end of this instance.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="43ecc-1518">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1518"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="43ecc-1519">このインスタンスと <c>value</c> との比較方法を決定するカルチャ情報。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1519">Cultural information that determines how this instance and <c>value</c> are compared.</span></span> <span data-ttu-id="43ecc-1520"><c>culture</c> が <see langword="null" /> の場合は、現在のカルチャが使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1520">If <c>culture</c> is <see langword="null" />, the current culture is used.</span></span></param>
        <summary><span data-ttu-id="43ecc-1521">指定されたカルチャを使って比較した場合に、この文字列インスタンスの末尾が、指定された文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1521">Determines whether the end of this string instance matches the specified string when compared using the specified culture.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1522"><paramref name="value" /> パラメーターがこの文字列の末尾と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1522"><see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1523">このメソッドを比較して、`value`パラメーターと同じ長さは、この文字列の末尾の部分文字列を`value`、し、それらが等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1523">This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="43ecc-1524">等しく、`value`この同じインスタンスへの参照またはこの文字列の末尾と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1524">To be equal, `value` must be a reference to this same instance or match the end of this string.</span></span>  
  
 <span data-ttu-id="43ecc-1525">このメソッドは、指定した大文字小文字の区別とカルチャを使用して、word (カルチャ) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1525">This method performs a word (culture-sensitive) comparison using the specified casing and culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1526">次の例では、文字列が別の文字列の最後に出現するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1526">The following example determines whether a string occurs at the end of another string.</span></span> <span data-ttu-id="43ecc-1527"><xref:System.String.EndsWith%2A>大文字小文字の区別、大文字と小文字の区別、および検索の結果に影響する異なるカルチャを使用して数回メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1527">The <xref:System.String.EndsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>  
  
 [!code-csharp[system.string.EndsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.EndsWithCI/cs/ewci.cs#1)]
 [!code-vb[system.string.EndsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.EndsWithCI/vb/ewci.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1528"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1528"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-1529">2 つの <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1529">Determines whether two <see cref="T:System.String" /> objects have the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="43ecc-1530">このインスタンスと比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1530">The string to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-1531">このインスタンスと、指定したオブジェクトの値が同一かどうかを判断します。<see cref="T:System.String" /> オブジェクトを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1531">Determines whether this instance and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1532"><paramref name="obj" /> が <see cref="T:System.String" /> で、このインスタンスと同じ値を保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1532"><see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="43ecc-1533"><paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1533">If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1534">このメソッドは、序数に基づく (大文字小文字を区別とカルチャに依存しない) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1534">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1535">次の例で、<xref:System.String.Equals%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1535">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>  
  
 [!code-cpp[string.equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp#1)]
 [!code-csharp[string.equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs#1)]
 [!code-vb[string.equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1536">このインスタンスと比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1536">The string to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-1537">このインスタンスと、指定した別の <see cref="T:System.String" /> の値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1537">Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1538"><see langword="true" /> パラメーターの値がこのインスタンスの値と同じ場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1538"><see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as the value of this instance; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="43ecc-1539"><paramref name="value" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1539">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1540">このメソッドは、序数に基づく (大文字小文字を区別とカルチャに依存しない) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1540">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1541">次の例で、<xref:System.String.Equals%2A>メソッドです。タイトルの大文字と小文字を区別 with キーワードを"File"と同等の word、等価な小文字、等価な大文字、および LATIN SMALL 文字ドットなし I を含む単語を比較 (U +0 0131) ではなく LATIN SMALL 文字 I (u+0069)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1541">The following example demonstrates the <xref:System.String.Equals%2A> method.It compares the title-cased word "File" with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069).</span></span> <span data-ttu-id="43ecc-1542"><xref:System.String.Equals%28System.String%29>メソッドは、序数に基づく比較を実行すると同一の単語の比較のみが返される`true`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1542">Because the <xref:System.String.Equals%28System.String%29> method performs an ordinal comparison, only the comparison with an identical word returns `true`.</span></span>  
  
 [!code-csharp[System.String.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equalsex1.cs#2)]
 [!code-vb[System.String.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equalsex1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="43ecc-1543">比較する最初の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1543">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="43ecc-1544">比較する 2 番目の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1544">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-1545">指定した 2 つの <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1545">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1546"><paramref name="a" /> の値が <paramref name="b" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1546"><see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="43ecc-1547"><paramref name="a" /> と <paramref name="b" /> の両方が <see langword="null" /> の場合、メソッドは <see langword="true" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1547">If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1548">このメソッドは、序数に基づく (大文字小文字を区別とカルチャに依存しない) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1548">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1549">次の例で、<xref:System.String.Equals%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1549">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>  
  
 [!code-cpp[string.equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp#1)]
 [!code-csharp[string.equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs#1)]
 [!code-vb[string.equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::String ^ value, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1550">このインスタンスと比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1550">The string to compare to this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-1551">文字列の比較方法を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1551">One of the enumeration values that specifies how the strings will be compared.</span></span></param>
        <summary><span data-ttu-id="43ecc-1552">この文字列と、指定した <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1552">Determines whether this string and a specified <see cref="T:System.String" /> object have the same value.</span></span> <span data-ttu-id="43ecc-1553">比較に使用するカルチャ、大文字と小文字の区別、および、並べ替え規則をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1553">A parameter specifies the culture, case, and sort rules used in the comparison.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1554"><see langword="true" /> パラメーターの値がこの文字列と同じ場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1554"><see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1555">`comparisonType`パラメーターかを示します、比較には、現在またはインバリアント カルチャを使用する必要があります、優先または比較される 2 つの文字列の大文字と小文字を無視する単語または序数の並べ替え規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1555">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1556">次の例では、"I"、小文字の"i"および「ı」ドットなしに、大文字で構成される文字列の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1556">The following example creates a string array that consists of an uppercase "I", a lowercase "i", and a dotless "ı".</span></span> <span data-ttu-id="43ecc-1557">呼び出して、<xref:System.String.Equals%28System.String%2CSystem.StringComparison%29>可能性のある各を使用して、それらを比較するメソッド<xref:System.StringComparison>列挙値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1557">It then calls the <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method to compare them by using each possible <xref:System.StringComparison> enumeration value.</span></span>  
  
 [!code-csharp[System.String.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/eqcmp.cs#1)]
 [!code-vb[System.String.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/eqcmp.vb#1)]  
  
 <span data-ttu-id="43ecc-1558">次の例では、単語の 4 つのセットを比較の各メンバーを使用して、<xref:System.StringComparison>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1558">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="43ecc-1559">比較では、英語 (米国) と Sami (上限スウェーデン) カルチャの規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1559">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="43ecc-1560">文字列"encyclopædia"と「百科事典」が該当するショートカットは EN-US カルチャではなくに Sami (北スウェーデン) カルチャと見なされますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1560">Note that the strings "encyclopædia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>  
  
 [!code-csharp[System.String.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex4.cs#4)]
 [!code-vb[System.String.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-1561"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1561"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="43ecc-1562">比較する最初の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1562">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="43ecc-1563">比較する 2 番目の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1563">The second string to compare, or <see langword="null" />.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-1564">比較の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1564">One of the enumeration values that specifies the rules for the comparison.</span></span></param>
        <summary><span data-ttu-id="43ecc-1565">指定した 2 つの <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1565">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span></span> <span data-ttu-id="43ecc-1566">比較に使用するカルチャ、大文字と小文字の区別、および、並べ替え規則をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1566">A parameter specifies the culture, case, and sort rules used in the comparison.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-1567"><see langword="true" /> パラメーターの値が <paramref name="a" /> パラメーターの値に等しい場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1567"><see langword="true" /> if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1568">`comparisonType`パラメーターかを示します、比較には、現在またはインバリアント カルチャを使用する必要があります、優先または比較される 2 つの文字列の大文字と小文字を無視する単語または序数の並べ替え規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1568">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1569">次の例では、単語の 4 つのセットを比較の各メンバーを使用して、<xref:System.StringComparison>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1569">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="43ecc-1570">比較では、英語 (米国) と Sami (上限スウェーデン) カルチャの規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1570">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="43ecc-1571">文字列"encyclopædia"と「百科事典」が該当するショートカットは EN-US カルチャではなくに Sami (北スウェーデン) カルチャと見なされますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1571">Note that the strings "encyclopædia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>  
  
 [!code-csharp[System.String.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex3.cs#3)]
 [!code-vb[System.String.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-1572"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1572"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Format">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-1573">指定された形式に基づいてオブジェクトの値を文字列に変換し、別の文字列に挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1573">Converts the value of objects to strings based on the formats specified and inserts them into another string.</span></span>  
  
 <span data-ttu-id="43ecc-1574">`String.Format` メソッドを初めて使用する場合は、「[Get started with the String.Format method](#Starting)」(String.Format メソッドの概要) セクションを参照して、概要をご確認ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1574">If you are new to the `String.Format` method, see the [Get started with the String.Format method](#Starting) section for a quick overview.</span></span>  
  
 <span data-ttu-id="43ecc-1575">`String.Format` メソッドの全般的な説明については、「[Remarks](#remarks-top)」 (解説) セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1575">See the [Remarks](#remarks-top) section for general documentation for the `String.Format` method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
<a name="remarks-top"></a>   
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
 
 <span data-ttu-id="43ecc-1576">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="43ecc-1576">In this section:</span></span>  
  
 <span data-ttu-id="43ecc-1577">[String.Format メソッドを開始します。](#Starting) </span><span class="sxs-lookup"><span data-stu-id="43ecc-1577">[Get started with the String.Format method](#Starting) </span></span>  
 <span data-ttu-id="43ecc-1578">[どのメソッドが呼び出ししますか。](#FTaskList) </span><span class="sxs-lookup"><span data-stu-id="43ecc-1578">[Which method do I call?](#FTaskList) </span></span>  
 <span data-ttu-id="43ecc-1579">[Format メソッドの概要](#Format_Brief) </span><span class="sxs-lookup"><span data-stu-id="43ecc-1579">[The Format method in brief](#Format_Brief) </span></span>  
 <span data-ttu-id="43ecc-1580">[書式指定項目](#FormatItem) </span><span class="sxs-lookup"><span data-stu-id="43ecc-1580">[The Format item](#FormatItem) </span></span>  
 <span data-ttu-id="43ecc-1581">[引数の書式設定方法](#HowFormatted) </span><span class="sxs-lookup"><span data-stu-id="43ecc-1581">[How arguments are formatted](#HowFormatted) </span></span>  
 <span data-ttu-id="43ecc-1582">[インデックスが同じである書式指定項目](#SameIndex) </span><span class="sxs-lookup"><span data-stu-id="43ecc-1582">[Format items that have the same index](#SameIndex) </span></span>  
 <span data-ttu-id="43ecc-1583">[書式とカルチャ](#Format_Culture) </span><span class="sxs-lookup"><span data-stu-id="43ecc-1583">[Formatting and culture](#Format_Culture) </span></span>  
 <span data-ttu-id="43ecc-1584">[カスタムの書式設定操作](#Format_Custom) </span><span class="sxs-lookup"><span data-stu-id="43ecc-1584">[Custom formatting operations](#Format_Custom) </span></span>  
 [<span data-ttu-id="43ecc-1585">String.Format Q & A</span><span class="sxs-lookup"><span data-stu-id="43ecc-1585">String.Format Q & A</span></span>](#QA)  
  
<a name="Starting"></a>   
## <a name="get-started-with-the-stringformat-method"></a><span data-ttu-id="43ecc-1586">String.Format メソッドを開始します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1586">Get started with the String.Format method</span></span>  
 <span data-ttu-id="43ecc-1587">使用して<xref:System.String.Format%2A?displayProperty=nameWithType>オブジェクト、変数、または式の値を別の文字列に挿入する必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1587">Use <xref:System.String.Format%2A?displayProperty=nameWithType> if you need to insert the value of an object, variable, or expression into another string.</span></span> <span data-ttu-id="43ecc-1588">値を挿入するなど、<xref:System.Decimal>に 1 つの文字列としてユーザーに表示する文字列値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1588">For example, you can insert the value of a <xref:System.Decimal> value into a string to display it to the user as a single string:</span></span>  
  
 [!code-cpp[System.String.Format#35](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#35)]
 [!code-csharp-interactive[System.String.Format#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#35)]
 [!code-vb[System.String.Format#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#35)]  
  
 <span data-ttu-id="43ecc-1589">その値の書式を制御することができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1589">And you can control that value's formatting:</span></span>  
  
 [!code-cpp[System.String.Format#36](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#36)]
 [!code-csharp-interactive[System.String.Format#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#36)]
 [!code-vb[System.String.Format#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#36)]  
  
 <span data-ttu-id="43ecc-1590">書式設定、以外に配置と間隔を制御することもできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1590">Besides formatting, you can also control alignment and spacing.</span></span>  
  
 ### <a name="inserting-a-string"></a><span data-ttu-id="43ecc-1591">文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1591">Inserting a string</span></span>  

 <span data-ttu-id="43ecc-1592"><xref:System.String.Format%2A?displayProperty=nameWithType> 書式指定文字列を続けてオブジェクトまたは文字列に変換および書式指定文字列の指定した位置に挿入される式の 1 つまたは複数を開始します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1592"><xref:System.String.Format%2A?displayProperty=nameWithType> starts with a format string, followed by one or more objects or expressions that will be converted to strings and inserted at a specified place in the format string.</span></span> <span data-ttu-id="43ecc-1593">例:</span><span class="sxs-lookup"><span data-stu-id="43ecc-1593">For example:</span></span>  
  
 [!code-cpp[System.String.Format#30](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#30)]
 [!code-csharp-interactive[System.String.Format#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#30)]
 [!code-vb[System.String.Format#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#30)]  
  
 <span data-ttu-id="43ecc-1594">`{0}`形式の文字列は、書式指定項目。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1594">The `{0}` in the format string is a format item.</span></span> <span data-ttu-id="43ecc-1595">`0` 文字列値を持つはその位置に挿入するオブジェクトのインデックスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1595">`0` is the index of the object whose string value will be inserted at that position.</span></span> <span data-ttu-id="43ecc-1596">(インデックスは、0 から始まります)。挿入されるオブジェクトが、文字列ではない場合、`ToString`結果の文字列に挿入する前にいずれかに変換するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1596">(Indexes start at 0.) If the object to be inserted is not a string, its `ToString` method is called to convert it to one before inserting it in the result string.</span></span>  
  
 <span data-ttu-id="43ecc-1597">オブジェクトの一覧で 2 つの書式指定項目と 2 つのオブジェクトを使用する別の例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1597">Here's another example that uses two format items and two objects in the object list:</span></span>  
  
 [!code-cpp[System.String.Format#31](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#31)]
 [!code-csharp-interactive[System.String.Format#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#31)]
 [!code-vb[System.String.Format#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#31)]  
  
 <span data-ttu-id="43ecc-1598">多くの書式項目を持つことができ、数のオブジェクトとオブジェクトの一覧で、形式のすべての項目のインデックスには、オブジェクト リストに一致するオブジェクトが含まれている限りです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1598">You can have as many format items and as many objects in the object list as you want, as long as the index of every format item has a matching object in the object list.</span></span> <span data-ttu-id="43ecc-1599">する必要はありません心配のどのオーバー ロードに関する次の操作を呼び出します。コンパイラの適切な 1 つが選択されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1599">You also don't have to worry about which overload you call; the compiler will select the appropriate one for you.</span></span>  
  
 ### <a name="controlling-formatting"></a><span data-ttu-id="43ecc-1600">書式設定の制御</span><span class="sxs-lookup"><span data-stu-id="43ecc-1600">Controlling formatting</span></span>  
 <span data-ttu-id="43ecc-1601">オブジェクトを書式設定する方法を制御する書式指定文字列の書式指定項目内のインデックスを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1601">You can follow the index in a format item with a format string to control how an object is formatted.</span></span> <span data-ttu-id="43ecc-1602">たとえば、 `{0:d}` "d"書式指定文字列をオブジェクトの一覧の最初のオブジェクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1602">For example, `{0:d}` applies the "d" format string to the first object in the object list.</span></span> <span data-ttu-id="43ecc-1603">単一のオブジェクトでの使用例を次に示し、2 つのアイテムの書式設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1603">Here is an example with a single object and two format items:</span></span>  
  
 [!code-cpp[System.String.Format#32](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#32)]
 [!code-csharp-interactive[System.String.Format#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#32)]
 [!code-vb[System.String.Format#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#32)]  
  
 <span data-ttu-id="43ecc-1604">型のサポートの数値書式指定文字列、すべての数値型を含む (両方[標準](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム](~/docs/standard/base-types/custom-numeric-format-strings.md)書式指定文字列)、すべての日付と時刻 (both[標準](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム](~/docs/standard/base-types/custom-date-and-time-format-strings.md)書式指定文字列) との時間間隔 (両方[標準d](~/docs/standard/base-types/standard-timespan-format-strings.md)と[カスタム](~/docs/standard/base-types/custom-timespan-format-strings.md)書式指定文字列)、すべての列挙型[列挙型](~/docs/standard/base-types/enumeration-format-strings.md)、および                                         [Guid](https://msdn.microsoft.com/library/97af8hh4.aspx)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1604">A number of types support format strings, including all numeric types (both                                          [standard](~/docs/standard/base-types/standard-numeric-format-strings.md) and                                          [custom](~/docs/standard/base-types/custom-numeric-format-strings.md) format strings), all dates and times (both                                          [standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and                                          [custom](~/docs/standard/base-types/custom-date-and-time-format-strings.md) format strings) and time intervals (both                                          [standard](~/docs/standard/base-types/standard-timespan-format-strings.md) and                                          [custom](~/docs/standard/base-types/custom-timespan-format-strings.md) format strings), all enumeration types                                          [enumeration types](~/docs/standard/base-types/enumeration-format-strings.md), and                                          [GUIDs](https://msdn.microsoft.com/library/97af8hh4.aspx).</span></span> <span data-ttu-id="43ecc-1605">独自の型に書式指定文字列のサポートを追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1605">You can also add support for format strings to your own types.</span></span>  
  
 ### <a name="controlling-spacing"></a><span data-ttu-id="43ecc-1606">間隔を制御します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1606">Controlling spacing</span></span>  
 <span data-ttu-id="43ecc-1607">などの構文を使用して、結果の文字列に挿入する文字列の幅を定義する`{0,12}`、12 文字の文字列に挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1607">You can define the width of the string that is inserted into the result string by using syntax such as `{0,12}`, which inserts a 12-character string.</span></span> <span data-ttu-id="43ecc-1608">ここでは、最初のオブジェクトの文字列形式は右揃えで 12 文字のフィールドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1608">In this case, the string representation of the first object is right-aligned in the 12-character field.</span></span>  <span data-ttu-id="43ecc-1609">(最初のオブジェクトの文字列形式が複数の 12 文字の場合は、ただし、推奨されるフィールドの幅は無視され、文字列全体が、結果の文字列に挿入します。)</span><span class="sxs-lookup"><span data-stu-id="43ecc-1609">(If the string representation of the first object is more than 12 characters in length, though, the preferred field width is ignored, and the entire string is inserted into the result string.)</span></span>  
  
 <span data-ttu-id="43ecc-1610">次の例では、文字列を保持する、6 文字のフィールド"Year"と年の一部の文字列だけでなく、15 文字のフィールド"Population"文字列を保持して人口データの一部です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1610">The following example defines a 6-character field to hold the string "Year" and some year strings, as well as an 15-character field to hold the string "Population" and some population data.</span></span> <span data-ttu-id="43ecc-1611">文字がある右揃えのフィールドに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1611">Note that the characters are right-aligned in the field.</span></span>  
  
 [!code-cpp[System.String.Format#33](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#33)]
 [!code-csharp-interactive[System.String.Format#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting3.cs)]
 [!code-vb[System.String.Format#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#33)]  
  
 ### <a name="controlling-alignment"></a><span data-ttu-id="43ecc-1612">配置を制御します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1612">Controlling alignment</span></span>  
 <span data-ttu-id="43ecc-1613">既定では、文字列は、そのフィールド内で右揃えのフィールド幅を指定する場合。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1613">By default, strings are right-aligned within their field if you specify a field width.</span></span> <span data-ttu-id="43ecc-1614">フィールドに文字列を左揃えにするに先頭に負の符号とフィールドの幅など`{0,-12}`12 文字の右揃えのフィールドを定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1614">To left-align strings in a field, you preface the field width with a negative sign, such as `{0,-12}` to define a 12-character right-aligned field.</span></span>  
  
 <span data-ttu-id="43ecc-1615">次の例は、それを左揃えのラベルとデータの両方する点を除いて、1 つ前に似ています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1615">The following example is similar to the previous one, except that it left-aligns both labels and data.</span></span>  
  
 [!code-cpp[System.String.Format#34](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#34)]
 [!code-csharp-interactive[System.String.Format#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#34)]
 [!code-vb[System.String.Format#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#34)]  
  
 <span data-ttu-id="43ecc-1616"><xref:System.String.Format%2A?displayProperty=nameWithType> 複合書式指定機能を利用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1616"><xref:System.String.Format%2A?displayProperty=nameWithType> makes use of the composite formatting feature.</span></span> <span data-ttu-id="43ecc-1617">詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1617">For more information, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
<a name="FTaskList"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="43ecc-1618">どのメソッドが呼び出ししますか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1618">Which method do I call?</span></span>  
  
|<span data-ttu-id="43ecc-1619">終了</span><span class="sxs-lookup"><span data-stu-id="43ecc-1619">To</span></span>|<span data-ttu-id="43ecc-1620">Call</span><span class="sxs-lookup"><span data-stu-id="43ecc-1620">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="43ecc-1621">現在のカルチャの規則を使用して 1 つまたは複数のオブジェクトの書式設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1621">Format one or more objects by using the conventions of the current culture.</span></span>|<span data-ttu-id="43ecc-1622">含むオーバー ロードを除く、`provider`パラメーター、残りの<xref:System.String.Format%2A>オーバー ロードが含まれて、<xref:System.String>パラメーターの後に 1 つまたは複数のオブジェクトのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1622">Except for the overloads that include a `provider` parameter, the remaining <xref:System.String.Format%2A> overloads include a <xref:System.String> parameter followed by one or more object parameters.</span></span> <span data-ttu-id="43ecc-1623">このためを決定する必要はありません<xref:System.String.Format%2A>オーバー ロードを呼び出そうとします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1623">Because of this, you don't have to determine which <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="43ecc-1624">言語コンパイラがないオーバー ロードの中から適切なオーバー ロードの選択、`provider`引数リストに基づくパラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1624">Your language compiler selects the appropriate overload from among the overloads that don't have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="43ecc-1625">たとえば、引数リストに 5 つの引数がある場合は、コンパイラは、<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1625">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> method.</span></span>|  
|<span data-ttu-id="43ecc-1626">特定のカルチャの規則を使用して 1 つまたは複数のオブジェクトの書式設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1626">Format one or more objects by using the conventions of a specific culture.</span></span>|<span data-ttu-id="43ecc-1627">各<xref:System.String.Format%2A>オーバー ロードで始まり、`provider`パラメーターの後に、<xref:System.String>パラメーターと 1 つまたは複数オブジェクトのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1627">Each <xref:System.String.Format%2A> overload that begins with a `provider` parameter is followed by a <xref:System.String> parameter and one or more object parameters.</span></span> <span data-ttu-id="43ecc-1628">このため、どの固有の仕様を決定する必要はありません<xref:System.String.Format%2A>オーバー ロードを呼び出そうとします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1628">Because of this, you don't have to determine which specific <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="43ecc-1629">言語コンパイラを持つオーバー ロードの中から適切なオーバー ロードの選択、`provider`引数リストに基づくパラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1629">Your language compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="43ecc-1630">たとえば、引数リストに 5 つの引数がある場合は、コンパイラは、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1630">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method.</span></span>|  
|<span data-ttu-id="43ecc-1631">いずれかのカスタム書式設定操作の実行、<xref:System.ICustomFormatter>実装または<xref:System.IFormattable>実装します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1631">Perform a custom formatting operation either with an <xref:System.ICustomFormatter> implementation or an <xref:System.IFormattable> implementation.</span></span>|<span data-ttu-id="43ecc-1632">持つ 4 つのオーバー ロードのいずれか、`provider`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1632">Any of the four overloads with a `provider` parameter.</span></span> <span data-ttu-id="43ecc-1633">コンパイラがオーバー ロードの中から適切なオーバー ロードの選択、`provider`引数リストに基づくパラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1633">The compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span>|  
  
<a name="Format_Brief"></a>   
## <a name="the-format-method-in-brief"></a><span data-ttu-id="43ecc-1634">Format メソッドの概要</span><span class="sxs-lookup"><span data-stu-id="43ecc-1634">The Format method in brief</span></span> 

 <span data-ttu-id="43ecc-1635">各オーバー ロード、<xref:System.String.Format%2A>メソッドを使用、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を 0 から始まるインデックス付きプレース ホルダーを含むと呼ばれる*アイテムの書式設定*、複合書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1635">Each overload of the <xref:System.String.Format%2A> method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to include zero-based indexed placeholders, called *format items*, in a composite format string.</span></span> <span data-ttu-id="43ecc-1636">実行時に、各書式項目は、パラメーター リスト内の対応する引数の文字列形式に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1636">At run time, each format item is replaced with the string representation of the corresponding argument in a parameter list.</span></span> <span data-ttu-id="43ecc-1637">引数の値が場合`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1637">If the value of the argument is `null`, the format item is replaced with <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-1638">たとえば、次の呼び出し、<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>メソッドには、次の 3 つの書式項目を含む書式指定文字列が含まれています。 {0}、 {1}、および{2}、と 3 つの項目を含む引数のリスト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1638">For example, the following call to the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method includes a format string with three format items, {0}, {1}, and {2}, and an argument list with three items.</span></span>  
  
 [!code-cpp[System.String.Format#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload1.cpp#8)]
 [!code-csharp-interactive[System.String.Format#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload1.cs#8)]
 [!code-vb[System.String.Format#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload1.vb#8)]  
  
<a name="FormatItem"></a>   
## <a name="the-format-item"></a><span data-ttu-id="43ecc-1639">書式指定項目</span><span class="sxs-lookup"><span data-stu-id="43ecc-1639">The format item</span></span>  
 <span data-ttu-id="43ecc-1640">書式指定項目には、この構文があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1640">A format item has this syntax:</span></span>  
  
```  
{index[,alignment][ :formatString] }  
```  
 
 <span data-ttu-id="43ecc-1641">角かっこは省略可能な要素を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1641">Brackets denote optional elements.</span></span> <span data-ttu-id="43ecc-1642">開始タグと右中かっこが必要です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1642">The opening and closing braces are required.</span></span> <span data-ttu-id="43ecc-1643">(をリテラルの開くを含めたり、「エスケープ中かっこ」セクションを参照して、書式指定文字列の中かっこを閉じる、[複合書式指定](~/docs/standard/base-types/composite-formatting.md)資料です)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1643">(To include a literal opening or closing brace in the format string, see the "Escaping Braces" section in the [Composite Formatting](~/docs/standard/base-types/composite-formatting.md) article.)</span></span>  
  
 <span data-ttu-id="43ecc-1644">たとえば、通貨値の書式設定の書式項目が次のようにあります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1644">For example, a format item to format a currency value might appear like this:</span></span>  
  
 [!code-cpp[System.String.Format#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatsyntax1.cpp#12)]
 [!code-csharp-interactive[System.String.Format#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatsyntax1.cs#12)]  
 [!code-vb[System.String.Format#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatsyntax1.vb#12)]  

 <span data-ttu-id="43ecc-1645">書式指定項目には、次の要素があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1645">A format item has the following elements:</span></span>  
  
 <span data-ttu-id="43ecc-1646">*index*</span><span class="sxs-lookup"><span data-stu-id="43ecc-1646">*index*</span></span>  
 <span data-ttu-id="43ecc-1647">文字列表現を引数の 0 から始まるインデックス、文字列内のこの位置に含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1647">The zero-based index of the argument whose string representation is to be included at this position in the string.</span></span> <span data-ttu-id="43ecc-1648">この引数は場合`null`文字列のこの位置での空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1648">If this argument is `null`, an empty string will be included at this position in the string.</span></span>  
  
 <span data-ttu-id="43ecc-1649">*alignment*</span><span class="sxs-lookup"><span data-stu-id="43ecc-1649">*alignment*</span></span>  
 <span data-ttu-id="43ecc-1650">任意。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1650">Optional.</span></span> <span data-ttu-id="43ecc-1651">引数が挿入されるとは、右揃え (正の整数) または左揃え (負の整数値) かどうかに、フィールドの長さの合計を示す符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1651">A signed integer that indicates the total length of the field into which the argument is inserted and whether it is right-aligned (a positive integer) or left-aligned (a negative integer).</span></span> <span data-ttu-id="43ecc-1652">省略した場合*配置*、先頭または末尾のスペースなしであるフィールドに対応する引数の文字列表現を挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1652">If you omit *alignment*, the string representation of the corresponding argument is inserted in a field with no leading or trailing spaces.</span></span>  
  
 <span data-ttu-id="43ecc-1653">場合の値*配置*が挿入される引数の長さよりも小さい*配置*は無視されます、引数の文字列表現の長さは、フィールド幅として使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1653">If the value of *alignment* is less than the length of the argument to be inserted, *alignment* is ignored and the length of the string representation of the argument is used as the field width.</span></span>  
  
 <span data-ttu-id="43ecc-1654">*formatString*</span><span class="sxs-lookup"><span data-stu-id="43ecc-1654">*formatString*</span></span>  
 <span data-ttu-id="43ecc-1655">任意。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1655">Optional.</span></span> <span data-ttu-id="43ecc-1656">対応する引数の結果の文字列の形式を指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1656">A string that specifies the format of the corresponding argument's result string.</span></span> <span data-ttu-id="43ecc-1657">省略した場合*formatString*、対応する引数のパラメーターなしの`ToString`メソッドは、文字列形式を生成するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1657">If you omit *formatString*, the corresponding argument's parameterless `ToString` method is called to produce its string representation.</span></span> <span data-ttu-id="43ecc-1658">指定した場合*formatString*、書式指定項目によって参照される引数を実装する必要があります、<xref:System.IFormattable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1658">If you specify *formatString*, the argument referenced by the format item must implement the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="43ecc-1659">書式指定文字列をサポートする型は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1659">Types that support format strings include:</span></span>  
  
-   <span data-ttu-id="43ecc-1660">すべての整数および浮動小数点型があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1660">All integral and floating-point types.</span></span> <span data-ttu-id="43ecc-1661">(を参照してください[標準数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1661">(See [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="43ecc-1662"><xref:System.DateTime> および <xref:System.DateTimeOffset>。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1662"><xref:System.DateTime> and <xref:System.DateTimeOffset>.</span></span> <span data-ttu-id="43ecc-1663">(を参照してください[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日付/時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1663">(See [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="43ecc-1664">すべての列挙型。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1664">All enumeration types.</span></span> <span data-ttu-id="43ecc-1665">(を参照してください[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1665">(See [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="43ecc-1666"><xref:System.TimeSpan> 値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1666"><xref:System.TimeSpan> values.</span></span> <span data-ttu-id="43ecc-1667">(を参照してください[標準 TimeSpan 書式指定文字列](~/docs/standard/base-types/standard-timespan-format-strings.md)と[カスタム TimeSpan 書式指定文字列](~/docs/standard/base-types/custom-timespan-format-strings.md))。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1667">(See [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) and [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="43ecc-1668">GUID。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1668">GUIDs.</span></span> <span data-ttu-id="43ecc-1669">(を参照してください、<xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType>メソッドです)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1669">(See the <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> method.)</span></span>  
  
 <span data-ttu-id="43ecc-1670">ただし、カスタムの型を実装できます<xref:System.IFormattable>、既存の型の拡張または<xref:System.IFormattable>実装します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1670">However, note that any custom type can implement <xref:System.IFormattable> or extend an existing type's <xref:System.IFormattable> implementation.</span></span>  
  
 <span data-ttu-id="43ecc-1671">次の例では、`alignment`と`formatString`書式付き出力を生成する引数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1671">The following example uses the `alignment` and `formatString` arguments to produce formatted output.</span></span>  
  
 [!code-cpp[System.String.Format#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload2.cpp#9)]
 [!code-csharp-interactive[System.String.Format#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload2.cs#9)]
 [!code-vb[System.String.Format#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload2.vb#9)]  
  
<a name="HowFormatted"></a>   
## <a name="how-arguments-are-formatted"></a><span data-ttu-id="43ecc-1672">引数の書式設定方法</span><span class="sxs-lookup"><span data-stu-id="43ecc-1672">How arguments are formatted</span></span>  
 <span data-ttu-id="43ecc-1673">書式項目は、文字列の先頭から順に処理されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1673">Format items are processed sequentially from the beginning of the string.</span></span> <span data-ttu-id="43ecc-1674">各書式項目には、メソッドの引数リスト内のオブジェクトに対応するインデックスがあります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1674">Each format item has an index that corresponds to an object in the method's argument list.</span></span> <span data-ttu-id="43ecc-1675"><xref:System.String.Format%2A>メソッドは、引数を取得し、その文字列形式を次のように派生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1675">The <xref:System.String.Format%2A> method retrieves the argument and derives its string representation as follows:</span></span>  
  
-   <span data-ttu-id="43ecc-1676">引数が場合`null`、メソッドを挿入します。<xref:System.String.Empty?displayProperty=nameWithType>結果の文字列にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1676">If the argument is `null`, the method inserts <xref:System.String.Empty?displayProperty=nameWithType> into the result string.</span></span> <span data-ttu-id="43ecc-1677">処理を含む converned をする必要はありません、 <xref:System.NullReferenceException> null 引数をします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1677">You don't have to be converned with handling an <xref:System.NullReferenceException> for null arguments.</span></span> 
  
-   <span data-ttu-id="43ecc-1678">呼び出す場合は、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>オーバー ロードおよび`provider`パラメーターを実装して、<xref:System.ICustomFormatter>インターフェイスに渡される引数、`provider`オブジェクトの<xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1678">If you call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> overload and the `provider` parameter implements the <xref:System.ICustomFormatter> interface, the argument is passed to the `provider` object's <xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43ecc-1679">書式指定項目が含まれている場合、 *formatString*引数として渡される最初の引数をメソッドにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1679">If the format item includes a *formatString* argument, it is passed as the first argument to the method.</span></span> <span data-ttu-id="43ecc-1680">場合、<xref:System.ICustomFormatter>実装は、書式指定サービスを提供することが、引数の文字列表現を返しますそれ以外の場合を返しますそれ以外の場合、`null`し、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1680">If the <xref:System.ICustomFormatter> implementation is able to provide formatting services, it returns the string representation of the argument; otherwise, it returns `null` and the next step executes.</span></span>  
  
-   <span data-ttu-id="43ecc-1681">引数を実装する場合、<xref:System.IFormattable>インターフェイス、その<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1681">If the argument implements the <xref:System.IFormattable> interface, its <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation is called.</span></span>  
  
-   <span data-ttu-id="43ecc-1682">引数のパラメーターなしの`ToString`がオーバーライドまたはから継承するメソッド、<xref:System.Object>クラスが呼び出されて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1682">The argument's parameterless `ToString` method, which is either overridden or inherited from the <xref:System.Object> class, is called.</span></span>  
  
 <span data-ttu-id="43ecc-1683">呼び出しをインターセプトする例については、<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>メソッド情報を表示することができます、<xref:System.String.Format%2A>メソッドは、複合書式指定文字列内の各書式項目を書式設定メソッドを参照してください[例: 切片プロバイダーとローマ数字フォーマッタ](#Format7_Example)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1683">For an example that intercepts calls to the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method and allows you to see what information the <xref:System.String.Format%2A> method passes to a formatting method for each format item in a composite format string, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>  
  
<a name="SameIndex"></a>   
## <a name="format-items-that-have-the-same-index"></a><span data-ttu-id="43ecc-1684">インデックスが同じである書式指定項目</span><span class="sxs-lookup"><span data-stu-id="43ecc-1684">Format items that have the same index</span></span>  
 <span data-ttu-id="43ecc-1685"><xref:System.String.Format%2A>メソッドがスローされます、<xref:System.FormatException>インデックス項目のインデックスが、引数リスト内の引数の数以上の場合は例外です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1685">The <xref:System.String.Format%2A> method throws a <xref:System.FormatException> exception if the index of an index item is greater than or equal to the number of arguments in the argument list.</span></span> <span data-ttu-id="43ecc-1686">ただし、`format`同じインデックスを複数の書式項目がある限り、引数がある数より多くの書式項目を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1686">However, `format` can include more format items than there are arguments, as long as multiple format items have the same index.</span></span> <span data-ttu-id="43ecc-1687">呼び出しで、<xref:System.String.Format%28System.String%2CSystem.Object%29>次の例では、引数リスト内のメソッドが 1 つの引数が、書式指定文字列には、次の 2 つの書式項目が含まれています。 10 進値、数値のいずれかが表示されます、16 進値、もう 1 つ表示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1687">In the call to the <xref:System.String.Format%28System.String%2CSystem.Object%29> method in following example, the argument list has a single argument, but the format string includes two format items: one displays the decimal value of a number, and the other displays its hexadecimal value.</span></span>  
  
 [!code-csharp-interactive[System.String.Format2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example1.cs#1)]
 [!code-vb[System.String.Format2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example1.vb#1)]  
  
<a name="Format_Culture"></a>   
## <a name="formatting-and-culture"></a><span data-ttu-id="43ecc-1688">書式とカルチャ</span><span class="sxs-lookup"><span data-stu-id="43ecc-1688">Formatting and culture</span></span>  
 <span data-ttu-id="43ecc-1689">によって返される、現在のカルチャの規則を使用して、引数リスト内のオブジェクトをそれぞれの文字列表現に変換されます一般に、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1689">Generally, objects in the argument list are converted to their string representations by using the conventions of the current culture, which is returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="43ecc-1690">この動作を制御するには、いずれかのオーバー ロードを呼び出して<xref:System.String.Format%2A>が含まれている、`provider`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1690">You can control this behavior by calling one of the overloads of <xref:System.String.Format%2A> that includes a `provider` parameter.</span></span> <span data-ttu-id="43ecc-1691">`provider`パラメーターは、<xref:System.IFormatProvider>中程度の書式設定に使用されるカスタムおよびカルチャに固有の書式情報を提供する実装を処理します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1691">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies custom and culture-specific formatting information that is used to moderate the formatting process.</span></span>  
  
 <span data-ttu-id="43ecc-1692"><xref:System.IFormatProvider>インターフェイスが 1 つのメンバー、 <xref:System.IFormatProvider.GetFormat%2A>、これに書式設定情報を提供するオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1692">The <xref:System.IFormatProvider> interface has a single member, <xref:System.IFormatProvider.GetFormat%2A>, which is responsible for returning the object that provides formatting information.</span></span> <span data-ttu-id="43ecc-1693">.NET Framework には 3 つ<xref:System.IFormatProvider>カルチャに固有の書式を提供する実装。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1693">The .NET Framework has three <xref:System.IFormatProvider> implementations that provide culture-specific formatting:</span></span>  
  
-   <span data-ttu-id="43ecc-1694"><xref:System.Globalization.CultureInfo>。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1694"><xref:System.Globalization.CultureInfo>.</span></span> <span data-ttu-id="43ecc-1695">その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドはカルチャ固有の仕様を返します<xref:System.Globalization.NumberFormatInfo>数値およびカルチャに固有の書式設定オブジェクト<xref:System.Globalization.DateTimeFormatInfo>日付と時刻の値を書式設定するためのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1695">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns a culture-specific <xref:System.Globalization.NumberFormatInfo> object for formatting numeric values and a culture-specific <xref:System.Globalization.DateTimeFormatInfo> object for formatting date and time values.</span></span>  
  
-   <span data-ttu-id="43ecc-1696"><xref:System.Globalization.DateTimeFormatInfo>、日付と時刻の値のカルチャに固有の書式設定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1696"><xref:System.Globalization.DateTimeFormatInfo>, which is used for culture-specific formatting of date and time values.</span></span> <span data-ttu-id="43ecc-1697">その<xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A>メソッドでは、それ自体を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1697">Its <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A> method returns itself.</span></span>  
  
-   <span data-ttu-id="43ecc-1698"><xref:System.Globalization.NumberFormatInfo>、数値のカルチャに固有の書式設定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1698"><xref:System.Globalization.NumberFormatInfo>, which is used for culture-specific formatting of numeric values.</span></span> <span data-ttu-id="43ecc-1699">その<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>プロパティには、それ自体を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1699">Its <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> property returns itself.</span></span> 

<a name="Format_Custom"></a>   
## <a name="custom-formatting-operations"></a><span data-ttu-id="43ecc-1700">カスタムの書式設定操作</span><span class="sxs-lookup"><span data-stu-id="43ecc-1700">Custom formatting operations</span></span>  
 <span data-ttu-id="43ecc-1701">いずれかのオーバー ロードを呼び出すことができます、<xref:System.String.Format%2A>メソッドが指定されて、`provider`型のパラメーター<xref:System.IFormatProvider>カスタムの書式設定操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1701">You can also call the any of the overloads of the <xref:System.String.Format%2A> method that have a `provider` parameter of type <xref:System.IFormatProvider> to perform custom formatting operations.</span></span> <span data-ttu-id="43ecc-1702">たとえば、識別番号、または電話番号として整数をフォーマットする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1702">For example, you could format an integer as an identification number or as a telephone number.</span></span> <span data-ttu-id="43ecc-1703">カスタム書式設定を実行する、`provider`引数は、両方を実装する必要があります、<xref:System.IFormatProvider>と<xref:System.ICustomFormatter>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1703">To perform custom formatting, your `provider` argument must implement both the <xref:System.IFormatProvider> and <xref:System.ICustomFormatter> interfaces.</span></span> <span data-ttu-id="43ecc-1704">ときに、<xref:System.String.Format%2A>メソッドに渡されます、<xref:System.ICustomFormatter>実装として、`provider`引数、<xref:System.String.Format%2A>メソッドの呼び出し、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>実装型のオブジェクトを要求して<xref:System.ICustomFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1704">When the <xref:System.String.Format%2A> method is passed an <xref:System.ICustomFormatter> implementation as the `provider` argument, the <xref:System.String.Format%2A> method calls its   <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation and requests an object of type <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="43ecc-1705">呼び出して、返された<xref:System.ICustomFormatter>オブジェクトの<xref:System.ICustomFormatter.Format%2A>に複合文字列の各書式項目の書式を設定するメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1705">It then calls the returned <xref:System.ICustomFormatter> object's <xref:System.ICustomFormatter.Format%2A> method to format each format item in the composite string passed to it.</span></span>  
  
 <span data-ttu-id="43ecc-1706">詳細については、カスタムの書式設定ソリューションを提供する、次を参照してください。[する方法: 定義および使用するカスタム数値書式プロバイダー](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md)と<xref:System.ICustomFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1706">For more information about providing custom formatting solutions, see [How to: Define and Use Custom Numeric Format Providers](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md) and <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="43ecc-1707">整数を書式設定されたカスタムの数値に変換する例は、次を参照してください。[例: カスタムの書式設定操作](#Format6_Example)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1707">For an example that converts integers to formatted custom numbers, see [Example: A custom formatting operation](#Format6_Example).</span></span> <span data-ttu-id="43ecc-1708">符号なしバイトをローマ数字に変換する例は、次を参照してください。[例: 切片プロバイダーとローマ数字フォーマッタ](#Format7_Example)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1708">For an example that converts unsigned bytes to Roman numerals, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>  
  
<a name="Format6_Example" />  
### <a name="example-a-custom-formatting-operation"></a><span data-ttu-id="43ecc-1709">例: カスタム書式指定操作</span><span class="sxs-lookup"><span data-stu-id="43ecc-1709">Example: A custom formatting operation</span></span>  
 <span data-ttu-id="43ecc-1710">この例では、フォーム x-xxxxx-xx で顧客アカウント番号として整数値を書式設定する書式設定プロバイダーを定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1710">This example defines a format provider that formats an integer value as a customer account number in the form x-xxxxx-xx.</span></span>  
  
 [!code-cpp[System.String.Format#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample2.cpp#2)]
 [!code-csharp-interactive[System.String.Format#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/FormatExample2.cs#2)]
 [!code-vb[System.String.Format#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/FormatExample2.vb#2)]  
  
<a name="Format7_Example" />  
### <a name="example-an-intercept-provider-and-roman-numeral-formatter"></a><span data-ttu-id="43ecc-1711">例: インターセプト プロバイダーとローマ数字フォーマッタ</span><span class="sxs-lookup"><span data-stu-id="43ecc-1711">Example: An intercept provider and Roman numeral formatter</span></span>  
 <span data-ttu-id="43ecc-1712">この例で定義を実装するカスタム書式設定プロバイダー、<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>インターフェイスを 2 つの処理を行うには。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1712">This example defines a custom format provider that implements the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces to do two things:</span></span>  
  
-   <span data-ttu-id="43ecc-1713">渡されるパラメーターが表示されます、<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1713">It displays the parameters passed to its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="43ecc-1714">これにより、どのようなパラメーターを表示する、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>書式を設定しようとする各オブジェクトのカスタム書式設定を実装するメソッドを渡します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1714">This enables us to see what parameters the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method is passing to the custom formatting implementation for each object that it tries to format.</span></span> <span data-ttu-id="43ecc-1715">これは、アプリケーションをデバッグするときに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1715">This can be useful when you're debugging your application.</span></span>  
  
-   <span data-ttu-id="43ecc-1716">書式設定するオブジェクトが"R"標準書式指定文字列を使用して書式設定対象である符号なしバイト値の場合は、カスタム フォーマッタ ローマ数字として、数値の書式設定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1716">If the object to be formatted is an unsigned byte value that is to be formatted by using the "R" standard format string, the custom formatter formats the numeric value as a Roman numeral.</span></span>  
  
 [!code-cpp[System.String.Format#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/interceptor2.cpp#11)]
 [!code-csharp-interactive[System.String.Format#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/interceptor2.cs#11)]
 [!code-vb[System.String.Format#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/interceptor2.vb#11)]  
  
<a name="QA"></a>   
## <a name="stringformat-q--a"></a><span data-ttu-id="43ecc-1717">String.Format Q & A</span><span class="sxs-lookup"><span data-stu-id="43ecc-1717">String.Format Q & A</span></span>  
  
### <a name="why-do-you-recommend-string-interpolation-over-calls-to-the-stringformat-method"></a><span data-ttu-id="43ecc-1718">なぜ文字列の補間への呼び出しで、`String.Format`メソッドしますか?</span><span class="sxs-lookup"><span data-stu-id="43ecc-1718">Why do you recommend string interpolation over calls to the `String.Format` method?</span></span>

<span data-ttu-id="43ecc-1719">文字列の補間します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1719">String interpolation is:</span></span>

- <span data-ttu-id="43ecc-1720">柔軟です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1720">More flexible.</span></span> <span data-ttu-id="43ecc-1721">これは、複合書式指定をサポートするメソッドへの呼び出しを必要とせず任意の文字列で使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1721">It can be used in any string without requiring a call to a method that supports composite formatting.</span></span> <span data-ttu-id="43ecc-1722">それ以外の場合に呼び出す必要がある、<xref:System.String.Format%2A>メソッドまたは別のメソッドなどの複合書式指定をサポートする<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1722">Otherwise, you have to call the <xref:System.String.Format%2A> method or another method that supports composite formatting, such as <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>.</span></span> 

- <span data-ttu-id="43ecc-1723">読みやすくします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1723">More readable.</span></span> <span data-ttu-id="43ecc-1724">引数リストではなく、式を補間文字列に挿入する式が表示されたら、ため補間文字列はおよび読み取りコードにはるかに簡単です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1724">Because the expression to insert into a string appears in the interpolated expression rather than in a argument list, interpolated strings are far easier to code and to read.</span></span> <span data-ttu-id="43ecc-1725">より読みやすくするため補間文字列は、複合書式指定メソッドの呼び出しだけでなくを置き換えることがでくことはできますも文字列連結操作により簡潔でわかりやすいコードを生成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1725">Because of their greater readability, interpolated strings can replace not only calls to composite format methods, but they can also be used in string concatenation operations to produce more concise, clearer code.</span></span> 

<span data-ttu-id="43ecc-1726">次の 2 つのコード例の比較では、複合書式指定メソッドを呼び出すと文字列の連結を補間文字列の上の優位性を示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1726">A comparison of the following two code examples illustrates the superiority of interpolated strings over string concatenation and calls to composite formatting methods.</span></span> <span data-ttu-id="43ecc-1727">次の例では、複数の文字列連結操作の使用は、verbose と読み取りハード コードを生成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1727">The use of multiple string concatenation operations in the following example produces verbose and hard-to-read code.</span></span>

[!code-csharp-interactive[non-interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated1.cs)]
[!code-vb[non-interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated1.vb)]  

<span data-ttu-id="43ecc-1728">次の例で補間文字列の使用が文字列連結ステートメントや呼び出しよりもより明確で簡潔のコードを生成する一方、<xref:System.String.Format%2A>前の例のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1728">In contrast, the use of interpolated strings in the following example produce much clearer, more concise code than the string concatenation statement and the call to the <xref:System.String.Format%2A> method in the previous example.</span></span>

[!code-csharp-interactive[interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated2.cs)]
[!code-vb[interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated2.vb)]  

### <a name="where-can-i-find-a-list-of-the-predefined-format-strings-that-can-be-used-with-format-items"></a><span data-ttu-id="43ecc-1729">書式指定項目で使用できる定義済み書式指定文字列の一覧を検索する場所は?</span><span class="sxs-lookup"><span data-stu-id="43ecc-1729">Where can I find a list of the predefined format strings that can be used with format items?</span></span>  
  
-   <span data-ttu-id="43ecc-1730">すべての整数および浮動小数点型を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1730">For all integral and floating-point types, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="43ecc-1731">日付と時刻の値を参照してください。[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1731">For date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="43ecc-1732">列挙値の場合は、次を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1732">For enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="43ecc-1733"><xref:System.TimeSpan>値を参照してください[標準 TimeSpan 書式指定文字列](~/docs/standard/base-types/standard-timespan-format-strings.md)と[カスタム TimeSpan 書式指定文字列](~/docs/standard/base-types/custom-timespan-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1733">For <xref:System.TimeSpan> values, see  [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) and [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md).</span></span>  
  
-   <span data-ttu-id="43ecc-1734"><xref:System.Guid>値では、「解説」セクションを参照してください、<xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1734">For <xref:System.Guid> values, see the Remarks section of the <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> reference page.</span></span>  
  
### <a name="how-do-i-control-the-alignment-of-the-result-strings-that-replace-format-items"></a><span data-ttu-id="43ecc-1735">書式項目を置換する結果文字列の配置を制御する方法は?</span><span class="sxs-lookup"><span data-stu-id="43ecc-1735">How do I control the alignment of the result strings that replace format items?</span></span>  
 <span data-ttu-id="43ecc-1736">書式指定項目の一般的な構文です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1736">The general syntax of a format item is:</span></span>  
  
```  
{index[,alignment][: formatString]}  
```  
  
 <span data-ttu-id="43ecc-1737">ここで*配置*フィールドの幅を定義する符号付き整数します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1737">where *alignment* is a signed integer that defines the field width.</span></span> <span data-ttu-id="43ecc-1738">この値が負の場合は、フィールド内のテキストを左揃えです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1738">If this value is negative, text in the field is left-aligned.</span></span> <span data-ttu-id="43ecc-1739">正の場合は、テキストが右揃えです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1739">If it is positive, text is right-aligned.</span></span>  
  
### <a name="how-do-i-control-the-number-of-digits-after-the-decimal-separator"></a><span data-ttu-id="43ecc-1740">小数点区切り文字の後に数字の数が制御する方法</span><span class="sxs-lookup"><span data-stu-id="43ecc-1740">How do I control the number of digits after the decimal separator?</span></span>  
 <span data-ttu-id="43ecc-1741">すべて[標準数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)(整数のみで使用される) を"D"、"G"、"R"を除くし、"X"は、結果の文字列の小数点以下桁数を定義する有効桁数指定子を許可します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1741">All [standard numeric format strings](~/docs/standard/base-types/standard-numeric-format-strings.md) except "D" (which is used with integers only), "G", "R", and "X" allow a precision specifier that defines the number of decimal digits in the result string.</span></span> <span data-ttu-id="43ecc-1742">次の例では、標準の数値書式指定文字列を使用して、結果の文字列の 10 進数字の数を制御します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1742">The following example uses standard numeric format strings to control the number of decimal digits in the result string.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa26.cs#26)]
 [!code-vb[System.String.Format#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa26.vb#26)]  
  
 <span data-ttu-id="43ecc-1743">使用する場合、[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)結果の文字列に次の例のようにの 10 進数字の数を制御する、「0」書式指定子を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1743">If you're using a [custom numeric format string](~/docs/standard/base-types/custom-numeric-format-strings.md), use the "0" format specifier to control the number of decimal digits in the result string, as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa27.cs#27)]
 [!code-vb[System.String.Format#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa27.vb#27)]  
  
### <a name="how-do-i-control-the-number-of-integral-digits"></a><span data-ttu-id="43ecc-1744">整数部の桁の数を制御する方法は?</span><span class="sxs-lookup"><span data-stu-id="43ecc-1744">How do I control the number of integral digits?</span></span>  
 <span data-ttu-id="43ecc-1745">既定では、書式設定操作は、整数の桁を 0 以外をのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1745">By default, formatting operations only display non-zero integral digits.</span></span> <span data-ttu-id="43ecc-1746">整数の書式を設定する場合は、数字の数を制御する、精度指定子"D"と"X"標準書式指定文字列を使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1746">If you are formatting integers, you can use a precision specifier with the "D" and "X" standard format strings to control the number of digits.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa29.cs#29)]
 [!code-vb[System.String.Format#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa29.vb#29)]  
  
 <span data-ttu-id="43ecc-1747">「0」を使用して、指定された数の整数部の桁の結果の文字列を生成するために整数または浮動小数点数に先行ゼロを埋め込む[カスタム数値書式指定子](~/docs/standard/base-types/custom-numeric-format-strings.md)次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1747">You can pad an integer or floating-point number with leading zeros to produce a result string with a specified number of integral digits by using the "0" [custom numeric format specifier](~/docs/standard/base-types/custom-numeric-format-strings.md), as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa28.cs#28)]
 [!code-vb[System.String.Format#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa28.vb#28)]  
  
### <a name="how-many-items-can-i-include-in-the-format-list"></a><span data-ttu-id="43ecc-1748">項目の数形式の一覧で含めることはできますか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1748">How many items can I include in the format list?</span></span>  
 <span data-ttu-id="43ecc-1749">実際の制限はありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1749">There is no practical limit.</span></span> <span data-ttu-id="43ecc-1750">2 番目のパラメーター、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>メソッドは割り当てられ、<xref:System.ParamArrayAttribute>属性は、コンマ区切りのリストまたは、[形式] ボックスの一覧としてオブジェクトの配列のいずれかを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1750">The second parameter of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method is tagged with the <xref:System.ParamArrayAttribute> attribute, which allows you to include either a delimited list or an object array as your format list.</span></span>  
  
<a name="braces" />
### <a name="how-do-i-include-literal-braces--and--in-the-result-string"></a><span data-ttu-id="43ecc-1751">リテラルのかっこを含める方法 ("{"と"}") は結果文字列にしますか?</span><span class="sxs-lookup"><span data-stu-id="43ecc-1751">How do I include literal braces ("{" and "}") in the result string?</span></span>  
 <span data-ttu-id="43ecc-1752">たとえば、どのようにするには、次のメソッド呼び出しからスロー、<xref:System.FormatException>例外しますか?</span><span class="sxs-lookup"><span data-stu-id="43ecc-1752">For example, how do you prevent the following method call from throwing a <xref:System.FormatException> exception?</span></span>  
  
 [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
 [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
 <span data-ttu-id="43ecc-1753">1 つの始めまたは終わりかっこは、常に先頭または書式項目の末尾として解釈がします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1753">A single opening or closing brace is always interpreted as the beginning or end of a format item.</span></span> <span data-ttu-id="43ecc-1754">どおりに解釈するのにそれをエスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1754">To be interpreted literally, it must be escaped.</span></span> <span data-ttu-id="43ecc-1755">別の中かっこを追加することによって、かっこをエスケープする ("{{"と"}}"の代わりに"{"と"}")、次のメソッド呼び出しのように。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1755">You escape a brace by adding another brace ("{{" and "}}" instead of "{" and "}"), as in the following method call:</span></span>  
  
 [!code-csharp-interactive[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
 [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
 <span data-ttu-id="43ecc-1756">ただし、さらにエスケープされた中かっこは簡単に誤ったです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1756">However, even escaped braces are easily misinterpreted.</span></span> <span data-ttu-id="43ecc-1757">形式の一覧で中かっこを指定し、次の例のように、結果の文字列に挿入の書式項目を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1757">We recommend that you include braces in the format list and use format items to insert them in the result string, as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#25)]
 [!code-vb[System.String.Format#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#25)]  
  
### <a name="why-does-my-call-to-the-stringformat-method-throw-a-formatexception"></a><span data-ttu-id="43ecc-1758">マイ String.Format メソッドの呼び出しが、FormatException をスローする理由</span><span class="sxs-lookup"><span data-stu-id="43ecc-1758">Why does my call to the String.Format method throw a FormatException?</span></span>  
 <span data-ttu-id="43ecc-1759">例外の最も一般的な原因は、書式指定項目のインデックスが形式 リスト内のオブジェクトに対応していないことです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1759">The most common cause of the exception is that the index of a format item doesn't correspond to an object in the format list.</span></span> <span data-ttu-id="43ecc-1760">通常このエラーは、書式指定項目のインデックスを misnumbered したか、またはオブジェクトの一覧に含める、形式を忘れてしまったことを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1760">Usually this indicates that you've misnumbered the indexes of format items or you've forgotten to include an object in the format list.</span></span> <span data-ttu-id="43ecc-1761">文字のエスケープされていないの左または右中かっこを含めるしようとしてもがスローされます、<xref:System.FormatException>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1761">Attempting to include an unescaped left or right brace character also throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="43ecc-1762">場合によっては、例外は、入力ミス; の結果入力し間違えたによくある間違いは、たとえば、"["(左角かっこ) の代わりに"{"(左中かっこ)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1762">Occasionally, the exception is the result of a typo; for example, a typical mistake is to mistype "[" (the left bracket) instead of "{" (the left brace).</span></span>  
  
### <a name="if-the-formatsystemiformatprovidersystemstringsystemobject-method-supports-parameter-arrays-why-does-my-code-throw-an-exception-when-i-use-an-array"></a><span data-ttu-id="43ecc-1763">場合は Format(System.IFormatProvider,System.String,System.Object[]) メソッドは、理由コード、例外がスロー配列を使用する場合、パラメーター配列をサポートしますか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1763">If the Format(System.IFormatProvider,System.String,System.Object[]) method supports parameter arrays, why does my code throw an exception when I use an array?</span></span>  
 <span data-ttu-id="43ecc-1764">たとえば、次のコードがスローされます、<xref:System.FormatException>例外。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1764">For example, the following code throws a <xref:System.FormatException> exception:</span></span>  
  
 [!code-csharp[System.String.Format#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa1.cs#21)]
 [!code-vb[System.String.Format#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa1.vb#21)]  
  
 <span data-ttu-id="43ecc-1765">これは、コンパイラのオーバー ロードの解決の問題です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1765">This is a problem of compiler overload resolution.</span></span> <span data-ttu-id="43ecc-1766">コンパイラでは、整数の配列をオブジェクト配列に変換することはできません、ため、整数の配列として扱われます、単一の引数を呼び出すので、<xref:System.String.Format%28System.String%2CSystem.Object%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1766">Because the compiler cannot convert an array of integers to an object array, it treats the integer array as a single argument, so it calls the <xref:System.String.Format%28System.String%2CSystem.Object%29> method.</span></span> <span data-ttu-id="43ecc-1767">次の 4 つの書式項目が形式の一覧で 1 つの項目のみがあるために、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1767">The exception is thrown because there are four format items but only a single item in the format list.</span></span>  
  
 <span data-ttu-id="43ecc-1768">呼び出す前に自分で変換を実行する必要があるため、Visual Basic でも C# の場合は、整数の配列をオブジェクト配列に変換できます、<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1768">Because neither Visual Basic nor C# can convert an integer array to an object array, you have to perform the conversion yourself before calling the <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> method.</span></span> <span data-ttu-id="43ecc-1769">次の例では、1 つの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1769">The following example provides one implementation.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa2.cs#22)]
 [!code-vb[System.String.Format#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa2.vb#22)]  

## Examples

<span data-ttu-id="43ecc-1770">呼び出すさまざまな例として、<xref:System.String.Format%2A>を通じてメソッドが混在して、[解説](#remarks)この記事のセクションです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1770">Numerous examples that call the <xref:System.String.Format%2A> method are interspersed through the [Remarks](#remarks) section of this article.</span></span>  

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

<span data-ttu-id="43ecc-1771">完全なセットをダウンロードすることもできます`String.Format`例については、含まれている、 [c# .NET Core 2.0 プロジェクト](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/String.Format.zip)と[Visual basic のプロジェクトを .NET Core 2.0](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/String.Format.zip)、から、 [dotnet/docs。GitHub リポジトリ](https://github.com/dotnet/docs)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1771">You can also download a complete set of `String.Format` examples, which are included a [.NET Core 2.0 project for C#](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/String.Format.zip) and a [.NET Core 2.0 project for Visual Basic](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/String.Format.zip), from the [dotnet/docs GitHub repository](https://github.com/dotnet/docs).</span></span>

<span data-ttu-id="43ecc-1772">一部のアーティクルに含める例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1772">The following are some of the examples included in the article:</span></span>

### <a name="create-a-format-string"></a><span data-ttu-id="43ecc-1773">書式指定文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1773">Create a format string</span></span>

[<span data-ttu-id="43ecc-1774">文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1774">Inserting a string</span></span>](#inserting-a-string)  
[<span data-ttu-id="43ecc-1775">書式指定項目</span><span class="sxs-lookup"><span data-stu-id="43ecc-1775">The format item</span></span>](#the-format-item)  
[<span data-ttu-id="43ecc-1776">インデックスが同じである書式指定項目</span><span class="sxs-lookup"><span data-stu-id="43ecc-1776">Format items that have the same index</span></span>](#format-items-that-have-the-same-index)

### <a name="control-formatted-output"></a><span data-ttu-id="43ecc-1777">コントロールの書式付き出力</span><span class="sxs-lookup"><span data-stu-id="43ecc-1777">Control formatted output</span></span>

[<span data-ttu-id="43ecc-1778">書式設定の制御</span><span class="sxs-lookup"><span data-stu-id="43ecc-1778">Controlling formatting</span></span>](#controlling-formatting)  
[<span data-ttu-id="43ecc-1779">間隔を制御します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1779">Controlling spacing</span></span>](#controlling-spacing)  
[<span data-ttu-id="43ecc-1780">配置を制御します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1780">Controlling alignment</span></span>](#controlling-alignment)  
[<span data-ttu-id="43ecc-1781">整数部の桁の数を制御します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1781">Controlling the number of integral digits</span></span>](#how-do-i-control-the-number-of-integral-digits)  
[<span data-ttu-id="43ecc-1782">小数点区切り文字の後の桁数を制御します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1782">Controlling the number of digits after the decimal separator</span></span>](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)  
[<span data-ttu-id="43ecc-1783">結果文字列にリテラルのかっこを含める</span><span class="sxs-lookup"><span data-stu-id="43ecc-1783">Including literal braces in a result string</span></span>](#braces)  

### <a name="make-format-strings-culture-sensitive"></a><span data-ttu-id="43ecc-1784">カルチャの書式指定文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1784">Make format strings culture-sensitive</span></span>

[<span data-ttu-id="43ecc-1785">カルチャの書式設定</span><span class="sxs-lookup"><span data-stu-id="43ecc-1785">Culture-sensitive formatting</span></span>](#culture-sensitive-formatting)  

### <a name="customize-the-formatting-operation"></a><span data-ttu-id="43ecc-1786">書式設定操作をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1786">Customize the formatting operation</span></span>

[<span data-ttu-id="43ecc-1787">カスタムの書式設定操作</span><span class="sxs-lookup"><span data-stu-id="43ecc-1787">A custom formatting operation</span></span>](#example-a-custom-formatting-operation)  
[<span data-ttu-id="43ecc-1788">インターセプトのプロバイダーとローマ数字フォーマッタ</span><span class="sxs-lookup"><span data-stu-id="43ecc-1788">An intercept provider and Roman numeral formatter</span></span>](#example-an-intercept-provider-and-roman-numeral-formatter)  

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="43ecc-1789">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1789">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="43ecc-1790">書式指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1790">The object to format.</span></span></param>
        <summary><span data-ttu-id="43ecc-1791">文字列の 1 つ以上の書式項目を、指定されたオブジェクトの文字列表記に置換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1791">Replaces one or more format items in a string with the string representation of a specified object.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1792">書式項目が <paramref name="format" /> の文字列形式に置換された <paramref name="arg0" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1792">A copy of <paramref name="format" /> in which any format items are replaced by the string representation of <paramref name="arg0" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="43ecc-1793">このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)式の値を文字列形式に変換して、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1793">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-a-single-argument"></a><span data-ttu-id="43ecc-1794">例: 1 つの引数の書式設定</span><span class="sxs-lookup"><span data-stu-id="43ecc-1794">Example: Formatting a single argument</span></span>  
 
 <span data-ttu-id="43ecc-1795">次の例では、<xref:System.String.Format%28System.String%2CSystem.Object%29>を文字列の途中で個々 のユーザーの年齢を埋め込む方法。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1795">The following example uses the <xref:System.String.Format%28System.String%2CSystem.Object%29> method to embed an individual's age in the middle of a string.</span></span>  
  
 [!code-cpp[System.String.Format#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format7.cpp#7)]
 [!code-csharp-interactive[System.String.Format#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format7.cs#7)]
 [!code-vb[System.String.Format#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format7.vb#7)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1796"><paramref name="format" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1796"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-1797"><paramref name="format" /> の書式項目が無効です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1797">The format item in <paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="43ecc-1798">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1798">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1799">書式項目のインデックスが 0 ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1799">The index of a format item is not zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="43ecc-1800">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1800">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="args"><span data-ttu-id="43ecc-1801">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1801">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="43ecc-1802">指定した文字列の書式項目を、指定した配列内の対応するオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1802">Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1803">書式項目が <paramref name="format" /> の対応するオブジェクトの文字列形式に置換された <paramref name="args" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1803">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="43ecc-1804">このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)の文字列表現に 4 つまたは複数の式の値を変換して、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1804">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="43ecc-1805">以降、`args`パラメーターをマークする、<xref:System.ParamArrayAttribute?displayProperty=nameWithType>属性、オブジェクトに渡せますメソッドとして、または個々 の引数として、<xref:System.Object>配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1805">Since the `args` parameter is marked with the <xref:System.ParamArrayAttribute?displayProperty=nameWithType> attribute, you can pass the objects to the method as individual arguments or as an <xref:System.Object> array.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-more-than-three-arguments"></a><span data-ttu-id="43ecc-1806">例: 複数の 3 つの引数の書式設定</span><span class="sxs-lookup"><span data-stu-id="43ecc-1806">Example: Formatting more than three arguments</span></span>  
 
 <span data-ttu-id="43ecc-1807">この例では、特定の日付の上限と下限の温度上のデータを含む文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1807">This example creates a string that contains data on the high and low temperature on a particular date.</span></span> <span data-ttu-id="43ecc-1808">複合書式指定文字列は、c# の例では 5 つの書式指定項目と Visual Basic の例は 6 つがします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1808">The composite format string has five format items in the C# example and six in the Visual Basic example.</span></span> <span data-ttu-id="43ecc-1809">形式の対応する値の文字列形式の幅を定義する 2 つの書式項目をおよび最初の書式項目は、標準の日時書式指定文字列にも含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1809">Two of the format items define the width of their corresponding value's string representation, and the first format item also includes a standard date and time format string.</span></span>  
  
 [!code-cpp[System.String.Format#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format5.cpp#5)]
 [!code-csharp-interactive[System.String.Format#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format5.cs#5)]
 [!code-vb[System.String.Format#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format5.vb#5)]  
  
 <span data-ttu-id="43ecc-1810">配列として書式設定するオブジェクトを渡すこともできますではなく、引数リストを指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1810">You can also pass the objects to be formatted as an array rather than a an argument list.</span></span>  
  
 [!code-cpp[System.String.Format#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format_paramarray1.cpp#10)]
 [!code-csharp-interactive[System.String.Format#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format_paramarray1.cs#10)]
 [!code-vb[System.String.Format#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format_paramarray1.vb#10)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1811"><paramref name="format" /> または <paramref name="args" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1811"><paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="43ecc-1812"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1812"><paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="43ecc-1813">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1813">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1814">書式項目のインデックスが 0 未満か、<paramref name="args" /> 配列の長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1814">The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-1815">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1815">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="43ecc-1816">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1816">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="43ecc-1817">書式指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1817">The object to format.</span></span></param>
        <summary><span data-ttu-id="43ecc-1818">指定した文字列の 1 つまたは複数の書式項目を、対応するオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1818">Replaces the format item or items in a specified string with the string representation of the corresponding object.</span></span> <span data-ttu-id="43ecc-1819">パラメーターにより、カルチャに固有の書式情報が指定されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1819">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1820">書式項目が <paramref name="format" /> の文字列形式に置換された <paramref name="arg0" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1820">A copy of <paramref name="format" /> in which the format item or items have been replaced by the string representation of <paramref name="arg0" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="43ecc-1821">このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)式の値を文字列形式に変換して、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1821">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span> <span data-ttu-id="43ecc-1822">変換を実行するのには、メソッドは、カルチャの書式設定またはカスタム フォーマッタを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1822">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="43ecc-1823">メソッドに変換します`arg0`を呼び出すことによって、文字列形式の**ToString(IFormatProvider)** メソッドか、書式指定項目が呼び出すことによって、書式指定文字列を含むオブジェクトの対応する場合、 **ToString (文字列、IFormatProvider)** メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1823">The method converts `arg0` to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="43ecc-1824">これらのメソッドが存在しない場合は呼び出し、オブジェクトのパラメーターのない**ToString**メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1824">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1825"><paramref name="format" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1825"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="43ecc-1826"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1826"><paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="43ecc-1827">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1827">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1828">書式項目のインデックスが 0 ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1828">The index of a format item is not zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-1829">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1829">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="43ecc-1830">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1830">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="args"><span data-ttu-id="43ecc-1831">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1831">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="43ecc-1832">文字列の書式項目を、指定した配列内の対応するオブジェクトの文字列表記に置換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1832">Replaces the format items in a string with the string representations of corresponding objects in a specified array.</span></span> <span data-ttu-id="43ecc-1833">パラメーターにより、カルチャに固有の書式情報が指定されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1833">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1834">書式項目が <paramref name="format" /> の対応するオブジェクトの文字列形式に置換された <paramref name="args" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1834">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="43ecc-1835">このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)の文字列表現に 4 つ以上の式を変換して、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1835">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="43ecc-1836">変換を実行するのには、メソッドは、カルチャの書式設定またはカスタム フォーマッタを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1836">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="43ecc-1837">メソッドでは、それぞれに変換します<xref:System.Object>を呼び出すことによって、文字列形式の引数、 **ToString(IFormatProvider)** メソッドか、書式指定項目がそのを呼び出すことによって、書式指定文字列を含む場合は、オブジェクトの対応する**ToString(String,IFormatProvider)** メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1837">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="43ecc-1838">これらのメソッドが存在しない場合は呼び出し、オブジェクトのパラメーターのない**ToString**メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1838">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
  
## <a name="example-culture-sensitive-formatting"></a><span data-ttu-id="43ecc-1839">例: カルチャに依存した書式指定</span><span class="sxs-lookup"><span data-stu-id="43ecc-1839">Example: Culture-sensitive formatting</span></span>  
 <span data-ttu-id="43ecc-1840">この例では、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>メソッドを複数の異なるカルチャを使用して、いくつかの日付と時刻の値および数値の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1840">This example uses the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method to display the string representation of some date and time values and numeric values by using several different cultures.</span></span>  
  
 [!code-csharp-interactive[System.String.Format2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example2.cs#2)]
 [!code-vb[System.String.Format2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example2.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1841"><paramref name="format" /> または <paramref name="args" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1841"><paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="43ecc-1842"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1842"><paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="43ecc-1843">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1843">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1844">書式項目のインデックスが 0 未満か、<paramref name="args" /> 配列の長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1844">The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span></span></exception>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.ICustomFormatter" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="43ecc-1845">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1845">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="43ecc-1846">1 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1846">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="43ecc-1847">2 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1847">The second object to format.</span></span></param>
        <summary><span data-ttu-id="43ecc-1848">文字列の書式項目を、指定した 2 つのオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1848">Replaces the format items in a string with the string representation of two specified objects.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1849">書式項目が <paramref name="format" /> と <paramref name="arg0" /> の文字列形式に置換された <paramref name="arg1" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1849">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="43ecc-1850">このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)2 つの式の値をそれぞれの文字列表現に変換して、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1850">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of two expressions to their string representations and to embed those representations in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-two-arguments"></a><span data-ttu-id="43ecc-1851">例: 2 つの引数の書式設定</span><span class="sxs-lookup"><span data-stu-id="43ecc-1851">Example: Formatting two arguments</span></span>  
 
 <span data-ttu-id="43ecc-1852">この例では、<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29>ジェネリック型に格納されている時刻と温度のデータを表示するメソッドを<xref:System.Collections.Generic.Dictionary%602>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1852">This example uses the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> method to display time and temperature data stored in a generic <xref:System.Collections.Generic.Dictionary%602> object.</span></span> <span data-ttu-id="43ecc-1853">書式設定する 2 つのオブジェクトが書式指定文字列が次の 3 つの書式項目を持つことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1853">Note that the format string has three format items, although there are only two objects to format.</span></span> <span data-ttu-id="43ecc-1854">これは、(日付と時刻の値) の一覧の最初のオブジェクトが 2 つの書式指定項目によって使用されるため、: 最初書式項目が表示されます、時刻、および 2 番目の日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1854">This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.</span></span>  
  
 [!code-cpp[System.String.Format#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample4.cpp#6)]
 [!code-csharp-interactive[System.String.Format#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatexample4.cs#6)]
 [!code-vb[System.String.Format#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatexample4.vb#6)]  
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1855"><paramref name="format" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1855"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="43ecc-1856"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1856"><paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="43ecc-1857">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1857">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1858">書式項目のインデックスが 0 でも 1 でもありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1858">The index of a format item is not zero or one.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-1859">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1859">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="43ecc-1860">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1860">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="43ecc-1861">1 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1861">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="43ecc-1862">2 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1862">The second object to format.</span></span></param>
        <summary><span data-ttu-id="43ecc-1863">文字列の書式項目を、指定した 2 つのオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1863">Replaces the format items in a string with the string representation of two specified objects.</span></span> <span data-ttu-id="43ecc-1864">パラメーターにより、カルチャに固有の書式情報が指定されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1864">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1865">書式項目が <paramref name="format" /> と <paramref name="arg0" /> の文字列形式に置換された <paramref name="arg1" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1865">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="43ecc-1866">このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)2 つの式をそれぞれの文字列表現に変換して、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1866">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert two expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="43ecc-1867">変換を実行するのには、メソッドは、カルチャの書式設定またはカスタム フォーマッタを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1867">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="43ecc-1868">メソッドでは、それぞれに変換します<xref:System.Object>を呼び出すことによって、文字列形式の引数、 **ToString(IFormatProvider)** メソッドか、書式指定項目がそのを呼び出すことによって、書式指定文字列を含む場合は、オブジェクトの対応する**ToString(String,IFormatProvider)** メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1868">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="43ecc-1869">これらのメソッドが存在しない場合は呼び出し、オブジェクトのパラメーターのない**ToString**メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1869">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1870"><paramref name="format" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1870"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="43ecc-1871"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1871"><paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="43ecc-1872">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1872">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1873">書式項目のインデックスが 0 でも 1 でもありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1873">The index of a format item is not zero or one.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="43ecc-1874">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1874">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="43ecc-1875">1 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1875">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="43ecc-1876">2 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1876">The second object to format.</span></span></param>
        <param name="arg2"><span data-ttu-id="43ecc-1877">3 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1877">The third object to format.</span></span></param>
        <summary><span data-ttu-id="43ecc-1878">文字列の書式項目を、指定した 3 つのオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1878">Replaces the format items in a string with the string representation of three specified objects.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1879">書式項目が <paramref name="format" />、<paramref name="arg0" />、および <paramref name="arg1" /> の文字列形式に置換された <paramref name="arg2" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1879">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="43ecc-1880">このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)3 つの式の値をそれぞれの文字列表現に変換して、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1880">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of three expressions to their string representations and to embed those representations in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-three-arguments"></a><span data-ttu-id="43ecc-1881">例: 3 つの引数の書式設定</span><span class="sxs-lookup"><span data-stu-id="43ecc-1881">Example: Formatting three arguments</span></span>  
 
 <span data-ttu-id="43ecc-1882">この例では、<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>ブール値の結果を示す文字列を作成するメソッド`And`2 つの整数値で操作します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1882">This example uses the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to create a string that illustrates the result of a Boolean `And` operation with two integer values.</span></span> <span data-ttu-id="43ecc-1883">各項目が 2 つの方法で書式設定されたため、書式指定文字列には、6 つの書式項目が含まれていますが、メソッドのパラメーター リストの 3 つだけのアイテムに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1883">Note that the format string includes six format items, but the method has only three items in its parameter list, because each item is formatted in two different ways.</span></span>  
  
 [!code-cpp[System.String.Format#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format4.cpp#4)]
 [!code-csharp-interactive[System.String.Format#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format4.cs#4)]
 [!code-vb[System.String.Format#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format4.vb#4)]  
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1884"><paramref name="format" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1884"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="43ecc-1885"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1885"><paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="43ecc-1886">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1886">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1887">書式項目のインデックスが 0 より小さいか、または 2 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1887">The index of a format item is less than zero, or greater than two.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-1888">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1888">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="43ecc-1889">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1889">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="43ecc-1890">1 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1890">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="43ecc-1891">2 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1891">The second object to format.</span></span></param>
        <param name="arg2"><span data-ttu-id="43ecc-1892">3 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1892">The third object to format.</span></span></param>
        <summary><span data-ttu-id="43ecc-1893">文字列の書式項目を、指定した 3 つのオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1893">Replaces the format items in a string with the string representation of three specified objects.</span></span> <span data-ttu-id="43ecc-1894">パラメーターにより、カルチャに固有の書式設定情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1894">An parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1895">書式項目が <paramref name="format" />、<paramref name="arg0" />、および <paramref name="arg1" /> の文字列形式に置換された <paramref name="arg2" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1895">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="43ecc-1896">このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)3 つの式をそれぞれの文字列表現に変換して、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1896">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert three expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="43ecc-1897">変換を実行するのには、メソッドは、カルチャの書式設定またはカスタム フォーマッタを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1897">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="43ecc-1898">メソッドでは、それぞれに変換します<xref:System.Object>を呼び出すことによって、文字列形式の引数、 **ToString(IFormatProvider)** メソッドか、書式指定項目がそのを呼び出すことによって、書式指定文字列を含む場合は、オブジェクトの対応する**ToString(String,IFormatProvider)** メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1898">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="43ecc-1899">これらのメソッドが存在しない場合は呼び出し、オブジェクトのパラメーターのない**ToString**メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1899">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1900"><paramref name="format" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1900"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="43ecc-1901"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1901"><paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="43ecc-1902">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-1902">-or-</span></span>  
  
 <span data-ttu-id="43ecc-1903">書式項目のインデックスが 0 より小さいか、または 2 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1903">The index of a format item is less than zero, or greater than two.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public CharEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CharEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As CharEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CharEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CharEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-1904">この文字列に含まれる個々の文字を反復処理するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1904">Retrieves an object that can iterate through the individual characters in this string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1905">列挙子オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1905">An enumerator object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="43ecc-1906">呼び出し元ではなく、<xref:System.String.GetEnumerator%2A>を取得する方法、<xref:System.CharEnumerator>オブジェクト、文字列の列挙を使用することは、代わりに、言語のイテレーションの構成体を使用する必要があります (C# の場合、C + + CLR、および Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1906">Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).</span></span>                   <span data-ttu-id="43ecc-1907">[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) 、C# の場合は、[ごと](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79)C + +、CLR と[各](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1907">[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#,                  [for each](http://msdn.microsoft.com/library/0c3a364b-2747-43f3-bb8d-b7d3b7023f79) in C++/CLR, and                  [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic).</span></span>  
  
 <span data-ttu-id="43ecc-1908">このメソッドでは、文字列内の個々 の文字を反復処理することができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1908">This method enables you to iterate the individual characters in a string.</span></span> <span data-ttu-id="43ecc-1909">Visual Basic など、`For Each`および c#`foreach`ステートメントを返すには、このメソッドを呼び出す、<xref:System.CharEnumerator>この文字列インスタンスの文字に読み取り専用のアクセスを提供できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1909">For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1910">次の例では、いくつかの文字列内の文字を反復処理し、その個々 の文字に関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1910">The following example iterates the characters in several strings and displays information about their individual characters.</span></span> <span data-ttu-id="43ecc-1911">呼び出しではなく、イテレーションの言語構成要素を使用して、<xref:System.String.GetEnumerator%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1911">It uses the language iteration construct rather than a call to the <xref:System.String.GetEnumerator%2A> method.</span></span>  
  
 [!code-cpp[system.string.getenumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[system.string.getenumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[system.string.getenumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="P:System.String.Chars(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-1912">この文字列のハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1912">Returns the hash code for this string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1913">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1913">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1914">動作<xref:System.String.GetHashCode%2A>はその実装は、共通言語ランタイムの 1 つのバージョン別に異なる可能性がありますに依存します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1914">The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another.</span></span> <span data-ttu-id="43ecc-1915">パフォーマンスを向上させるためには、なぜこのエラーが発生理由<xref:System.String.GetHashCode%2A>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1915">A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="43ecc-1916">2 つの文字列オブジェクトが等しい場合は、<xref:System.String.GetHashCode%2A>メソッドと同じ値を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1916">If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values.</span></span> <span data-ttu-id="43ecc-1917">ただし、一意の文字列値ごとに一意のハッシュ コード値はありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1917">However, there is not a unique hash code value for each unique string value.</span></span> <span data-ttu-id="43ecc-1918">異なる文字列は、同じハッシュ コードを返すことができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1918">Different strings can return the same hash code.</span></span>  
>   
>  <span data-ttu-id="43ecc-1919">ハッシュ コード自体は、安定しているは保証されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1919">The hash code itself is not guaranteed to be stable.</span></span> <span data-ttu-id="43ecc-1920">.NET Framework のバージョンとプラットフォーム (32 ビットおよび 64 ビット) など、.NET Framework の 1 つのバージョンを全体と同じ文字列のハッシュ コードは異なることができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1920">Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework.</span></span> <span data-ttu-id="43ecc-1921">場合によっては、アプリケーション ドメインによっても異なることができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1921">In some cases, they can even differ by application domain.</span></span> <span data-ttu-id="43ecc-1922">つまり、同じプログラムの 2 つの後続の実行が別のハッシュ コードを返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1922">This implies two subsequent runs of the same program may return different hash codes.</span></span>  
>   
>  <span data-ttu-id="43ecc-1923">その結果、ハッシュが作成された、アプリケーション ドメインの外部のコードを使用しないで、コレクション内のキー フィールドとして使用する必要がありますしないと、永続化することはありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1923">As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.</span></span>  
>   
>  <span data-ttu-id="43ecc-1924">暗号強度が高いハッシュする必要がある場合は、暗号ハッシュ関数によって返される値ではなく、ハッシュ コードが最後に、使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1924">Finally, don't use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="43ecc-1925">暗号法のハッシュから派生するクラスを使用して、<xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType>または<xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1925">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>  
>   
>  <span data-ttu-id="43ecc-1926">ハッシュ コードの詳細については、次を参照してください。<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1926">For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="43ecc-1927">デスクトップ アプリで使用することができます、 [ \<UseRandomizedStringHashAlgorithm > 要素](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)に一意のハッシュ コードを生成する、アプリケーション ドメインごとです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1927">In desktop apps, you can use the             [\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) to generate unique hash codes on a per application domain basis.</span></span> <span data-ttu-id="43ecc-1928">競合の数を減らしてでき挿入とハッシュ テーブルを使用する参照の全体的なパフォーマンスを向上できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1928">This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</span></span> <span data-ttu-id="43ecc-1929">次の例を使用する方法を示しています、 [ \<UseRandomizedStringHashAlgorithm > 要素](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1929">The following example shows how to use the                [\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md).</span></span> <span data-ttu-id="43ecc-1930">定義するの一意のハッシュ コードを生成する、アプリケーション ドメインごとです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1930">It defines a  to generate unique hash codes on a per application domain basis.</span></span> <span data-ttu-id="43ecc-1931">競合の数を減らしてでき挿入とハッシュ テーブルを使用する参照の全体的なパフォーマンスを向上できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1931">This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</span></span> <span data-ttu-id="43ecc-1932">次の例を使用する方法を示しています、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1932">The following example shows how to use the .</span></span> <span data-ttu-id="43ecc-1933">定義する、`DisplayString`をあるプライベート文字列定数を含むクラス`s`値は「は文字列です」。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1933">It defines a `DisplayString` class that includes a private string constant, `s`, whose value is "This is a string."</span></span> <span data-ttu-id="43ecc-1934">また、メソッドを実行しているアプリケーション ドメインの名前と共に文字列値とハッシュ コードを表示する `ShowStringHashCode` メソッドも含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1934">It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing.</span></span>  
  
 [!code-csharp[System.String.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)]
 [!code-vb[System.String.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)]  
  
 <span data-ttu-id="43ecc-1935">構成ファイルを指定せずにこの例を実行すると、次のような出力が表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1935">When you run the example without supplying a configuration file, it displays output similar to the following.</span></span> <span data-ttu-id="43ecc-1936">文字列のハッシュ コードが 2 つアプリケーション ドメインで同じであることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1936">Note that the hash codes for the string are identical in the two application domains.</span></span>  
  
```  
  
String 'This is a string.' in domain 'PerDomain.exe': 941BCEAC  
String 'This is a string.' in domain 'NewDomain': 941BCEAC  
  
```  
  
 <span data-ttu-id="43ecc-1937">ただし、例のディレクトリに次の構成ファイルを追加して例を実行すると、同じ文字列のハッシュ コードがアプリケーション ドメインによって異なります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1937">However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.</span></span>  
  
```  
  
<?xml version ="1.0"?>  
<configuration>  
   <runtime>  
      <UseRandomizedStringHashAlgorithm enabled="1" />  
   </runtime>  
</configuration>  
  
```  
  
 <span data-ttu-id="43ecc-1938">構成ファイルが存在する場合、次の出力が表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1938">When the configuration file is present, the example displays the following output:</span></span>  
  
```  
  
String 'This is a string.' in domain 'PerDomain.exe': 5435776D  
String 'This is a string.' in domain 'NewDomain': 75CC8236  
  
```  
  
> [!IMPORTANT]
>  <span data-ttu-id="43ecc-1939">ハッシュ コードは、挿入し、ハッシュ テーブルのキー付きのオブジェクトを効率的に取得に使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1939">Hash codes are used to insert and retrieve keyed objects from hash tables efficiently.</span></span> <span data-ttu-id="43ecc-1940">ただし、ハッシュ コードは、文字列を一意に識別しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1940">However, hash codes don't uniquely identify strings.</span></span> <span data-ttu-id="43ecc-1941">同一の文字列と同じハッシュ コードが共通言語ランタイムが別の文字列に同じハッシュ コードを割り当てることもできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1941">Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings.</span></span> <span data-ttu-id="43ecc-1942">さらに、ハッシュ コードでは、.NET Framework のバージョン、1 つのバージョンでプラットフォームおよびアプリケーション ドメインを変更できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1942">In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain.</span></span> <span data-ttu-id="43ecc-1943">このため、シリアル化またはハッシュ コード値を保持する必要がありますいないもする必要があります使用すること、ハッシュ テーブルまたはディクショナリのキーとして。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1943">Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.</span></span>  
  
 <span data-ttu-id="43ecc-1944">ハッシュ コードの使用に関する追加情報と`GetHashCode`メソッドを参照してください<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1944">For additional information about the use of hash codes and the `GetHashCode` method, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1945">次の例で、<xref:System.String.GetHashCode%2A>を使用してさまざまなメソッドは、文字列を入力します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1945">The following example demonstrates the <xref:System.String.GetHashCode%2A> method using various input strings.</span></span>  
  
 [!code-cpp[system.string.gethashcode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetHashCode/CPP/gethashcode.cpp#1)]
 [!code-csharp[system.string.gethashcode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/gethashcode.cs#1)]
 [!code-vb[system.string.gethashcode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/gethashcode.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1946">によって返される値<see cref="M:System.String.GetHashCode" />プラットフォームに依存します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1946">The value returned by <see cref="M:System.String.GetHashCode" /> is platform-dependent.</span></span> <span data-ttu-id="43ecc-1947">.NET Framework の 32 ビットおよび 64 ビット バージョンでは異なります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1947">It differs on the 32-bit and 64-bit versions of the .NET Framework.</span></span> <span data-ttu-id="43ecc-1948">.NET Framework のバージョン間で異なることもできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1948">It also can differ between versions of the .NET Framework.</span></span></para>
        </block>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHashCode(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-1949"><see cref="T:System.TypeCode" /> クラスには <see cref="T:System.String" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1949">Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1950">列挙型定数 <see cref="F:System.TypeCode.String" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1950">The enumerated constant, <see cref="F:System.TypeCode.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="43ecc-1951">次の例を表示、<xref:System.TypeCode>に対して列挙定数、<xref:System.String>型です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1951">The following example displays the <xref:System.TypeCode> enumerated constant for the <xref:System.String> type.</span></span>  
  
 [!code-cpp[string.gettypecode#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.gettypecode/CPP/gtc.cpp#1)]
 [!code-csharp[string.gettypecode#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.gettypecode/CS/gtc.cs#1)]
 [!code-vb[string.gettypecode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.gettypecode/VB/gtc.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-1952">このインスタンス内で最初に出現する指定 Unicode 文字または文字列の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1952">Reports the zero-based index of the first occurrence of a specified Unicode character or string within this instance.</span></span> <span data-ttu-id="43ecc-1953">このインスタンス内で文字または文字列が見つからない場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1953">The method returns -1 if the character or string is not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1954">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1954">A Unicode character to seek.</span></span></param>
        <summary><span data-ttu-id="43ecc-1955">指定した Unicode 文字がこの文字列内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1955">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1956">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1956">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1957">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1957">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="43ecc-1958">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1958">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-1959">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1959">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1960">次の例では、検索する方法を示しています、<xref:System.String>文字を使用するため、<xref:System.String.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1960">The following example demonstrates how you can search a <xref:System.String> for a character using the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[System.String.IndexOf#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexof_c.cpp#5)]
 [!code-csharp[System.String.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexof_c.cs#5)]
 [!code-vb[System.String.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexof_c.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1961">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1961">The string to seek.</span></span></param>
        <summary><span data-ttu-id="43ecc-1962">指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1962">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1963">その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1963">The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="43ecc-1964"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1964">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1965">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1965">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="43ecc-1966">このメソッドは、単語 (大文字小文字を区別やカルチャ) を現在のカルチャを使用して検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1966">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="43ecc-1967">検索は、このインスタンスの最初の文字位置から開始され、最後の文字位置まで継続されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1967">The search begins at the first character position of this instance and continues until the last character position.</span></span>  
  
 <span data-ttu-id="43ecc-1968">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1968">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-1969">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1969">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-1970">場合`value`1 つまたは複数の無視できる文字のみで構成されて、<xref:System.String.IndexOf%28System.String%29>メソッドは常に現在のインスタンスの先頭に一致が見つかったことを示すために 0 (ゼロ) を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1970">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%29> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span> <span data-ttu-id="43ecc-1971">次の例で、<xref:System.String.IndexOf%28System.String%29>を 2 つの文字列 (ソフト ハイフン (U +0 00AD)、"n"で後にソフト ハイフンおよびにソフト ハイフンの後に"m") の 3 つの部分文字列を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1971">In the following example, the <xref:System.String.IndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="43ecc-1972">文字列の 1 つのみにソフト ハイフンが含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1972">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="43ecc-1973">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]後で、各ケースではソフト ハイフンに無視できる文字であるため、結果は、場合と同じにソフト ハイフンが含まれていない必要があるか`value`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1973">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="43ecc-1974">ソフト ハイフンのみを検索するときに、このメソッドは、文字列の先頭に一致するものを発見したを示すために 0 (ゼロ) を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1974">When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.</span></span>  
  
 [!code-csharp[System.String.IndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)]
 [!code-vb[System.String.IndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1975">次の例は、「動物」で"n"を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1975">The following example searches for the "n" in "animal".</span></span> <span data-ttu-id="43ecc-1976">文字列のインデックスは、1 つではなく、0 から始まるため、<xref:System.String.IndexOf%28System.String%29>メソッドでは、"n"が、位置 1 ことを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1976">Because string indexes begin at zero rather than one, the <xref:System.String.IndexOf%28System.String%29> method indicates that the "n" is at position 1.</span></span>  
  
 [!code-cpp[System.String.IndexOf#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/simple1.cpp#12)]
 [!code-csharp[System.String.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/simple1.cs#12)]
 [!code-vb[System.String.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/simple1.vb#12)]  
  
 <span data-ttu-id="43ecc-1977">次の例では、<xref:System.String.IndexOf%2A>文で動物名の開始位置を決定するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1977">The following example uses the <xref:System.String.IndexOf%2A> method to determine the starting position of an animal name in a sentence.</span></span> <span data-ttu-id="43ecc-1978">この位置を使用して、文に動物を説明する形容詞を挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1978">It then uses this position to insert an adjective that describes the animal into the sentence.</span></span>  
  
 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-1979"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1979"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-1980">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列比較メソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1980">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-1981">文字列インスタンス内の部分文字列の最初のインデックスを検索するには、現在のカルチャの比較規則を使用して、呼び出して、<see cref="M:System.String.IndexOf(System.String,System.StringComparison)" />の値を持つメソッド オーバー ロード<see cref="F:System.StringComparison.CurrentCulture" />の`comparisonType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1981">To find the first index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1982">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1982">A Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-1983">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1983">The search starting position.</span></span></param>
        <summary><span data-ttu-id="43ecc-1984">指定した Unicode 文字がこの文字列内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1984">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span> <span data-ttu-id="43ecc-1985">検索は、指定した文字位置から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1985">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1986">その文字が見つかった場合は、文字列の先頭からの、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1986">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-1987">インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1987">Index numbering starts from 0.</span></span> <span data-ttu-id="43ecc-1988">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1988">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="43ecc-1989">場合`startIndex`文字列インスタンスの長さと等しい、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1989">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="43ecc-1990">検索の範囲`startIndex`文字列の末尾にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1990">The search ranges from `startIndex` to the end of the string.</span></span>  
  
 <span data-ttu-id="43ecc-1991">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1991">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-1992">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1992">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-1993">次の例で、<xref:System.String.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1993">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[string.indexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof1/CPP/ixof1.cpp#1)]
 [!code-csharp[string.indexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof1/CS/ixof1.cs#1)]
 [!code-vb[string.indexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof1/VB/ixof1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-1994"><paramref name="startIndex" /> が 0 (ゼロ) 未満か、文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1994"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-1995">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1995">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-1996">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1996">The search starting position.</span></span></param>
        <summary><span data-ttu-id="43ecc-1997">指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1997">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span> <span data-ttu-id="43ecc-1998">検索は、指定した文字位置から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1998">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="43ecc-1999">その文字列が見つかった場合は、現在のインスタンスの先頭からの、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-1999">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="43ecc-2000"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2000">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2001">インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2001">Index numbering starts from 0.</span></span> <span data-ttu-id="43ecc-2002">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2002">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="43ecc-2003">場合`startIndex`文字列インスタンスの長さと等しい、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2003">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="43ecc-2004">このメソッドは、単語 (大文字小文字を区別やカルチャ) を現在のカルチャを使用して検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2004">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="43ecc-2005">検索を開始、`startIndex`のこのインスタンスの位置の文字し、最後の文字位置まで継続されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2005">The search begins at the `startIndex` character position of this instance and continues until the last character position.</span></span>  
  
 <span data-ttu-id="43ecc-2006">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2006">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2007">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2007">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2008">場合`value`1 つまたは複数の無視できる文字のみで構成されて、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29>メソッドは常に返します`startIndex`、これは、検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2008">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="43ecc-2009">次の例で、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29>で 2 つの文字列に"m"の後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2009">In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in two strings.</span></span> <span data-ttu-id="43ecc-2010">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2010">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="43ecc-2011">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]または後で、どちらの場合はソフト ハイフンに無視できる文字であるため、メソッドを返します、文字列に"m"のインデックス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2011">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string.</span></span> <span data-ttu-id="43ecc-2012">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2012">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.IndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)]
 [!code-vb[System.String.IndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2013">次の例は、対象の文字列内で指定した文字列のすべての項目を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2013">The following example searches for all occurrences of a specified string within a target string.</span></span>  
  
 [!code-cpp[stringindexof4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringindexof4/CPP/stringindexof4.cpp#1)]
 [!code-csharp[stringindexof4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringindexof4/CS/stringindexof4.cs#1)]
 [!code-vb[stringindexof4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringindexof4/VB/stringindexof4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2014"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2014"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2015"><paramref name="startIndex" /> が 0 (ゼロ) 未満か、この文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2015"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2016">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列比較メソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2016">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-2017">特定の文字位置の後に発生する部分文字列の最初のインデックスを検索するには、現在のカルチャの比較規則を使用して、呼び出して、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />の値を持つメソッド オーバー ロード<see cref="F:System.StringComparison.CurrentCulture" />の`comparisonType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2017">To find the first index of a substring that occurs after a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2018">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2018">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-2019">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2019">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="43ecc-2020">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2020">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="43ecc-2021">指定した文字列に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2021">A parameter specifies the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2022">その文字列が見つかった場合は、<paramref name="value" /> パラメーターのインデックス位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2022">The index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="43ecc-2023"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2023">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2024">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2024">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="43ecc-2025">`comparisonType`を検索するパラメーターを指定します、`value`パラメーター現在またはインバリアント カルチャを使用して、または区別しない検索を使用して、word または序数比較規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2025">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2026">次の exampledemonstrates 3 つのオーバー ロードが、<xref:System.String.IndexOf%2A>メソッドの異なる値を使用して別の文字列内の文字列の最初の出現箇所を<xref:System.StringComparison>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2026">The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2027"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2027"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-2028"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2028"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2029">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2029">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2030">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2030">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2031">場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.String.IndexOf(System.String,System.StringComparison)" />メソッドは常に現在のインスタンスの先頭に一致が見つかったことを示すために 0 (ゼロ) を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2031">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span>  
  
 <span data-ttu-id="43ecc-2032">次の例で、<see cref="M:System.String.IndexOf(System.String,System.StringComparison)" />を 2 つの文字列 (ソフト ハイフン (U +0 00AD)、"n"で後にソフト ハイフンおよびにソフト ハイフンの後に"m") の 3 つの部分文字列を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2032">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="43ecc-2033">文字列の 1 つのみにソフト ハイフンが含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2033">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="43ecc-2034">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]またはその後、ソフト ハイフンは無視できる文字であるため、カルチャに依存した検索を返しますと同じ値に検索文字列にソフト ハイフンが含まれていないかどうかには返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2034">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</span></span> <span data-ttu-id="43ecc-2035">ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2035">An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</span></span>  
  
 [!code-csharp[System.String.IndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable26.cs#26)]
 [!code-vb[System.String.IndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable26.vb#26)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2036">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2036">A Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2037">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2037">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2038">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2038">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="43ecc-2039">指定文字がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2039">Reports the zero-based index of the first occurrence of the specified character in this instance.</span></span> <span data-ttu-id="43ecc-2040">検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2040">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2041">その文字が見つかった場合は、文字列の先頭からの、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2041">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2042">検索を開始`startIndex`され、引き続き`startIndex`  +  `count` -1 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2042">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="43ecc-2043">ある文字`startIndex`  +  `count`検索には含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2043">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="43ecc-2044">インデックス番号は 0 (ゼロ) から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2044">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="43ecc-2045">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2045">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="43ecc-2046">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2046">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-2047">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2047">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2048">次の例で、<xref:System.String.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2048">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[system.string.indexof#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexofcii.cpp#1)]
 [!code-csharp[system.string.indexof#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexofcii.cs#1)]
 [!code-vb[system.string.indexof#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexofcii.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2049"><paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2049"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2050">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2050">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2051"><paramref name="startIndex" /> がこの文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2051"><paramref name="startIndex" /> is greater than the length of this string.</span></span>  
  
 <span data-ttu-id="43ecc-2052">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2052">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2053"><paramref name="count" /> がこの文字列の長さ - <paramref name="startIndex" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2053"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2054">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2054">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2055">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2055">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2056">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2056">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="43ecc-2057">指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2057">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span> <span data-ttu-id="43ecc-2058">検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2058">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2059">その文字列が見つかった場合は、現在のインスタンスの先頭からの、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2059">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="43ecc-2060"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2060">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2061">インデックス番号は 0 (ゼロ) から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2061">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="43ecc-2062">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2062">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="43ecc-2063">このメソッドは、単語 (大文字小文字を区別やカルチャ) を現在のカルチャを使用して検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2063">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="43ecc-2064">検索を開始`startIndex`され、引き続き`startIndex`  +  `count` -1 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2064">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="43ecc-2065">ある文字`startIndex`  +  `count`検索には含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2065">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="43ecc-2066">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2066">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2067">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2067">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2068">場合`value`1 つまたは複数の無視できる文字のみで構成されて、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドは常に返します`startIndex`、これは、検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2068">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="43ecc-2069">次の例で、 <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> "m"の 3 番目の 2 つの文字列の 6 番目の文字位置からの起動後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2069">In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="43ecc-2070">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2070">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="43ecc-2071">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]後で、どちらの場合はソフト ハイフンに無視できる文字であるため、メソッドのインデックスを返します、文字列に"m"カルチャに依存した比較を実行するときまたはします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2071">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2072">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2072">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.IndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)]
 [!code-vb[System.String.IndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2073">次の例は、文字列のすべての出現箇所のインデックスを検索"he"別の文字列の部分文字列にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2073">The following example finds the index of all occurrences of the string "he" within a substring of another string.</span></span> <span data-ttu-id="43ecc-2074">検索を繰り返すごとに検索する文字数を再計算する必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2074">Note that the number of characters to be searched must be recalculated for each search iteration.</span></span>  
  
 [!code-cpp[string.indexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof8/CPP/ixof8.cpp#1)]
 [!code-csharp[string.indexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof8/CS/ixof8.cs#1)]
 [!code-vb[string.indexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof8/VB/ixof8.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2075"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2075"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2076"><paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2076"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2077">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2077">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2078"><paramref name="startIndex" /> がこの文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2078"><paramref name="startIndex" /> is greater than the length of this string.</span></span>  
  
 <span data-ttu-id="43ecc-2079">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2079">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2080"><paramref name="count" /> がこの文字列の長さ - <paramref name="startIndex" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2080"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2081">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列比較メソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2081">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-2082">現在のカルチャの比較規則を使用して、この操作を実行する、呼び出し、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />の値を持つメソッド オーバー ロード<see cref="F:System.StringComparison.CurrentCulture" />の`comparisonType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2082">To use the comparison rules of the current culture to perform this operation, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2083">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2083">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2084">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2084">The search starting position.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-2085">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2085">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="43ecc-2086">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2086">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="43ecc-2087">現在の文字列内での検索の開始位置、および指定した文字列に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2087">Parameters specify the starting search position in the current string and the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2088">その文字列が見つかった場合は、現在のインスタンスの先頭からの、<paramref name="value" /> パラメーターの 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2088">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="43ecc-2089"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2089">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2090">インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2090">Index numbering starts from 0.</span></span> <span data-ttu-id="43ecc-2091">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2091">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="43ecc-2092">場合`startIndex`文字列インスタンスの長さと等しい、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2092">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="43ecc-2093">`comparisonType`を検索するパラメーターを指定します、`value`パラメーター現在またはインバリアント カルチャを使用して、または区別しない検索を使用して、word または序数比較規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2093">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2094">次の exampledemonstrates 3 つのオーバー ロードが、<xref:System.String.IndexOf%2A>メソッドの異なる値を使用して別の文字列内の文字列の最初の出現箇所を<xref:System.StringComparison>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2094">The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2095"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2095"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2096"><paramref name="startIndex" /> が 0 (ゼロ) 未満か、この文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2096"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-2097"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2097"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2098">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2098">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2099">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2099">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2100">場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2100">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>  
  
 <span data-ttu-id="43ecc-2101">次の例で、 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> "m"2 つの文字列の 3 番目の文字位置から開始後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2101">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting with the third character position in two strings.</span></span> <span data-ttu-id="43ecc-2102">文字列の 1 つのみには、必要な部分が含まれています。この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]後で、どちらの場合はソフト ハイフンに無視できる文字であるため、メソッドのインデックスを返します、文字列に"m"カルチャに依存した比較を実行するときまたはします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2102">Only one of the strings contains the required substring.If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2103">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2103">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span> <span data-ttu-id="43ecc-2104">このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2104">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.IndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable25.cs#25)]
 [!code-vb[System.String.IndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable25.vb#25)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2105">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2105">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2106">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2106">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2107">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2107">The number of character positions to examine.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-2108">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2108">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="43ecc-2109">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2109">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="43ecc-2110">現在の文字列での検索開始位置、現在の文字列で検索する文字の数、および指定した文字列に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2110">Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2111">その文字列が見つかった場合は、現在のインスタンスの先頭からの、<paramref name="value" /> パラメーターの 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2111">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="43ecc-2112"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2112">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2113">インデックス番号は 0 (ゼロ) から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2113">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="43ecc-2114">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2114">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="43ecc-2115">検索を開始`startIndex`され、引き続き`startIndex`  +  `count` -1 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2115">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="43ecc-2116">ある文字`startIndex`  +  `count`検索には含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2116">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="43ecc-2117">`comparisonType`を検索するパラメーターを指定します、`value`パラメーター現在またはインバリアント カルチャを使用して、または区別しない検索を使用して、word または序数比較規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2117">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2118">次の exampledemonstrates 3 つのオーバー ロードが、<xref:System.String.IndexOf%2A>メソッドの異なる値を使用して別の文字列内の文字列の最初の出現箇所を<xref:System.StringComparison>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2118">The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2119"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2119"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2120"><paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2120"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2121">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2121">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2122"><paramref name="startIndex" /> がこのインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2122"><paramref name="startIndex" /> is greater than the length of this instance.</span></span>  
  
 <span data-ttu-id="43ecc-2123">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2123">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2124"><paramref name="count" /> がこの文字列の長さ - <paramref name="startIndex" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2124"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-2125"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2125"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2126">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2126">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2127">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2127">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2128">場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2128">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>  
  
 <span data-ttu-id="43ecc-2129">次の例で、 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> "m"の 3 番目の 2 つの文字列の 6 番目の文字位置からの起動後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2129">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="43ecc-2130">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2130">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="43ecc-2131">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]後で、どちらの場合はソフト ハイフンに無視できる文字であるため、メソッドのインデックスを返します、文字列に"m"カルチャに依存した比較を実行するときまたはします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2131">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2132">序数に基づく比較を実行するときにただし、その部分文字列のみで検索最初の文字列します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2132">When it performs an ordinal comparison, however, it finds the substring only in the first string.</span></span> <span data-ttu-id="43ecc-2133">で、"m"の後にソフト ハイフンが含まれている最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すが失敗したが、代わりに、カルチャに依存した比較を実行するときに"m"のインデックスを返しますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2133">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2134">このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2134">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.IndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable24.cs#24)]
 [!code-vb[System.String.IndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable24.vb#24)]</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2135">Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置のインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2135">Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="43ecc-2136">このインスタンス内で配列内の文字が見つからない場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2136">The method returns -1 if the characters in the array are not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="43ecc-2137">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2137">A Unicode character array containing one or more characters to seek.</span></span></param>
        <summary><span data-ttu-id="43ecc-2138">Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2138">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2139"><paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2139">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2140">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2140">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="43ecc-2141">検索`anyOf`小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2141">The search for `anyOf` is case-sensitive.</span></span> <span data-ttu-id="43ecc-2142">場合`anyOf`メソッド検索文字列の先頭に一致するものが、空の配列 (つまり、インデックス 0) です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2142">If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).</span></span>  
  
 <span data-ttu-id="43ecc-2143">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2143">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-2144">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2144">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2145">次の例は、文字列内の最初の母音を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2145">The following example finds the first vowel in a string.</span></span>  
  
 [!code-csharp[System.String.IndexOfAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.IndexOfAny/cs/IndexOfAny1.cs#1)]
 [!code-vb[System.String.IndexOfAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.IndexOfAny/vb/IndexOfAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2146"><paramref name="anyOf" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2146"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="43ecc-2147">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2147">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2148">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2148">The search starting position.</span></span></param>
        <summary><span data-ttu-id="43ecc-2149">Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2149">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="43ecc-2150">検索は、指定した文字位置から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2150">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2151"><paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2151">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2152">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2152">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2153">`startIndex`パラメーター範囲は 0 ~ 1 文字列インスタンスの長さよりも小さい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2153">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>  
  
 <span data-ttu-id="43ecc-2154">検索の範囲`startIndex`文字列の末尾にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2154">The search ranges from `startIndex` to the end of the string.</span></span>  
  
 <span data-ttu-id="43ecc-2155">検索`anyOf`小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2155">The search for `anyOf` is case-sensitive.</span></span>  
  
 <span data-ttu-id="43ecc-2156">このメソッドは、ここで、文字と見なされます別の文字に相当その Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2156">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="43ecc-2157">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2157">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2158">次の例では、別の文字列の部分文字列に、"is"を文字列の任意の文字に見つかった位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2158">The following example finds the index of the occurrence of any character of the string "is" within a substring of another string.</span></span>  
  
 [!code-cpp[string.indexofany2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany2/CPP/ixany2.cpp#1)]
 [!code-csharp[string.indexofany2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany2/CS/ixany2.cs#1)]
 [!code-vb[string.indexofany2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany2/VB/ixany2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2159"><paramref name="anyOf" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2159"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2160"><paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2160"><paramref name="startIndex" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2161">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2161">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2162"><paramref name="startIndex" /> が、このインスタンスの文字数を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2162"><paramref name="startIndex" /> is greater than the number of characters in this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="43ecc-2163">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2163">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2164">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2164">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2165">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2165">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="43ecc-2166">Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2166">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="43ecc-2167">検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2167">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2168"><paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2168">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2169">検索を開始`startIndex`され、引き続き`startIndex`  +  `count` -1 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2169">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="43ecc-2170">ある文字`startIndex`  +  `count`検索には含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2170">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="43ecc-2171">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2171">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2172">`startIndex`パラメーター範囲は 0 ~ 1 文字列インスタンスの長さよりも小さい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2172">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>  
  
 <span data-ttu-id="43ecc-2173">検索`anyOf`小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2173">The search for `anyOf` is case-sensitive.</span></span>  
  
 <span data-ttu-id="43ecc-2174">このメソッドは、ここで、文字と見なされます別の文字に相当その Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2174">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="43ecc-2175">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2175">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2176">次の例では、別の文字列の部分文字列内で任意の文字の文字列「補助」に見つかった位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2176">The following example finds the index of the occurrence of any character of the string "aid" within a substring of another string.</span></span>  
  
 [!code-cpp[string.indexofany3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany3/CPP/ixany3.cpp#1)]
 [!code-csharp[string.indexofany3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany3/CS/ixany3.cs#1)]
 [!code-vb[string.indexofany3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany3/VB/ixany3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2177"><paramref name="anyOf" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2177"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2178"><paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2178"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2179">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2179">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2180"><paramref name="count" /> + <paramref name="startIndex" /> が、このインスタンス中の文字数を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2180"><paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public string Insert (int startIndex, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Insert(int32 startIndex, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (startIndex As Integer, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Insert(int startIndex, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="43ecc-2181">挿入した箇所で 0 から始まるインデックス位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2181">The zero-based index position of the insertion.</span></span></param>
        <param name="value"><span data-ttu-id="43ecc-2182">挿入する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2182">The string to insert.</span></span></param>
        <summary><span data-ttu-id="43ecc-2183">このインスタンス内の指定したインデックス位置に指定した文字列を挿入した、新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2183">Returns a new string in which a specified string is inserted at a specified index position in this instance.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2184">このインスタンスと等価で、<paramref name="value" /> の位置に <paramref name="startIndex" /> が挿入された新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2184">A new string that is equivalent to this instance, but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2185">場合`startIndex`がこのインスタンスの長さと等しい`value`がこのインスタンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2185">If `startIndex` is equal to the length of this instance, `value` is appended to the end of this instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2186">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2186">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2187">代わりを新しい文字列を返します`value`が現在のインスタンスに挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2187">Instead, it returns a new string in which `value` is inserted into the current instance.</span></span>  
  
 <span data-ttu-id="43ecc-2188">戻り値など、 `"abc".Insert(2, "XYZ")` "abXYZc"がします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2188">For example, the return value of `"abc".Insert(2, "XYZ")` is "abXYZc".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2189">次の例では、4 番目の文字の位置 (インデックス 3 文字) 文字列に空白文字を挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2189">The following example inserts a space character in the fourth character position (the character at index 3) of a string.</span></span>  
  
 [!code-csharp[System.String.Insert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Insert/cs/Insert1.cs#1)]
 [!code-vb[System.String.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Insert/vb/Insert1.vb#1)]  
  
 <span data-ttu-id="43ecc-2190">次のコンソール アプリケーションでは、次の 2 つの動物を記述する 1 つまたは複数の形容詞を入力するように求められます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2190">The following console application prompts the users to enter one or more adjectives to describe two animals.</span></span> <span data-ttu-id="43ecc-2191">呼び出して、<xref:System.String.Insert%2A>を文字列に、ユーザーが入力したテキストを挿入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2191">It then calls the <xref:System.String.Insert%2A> method to insert the text entered by the user into a string.</span></span>  
  
 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2192"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2192"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2193"><paramref name="startIndex" /> が負か、またはこのインスタンスの長さより大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2193"><paramref name="startIndex" /> is negative or greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Intern">
      <MemberSignature Language="C#" Value="public static string Intern (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Intern(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Intern(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Intern (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Intern(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="43ecc-2194">インターン プールから検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2194">A string to search for in the intern pool.</span></span></param>
        <summary><span data-ttu-id="43ecc-2195">指定した <see cref="T:System.String" /> へのシステム参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2195">Retrieves the system's reference to the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2196"><paramref name="str" /> がインターン プールに存在する場合は、それに対するシステム参照。それ以外の場合は、値が <paramref name="str" /> の文字列への新しい参照。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2196">The system's reference to <paramref name="str" />, if it is interned; otherwise, a new reference to a string with the value of <paramref name="str" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2197">共通言語ランタイムは、それぞれ一意のリテラル文字列宣言またはプログラムによって作成された、プログラムで 1 つの参照を含むインターン プールと呼ばれる、テーブルを維持することで文字列ストレージを節約できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2197">The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program.</span></span> <span data-ttu-id="43ecc-2198">その結果、特定の値を持つリテラル文字列のインスタンスのみ 1 回、システムに存在します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2198">Consequently, an instance of a literal string with a particular value only exists once in the system.</span></span>  
  
 <span data-ttu-id="43ecc-2199">など、いくつかの変数に同じリテラル文字列を割り当てる場合、ランタイムは、同じへの参照、リテラル文字列インターン プールからを取得し、各変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2199">For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.</span></span>  
  
 <span data-ttu-id="43ecc-2200"><xref:System.String.Intern%2A>メソッドの値と等しい文字列を検索するインターン プールを使用して`str`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2200">The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`.</span></span> <span data-ttu-id="43ecc-2201">このような文字列が存在する場合のインターン プール内の参照が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2201">If such a string exists, its reference in the intern pool is returned.</span></span> <span data-ttu-id="43ecc-2202">文字列が存在しないかどうかへの参照を`str`その参照が返されますが、インターン プールに追加します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2202">If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned.</span></span>  
  
 <span data-ttu-id="43ecc-2203">次の例では、"MyTest"の値を持つ文字列 s1 既に隔離されている場合、プログラム内のリテラルになっているためです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2203">In the following example, the string s1, which has a value of "MyTest", is already interned because it is a literal in the program.</span></span> <span data-ttu-id="43ecc-2204"><xref:System.Text.StringBuilder?displayProperty=nameWithType>クラスを s1 と同じ値を持つ新しい文字列オブジェクトが生成されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2204">The <xref:System.Text.StringBuilder?displayProperty=nameWithType> class generates a new string object that has the same value as s1.</span></span> <span data-ttu-id="43ecc-2205">その文字列への参照は、s2 に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2205">A reference to that string is assigned to s2.</span></span> <span data-ttu-id="43ecc-2206"><xref:System.String.Intern%2A>メソッド s2 として同じ値を持つ文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2206">The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2.</span></span> <span data-ttu-id="43ecc-2207">このような文字列が存在するため、このメソッドは、s1 に割り当てられているものと同じ参照を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2207">Because such a string exists, the method returns the same reference that is assigned to s1.</span></span> <span data-ttu-id="43ecc-2208">S3 に、その参照を代入しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2208">That reference is then assigned to s3.</span></span> <span data-ttu-id="43ecc-2209">参照 s1 および s2 と比較して等しくない別のオブジェクトを参照しているため同じ文字列を参照しているために、参照 s1 と s3 は等しい比較されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2209">References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.</span></span>  
  
 [!code-csharp[System.String.Intern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs#1)]
 [!code-vb[System.String.Intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb#1)]  
  
 <span data-ttu-id="43ecc-2210">このメソッドは<xref:System.String.IsInterned%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2210">Compare this method to the <xref:System.String.IsInterned%2A> method.</span></span>  
  
## <a name="version-considerations"></a><span data-ttu-id="43ecc-2211">バージョンの考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-2211">Version Considerations</span></span>  
 <span data-ttu-id="43ecc-2212">[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]、<xref:System.String.Intern%2A>メソッドは .NET Framework 1.0 と空の文字列がインターン処理に関して 1.1 では、その動作に戻ります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2212">In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string.</span></span> <span data-ttu-id="43ecc-2213">次の例では、変数`str1`への参照が割り当てられている<xref:System.String.Empty>、し、変数`str2`への参照が割り当てられている<xref:System.String.Empty>呼び出しによって返される、<xref:System.String.Intern%2A>メソッドへの変換した後に、<xref:System.Text.StringBuilder>値があるオブジェクト<xref:System.String.Empty>を文字列にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2213">In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty>, and the variable `str2` is assigned the reference to <xref:System.String.Empty> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty> to a string.</span></span> <span data-ttu-id="43ecc-2214">含まれる参照し、`str1`と`str2`等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2214">Then the references contained in `str1` and `str2` are compared for equality.</span></span>  
  
 [!code-csharp[System.String.Intern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs#2)]
 [!code-vb[System.String.Intern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb#2)]  
  
 <span data-ttu-id="43ecc-2215">[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]、 [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]、および[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]、`str1`と`str2`が等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2215">In the [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)], [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], and [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)], `str1` and `str2` are equal.</span></span> <span data-ttu-id="43ecc-2216">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]と[!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)]、`str1`と`str2`が等しくないです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2216">In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="43ecc-2217">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-2217">Performance Considerations</span></span>  
 <span data-ttu-id="43ecc-2218">メモリの総量を削減しようとしている場合、アプリケーションを割り当てます、ある文字列がインターン処理 2 つの望ましくない副作用に注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2218">If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects.</span></span> <span data-ttu-id="43ecc-2219">最初に、割り当てられたメモリ インターンの<xref:System.String>オブジェクトは可能性がありますするまで解放されません、共通言語ランタイム (CLR) を終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2219">First, the memory allocated for interned <xref:System.String> objects is not likely be released until the common language runtime (CLR) terminates.</span></span> <span data-ttu-id="43ecc-2220">その理由は、インターンへの参照を CLR の<xref:System.String>オブジェクトは、アプリケーションまたはアプリケーション ドメインも後に永続化できる、終了します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2220">The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates.</span></span> <span data-ttu-id="43ecc-2221">第二に、文字列をインターン プールには、文字列を最初作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2221">Second, to intern a string, you must first create the string.</span></span> <span data-ttu-id="43ecc-2222">によって使用されるメモリ、<xref:System.String>オブジェクト必要があります割り当てられたままに、場合でも、メモリのガベージ コレクションは最終的に実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2222">The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.</span></span>  
  
 <span data-ttu-id="43ecc-2223">.NET Framework version 2.0 では、<xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType>列挙体のメンバーです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2223">The .NET Framework version 2.0 introduces the <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType> enumeration member.</span></span> <span data-ttu-id="43ecc-2224"><xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning>メンバーとしてリテラル文字列がインターン処理を必要としないアセンブリをマークします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2224">The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> member marks an assembly as not requiring string-literal interning.</span></span> <span data-ttu-id="43ecc-2225">適用できる<xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning>を使用してアセンブリを<xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2225">You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute.</span></span> <span data-ttu-id="43ecc-2226">また、使用、 [Ngen.exe (ネイティブ イメージ ジェネレーター)](~/docs/framework/tools/ngen-exe-native-image-generator.md)実行時の前にアセンブリをコンパイルする文字列がないモジュール間でインターンされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2226">Also, when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to compile an assembly in advance of run time, strings are not interned across modules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2227">次の例では、新しく作成された文字列かどうかを決定する値に等しい 3 つの文字列で、インターン処理後の文字列が等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2227">The following example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.</span></span>  
  
 [!code-cpp[string.intern#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.intern/CPP/string_intern.cpp#1)]
 [!code-csharp[string.intern#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.intern/CS/string_intern.cs#1)]
 [!code-vb[string.intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.intern/VB/string_intern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2228"><paramref name="str" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2228"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IsInterned(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsInterned">
      <MemberSignature Language="C#" Value="public static string IsInterned (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string IsInterned(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsInterned(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInterned (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ IsInterned(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="43ecc-2229">インターン プールから検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2229">The string to search for in the intern pool.</span></span></param>
        <summary><span data-ttu-id="43ecc-2230">指定した <see cref="T:System.String" /> への参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2230">Retrieves a reference to a specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2231">str が共通言語ランタイムのインターン プール内にある場合は、<paramref name="str" /> への参照。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2231">A reference to <paramref name="str" /> if it is in the common language runtime intern pool; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2232">共通言語ランタイムの一意のインスタンスと同様に、プログラムで宣言されている各一意のリテラル文字列定数の 1 つのインスタンスを含むインターン プールと呼ばれる、テーブルを自動的に維持する<xref:System.String>呼び出すことによってプログラムで追加する、<xref:System.String.Intern%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2232">The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method.</span></span>  
  
 <span data-ttu-id="43ecc-2233">インターン プールには、文字列の記憶域が節約されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2233">The intern pool conserves string storage.</span></span> <span data-ttu-id="43ecc-2234">各変数が参照のいくつかの異なるインスタンスを参照するのではなく、インターン プール内で同じ定数に設定されているいくつかの変数にリテラル文字列定数を割り当てる場合<xref:System.String>同一の値があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2234">If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.</span></span>  
  
 <span data-ttu-id="43ecc-2235">このメソッドを検索`str`インターン プールにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2235">This method looks up `str` in the intern pool.</span></span> <span data-ttu-id="43ecc-2236">場合`str`は既にインターン、そのインスタンスへの参照を返します。 それ以外の場合、`null`が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2236">If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned.</span></span>  
  
 <span data-ttu-id="43ecc-2237">このメソッドは<xref:System.String.Intern%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2237">Compare this method to the <xref:System.String.Intern%2A> method.</span></span>  
  
 <span data-ttu-id="43ecc-2238">このメソッドは、ブール値を返しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2238">This method does not return a Boolean value.</span></span> <span data-ttu-id="43ecc-2239">特定の文字列がインターン プールに存在するかどうかを示すブール値にするために、メソッドを呼び出す場合は、次のようなコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2239">If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.</span></span>  
  
 [!code-csharp[System.String.IsInterned#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs#1)]
 [!code-vb[System.String.IsInterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2240">以降、.NET Framework version 2.0 では、オーバーライドできますインターン プールの使用を使用するときに、 [Ngen.exe (ネイティブ イメージ ジェネレーター)](~/docs/framework/tools/ngen-exe-native-image-generator.md)をローカル コンピューター上のネイティブ イメージ キャッシュにアセンブリをインストールします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2240">Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer.</span></span> <span data-ttu-id="43ecc-2241">詳細については、パフォーマンスに関する考慮事項については、「解説」セクションを参照してください、<xref:System.String.Intern%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2241">For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2242">次の例では、リテラル文字列がコンパイラによって自動的にインターンすることを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2242">The following example demonstrates that literal strings are interned automatically by the compiler.</span></span>  
  
 [!code-cpp[string.isinterned#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isinterned/CPP/isin.cpp#1)]
 [!code-csharp[string.isinterned#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isinterned/CS/isin.cs#1)]
 [!code-vb[string.isinterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isinterned/VB/isin.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2243"><paramref name="str" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2243"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Intern(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2244">この文字列が、特定の Unicode 正規形であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2244">Indicates whether this string is in a particular Unicode normalization form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-2245">この文字列が、Unicode 正規形 C であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2245">Indicates whether this string is in Unicode normalization form C.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-2246">この文字列が正規形 C である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2246"><see langword="true" /> if this string is in normalization form C; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2247">一部の Unicode 文字の組み合わせで構成される同等の複数のバイナリ表現があるおよび/または複合の Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2247">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="43ecc-2248">複数の表現の 1 つの文字の存在には、検索、並べ替え、照合、およびその他の操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2248">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="43ecc-2249">Unicode 規格では、文字のバイナリ表現のいずれかを指定すると 1 つのバイナリ表現を返します正規化と呼ばれるプロセスを定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2249">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="43ecc-2250">別の規則に従う、正規化形式と呼ばれる、複数のアルゴリズムでは、正規化を実行できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2250">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="43ecc-2251">.NET Framework では、C、D、KC、および KD 正規化形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2251">The .NET Framework currently supports normalization forms C, D, KC, and KD.</span></span>  
  
 <span data-ttu-id="43ecc-2252">サポートされている Unicode 正規化形式の説明は、次を参照してください。<xref:System.Text.NormalizationForm?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2252">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2253">次の例では、さまざまな正規化フォームへの文字列が正常に正規化されたかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2253">The following example determines whether a string is successfully normalized to various normalization forms.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43ecc-2254">現在のインスタンスに、正しくない Unicode 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2254">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2255"><see cref="Overload:System.String.IsNormalized" />メソッドを返します。<see langword="false" />文字列の最初の正規化されていない文字を検出するとすぐにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2255">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="43ecc-2256">したがって、文字列に無効な Unicode 文字を続けて、正規化されていない文字が含まれている場合、<see cref="Overload:System.String.Normalize" />メソッドがスローされます、<see cref="T:System.ArgumentException" />が<see cref="Overload:System.String.IsNormalized" />を返します<see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2256">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para>
        </block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized(System::Text::NormalizationForm normalizationForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" />
      </Parameters>
      <Docs>
        <param name="normalizationForm"><span data-ttu-id="43ecc-2257">Unicode 正規形。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2257">A Unicode normalization form.</span></span></param>
        <summary><span data-ttu-id="43ecc-2258">この文字列が、指定された Unicode 正規形であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2258">Indicates whether this string is in the specified Unicode normalization form.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-2259">この文字列が <see langword="true" /> パラメーターに指定された正規形である場合は <paramref name="normalizationForm" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2259"><see langword="true" /> if this string is in the normalization form specified by the <paramref name="normalizationForm" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2260">一部の Unicode 文字の組み合わせで構成される同等の複数のバイナリ表現があるおよび/または複合の Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2260">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="43ecc-2261">複数の表現の 1 つの文字の存在には、検索、並べ替え、照合、およびその他の操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2261">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="43ecc-2262">Unicode 規格では、文字のバイナリ表現のいずれかを指定すると 1 つのバイナリ表現を返します正規化と呼ばれるプロセスを定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2262">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="43ecc-2263">別の規則に従う、正規化形式と呼ばれる、複数のアルゴリズムでは、正規化を実行できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2263">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="43ecc-2264">.NET Framework では、C、D、KC、および KD 正規化形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2264">The .NET Framework currently supports normalization forms C, D, KC, and KD.</span></span>  
  
 <span data-ttu-id="43ecc-2265">サポートされている Unicode 正規化形式の説明は、次を参照してください。<xref:System.Text.NormalizationForm?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2265">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2266">次の例で、<xref:System.String.IsNormalized%2A>と<xref:System.String.Normalize%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2266">The following example demonstrates the <xref:System.String.IsNormalized%2A> and <xref:System.String.Normalize%2A> methods.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43ecc-2267">現在のインスタンスに、正しくない Unicode 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2267">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2268"><see cref="Overload:System.String.IsNormalized" />メソッドを返します。<see langword="false" />文字列の最初の正規化されていない文字を検出するとすぐにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2268">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="43ecc-2269">したがって、文字列に無効な Unicode 文字を続けて、正規化されていない文字が含まれている場合、<see cref="Overload:System.String.Normalize" />メソッドがスローされます、<see cref="T:System.ArgumentException" />が<see cref="Overload:System.String.IsNormalized" />を返します<see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2269">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para>
        </block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrEmpty">
      <MemberSignature Language="C#" Value="public static bool IsNullOrEmpty (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrEmpty(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrEmpty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrEmpty (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrEmpty(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2270">テストする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2270">The string to test.</span></span></param>
        <summary><span data-ttu-id="43ecc-2271">指定された文字列が <see langword="null" /> または <see cref="F:System.String.Empty" /> 文字列であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2271">Indicates whether the specified string is <see langword="null" /> or an <see cref="F:System.String.Empty" /> string.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-2272"><paramref name="value" /> パラメーターが <see langword="true" /> または空の文字列 ("") の場合は <see langword="null" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2272"><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or an empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2273"><xref:System.String.IsNullOrEmpty%2A> 便利なメソッドを同時にテストすることができるかどうか、<xref:System.String>は`null`またはその値が<xref:System.String.Empty>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2273"><xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty>.</span></span> <span data-ttu-id="43ecc-2274">これは、次のコードに相当します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2274">It is equivalent to the following code:</span></span>  
  
 [!code-cpp[System.String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)]
 [!code-csharp[System.String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)]
 [!code-vb[System.String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)]  
  
 <span data-ttu-id="43ecc-2275">使用することができます、<xref:System.String.IsNullOrWhiteSpace%2A>文字列があるかどうかをテストするメソッド`null`、その値は<xref:System.String.Empty?displayProperty=nameWithType>の空白文字だけで構成されていますか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2275">You can use the <xref:System.String.IsNullOrWhiteSpace%2A> method to test whether a string is `null`, its value is <xref:System.String.Empty?displayProperty=nameWithType>,  or it consists only of white-space characters.</span></span>  
  
## <a name="what-is-a-null-string"></a><span data-ttu-id="43ecc-2276">Null 文字列とは何ですか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2276">What is a null string?</span></span>  
 <span data-ttu-id="43ecc-2277">文字列は`null`値 (C++ および Visual Basic) 割り当てられていない場合、またはの値が割り当てられて明示的に`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2277">A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of `null`.</span></span> <span data-ttu-id="43ecc-2278">ただし、[複合書式指定](~/docs/standard/base-types/composite-formatting.md)として例を次に、そのメンバーがスローされた場合、いずれかの呼び出しをしようとして機能が、null 文字列を適切に処理、<xref:System.NullReferenceException>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2278">Although the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>.</span></span>  
  
 [!code-cpp[System.String.IsNullOrEmpty#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)]
 [!code-csharp[System.String.IsNullOrEmpty#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)]
 [!code-vb[System.String.IsNullOrEmpty#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)]  
  
## <a name="what-is-an-empty-string"></a><span data-ttu-id="43ecc-2279">空の文字列とは何ですか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2279">What is an empty string?</span></span>  
 <span data-ttu-id="43ecc-2280">文字列が空の文字列が明示的に割り当てられる場合は空 ("") または<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2280">A string is empty if it  is explicitly assigned an empty string ("") or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-2281">空の文字列が、<xref:System.String.Length%2A>は 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2281">An empty string has a <xref:System.String.Length%2A> of 0.</span></span>  <span data-ttu-id="43ecc-2282">次の例では、空の文字列を作成し、その値とその長さを表示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2282">The following example creates an empty string and displays its value and its length.</span></span>  
  
 [!code-cpp[System.String.IsNullOrEmpty#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)]
 [!code-csharp[System.String.IsNullOrEmpty#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)]
 [!code-vb[System.String.IsNullOrEmpty#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2283">次の例は、3 つの文字列を検査し、それぞれの文字列値を持つ、空の文字列、されるかを決定`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2283">The following example examines three strings and determines whether each string has a value, is an empty string, or is `null`.</span></span>  
  
 [!code-cpp[String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isNullOrEmpty/CPP/inoe.cpp#1)]
 [!code-csharp[String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isNullOrEmpty/CS/inoe.cs#1)]
 [!code-vb[String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isNullOrEmpty/VB/inoe.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsNullOrWhiteSpace (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrWhiteSpace(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrWhiteSpace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrWhiteSpace (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrWhiteSpace(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2284">テストする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2284">The string to test.</span></span></param>
        <summary><span data-ttu-id="43ecc-2285">指定された文字列が <see langword="null" /> または空であるか、空白文字だけで構成されているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2285">Indicates whether a specified string is <see langword="null" />, empty, or consists only of white-space characters.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-2286"><see langword="true" /> パラメーターが <paramref name="value" /> または <see langword="null" /> であるか、<see cref="F:System.String.Empty" /> が空白文字だけで構成されている場合は <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2286"><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2287"><xref:System.String.IsNullOrWhiteSpace%2A> 優れたパフォーマンスを提供する点を除いて次のコードでは、次のような便利なメソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2287"><xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:</span></span>  
  
 [!code-csharp[System.String.IsNullOrWhitespace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs#2)]
 [!code-vb[System.String.IsNullOrWhitespace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb#2)]  
  
 <span data-ttu-id="43ecc-2288">空白文字は、Unicode 規格によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2288">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="43ecc-2289"><xref:System.String.IsNullOrWhiteSpace%2A>メソッドの値を返す任意の文字は解釈`true`に渡されたときに、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッドの空白文字として。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2289">The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method as a white-space character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2290">次の例は、文字列配列を作成し、先の配列の各要素を渡す、<xref:System.String.IsNullOrWhiteSpace%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2290">The following example creates a string array, and then passes each element of the array to the <xref:System.String.IsNullOrWhiteSpace%2A> method.</span></span>  
  
 [!code-csharp[System.String.IsNullOrWhiteSpace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace1.cs#1)]
 [!code-vb[System.String.IsNullOrWhiteSpace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2291">指定した配列の要素またはコレクションのメンバーを連結します。各要素の間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2291">Concatenates the elements of a specified array or the members of a collection, using the specified separator between each element or member.</span></span></summary>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray value As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="value" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, System.Collections.Generic.IEnumerable&lt;string&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-2292">区切り文字として使用する文字列。戻される文字列に <c>separator</c> が含まれるのは、<c>values</c> に複数の要素がある場合のみです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2292">The string to use as a separator.<c>separator</c> is included in the returned string only if <c>values</c> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="43ecc-2293">連結する文字列を格納しているコレクション。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2293">A collection that contains the strings to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-2294"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 型の構築された <see cref="T:System.String" /> コレクションのメンバーを連結します。各メンバーの間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2294">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2295"><paramref name="values" /> のメンバーからなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2295">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="43ecc-2296"><paramref name="values" /> にメンバーがない場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2296">If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2297">場合`separator`は`null`、空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) 代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2297">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="43ecc-2298">場合のメンバーはすべて`values`は`null`、空の文字列が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2298">If any member of `values` is `null`, an empty string is used instead.</span></span>  
  
 <span data-ttu-id="43ecc-2299"><xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 内の各要素を連結できる便利なメソッドは、`IEnumerable(Of String)`を文字列配列の要素を変換せずコレクション。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2299"><xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="43ecc-2300">統合言語クエリ (LINQ) クエリ式で特に便利です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2300">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="43ecc-2301">次の例では、`List(Of String)`と等しいか (つまり、例では、"M") 特定の文字を超える文字を選択する、ラムダ式にアルファベットの大文字または小文字の文字を含むオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2301">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="43ecc-2302">`IEnumerable(Of String)`によって返されるコレクション、<xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>にメソッドが渡される、<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29>を 1 つの文字列として結果を表示するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2302">The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.</span></span>  
  
 [!code-csharp[System.String.Join#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs#4)]
 [!code-vb[System.String.Join#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2303">次の例では、エラトステネスの篩というアルゴリズムを使用して、小さいか 100 素数を計算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2303">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="43ecc-2304">結果を割り当てます、<xref:System.Collections.Generic.List%601>型のオブジェクト<xref:System.String>、しに渡されます、<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2304">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join3.cs#3)]
 [!code-vb[System.String.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2305"><paramref name="values" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2305"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-2306">区切り記号として使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2306">The string to use as a separator.</span></span> <span data-ttu-id="43ecc-2307"><c>separator</c> が 2 つ以上の要素を含む場合のみ、<c>values</c> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2307"><c>separator</c> is included in the returned string only if <c>values</c> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="43ecc-2308">連結する要素を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2308">An array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-2309">オブジェクト配列の要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2309">Concatenates the elements of an object array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2310">
          <paramref name="values" /> の要素からなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2310">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="43ecc-2311"><paramref name="values" /> が空の配列の場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2311">If <paramref name="values" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2312">場合`separator`は`null`場合、または任意の要素`values`以外は、最初の要素`null`、空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) 代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2312">If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="43ecc-2313">場合は、「呼び出し時ノートを参照してください最初の要素`values`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2313">See the Notes for Callers section if the first element of `values` is `null`.</span></span>  
  
 <span data-ttu-id="43ecc-2314"><xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> 文字列にその要素を明示的に変換せずオブジェクト配列内の各要素を連結することができます便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2314"><xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings.</span></span> <span data-ttu-id="43ecc-2315">呼び出してそのオブジェクトの配列内の各オブジェクトの文字列形式を派生`ToString`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2315">The string representation of each object in the array is derived by calling that object's `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2316">次の例では、エラトステネスの篩というアルゴリズムを使用して、小さいか 100 素数を計算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2316">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="43ecc-2317">次に、渡します、整数の配列をその結果を代入、<xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2317">It assigns the result to a integer array, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join1.cs#1)]
 [!code-vb[System.String.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2318"><paramref name="values" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2318"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2319">場合の最初の要素<paramref name="values" />は<see langword="null" />、<see cref="M:System.String.Join(System.String,System.Object[])" />メソッドが内の要素を連結していない<paramref name="values" />が、代わりに返す<see cref="F:System.String.Empty" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2319">If the first element of <paramref name="values" /> is <see langword="null" />, the <see cref="M:System.String.Join(System.String,System.Object[])" /> method does not concatenate the elements in <paramref name="values" /> but instead returns <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="43ecc-2320">この問題の解決策の数は、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2320">A number of workarounds for this issue are available.</span></span> <span data-ttu-id="43ecc-2321">値を割り当てるには、最も簡単な<see cref="F:System.String.Empty" />配列の最初の要素を次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2321">The easiest is to assign a value of <see cref="F:System.String.Empty" /> to the first element of the array, as the following example shows.</span></span>  
  
 [!code-csharp[System.String.Join#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)]
 [!code-vb[System.String.Join#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</para>
        </block>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray value As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-2322">区切り記号として使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2322">The string to use as a separator.</span></span> <span data-ttu-id="43ecc-2323"><c>separator</c> が 2 つ以上の要素を含む場合のみ、<c>values</c> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2323"><c>separator</c> is included in the returned string only if <c>value</c> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="43ecc-2324">連結する要素を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2324">An array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-2325">文字列配列のすべての要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2325">Concatenates all the elements of a string array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2326">
          <paramref name="value" /> 内の要素からなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2326">A string that consists of the elements in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="43ecc-2327"><paramref name="value" /> が空の配列の場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2327">If <paramref name="value" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2328">たとえば場合、`separator`は「,」と、要素の`value`は、"apple"、「オレンジ」、「ぶどう」および「洋ナシ」 `Join(separator, value)` 「apple、オレンジ色、ぶどう、洋ナシ」を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2328">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value)` returns "apple, orange, grape, pear".</span></span>  
  
 <span data-ttu-id="43ecc-2329">場合`separator`は`null`、空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) 代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2329">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="43ecc-2330">場合内の要素で`value`は`null`、空の文字列が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2330">If any element in `value` is `null`, an empty string is used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2331">次の例で、<xref:System.String.Join%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2331">The following example demonstrates the <xref:System.String.Join%2A> method.</span></span>  
  
 [!code-cpp[stringjoin#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringjoin/CPP/stringjoin.cpp#1)]
 [!code-csharp[stringjoin#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringjoin/CS/stringjoin.cs#1)]
 [!code-vb[stringjoin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringjoin/VB/stringjoin.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2332"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2332"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, string[] value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="value" Type="System.String[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="value">To be added.</param>
        <param name="startIndex">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, string[] value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-2333">区切り記号として使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2333">The string to use as a separator.</span></span> <span data-ttu-id="43ecc-2334"><c>separator</c> が 2 つ以上の要素を含む場合のみ、<c>values</c> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2334"><c>separator</c> is included in the returned string only if <c>value</c> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="43ecc-2335">連結する要素を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2335">An array that contains the elements to concatenate.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2336">使用する <c>value</c> の最初の要素。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2336">The first element in <c>value</c> to use.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2337">使用する <c>value</c> の要素の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2337">The number of elements of <c>value</c> to use.</span></span></param>
        <summary><span data-ttu-id="43ecc-2338">文字列配列の指定した要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2338">Concatenates the specified elements of a string array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2339"><paramref name="value" /> 内の文字列からなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2339">A string that consists of the strings in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span></span>  
  
 <span data-ttu-id="43ecc-2340">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2340">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2341"><see cref="F:System.String.Empty" /> が 0 である場合、または <paramref name="count" /> に要素がない場合、または <paramref name="value" /> と <paramref name="separator" /> のすべての要素が <paramref name="value" /> である場合、<see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2341"><see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2342">たとえば場合、`separator`は「,」と、要素の`value`は、"apple"、「オレンジ」、「ぶどう」および「洋ナシ」`Join(separator, value, 1, 2)`を返します「オレンジ, ぶどう」です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2342">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value, 1, 2)` returns "orange, grape".</span></span>  
  
 <span data-ttu-id="43ecc-2343">場合`separator`は`null`、空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) 代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2343">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="43ecc-2344">場合内の要素で`value`は`null`、空の文字列が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2344">If any element in `value` is `null`, an empty string is used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2345">次の例では、成果物の名前の配列から 2 つの要素を連結します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2345">The following example concatenates two elements from an array of names of fruit.</span></span>  
  
 [!code-cpp[string.join2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.join2/CPP/join2.cpp#1)]
 [!code-csharp[string.join2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.join2/CS/join2.cs#1)]
 [!code-vb[string.join2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.join2/VB/join2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2346"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2346"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2347"><paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2347"><paramref name="startIndex" /> or <paramref name="count" /> is less than 0.</span></span>  
  
 <span data-ttu-id="43ecc-2348">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2348">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2349"><paramref name="startIndex" /> と <paramref name="count" /> を合計した値が、<paramref name="value" /> の要素数よりも大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2349"><paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="43ecc-2350">メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2350">Out of memory.</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (char separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(char separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As Char, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(char separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (string separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(string separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As String, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="43ecc-2351">メンバーの種類<c>値</c>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2351">The type of the members of <c>values</c>.</span></span></typeparam>
        <param name="separator"><span data-ttu-id="43ecc-2352">区切り文字として使用する文字列。戻される文字列に <c>separator</c> が含まれるのは、<c>values</c> に複数の要素がある場合のみです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2352">The string to use as a separator.<c>separator</c> is included in the returned string only if <c>values</c> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="43ecc-2353">連結するオブジェクトを格納しているコレクション。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2353">A collection that contains the objects to concatenate.</span></span></param>
        <summary><span data-ttu-id="43ecc-2354">コレクションのメンバーを連結します。各メンバーの間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2354">Concatenates the members of a collection, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2355"><paramref name="values" /> のメンバーからなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2355">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="43ecc-2356"><paramref name="values" /> にメンバーがない場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2356">If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2357">場合`separator`は`null`、空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) 代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2357">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="43ecc-2358">場合のメンバーはすべて`values`は`null`、空の文字列が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2358">If any member of `values` is `null`, an empty string is used instead.</span></span>  
  
 <span data-ttu-id="43ecc-2359"><xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> 各メンバーを連結できる便利なメソッドは、<xref:System.Collections.Generic.IEnumerable%601>最初を文字列に変換なしのコレクション。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2359"><xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings.</span></span> <span data-ttu-id="43ecc-2360">内の各オブジェクトの文字列形式を、<xref:System.Collections.Generic.IEnumerable%601>を呼び出してそのオブジェクトのコレクションを派生`ToString`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2360">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>  
  
 <span data-ttu-id="43ecc-2361">このメソッドは、特定統合言語クエリ (LINQ) クエリ式で便利です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2361">This method is particular useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="43ecc-2362">たとえば、次のコードは非常に単純な定義`Animal`動物とそれが属する注文書の名前を表すクラス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2362">For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="43ecc-2363">定義し、<xref:System.Collections.Generic.List%601>オブジェクトの数値を含んだ`Animal`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2363">It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects.</span></span> <span data-ttu-id="43ecc-2364"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>を抽出する拡張メソッドが呼び出される、`Animal`オブジェクト`Order`"Rodent"と等しい。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2364">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="43ecc-2365">結果に渡される、<xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2365">The result is passed to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs#5)]
 [!code-vb[System.String.Join#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb#5)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2366">次の例では、エラトステネスの篩というアルゴリズムを使用して、小さいか 100 素数を計算します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2366">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="43ecc-2367">結果を割り当てます、<xref:System.Collections.Generic.List%601>しに渡されます整数型のオブジェクト、<xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2367">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type integer, which it then passes to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join2.cs#2)]
 [!code-vb[System.String.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2368"><paramref name="values" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2368"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2369">このインスタンス内で最後に出現する指定 Unicode 文字または文字列の 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2369">Reports the zero-based index position of the last occurrence of a specified Unicode character or string within this instance.</span></span> <span data-ttu-id="43ecc-2370">このインスタンス内で文字または文字列が見つからない場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2370">The method returns -1 if the character or string is not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2371">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2371">The Unicode character to seek.</span></span></param>
        <summary><span data-ttu-id="43ecc-2372">このインスタンス内で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2372">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2373">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2373">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2374">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2374">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2375">つまり、文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>- 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2375">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="43ecc-2376">このメソッドは、このインスタンスの最後の文字位置から検索を開始し、されるまで、先頭に向かって逆方向に進みます`value`が見つかったか、最初の文字位置が検査されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2376">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="43ecc-2377">検索では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2377">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="43ecc-2378">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2378">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-2379">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2379">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2380">次の例では定義、`ExtractFilename`で使用する方法、<xref:System.String.LastIndexOf%28System.Char%29>文字列内の最後のディレクトリの区切り記号を検索して、文字列のファイル名を抽出する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2380">The following example defines an `ExtractFilename` method that uses the <xref:System.String.LastIndexOf%28System.Char%29> method to find the last directory separator character in a string and to extract the string's file name.</span></span> <span data-ttu-id="43ecc-2381">ファイルが存在する場合は、そのパスがない場合、ファイル名を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2381">If the file exists, the method returns the file name without its path.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/LastIndexOf_Example.cs#1)]
 [!code-vb[System.String.LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/LastIndexOf_Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2382">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2382">The string to seek.</span></span></param>
        <summary><span data-ttu-id="43ecc-2383">指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2383">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2384">その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まる開始インデックス位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2384">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="43ecc-2385"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値はこのインスタンスの最後のインデックス位置です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2385">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2386">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2386">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2387">つまり、文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>- 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2387">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="43ecc-2388">検索は、このインスタンスの最後の文字位置から開始され、されるまで、先頭に向かって逆方向に進みます`value`が見つかった最初の文字位置が検査されているか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2388">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>  
  
 <span data-ttu-id="43ecc-2389">このメソッドは、単語 (大文字小文字を区別やカルチャ) を現在のカルチャを使用して検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2389">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="43ecc-2390">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2390">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2391">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2391">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2392">場合`value`1 つまたは複数の無視できる文字のみで構成されて、<xref:System.String.LastIndexOf%28System.String%29>メソッドは常に返します<xref:System.String.Length%2A?displayProperty=nameWithType>– 1 で、現在のインスタンスで最後のインデックス位置を表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2392">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%29> method always returns <xref:System.String.Length%2A?displayProperty=nameWithType> – 1, which represents the last index position in the current instance.</span></span> <span data-ttu-id="43ecc-2393">次の例で、<xref:System.String.LastIndexOf%28System.String%29>を 2 つの文字列 (ソフト ハイフン (U +0 00AD)、"n"で後にソフト ハイフンおよびにソフト ハイフンの後に"m") の 3 つの部分文字列を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2393">In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="43ecc-2394">文字列の 1 つのみにソフト ハイフンが含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2394">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="43ecc-2395">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]後で、各ケースではソフト ハイフンに無視できる文字であるため、結果は、場合と同じにソフト ハイフンが含まれていない必要があるか`value`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2395">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="43ecc-2396">ソフト ハイフンのみを検索するときに、このメソッドは、6 および 5 を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2396">When searching for a soft hyphen only, the method returns 6 and 5.</span></span> <span data-ttu-id="43ecc-2397">これらの値は、2 つの文字列の最後の文字のインデックスに対応します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2397">These values correspond to the index of the last character in the two strings.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)]
 [!code-vb[System.String.LastIndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2398">次の例では、タグと終了タグで開始する場合、文字列および文字列の末尾から HTML タグを削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2398">The following example removes opening and closing HTML tags from a string if the tags begin and end the string.</span></span> <span data-ttu-id="43ecc-2399">文字列の終わりで終わる場合文字を角かっこ (">")、この例では、<xref:System.String.LastIndexOf%2A>終了タグの開始を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2399">If a string ends with a closing bracket character (">"), the example uses the <xref:System.String.LastIndexOf%2A> method to locate the start of the end tag.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof_example2.cs#2)]
 [!code-vb[System.String.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof_example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2400"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2400"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2401">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列比較メソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2401">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-2402">文字列インスタンス内の部分文字列の最後のインデックスを検索するには、現在のカルチャの比較規則を使用して、呼び出して、<see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" />の値を持つメソッド オーバー ロード<see cref="F:System.StringComparison.CurrentCulture" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2402">To find the last index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2403">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2403">The Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2404">検索の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2404">The starting position of the search.</span></span> <span data-ttu-id="43ecc-2405">検索は、このインスタンスの先頭に向かって <c>startIndex</c> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2405">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-2406">このインスタンス内で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2406">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span></span> <span data-ttu-id="43ecc-2407">検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2407">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2408">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2408">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2409">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2409">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2410">文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>-1. このメソッド検索開始位置、`startIndex`文字のこのインスタンスとが実行されるまで、現在のインスタンスの先頭に向かって逆方向の位置`value`が見つかった最初の文字位置が検査されているか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2410">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="43ecc-2411">たとえば場合、`startIndex`は<xref:System.String.Length%2A>- 1、メソッドが、先頭に文字列の最後の文字からすべての文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2411">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span> <span data-ttu-id="43ecc-2412">検索では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2412">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="43ecc-2413">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2413">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-2414">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2414">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2415">次の例では、文字列の先頭に、文字列の末尾から作業をして、文字列に出現する文字をすべてのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2415">The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string.</span></span>  
  
 [!code-cpp[string.lastindexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof1/CPP/lastixof1.cpp#1)]
 [!code-csharp[string.lastindexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof1/CS/lastixof1.cs#1)]
 [!code-vb[string.lastindexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof1/VB/lastixof1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-2416">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満であるか、このインスタンスの長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2416">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2417">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2417">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2418">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2418">The search starting position.</span></span> <span data-ttu-id="43ecc-2419">検索は、このインスタンスの先頭に向かって <c>startIndex</c> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2419">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-2420">指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2420">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="43ecc-2421">検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2421">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2422">その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まる開始インデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2422">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="43ecc-2423"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2423">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2424">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2424">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2425">つまり、文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>- 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2425">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="43ecc-2426">検索を開始、`startIndex`文字のこのインスタンスとが実行されるまで、先頭に向かって逆方向の位置`value`が見つかった最初の文字位置が検査されているか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2426">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="43ecc-2427">たとえば場合、`startIndex`は<xref:System.String.Length%2A>- 1、メソッドが、先頭に文字列の最後の文字からすべての文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2427">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>  
  
 <span data-ttu-id="43ecc-2428">このメソッドは、単語 (大文字小文字を区別やカルチャ) を現在のカルチャを使用して検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2428">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="43ecc-2429">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2429">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2430">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2430">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2431">場合`value`1 つまたは複数の無視できる文字のみで構成されて、<xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29>メソッドは常に返します`startIndex`、これは、検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2431">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="43ecc-2432">次の例で、<xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29>メソッドはソフト ハイフン (U +0 00AD) が含まれているしよりも前または最後の"m"を文字列に含まれます部分文字列を検索に使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2432">In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final "m" in a string.</span></span> <span data-ttu-id="43ecc-2433">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]か、後で、検索文字列にソフト ハイフンが無視されるため、呼び出しはソフト ハイフンで構成される部分文字列を検索する一方、ソフト ハイフンと"m"で構成される部分文字列が文字列で、"m"の位置を返し、"n"は"n"の位置を返しますを検索するメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2433">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and "m" returns the position of the "m" in the string, whereas calling it to find a substring that consists of the soft hyphen and "n" returns the position of the "n".</span></span> <span data-ttu-id="43ecc-2434">メソッドが、"m"の値を表すのインデックスを返します、検索文字列には、ソフト ハイフンのみが含まれている、`startIndex`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2434">When the search string contains only the soft hyphen, the method returns the index of the "m", which represents the value of `startIndex`.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)]
 [!code-vb[System.String.LastIndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2435">次の例では、対象の文字列の先頭に、ターゲット文字列の末尾から作業をして、ターゲット文字列のすべての出現する文字列のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2435">The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string.</span></span>  
  
 [!code-cpp[string.lastindexof7#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf7/CPP/lastixof7.cpp#1)]
 [!code-csharp[string.lastindexof7#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf7/CS/lastixof7.cs#1)]
 [!code-vb[string.lastindexof7#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf7/VB/lastixof7.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2436"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2436"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-2437">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満であるか、または現在のインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2437">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span></span>  
  
 <span data-ttu-id="43ecc-2438">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2438">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2439">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="startIndex" /> が -1 未満であるか、または 0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2439">The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2440">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列比較メソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2440">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-2441">現在のカルチャの比較規則を使用して、特定の文字位置の前にある部分文字列のインデックスを検索するには、呼び出し、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />の値を持つメソッド オーバー ロード<see cref="F:System.StringComparison.CurrentCulture" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2441">To find the index of a substring that precedes a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2442">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2442">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-2443">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2443">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="43ecc-2444">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最後に見つかった 0 から始まる位置のインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2444">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="43ecc-2445">指定した文字列に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2445">A parameter specifies the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2446">その文字列が見つかった場合は、<paramref name="value" /> パラメーターの 0 から始まる開始インデックス位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2446">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="43ecc-2447"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値はこのインスタンスの最後のインデックス位置です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2447">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2448">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2448">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2449">つまり、文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>- 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2449">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="43ecc-2450">`comparisonType`を検索するパラメーターを指定します、`value`パラメーター現在またはインバリアント カルチャを使用して、または区別しない検索を使用して、word または序数比較規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2450">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
 <span data-ttu-id="43ecc-2451">検索は、このインスタンスの最後の文字位置から開始され、されるまで、先頭に向かって逆方向に進みます`value`が見つかった最初の文字位置が検査されているか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2451">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2452">次の exampledemonstrates 3 つのオーバー ロードが、<xref:System.String.LastIndexOf%2A>の異なる値を使用して別の文字列内の文字列の最後の出現箇所を検索するメソッド、<xref:System.StringComparison>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2452">The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2453"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2453"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-2454"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2454"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2455">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2455">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2456">カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2456">In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2457">場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" />メソッドは常に返します<see cref="P:System.String.Length" />– 1 で、現在のインスタンスで最後のインデックス位置を表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2457">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method always returns <see cref="P:System.String.Length" /> – 1, which represents the last index position in the current instance.</span></span>  
  
 <span data-ttu-id="43ecc-2458">次の例で、<see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" />を 2 つの文字列 (ソフト ハイフン (U +0 00AD)、"n"で後にソフト ハイフンおよびにソフト ハイフンの後に"m") の 3 つの部分文字列を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2458">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="43ecc-2459">文字列の 1 つのみにソフト ハイフンが含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2459">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="43ecc-2460">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]またはその後、ソフト ハイフンは無視できる文字であるため、カルチャに依存した検索を返しますと同じ値に検索文字列にソフト ハイフンが含まれていないかどうかには返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2460">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</span></span> <span data-ttu-id="43ecc-2461">ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2461">An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof26.cs#26)]
 [!code-vb[System.String.LastIndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof26.vb#26)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2462">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2462">The Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2463">検索の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2463">The starting position of the search.</span></span> <span data-ttu-id="43ecc-2464">検索は、このインスタンスの先頭に向かって <c>startIndex</c> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2464">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2465">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2465">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="43ecc-2466">このインスタンス内の部分文字列で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2466">Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.</span></span> <span data-ttu-id="43ecc-2467">検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2467">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2468">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2468">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2469">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2469">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2470">つまり、文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>- 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2470">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="43ecc-2471">このメソッドで検索を開始、`startIndex`文字の位置やが実行されるまで、このインスタンスの先頭に向かって逆方向`value`が見つかるまたは`count`文字位置します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2471">This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="43ecc-2472">たとえば場合、`startIndex`は<xref:System.String.Length%2A>- 1、メソッドは逆方向に検索`count`文字、文字列の最後の文字をします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2472">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span> <span data-ttu-id="43ecc-2473">検索では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2473">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="43ecc-2474">このメソッドは、ここで、文字と見なされます別の文字に相当その Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2474">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="43ecc-2475">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2475">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2476">次の例では、部分文字列の末尾から部分文字列の先頭に作業をして、部分文字列内で出現する文字をすべてのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2476">The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring.</span></span>  
  
 [!code-cpp[string.lastindexof2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof2/CPP/lastixof2.cpp#1)]
 [!code-csharp[string.lastindexof2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof2/CS/lastixof2.cs#1)]
 [!code-vb[string.lastindexof2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof2/VB/lastixof2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-2477">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満であるか、このインスタンスの長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2477">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span></span>  
  
 <span data-ttu-id="43ecc-2478">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2478">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2479">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> - <paramref name="count" /> + 1 が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2479">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2480">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2480">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2481">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2481">The search starting position.</span></span> <span data-ttu-id="43ecc-2482">検索は、このインスタンスの先頭に向かって <c>startIndex</c> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2482">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2483">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2483">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="43ecc-2484">指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2484">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="43ecc-2485">検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2485">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2486">その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まる開始インデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2486">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="43ecc-2487"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2487">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2488">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2488">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2489">つまり、文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>- 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2489">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="43ecc-2490">検索を開始、`startIndex`文字のこのインスタンスとが実行されるまで、先頭に向かって逆方向の位置`value`が見つかるまたは`count`文字位置します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2490">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="43ecc-2491">たとえば場合、`startIndex`は<xref:System.String.Length%2A>- 1、メソッドは逆方向に検索`count`文字、文字列の最後の文字をします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2491">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>  
  
 <span data-ttu-id="43ecc-2492">このメソッドは、単語 (大文字小文字を区別やカルチャ) を現在のカルチャを使用して検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2492">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="43ecc-2493">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2493">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2494">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2494">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2495">場合`value`1 つまたは複数の無視できる文字のみで構成されて、<xref:System.String.LastIndexOf%2A>メソッドは常に返します`startIndex`、これは、検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2495">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%2A> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="43ecc-2496">次の例で、<xref:System.String.LastIndexOf%2A>最終的な"m"の 2 つの文字列に先行する 2 つの文字にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2496">In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final "m" of two strings.</span></span> <span data-ttu-id="43ecc-2497">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2497">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="43ecc-2498">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]後で、どちらの場合はソフト ハイフンに無視できる文字であるため、メソッドのインデックスを返します、文字列に"m"カルチャに依存した比較を実行するときまたはします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2498">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2499">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2499">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)]
 [!code-vb[System.String.LastIndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2500">次の例では、先頭の部分文字列の末尾から部分文字列の先頭に、文字列のすべての出現箇所のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2500">The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring.</span></span>  
  
 [!code-cpp[string.lastindexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf8/CPP/lastixof8.cpp#1)]
 [!code-csharp[string.lastindexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf8/CS/lastixof8.cs#1)]
 [!code-vb[string.lastindexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf8/VB/lastixof8.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2501"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2501"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2502"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2502"><paramref name="count" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2503">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2503">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2504">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2504">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2505">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2505">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2506">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンスの長さより大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2506">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span></span>  
  
 <span data-ttu-id="43ecc-2507">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2507">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2508">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> - <paramref name="count" /> + 1 した値がこのインスタンス内にはない位置を指定しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2508">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" />+ 1 specifies a position that is not within this instance.</span></span>  
  
 <span data-ttu-id="43ecc-2509">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2509">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2510">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="start" /> が -1 より小さいか 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2510">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span></span>  
  
 <span data-ttu-id="43ecc-2511">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2511">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2512">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="count" /> が 1 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2512">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2513">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列比較メソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2513">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-2514">現在のカルチャの比較規則を使用してこの操作を実行する呼び出し、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />の値を持つメソッド オーバー ロード<see cref="F:System.StringComparison.CurrentCulture" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2514">To perform this operation by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2515">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2515">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2516">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2516">The search starting position.</span></span> <span data-ttu-id="43ecc-2517">検索は、このインスタンスの先頭に向かって <c>startIndex</c> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2517">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-2518">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2518">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="43ecc-2519">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最後に見つかった 0 から始まる位置のインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2519">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="43ecc-2520">検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2520">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span> <span data-ttu-id="43ecc-2521">指定した文字列を検索するときに実行する比較の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2521">A parameter specifies the type of comparison to perform when searching for the specified string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2522">その文字列が見つかった場合は、<paramref name="value" /> パラメーターの 0 から始まる開始インデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2522">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="43ecc-2523"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2523">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2524">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2524">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2525">つまり、文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>- 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2525">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="43ecc-2526">検索を開始、`startIndex`文字の位置やが実行されるまで、旧バージョンと`value`が見つかった最初の文字位置が検査されているか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2526">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="43ecc-2527">たとえば場合、`startIndex`は<xref:System.String.Length%2A>- 1、メソッドが、先頭に文字列の最後の文字からすべての文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2527">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>  
  
 <span data-ttu-id="43ecc-2528">`comparisonType`を検索するパラメーターを指定します、`value`パラメーター現在またはインバリアント カルチャを使用して、または区別しない検索を使用して、word または序数比較規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2528">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2529">次の exampledemonstrates 3 つのオーバー ロードが、<xref:System.String.LastIndexOf%2A>の異なる値を使用して別の文字列内の文字列の最後の出現箇所を検索するメソッド、<xref:System.StringComparison>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2529">The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2530"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2530"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-2531">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満であるか、または現在のインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2531">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span></span>  
  
 <span data-ttu-id="43ecc-2532">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2532">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2533">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="startIndex" /> が -1 未満であるか、または 0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2533">The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-2534"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2534"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2535">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2535">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2536">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2536">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2537">場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2537">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>  
  
 <span data-ttu-id="43ecc-2538">次の例で、 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> "m"、"m"で 2 つの文字列の最後の開始後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2538">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m", starting with the final "m" in two strings.</span></span> <span data-ttu-id="43ecc-2539">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2539">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="43ecc-2540">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]後で、どちらの場合はソフト ハイフンに無視できる文字であるため、メソッドのインデックスを返します、文字列に"m"カルチャに依存した比較を実行するときまたはします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2540">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2541">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2541">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span> <span data-ttu-id="43ecc-2542">このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2542">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof25.cs#25)]
 [!code-vb[System.String.LastIndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof25.vb#25)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-2543">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2543">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2544">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2544">The search starting position.</span></span> <span data-ttu-id="43ecc-2545">検索は、このインスタンスの先頭に向かって <c>startIndex</c> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2545">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2546">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2546">The number of character positions to examine.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-2547">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2547">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="43ecc-2548">指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2548">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="43ecc-2549">検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2549">The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions.</span></span> <span data-ttu-id="43ecc-2550">指定した文字列を検索するときに実行する比較の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2550">A parameter specifies the type of comparison to perform when searching for the specified string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2551">その文字列が見つかった場合は、<paramref name="value" /> パラメーターの 0 から始まる開始インデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2551">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="43ecc-2552"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2552">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2553">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2553">Index numbering starts from zero.</span></span> <span data-ttu-id="43ecc-2554">つまり、文字列の最初の文字インデックス 0 の位置は、最後に<xref:System.String.Length%2A>- 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2554">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="43ecc-2555">検索を開始、`startIndex`文字の位置やが実行されるまで、旧バージョンと`value`が見つかるまたは`count`文字位置します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2555">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="43ecc-2556">たとえば場合、`startIndex`は<xref:System.String.Length%2A>- 1、メソッドは逆方向に検索`count`文字、文字列の最後の文字をします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2556">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>  
  
 <span data-ttu-id="43ecc-2557">`comparisonType`を検索するパラメーターを指定します、`value`パラメーター現在またはインバリアント カルチャを使用して、または区別しない検索を使用して、word または序数比較規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2557">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2558">次の exampledemonstrates 3 つのオーバー ロードが、<xref:System.String.LastIndexOf%2A>の異なる値を使用して別の文字列内の文字列の最後の出現箇所を検索するメソッド、<xref:System.StringComparison>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2558">The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2559"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2559"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2560"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2560"><paramref name="count" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2561">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2561">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2562">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2562">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2563">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2563">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2564">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンスの長さより大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2564">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span></span>  
  
 <span data-ttu-id="43ecc-2565">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2565">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2566">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> + 1 - <paramref name="count" /> した値がこのインスタンス内にはない位置を指定しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2566">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance.</span></span>  
  
 <span data-ttu-id="43ecc-2567">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2567">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2568">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="start" /> が -1 より小さいか 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2568">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span></span>  
  
 <span data-ttu-id="43ecc-2569">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2569">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2570">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="count" /> が 1 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2570">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-2571"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2571"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2572">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2572">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2573">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2573">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="43ecc-2574">場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2574">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>  
  
 <span data-ttu-id="43ecc-2575">次の例で、 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 2 つの文字列内のすべてのページで、"m"を続けてにソフト ハイフン (U +0 00AD) の位置が、最終的な"m"の前に、最初の文字位置を検索するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2575">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in all but the first character position before the final "m" in two strings.</span></span> <span data-ttu-id="43ecc-2576">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2576">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="43ecc-2577">この例を実行している場合、[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]後で、どちらの場合はソフト ハイフンに無視できる文字であるため、メソッドのインデックスを返します、文字列に"m"カルチャに依存した比較を実行するときまたはします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2577">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2578">序数に基づく比較を実行するときにただし、その部分文字列のみで検索最初の文字列します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2578">When it performs an ordinal comparison, however, it finds the substring only in the first string.</span></span> <span data-ttu-id="43ecc-2579">で、"m"の後にソフト ハイフンが含まれている最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すが失敗したが、代わりに、カルチャに依存した比較を実行するときに"m"のインデックスを返しますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2579">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="43ecc-2580">このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2580">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof24.cs#24)]
 [!code-vb[System.String.LastIndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof24.vb#24)]</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2581">Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2581">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="43ecc-2582">このインスタンス内で配列内の文字が見つからない場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2582">The method returns -1 if the characters in the array are not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="43ecc-2583">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2583">A Unicode character array containing one or more characters to seek.</span></span></param>
        <summary><span data-ttu-id="43ecc-2584">Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2584">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2585"><paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2585">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2586">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2586">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="43ecc-2587">このメソッドは、このインスタンスの最後の文字位置から検索を開始し、内の文字までの先頭に向かって逆方向に進みます`anyOf`が見つかったか、最初の文字位置が検査されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2587">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="43ecc-2588">検索では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2588">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="43ecc-2589">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2589">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-2590">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2590">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2591">次の例では、別の文字列内で、"is"を任意の文字、文字列内で最後に見つかった位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2591">The following example finds the index of the last occurrence of any character in the string "is" within another string.</span></span>  
  
 [!code-cpp[string.lastindexofany1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny1/CPP/lastixany1.cpp#1)]
 [!code-csharp[string.lastindexofany1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny1/CS/lastixany1.cs#1)]
 [!code-vb[string.lastindexofany1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny1/VB/lastixany1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2592"><paramref name="anyOf" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2592"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="43ecc-2593">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2593">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2594">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2594">The search starting position.</span></span> <span data-ttu-id="43ecc-2595">検索は、このインスタンスの先頭に向かって <c>startIndex</c> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2595">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-2596">Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2596">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="43ecc-2597">検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2597">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2598"><paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2598">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2599">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2599">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="43ecc-2600">このメソッドで検索を開始、`startIndex`文字位置のこのインスタンスと内の文字までの先頭に向かって後方に進み`anyOf`が見つかった最初の文字位置が検査されているか。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2600">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="43ecc-2601">検索では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2601">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="43ecc-2602">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2602">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-2603">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2603">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2604">次の例では、別の文字列の部分文字列に、"is"を任意の文字、文字列内で最後に見つかった位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2604">The following example finds the index of the last occurrence of any character in the string "is" within a substring of another string.</span></span>  
  
 [!code-cpp[string.lastindexofany2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny2/CPP/lastixany2.cpp#1)]
 [!code-csharp[string.lastindexofany2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny2/CS/lastixany2.cs#1)]
 [!code-vb[string.lastindexofany2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny2/VB/lastixany2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2605"><paramref name="anyOf" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2605"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-2606">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンス内にはない位置を指定しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2606">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="43ecc-2607">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2607">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="43ecc-2608">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2608">The search starting position.</span></span> <span data-ttu-id="43ecc-2609">検索は、このインスタンスの先頭に向かって <c>startIndex</c> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2609">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2610">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2610">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="43ecc-2611">Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2611">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="43ecc-2612">検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2612">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2613"><paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2613">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2614">インデックス番号は、0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2614">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="43ecc-2615">このメソッドで検索を開始、`startIndex`文字位置のこのインスタンスと内の文字までの先頭に向かって後方に進み`anyOf`が見つかるまたは`count`文字位置を確認しました。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2615">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="43ecc-2616">検索では大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2616">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="43ecc-2617">このメソッドは、ここで文字と見なされます別の文字と等価の Unicode スカラー値が同じ場合にのみ、序数に基づく (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2617">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="43ecc-2618">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>メソッド、ここで構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode スカラー値と見なすことが"AE"などの正しいシーケンス内の文字のコンポーネントの検索 (u+0041、u+0045) カルチャに応じて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2618">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2619">次の例では、別の文字列の部分文字列に文字列「補助」内にある文字の最後に見つかった位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2619">The following example finds the index of the last occurrence of any character in the string "aid" within a substring of another string.</span></span>  
  
 [!code-cpp[string.lastindexofany3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny3/CPP/lastixany3.cpp#1)]
 [!code-csharp[string.lastindexofany3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny3/CS/lastixany3.cs#1)]
 [!code-vb[string.lastindexofany3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny3/VB/lastixany3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2620"><paramref name="anyOf" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2620"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-2621">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2621">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
 <span data-ttu-id="43ecc-2622">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2622">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2623">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> - <paramref name="count" /> + 1 が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2623">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.String.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="43ecc-2624">現在の <see cref="T:System.String" /> オブジェクト内の文字数を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2624">Gets the number of characters in the current <see cref="T:System.String" /> object.</span></span></summary>
        <value><span data-ttu-id="43ecc-2625">現在の文字列の文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2625">The number of characters in the current string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2626"><xref:System.String.Length%2A>プロパティの数を返します<xref:System.Char>オブジェクトがこのインスタンスで、Unicode 文字の数値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2626">The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="43ecc-2627">その理由は、1 つ以上の Unicode 文字を表すこと<xref:System.Char>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2627">The reason is that a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="43ecc-2628">使用して、<xref:System.Globalization.StringInfo?displayProperty=nameWithType>ごとではなく各 Unicode 文字を使用するクラス<xref:System.Char>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2628">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with each Unicode character instead of each <xref:System.Char>.</span></span>  
  
 <span data-ttu-id="43ecc-2629">C や C++ など、一部の言語では、null 文字は、文字列の末尾を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2629">In some languages, such as C and C++, a null character indicates the end of a string.</span></span> <span data-ttu-id="43ecc-2630">.NET Framework では、文字列の null 文字を埋め込むことできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2630">In the .NET Framework, a null character can be embedded in a string.</span></span> <span data-ttu-id="43ecc-2631">文字列には、1 つまたは複数の null 文字が含まれている場合は、それらの合計の文字列の長さに含まれます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2631">When a string includes one or more null characters, they are included in the length of the total string.</span></span> <span data-ttu-id="43ecc-2632">たとえば、次の文字列では、"abc"と"def"が、null 文字で区切られた部分文字列で。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2632">For example, in the following string, the substrings "abc" and "def" are separated by a null character.</span></span> <span data-ttu-id="43ecc-2633"><xref:System.String.Length%2A>プロパティを返します 7、6 文字のアルファベットだけでなく、null 文字が含まれていることを示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2633">The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.</span></span>  
  
 [!code-cpp[System.String.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)]
 [!code-csharp[System.String.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)]
 [!code-vb[System.String.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2634">次の例で、<xref:System.String.Length%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2634">The following example demonstrates the <xref:System.String.Length%2A> property.</span></span>  
  
 [!code-cpp[string.length#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.length/CPP/length.cpp#1)]
 [!code-csharp[string.length#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.length/CS/length.cs#1)]
 [!code-vb[string.length#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.length/VB/length.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Normalize">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2635">バイナリ表現が特定の Unicode 正規形である新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2635">Returns a new string whose binary representation is in a particular Unicode normalization form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Function Normalize () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-2636">この文字列と同じテキスト値を持ち、なおかつ、バイナリ表現が Unicode 正規形 C である新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2636">Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2637">この文字列と同じテキスト値を持ち、なおかつ、バイナリ表現が正規形 C である新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2637">A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2638">一部の Unicode 文字の組み合わせで構成される同等の複数のバイナリ表現があるおよび/または複合の Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2638">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="43ecc-2639">たとえば、次のコード ポイントのいずれか、文字「いずれも」を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2639">For example, any of the following code points can represent the letter "ắ":</span></span>  
  
-   <span data-ttu-id="43ecc-2640">U+1EAF</span><span class="sxs-lookup"><span data-stu-id="43ecc-2640">U+1EAF</span></span>  
  
-   <span data-ttu-id="43ecc-2641">U +0 0103 U +0 0301</span><span class="sxs-lookup"><span data-stu-id="43ecc-2641">U+0103 U+0301</span></span>  
  
-   <span data-ttu-id="43ecc-2642">U +0 0061 U +0 0306 U +0 0301</span><span class="sxs-lookup"><span data-stu-id="43ecc-2642">U+0061 U+0306 U+0301</span></span>  
  
 <span data-ttu-id="43ecc-2643">複数の表現の 1 つの文字の存在には、検索、並べ替え、照合、およびその他の操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2643">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="43ecc-2644">Unicode 規格では、文字のバイナリ表現のいずれかを指定すると 1 つのバイナリ表現を返します正規化と呼ばれるプロセスを定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2644">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="43ecc-2645">別の規則に従う、正規化形式と呼ばれる、複数のアルゴリズムでは、正規化を実行できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2645">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="43ecc-2646">.NET Framework には、4 つの正規化の形式 (C、D、KC、および KD)、Unicode 規格によって定義されているがサポートしています。2 つの文字列は、同じ正規形で表されている、theycan 序数に基づく比較を使用して比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2646">The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="43ecc-2647">正規化し、2 つの文字列を比較するには、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2647">To normalize and compare two strings, do the following:</span></span>  
  
1.  <span data-ttu-id="43ecc-2648">ファイルや、ユーザー入力デバイスなどの入力ソースから比較する文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2648">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>  
  
2.  <span data-ttu-id="43ecc-2649">呼び出す、<xref:System.String.Normalize>正規形 C に文字列を正規化する方法</span><span class="sxs-lookup"><span data-stu-id="43ecc-2649">Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C.</span></span>  
  
3.  <span data-ttu-id="43ecc-2650">2 つの文字列を比較するように序数に基づく文字列比較をサポートするメソッドを呼び出して、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>メソッドの値を指定<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>または<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>として、<xref:System.StringComparison>引数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2650">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="43ecc-2651">正規化された文字列の配列を並べ替えるに渡す、`comparer`値<xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType>または<xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType>の適切なオーバー ロードに<xref:System.Array.Sort%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2651">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>  
  
4.  <span data-ttu-id="43ecc-2652">前の手順で示される順序に基づいて並べ替えられる出力内の文字列を出力します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2652">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>  
  
 <span data-ttu-id="43ecc-2653">サポートされている Unicode 正規化形式の説明は、次を参照してください。<xref:System.Text.NormalizationForm?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2653">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2654">次の例は、文字列を正規化形式の 4 つのそれぞれを正規化、文字列は、指定した正規形が正規化されたし、正規化後の文字列内のコード ポイントのリストを確認します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2654">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43ecc-2655">現在のインスタンスに、正しくない Unicode 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2655">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2656"><see cref="Overload:System.String.IsNormalized" />メソッドを返します。<see langword="false" />文字列の最初の正規化されていない文字を検出するとすぐにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2656">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="43ecc-2657">したがって、文字列に無効な Unicode 文字を続けて、正規化されていない文字が含まれている場合、<see cref="Overload:System.String.Normalize" />メソッドがスローされます、<see cref="T:System.ArgumentException" />が<see cref="Overload:System.String.IsNormalized" />を返します<see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2657">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para>
        </block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize(System.Text.NormalizationForm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize(System::Text::NormalizationForm normalizationForm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" />
      </Parameters>
      <Docs>
        <param name="normalizationForm"><span data-ttu-id="43ecc-2658">Unicode 正規形。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2658">A Unicode normalization form.</span></span></param>
        <summary><span data-ttu-id="43ecc-2659">この文字列と同じテキスト値を持ち、なおかつ、バイナリ表現が、指定された Unicode 正規形である新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2659">Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2660">この文字列と同じテキスト値を持ち、なおかつ、バイナリ表現が、<paramref name="normalizationForm" /> パラメーターで指定された正規形である新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2660">A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2661">一部の Unicode 文字の組み合わせで構成される同等の複数のバイナリ表現があるおよび/または複合の Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2661">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="43ecc-2662">複数の表現の 1 つの文字の存在には、検索、並べ替え、照合、およびその他の操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2662">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="43ecc-2663">Unicode 規格では、文字のバイナリ表現のいずれかを指定すると 1 つのバイナリ表現を返します正規化と呼ばれるプロセスを定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2663">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="43ecc-2664">別の規則に従う、正規化形式と呼ばれる、複数のアルゴリズムでは、正規化を実行できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2664">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="43ecc-2665">.NET Framework には、4 つの正規化の形式 (C、D、KC、および KD)、Unicode 規格によって定義されているがサポートしています。2 つの文字列は、同じ正規形で表示されるときに、序数に基づく比較を使用して比較できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2665">The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="43ecc-2666">正規化し、2 つの文字列を比較するには、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2666">To normalize and compare two strings, do the following:</span></span>  
  
1.  <span data-ttu-id="43ecc-2667">ファイルや、ユーザー入力デバイスなどの入力ソースから比較する文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2667">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>  
  
2.  <span data-ttu-id="43ecc-2668">呼び出す、<xref:System.String.Normalize%28System.Text.NormalizationForm%29>文字列を指定された正規形を正規化する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2668">Call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29> method to normalize the strings to a specified normalization form.</span></span>  
  
3.  <span data-ttu-id="43ecc-2669">2 つの文字列を比較するように序数に基づく文字列比較をサポートするメソッドを呼び出して、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>メソッドの値を指定<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>または<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>として、<xref:System.StringComparison>引数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2669">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="43ecc-2670">正規化された文字列の配列を並べ替えるに渡す、`comparer`値<xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType>または<xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType>の適切なオーバー ロードに<xref:System.Array.Sort%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2670">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>  
  
4.  <span data-ttu-id="43ecc-2671">前の手順で示される順序に基づいて並べ替えられる出力内の文字列を出力します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2671">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>  
  
 <span data-ttu-id="43ecc-2672">サポートされている Unicode 正規化形式の説明は、次を参照してください。<xref:System.Text.NormalizationForm?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2672">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2673">次の例は、文字列を正規化形式の 4 つのそれぞれを正規化、文字列は、指定した正規形が正規化されたし、正規化後の文字列内のコード ポイントのリストを確認します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2673">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43ecc-2674">現在のインスタンスに、正しくない Unicode 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2674">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2675"><see cref="Overload:System.String.IsNormalized" />メソッドを返します。<see langword="false" />文字列の最初の正規化されていない文字を検出するとすぐにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2675">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="43ecc-2676">したがって、文字列に無効な Unicode 文字を続けて、正規化されていない文字が含まれている場合、<see cref="Overload:System.String.Normalize" />メソッドがスローする可能性が、<see cref="T:System.ArgumentException" />が<see cref="Overload:System.String.IsNormalized" />を返します<see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2676">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method may throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para>
        </block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Equality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::String ^ a, System::String ^ b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="43ecc-2677">比較する最初の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2677">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="43ecc-2678">比較する 2 番目の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2678">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-2679">指定した 2 つの文字列の値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2679">Determines whether two specified strings have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-2680"><paramref name="a" /> の値が <paramref name="b" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2680"><see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2681"><xref:System.String.op_Equality%2A>メソッド定義の等値演算子の動作、<xref:System.String>クラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2681">The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class.</span></span> <span data-ttu-id="43ecc-2682">例」のセクションに示すようなコードができるようにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2682">It enables code such as that shown in the Example section.</span></span> <span data-ttu-id="43ecc-2683">演算子、さらに、静的な<xref:System.String.Equals%28System.String%2CSystem.String%29>序数に基づく (大文字小文字を区別とカルチャに依存しない) 比較を実行するメソッドにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2683">The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2684">Visual Basic コンパイラへの呼び出しとして、等値演算子が解決しない、<xref:System.String.op_Equality%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2684">The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method.</span></span> <span data-ttu-id="43ecc-2685">等値演算子がへの呼び出しをラップする代わりに、<xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2685">Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2686">次の例では、等値演算子を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2686">The following example demonstrates the equality operator.</span></span>  
  
 [!code-cpp[system.string.equality#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Equality/CPP/equalityop.cpp#1)]
 [!code-csharp[system.string.equality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Equality/CS/equalityop.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;char&gt; (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;char&gt; op_Implicit(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As String) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;char&gt;(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Inequality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::String ^ a, System::String ^ b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="43ecc-2687">比較する最初の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2687">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="43ecc-2688">比較する 2 番目の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2688">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-2689">指定した 2 つの文字列の値が異なるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2689">Determines whether two specified strings have different values.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-2690"><see langword="true" /> の値が <paramref name="a" /> の値と異なる場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2690"><see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2691"><xref:System.String.op_Inequality%2A>メソッドの非等値演算子の動作を定義する、<xref:System.String>クラスです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2691">The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.</span></span>   <span data-ttu-id="43ecc-2692">例」のセクションに示すようなコードができるようにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2692">It enables code such as that shown in the Examples section.</span></span>  
  
 <span data-ttu-id="43ecc-2693"><xref:System.String.op_Inequality%2A>演算子さらに、静的な<xref:System.String.Equals%28System.String%2CSystem.String%29>序数に基づく (大文字小文字を区別とカルチャに依存しない) 比較を実行するメソッドにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2693">The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2694">Visual Basic コンパイラへの呼び出しとして非等値演算子が解決しない、<xref:System.String.op_Inequality%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2694">The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method.</span></span> <span data-ttu-id="43ecc-2695">非等値演算子がへの呼び出しをラップする代わりに、<xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2695">Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2696">次の例では、非等値演算子を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2696">The following example demonstrates the inequality operator.</span></span>  
  
 [!code-cpp[system.string.inequality#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Inequality/CPP/inequalityop.cpp#1)]
 [!code-csharp[system.string.inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Inequality/CS/inequalityop.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PadLeft">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2697">現在の文字列の先頭に空白または指定された Unicode 文字が埋め込まれた指定された長さの新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2697">Returns a new string of a specified length in which the beginning of the current string is padded with spaces or with a specified Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="43ecc-2698">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2698">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <summary><span data-ttu-id="43ecc-2699">指定された文字数になるまで左側に空白を埋め込むことで、このインスタンス内の文字を右寄せした新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2699">Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2700">このインスタンスと等価な新しい文字列。ただし右揃えであり、<paramref name="totalWidth" /> の長さになるまで左側に空白が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2700">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="43ecc-2701">ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2701">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="43ecc-2702"><paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2702">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2703">Unicode の領域は、16 進数の 0x0020 として定義されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2703">A Unicode space is defined as hexadecimal 0x0020.</span></span>  
  
 <span data-ttu-id="43ecc-2704"><xref:System.String.PadLeft%28System.Int32%29>メソッドに返される文字列の先頭が埋められます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2704">The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string.</span></span> <span data-ttu-id="43ecc-2705">これは、右から左への言語に使用する場合、文字列の右側の部分が埋められることを意味します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2705">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2706">場合、<xref:System.String.PadLeft%2A>メソッドには空白文字の現在のインスタンスが埋め込まれます、このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2706">If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2707">代わりに、その合計の長さが実行されるように、先頭の空白文字で埋められますした新しい文字列を返します`totalWidth`文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2707">Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2708">次の例で、<xref:System.String.PadLeft%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2708">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadLeft Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadLeft Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CS/source.cs#1)]
 [!code-vb[Classic String.PadLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2709"><paramref name="totalWidth" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2709"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth, char paddingChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="43ecc-2710">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2710">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <param name="paddingChar"><span data-ttu-id="43ecc-2711">Unicode 埋め込み文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2711">A Unicode padding character.</span></span></param>
        <summary><span data-ttu-id="43ecc-2712">指定された文字数になるまで左側に指定された Unicode 文字を埋め込むことで、このインスタンス内の文字を右寄せした新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2712">Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2713">このインスタンスと等価な新しい文字列。ただし右揃えであり、<paramref name="paddingChar" /> の長さになるまで左側に <paramref name="totalWidth" /> の文字が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2713">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="43ecc-2714">ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2714">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="43ecc-2715"><paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2715">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2716"><xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29>メソッドに返される文字列の先頭が埋められます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2716">The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string.</span></span> <span data-ttu-id="43ecc-2717">これは、右から左への言語に使用する場合、文字列の右側の部分が埋められることを意味します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2717">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2718">場合、<xref:System.String.PadLeft%2A>メソッドには空白文字の現在のインスタンスが埋め込まれます、このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2718">If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2719">代わりに、先頭が埋め込まれたした新しい文字列を返します`paddingChar`、合計の長さになるよう`totalWidth`文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2719">Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2720">次の例で、<xref:System.String.PadLeft%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2720">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadLeft1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadLeft1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CS/source.cs#1)]
 [!code-vb[Classic String.PadLeft1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2721"><paramref name="totalWidth" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2721"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PadRight">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2722">現在の文字列の末尾に空白または指定された Unicode 文字が埋め込まれた指定された長さの新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2722">Returns a new string of a specified length in which the end of the current string is padded with spaces or with a specified Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="43ecc-2723">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2723">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <summary><span data-ttu-id="43ecc-2724">指定された文字数になるまで右側に空白を埋め込むことで、この文字列内の文字を左寄せした新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2724">Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2725">このインスタンスと等価な新しい文字列。ただし左揃えであり、<paramref name="totalWidth" /> の長さになるまで右側に空白が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2725">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="43ecc-2726">ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2726">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="43ecc-2727"><paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2727">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2728">Unicode の領域は、16 進数の 0x0020 として定義されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2728">A Unicode space is defined as hexadecimal 0x0020.</span></span>  
  
 <span data-ttu-id="43ecc-2729"><xref:System.String.PadRight%28System.Int32%29>メソッドに返される文字列の末尾が埋められます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2729">The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string.</span></span> <span data-ttu-id="43ecc-2730">これは、右から左への言語に使用する場合、文字列の左側の部分が埋められることを意味します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2730">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2731">場合、<xref:System.String.PadRight%2A>メソッドには空白文字の現在のインスタンスが埋め込まれます、このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2731">If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2732">代わりに、その合計の長さが実行されるように末尾の空白文字で埋められますした新しい文字列を返します`totalWidth`文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2732">Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2733">次の例で、<xref:System.String.PadRight%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2733">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadRight Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadRight Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight Example/cs/source.cs#1)]
 [!code-vb[Classic String.PadRight Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2734"><paramref name="totalWidth" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2734"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth, char paddingChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="43ecc-2735">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2735">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <param name="paddingChar"><span data-ttu-id="43ecc-2736">Unicode 埋め込み文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2736">A Unicode padding character.</span></span></param>
        <summary><span data-ttu-id="43ecc-2737">指定された文字数になるまで右側に指定された Unicode 文字を埋め込むことで、この文字列内の文字を左寄せした新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2737">Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2738">このインスタンスと等価な新しい文字列。ただし左揃えであり、<paramref name="totalWidth" /> の長さになるまで右側に <paramref name="paddingChar" /> の文字が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2738">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="43ecc-2739">ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2739">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="43ecc-2740"><paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2740">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2741"><xref:System.String.PadRight%28System.Int32%2CSystem.Char%29>メソッドに返される文字列の末尾が埋められます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2741">The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string.</span></span> <span data-ttu-id="43ecc-2742">これは、右から左への言語に使用する場合、文字列の左側の部分が埋められることを意味します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2742">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2743">場合、<xref:System.String.PadRight%2A>メソッドには空白文字の現在のインスタンスが埋め込まれます、このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2743">If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2744">代わりに、末尾の埋め込みありした新しい文字列を返します`paddingChar`、合計の長さになるよう`totalWidth`文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2744">Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2745">次の例で、<xref:System.String.PadRight%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2745">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadRight1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadRight1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/cs/source.cs#1)]
 [!code-vb[Classic String.PadRight1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2746"><paramref name="totalWidth" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2746"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2747">現在の文字列から指定された文字数を削除した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2747">Returns a new string in which a specified number of characters from the current string are deleted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="43ecc-2748">文字を削除する際の 0 から始まる開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2748">The zero-based position to begin deleting characters.</span></span></param>
        <summary><span data-ttu-id="43ecc-2749">現在のインスタンスの指定した位置から指定した最後の位置までの全文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2749">Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2750">この文字列から対象となる文字を取り除いた新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2750">A new string that is equivalent to this string except for the removed characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2751">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]文字列は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2751">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="43ecc-2752">値、`startIndex`パラメーターの範囲は 0 から文字列インスタンスの長さより 1 小さい値にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2752">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2753">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2753">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2754">代わりに、その新しい文字列を返すすべての文字位置から`startIndex`元の文字列の末尾までが削除されました。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2754">Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2755">次の例で、<xref:System.String.Remove%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2755">The following example demonstrates the <xref:System.String.Remove%2A> method.</span></span> <span data-ttu-id="43ecc-2756">次への最後のケースでは、文字列の末尾から指定したインデックスから始まるすべてのテキストを削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2756">The next-to-last case removes all text starting from the specified index through the end of the string.</span></span> <span data-ttu-id="43ecc-2757">最後の場合は、指定したインデックスから始まる次の 3 つの文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2757">The last case removes three characters starting from the specified index.</span></span>  
  
 [!code-cpp[string.remove#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.remove/CPP/r.cpp#1)]
 [!code-csharp[string.remove#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.remove/CS/r.cs#1)]
 [!code-vb[string.remove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.remove/VB/r.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-2758"><paramref name="startIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2758"><paramref name="startIndex" /> is less than zero.</span></span>  
  
 <span data-ttu-id="43ecc-2759">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2759">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2760"><paramref name="startIndex" /> に、この文字列の範囲外の位置が指定されています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2760"><paramref name="startIndex" /> specifies a position that is not within this string.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="43ecc-2761">文字を削除する際の 0 から始まる開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2761">The zero-based position to begin deleting characters.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2762">削除する文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2762">The number of characters to delete.</span></span></param>
        <summary><span data-ttu-id="43ecc-2763">現在のインスタンス内の指定した位置から指定した文字数が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2763">Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2764">このインスタンスから対象となる文字を取り除いた新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2764">A new string that is equivalent to this instance except for the removed characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2765">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]文字列は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2765">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="43ecc-2766">値、`startIndex`パラメーターの範囲は 0 から文字列インスタンスの長さより 1 小さい値にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2766">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2767">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2767">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2768">代わりに、文字の数がで指定されている新しい文字列を返します、`count`パラメーターが削除されました。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2768">Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed.</span></span> <span data-ttu-id="43ecc-2769">指定された位置にある、文字を削除する`startIndex`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2769">The characters are removed at the position specified by `startIndex`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2770">次の例では、完全な名前から、ミドル ネームを削除する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2770">The following example demonstrates how you can remove the middle name from a complete name.</span></span>  
  
 [!code-cpp[stringremove#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringremove/CPP/stringremove.cpp#1)]
 [!code-csharp[stringremove#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringremove/CS/stringremove.cs#1)]
 [!code-vb[stringremove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringremove/VB/stringremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="43ecc-2771"><paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2771">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="43ecc-2772">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-2772">-or-</span></span>  
  
 <span data-ttu-id="43ecc-2773"><paramref name="startIndex" /> に <paramref name="count" /> を足した数が、このインスタンス内にない位置を示しています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2773"><paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2774">現在の文字列に出現する指定した Unicode 文字または <see cref="T:System.String" /> をすべて、別の指定した Unicode 文字または <see cref="T:System.String" /> に置換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2774">Returns a new string in which all occurrences of a specified Unicode character or <see cref="T:System.String" /> in the current string are replaced with another specified Unicode character or <see cref="T:System.String" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (char oldChar, char newChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(char oldChar, char newChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldChar As Char, newChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(char oldChar, char newChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="oldChar"><span data-ttu-id="43ecc-2775">置換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2775">The Unicode character to be replaced.</span></span></param>
        <param name="newChar"><span data-ttu-id="43ecc-2776">出現するすべての <c>oldChar</c> を置換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2776">The Unicode character to replace all occurrences of <c>oldChar</c>.</span></span></param>
        <summary><span data-ttu-id="43ecc-2777">このインスタンスに出現する指定された Unicode 文字をすべて、別の指定された Unicode 文字に置換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2777">Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2778"><paramref name="oldChar" /> のすべてのインスタンスが <paramref name="newChar" /> で置き換えられることを除いて、このインスタンスと等価な文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2778">A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />.</span></span> <span data-ttu-id="43ecc-2779"><paramref name="oldChar" /> が現在のインスタンス内に見つからない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2779">If <paramref name="oldChar" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2780">このメソッドを検索する序数に基づく (大文字小文字を区別とカルチャに依存しない) 検索を実行`oldChar`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2780">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldChar`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2781">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2781">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2782">代わりに、すべての出現箇所で新しい文字列を返します`oldChar`は置き換えられます`newChar`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2782">Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.</span></span>  
  
 <span data-ttu-id="43ecc-2783">このメソッドは、変更後の文字列を返す、ので連結できます。 を連続して呼び出す、 <xref:System.String.Replace%2A> 、元の文字列に対して複数の置換を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2783">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="43ecc-2784">メソッドの呼び出しは、左から右に実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2784">Method calls are executed from left to right.</span></span> <span data-ttu-id="43ecc-2785">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2785">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.String.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)]
 [!code-vb[System.String.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2786">次の例では、コンマ、空白かどうか、一連の数値の間に置き換えることによって値のコンマ区切りリストを作成します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2786">The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.</span></span>  
  
 [!code-cpp[string.replace1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.replace1/CPP/string.replace1.cpp#1)]
 [!code-csharp[string.replace1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.replace1/CS/string.replace1.cs#1)]
 [!code-vb[string.replace1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.replace1/VB/string.replace1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="43ecc-2787">置換される文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2787">The string to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="43ecc-2788">出現するすべての <c>oldValue</c> を置換する文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2788">The string to replace all occurrences of <c>oldValue</c>.</span></span></param>
        <summary><span data-ttu-id="43ecc-2789">現在のインスタンスに出現する指定した文字列をすべて、別に指定した文字列に置換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2789">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2790"><paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> で置き換えられることを除いて、現在の文字列と等価な文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2790">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span></span> <span data-ttu-id="43ecc-2791"><paramref name="oldValue" /> が現在のインスタンス内に見つからない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2791">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2792">場合`newValue`は`null`、出現するすべての`oldValue`が削除されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2792">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-2793">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2793">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-2794">代わりに、すべての出現箇所で新しい文字列を返します`oldValue`は置き換えられます`newValue`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2794">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>  
  
 <span data-ttu-id="43ecc-2795">このメソッドを検索する序数に基づく (大文字小文字を区別とカルチャに依存しない) 検索を実行`oldValue`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2795">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldValue`.</span></span>  
  
 <span data-ttu-id="43ecc-2796">このメソッドは、変更後の文字列を返す、ので連結できます。 を連続して呼び出す、 <xref:System.String.Replace%2A> 、元の文字列に対して複数の置換を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2796">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="43ecc-2797">メソッドの呼び出しは、左から右に実行されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2797">Method calls are executed from left to right.</span></span> <span data-ttu-id="43ecc-2798">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2798">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
 [!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2799">次の例では、使用する方法を示しています、<xref:System.String.Replace%2A>スペル ミスを修正する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2799">The following example demonstrates how you can use the <xref:System.String.Replace%2A> method to correct a spelling error.</span></span>  
  
 [!code-cpp[stringreplace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringreplace/CPP/stringreplace.cpp#1)]
 [!code-csharp[stringreplace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringreplace/CS/stringreplace.cs#1)]
 [!code-vb[stringreplace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringreplace/VB/stringreplace.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-2800"><paramref name="oldValue" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2800"><paramref name="oldValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-2801"><paramref name="oldValue" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2801"><paramref name="oldValue" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, comparisonType As StringComparison) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="oldValue">To be added.</param>
        <param name="newValue">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, ignoreCase As Boolean, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="oldValue">To be added.</param>
        <param name="newValue">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-2802">このインスタンス内の、指定された文字列または Unicode 文字の配列の要素で区切られた部分文字列を格納する文字列配列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2802">Returns a string array that contains the substrings in this instance that are delimited by elements of a specified string or Unicode character array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2803"><xref:System.String.Split%2A> 区切られた文字列を部分文字列に分割に使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2803"><xref:System.String.Split%2A> is used to break a delimited string into substrings.</span></span> <span data-ttu-id="43ecc-2804">0、1、または複数の区切り文字を指定する文字配列を使用することができます (、<xref:System.String.Split%28System.Char%5B%5D%29>メソッド)、または 0、1、または複数の区切り文字列を指定する文字配列を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2804">You can use either a character array to specify zero, one, or multiple delimiting characters (the <xref:System.String.Split%28System.Char%5B%5D%29> method), or you can use a character array to specify zero, one, or multiple delimiting strings.</span></span> <span data-ttu-id="43ecc-2805">オーバー ロードが、<xref:System.String.Split%2A>メソッドを使用するメソッドによって返される部分文字列の数を制限できます (、<xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29>メソッド)、空の文字列が返された部分文字列に含まれるかどうかを決定する (、<xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29>と<xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29>メソッド、または両方を行う (、<xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29>と<xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29>メソッド)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2805">Overloads of the <xref:System.String.Split%2A> method allow you to limit the number of substrings returned by the method (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29> method), to determine whether empty strings are included in the returned substrings (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29> and <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> methods, or to do both (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> and <xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> methods).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="43ecc-2806">詳細について、<xref:System.String.Split%2A>メソッドを呼び出しの例の場合と、各オーバー ロードする、個々 のオーバー ロードのドキュメントを参照して<xref:System.String.Split%2A>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2806">For more detailed information on the <xref:System.String.Split%2A> method, as well as for examples that call each overload, see the documentation for the individual overloads of <xref:System.String.Split%2A>.</span></span>  
  
 <span data-ttu-id="43ecc-2807"><xref:System.String.Split%2A>常に、区切られた文字列を部分文字列に分割する最善の方法がメソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2807">The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings.</span></span> <span data-ttu-id="43ecc-2808">すべての区切られた文字列の部分文字列を抽出したくない場合、または区切り記号文字のセットではなくパターンに基づいて文字列を解析する場合は、次の方法を検討してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2808">If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.</span></span>  
  
## <a name="regular-expressions"></a><span data-ttu-id="43ecc-2809">正規表現</span><span class="sxs-lookup"><span data-stu-id="43ecc-2809">Regular expressions</span></span>  
 <span data-ttu-id="43ecc-2810">場合は、文字列は、一定のパターンに準拠しているを抽出し、その要素を処理する正規表現を使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2810">If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.</span></span> <span data-ttu-id="43ecc-2811">たとえば、次の文字列形式をとる"*数**オペランド**数*"を使用することができます、[正規表現](~/docs/standard/base-types/regular-expressions.md)を抽出し、文字列の要素を処理します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2811">For example, if strings take the form "*number* *operand* *number*" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements.</span></span> <span data-ttu-id="43ecc-2812">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2812">Here's an example:</span></span>  
  
 [!code-csharp[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]
 [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]  
  
 <span data-ttu-id="43ecc-2813">正規表現パターン`(\d+)\s+([-+*/])\s+(\d+)`は次のように定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2813">The regular expression pattern `(\d+)\s+([-+*/])\s+(\d+)` is defined like this:</span></span>  
  
|<span data-ttu-id="43ecc-2814">パターン</span><span class="sxs-lookup"><span data-stu-id="43ecc-2814">Pattern</span></span>|<span data-ttu-id="43ecc-2815">説明</span><span class="sxs-lookup"><span data-stu-id="43ecc-2815">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)`|<span data-ttu-id="43ecc-2816">1 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2816">Match one or more decimal digits.</span></span> <span data-ttu-id="43ecc-2817">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2817">This is the first capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="43ecc-2818">1 つ以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2818">Match one or more whitespace characters.</span></span>|  
|`([-+*/])`|<span data-ttu-id="43ecc-2819">一致、算術演算子の符号 (+、-、\*、または/)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2819">Match an arithmetic operator sign (+, -, \*, or /).</span></span> <span data-ttu-id="43ecc-2820">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2820">This is the second capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="43ecc-2821">1 つ以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2821">Match one or more whitespace characters.</span></span>|  
|`(\d+)`|<span data-ttu-id="43ecc-2822">1 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2822">Match one or more decimal digits.</span></span> <span data-ttu-id="43ecc-2823">これが 3 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2823">This is the third capturing group.</span></span>|  
  
 <span data-ttu-id="43ecc-2824">文字の固定セットではなく、パターンに基づく文字列から部分文字列を抽出するのに正規表現を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2824">You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.</span></span> <span data-ttu-id="43ecc-2825">これは、これらの条件のいずれかが発生したときの一般的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2825">This is a common scenario when either of these conditions occurs:</span></span>  
  
-   <span data-ttu-id="43ecc-2826">1 つ以上の区切り記号文字の常に機能していませんの区切り記号として、<xref:System.String>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2826">One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="43ecc-2827">区切り文字の数と順序は、変数または不明です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2827">The sequence and number of delimiter characters is variable or unknown.</span></span>  
  
 <span data-ttu-id="43ecc-2828">たとえば、<xref:System.String.Split%2A>ために、次の文字列を分割する方法を使用できませんの数`\n`(C# の場合) または`vbCrLf`(Visual Basic) の文字は、変数、および区切り記号として使用され、常にありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2828">For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they don't always serve as delimiters.</span></span>  
  
```  
  
[This is captured\ntext.]\n\n[\n[This is more captured text.]\n]  
\n[Some more captured text:\n   Option1\n   Option2][Terse text.]  
  
```  
  
 <span data-ttu-id="43ecc-2829">正規表現では、簡単に、次の例のように、この文字列を分割できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2829">A regular expression can split this string easily, as the following example shows.</span></span>  
  
 [!code-csharp[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]
 [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]  
  
 <span data-ttu-id="43ecc-2830">正規表現パターン`\[([^\[\]]+)\]`は次のように定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2830">The regular expression pattern `\[([^\[\]]+)\]` is defined like this:</span></span>  
  
|<span data-ttu-id="43ecc-2831">パターン</span><span class="sxs-lookup"><span data-stu-id="43ecc-2831">Pattern</span></span>|<span data-ttu-id="43ecc-2832">説明</span><span class="sxs-lookup"><span data-stu-id="43ecc-2832">Description</span></span>|  
|-------------|-----------------|  
|`\[`|<span data-ttu-id="43ecc-2833">開きかっこと一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2833">Match an opening bracket.</span></span>|  
|`([^\[\]]+)`|<span data-ttu-id="43ecc-2834">開始タグまたは右角かっこ 1 回以上の任意の文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2834">Match any character that is not an opening or a closing bracket one or more times.</span></span> <span data-ttu-id="43ecc-2835">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2835">This is the first capturing group.</span></span>|  
|`\]`|<span data-ttu-id="43ecc-2836">右角かっこと一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2836">Match a closing bracket.</span></span>|  
  
 <span data-ttu-id="43ecc-2837"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドはほぼ同じである<xref:System.String.Split%2A?displayProperty=nameWithType>固定された文字セットではなく正規表現パターンに基づく文字列を分割する点を除いて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2837">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method is almost identical to <xref:System.String.Split%2A?displayProperty=nameWithType>, except that it splits a string based on a regular expression pattern instead of a fixed character set.</span></span> <span data-ttu-id="43ecc-2838">たとえば、次の例を使用して、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>ハイフン、およびその他の文字のさまざまな組み合わせで区切られた部分文字列を表す文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2838">For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method to split a string that contains substrings delimited by various combinations of hyphens and other characters.</span></span>  
  
 [!code-csharp[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]
 [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]  
  
 <span data-ttu-id="43ecc-2839">正規表現パターン`\s-\s?[+*]?\s?-\s`は次のように定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2839">The regular expression pattern `\s-\s?[+*]?\s?-\s` is defined like this:</span></span>  
  
|<span data-ttu-id="43ecc-2840">パターン</span><span class="sxs-lookup"><span data-stu-id="43ecc-2840">Pattern</span></span>|<span data-ttu-id="43ecc-2841">説明</span><span class="sxs-lookup"><span data-stu-id="43ecc-2841">Description</span></span>|  
|-------------|-----------------|  
|`\s-`|<span data-ttu-id="43ecc-2842">後にハイフン、空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2842">Match a whitespace character followed by a hyphen.</span></span>|  
|`\s?`|<span data-ttu-id="43ecc-2843">0 個または 1 つの空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2843">Match zero or one whitespace character.</span></span>|  
|`[+*]?`|<span data-ttu-id="43ecc-2844">いずれかの 0 個または 1 つの出現と照合、+ または \* 文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2844">Match zero or one occurrence of either the + or \* character.</span></span>|  
|`\s?`|<span data-ttu-id="43ecc-2845">0 個または 1 つの空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2845">Match zero or one whitespace character.</span></span>|  
|`-\s`|<span data-ttu-id="43ecc-2846">ハイフン、および空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2846">Match a hyphen followed by a whitespace character.</span></span>|  
  
## <a name="search-methods-and-the-substring-method"></a><span data-ttu-id="43ecc-2847">検索方法と Substring メソッド</span><span class="sxs-lookup"><span data-stu-id="43ecc-2847">Search methods and the Substring method</span></span>  
 <span data-ttu-id="43ecc-2848">文字列から部分文字列のすべてに興味がない場合、照合を開始するインデックスを返す文字列比較メソッドのいずれかの作業に使用可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2848">If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.</span></span> <span data-ttu-id="43ecc-2849">呼び出すことができます、<xref:System.String.Substring%2A>メソッドを使用する部分文字列を抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2849">You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want.</span></span> <span data-ttu-id="43ecc-2850">文字列比較メソッドは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2850">The string comparison methods include:</span></span>  
  
-   <span data-ttu-id="43ecc-2851"><xref:System.String.IndexOf%2A>、文字列インスタンスの文字または文字列の最初に見つかった位置の 0 から始まるインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2851"><xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="43ecc-2852"><xref:System.String.IndexOfAny%2A>、文字配列内の任意の文字の最初に見つかった位置の現在の文字列インスタンスで、0 から始まるインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2852"><xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.</span></span>  
  
-   <span data-ttu-id="43ecc-2853"><xref:System.String.LastIndexOf%2A>、文字列インスタンスの文字または文字列の最後に見つかった位置の 0 から始まるインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2853"><xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="43ecc-2854"><xref:System.String.LastIndexOfAny%2A>、、現在文字列のインスタンスで最後に出現する文字配列内にある文字の 0 から始まるインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2854"><xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.</span></span>  
  
 <span data-ttu-id="43ecc-2855">次の例では、<xref:System.String.IndexOf%2A>メソッドを文字列内の期間を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2855">The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string.</span></span> <span data-ttu-id="43ecc-2856">次を使用して、<xref:System.String.Substring%2A>を完全な文章を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2856">It then uses the <xref:System.String.Substring%2A> method to return full sentences.</span></span>  
  
 [!code-csharp[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]
 [!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (params char[] separator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (ParamArray separator As Char()) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(... cli::array &lt;char&gt; ^ separator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-2857">この文字列から部分文字列を取り出すために区切り文字として使用する文字配列、区切り文字が含まれていない空の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2857">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-2858">配列内の文字に基づいて文字列を部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2858">Splits a string into substrings that are based on the characters in an array.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2859">このインスタンスを <paramref name="separator" /> の 1 つ以上の文字で区切った部分文字列を要素に格納する配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2859">An array whose elements contain the substrings from this instance that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="43ecc-2860">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2860">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2861">文字列は、既知の文字のセットで区切られた、ときに行うこともできます、<xref:System.String.Split%28System.Char%5B%5D%29>部分文字列に分割する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2861">When a string is delimited by a known set of characters, you can use the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate it into substrings.</span></span> <span data-ttu-id="43ecc-2862">文字列から部分文字列を抽出するには、他の方法を参照してください、 [String.Split に代わる方法](#Alternatives)セクションです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2862">For other ways to extract substrings from a string, see the [Alternatives to String.Split](#Alternatives) section.</span></span>  
  
## <a name="return-value-details"></a><span data-ttu-id="43ecc-2863">戻り値の詳細</span><span class="sxs-lookup"><span data-stu-id="43ecc-2863">Return value details</span></span>  
 <span data-ttu-id="43ecc-2864">返される配列の要素では、区切り文字は含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2864">Delimiter characters are not included in the elements of the returned array.</span></span> <span data-ttu-id="43ecc-2865">たとえば、区切り文字の配列には、文字が含まれています。"-"と、現在の文字列インスタンスの値は"aa、bb、cc"、3 つの要素を格納している配列を返します:"aa"、"bb"、および"cc"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2865">For example, if the separator array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="43ecc-2866">このインスタンスに内の文字が含まれていないかどうかは`separator`、返される配列は、このインスタンスを含む 1 つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2866">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="43ecc-2867">各要素`separator`別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2867">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="43ecc-2868">返される配列に対応する要素に含まれる 2 つの区切り記号は、隣接するセル、または、区切り記号が先頭またはこのインスタンスの末尾に見つかった、<xref:System.String.Empty>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2868">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty>.</span></span> <span data-ttu-id="43ecc-2869">次にいくつかの例を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2869">Here are some examples:</span></span>  
  
|<span data-ttu-id="43ecc-2870">文字列値</span><span class="sxs-lookup"><span data-stu-id="43ecc-2870">String value</span></span>|<span data-ttu-id="43ecc-2871">区切り記号</span><span class="sxs-lookup"><span data-stu-id="43ecc-2871">Separator</span></span>|<span data-ttu-id="43ecc-2872">返される配列</span><span class="sxs-lookup"><span data-stu-id="43ecc-2872">Returned array</span></span>|  
|------------------|---------------|--------------------|  
|<span data-ttu-id="43ecc-2873">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="43ecc-2873">"42, 12, 19"</span></span>|<span data-ttu-id="43ecc-2874">新しい Char[] {',', ''} (c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2874">new Char[] {',', ' '} (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-2875">Char() = {「,」c""c}) (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2875">Char() = {","c, " "c}) (Visual Basic)</span></span>|<span data-ttu-id="43ecc-2876">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2876">{"42", "", "12", "", "19"}</span></span>|  
|<span data-ttu-id="43ecc-2877">"42..12..19"</span><span class="sxs-lookup"><span data-stu-id="43ecc-2877">"42..12..19"</span></span>|<span data-ttu-id="43ecc-2878">新しい Char[] {'. '}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2878">new Char[] {'.'}</span></span> <span data-ttu-id="43ecc-2879">(C#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2879">(C#)</span></span><br /><br /> <span data-ttu-id="43ecc-2880">Char() = {"です"。c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2880">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="43ecc-2881">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2881">{"42", "", "12", "", "19"}</span></span>|  
|<span data-ttu-id="43ecc-2882">「バナナ」</span><span class="sxs-lookup"><span data-stu-id="43ecc-2882">"Banana"</span></span>|<span data-ttu-id="43ecc-2883">新しい Char[] {'. '}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2883">new Char[] {'.'}</span></span> <span data-ttu-id="43ecc-2884">(C#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2884">(C#)</span></span><br /><br /> <span data-ttu-id="43ecc-2885">Char() = {"です"。c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2885">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="43ecc-2886">{「バナナ」}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2886">{"Banana"}</span></span>|  
|<span data-ttu-id="43ecc-2887">"Darb\nSmarba"(c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2887">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-2888">"Darb"& vbLf"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2888">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="43ecc-2889">新しい Char[] {} (c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2889">new Char[] {} (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-2890">Char() = {} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2890">Char() = {} (Visual Basic)</span></span>|<span data-ttu-id="43ecc-2891">{"Darb"、"Smarba"}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2891">{"Darb", "Smarba"}</span></span>|  
|<span data-ttu-id="43ecc-2892">"Darb\nSmarba"(c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2892">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-2893">"Darb"& vbLf"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2893">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="43ecc-2894">null (C#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2894">null (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-2895">Nothing (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2895">Nothing (Visual Basic)</span></span>|<span data-ttu-id="43ecc-2896">{"Darb"、"Smarba"}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2896">{"Darb", "Smarba"}</span></span>|  
  
## <a name="the-separator-array"></a><span data-ttu-id="43ecc-2897">区切り文字の配列</span><span class="sxs-lookup"><span data-stu-id="43ecc-2897">The separator array</span></span>  
 <span data-ttu-id="43ecc-2898">区切り記号の各要素は、1 つの文字で構成される個別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2898">Each element of separator defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="43ecc-2899">場合、`separator`引数は`null`文字が含まれていないか、メソッドは、区切り記号として空白文字をどのように処理します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2899">If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters.</span></span> <span data-ttu-id="43ecc-2900">空白文字が Unicode 標準; で定義されています。返される`true`に渡される場合、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2900">White-space characters are defined by the Unicode standard; they return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
## <a name="stringsplitchar-and-compiler-overload-resolution"></a><span data-ttu-id="43ecc-2901">String.Split(Char[]) コンパイラ オーバー ロードの解決</span><span class="sxs-lookup"><span data-stu-id="43ecc-2901">String.Split(Char[]) and compiler overload resolution</span></span>  
 <span data-ttu-id="43ecc-2902">このオーバー ロードの 1 つのパラメーター<xref:System.String.Split%2A?displayProperty=nameWithType>文字配列では、次の例のように単一の文字を呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2902">Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=nameWithType> is a character array, you can call it with a single character, as the following example shows.</span></span>  
  
 [!code-csharp[System.String.Split#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split_CompilerResolution1.cs#12)]
 [!code-vb[System.String.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split_CompilerResolution1.vb#12)]  
  
 <span data-ttu-id="43ecc-2903">`separator`パラメーターがで修飾された、<xref:System.ParamArrayAttribute>属性に、コンパイラは、1 つの要素の文字の配列として単一の文字を解釈します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2903">Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array.</span></span> <span data-ttu-id="43ecc-2904">これは、その他のケースではない<xref:System.String.Split%2A?displayProperty=nameWithType>を含むオーバー ロード、`separator`パラメーター; 明示的に渡す必要がありますこれらのオーバー ロードを文字配列として、`separator`引数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2904">This is not the case for other <xref:System.String.Split%2A?displayProperty=nameWithType> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument.</span></span>  
  
## <a name="comparison-details"></a><span data-ttu-id="43ecc-2905">比較の詳細</span><span class="sxs-lookup"><span data-stu-id="43ecc-2905">Comparison details</span></span>  
 <span data-ttu-id="43ecc-2906"><xref:System.String.Split%28System.Char%5B%5D%29>メソッドが 1 つまたは複数の文字で区切られた、この文字列内の部分文字列を抽出し、`separator`配列や配列の要素としてそれらの部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2906">The <xref:System.String.Split%28System.Char%5B%5D%29> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` array, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="43ecc-2907"><xref:System.String.Split%28System.Char%5B%5D%29>メソッドは大文字小文字を区別序数の並べ替え規則を使用する比較を実行することによって区切り記号を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2907">The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="43ecc-2908">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2908">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
<a name="Alternatives"></a>   
## <a name="alternatives-to-stringsplit"></a><span data-ttu-id="43ecc-2909">String.Split に代わる方法</span><span class="sxs-lookup"><span data-stu-id="43ecc-2909">Alternatives to String.Split</span></span>  
 <span data-ttu-id="43ecc-2910"><xref:System.String.Split%2A>常に、区切られた文字列を部分文字列に分割する最善の方法がメソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2910">The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings.</span></span> <span data-ttu-id="43ecc-2911">すべての区切られた文字列の部分文字列を抽出したくない場合、または区切り記号文字のセットではなくパターンに基づいて文字列を解析する場合は、次の方法を検討してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2911">If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.</span></span>  
  
### <a name="regular-expressions"></a><span data-ttu-id="43ecc-2912">正規表現</span><span class="sxs-lookup"><span data-stu-id="43ecc-2912">Regular expressions</span></span>  
 <span data-ttu-id="43ecc-2913">場合は、文字列は、一定のパターンに準拠しているを抽出し、その要素を処理する正規表現を使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2913">If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.</span></span> <span data-ttu-id="43ecc-2914">たとえば、次の文字列形式をとる"*数**オペランド**数*"を使用することができます、[正規表現](~/docs/standard/base-types/regular-expressions.md)を抽出し、文字列の要素を処理します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2914">For example, if strings take the form "*number* *operand* *number*" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements.</span></span> <span data-ttu-id="43ecc-2915">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2915">Here's an example:</span></span>  
  
 [!code-csharp[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]
 [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]  
  
 <span data-ttu-id="43ecc-2916">正規表現パターン`(\d+)\s+([-+*/])\s+(\d+)`は次のように定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2916">The regular expression pattern `(\d+)\s+([-+*/])\s+(\d+)` is defined like this:</span></span>  
  
|<span data-ttu-id="43ecc-2917">パターン</span><span class="sxs-lookup"><span data-stu-id="43ecc-2917">Pattern</span></span>|<span data-ttu-id="43ecc-2918">説明</span><span class="sxs-lookup"><span data-stu-id="43ecc-2918">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)`|<span data-ttu-id="43ecc-2919">1 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2919">Match one or more decimal digits.</span></span> <span data-ttu-id="43ecc-2920">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2920">This is the first capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="43ecc-2921">1 つ以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2921">Match one or more whitespace characters.</span></span>|  
|`([-+*/])`|<span data-ttu-id="43ecc-2922">一致、算術演算子の符号 (+、-、\*、または/)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2922">Match an arithmetic operator sign (+, -, \*, or /).</span></span> <span data-ttu-id="43ecc-2923">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2923">This is the second capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="43ecc-2924">1 つ以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2924">Match one or more whitespace characters.</span></span>|  
|`(\d+)`|<span data-ttu-id="43ecc-2925">1 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2925">Match one or more decimal digits.</span></span> <span data-ttu-id="43ecc-2926">これが 3 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2926">This is the third capturing group.</span></span>|  
  
 <span data-ttu-id="43ecc-2927">文字の固定セットではなく、パターンに基づく文字列から部分文字列を抽出するのに正規表現を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2927">You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.</span></span> <span data-ttu-id="43ecc-2928">これは、これらの条件のいずれかが発生したときの一般的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2928">This is a common scenario when either of these conditions occurs:</span></span>  
  
-   <span data-ttu-id="43ecc-2929">1 つ以上の区切り記号文字の常に機能していませんの区切り記号として、<xref:System.String>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2929">One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="43ecc-2930">区切り文字の数と順序は、変数または不明です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2930">The sequence and number of delimiter characters is variable or unknown.</span></span>  
  
 <span data-ttu-id="43ecc-2931">たとえば、<xref:System.String.Split%2A>ために、次の文字列を分割する方法を使用できませんの数`\n`(C# の場合) または`vbCrLf`(Visual Basic) の文字は、変数、および区切り記号として使用され、常にありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2931">For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they don't always serve as delimiters.</span></span>  
  
```  
  
[This is captured\ntext.]\n\n[\n[This is more captured text.]\n]  
\n[Some more captured text:\n   Option1\n   Option2][Terse text.]  
  
```  
  
 <span data-ttu-id="43ecc-2932">正規表現では、簡単に、次の例のように、この文字列を分割できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2932">A regular expression can split this string easily, as the following example shows.</span></span>  
  
 [!code-csharp[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]
 [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]  
  
 <span data-ttu-id="43ecc-2933">正規表現パターン`\[([^\[\]]+)\]`は次のように定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2933">The regular expression pattern `\[([^\[\]]+)\]` is defined like this:</span></span>  
  
|<span data-ttu-id="43ecc-2934">パターン</span><span class="sxs-lookup"><span data-stu-id="43ecc-2934">Pattern</span></span>|<span data-ttu-id="43ecc-2935">説明</span><span class="sxs-lookup"><span data-stu-id="43ecc-2935">Description</span></span>|  
|-------------|-----------------|  
|`\[`|<span data-ttu-id="43ecc-2936">開きかっこと一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2936">Match an opening bracket.</span></span>|  
|`([^\[\]]+)`|<span data-ttu-id="43ecc-2937">開始タグまたは右角かっこ 1 回以上の任意の文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2937">Match any character that is not an opening or a closing bracket one or more times.</span></span> <span data-ttu-id="43ecc-2938">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2938">This is the first capturing group.</span></span>|  
|`\]`|<span data-ttu-id="43ecc-2939">右角かっこと一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2939">Match a closing bracket.</span></span>|  
  
 <span data-ttu-id="43ecc-2940"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドはほぼ同じである<xref:System.String.Split%2A?displayProperty=nameWithType>固定された文字セットではなく正規表現パターンに基づく文字列を分割する点を除いて、します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2940">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method is almost identical to <xref:System.String.Split%2A?displayProperty=nameWithType>, except that it splits a string based on a regular expression pattern instead of a fixed character set.</span></span> <span data-ttu-id="43ecc-2941">たとえば、次の例を使用して、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>ハイフン、およびその他の文字のさまざまな組み合わせで区切られた部分文字列を表す文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2941">For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method to split a string that contains substrings delimited by various combinations of hyphens and other characters.</span></span>  
  
 [!code-csharp[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]
 [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]  
  
 <span data-ttu-id="43ecc-2942">正規表現パターン`\s-\s?[+*]?\s?-\s`は次のように定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2942">The regular expression pattern `\s-\s?[+*]?\s?-\s` is defined like this:</span></span>  
  
|<span data-ttu-id="43ecc-2943">パターン</span><span class="sxs-lookup"><span data-stu-id="43ecc-2943">Pattern</span></span>|<span data-ttu-id="43ecc-2944">説明</span><span class="sxs-lookup"><span data-stu-id="43ecc-2944">Description</span></span>|  
|-------------|-----------------|  
|`\s-`|<span data-ttu-id="43ecc-2945">後にハイフン、空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2945">Match a whitespace character followed by a hyphen.</span></span>|  
|`\s?`|<span data-ttu-id="43ecc-2946">0 個または 1 つの空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2946">Match zero or one whitespace character.</span></span>|  
|`[+*]?`|<span data-ttu-id="43ecc-2947">いずれかの 0 個または 1 つの出現と照合、+ または \* 文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2947">Match zero or one occurrence of either the + or \* character.</span></span>|  
|`\s?`|<span data-ttu-id="43ecc-2948">0 個または 1 つの空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2948">Match zero or one whitespace character.</span></span>|  
|`-\s`|<span data-ttu-id="43ecc-2949">ハイフン、および空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2949">Match a hyphen followed by a whitespace character.</span></span>|  
  
### <a name="search-methods-and-the-substring-method"></a><span data-ttu-id="43ecc-2950">検索方法と Substring メソッド</span><span class="sxs-lookup"><span data-stu-id="43ecc-2950">Search methods and the Substring method</span></span>  
 <span data-ttu-id="43ecc-2951">文字列から部分文字列のすべてに興味がない場合、照合を開始するインデックスを返す文字列比較メソッドのいずれかの作業に使用可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2951">If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.</span></span> <span data-ttu-id="43ecc-2952">呼び出すことができます、<xref:System.String.Substring%2A>メソッドを使用する部分文字列を抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2952">You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want.</span></span> <span data-ttu-id="43ecc-2953">文字列比較メソッドは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2953">The string comparison methods include:</span></span>  
  
-   <span data-ttu-id="43ecc-2954"><xref:System.String.IndexOf%2A>、文字列インスタンスの文字または文字列の最初に見つかった位置の 0 から始まるインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2954"><xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="43ecc-2955"><xref:System.String.IndexOfAny%2A>、文字配列内の任意の文字の最初に見つかった位置の現在の文字列インスタンスで、0 から始まるインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2955"><xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.</span></span>  
  
-   <span data-ttu-id="43ecc-2956"><xref:System.String.LastIndexOf%2A>、文字列インスタンスの文字または文字列の最後に見つかった位置の 0 から始まるインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2956"><xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="43ecc-2957"><xref:System.String.LastIndexOfAny%2A>、、現在文字列のインスタンスで最後に出現する文字配列内にある文字の 0 から始まるインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2957"><xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.</span></span>  
  
 <span data-ttu-id="43ecc-2958">次の例では、<xref:System.String.IndexOf%2A>メソッドを文字列内の期間を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2958">The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string.</span></span> <span data-ttu-id="43ecc-2959">次を使用して、<xref:System.String.Substring%2A>を完全な文章を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2959">It then uses the <xref:System.String.Substring%2A> method to return full sentences.</span></span>  
  
 [!code-csharp[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]
 [!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]  
  
## <a name="performance-considerations"></a><span data-ttu-id="43ecc-2960">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-2960">Performance Considerations</span></span>  
 <span data-ttu-id="43ecc-2961"><xref:System.String.Split%2A>メソッドが返される配列オブジェクトのメモリを割り当て、および<xref:System.String>配列の各要素のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2961">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="43ecc-2962">アプリケーションに最適なパフォーマンスを必要な場合、またはメモリの割り当てを管理するが、アプリケーションで重大な場合は、使用を検討、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2962">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method.</span></span> <span data-ttu-id="43ecc-2963">使用するオプションもある、<xref:System.String.Compare%2A>文字列内の部分文字列を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2963">You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="43ecc-2964">区切り文字の文字列を分割するには、使用、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>文字列の区切り文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2964">To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="43ecc-2965">文字列の区切り記号文字列を分割するには、使用、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>の区切り記号文字列の最初の文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2965">To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="43ecc-2966">使用して、<xref:System.String.Compare%2A>その最初の文字の後に文字が区切り記号文字列の残りの文字に等しいかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2966">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="43ecc-2967">さらに、同じ設定する場合の文字が使用で複数の文字列を分割する<xref:System.String.Split%2A>メソッド呼び出しは、1 つの配列を作成して、各メソッド呼び出し内での参照を検討してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2967">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="43ecc-2968">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2968">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-2969">次の例では、区切り記号として空白や句読点を扱うことで、テキストのブロックから個々 の単語を抽出する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2969">The following example demonstrates how to extract individual words from a block of text by treating white space and punctuation marks as delimiters.</span></span> <span data-ttu-id="43ecc-2970">渡された文字配列、`separator`のパラメーター、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドは、空白文字とタブ文字、いくつかの一般的な区切り記号とで構成されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2970">The character array passed to the `separator` parameter of the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method consists of a space character and a tab character, together with some common punctuation symbols.</span></span>  
  
 [!code-csharp[System.String.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split2.cs#2)]
 [!code-vb[System.String.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-2971">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン場合、<see cref="M:System.String.Split(System.Char[])" />メソッドに渡されます、<paramref name="separator" />は<see langword="null" />文字が含まれていないか、メソッドは若干異なる一連の文字を使用してより文字列分割を<see cref="M:System.String.Trim(System.Char[])" />をメソッドでは文字列を切り捨てます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2971">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="43ecc-2972">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、どちらの方法は、同一の Unicode の空白文字のセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2972">In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</span></span></para>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-2973">この文字列から部分文字列を取り出すために区切り文字として使用する文字配列、区切り文字が含まれていない空の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2973">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-2974">返される最大の部分文字列数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2974">The maximum number of substrings to return.</span></span></param>
        <summary><span data-ttu-id="43ecc-2975">配列内の文字に基づいて文字列を最大数の部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2975">Splits a string into a maximum number of substrings based on the characters in an array.</span></span> <span data-ttu-id="43ecc-2976">返される部分文字列の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2976">You also specify the maximum number of substrings to return.</span></span></summary>
        <returns><span data-ttu-id="43ecc-2977">このインスタンスを、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2977">An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="43ecc-2978">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2978">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-2979">返される配列の要素では、区切り文字は含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2979">Delimiter characters are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="43ecc-2980">このインスタンスに内の文字が含まれていないかどうかは`separator`、返される配列は、このインスタンスを含む 1 つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2980">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="43ecc-2981">場合`count`0 の場合は、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2981">If `count` is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="43ecc-2982">場合、`separator`パラメーターは`null`文字が含まれていない、または空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2982">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="43ecc-2983">空白文字は、Unicode standard、および戻り値によって定義`true`に渡される場合、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2983">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="43ecc-2984">各要素`separator`別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2984">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="43ecc-2985">配列の対応する要素を含む 2 つの区切り記号は、隣接するセル、または、区切り記号が先頭またはこのインスタンスの末尾に見つかった、<xref:System.String.Empty>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2985">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="43ecc-2986">ある場合は、複数の`count`、このインスタンス内の部分文字列最初`count`マイナス 1 の部分文字列は、最初に返されます`count`マイナス 1 の要素の戻り値は、このインスタンスの残りの文字は、戻り値の最後の要素で返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2986">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="43ecc-2987">場合`count`数よりも大きいの部分文字列の使用可能な部分文字列が返され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2987">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
 <span data-ttu-id="43ecc-2988">次の表は、例を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-2988">The following table provides examples.</span></span>  
  
|<span data-ttu-id="43ecc-2989">文字列値</span><span class="sxs-lookup"><span data-stu-id="43ecc-2989">String value</span></span>|<span data-ttu-id="43ecc-2990">区切り記号</span><span class="sxs-lookup"><span data-stu-id="43ecc-2990">Separator</span></span>|<span data-ttu-id="43ecc-2991">カウント</span><span class="sxs-lookup"><span data-stu-id="43ecc-2991">Count</span></span>|<span data-ttu-id="43ecc-2992">返される配列</span><span class="sxs-lookup"><span data-stu-id="43ecc-2992">Returned array</span></span>|  
|------------------|---------------|-----------|--------------------|  
|<span data-ttu-id="43ecc-2993">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="43ecc-2993">"42, 12, 19"</span></span>|<span data-ttu-id="43ecc-2994">新しい Char[] {',', ''} (c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2994">new Char[] {',', ' '} (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-2995">Char() = {「,」c""c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-2995">Char() = {","c, " "c} (Visual Basic)</span></span>|<span data-ttu-id="43ecc-2996">2</span><span class="sxs-lookup"><span data-stu-id="43ecc-2996">2</span></span>|<span data-ttu-id="43ecc-2997">{"42", " 12, 19"}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2997">{"42", " 12, 19"}</span></span>|  
|<span data-ttu-id="43ecc-2998">"42..12..19"</span><span class="sxs-lookup"><span data-stu-id="43ecc-2998">"42..12..19"</span></span>|<span data-ttu-id="43ecc-2999">新しい Char[] {'. '}</span><span class="sxs-lookup"><span data-stu-id="43ecc-2999">new Char[] {'.'}</span></span> <span data-ttu-id="43ecc-3000">(C#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3000">(C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3001">Char() = {"です"。c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3001">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="43ecc-3002">4</span><span class="sxs-lookup"><span data-stu-id="43ecc-3002">4</span></span>|<span data-ttu-id="43ecc-3003">{"42", "", "12", ".19"}</span><span class="sxs-lookup"><span data-stu-id="43ecc-3003">{"42", "", "12", ".19"}</span></span>|  
|<span data-ttu-id="43ecc-3004">「バナナ」</span><span class="sxs-lookup"><span data-stu-id="43ecc-3004">"Banana"</span></span>|<span data-ttu-id="43ecc-3005">新しい Char[] {'. '}</span><span class="sxs-lookup"><span data-stu-id="43ecc-3005">new Char[] {'.'}</span></span> <span data-ttu-id="43ecc-3006">(C#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3006">(C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3007">Char() = {"です"。c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3007">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="43ecc-3008">2</span><span class="sxs-lookup"><span data-stu-id="43ecc-3008">2</span></span>|<span data-ttu-id="43ecc-3009">{「バナナ」}</span><span class="sxs-lookup"><span data-stu-id="43ecc-3009">{"Banana"}</span></span>|  
|<span data-ttu-id="43ecc-3010">"Darb\nSmarba"(c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3010">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3011">"Darb"& vbLf"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3011">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="43ecc-3012">新しい Char[] {} (c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3012">new Char[] {} (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3013">Char() = {} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3013">Char() = {} (Visual Basic)</span></span>|<span data-ttu-id="43ecc-3014">1</span><span class="sxs-lookup"><span data-stu-id="43ecc-3014">1</span></span>|<span data-ttu-id="43ecc-3015">{"Darb\nSmarba"}(C#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3015">{"Darb\nSmarba"} (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3016">"Darb"& vbLf"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3016">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|  
|<span data-ttu-id="43ecc-3017">"Darb\nSmarba"(c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3017">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3018">"Darb"& vbLf"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3018">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="43ecc-3019">新しい char[] null (c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3019">new Char[] null (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3020">Char() = なし</span><span class="sxs-lookup"><span data-stu-id="43ecc-3020">Char() = Nothing</span></span>|<span data-ttu-id="43ecc-3021">2</span><span class="sxs-lookup"><span data-stu-id="43ecc-3021">2</span></span>|<span data-ttu-id="43ecc-3022">{"Darb"、"Smarba"}</span><span class="sxs-lookup"><span data-stu-id="43ecc-3022">{"Darb", "Smarba"}</span></span>|  
|<span data-ttu-id="43ecc-3023">"Darb\nSmarba"(c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3023">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3024">"Darb"& vbLf"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3024">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="43ecc-3025">新しい char[] null (c#)</span><span class="sxs-lookup"><span data-stu-id="43ecc-3025">new Char[] null (C#)</span></span><br /><br /> <span data-ttu-id="43ecc-3026">Char() = なし</span><span class="sxs-lookup"><span data-stu-id="43ecc-3026">Char() = Nothing</span></span>|<span data-ttu-id="43ecc-3027">100</span><span class="sxs-lookup"><span data-stu-id="43ecc-3027">100</span></span>|<span data-ttu-id="43ecc-3028">{"Darb"、"Smarba"}</span><span class="sxs-lookup"><span data-stu-id="43ecc-3028">{"Darb", "Smarba"}</span></span>|  
  
## <a name="performance-considerations"></a><span data-ttu-id="43ecc-3029">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3029">Performance Considerations</span></span>  
 <span data-ttu-id="43ecc-3030"><xref:System.String.Split%2A>メソッドが返される配列オブジェクトのメモリを割り当て、および<xref:System.String>配列の各要素のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3030">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="43ecc-3031">アプリケーションに最適なパフォーマンスを必要な場合、またはメモリの割り当てを管理するが、アプリケーションで重大な場合は、使用を検討、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>メソッド、および必要に応じて、<xref:System.String.Compare%2A>メソッドは、文字列内の部分文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3031">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="43ecc-3032">区切り文字で文字列を分割する場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>文字列の区切り文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3032">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="43ecc-3033">文字列の区切り記号文字列を分割している場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>の区切り記号文字列の最初の文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3033">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="43ecc-3034">使用して、<xref:System.String.Compare%2A>その最初の文字の後に文字が区切り記号文字列の残りの文字に等しいかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3034">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="43ecc-3035">さらに、同じ設定する場合の文字が使用で複数の文字列を分割する<xref:System.String.Split%2A>メソッド呼び出しは、1 つの配列を作成して、各メソッド呼び出し内での参照を検討してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3035">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="43ecc-3036">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3036">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3037">次の例でどのように`count`によって返される文字列の数に影響を与える<xref:System.String.Split%2A>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3037">The following example demonstrates how `count` affects the number of strings returned by <xref:System.String.Split%2A>.</span></span>  
  
 [!code-csharp[StringSplit2#10](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/StringSplit10.cs#10)]
 [!code-vb[StringSplit2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit10.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-3038"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3038"><paramref name="count" /> is negative.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3039">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン場合、<see cref="M:System.String.Split(System.Char[])" />メソッドに渡されます、<paramref name="separator" />は<see langword="null" />文字が含まれていないか、メソッドは若干異なる一連の文字を使用してより文字列分割を<see cref="M:System.String.Trim(System.Char[])" />をメソッドでは文字列を切り捨てます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3039">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="43ecc-3040">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、どちらの方法は、同一の Unicode の空白文字のセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3040">In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</span></span></para>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, StringSplitOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-3041">この文字列から部分文字列を取り出すために区切り文字として使用する文字配列、区切り文字が含まれていない空の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3041">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="options">
          <span data-ttu-id="43ecc-3042">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3042"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="43ecc-3043">配列内の文字に基づいて文字列を部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3043">Splits a string into substrings based on the characters in an array.</span></span> <span data-ttu-id="43ecc-3044">部分文字列が空の配列の要素を含めるかどうかを指定することができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3044">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3045">この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3045">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="43ecc-3046">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3046">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="return-value-details"></a><span data-ttu-id="43ecc-3047">戻り値の詳細</span><span class="sxs-lookup"><span data-stu-id="43ecc-3047">Return value details</span></span>  
 <span data-ttu-id="43ecc-3048">区切り文字 (内の文字、`separator`配列) は、返された配列の要素に含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3048">Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array.</span></span> <span data-ttu-id="43ecc-3049">たとえば場合、`separator`配列には、文字が含まれています。"-"と、現在の文字列インスタンスの値は"aa、bb、cc"、3 つの要素を格納している配列を返します:"aa"、"bb"、および"cc"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3049">For example, if the `separator` array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="43ecc-3050">このインスタンスに内の文字が含まれていないかどうかは`separator`、返される配列は、このインスタンスを含む 1 つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3050">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="43ecc-3051">場合、`options`パラメーターは<xref:System.StringSplitOptions.RemoveEmptyEntries>とこのインスタンスの長さがゼロ、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3051">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>  
  
 <span data-ttu-id="43ecc-3052">各要素`separator`の 1 つの文字で構成されている別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3052">Each element of `separator` defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="43ecc-3053">場合、`options`引数は<xref:System.StringSplitOptions.None>、および隣接する 2 つの区切り記号または配列の対応する要素が含まれています、先頭または、このインスタンスの末尾に、区切り記号が見つかった<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3053">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-3054">たとえば場合、 `separator` 2 つの要素が含まれています"-"および"\_"、文字列インスタンスの値が"-\_aa -\_"、しの値、`options`引数が<xref:System.StringSplitOptions.None>で文字列の配列を返します次の 5 つの要素。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3054">For example, if `separator` includes  two elements, "-" and "\_", the value of the string instance is "-\_aa-\_", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:</span></span>  
  
1.  <span data-ttu-id="43ecc-3055"><xref:System.String.Empty?displayProperty=nameWithType>、前にある空の文字列を表す、"-"インデックス 0 にある文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3055"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" character at index 0.</span></span>  
  
2.  <span data-ttu-id="43ecc-3056"><xref:System.String.Empty?displayProperty=nameWithType>、との間の空の文字列を表す、"-"インデックス 0 とインデックス 1 の文字「_」で文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3056"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" character at index 0 and the "_" character at index 1.</span></span>  
  
3.  <span data-ttu-id="43ecc-3057">"aa"など</span><span class="sxs-lookup"><span data-stu-id="43ecc-3057">"aa",</span></span>  
  
4.  <span data-ttu-id="43ecc-3058"><xref:System.String.Empty?displayProperty=nameWithType>、インデックス 4 文字「_」に続く空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3058"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" character at index 4.</span></span>  
  
5.  <span data-ttu-id="43ecc-3059"><xref:System.String.Empty?displayProperty=nameWithType>、空の文字列に続くを表す、"-"インデックス 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3059"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" character at index 5.</span></span>  
  
## <a name="the-separator-array"></a><span data-ttu-id="43ecc-3060">区切り文字の配列</span><span class="sxs-lookup"><span data-stu-id="43ecc-3060">The separator array</span></span>  
 <span data-ttu-id="43ecc-3061">場合、`separator`パラメーターは`null`文字が含まれていない、または空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3061">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="43ecc-3062">空白文字は、Unicode standard、および戻り値によって定義`true`に渡される場合、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3062">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="43ecc-3063">場合、`separator`このメソッドのオーバー ロードの呼び出しでパラメーターが`null`コンパイラのオーバー ロードの解決は失敗します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3063">If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="43ecc-3064">呼び出されたメソッドを明確に識別するのには、コードがの種類を示す必要があります、`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3064">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="43ecc-3065">次の例では、このオーバー ロードを明確に指定するいくつかの方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3065">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#5)]
 [!code-vb[System.String.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#5)]  
  
## <a name="comparison-details"></a><span data-ttu-id="43ecc-3066">比較の詳細</span><span class="sxs-lookup"><span data-stu-id="43ecc-3066">Comparison details</span></span>  
 <span data-ttu-id="43ecc-3067"><xref:System.String.Split%2A>メソッドが 1 つまたは複数の文字で区切られた、この文字列内の部分文字列を抽出し、`separator`パラメーター、配列の要素としてそれらの部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3067">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="43ecc-3068"><xref:System.String.Split%2A>メソッドは大文字小文字を区別序数の並べ替え規則を使用する比較を実行することによって区切り記号を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3068">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="43ecc-3069">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3069">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="43ecc-3070">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3070">Performance Considerations</span></span>  
 <span data-ttu-id="43ecc-3071"><xref:System.String.Split%2A>メソッドが返される配列オブジェクトのメモリを割り当て、および<xref:System.String>配列の各要素のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3071">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="43ecc-3072">アプリケーションに最適なパフォーマンスを必要な場合、またはメモリの割り当てを管理するが、アプリケーションで重大な場合は、使用を検討、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>メソッド、および必要に応じて、<xref:System.String.Compare%2A>メソッドは、文字列内の部分文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3072">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="43ecc-3073">区切り文字で文字列を分割する場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>文字列の区切り文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3073">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="43ecc-3074">文字列の区切り記号文字列を分割している場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>の区切り記号文字列の最初の文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3074">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="43ecc-3075">使用して、<xref:System.String.Compare%2A>その最初の文字の後に文字が区切り記号文字列の残りの文字に等しいかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3075">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="43ecc-3076">さらに、同じ設定する場合の文字が使用で複数の文字列を分割する<xref:System.String.Split%2A>メソッド呼び出しは、1 つの配列を作成して、各メソッド呼び出し内での参照を検討してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3076">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="43ecc-3077">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3077">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3078">次の例では、<xref:System.StringSplitOptions>列挙体によって生成された部分文字列を含めたり、<xref:System.String.Split%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3078">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-3079"><paramref name="options" /> は <see cref="T:System.StringSplitOptions" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3079"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3080">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン場合、<see cref="M:System.String.Split(System.Char[])" />メソッドに渡されます、<paramref name="separator" />は<see langword="null" />文字が含まれていないか、メソッドは若干異なる一連の文字を使用してより文字列分割を<see cref="M:System.String.Trim(System.Char[])" />をメソッドでは文字列を切り捨てます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3080">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="43ecc-3081">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、どちらの方法は、同一の Unicode の空白文字のセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3081">In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, StringSplitOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-3082">この文字列から部分文字列を取り出すために区切り文字として使用する文字列配列。区切り文字が含まれていない空の配列。または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3082">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="options">
          <span data-ttu-id="43ecc-3083">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3083"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="43ecc-3084">配列内の文字列に基づいて文字列を部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3084">Splits a string into substrings based on the strings in an array.</span></span> <span data-ttu-id="43ecc-3085">部分文字列が空の配列の要素を含めるかどうかを指定することができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3085">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3086">この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字列) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3086">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span></span> <span data-ttu-id="43ecc-3087">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3087">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3088">文字列は、既知の一連の文字列で区切られた、ときに行うこともできます、<xref:System.String.Split%2A>部分文字列に分割する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3088">When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings.</span></span>  
  
## <a name="return-value-details"></a><span data-ttu-id="43ecc-3089">戻り値の詳細</span><span class="sxs-lookup"><span data-stu-id="43ecc-3089">Return value details</span></span>  
 <span data-ttu-id="43ecc-3090">区切り記号の文字列は、返される配列の要素には含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3090">Delimiter strings are not included in the elements of the returned array.</span></span> <span data-ttu-id="43ecc-3091">たとえば場合、`separator`配列には、文字列が含まれています。"-"と現在の文字列インスタンスの値は"aa--bb cc"、3 つの要素を格納している配列を返します:"aa"、"bb"、および"cc"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3091">For example, if the `separator` array includes the string "--" and the value of the current string instance is "aa--bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="43ecc-3092">このインスタンスに内の文字列が含まれていないかどうかは`separator`、返される配列は、このインスタンスを含む 1 つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3092">If this instance does not contain any of the strings in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="43ecc-3093">場合、`options`パラメーターは<xref:System.StringSplitOptions.RemoveEmptyEntries>とこのインスタンスの長さがゼロ、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3093">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>  
  
 <span data-ttu-id="43ecc-3094">各要素`separator`1 つ以上の文字で構成されている別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3094">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="43ecc-3095">場合、`options`引数は<xref:System.StringSplitOptions.None>、および隣接する 2 つの区切り記号または配列の対応する要素が含まれています、先頭または、このインスタンスの末尾に、区切り記号が見つかった<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3095">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-3096">たとえば場合、 `separator` 2 つの要素が含まれています"-"と「_」、文字列インスタンスの値は"- _aa -\_"、およびの値、`options`引数が<xref:System.StringSplitOptions.None>メソッドは、次の 5 つの要素の文字列配列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3096">For example, if `separator` includes  two elements, "-" and "_", the value of the string instance is "-_aa-\_", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a sting array with the following five elements:</span></span>  
  
1.  <span data-ttu-id="43ecc-3097"><xref:System.String.Empty?displayProperty=nameWithType>、前にある空の文字列を表す、"-"インデックスが 0 の部分文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3097"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" substring at index 0.</span></span>  
  
2.  <span data-ttu-id="43ecc-3098"><xref:System.String.Empty?displayProperty=nameWithType>、との間の空の文字列を表す、"-"インデックス 0 とインデックス 1 の「_」の部分文字列のサブスト リングします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3098"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" substring at index 0 and the "_" substring at index 1.</span></span>  
  
3.  <span data-ttu-id="43ecc-3099">"aa"など</span><span class="sxs-lookup"><span data-stu-id="43ecc-3099">"aa",</span></span>  
  
4.  <span data-ttu-id="43ecc-3100"><xref:System.String.Empty?displayProperty=nameWithType>、インデックス 4「_」の部分文字列に続く空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3100"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" substring at index 4.</span></span>  
  
5.  <span data-ttu-id="43ecc-3101"><xref:System.String.Empty?displayProperty=nameWithType>、空の文字列に続くを表す、"-"インデックス 5 にある部分文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3101"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" substring at index 5.</span></span>  
  
## <a name="the-separator-array"></a><span data-ttu-id="43ecc-3102">区切り文字の配列</span><span class="sxs-lookup"><span data-stu-id="43ecc-3102">The separator array</span></span>  
 <span data-ttu-id="43ecc-3103">内の要素のいずれかの`separator`は、複数の文字の部分文字列全体は、区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3103">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="43ecc-3104">たとえば、1 つの要素の`separator`「10」、"This10is10a10string"文字列を分割しようとしています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3104">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="43ecc-3105">次の 4 つの要素の配列を返します: {"This"、"is"、"a"、「文字列です」。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3105">returns the following four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="43ecc-3106">}.</span><span class="sxs-lookup"><span data-stu-id="43ecc-3106">}.</span></span>  
  
 <span data-ttu-id="43ecc-3107">場合、`separator`パラメーターは`null`文字が含まれていない、または空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3107">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="43ecc-3108">空白文字は、Unicode standard、および戻り値によって定義`true`に渡される場合、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3108">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="43ecc-3109">場合、`separator`このメソッドのオーバー ロードの呼び出しでパラメーターが`null`コンパイラのオーバー ロードの解決は失敗します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3109">If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="43ecc-3110">呼び出されたメソッドを明確に識別するのには、コードがの種類を示す必要があります、`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3110">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="43ecc-3111">次の例では、このオーバー ロードを明確に指定するいくつかの方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3111">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#6)]
 [!code-vb[System.String.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#6)]  
  
## <a name="comparison-details"></a><span data-ttu-id="43ecc-3112">比較の詳細</span><span class="sxs-lookup"><span data-stu-id="43ecc-3112">Comparison details</span></span>  
 <span data-ttu-id="43ecc-3113"><xref:System.String.Split%2A>メソッドが 1 つまたは複数の文字列で区切られた、この文字列内の部分文字列を抽出し、`separator`パラメーター、配列の要素としてそれらの部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3113">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="43ecc-3114"><xref:System.String.Split%2A>メソッドは大文字小文字を区別序数の並べ替え規則を使用する比較を実行することによって区切り記号を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3114">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="43ecc-3115">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3115">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
 <span data-ttu-id="43ecc-3116"><xref:System.String.Split%2A>メソッドのいずれかの要素は無視`separator`値がある`null`または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3116">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>  
  
 <span data-ttu-id="43ecc-3117">あいまいな結果を回避するときに文字列`separator`に共通の文字を含む、<xref:System.String.Split%2A>操作が、インスタンスの値の末尾に、最初からプロセスが実行され、最初の要素と一致する`separator`インスタンス内の区切り記号と同じであります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3117">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="43ecc-3118">部分文字列が、インスタンスで発生した順序で要素の順序よりも優先`separator`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3118">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>  
  
 <span data-ttu-id="43ecc-3119">たとえば、値を持つ"abcdef"のインスタンスがあるとします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3119">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="43ecc-3120">場合の最初の要素`separator`"ef"と 2 番目の要素が"bcde"、split 操作の結果は 2 つの要素を格納する文字列配列になりますが、"a"および"f"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3120">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be a string array that contains two elements, "a" and "f".</span></span> <span data-ttu-id="43ecc-3121">これは、"bcde"、インスタンス内の部分文字列が検出され、内の要素と一致するため`separator`"f"の部分文字列が発生するまでにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3121">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>  
  
 <span data-ttu-id="43ecc-3122">ただし場合の最初の要素`separator`"bc"を"bcd"と 2 番目の要素が、split 操作の結果は 2 つの要素を格納する文字列配列になりますが、"a"と"ef"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3122">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be a string array that contains two elements, "a" and "ef".</span></span> <span data-ttu-id="43ecc-3123">これは、"bcd"での最初の区切り記号であるため`separator`インスタンス内の区切り記号に一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3123">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="43ecc-3124">最初の要素が"bc"区切り記号の順序が取り消されたと 2 番目の要素が"bcd"では、結果は 2 つの要素を格納する文字列配列になります"a"と"def"。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3124">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be a string array that contains two elements,  "a" and "def".</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="43ecc-3125">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3125">Performance considerations</span></span>  
 <span data-ttu-id="43ecc-3126"><xref:System.String.Split%2A>メソッドが返される配列オブジェクトのメモリを割り当て、および<xref:System.String>配列の各要素のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3126">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="43ecc-3127">アプリケーションに最適なパフォーマンスを必要な場合、またはメモリの割り当てを管理するが、アプリケーションで重大な場合は、使用を検討、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>メソッド、および必要に応じて、<xref:System.String.Compare%2A>メソッドは、文字列内の部分文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3127">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="43ecc-3128">区切り文字で文字列を分割する場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>文字列の区切り文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3128">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="43ecc-3129">文字列の区切り記号文字列を分割している場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>の区切り記号文字列の最初の文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3129">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="43ecc-3130">使用して、<xref:System.String.Compare%2A>その最初の文字の後に文字が区切り記号文字列の残りの文字に等しいかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3130">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="43ecc-3131">さらに、同じ設定する場合の文字が使用で複数の文字列を分割する<xref:System.String.Split%2A>メソッド呼び出しは、1 つの配列を作成して、各メソッド呼び出し内での参照を検討してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3131">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="43ecc-3132">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3132">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3133">次の例は、文字列の呼び出しによって返された配列の違いを示しています。<xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType>メソッドをその`options`パラメーターと等しい<xref:System.StringSplitOptions.None?displayProperty=nameWithType>と<xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3133">The following example illustrates the difference in the arrays returned by calling a string's <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType> method with its `options` parameter equal to <xref:System.StringSplitOptions.None?displayProperty=nameWithType> and <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.String.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split.cs#1)]
 [!code-vb[System.String.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split.vb#1)]  
  
 <span data-ttu-id="43ecc-3134">次の例では、区切り記号と空白文字が含まれている区切り記号の配列を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3134">The following example defines an array of separators that include punctuation and white-space characters.</span></span> <span data-ttu-id="43ecc-3135">この配列の値と一緒に渡す<xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>を<xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29>メソッドは、文字列から個々 の単語で構成される配列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3135">Passing this array along with a value of <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> to the <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> method returns an array that consists of the individual words from the string.</span></span>  
  
 [!code-csharp[System.String.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split7.cs#7)]
 [!code-vb[System.String.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split7.vb#7)]  
  
 <span data-ttu-id="43ecc-3136">なお、メソッドが呼び出された、`options`引数に設定されて<xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3136">Note that the method is called with the `options` argument set to <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span> <span data-ttu-id="43ecc-3137">これにより、返される配列を含む<xref:System.String.Empty?displayProperty=nameWithType>区切り記号と空白文字の間の空の部分文字列の一致を表す値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3137">This prevents the returned array from including <xref:System.String.Empty?displayProperty=nameWithType> values that represent empty substring matches between punctuation marks and white-space characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-3138"><paramref name="options" /> は <see cref="T:System.StringSplitOptions" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3138"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3139">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン場合、<see cref="M:System.String.Split(System.Char[])" />メソッドに渡されます、<paramref name="separator" />は<see langword="null" />文字が含まれていないか、メソッドは若干異なる一連の文字を使用してより文字列分割を<see cref="M:System.String.Trim(System.Char[])" />をメソッドでは文字列を切り捨てます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3139">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="43ecc-3140">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、どちらの方法は、同一の Unicode の空白文字のセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3140">In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="count">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-3141">この文字列から部分文字列を取り出すために区切り文字として使用する文字配列、区切り文字が含まれていない空の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3141">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-3142">返される最大の部分文字列数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3142">The maximum number of substrings to return.</span></span></param>
        <param name="options">
          <span data-ttu-id="43ecc-3143">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3143"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="43ecc-3144">配列内の文字に基づいて文字列を最大数の部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3144">Splits a string into a maximum number of substrings based on the characters in an array.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3145">この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3145">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="43ecc-3146">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3146">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3147">返される配列の要素では、区切り文字は含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3147">Delimiter characters are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="43ecc-3148">このインスタンスに内の文字が含まれていないかどうかは`separator`、または`count`パラメーターが 1、返される配列は、このインスタンスを含む 1 つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3148">If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="43ecc-3149">場合、`separator`パラメーターは`null`文字が含まれていない、または空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3149">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="43ecc-3150">空白文字は、Unicode standard、および戻り値によって定義`true`に渡される場合、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3150">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43ecc-3151">ただし場合、`separator`このメソッドのオーバー ロードの呼び出しでパラメーターが`null`コンパイラのオーバー ロードの解決は失敗します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3151">However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="43ecc-3152">呼び出されたメソッドを明確に識別するには、コードは、null の種類を示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3152">To unambiguously identify the called method, your code must indicate the type of the null.</span></span> <span data-ttu-id="43ecc-3153">次の例では、このオーバー ロードを明確に指定するいくつかの方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3153">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#3)]
 [!code-vb[System.String.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#3)]  
  
 <span data-ttu-id="43ecc-3154">場合、`count`パラメーターが 0、または`options`パラメーターは<xref:System.StringSplitOptions.RemoveEmptyEntries>し、このインスタンスの長さが 0、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3154">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="43ecc-3155">各要素`separator`別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3155">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="43ecc-3156">場合、`options`パラメーターは<xref:System.StringSplitOptions.None>、および隣接する 2 つの区切り記号または配列の対応する要素が含まれています、先頭または、このインスタンスの末尾に、区切り記号が見つかった<xref:System.String.Empty>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3156">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="43ecc-3157">ある場合は、複数の`count`、このインスタンス内の部分文字列最初`count`マイナス 1 の部分文字列は、最初に返されます`count`マイナス 1 の要素の戻り値は、このインスタンスの残りの文字は、戻り値の最後の要素で返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3157">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="43ecc-3158">場合`count`数よりも大きいの部分文字列の使用可能な部分文字列が返され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3158">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="43ecc-3159">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3159">Performance Considerations</span></span>  
 <span data-ttu-id="43ecc-3160"><xref:System.String.Split%2A>メソッドが返される配列オブジェクトのメモリを割り当て、および<xref:System.String>配列の各要素のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3160">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="43ecc-3161">アプリケーションに最適なパフォーマンスを必要な場合、またはメモリの割り当てを管理するが、アプリケーションで重大な場合は、使用を検討、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>メソッド、および必要に応じて、<xref:System.String.Compare%2A>メソッドは、文字列内の部分文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3161">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="43ecc-3162">区切り文字で文字列を分割する場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>文字列の区切り文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3162">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="43ecc-3163">文字列の区切り記号文字列を分割している場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>の区切り記号文字列の最初の文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3163">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="43ecc-3164">使用して、<xref:System.String.Compare%2A>その最初の文字の後に文字が区切り記号文字列の残りの文字に等しいかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3164">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="43ecc-3165">さらに、同じ設定する場合の文字が使用で複数の文字列を分割する<xref:System.String.Split%2A>メソッド呼び出しは、1 つの配列を作成して、各メソッド呼び出し内での参照を検討してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3165">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="43ecc-3166">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3166">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3167">次の例では、<xref:System.StringSplitOptions>列挙体によって生成された部分文字列を含めたり、<xref:System.String.Split%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3167">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-3168"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3168"><paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-3169"><paramref name="options" /> は <see cref="T:System.StringSplitOptions" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3169"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3170">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン場合、<see cref="M:System.String.Split(System.Char[])" />メソッドに渡されます、<paramref name="separator" />は<see langword="null" />文字が含まれていないか、メソッドは若干異なる一連の文字を使用してより文字列分割を<see cref="M:System.String.Trim(System.Char[])" />をメソッドでは文字列を切り捨てます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3170">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="43ecc-3171">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、どちらの方法は、同一の Unicode の空白文字のセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3171">In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="count">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="43ecc-3172">この文字列から部分文字列を取り出すために区切り文字として使用する文字列配列。区切り文字が含まれていない空の配列。または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3172">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="43ecc-3173">返される最大の部分文字列数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3173">The maximum number of substrings to return.</span></span></param>
        <param name="options">
          <span data-ttu-id="43ecc-3174">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3174"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="43ecc-3175">配列内の文字列に基づいて文字列を最大数の部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3175">Splits a string into a maximum number of substrings based on the strings in an array.</span></span> <span data-ttu-id="43ecc-3176">部分文字列が空の配列の要素を含めるかどうかを指定することができます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3176">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3177">この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字列) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3177">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span></span> <span data-ttu-id="43ecc-3178">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3178">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="return-value-details"></a><span data-ttu-id="43ecc-3179">戻り値の詳細</span><span class="sxs-lookup"><span data-stu-id="43ecc-3179">Return value details</span></span>  
 <span data-ttu-id="43ecc-3180">区切り記号の文字列は、返される配列の要素には含まれません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3180">Delimiter strings are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="43ecc-3181">このインスタンスに内の文字列が含まれていないかどうかは`separator`、または`count`パラメーターが 1、返される配列は、このインスタンスを含む 1 つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3181">If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="43ecc-3182">場合、`separator`パラメーターは`null`文字が含まれていない、または空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3182">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="43ecc-3183">空白文字は、Unicode standard、および戻り値によって定義`true`に渡される場合、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3183">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43ecc-3184">ただし場合、`separator`このメソッドのオーバー ロードの呼び出しでパラメーターが`null`コンパイラのオーバー ロードの解決は失敗します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3184">However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="43ecc-3185">呼び出されたメソッドを明確に識別するのには、コードがの種類を示す必要があります、`null`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3185">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="43ecc-3186">次の例では、このオーバー ロードを明確に指定するいくつかの方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3186">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#4)]
 [!code-vb[System.String.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#4)]  
  
 <span data-ttu-id="43ecc-3187">場合、`count`パラメーターが 0、または`options`パラメーターは<xref:System.StringSplitOptions.RemoveEmptyEntries>し、このインスタンスの長さが 0、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3187">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="43ecc-3188">各要素`separator`1 つ以上の文字で構成されている別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3188">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="43ecc-3189">場合、`options`パラメーターは<xref:System.StringSplitOptions.None>、および隣接する 2 つの区切り記号または配列の対応する要素が含まれています、先頭または、このインスタンスの末尾に、区切り記号が見つかった<xref:System.String.Empty>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3189">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="43ecc-3190">ある場合は、複数の`count`、このインスタンス内の部分文字列最初`count`マイナス 1 の部分文字列は、最初に返されます`count`マイナス 1 の要素の戻り値は、このインスタンスの残りの文字は、戻り値の最後の要素で返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3190">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="43ecc-3191">場合`count`数よりも大きいの部分文字列の使用可能な部分文字列が返され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3191">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
## <a name="the-separator-array"></a><span data-ttu-id="43ecc-3192">区切り文字の配列</span><span class="sxs-lookup"><span data-stu-id="43ecc-3192">The separator array</span></span>  
 <span data-ttu-id="43ecc-3193">内の要素のいずれかの`separator`は、複数の文字の部分文字列全体は、区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3193">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="43ecc-3194">たとえば、1 つの要素の`separator`「10」、"This10is10a10string"文字列を分割しようとしています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3194">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="43ecc-3195">この 4 つの要素の配列を返します: {"This"、"is"、"a"、「文字列です」。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3195">returns this four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="43ecc-3196">}.</span><span class="sxs-lookup"><span data-stu-id="43ecc-3196">}.</span></span>  
  
## <a name="comparison-details"></a><span data-ttu-id="43ecc-3197">比較の詳細</span><span class="sxs-lookup"><span data-stu-id="43ecc-3197">Comparison details</span></span>  
 <span data-ttu-id="43ecc-3198"><xref:System.String.Split%2A>メソッドが 1 つまたは複数の文字列で区切られた、この文字列内の部分文字列を抽出し、`separator`パラメーター、配列の要素としてそれらの部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3198">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="43ecc-3199"><xref:System.String.Split%2A>メソッドは大文字小文字を区別序数の並べ替え規則を使用する比較を実行することによって区切り記号を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3199">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="43ecc-3200">Word、文字列、および序数の並べ替えの詳細については、次を参照してください。、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>列挙します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3200">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
 <span data-ttu-id="43ecc-3201"><xref:System.String.Split%2A>メソッドのいずれかの要素は無視`separator`値がある`null`または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3201">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>  
  
 <span data-ttu-id="43ecc-3202">あいまいな結果を回避するときに文字列`separator`に共通の文字を含む、<xref:System.String.Split%2A>メソッドが、インスタンスの値の末尾に、最初からプロセスが実行され、最初の要素と一致する`separator`インスタンス内の区切り記号と同じであります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3202">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="43ecc-3203">部分文字列が、インスタンスで発生した順序で要素の順序よりも優先`separator`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3203">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>  
  
 <span data-ttu-id="43ecc-3204">たとえば、値を持つ"abcdef"のインスタンスがあるとします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3204">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="43ecc-3205">場合の最初の要素`separator`"ef"と 2 番目の要素が"bcde"、split 操作の結果になりますが、"a"および"f"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3205">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be "a" and "f".</span></span> <span data-ttu-id="43ecc-3206">これは、"bcde"、インスタンス内の部分文字列が検出され、内の要素と一致するため`separator`"f"の部分文字列が発生するまでにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3206">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>  
  
 <span data-ttu-id="43ecc-3207">ただし場合の最初の要素`separator`"bc"を"bcd"と 2 番目の要素が、split 操作の結果になりますが、"a"と"ef"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3207">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be "a" and "ef".</span></span> <span data-ttu-id="43ecc-3208">これは、"bcd"での最初の区切り記号であるため`separator`インスタンス内の区切り記号に一致します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3208">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="43ecc-3209">最初の要素が"bc"区切り記号の順序が取り消された場合と"bcd"に、2 番目の要素が結果になります"a"と"def"。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3209">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be "a" and "def".</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="43ecc-3210">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3210">Performance considerations</span></span>  
 <span data-ttu-id="43ecc-3211"><xref:System.String.Split%2A>メソッドが返される配列オブジェクトのメモリを割り当て、および<xref:System.String>配列の各要素のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3211">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="43ecc-3212">アプリケーションに最適なパフォーマンスを必要な場合、またはメモリの割り当てを管理するが、アプリケーションで重大な場合は、使用を検討、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>メソッド、および必要に応じて、<xref:System.String.Compare%2A>メソッドは、文字列内の部分文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3212">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="43ecc-3213">区切り文字で文字列を分割する場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>文字列の区切り文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3213">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="43ecc-3214">文字列の区切り記号文字列を分割している場合を使用して、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOfAny%2A>の区切り記号文字列の最初の文字を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3214">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="43ecc-3215">使用して、<xref:System.String.Compare%2A>その最初の文字の後に文字が区切り記号文字列の残りの文字に等しいかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3215">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="43ecc-3216">さらに、同じ設定する場合の文字が使用で複数の文字列を分割する<xref:System.String.Split%2A>メソッド呼び出しは、1 つの配列を作成して、各メソッド呼び出し内での参照を検討してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3216">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="43ecc-3217">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3217">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3218">次の例では、<xref:System.StringSplitOptions>列挙体によって生成された部分文字列を含めたり、<xref:System.String.Split%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3218">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-3219"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3219"><paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-3220"><paramref name="options" /> は <see cref="T:System.StringSplitOptions" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3220"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3221">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン場合、<see cref="M:System.String.Split(System.Char[])" />メソッドに渡されます、<paramref name="separator" />は<see langword="null" />文字が含まれていないか、メソッドは若干異なる一連の文字を使用してより文字列分割を<see cref="M:System.String.Trim(System.Char[])" />をメソッドでは文字列を切り捨てます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3221">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="43ecc-3222">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、どちらの方法は、同一の Unicode の空白文字のセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3222">In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</span></span></para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-3223">この文字列インスタンスの先頭が、指定した文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3223">Determines whether the beginning of this string instance matches a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-3224">比較対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3224">The string to compare.</span></span></param>
        <summary><span data-ttu-id="43ecc-3225">この文字列インスタンスの先頭が、指定した文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3225">Determines whether the beginning of this string instance matches the specified string.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-3226">この文字列の先頭が <see langword="true" /> と一致する場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3226"><see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3227">このメソッドは比較`value`、長さと同じであるこのインスタンスの先頭部分文字列`value`、し、それらが等しいかどうか示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3227">This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="43ecc-3228">等しく、`value`空の文字列を指定する必要があります (<xref:System.String.Empty?displayProperty=nameWithType>)、この同じインスタンスへの参照があります。 または、このインスタンスの先頭に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3228">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>  
  
 <span data-ttu-id="43ecc-3229">このメソッドは、現在のカルチャを使用して、単語 (大文字小文字を区別やカルチャ) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3229">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3230">次の例、`StripStartTags`で使用する方法、 <xref:System.String.StartsWith%28System.String%29> HTML を削除する方法は、文字列の先頭からタグを開始します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3230">The following example defines a `StripStartTags` method that uses the <xref:System.String.StartsWith%28System.String%29> method to remove HTML start tags from the beginning of a string.</span></span> <span data-ttu-id="43ecc-3231">なお、`StripStartTags`メソッドは再帰的に、行の先頭に複数の HTML 開始タグを削除することを確認します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3231">Note that the `StripStartTags` method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed.</span></span> <span data-ttu-id="43ecc-3232">この例では、文字列に埋め込まれている HTML タグは削除されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3232">The example does not remove HTML tags embedded in a string.</span></span>  
  
 [!code-cpp[stringstartswith#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringstartswith/CPP/stringstartswith.cpp#1)]
 [!code-csharp[stringstartswith#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringstartswith/CS/stringstartswith.cs#1)]
 [!code-vb[stringstartswith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringstartswith/VB/stringstartswith.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-3233"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3233"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3234">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列比較メソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3234">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-3235">文字列が現在のカルチャの文字列比較の規則を使用して、特定の部分文字列で始まるかどうかを判断するのには、呼び出し、<see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />の値を持つメソッド オーバー ロード<see cref="F:System.StringComparison.CurrentCulture" />の<paramref name="comparisonType" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3235">To determine whether a string begins with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para>
        </block>
        <altmember cref="M:System.String.EndsWith(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-3236">比較対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3236">The string to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="43ecc-3237">この文字列と <c>value</c> との比較方法を決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3237">One of the enumeration values that determines how this string and <c>value</c> are compared.</span></span></param>
        <summary><span data-ttu-id="43ecc-3238">指定された比較オプションを使って比較した場合に、この文字列インスタンスの先頭が、指定された文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3238">Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-3239">インスタンスが <see langword="true" /> で開始する場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3239"><see langword="true" /> if this instance begins with <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3240"><xref:System.String.StartsWith%2A>メソッドに比較して、`value`この文字列の先頭にある部分文字列にパラメーターをそれらが等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3240">The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="43ecc-3241">等しく、`value`この同じ文字列への参照を指定する必要があります、空の文字列にする必要があります ("")、またはこの文字列の先頭に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3241">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the beginning of this string.</span></span> <span data-ttu-id="43ecc-3242">によって実行される比較の種類、<xref:System.String.StartsWith%2A>メソッドの値によって異なります、`comparisonType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3242">The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span> <span data-ttu-id="43ecc-3243">比較は、現在のカルチャの規則を使用できます (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>と<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) のカルチャまたはインバリアント カルチャ (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>と<xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>)、または、コード ポイントの文字の比較で構成されていることができます (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>または<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3243">The comparison can use the conventions of the current culture (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> and <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) or the invariant culture (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> and <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span> <span data-ttu-id="43ecc-3244">比較は大文字小文字を区別することもできます (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>、 <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>、または<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>)、大文字小文字を区別、または (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>、 <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>、 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3244">The comparison can also be case-sensitive (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>, or <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>), or it can ignore case (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3245">次の例は、文字列の検索の"the"という単語で始まる長い文字列の先頭に"The"です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3245">The following example searches for the string "the" at the beginning of a longer string that begins with the word "The".</span></span> <span data-ttu-id="43ecc-3246">例への呼び出しからの出力として、<xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29>カルチャおよび大文字小文字 insensitive の比較を実行する呼び出し文字列と一致するときに、文字列に一致するカルチャを認識しないが、区別する比較を実行するメソッドは失敗します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3246">As the output from the example shows, a call to the <xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29> method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string.</span></span>  
  
 [!code-cpp[System.String.StartsWith#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/StartsWith2.cpp#2)]
 [!code-csharp[System.String.StartsWith#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/StartsWith2.cs#2)]
 [!code-vb[System.String.StartsWith#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/StartsWith2.vb#2)]  
  
 <span data-ttu-id="43ecc-3247">次の例では、文字列が特定の部分文字列で始まるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3247">The following example determines whether a string starts with a particular substring.</span></span> <span data-ttu-id="43ecc-3248">これには、2 次元の文字列配列を初期化します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3248">It initializes a two-dimensional string array.</span></span> <span data-ttu-id="43ecc-3249">2 番目の次元内の最初の要素を含む文字列、および 2 番目の要素には、最初の文字列の開始時に検索する文字列が含まれています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3249">The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string.</span></span> <span data-ttu-id="43ecc-3250">結果は、カルチャ、大文字と小文字の区別するかどうか、および序数に基づく比較を実行するかどうかの選択の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3250">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span> <span data-ttu-id="43ecc-3251">文字列のインスタンスにする合字が含まれている場合、連続する文字のカルチャに依存した比較が正常に一致する注意してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3251">Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.</span></span>  
  
 [!code-cpp[System.String.StartsWith#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/startswith1.cpp#1)]
 [!code-csharp[System.String.StartsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/startswith1.cs#1)]
 [!code-vb[System.String.StartsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/startswith1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-3252"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3252"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="43ecc-3253"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3253"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="43ecc-3254">比較対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3254">The string to compare.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="43ecc-3255">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3255"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="43ecc-3256">この文字列と <c>value</c> との比較方法を決定するカルチャ情報。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3256">Cultural information that determines how this string and <c>value</c> are compared.</span></span> <span data-ttu-id="43ecc-3257"><c>culture</c> が <see langword="null" /> の場合は、現在のカルチャが使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3257">If <c>culture</c> is <see langword="null" />, the current culture is used.</span></span></param>
        <summary><span data-ttu-id="43ecc-3258">指定されたカルチャを使って比較した場合に、この文字列インスタンスの先頭が、指定された文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3258">Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-3259"><see langword="true" /> パラメーターがこの文字列の先頭と一致する場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3259"><see langword="true" /> if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3260">このメソッドを比較して、`value`パラメーターと同じ長さであるこの文字列の先頭にある部分文字列を`value`、し、それらが等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3260">This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="43ecc-3261">等しく、`value`空の文字列を指定する必要があります (<xref:System.String.Empty?displayProperty=nameWithType>)、この同じインスタンスへの参照があります。 または、このインスタンスの先頭に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3261">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>  
  
 <span data-ttu-id="43ecc-3262">このメソッドは、指定した大文字小文字の区別とカルチャを使用して、比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3262">This method performs a comparison using the specified casing and culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3263">次の例では、文字列が別の文字列の先頭に出現するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3263">The following example determines whether a string occurs at the beginning of another string.</span></span> <span data-ttu-id="43ecc-3264"><xref:System.String.StartsWith%2A>大文字小文字の区別、大文字と小文字の区別、および検索の結果に影響する異なるカルチャを使用して数回メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3264">The <xref:System.String.StartsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>  
  
 [!code-csharp[system.string.StartsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.StartsWithCI/cs/swci.cs#1)]
 [!code-vb[system.string.StartsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.StartsWithCI/vb/swci.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-3265"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3265"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Substring">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-3266">インスタンスから部分文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3266">Retrieves a substring from this instance.</span></span>  
  
 <span data-ttu-id="43ecc-3267">このメンバーはオーバーロードされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3267">This member is overloaded.</span></span> <span data-ttu-id="43ecc-3268">構文、使用方法、例など、このメンバーの詳細については、オーバーロード リストで名前をクリックしてください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3268">For complete information about this member, including syntax, usage, and examples, click a name in the overload list.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="43ecc-3269">このインスタンス内の部分文字列の 0 から始まる開始文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3269">The zero-based starting character position of a substring in this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-3270">インスタンスから部分文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3270">Retrieves a substring from this instance.</span></span> <span data-ttu-id="43ecc-3271">部分文字列は、文字列中の指定した文字の位置で開始し、文字列の末尾まで続きます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3271">The substring starts at a specified character position and continues to the end of the string.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3272">このインスタンスの <paramref name="startIndex" /> で始まる部分文字列と等価な文字列。または、<paramref name="startIndex" /> がこのインスタンスの長さと等しい場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3272">A string that is equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3273">呼び出す、<xref:System.String.Substring%2A>メソッドを指定した文字位置から開始し、文字列の末尾で終了する文字列から部分文字列を抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3273">You call the <xref:System.String.Substring%2A> method to extract a substring from a string that begins at a specified character position and ends at the end of the string.</span></span> <span data-ttu-id="43ecc-3274">開始する文字位置が、0 から始まります。つまり、文字列の最初の文字はインデックス 0、インデックス 1 ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3274">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="43ecc-3275">指定した文字位置から開始され、文字列の末尾にする前に終了する部分文字列を抽出する呼び出し、<xref:System.String.Substring%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3275">To extract a substring that begins at a specified character position and ends before to the end of the string, call the <xref:System.String.Substring%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3276">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3276">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3277">代わりで開始された新しい文字列を返します、`startIndex`現在の文字列内の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3277">Instead, it returns a new string that begins at the `startIndex` position in the current string.</span></span>  
  
 <span data-ttu-id="43ecc-3278">特定の文字または文字のシーケンスで始まる部分文字列を抽出するにメソッドを呼び出すよう<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOf%2A>の値を取得する`startIndex`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3278">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`.</span></span> <span data-ttu-id="43ecc-3279">2 番目の例を示します。「=」文字の後に 1 つの文字位置を開始するキーの値を抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3279">The second example illustrates this; it extracts a key value that begins one character position after the "=" character.</span></span>  
  
 <span data-ttu-id="43ecc-3280">場合`startIndex`は 0、元の文字列が変更されていないメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3280">If `startIndex` is equal to zero, the method returns the original string unchanged.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3281">次の例では、文字列から部分文字列の取得を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3281">The following example demonstrates obtaining a substring from a string.</span></span>  
  
 [!code-cpp[System.String.Substring#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.String.Substring/cpp/Substring10.cpp#10)]
 [!code-csharp[System.String.Substring#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring10.cs#10)]
 [!code-vb[System.String.Substring#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring10.vb#10)]  
  
 <span data-ttu-id="43ecc-3282">次の例では、<xref:System.String.Substring%2A>メソッドは等号で区切られたキーと値のペアを区切る文字 (「=」)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3282">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>  
  
 [!code-csharp[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]  
  
 <span data-ttu-id="43ecc-3283"><xref:System.String.IndexOf%2A>メソッドを使用して、等号文字の文字列内の位置を取得する.</span><span class="sxs-lookup"><span data-stu-id="43ecc-3283">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string..</span></span> <span data-ttu-id="43ecc-3284">呼び出し、<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>メソッドを抽出し、キー名。 は、文字列の最初の文字から開始し、への呼び出しによって返される文字数の範囲を拡大する、<xref:System.String.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3284">The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="43ecc-3285">呼び出し、<xref:System.String.Substring%28System.Int32%29>メソッドは、そのキーに割り当てられた値を抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3285">The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="43ecc-3286">Equals 文字よりも 1 つの文字位置から開始し、文字列の末尾にまで拡張します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3286">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-3287"><paramref name="startIndex" /> が、0 未満か、またはこのインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3287"><paramref name="startIndex" /> is less than zero or greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="43ecc-3288">このインスタンス内の部分文字列の 0 から始まる開始文字位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3288">The zero-based starting character position of a substring in this instance.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-3289">部分文字列の文字数。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3289">The number of characters in the substring.</span></span></param>
        <summary><span data-ttu-id="43ecc-3290">インスタンスから部分文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3290">Retrieves a substring from this instance.</span></span> <span data-ttu-id="43ecc-3291">この部分文字列は、指定した文字位置から開始し、指定した文字数の文字列です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3291">The substring starts at a specified character position and has a specified length.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3292">このインスタンスの <paramref name="startIndex" /> から始まる長さ <paramref name="length" /> の部分文字列と等価な文字列。または、<paramref name="startIndex" /> がこのインスタンスの長さと等しく、<paramref name="length" /> がゼロの場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3292">A string that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3293">呼び出す、<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>メソッドを指定した文字位置から開始され、文字列の終了前に終了する文字列から部分文字列を抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3293">You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string.</span></span> <span data-ttu-id="43ecc-3294">開始する文字位置が、0 から始まります。つまり、文字列の最初の文字はインデックス 0、インデックス 1 ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3294">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="43ecc-3295">指定した文字位置から開始し、文字列の末尾に続行する部分文字列を抽出するを呼び出して、<xref:System.String.Substring%28System.Int32%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3295">To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3296">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3296">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3297">代わりを持つ新しい文字列を返します`length`から文字、`startIndex`現在の文字列内の位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3297">Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.</span></span>  
  
 <span data-ttu-id="43ecc-3298">`length`パラメーターは、現在の文字列のインスタンスから抽出する文字の合計数を表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3298">The `length` parameter represents the total number of characters to extract from the current string instance.</span></span> <span data-ttu-id="43ecc-3299">これにより、インデックスにある検出の開始文字が含まれます。`startIndex`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3299">This includes the starting character found at index  `startIndex`.</span></span>  <span data-ttu-id="43ecc-3300">言い換えると、<xref:System.String.Substring%2A>メソッドが、インデックスから文字を抽出しようとしています。`startIndex`インデックスに`startIndex`  +  `length` - 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3300">In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1.</span></span>  
  
 <span data-ttu-id="43ecc-3301">特定の文字または文字のシーケンスで始まる部分文字列を抽出するにメソッドを呼び出すよう<xref:System.String.IndexOf%2A>または<xref:System.String.LastIndexOf%2A>の値を取得する`startIndex`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3301">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the value of `startIndex`.</span></span>  
  
 <span data-ttu-id="43ecc-3302">部分文字列の場合`startIndex`、指定された文字シーケンスにできるメソッドを呼び出すよう<xref:System.String.IndexOf%2A>または<xref:System.String.LastIndexOf%2A>終了文字または文字のシーケンスのインデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3302">If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence.</span></span>  <span data-ttu-id="43ecc-3303">文字列内のインデックス位置に次のように、その値を変換できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3303">You can then convert that value to an index position in the string as follows:</span></span>  
  
-   <span data-ttu-id="43ecc-3304">部分文字列の末尾を設定する単一の文字を検索する場合、`length`パラメーターと等しい`endIndex`  -  `startIndex`は + 1、ここで`endIndex`の戻り値は、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3304">If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="43ecc-3305">次の例では、文字列から文字"b"の連続ブロックを抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3305">The following example extracts a continuous block of "b" characters from a string.</span></span>  
  
     [!code-csharp[System.String.Substring#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)]
     [!code-vb[System.String.Substring#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)]  
  
-   <span data-ttu-id="43ecc-3306">、部分文字列の末尾を示すには、複数の文字を検索する場合、`length`パラメーターと等しい`endIndex`  +  `endMatchLength`  - `startIndex`ここで、`endIndex`の戻り値は、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOf%2A>メソッド。 および`endMatchLength`部分文字列の末尾をマークする文字シーケンスの長さです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3306">If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method., and `endMatchLength` is the length of the character sequence that marks the end of the substring.</span></span> <span data-ttu-id="43ecc-3307">次の例は、XML が含まれているテキストのブロックを抽出`<definition>`要素。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3307">The following example extracts a block of text that contains an XML `<definition>` element.</span></span>  
  
     [!code-csharp[System.String.Substring#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)]
     [!code-vb[System.String.Substring#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)]  
  
-   <span data-ttu-id="43ecc-3308">、部分文字列の末尾には、文字または文字シーケンスは含まれていない場合、`length`パラメーターと等しい`endIndex`  - `startIndex`ここで、`endIndex`の戻り値は、<xref:System.String.IndexOf%2A>または<xref:System.String.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3308">If the character or character sequence is not included in the end of the substring, the `length` parameter equals `endIndex` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span>  
  
 <span data-ttu-id="43ecc-3309">場合`startIndex`は 0 と equals メソッド、現在の文字列の長さを変更せず、元の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3309">If `startIndex` is equal to zero and  equals the length of the current string, the method returns the original string unchanged.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3310">次の例では、単純な呼び出しを<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>6 番目の文字位置から始まる文字列から 2 つの文字を抽出する方法 (つまり、インデックス 5)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3310">The following example illustrates a simple call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method that extracts two characters from a string starting at the sixth character position (that is, at index five).</span></span>  
  
 [!code-csharp[System.String.Substring#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring4.cs#4)]
 [!code-vb[System.String.Substring#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring4.vb#4)]  
  
 <span data-ttu-id="43ecc-3311">次の例では、<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>メソッドで、次の 3 つの場合、文字列内の部分文字列を分離します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3311">The following example uses the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method in the following three cases to isolate substrings within a string.</span></span> <span data-ttu-id="43ecc-3312">比較では、2 つの場合、部分文字列が使用して、無効なパラメーターが指定されているため、3 番目のケースで、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3312">In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.</span></span>  
  
-   <span data-ttu-id="43ecc-3313">1 つの文字と (インデックス 2) の文字列の 3 番目の位置を抽出し、"c"と比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3313">It extracts the single character and the third position in the string (at index 2) and compares it with a "c".</span></span> <span data-ttu-id="43ecc-3314">この比較を返します`true`です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3314">This comparison returns `true`.</span></span>  
  
-   <span data-ttu-id="43ecc-3315">(インデックス 3) の文字列の 4 番目の位置にあるゼロ文字を抽出してに渡します、<xref:System.String.IsNullOrEmpty%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3315">It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <xref:System.String.IsNullOrEmpty%2A> method.</span></span> <span data-ttu-id="43ecc-3316">これは true を返すためへの呼び出し、<xref:System.String.Substring%2A>メソッドを返します。<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3316">This returns true because the call to the <xref:System.String.Substring%2A> method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="43ecc-3317">文字列の 4 番目の位置以降にある 1 つの文字を抽出しようとします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3317">It attempts to extract one character starting at the fourth position in the string.</span></span> <span data-ttu-id="43ecc-3318">その位置にある文字がないため、メソッドの呼び出しをスロー、<xref:System.ArgumentOutOfRangeException>例外。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3318">Because there is no character at that position, the method call throws an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 [!code-csharp[Classic String.Substring1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.Substring1 Example/CS/source.cs#1)]
 [!code-vb[Classic String.Substring1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.Substring1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="43ecc-3319">次の例では、<xref:System.String.Substring%2A>メソッドは等号で区切られたキーと値のペアを区切る文字 (「=」)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3319">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>  
  
 [!code-csharp[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]  
  
 <span data-ttu-id="43ecc-3320"><xref:System.String.IndexOf%2A>メソッドを使用して、等号文字の文字列内の位置を取得する.</span><span class="sxs-lookup"><span data-stu-id="43ecc-3320">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string..</span></span> <span data-ttu-id="43ecc-3321">呼び出し、<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>メソッドを抽出し、キー名。 は、文字列の最初の文字から開始し、への呼び出しによって返される文字数の範囲を拡大する、<xref:System.String.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3321">The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="43ecc-3322">呼び出し、<xref:System.String.Substring%28System.Int32%29>メソッドは、そのキーに割り当てられた値を抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3322">The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="43ecc-3323">Equals 文字よりも 1 つの文字位置から開始し、文字列の末尾にまで拡張します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3323">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-3324"><paramref name="startIndex" /> に<paramref name="length" /> を加算した値はこのインスタンスの範囲外である位置を示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3324"><paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.</span></span>  
  
 <span data-ttu-id="43ecc-3325">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-3325">-or-</span></span>  
  
 <span data-ttu-id="43ecc-3326"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3326"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span></exception>
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;char&gt; IEnumerable&lt;char&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;char&gt; System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#Generic#IEnumerable&lt;char&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Char) Implements IEnumerable(Of Char).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;char&gt; ^ System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;char&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3327">現在の <see cref="T:System.String" /> オブジェクトを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3327">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3328">現在の <see cref="T:System.String" /> オブジェクトを反復処理するために使用できる、厳密に型指定された列挙子。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3328">A strongly-typed enumerator that can be used to iterate through the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3329">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3329">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3330">使用する場合にのみ、<xref:System.String>にインスタンスをキャスト、<xref:System.Collections.Generic.IEnumerable%601>インターフェイス オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3330">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object.</span></span> <span data-ttu-id="43ecc-3331">詳細については、<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3331">For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3332">現在の <see cref="T:System.String" /> オブジェクトを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3332">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3333">現在の文字列を反復処理するために使用できる列挙子。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3333">An enumerator that can be used to iterate through the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3334">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3334">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3335">これは、<xref:System.String> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3335">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="43ecc-3336">詳細については、<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3336">For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3337">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3337">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="43ecc-3338">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3338">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns>
          <span data-ttu-id="43ecc-3339">現在の文字列の値が <see langword="true" /> の場合は <see cref="F:System.Boolean.TrueString" />。現在の文字列の値が <see langword="false" /> の場合は <see cref="F:System.Boolean.FalseString" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3339"><see langword="true" /> if the value of the current string is <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if the value of the current string is <see cref="F:System.Boolean.FalseString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3340">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3340">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3341">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3341">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3342">推奨される代替手段が呼び出されて、<xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3342">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-3343">現在の文字列の値が <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3343">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3344">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3344">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3345">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3345">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3346">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3346">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3347">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3347">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3348">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3348">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3349">推奨される代替手段が呼び出されて、<xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3349">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-3350">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3350">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="43ecc-3351">現在の <see cref="T:System.String" /> オブジェクトの値が、<see cref="F:System.Byte.MaxValue" /> より大きいか、<see cref="F:System.Byte.MinValue" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3351">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3352">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3352">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3353">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3353">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3354">現在の <see cref="T:System.String" /> オブジェクトのインデックス 0 位置にある文字。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3354">The character at index 0 in the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3355">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3355">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3356">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3356">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3357">推奨される代替手段が呼び出されて、<xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3357">The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3358">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3358">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3359">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3359">For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3360">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3360">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3361">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3361">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3362">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3362">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3363">推奨される代替手段が呼び出されて、<xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3363">The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3364">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3364">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3365">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3365">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3366">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3366">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3367">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3367">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3368">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3368">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3369">推奨される代替手段が呼び出されて、<xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3369">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-3370">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3370">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="43ecc-3371">現在の <see cref="T:System.String" /> オブジェクトの値が、<see cref="F:System.Decimal.MinValue" /> より小さいか、<see cref="F:System.Decimal.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3371">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3372">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3372">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3373">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3373">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3374">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3374">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3375">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3375">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3376">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3376">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3377">推奨される代替手段が呼び出されて、<xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3377">The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-3378">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3378">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="43ecc-3379">現在の <see cref="T:System.String" /> オブジェクトの値が、<see cref="F:System.Double.MinValue" /> より小さいか、<see cref="F:System.Double.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3379">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3380">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3380">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3381">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3381">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3382">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3382">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3383">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3383">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3384">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3384">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3385">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3385">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-3386">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3386">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="43ecc-3387">現在の <see cref="T:System.String" /> オブジェクトの値が、<see cref="F:System.Int16.MaxValue" /> より大きいか、<see cref="F:System.Int16.MinValue" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3387">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3388">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3388">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3389">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3389">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3390">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3390">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3391">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3391">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3392">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3392">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3393">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3393">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3394">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3394">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3395">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3395">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3396">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3396">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3397">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3397">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3398">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3398">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3399">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3399">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3400">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3400">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3401">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3401">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3402">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3402">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3403">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3403">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3404">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3404">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3405">推奨される代替手段が呼び出されて、<xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3405">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-3406">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3406">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="43ecc-3407">現在の <see cref="T:System.String" /> オブジェクトの値が、<see cref="F:System.SByte.MaxValue" /> より大きいか、<see cref="F:System.SByte.MinValue" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3407">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3408">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3408">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3409">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3409">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3410">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3410">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3411">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3411">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3412">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3412">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3413">推奨される代替手段が呼び出されて、<xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3413">The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="43ecc-3414">取得するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3414">The type of the returned object.</span></span></param>
        <param name="provider"><span data-ttu-id="43ecc-3415">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3415">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3416">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3416">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3417">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3417">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3418">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3418">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3419">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3419">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3420">推奨される代替手段が呼び出されて、<xref:System.Convert.ChangeType%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3420">The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-3421"><paramref name="type" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3421"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="43ecc-3422">現在の <see cref="T:System.String" /> オブジェクトの値を、<paramref name="type" /> パラメーターに指定された型に変換できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3422">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3423">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3423">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3424">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3424">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3425">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3425">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3426">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3426">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3427">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3427">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3428">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3428">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-3429">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3429">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="43ecc-3430">現在の <see cref="T:System.String" /> オブジェクトの値が、<see cref="F:System.UInt16.MaxValue" /> より大きいか、<see cref="F:System.UInt16.MinValue" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3430">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3431">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3431">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3432">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3432">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3433">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3433">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3434">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3434">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3435">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3435">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3436">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3436">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="43ecc-3437">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3437">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="43ecc-3438">現在の <see cref="T:System.String" /> オブジェクトの値が、<see cref="F:System.UInt32.MaxValue" /> より大きいか、<see cref="F:System.UInt32.MinValue" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3438">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3439">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3439">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3440">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3440">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3441">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3441">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3442">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3442">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43ecc-3443">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3443">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="43ecc-3444">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3444">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToCharArray">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-3445">このインスタンスの文字を Unicode 文字配列へコピーします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3445">Copies the characters in this instance to a Unicode character array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3446">このインスタンスの文字を Unicode 文字配列へコピーします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3446">Copies the characters in this instance to a Unicode character array.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3447">このインスタンスの各文字を要素とする Unicode 文字配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3447">A Unicode character array whose elements are the individual characters of this instance.</span></span> <span data-ttu-id="43ecc-3448">このインスタンスが空の文字列である場合、返される配列は空で、長さは 0 になります。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3448">If this instance is an empty string, the returned array is empty and has a zero length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3449">このメソッドは、各文字をコピー (つまり、各<xref:System.Char>オブジェクト) を文字配列への文字列にします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3449">This method copies each character (that is, each <xref:System.Char> object) in a string to a character array.</span></span> <span data-ttu-id="43ecc-3450">コピーされる最初の文字が返される文字配列のインデックス 0 の位置がインデックス位置にコピーされる最後の文字がある<xref:System.Array.Length%2A?displayProperty=nameWithType>– 1。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3450">The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=nameWithType> – 1.</span></span>  
  
 <span data-ttu-id="43ecc-3451">文字配列内の文字の文字列を作成するには、呼び出し、<xref:System.String.%23ctor%28System.Char%5B%5D%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3451">To create a string from the characters in a character array, call the <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor.</span></span>  
  
 <span data-ttu-id="43ecc-3452">文字列でエンコードされた文字を格納するバイト配列を作成する、適切なインスタンス化<xref:System.Text.Encoding>オブジェクト呼び出しとその<xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3452">To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="43ecc-3453">.NET Framework で使用できる標準エンコーディングの一部を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3453">Some of the standard encodings available in the .NET Framework include the following:</span></span>  
  
|<span data-ttu-id="43ecc-3454">エンコード</span><span class="sxs-lookup"><span data-stu-id="43ecc-3454">Encoding</span></span>|<span data-ttu-id="43ecc-3455">Object</span><span class="sxs-lookup"><span data-stu-id="43ecc-3455">Object</span></span>|  
|--------------|------------|  
|<span data-ttu-id="43ecc-3456">ASCII</span><span class="sxs-lookup"><span data-stu-id="43ecc-3456">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|  
|<span data-ttu-id="43ecc-3457">UTF-7</span><span class="sxs-lookup"><span data-stu-id="43ecc-3457">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|  
|<span data-ttu-id="43ecc-3458">UTF-8</span><span class="sxs-lookup"><span data-stu-id="43ecc-3458">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|  
|<span data-ttu-id="43ecc-3459">UTF-16</span><span class="sxs-lookup"><span data-stu-id="43ecc-3459">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|  
|<span data-ttu-id="43ecc-3460">UTF-32</span><span class="sxs-lookup"><span data-stu-id="43ecc-3460">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|  
  
 <span data-ttu-id="43ecc-3461">詳細については、次を参照してください。 [.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3461">For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3462">次の例では、<xref:System.String.ToCharArray%2A>文字配列への文字列に文字を抽出します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3462">The following example calls the <xref:System.String.ToCharArray%2A> method to extract the characters in a string to a character array.</span></span> <span data-ttu-id="43ecc-3463">配列の元の文字列と要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3463">It then displays the original string and the elements in the array.</span></span>  
  
 [!code-csharp[System.String.ToCharArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tochararray/cs/ToCharArray1.cs#1)]
 [!code-vb[System.String.ToCharArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tochararray/vb/ToCharArray1.vb#1)]  
  
 <span data-ttu-id="43ecc-3464">次の例では、区切られた文字列内の区切り記号として機能する文字を含む文字列を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3464">The following example defines a string containing the characters that serve as delimiters in a delimited string.</span></span> <span data-ttu-id="43ecc-3465">呼び出して、<xref:System.String.ToCharArray%2A>メソッドに渡すことができる文字配列を作成する、<xref:System.String.Split%28System.Char%5B%5D%29>その個々 の部分文字列に区切られた文字列を分割する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3465">It then calls the <xref:System.String.ToCharArray%2A> method to create a character array that can be passed to the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate the delimited string into its individual substrings.</span></span>  
  
 [!code-cpp[StringSplit2#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringSplit2/CPP/stringsplit2.cpp#1)] 
 [!code-csharp[StringSplit2#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/stringsplit2.cs#1)] 
 [!code-vb[StringSplit2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit2.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray (startIndex As Integer, length As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray(int startIndex, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="43ecc-3466">このインスタンス内の部分文字列の開始位置。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3466">The starting position of a substring in this instance.</span></span></param>
        <param name="length"><span data-ttu-id="43ecc-3467">このインスタンス内の部分文字列の長さ。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3467">The length of the substring in this instance.</span></span></param>
        <summary><span data-ttu-id="43ecc-3468">このインスタンスの指定した部分文字列の文字を Unicode 文字配列へコピーします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3468">Copies the characters in a specified substring in this instance to a Unicode character array.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3469">このインスタンスの文字位置 <paramref name="length" /> から、<paramref name="startIndex" /> の数の文字を要素とする Unicode 文字配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3469">A Unicode character array whose elements are the <paramref name="length" /> number of characters in this instance starting from character position <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3470">このメソッドは、文字配列に文字列の一部の文字をコピーします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3470">This method copies the characters in a portion of a string to a character array.</span></span> <span data-ttu-id="43ecc-3471">文字配列内の文字の範囲から文字列を作成するには、呼び出し、<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3471">To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="43ecc-3472">`startIndex`パラメーターは 0 から始まる。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3472">The `startIndex` parameter is zero-based.</span></span> <span data-ttu-id="43ecc-3473">つまり、文字列インスタンスで最初の文字のインデックスには 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3473">That is, the index of the first character in the string instance is zero.</span></span>  
  
 <span data-ttu-id="43ecc-3474">場合`length`0 の場合は、返される配列が空、長さは 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3474">If `length` is zero, the returned array is empty and has a zero length.</span></span> <span data-ttu-id="43ecc-3475">このインスタンスが場合`null`または空の文字列 ("")、返される配列が空、長さは 0 です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3475">If this instance is `null` or an empty string (""), the returned array is empty and has a zero length.</span></span>  
  
 <span data-ttu-id="43ecc-3476">文字列の一部でエンコードされた文字を格納するバイト配列を作成する、適切なインスタンス化<xref:System.Text.Encoding>オブジェクト呼び出しとその<xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3476">To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="43ecc-3477">.NET Framework で使用できる標準エンコーディングの一部を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3477">Some of the standard encodings available in the .NET Framework include the following:</span></span>  
  
|<span data-ttu-id="43ecc-3478">エンコード</span><span class="sxs-lookup"><span data-stu-id="43ecc-3478">Encoding</span></span>|<span data-ttu-id="43ecc-3479">Object</span><span class="sxs-lookup"><span data-stu-id="43ecc-3479">Object</span></span>|  
|--------------|------------|  
|<span data-ttu-id="43ecc-3480">ASCII</span><span class="sxs-lookup"><span data-stu-id="43ecc-3480">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|  
|<span data-ttu-id="43ecc-3481">UTF-7</span><span class="sxs-lookup"><span data-stu-id="43ecc-3481">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|  
|<span data-ttu-id="43ecc-3482">UTF-8</span><span class="sxs-lookup"><span data-stu-id="43ecc-3482">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|  
|<span data-ttu-id="43ecc-3483">UTF-16</span><span class="sxs-lookup"><span data-stu-id="43ecc-3483">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|  
|<span data-ttu-id="43ecc-3484">UTF-32</span><span class="sxs-lookup"><span data-stu-id="43ecc-3484">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|  
  
 <span data-ttu-id="43ecc-3485">詳細については、次を参照してください。 [.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3485">For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3486">次の例は、文字列内の部分文字列を文字の配列に変換しを列挙し、配列の要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3486">The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.</span></span>  
  
 [!code-cpp[string.tochararray1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.ToCharArray1/CPP/tocharry1.cpp#1)]
 [!code-csharp[string.tochararray1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.ToCharArray1/CS/tocharry1.cs#1)]
 [!code-vb[string.tochararray1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.ToCharArray1/VB/tocharry1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="43ecc-3487"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3487"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>  
  
 <span data-ttu-id="43ecc-3488">- または -</span><span class="sxs-lookup"><span data-stu-id="43ecc-3488">-or-</span></span>  
  
 <span data-ttu-id="43ecc-3489"><paramref name="startIndex" /> と <paramref name="length" /> を合計した値が、このインスタンスの長さよりも大きい値です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3489"><paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-3490">この文字列のコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3490">Returns a copy of this string converted to lowercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3491">この文字列のコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3491">Returns a copy of this string converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3492">小文字の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3492">A string in lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3493">このメソッドでは、現在のカルチャの大文字小文字の規則が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3493">This method takes into account the casing rules of the current culture.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3494">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3494">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3495">代わりに、現在のインスタンス内のすべての文字が小文字に変換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3495">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="43ecc-3496">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3496">Security Considerations</span></span>  
 <span data-ttu-id="43ecc-3497">呼び出し元からの結果の文字種操作、<xref:System.String.ToLower>メソッドは、現在のカルチャの大文字と小文字の表記規則を考慮に入れています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3497">The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="43ecc-3498">ファイル名などのオペレーティング システム識別子の小文字または大文字のバージョンを必要がある場合は、パイプ、またはレジストリ キーの使用をという名前の<xref:System.String.ToLowerInvariant%2A>または<xref:System.String.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3498">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span> <span data-ttu-id="43ecc-3499">すべてのカルチャで同じ結果が生成されます (とは異なり、<xref:System.String.ToLower>メソッド) しより効率的に実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3499">This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3500">次の例では、小文字にいくつかの混合大文字と小文字の文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3500">The following example converts several mixed case strings to lowercase.</span></span>  
  
 [!code-cpp[stringlowerupper#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringlowerupper/CPP/stringtolower.cpp#1)]
 [!code-csharp[stringlowerupper#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringlowerupper/CS/stringtolower.cs#1)]
 [!code-vb[stringlowerupper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringlowerupper/VB/stringtolower.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3501">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列の大文字と小文字のメソッドを呼び出すことは避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3501">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-3502">現在のカルチャの大文字と小文字の規則を使用して小文字の文字を変換するを呼び出して、<see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" />の値を持つメソッド オーバー ロード<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />の<paramref name="culture" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3502">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para>
        </block>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="43ecc-3503">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3503">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="43ecc-3504">指定されたカルチャの大文字と小文字の規則を使用して、この文字列のコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3504">Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3505">現在の文字列を小文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3505">The lowercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3506">指定されたカルチャの大文字と小文字の規則、`culture`パラメーターを変更する方法、文字列の大文字と小文字を決定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3506">The casing rules of the culture specified by the `culture` parameter determine the way the case of the string is changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3507">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3507">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3508">代わりに、現在のインスタンス内のすべての文字が小文字に変換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3508">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="43ecc-3509">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3509">Security Considerations</span></span>  
 <span data-ttu-id="43ecc-3510">渡す場合、<xref:System.String.ToLower%28System.Globalization.CultureInfo%29>メソッド、<xref:System.Globalization.CultureInfo>以外のオブジェクト<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>、大文字と小文字の操作をカルチャに固有のルールを考慮します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3510">If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="43ecc-3511">ファイル名などのオペレーティング システム識別子の小文字または大文字のバージョンを必要がある場合は、パイプ、またはレジストリ キーの使用をという名前の<xref:System.String.ToLowerInvariant%2A>または<xref:System.String.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3511">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="43ecc-3512">これにより、すべてのカルチャで同じ結果を生成するしより効率的に実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3512">This produces the same result in every culture and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3513">次の例では、アメリカ合衆国およびトルコ語-トルコのカルチャを使用して文字を小文字に大文字の 2 つの文字列に変換し、小文字の文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3513">The following example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings.</span></span> <span data-ttu-id="43ecc-3514">大文字の文字列は、LATIN CAPITAL LETTER I とドットの上、Unicode LATIN CAPITAL LETTER 世の 1 つの文字列に出現するたび、その他の文字列に含まれる点を除いて同じです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3514">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>  
  
 [!code-cpp[string.tolower1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.tolower1/CPP/tolower.cpp#1)]
 [!code-csharp[string.tolower1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.tolower1/CS/tolower.cs#1)]
 [!code-vb[string.tolower1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tolower1/VB/tolower.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-3515"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3515"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.ToUpper" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public string ToLowerInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLowerInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLowerInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLowerInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLowerInvariant();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3516">インバリアント カルチャの大文字と小文字の規則を使用して、この <see cref="T:System.String" /> オブジェクトのコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3516">Returns a copy of this <see cref="T:System.String" /> object converted to lowercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3517">現在の文字列を小文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3517">The lowercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3518">インバリアント カルチャでは、カルチャに依存しないられるカルチャを表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3518">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="43ecc-3519">関連付けられている特定の国または地域ではなくが、英語の言語を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3519">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="43ecc-3520">詳細については、<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3520">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="43ecc-3521">使用して、現在のカルチャによって影響を受けるある予測可能な方法で変更する文字列の大文字と小文字で、アプリケーションが依存している場合、<xref:System.String.ToLowerInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3521">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="43ecc-3522"><xref:System.String.ToLowerInvariant%2A>メソッドは`ToLower(CultureInfo.InvariantCulture)`します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3522">The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="43ecc-3523">文字列のコレクションがユーザー インターフェイス コントロールでの予測可能な順序で表示する必要があるときに、メソッドの使用をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3523">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3524">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3524">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3525">代わりに、現在のインスタンス内のすべての文字が小文字に変換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3525">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="43ecc-3526">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3526">Security Considerations</span></span>  
 <span data-ttu-id="43ecc-3527">ファイル名などのオペレーティング システム識別子の小文字または大文字のバージョンを必要がある場合は、パイプ、またはレジストリ キーの使用をという名前の<xref:System.String.ToLowerInvariant%2A>または<xref:System.String.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3527">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3528">次の例では、さまざまな言語で 1 つの単語を含む文字列配列を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3528">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="43ecc-3529"><xref:System.String.ToLowerInvariant%2A>メソッドは、各単語の大文字と小文字のバージョンと並列配列の要素の設定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3529">The <xref:System.String.ToLowerInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="43ecc-3530"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>要素が言語に関係なく同じ順序で表示されることを確認する小文字配列の要素の順序に基づいて、大文字小文字を区別配列の並べ替えにメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3530">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language.</span></span>  
  
 [!code-csharp[System.String.ToLowerInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tolowerinvariant/cs/tolowerinvariant.cs#1)]
 [!code-vb[System.String.ToLowerInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tolowerinvariant/vb/tolowerinvariant.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpperInvariant" />
        <altmember cref="M:System.String.ToLower(System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-3531">このインスタンスの値を <see cref="T:System.String" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3531">Converts the value of this instance to a <see cref="T:System.String" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3532"><see cref="T:System.String" /> のこのインスタンスを返します。実際の変換処理は実行されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3532">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3533">現在の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3533">The current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3534">このメソッドは、単に変更されていない現在の文字列を返す、ので、メソッドを直接呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3534">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span> <span data-ttu-id="43ecc-3535">これは通常暗黙的に呼び出されます、複合書式指定操作、例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3535">It is usually called implicitly in a composite formatting operation, as the example shows.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3536">次の例で、<xref:System.String.ToString%2A>メソッドです。例が明示的に呼び出さずに、<xref:System.String.ToString%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3536">The following example demonstrates the <xref:System.String.ToString%2A> method.Note that the example does not explicitly call the <xref:System.String.ToString%2A> method.</span></span> <span data-ttu-id="43ecc-3537">代わりに、メソッドの呼び出しによって暗黙的に、[複合書式指定](~/docs/standard/base-types/composite-formatting.md)機能します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3537">Instead, the method is called implicitly by the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature.</span></span>  
  
 [!code-cpp[string.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.tostring/CPP/string.tostring.cpp#1)]
 [!code-csharp[string.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.tostring/CS/string.tostring.cs#1)]
 [!code-vb[string.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tostring/VB/string.tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Clone" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="43ecc-3538">(予約済み) カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3538">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="43ecc-3539"><see cref="T:System.String" /> のこのインスタンスを返します。実際の変換処理は実行されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3539">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3540">現在の文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3540">The current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3541">`provider` 予約されていて、この操作に現在参加していません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3541">`provider` is reserved, and does not currently participate in this operation.</span></span>  
  
 <span data-ttu-id="43ecc-3542">このメソッドは、単に変更されていない現在の文字列を返す、ので、メソッドを直接呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3542">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-3543">この文字列のコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3543">Returns a copy of this string converted to uppercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3544">この文字列のコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3544">Returns a copy of this string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3545">現在の文字列を大文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3545">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3546">このメソッドは、現在のインスタンス内の各文字を等価な大文字に変換するのに、現在のカルチャの大文字小文字の規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3546">This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent.</span></span> <span data-ttu-id="43ecc-3547">文字が大文字にしたものを持たない場合に含まで返される文字列は変更されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3547">If a character does not have an uppercase equivalent, it is included unchanged in the returned string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3548">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3548">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3549">代わりに、現在のインスタンス内のすべての文字が大文字に変換された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3549">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
 <span data-ttu-id="43ecc-3550"><xref:System.String.ToUpper%2A>メソッドは、大文字と小文字のために使用できるように文字列を大文字に変換によく使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3550">The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison.</span></span> <span data-ttu-id="43ecc-3551">大文字と小文字の比較を実行するより優れたメソッドを持つ文字列比較メソッドを呼び出す、<xref:System.StringComparison>パラメーターを設定する値を持つ<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>カルチャ、大文字と小文字の比較についてはします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3551">A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> for a culture-sensitive, case-insensitive comparison.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="43ecc-3552">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3552">Security Considerations</span></span>  
 <span data-ttu-id="43ecc-3553">呼び出し元からの結果の文字種操作、<xref:System.String.ToUpper>メソッドは、現在のカルチャの大文字と小文字の表記規則を考慮に入れています。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3553">The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="43ecc-3554">ファイル名などのオペレーティング システム識別子の小文字または大文字のバージョンを必要がある場合は、パイプ、またはレジストリ キーの使用をという名前の<xref:System.String.ToLowerInvariant%2A>または<xref:System.String.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3554">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="43ecc-3555">すべてのカルチャで同じ結果が生成されます (とは異なり、<xref:System.String.ToUpper>メソッド) しより効率的に実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3555">This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3556">次の例では、<xref:System.String.ToUpper%2A>一連の基本的なラテン、ラテン語-1 本追加ソフトウェア、およびラテン拡張 A 文字セット内の各文字を含む 1 つの文字文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3556">The following example calls the <xref:System.String.ToUpper%2A> method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets.</span></span> <span data-ttu-id="43ecc-3557">各文字列が大文字の文字とは異なる、小文字の文字が表示されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3557">It then displays each string whose uppercase character is different from its lowercase character.</span></span>  
  
 [!code-cpp[System.String.ToUpper#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.ToUpper/cpp/ToUpperEx.cpp#1)]
 [!code-csharp[System.String.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.ToUpper/cs/ToUpperEx.cs#1)]
 [!code-vb[System.String.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.ToUpper/vb/ToUpperEx.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3558">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を代入し、代わりにパラメーターを明示的に指定する必要のあるメソッドを呼び出して文字列の大文字と小文字のメソッドを呼び出すことは避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3558">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="43ecc-3559">文字列を現在のカルチャの大文字と小文字の規則を使用して大文字に変換する呼び出し、<see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" />の値を持つメソッド オーバー ロード<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />の<paramref name="culture" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3559">To convert a string to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para>
        </block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="43ecc-3560">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3560">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="43ecc-3561">指定されたカルチャの大文字と小文字の規則を使用して、この文字列のコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3561">Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3562">現在の文字列を大文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3562">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3563">指定されたカルチャの大文字と小文字の規則、`culture`パラメーターを変更する方法、文字列の大文字と小文字を決定します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3563">The casing rules of the culture specified by the `culture` parameter determine the way the case of a string is changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3564">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3564">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3565">代わりに、現在のインスタンス内のすべての文字が大文字に変換された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3565">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="43ecc-3566">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3566">Security Considerations</span></span>  
 <span data-ttu-id="43ecc-3567">渡す場合、<xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>メソッド、<xref:System.Globalization.CultureInfo>以外のオブジェクト<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>、大文字と小文字の操作をカルチャに固有のルールを考慮します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3567">If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="43ecc-3568">ファイル名などのオペレーティング システム識別子の小文字または大文字のバージョンを必要がある場合は、パイプ、またはレジストリ キーの使用をという名前の<xref:System.String.ToLowerInvariant%2A>または<xref:System.String.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3568">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="43ecc-3569">これにより、すべてのカルチャで同じ結果を生成するしより効率的に実行します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3569">This produces the same result in every culture and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3570">次の例では、小文字の文字列をアメリカ合衆国およびトルコ語-トルコのカルチャを使用して、大文字の 2 つの文字列に変換し、大文字の文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3570">The following example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings.</span></span> <span data-ttu-id="43ecc-3571">大文字の文字列は、LATIN CAPITAL LETTER I とドットの上、Unicode LATIN CAPITAL LETTER 世の 1 つの文字列に出現するたび、その他の文字列に含まれる点を除いて同じです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3571">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>  
  
 [!code-csharp[string.toupper1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.toupper1/CS/toupper.cs#1)]
 [!code-vb[string.toupper1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.toupper1/VB/toupper.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="43ecc-3572"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3572"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public string ToUpperInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpperInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpperInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpperInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpperInvariant();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3573">インバリアント カルチャの大文字と小文字の規則を使用して、この <see cref="T:System.String" /> オブジェクトのコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3573">Returns a copy of this <see cref="T:System.String" /> object converted to uppercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3574">現在の文字列を大文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3574">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3575">インバリアント カルチャでは、カルチャに依存しないられるカルチャを表します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3575">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="43ecc-3576">関連付けられている特定の国または地域ではなくが、英語の言語を使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3576">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="43ecc-3577">詳細については、<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3577">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="43ecc-3578">使用して、現在のカルチャによって影響を受けるある予測可能な方法で変更する文字列の大文字と小文字で、アプリケーションが依存している場合、<xref:System.String.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3578">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="43ecc-3579"><xref:System.String.ToUpperInvariant%2A>メソッドは`ToUpper(CultureInfo.InvariantCulture)`します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3579">The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="43ecc-3580">文字列のコレクションがユーザー インターフェイス コントロールでの予測可能な順序で表示する必要があるときに、メソッドの使用をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3580">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3581">このメソッドは、現在のインスタンスの値を変更できません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3581">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3582">代わりに、現在のインスタンス内のすべての文字が大文字に変換された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3582">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="43ecc-3583">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="43ecc-3583">Security Considerations</span></span>  
 <span data-ttu-id="43ecc-3584">ファイル名などのオペレーティング システム識別子の小文字または大文字のバージョンを必要がある場合は、パイプ、またはレジストリ キーの使用をという名前の<xref:System.String.ToLowerInvariant%2A>または<xref:System.String.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3584">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3585">次の例では、さまざまな言語で 1 つの単語を含む文字列配列を定義します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3585">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="43ecc-3586"><xref:System.String.ToUpperInvariant%2A>メソッドは、各単語の大文字と小文字のバージョンと並列配列の要素の設定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3586">The <xref:System.String.ToUpperInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="43ecc-3587"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッドは大文字の要素が言語に関係なく同じ順序で表示されることを確認する配列内の要素の順序に基づいて、大文字小文字を区別配列の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3587">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language.</span></span>  
  
 [!code-csharp[System.String.ToUpperInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.toupperinvariant/cs/toupperinvariant.cs#1)]
 [!code-vb[System.String.ToUpperInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.toupperinvariant/vb/toupperinvariant.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Trim">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43ecc-3588">現在の <see cref="T:System.String" /> オブジェクトの先頭および末尾から、指定した文字セットをすべて削除した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3588">Returns a new string in which all leading and trailing occurrences of a set of specified characters from the current <see cref="T:System.String" /> object are removed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43ecc-3589">現在の <see cref="T:System.String" /> オブジェクトの先頭および末尾にある空白文字をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3589">Removes all leading and trailing white-space characters from the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3590">現在の文字列の先頭および末尾から空白文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3590">The string that remains after all white-space characters are removed from the start and end of the current string.</span></span> <span data-ttu-id="43ecc-3591">現在のインスタンスから文字をトリムできない場合は、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3591">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3592"><xref:System.String.Trim%2A>メソッドは現在の文字列から先頭および末尾の空白文字がすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3592">The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing white-space characters.</span></span> <span data-ttu-id="43ecc-3593">各先頭および末尾のトリム操作は、空白以外の文字が検出されたときに停止します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3593">Each leading and trailing trim operation stops when a non-white-space character is encountered.</span></span> <span data-ttu-id="43ecc-3594">たとえば、現在の文字列が「abc"xyz"」、<xref:System.String.Trim%2A>メソッドには、"abc xyz"が返されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3594">For example, if the current string is "   abc   xyz   ", the <xref:System.String.Trim%2A> method returns "abc   xyz".</span></span> <span data-ttu-id="43ecc-3595">削除するには、文字列内の単語の間の空白文字を使用して、 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3595">To remove white-space characters between words in a string, use a [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3596">場合、<xref:System.String.Trim%2A>メソッドは、現在のインスタンスから任意の文字を削除、このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3596">If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3597">代わりに、現在のインスタンスで見つかったすべての先頭および末尾の空白文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3597">Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.</span></span>  
  
 <span data-ttu-id="43ecc-3598">現在の文字列が等しい場合<xref:System.String.Empty>メソッドを返しますの現在のインスタンスのすべての文字は、空白文字で構成されている、または<xref:System.String.Empty>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3598">If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="43ecc-3599">空白文字は、Unicode 規格によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3599">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="43ecc-3600"><xref:System.String.Trim>メソッドの戻り値を生成する先頭および末尾の文字を削除する`true`に渡されるときに、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3600">The <xref:System.String.Trim> method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3601">次の例では、<xref:System.String.Trim?displayProperty=nameWithType>連結する前に、ユーザーが入力した文字列から余分な空白を削除する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3601">The following example uses the <xref:System.String.Trim?displayProperty=nameWithType> method to remove any extra white space from strings entered by the user before concatenating them.</span></span>  
  
 [!code-cpp[System.String.Trim#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim2.cpp#2)]
 [!code-csharp[System.String.Trim#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim2.cs#2)]
 [!code-vb[System.String.Trim#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3602">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]および以前のバージョンが、このメソッドをトリミングする空白文字の内部リストを管理します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3602">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintain an internal list of white-space characters that this method trims.</span></span> <span data-ttu-id="43ecc-3603">以降で、 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、メソッドは、すべての Unicode の空白文字をトリム (つまり、文字を生成、<see langword="true" />に渡されるときに値を返す、<see cref="M:System.Char.IsWhiteSpace(System.Char)" />メソッド)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3603">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="43ecc-3604">この変更のため、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]し、以前のバージョンが、ゼロ幅スペース (U +0 200B) とゼロ幅非分割スペース (U+FEFF) の 2 つの文字を削除する、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンの場合は削除されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3604">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove.</span></span> <span data-ttu-id="43ecc-3605">さらに、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]と以前のバージョンは次の 3 つの Unicode の空白文字をトリムいません: モンゴル母音区切り記号 (U +0 180E)、幅の狭い非分割領域 (U +0 202F)、およびメディア数学的な領域 (U +0 205F)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3605">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para>
        </block>
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(char trimChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="43ecc-3606">削除する Unicode 文字の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3606">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-3607">現在の <see cref="T:System.String" /> オブジェクトの先頭および末尾から、配列で指定された文字セットをすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3607">Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3608">現在の文字列の先頭および末尾から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3608">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current string.</span></span> <span data-ttu-id="43ecc-3609"><paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合は、代わりに空白文字が削除されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3609">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span></span> <span data-ttu-id="43ecc-3610">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3610">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3611"><xref:System.String.Trim%2A>メソッドが現在の文字列からでは、すべての先頭および末尾の文字を削除、`trimChars`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3611">The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="43ecc-3612">各先頭と末尾の操作が停止するのではない文字をトリム`trimChars`が発生しました。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3612">Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="43ecc-3613">たとえば、現在の文字列が"123abc456xyz789"と`trimChars`桁の数字「1」~「9」が含まれています、 <xref:System.String.Trim%2A> "abc456xyz"を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3613">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.Trim%2A> method returns "abc456xyz".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3614">場合、<xref:System.String.Trim%2A>メソッドは、現在のインスタンスから任意の文字を削除、このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3614">If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3615">代わりに、指定したすべての新しい文字列を返します先頭と末尾の`trimChars`現在のインスタンス内に見つかった文字が削除されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3615">Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.</span></span>  
  
 <span data-ttu-id="43ecc-3616">現在の文字列が等しい場合<xref:System.String.Empty>または現在のインスタンスのすべての文字の文字から成る、`trimChars`配列を返します<xref:System.String.Empty>です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3616">If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of characters in the `trimChars` array, the method returns <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="43ecc-3617">場合`trimChars`は`null`空の配列に、このメソッドは、メソッドの返されると、先頭または末尾の文字を削除または`true`に渡されるときに、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>メソッド</span><span class="sxs-lookup"><span data-stu-id="43ecc-3617">If `trimChars` is `null` or an empty array, this method removes any leading or trailing characters that result in the method returning `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method,</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3618">次の例では、<xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=nameWithType>文字列から文字、アスタリスク (\*)、およびアポストロフィ (') 文字を削除する方法です。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3618">The following example uses the <xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=nameWithType> method to remove space, asterisk (\*), and apostrophe (') characters from a string.</span></span>  
  
 [!code-cpp[System.String.Trim#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim1.cpp#1)]
 [!code-csharp[System.String.Trim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim1.cs#1)]
 [!code-vb[System.String.Trim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3619">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]され、以前のバージョンがこのメソッドはトリム場合は空白文字の内部リストを保持<paramref name="trimChars" />は<see langword="null" />または空の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3619">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="43ecc-3620">以降で、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]場合は、<paramref name="trimChars" />は<see langword="null" />、空の配列メソッドすべての Unicode の空白文字をトリムするか (つまり、文字を生成、<see langword="true" />に渡されるときに値を返す、<see cref="M:System.Char.IsWhiteSpace(System.Char)" />メソッド)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3620">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="43ecc-3621">この変更のため、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]し、以前のバージョンが、ゼロ幅スペース (U +0 200B) とゼロ幅非分割スペース (U+FEFF) の 2 つの文字を削除する、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンの場合は削除されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3621">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove.</span></span> <span data-ttu-id="43ecc-3622">さらに、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]と以前のバージョンは次の 3 つの Unicode の空白文字をトリムいません: モンゴル母音区切り記号 (U +0 180E)、幅の狭い非分割領域 (U +0 202F)、およびメディア数学的な領域 (U +0 205F)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3622">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(char trimChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="43ecc-3623">削除する Unicode 文字の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3623">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-3624">現在の <see cref="T:System.String" /> オブジェクトの末尾から、配列で指定された文字セットをすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3624">Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3625">現在の文字列の末尾から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3625">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current string.</span></span> <span data-ttu-id="43ecc-3626"><paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合は、代わりに Unicode の空白文字が削除されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3626">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, Unicode white-space characters are removed instead.</span></span> <span data-ttu-id="43ecc-3627">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3627">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3628"><xref:System.String.TrimEnd%2A>メソッドが現在の文字列から内にあるすべての文字を削除、`trimChars`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3628">The <xref:System.String.TrimEnd%2A> method removes from the current string all trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="43ecc-3629">トリム操作、最初の文字に含まれていない場合は停止`trimChars`文字列の最後に発生します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3629">The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string.</span></span> <span data-ttu-id="43ecc-3630">たとえば、現在の文字列が"123abc456xyz789"と`trimChars`桁の数字「1」~「9」が含まれています、 <xref:System.String.TrimEnd%2A> "123abc456xyz"を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3630">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.TrimEnd%2A> method returns "123abc456xyz".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3631">場合、<xref:System.String.TrimEnd%2A>メソッドは、現在のインスタンスから任意の文字を削除、このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3631">If the <xref:System.String.TrimEnd%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3632">代わりに、どのすべての末尾の文字で、新しい文字列を返します`trimChars`現在の文字列から削除されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3632">Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3633">次の例では、使用する方法を示しています、<xref:System.String.TrimEnd%28System.Char%5B%5D%29>空白文字または文字列の末尾からの句読点をトリムするメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3633">The following example demonstrates how you can use the <xref:System.String.TrimEnd%28System.Char%5B%5D%29> method to trim white space or punctuation marks from the end of a string.</span></span>  
  
 [!code-csharp[System.String.TrimEnd#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimEnd/cs/sample2.cs#2)]
 [!code-vb[System.String.TrimEnd#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimEnd/vb/Sample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3634">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]され、以前のバージョンがこのメソッドはトリム場合は空白文字の内部リストを保持<paramref name="trimChars" />は<see langword="null" />または空の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3634">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="43ecc-3635">以降で、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]場合は、<paramref name="trimChars" />は<see langword="null" />、空の配列メソッドすべての Unicode の空白文字をトリムするか (つまり、文字を生成、<see langword="true" />に渡されるときに値を返す、<see cref="M:System.Char.IsWhiteSpace(System.Char)" />メソッド)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3635">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="43ecc-3636">この変更のため、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]し、以前のバージョンが、ゼロ幅スペース (U +0 200B) とゼロ幅非分割スペース (U+FEFF) の 2 つの文字を削除する、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンの場合は削除されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3636">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove.</span></span> <span data-ttu-id="43ecc-3637">さらに、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]と以前のバージョンは次の 3 つの Unicode の空白文字をトリムいません: モンゴル母音区切り記号 (U +0 180E)、幅の狭い非分割領域 (U +0 202F)、およびメディア数学的な領域 (U +0 205F)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3637">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(char trimChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="43ecc-3638">削除する Unicode 文字の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3638">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="43ecc-3639">現在の <see cref="T:System.String" /> オブジェクトの先頭から、配列で指定された文字セットをすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3639">Removes all leading occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="43ecc-3640">現在の文字列の先頭から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3640">The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current string.</span></span> <span data-ttu-id="43ecc-3641"><paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合は、代わりに空白文字が削除されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3641">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43ecc-3642"><xref:System.String.TrimStart%2A>メソッドが現在の文字列から内にあるすべての先頭の文字を削除、`trimChars`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3642">The <xref:System.String.TrimStart%2A> method removes from the current string all leading characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="43ecc-3643">トリム操作を停止するときにではなく、文字`trimChars`が発生しました。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3643">The trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="43ecc-3644">たとえば、現在の文字列が"123abc456xyz789"と`trimChars`桁の数字「1」~「9」が含まれています、 <xref:System.String.TrimStart%2A> "abc456xyz789"を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3644">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.TrimStart%2A> method returns "abc456xyz789".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43ecc-3645">場合、<xref:System.String.TrimStart%2A>メソッドは、現在のインスタンスから任意の文字を削除、このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3645">If the <xref:System.String.TrimStart%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="43ecc-3646">代わりに、現在のインスタンスで検出されたすべての先行する空白文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3646">Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43ecc-3647">次の例では、<xref:System.String.TrimStart%2A>空白とソース コードの行からコメント文字をトリムするメソッド。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3647">The following example uses the <xref:System.String.TrimStart%2A> method to trim white space and comment characters from lines of source code.</span></span> <span data-ttu-id="43ecc-3648">`StripComments`メソッドへの呼び出しをラップする<xref:System.String.TrimStart%2A>し、Visual Basic および C# の場合は、スラッシュ (/)、スペースとは、アポストロフィ (') のコメント文字を格納した文字配列を渡します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3648">The `StripComments` method wraps a call to <xref:System.String.TrimStart%2A> and passes it a character array that contains a space and the comment character, which is an apostrophe ( ' ) in Visual Basic and a slash ( / ) in C#.</span></span> <span data-ttu-id="43ecc-3649"><xref:System.String.TrimStart%2A>文字列がコメントであるかどうかを評価するときに、先頭の空白文字を削除するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3649">The <xref:System.String.TrimStart%2A> method is also called to remove leading white space when evaluating whether a string is a comment.</span></span>  
  
 [!code-csharp[System.String.TrimStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#1)]
 [!code-vb[System.String.TrimStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#1)]  
  
 <span data-ttu-id="43ecc-3650">`StripComments` メソッドを呼び出す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3650">The following example then illustrates a call to the `StripComments` method.</span></span>  
  
 [!code-csharp[System.String.TrimStart#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#2)]
 [!code-vb[System.String.TrimStart#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="43ecc-3651">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]され、以前のバージョンがこのメソッドはトリム場合は空白文字の内部リストを保持<paramref name="trimChars" />は<see langword="null" />または空の配列。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3651">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="43ecc-3652">以降で、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]場合は、<paramref name="trimChars" />は<see langword="null" />、空の配列メソッドすべての Unicode の空白文字をトリムするか (つまり、文字を生成、<see langword="true" />に渡されるときに値を返す、<see cref="M:System.Char.IsWhiteSpace(System.Char)" />メソッド)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3652">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="43ecc-3653">この変更のため、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]し、以前のバージョンが、ゼロ幅スペース (U +0 200B) とゼロ幅非分割スペース (U+FEFF) の 2 つの文字を削除する、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンの場合は削除されません。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3653">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove.</span></span> <span data-ttu-id="43ecc-3654">さらに、<see cref="M:System.String.Trim" />メソッドで、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]と以前のバージョンは次の 3 つの Unicode の空白文字をトリムいません: モンゴル母音区切り記号 (U +0 180E)、幅の狭い非分割領域 (U +0 202F)、およびメディア数学的な領域 (U +0 205F)。</span><span class="sxs-lookup"><span data-stu-id="43ecc-3654">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>
