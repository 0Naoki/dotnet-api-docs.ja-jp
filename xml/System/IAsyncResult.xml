<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e146db19e5a83c2ef68363fb3b583f92f2c62b48" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420483" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>非同期操作のステータスを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インターフェイス<xref:System.IAsyncResult>は、非同期的に動作できるメソッドを含むクラスによって実装されます。 これは<xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>、などの非同期操作を開始するメソッドの戻り値の型で<xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>あり、などの非同期操作を終了するメソッドに渡されます。 <xref:System.IAsyncResult>オブジェクトは、非同期操作の完了時<xref:System.AsyncCallback>にデリゲートによって呼び出されたメソッドにも渡されます。  
  
 <xref:System.IAsyncResult>インターフェイスをサポートするオブジェクトは、非同期操作の状態情報を格納し、同期オブジェクトを提供して、操作の完了時にスレッドが通知されるようにします。  
  
> [!NOTE]
>  クラスは、デリゲートを使用<xref:System.IAsyncResult>してメソッドを非同期`BeginInvoke`的に呼び出すときに、メソッドによって返されるの実装です。 <xref:System.Runtime.Remoting.Messaging.AsyncResult>  
  
 <xref:System.IAsyncResult>インターフェイスの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>プロパティを使用してを<xref:System.Threading.WaitHandle>取得する方法と、デリゲートに対する非同期呼び出しを待機する方法を示しています。 <xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。  
  
 この例は、2つのクラス (非同期に呼び出されるメソッドを含むクラスと、呼び出しを行う`Main`メソッドを含むクラス) で構成されています。  
  
 デリゲートを使用した非同期メソッドの呼び出しの詳細と例については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作についての情報を限定または格納するユーザー定義のオブジェクトを取得します。</summary>
        <value>非同期操作についての情報を限定または格納するユーザー定義のオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、非同期操作を開始するメソッドの最後のパラメーターであるオブジェクトを返します。  
  
   
  
## Examples  
 次のコード例は、プロパティ<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A>を使用してコールバックメソッドに情報を渡す方法を示しています。 `BeginInvoke`メソッド呼び出しの最後のパラメーターは、書式指定文字列です。この文字列は、コールバックメソッドが出力メッセージを書式設定するために使用します。  
  
 この例は、2つのクラス (非同期に呼び出されるメソッドを含むクラスと、呼び出しを行う`Main`メソッドを含むクラス) で構成されています。  
  
 このコールバックの例のしくみと、デリゲートを使用してメソッドを非同期で呼び出す方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>非同期操作の呼び出し元が、操作の開始時に指定されたアプリケーション定義のオブジェクトを取得できるようにするには、このプロパティを実装します。</para></block>
        <block subset="none" type="usage"><para>このオブジェクトを使用して、指定したに非同期操作<see cref="T:System.AsyncCallback" />の状態情報を渡すことができます。</para></block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" /> を取得します。</summary>
        <value>非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値を使用すると、クライアントは、操作が終了するまでポーリング<xref:System.IAsyncResult.IsCompleted%2A>するのではなく、非同期操作が完了するまで待機することができます。 戻り値は<xref:System.Threading.WaitHandle.WaitOne%2A>、、 <xref:System.Threading.WaitHandle.WaitAny%2A>、のいずれか<xref:System.Threading.WaitHandle.WaitAll%2A>の操作を実行するために使用できます。  
  
 共通言語ランタイムは<xref:System.Threading.ManualResetEvent>、、 <xref:System.Threading.AutoResetEvent>、 <xref:System.Threading.Mutex>など、複数の待機可能なオブジェクトを提供します。これらはすべて、Win32 同期プリミティブをミラー化します。  
  
   
  
## Examples  
 次の例は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A>プロパティを使用してを<xref:System.Threading.WaitHandle>取得する方法と、デリゲートに対する非同期呼び出しを待機する方法を示しています。 <xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。  
  
 この例は、2つのクラス (非同期に呼び出されるメソッドを含むクラスと、呼び出しを行う`Main`メソッドを含むクラス) で構成されています。  
  
 デリゲートを使用した非同期メソッドの呼び出しの詳細と例については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>を実装<see cref="T:System.IAsyncResult" />するオブジェクトは、 <see cref="P:System.IAsyncResult.AsyncWaitHandle" />プロパティが読み込ま<see cref="T:System.Threading.WaitHandle" />れるまでを作成する必要はありません。 これは、 <see cref="T:System.IAsyncResult" />実装者の選択です。 ただし、実装者がを<see cref="P:System.IAsyncResult.AsyncWaitHandle" />作成する場合は、適切なタイミングで待機を<see cref="T:System.Threading.WaitHandle" />終了させるを通知するのは、実装側の責任です。 たとえば、は<see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> 、非同期的に呼び出されたメソッドから制御が戻ったときに、呼び出し元に代わって待機を終了します。 作成した<see cref="P:System.IAsyncResult.AsyncWaitHandle" />後は、ユーザーが非同期操作を終了したメソッドを呼び出すまで、を維持したままにしておく必要があります。 その時点で、背後<see cref="P:System.IAsyncResult.AsyncWaitHandle" />にあるオブジェクトを破棄できます。</para></block>
        <block subset="none" type="usage"><para>(ポーリングではなく) 操作の完了を待機するクライアントは、このプロパティを使用して、待機する同期オブジェクトを取得します。  
  
 <block subset="none" type="note"><para>  
 デリゲートの<see langword="BeginInvoke" />メソッドを使用して非同期的にメソッドを呼び出し、その結果<see cref="T:System.IAsyncResult" />から待機ハンドルを取得する場合、 <see cref="M:System.Threading.WaitHandle.Close" />メソッドを呼び出すことにより、待機ハンドルの使用が終了したらすぐに待機ハンドルを閉じることをお勧めします。 待機ハンドルへのすべての参照を解放するだけの場合は、ガベージコレクションが待機ハンドルをクリアするときにシステムリソースが解放されますが、破棄可能なオブジェクトが明示的に閉じられるか破棄されると、ガベージコレクションはより効率的に動作します。 詳細については、<see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> プロパティを参照してください。  
  
</para></block></para></block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作が同期的に完了したかどうかを示す値を取得します。</summary>
        <value>非同期操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出しの同期完了が<xref:System.AsyncCallback>デリゲートで検出された場合、非同期操作を開始したスレッドが現在のスレッドである可能性があります。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.IAsyncResult" />インターフェイスのほとんどの実装者は、このプロパティを使用せ<see langword="false" />ず、を返す必要があります。 以降では、このプロパティが正しく実装され<see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />ていない場合、メソッドを使用して作成されたタスクは完了しません。[!INCLUDE[net_v45](~/includes/net-v45-md.md)] 「 [4.5 のアプリケーションの互換性」を](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)参照してください。</para></block>
        <block subset="none" type="usage"><para>非同期操作が同期的に完了したかどうかを判断するには、このプロパティを使用します。 たとえば、このプロパティは、i/o <see langword="true" />要求が小さい場合に非同期 i/o 操作に対してを返すことができます。</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作が完了したかどうかを示す値を取得します。</summary>
        <value>操作が完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが`true`の場合、非同期操作で使用するために割り当てたリソースを破棄しても安全であると見なすことができます。  
  
   
  
## Examples  
 次の例は、の<xref:System.IAsyncResult.IsCompleted%2A>プロパティを使用して、 <xref:System.IAsyncResult>非同期呼び出しが完了したことを検出する方法を示しています。 この場合、非同期呼び出しは、デリゲートの`BeginInvoke`メソッドを使用して行われます。 ユーザーインターフェイスをサービス<xref:System.IAsyncResult.IsCompleted%2A>するスレッドから非同期呼び出しを行う場合は、プロパティを使用して、完了をポーリングすることができます。 完了をポーリングすると、呼び出し元スレッドは、 <xref:System.Threading.ThreadPool> スレッドで非同期呼び出しを実行しながら、実行を継続できます。  
  
 この例は、2つのクラス (非同期に呼び出されるメソッドを含むクラスと、呼び出しを行う`Main`メソッドを含むクラス) で構成されています。  
  
 デリゲートを使用した非同期メソッドの呼び出しの詳細と例については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>通常、実装者は、このプロパティの値として、プライベートフィールドまたは内部テストの値を返します。</para></block>
        <block subset="none" type="usage"><para>(同期オブジェクトで待機するのではなく) 操作の状態をポーリングするクライアントは、このプロパティを使用して操作の状態を決定します。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
