<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2276b9f380f6f18b31bcbd48397cc4ae980b77ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="27968-101">非同期操作のステータスを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="27968-101">Represents the status of an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27968-102"><xref:System.IAsyncResult>インターフェイスは非同期に処理するメソッドを含むクラスによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="27968-102">The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously.</span></span> <span data-ttu-id="27968-103">など、非同期操作を開始するメソッドの戻り値の型である<xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>、および最後になど、非同期操作をメソッドに渡されるという<xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="27968-103">It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="27968-104"><xref:System.IAsyncResult> オブジェクトによって呼び出されたメソッドに渡されるも<xref:System.AsyncCallback>非同期操作が完了したときに委任します。</span><span class="sxs-lookup"><span data-stu-id="27968-104"><xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.</span></span>  
  
 <span data-ttu-id="27968-105">サポートするオブジェクト、<xref:System.IAsyncResult>インターフェイスは非同期操作の状態情報を格納し、スレッド操作の完了時に通知することができるようにする同期オブジェクトを提供します。</span><span class="sxs-lookup"><span data-stu-id="27968-105">An object that supports the <xref:System.IAsyncResult> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27968-106"><xref:System.Runtime.Remoting.Messaging.AsyncResult>クラスの実装は、<xref:System.IAsyncResult>によって返される、`BeginInvoke`メソッドは、メソッドを非同期的に呼び出すデリゲートを使用するとします。</span><span class="sxs-lookup"><span data-stu-id="27968-106">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of <xref:System.IAsyncResult> that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously.</span></span>  
  
 <span data-ttu-id="27968-107">方法の詳細な説明の<xref:System.IAsyncResult>インターフェイスを使用してを参照してください、[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="27968-107">For a detailed description of how the <xref:System.IAsyncResult> interface is used, see the [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27968-108">次の例で使用する方法、<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>を取得するプロパティ、 <xref:System.Threading.WaitHandle>、およびデリゲート上での非同期呼び出しを待機する方法です。</span><span class="sxs-lookup"><span data-stu-id="27968-108">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="27968-109"><xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。</span><span class="sxs-lookup"><span data-stu-id="27968-109">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="27968-110">例は、2 つのクラスで構成されています: 非同期的に呼び出されるメソッドとを含むクラスを含むクラス、`Main`呼び出しを行うメソッドです。</span><span class="sxs-lookup"><span data-stu-id="27968-110">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="27968-111">詳細については、およびデリゲートを使用するメソッドの非同期呼び出しの例については、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="27968-111">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="27968-112">非同期操作に関する情報を限定または格納するユーザー定義オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="27968-112">Gets a user-defined object that qualifies or contains information about an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="27968-113">非同期操作に関する情報を限定または格納するユーザー定義オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="27968-113">A user-defined object that qualifies or contains information about an asynchronous operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27968-114">このプロパティは、非同期操作を開始するメソッドの最後のパラメーターであるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="27968-114">This property returns the object that is the last parameter of the method that initiates an asynchronous operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27968-115">次のコード例を示しています、<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A>コールバック メソッドに情報を渡すプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="27968-115">The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method.</span></span> <span data-ttu-id="27968-116">最後のパラメーター、`BeginInvoke`メソッドの呼び出しは、コールバック メソッドは、出力メッセージの書式を使用している書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="27968-116">The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.</span></span>  
  
 <span data-ttu-id="27968-117">例は、2 つのクラスで構成されています: 非同期的に呼び出されるメソッドとを含むクラスを含むクラス、`Main`呼び出しを行うメソッドです。</span><span class="sxs-lookup"><span data-stu-id="27968-117">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="27968-118">詳細については、このコールバックの例のしくみとデリゲートを使用するメソッドの非同期呼び出しの例については、「[同期メソッド非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="27968-118">For more information about how this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="27968-119">操作の開始時に指定されたアプリケーション定義のオブジェクトを取得する非同期操作の呼び出し元を許可するには、このプロパティを実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-119">Implement this property to allow the caller of an asynchronous operation to obtain an application-defined object specified at the start of the operation.</span>
            </span>
          </para>
        </block>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="27968-120">このオブジェクトを渡すための非同期操作の状態情報を使用できます、<see cref="T:System.AsyncCallback" />提供します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-120">This object can be used to pass state information for the asynchronous operation to an <see cref="T:System.AsyncCallback" /> that you provide.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="27968-121">非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="27968-121">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="27968-122">非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="27968-122">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27968-123">戻り値により、非同期の操作をポーリングではなく完了するまで待機するクライアント<xref:System.IAsyncResult.IsCompleted%2A>操作の終了までです。</span><span class="sxs-lookup"><span data-stu-id="27968-123">The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes.</span></span> <span data-ttu-id="27968-124">戻り値を実行するために使用できます、 <xref:System.Threading.WaitHandle.WaitOne%2A>、 <xref:System.Threading.WaitHandle.WaitAny%2A>、または<xref:System.Threading.WaitHandle.WaitAll%2A>操作します。</span><span class="sxs-lookup"><span data-stu-id="27968-124">The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.</span></span>  
  
 <span data-ttu-id="27968-125">共通言語ランタイムの待機可能オブジェクトの数を提供<xref:System.Threading.ManualResetEvent>、 <xref:System.Threading.AutoResetEvent>、および<xref:System.Threading.Mutex>Win32 の同期プリミティブをすべてのミラー化します。</span><span class="sxs-lookup"><span data-stu-id="27968-125">The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27968-126">次の例で使用する方法、<xref:System.IAsyncResult.AsyncWaitHandle%2A>を取得するプロパティ、 <xref:System.Threading.WaitHandle>、およびデリゲート上での非同期呼び出しを待機する方法です。</span><span class="sxs-lookup"><span data-stu-id="27968-126">The following example demonstrates how to use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="27968-127"><xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。</span><span class="sxs-lookup"><span data-stu-id="27968-127">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="27968-128">例は、2 つのクラスで構成されています: 非同期的に呼び出されるメソッドとを含むクラスを含むクラス、`Main`呼び出しを行うメソッドです。</span><span class="sxs-lookup"><span data-stu-id="27968-128">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="27968-129">詳細については、およびデリゲートを使用するメソッドの非同期呼び出しの例については、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="27968-129">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="27968-130">実装するオブジェクト<see cref="T:System.IAsyncResult" />を作成する必要はありません、<see cref="T:System.Threading.WaitHandle" />まで、<see cref="P:System.IAsyncResult.AsyncWaitHandle" />プロパティは読み取りです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-130">The object that implements <see cref="T:System.IAsyncResult" /> does not need to create the <see cref="T:System.Threading.WaitHandle" /> until the <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> property is read.</span>
            </span>
            <span data-ttu-id="27968-131">選択することですが、<see cref="T:System.IAsyncResult" />実行者します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-131">It is the choice of the <see cref="T:System.IAsyncResult" /> implementer.</span>
            </span>
            <span data-ttu-id="27968-132">ただし、実装を作成する場合<see cref="P:System.IAsyncResult.AsyncWaitHandle" />、信号を実装者の責任である、<see cref="T:System.Threading.WaitHandle" />を適切なタイミングで待機が終了されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-132">However, if the implementer creates <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, it is the responsibility of the implementer to signal the <see cref="T:System.Threading.WaitHandle" /> that will terminate the wait at the appropriate time.</span>
            </span>
            <span data-ttu-id="27968-133">たとえば、<see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />非同期的に呼び出されたメソッドが戻るときに、呼び出し元の代わり待機を終了します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-133">For example, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> terminates the wait on behalf of the caller when an asynchronously invoked method returns.</span>
            </span>
            <span data-ttu-id="27968-134">作成すると、<see cref="P:System.IAsyncResult.AsyncWaitHandle" />が維持される、ユーザーは、非同期操作を完了するメソッドを呼び出すまでです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-134">Once created, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> should be kept alive until the user calls the method that concludes the asynchronous operation.</span>
            </span>
            <span data-ttu-id="27968-135">時刻の背後にあるオブジェクト at<see cref="P:System.IAsyncResult.AsyncWaitHandle" />破棄することができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-135">At that time the object behind <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> can be discarded.</span>
            </span>
          </para>
        </block>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="27968-136">操作が (ポーリング) ではなく完了するを待機しているクライアントでは、このプロパティを使用して、待機する同期オブジェクトを取得します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-136">Clients that wait for the operation to complete (as opposed to polling) use this property to obtain a synchronization object to wait on.</span>
            </span>
            <block subset="none" type="note">
              <para>
                <span data-ttu-id="27968-137">使用すると、<see langword="BeginInvoke" />メソッドを非同期的に呼び出すし、その結果から待機ハンドルを取得するデリゲートのメソッド<see cref="T:System.IAsyncResult" />、呼び出すことによって、使用を終了するとすぐには、待機ハンドルを終了することをお勧め、<see cref="M:System.Threading.WaitHandle.Close" />メソッドです。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="27968-137">When you use the <see langword="BeginInvoke" /> method of a delegate to call a method asynchronously and obtain a wait handle from the resulting <see cref="T:System.IAsyncResult" />, we recommend that you close the wait handle as soon as you are finished using it, by calling the <see cref="M:System.Threading.WaitHandle.Close" /> method.</span>
                </span>
                <span data-ttu-id="27968-138">待機ハンドルへのすべての参照を解放するだけで、ガベージ コレクションをクリア、待機ハンドルが破棄可能なオブジェクトを明示的に終了または破棄されるときにガベージ コレクションはより効率的に動作時にシステム リソースが解放されます。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="27968-138">If you simply release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle, but garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</span>
                </span>
                <span data-ttu-id="27968-139">詳細については、<see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> プロパティを参照してください。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="27968-139">For more information, see the <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> property.</span>
                </span>
              </para>
            </block>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="27968-140">非同期操作が同期的に完了したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="27968-140">Gets a value that indicates whether the asynchronous operation completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="27968-141">非同期操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="27968-141">
              <see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27968-142">呼び出しの同期の完了がで検出されたかどうか、<xref:System.AsyncCallback>デリゲート、非同期操作を開始したスレッドが現在のスレッドであると考えられます。</span><span class="sxs-lookup"><span data-stu-id="27968-142">If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="27968-143">ほとんどの実行者、<see cref="T:System.IAsyncResult" />インターフェイスは、このプロパティは使用しませんし、返す必要があります<see langword="false" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-143">Most implementers of the <see cref="T:System.IAsyncResult" /> interface will not use this property and should return <see langword="false" />.</span>
            </span>
            <span data-ttu-id="27968-144">以降で、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]で作成されるタスク、<see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />メソッドは、このプロパティが正しく実装されていない場合は完了しません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-144">Beginning with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], a task that is created with the <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> method will not complete if this property is not implemented correctly.</span>
            </span>
            <span data-ttu-id="27968-145">参照してください[4.5 でのアプリケーションの互換性](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-145">See [Application Compatibility in 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</span>
            </span>
          </para>
        </block>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="27968-146">このプロパティを使用して、非同期操作が同期的に完了したかどうかを確認します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-146">Use this property to determine if the asynchronous operation completed synchronously.</span>
            </span>
            <span data-ttu-id="27968-147">たとえば、このプロパティを返すことができます<see langword="true" />非同期 I/O 操作の I/O 要求が小さい場合。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-147">For example, this property can return <see langword="true" /> for an asynchronous I/O operation if the I/O request was small.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="27968-148">非同期操作が完了したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="27968-148">Gets a value that indicates whether the asynchronous operation has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="27968-149">操作が完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="27968-149">
              <see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27968-150">このプロパティが`true`、安全、非同期操作で使用するために割り当てるすべてのリソースを破棄することが前提としています。</span><span class="sxs-lookup"><span data-stu-id="27968-150">When this property is `true`, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27968-151">次の例を使用する方法を示しています、<xref:System.IAsyncResult.IsCompleted%2A>のプロパティ、<xref:System.IAsyncResult>の非同期呼び出しの完了時に検出します。</span><span class="sxs-lookup"><span data-stu-id="27968-151">The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> to discover when an asynchronous call completes.</span></span> <span data-ttu-id="27968-152">この例では、非同期呼び出しを使用して、`BeginInvoke`デリゲートのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="27968-152">In this case, the asynchronous call is made by using the `BeginInvoke` method of a delegate.</span></span> <span data-ttu-id="27968-153">使用する場合があります、<xref:System.IAsyncResult.IsCompleted%2A>完了スレッドから非同期呼び出しを行うときに、ユーザー インターフェイスのサービスをポーリングするプロパティです。</span><span class="sxs-lookup"><span data-stu-id="27968-153">You might use the <xref:System.IAsyncResult.IsCompleted%2A> property to poll for completion when making the asynchronous call from a thread that services the user interface.</span></span> <span data-ttu-id="27968-154">完了をポーリングすると、呼び出し元スレッドは、 <xref:System.Threading.ThreadPool> スレッドで非同期呼び出しを実行しながら、実行を継続できます。</span><span class="sxs-lookup"><span data-stu-id="27968-154">Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.</span></span>  
  
 <span data-ttu-id="27968-155">例は、2 つのクラスで構成されています: 非同期的に呼び出されるメソッドとを含むクラスを含むクラス、`Main`呼び出しを行うメソッドです。</span><span class="sxs-lookup"><span data-stu-id="27968-155">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="27968-156">詳細については、およびデリゲートを使用するメソッドの非同期呼び出しの例については、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="27968-156">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="27968-157">通常実装者がこのプロパティの値としてプライベート フィールドまたは内部のテストの値を返します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-157">Implementers will typically return the value of a private field or internal test as the value of this property.</span>
            </span>
          </para>
        </block>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="27968-158">(同期オブジェクトで待機している) ではなく操作のステータスのポーリングを行うクライアントでは、このプロパティを使用して、操作の状態を確認します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="27968-158">Clients that poll for operation status (as opposed to waiting on a synchronization object) use this property to determine the status of the operation.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>