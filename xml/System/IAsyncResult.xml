<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d682ea6cc15e08be504abd15046053e596c9a02" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39827851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>非同期操作のステータスを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IAsyncResult>インターフェイスが非同期的に操作できるメソッドを含むクラスによって実装されます。 など、非同期操作を開始するメソッドの戻り値の型は<xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>、最後に、非同期操作などのメソッドに渡されると<xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>します。 <xref:System.IAsyncResult> オブジェクトによって呼び出されたメソッドに渡されるも<xref:System.AsyncCallback>非同期操作の完了時にデリゲートします。  
  
 サポートするオブジェクト、<xref:System.IAsyncResult>インターフェイス非同期操作の状態情報を格納し、スレッド、操作が完了したときに通知することができるようにする同期オブジェクトを提供します。  
  
> [!NOTE]
>  <xref:System.Runtime.Remoting.Messaging.AsyncResult>クラスの実装は、<xref:System.IAsyncResult>によって返される、`BeginInvoke`メソッドのメソッドを非同期的に呼び出すデリゲートを使用するとします。  
  
 方法の詳細については<xref:System.IAsyncResult>インターフェイスを使用してを参照してください、 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)トピック。  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>を取得するプロパティを<xref:System.Threading.WaitHandle>、およびデリゲートの非同期呼び出しを待機する方法。 <xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。  
  
 例では、2 つのクラスから成る: を非同期的に呼び出されるメソッドを含むクラスを含むクラス、`Main`メソッドが、呼び出しを行います。  
  
 詳細については、デリゲートを使用するメソッドの非同期呼び出しの例については、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作に関する情報を限定または格納するユーザー定義オブジェクトを取得します。</summary>
        <value>非同期操作に関する情報を限定または格納するユーザー定義オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、非同期操作を開始するメソッドの最後のパラメーターであるオブジェクトを返します。  
  
   
  
## Examples  
 コード例を次に示しますが、どのように<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A>プロパティはコールバック メソッドに情報を渡すために使用します。 最後のパラメーター、`BeginInvoke`メソッドの呼び出しはコールバック メソッドを使用して、出力メッセージの書式指定文字列。  
  
 例では、2 つのクラスから成る: を非同期的に呼び出されるメソッドを含むクラスを含むクラス、`Main`メソッドが、呼び出しを行います。  
  
 このコールバックの例のしくみの詳細とデリゲートを使用するメソッドの非同期呼び出しの例については、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>操作の開始時に指定されたアプリケーションで定義されたオブジェクトを取得する非同期操作の呼び出し元を許可するには、このプロパティを実装します。</para>
        </block>
        <block subset="none" type="usage">
          <para>このオブジェクトは、する非同期操作の状態情報を渡すために使用できる、<see cref="T:System.AsyncCallback" />提供します。</para>
        </block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" /> を取得します。</summary>
        <value>非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値により、クライアント ポーリングではなく完了する非同期操作を待機する<xref:System.IAsyncResult.IsCompleted%2A>操作の終了までです。 戻り値を実行するために使用できます、 <xref:System.Threading.WaitHandle.WaitOne%2A>、 <xref:System.Threading.WaitHandle.WaitAny%2A>、または<xref:System.Threading.WaitHandle.WaitAll%2A>操作。  
  
 共通言語ランタイムなど、待機可能オブジェクトの数値を提供<xref:System.Threading.ManualResetEvent>、 <xref:System.Threading.AutoResetEvent>、および<xref:System.Threading.Mutex>、すべての Win32 同期プリミティブをミラー化します。  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.IAsyncResult.AsyncWaitHandle%2A>を取得するプロパティを<xref:System.Threading.WaitHandle>、およびデリゲートの非同期呼び出しを待機する方法。 <xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。  
  
 例では、2 つのクラスから成る: を非同期的に呼び出されるメソッドを含むクラスを含むクラス、`Main`メソッドが、呼び出しを行います。  
  
 詳細については、デリゲートを使用するメソッドの非同期呼び出しの例については、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>実装するオブジェクト<see cref="T:System.IAsyncResult" />を作成する必要はありません、<see cref="T:System.Threading.WaitHandle" />まで、<see cref="P:System.IAsyncResult.AsyncWaitHandle" />プロパティが読み取り専用です。選択とは、<see cref="T:System.IAsyncResult" />実装します。ただし、実装を作成する場合<see cref="P:System.IAsyncResult.AsyncWaitHandle" />、通知を実装者の役割です、<see cref="T:System.Threading.WaitHandle" />適切なタイミングで待機を終了します。たとえば、<see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />非同期的に呼び出されたメソッドが戻るときに、呼び出し元に代わって待機を終了します。作成すると、<see cref="P:System.IAsyncResult.AsyncWaitHandle" />ユーザーは、非同期操作の最後にあるメソッドを呼び出すまでアライブ保持する必要があります。そのころ、背後にあるオブジェクト<see cref="P:System.IAsyncResult.AsyncWaitHandle" />破棄できます。</para>
        </block>
        <block subset="none" type="usage">
          <para>操作が (ポーリング) ではなく完了するまで待機しているクライアントでは、このプロパティを使用して、上で待機する同期オブジェクトを取得します。<block subset="none" type="note"><para> 使用すると、<see langword="BeginInvoke" />メソッドを非同期的に呼び出すし、その結果から待機ハンドルを取得するデリゲートのメソッド<see cref="T:System.IAsyncResult" />、呼び出すことによって、使用が終了するとすぐに、待機ハンドルを閉じることをお勧め、<see cref="M:System.Threading.WaitHandle.Close" />メソッド。待機ハンドルへのすべての参照を解放するだけで、ガベージ コレクション、待機ハンドルを解放しますが、破棄可能なオブジェクトを明示的に終了または破棄されるときにガベージ コレクションがより効率的に動作するときにシステム リソースが解放されます。詳細については、次を参照してください。、<see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />プロパティ。  </para></block></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作が同期的に完了したかどうかを示す値を取得します。</summary>
        <value>非同期操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出しの同期の完了がで検出されたかどうか、<xref:System.AsyncCallback>デリゲート、非同期操作を開始したスレッドが現在のスレッドであると考えられます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>ほとんどの実行者、<see cref="T:System.IAsyncResult" />インターフェイスは、このプロパティを使用していないと、返す必要があります<see langword="false" />します。以降では、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]で作成されるタスク、<see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />メソッドは、このプロパティが正しく実装されていない場合は完了しません。参照してください[4.5 のアプリケーションの互換性](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)します。</para>
        </block>
        <block subset="none" type="usage">
          <para>このプロパティを使用して、非同期の操作が同期的に完了したかどうかを判断します。たとえば、このプロパティを返すことができます<see langword="true" />非同期 I/O 操作の I/O 要求が小さい場合。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作が完了したかどうかを示す値を取得します。</summary>
        <value>操作が完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが`true`は、非同期操作で使用するために割り当てたすべてのリソースを破棄することを想定できます。  
  
   
  
## Examples  
 次の例は、使用する方法を示します、<xref:System.IAsyncResult.IsCompleted%2A>のプロパティ、<xref:System.IAsyncResult>非同期呼び出しの完了時に検出します。 ここでは、非同期呼び出しを使用して、`BeginInvoke`のデリゲート メソッド。 使用する場合があります、<xref:System.IAsyncResult.IsCompleted%2A>完了スレッドから非同期呼び出しを行うときに、ユーザー インターフェイスのサービスをポーリングするプロパティ。 完了をポーリングすると、呼び出し元スレッドは、 <xref:System.Threading.ThreadPool> スレッドで非同期呼び出しを実行しながら、実行を継続できます。  
  
 例では、2 つのクラスから成る: を非同期的に呼び出されるメソッドを含むクラスを含むクラス、`Main`メソッドが、呼び出しを行います。  
  
 詳細については、デリゲートを使用するメソッドの非同期呼び出しの例については、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>実装者はこのプロパティの値として通常プライベート フィールドまたは内部のテストの値を返します。</para>
        </block>
        <block subset="none" type="usage">
          <para>(同期オブジェクトで待機中) ではなく操作のステータスのポーリングを行うクライアントでは、このプロパティを使用して、操作の状態を確認します。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>