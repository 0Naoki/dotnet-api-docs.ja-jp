<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cf9514e878010f1710a9517414d04169c8524bc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431073" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="7c865-101">比較するオブジェクトの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7c865-101">The type of objects to compare.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="7c865-102">インスタンスの等価性判断を目的とする型固有のメソッドを作成するために値型またはクラスで実装する、汎用のメソッドを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7c865-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c865-103">このインターフェイスは、値を持つことができますされるした処理を表します (例、数値と文字列クラス) の型によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="7c865-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="7c865-104">値型またはクラスで実装する、<xref:System.IEquatable%601.Equals%2A>インスタンスの等価性を決定するために適切な種類に固有のメソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="7c865-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7c865-105"><xref:System.IComparable%601>インターフェイスを定義、<xref:System.IComparable%601.CompareTo%2A>メソッドを実装する型のインスタンスの並べ替え順序を決定します。</span><span class="sxs-lookup"><span data-stu-id="7c865-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="7c865-106"><xref:System.IEquatable%601>インターフェイスを定義、<xref:System.IEquatable%601.Equals%2A>メソッドを実装する型のインスタンスが等しいかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="7c865-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="7c865-107"><xref:System.IEquatable%601>インターフェイスがなどのジェネリック コレクション オブジェクトで使用が<xref:System.Collections.Generic.Dictionary%602>、 <xref:System.Collections.Generic.List%601>、および<xref:System.Collections.Generic.LinkedList%601>などのメソッドに等しいかどうかをテストするとき`Contains`、 `IndexOf`、 `LastIndexOf`、および`Remove`です。</span><span class="sxs-lookup"><span data-stu-id="7c865-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="7c865-108">ジェネリック コレクション内に保存されている任意のオブジェクトを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c865-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c865-109">例を参照して、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7c865-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="7c865-110">
        <para>型パラメーターを置き換える、<see cref="T:System.IEquatable`1" />がこのインターフェイスを実装している型を持つインターフェイスです。実装する場合<see cref="T:System.IEquatable`1" />の基本クラスの実装を上書きすることも必要があります。<see cref="M:System.Object.Equals(System.Object)" />と<see cref="M:System.Object.GetHashCode" />できるように、これらの動作に一貫性のあるのは、<see cref="M:System.IEquatable`1.Equals(`0)" />メソッドです。オーバーライドする場合<see cref="M:System.Object.Equals(System.Object)" />、静的への呼び出しで、オーバーライドされた実装が呼び出されますも<see langword="Equals(System.Object, System.Object)" />クラスのメソッドです。さらに、必要がありますをオーバー ロードする、<see langword="op_Equality" />と<see langword="op_Inequality" />演算子。これにより、すべてのテストが等しいかどうかが一貫性のある結果を返すことです。<block subset="none" type="note"><para> 上書きする方法について<see cref="M:System.Object.Equals(System.Object)" />を参照してください、<see cref="M:System.Object.Equals(System.Object)" />資料です。</para></block>  値型の場合は常に実装する<see cref="T:System.IEquatable`1" />オーバーライドと<see cref="M:System.Object.Equals(System.Object)" />パフォーマンス向上のためです。<see cref="M:System.Object.Equals(System.Object)" />値の型をボックスし、等しいかどうかの 2 つの値を比較するためにリフレクションに依存しています。両方の実装<see cref="M:System.IEquatable`1.Equals(`0)" />のオーバーライドと<see cref="M:System.Object.Equals(System.Object)" />一貫性のある結果を返す必要があります。実装する場合<see cref="T:System.IEquatable`1" />も実装する必要があります<see cref="T:System.IComparable`1" />場合は、型のインスタンスを順次または並べ替えことができます。型を実装する場合<see cref="T:System.IComparable`1" />、実装することもほぼ<see cref="T:System.IEquatable`1" />します。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="7c865-110">
          <para>Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.  If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results.  <block subset="none" type="note"><para> For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.  </para></block>  For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance. <see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality. Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.  If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted. If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</para>
        </span>
      </span>
      <span data-ttu-id="7c865-111">
        <para>ここで型が、順序関係をサポートしますが、等値の順序関係と異なる可能性があります設計の一部があることに注意してください。ここで、アルファベット順に並べ替え '個人' クラスを検討してください。同じ名前を持つ 2 人のユーザーは、同じ値の並べ替えが、同じ人物ではありません。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="7c865-111">
          <para>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation. Consider a `Person` class where you sort alphabetically. Two people with the same name sort the same, but are not the same person.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="7c865-112">このオブジェクトと比較するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c865-112">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7c865-113">現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c865-113">Indicates whether the current object is equal to another object of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7c865-114">現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7c865-114">
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c865-115">実装、<xref:System.IEquatable%601.Equals%2A>メソッド型の別のオブジェクトとの等価性テストを実行するためのものが`T`、現在のオブジェクトと同じ型です。</span><span class="sxs-lookup"><span data-stu-id="7c865-115">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="7c865-116"><xref:System.IEquatable%601.Equals(%600)>メソッドは、次の状況で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7c865-116">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="7c865-117">ときに、`Equals`メソッドが呼び出されると、`other`引数は、厳密に型指定された型のオブジェクト`T`です。</span><span class="sxs-lookup"><span data-stu-id="7c865-117">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="7c865-118">(場合`other`型ではありません`T`、基本<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7c865-118">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="7c865-119">2 つのメソッドの<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>若干より高いパフォーマンスを提供します)。</span><span class="sxs-lookup"><span data-stu-id="7c865-119">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="7c865-120">多数のジェネリック コレクション オブジェクトの検索メソッドが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="7c865-120">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="7c865-121">これらの型とそのメソッドの一部を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="7c865-121">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="7c865-122">ジェネリック オーバー ロードのいくつか、<xref:System.Array.BinarySearch%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7c865-122">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="7c865-123">検索方法、<xref:System.Collections.Generic.List%601>クラスを含む<xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>、 <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>、 <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>、および<xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="7c865-123">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="7c865-124">検索方法、<xref:System.Collections.Generic.Dictionary%602>クラスを含む<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A>と<xref:System.Collections.Generic.IDictionary%602.Remove%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7c865-124">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="7c865-125">ジェネリックの検索方法<xref:System.Collections.Generic.LinkedList%601>クラスを含む<xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType>と<xref:System.Collections.Generic.LinkedList%601.Remove%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7c865-125">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="7c865-126">つまり、クラスのオブジェクトは、配列やジェネリック コレクション オブジェクトに格納されること可能性を処理するにを実装することをお勧め<xref:System.IEquatable%601>オブジェクトを簡単に識別および操作できるようにします。</span><span class="sxs-lookup"><span data-stu-id="7c865-126">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="7c865-127">実装する場合、<xref:System.IEquatable%601.Equals%2A>メソッド、ジェネリック型引数で指定された型を適切に等しいかどうかを定義します。</span><span class="sxs-lookup"><span data-stu-id="7c865-127">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="7c865-128">たとえば、型引数は、 <xref:System.Int32>、2 つの 32 ビット符号付き整数の比較を適切に等しいかどうかを定義します。</span><span class="sxs-lookup"><span data-stu-id="7c865-128">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c865-129">次の例の実装の一部を示しています、`Person`を実装するクラス<xref:System.IEquatable%601>2 つのプロパティと`LastName`と`SSN`です。</span><span class="sxs-lookup"><span data-stu-id="7c865-129">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="7c865-130"><xref:System.IEquatable%601.Equals%2A>メソッドを返します。`True`場合、 `SSN` 2 つのプロパティ`Person`オブジェクトと同じです。 を返しますそれ以外の場合、`False`です。</span><span class="sxs-lookup"><span data-stu-id="7c865-130">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="7c865-131">`Person` オブジェクトを格納することができますし、<xref:System.Collections.Generic.List%601>オブジェクトし、を識別できます、`Contains`メソッドを次の例のようにします。</span><span class="sxs-lookup"><span data-stu-id="7c865-131">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="7c865-132">
            <para>実装する場合<see cref="M:System.IEquatable`1.Equals(`0)" />の基本クラスの実装を上書きすることも必要があります。<see cref="M:System.Object.Equals(System.Object)" />と<see cref="M:System.Object.GetHashCode" />できるように、これらの動作に一貫性のあるのは、<see cref="M:System.IEquatable`1.Equals(`0)" />メソッドです。オーバーライドする場合<see cref="M:System.Object.Equals(System.Object)" />、静的への呼び出しで、オーバーライドされた実装が呼び出されますも<see langword="Equals(System.Object, System.Object)" />クラスのメソッドです。さらに、必要がありますをオーバー ロードする、<see langword="op_Equality" />と<see langword="op_Inequality" />演算子。これにより、等しいかどうかのすべてのテストに例を示していますが、一貫性のある結果が返されること。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7c865-132">
              <para>If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results, which the example illustrates.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>