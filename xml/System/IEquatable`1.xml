<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f169ba3e3ec57eac1b6bb82d978c55c2b059e3fb" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52737430" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="4ea28-101">比較するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="4ea28-101">The type of objects to compare.</span></span></typeparam>
    <summary><span data-ttu-id="4ea28-102">インスタンスの等価性判断を目的とする型固有のメソッドを作成するために値型またはクラスで実装する、汎用のメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ea28-103">このインターフェイスは型 (クラスの例では、数値と文字列) の値を処理できます。</span><span class="sxs-lookup"><span data-stu-id="4ea28-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="4ea28-104">値型またはクラスで実装、<xref:System.IEquatable%601.Equals%2A>インスタンスの等価性を判断するのに適した種類に固有のメソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4ea28-105"><xref:System.IComparable%601>インターフェイスを定義、<xref:System.IComparable%601.CompareTo%2A>メソッドを実装する型のインスタンスの並べ替え順序を決定します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="4ea28-106"><xref:System.IEquatable%601>インターフェイスを定義、<xref:System.IEquatable%601.Equals%2A>メソッドを実装する型のインスタンスが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="4ea28-107"><xref:System.IEquatable%601>インターフェイスがなどのジェネリック コレクション オブジェクトによって使用されます<xref:System.Collections.Generic.Dictionary%602>、 <xref:System.Collections.Generic.List%601>、および<xref:System.Collections.Generic.LinkedList%601>などのメソッドでは、等しいかどうかをテストするときに`Contains`、 `IndexOf`、 `LastIndexOf`、および`Remove`します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="4ea28-108">ジェネリック コレクション内に保存されている任意のオブジェクトを実装します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ea28-109">例をご覧ください、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4ea28-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="4ea28-110">型パラメーターを置き換える、<see cref="T:System.IEquatable`1" />がこのインターフェイスを実装している型を持つインターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="4ea28-110">Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.</span></span>  
  
<span data-ttu-id="4ea28-111">実装する場合<see cref="T:System.IEquatable`1" />の基本クラスの実装をオーバーライドすることも必要があります。<see cref="M:System.Object.Equals(System.Object)" />と<see cref="M:System.Object.GetHashCode" />の動作の一貫性のあるあるように、<see cref="M:System.IEquatable`1.Equals(`0)" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="4ea28-111">If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method.</span></span> <span data-ttu-id="4ea28-112">オーバーライドする場合<see cref="M:System.Object.Equals(System.Object)" />、静的な呼び出しでオーバーライドされた実装が呼び出されますも<see langword="Equals(System.Object, System.Object)" />クラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="4ea28-112">If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class.</span></span> <span data-ttu-id="4ea28-113">さらに、オーバー ロードする必要があります、<see langword="op_Equality" />と<see langword="op_Inequality" />演算子。</span><span class="sxs-lookup"><span data-stu-id="4ea28-113">In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators.</span></span> <span data-ttu-id="4ea28-114">これにより、すべてのテストが等しいかどうかが一貫性のある結果を返します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-114">This ensures that all tests for equality return consistent results.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="4ea28-115">オーバーライドについて<see cref="M:System.Object.Equals(System.Object)" />を参照してください、<see cref="M:System.Object.Equals(System.Object)" />記事。</span><span class="sxs-lookup"><span data-stu-id="4ea28-115">For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="4ea28-116">値の型を実装することを常に<see cref="T:System.IEquatable`1" />オーバーライドと<see cref="M:System.Object.Equals(System.Object)" />パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-116">For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance.</span></span> <span data-ttu-id="4ea28-117"><see cref="M:System.Object.Equals(System.Object)" /> ボックスの値型と等しいかどうかの 2 つの値を比較するためにリフレクションに依存しています。</span><span class="sxs-lookup"><span data-stu-id="4ea28-117"><see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality.</span></span> <span data-ttu-id="4ea28-118">両方の実装<see cref="M:System.IEquatable`1.Equals(`0)" />のオーバーライドと<see cref="M:System.Object.Equals(System.Object)" />一貫性のある結果を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="4ea28-118">Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.</span></span>  
  
<span data-ttu-id="4ea28-119">実装する場合<see cref="T:System.IEquatable`1" />、実装する必要がありますも<see cref="T:System.IComparable`1" />型のインスタンスの順序付けまたは並べ替えを指定できる場合。</span><span class="sxs-lookup"><span data-stu-id="4ea28-119">If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted.</span></span> <span data-ttu-id="4ea28-120">型が実装されている場合<see cref="T:System.IComparable`1" />、実装することもほぼ常に<see cref="T:System.IEquatable`1" />します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-120">If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</span></span></para>
      <para><span data-ttu-id="4ea28-121">型が、注文のリレーションシップをサポートしていますが等しいかどうかは、注文のリレーションシップから異なる場合がある一部のデザインがあることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="4ea28-121">Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation.</span></span> <span data-ttu-id="4ea28-122">検討してください、`Person`場所をアルファベット順に並べ替えクラス。</span><span class="sxs-lookup"><span data-stu-id="4ea28-122">Consider a `Person` class where you sort alphabetically.</span></span> <span data-ttu-id="4ea28-123">同じ名前の 2 人のユーザーは同じですが、並べ替えが、同じユーザーではありません。</span><span class="sxs-lookup"><span data-stu-id="4ea28-123">Two people with the same name sort the same, but are not the same person.</span></span></para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="4ea28-124">このオブジェクトと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="4ea28-124">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="4ea28-125">現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-125">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns><span data-ttu-id="4ea28-126">現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="4ea28-126"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ea28-127">実装、<xref:System.IEquatable%601.Equals%2A>メソッド型の別のオブジェクトと等しいかどうかテストを実行するものでは`T`、現在のオブジェクトと同じ型。</span><span class="sxs-lookup"><span data-stu-id="4ea28-127">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="4ea28-128"><xref:System.IEquatable%601.Equals(%600)>メソッドは、次の状況で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4ea28-128">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="4ea28-129">ときに、`Equals`メソッドが呼び出されると、`other`引数は、厳密に型指定されたオブジェクト型の`T`します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-129">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="4ea28-130">(場合`other`の型が`T`、基本<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="4ea28-130">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="4ea28-131">2 つのメソッドの<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>少し高いパフォーマンスを提供します)。</span><span class="sxs-lookup"><span data-stu-id="4ea28-131">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="4ea28-132">複数のジェネリック コレクション オブジェクトの検索メソッドを呼び出すときにします。</span><span class="sxs-lookup"><span data-stu-id="4ea28-132">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="4ea28-133">これらの型とそのメソッドの一部を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-133">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="4ea28-134">ジェネリック オーバー ロードの一部、<xref:System.Array.BinarySearch%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4ea28-134">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="4ea28-135">検索方法、<xref:System.Collections.Generic.List%601>クラスを含む<xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>、 <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>、 <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>、および<xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-135">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="4ea28-136">検索方法、<xref:System.Collections.Generic.Dictionary%602>クラスを含む<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A>と<xref:System.Collections.Generic.IDictionary%602.Remove%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-136">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="4ea28-137">ジェネリックの検索方法<xref:System.Collections.Generic.LinkedList%601>クラスを含む<xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType>と<xref:System.Collections.Generic.LinkedList%601.Remove%2A>します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-137">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="4ea28-138">つまり、クラスのオブジェクトを配列やジェネリック コレクション オブジェクトに格納されること可能性を処理するにを実装することをお勧め<xref:System.IEquatable%601>オブジェクトを簡単に識別および操作できるようにします。</span><span class="sxs-lookup"><span data-stu-id="4ea28-138">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="4ea28-139">実装する場合、<xref:System.IEquatable%601.Equals%2A>メソッド、ジェネリック型引数で指定された型を適切に等しいかどうかを定義します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-139">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="4ea28-140">たとえば、型引数が<xref:System.Int32>、2 つの 32 ビット符号付き整数の比較を適切に等しいかどうかを定義します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-140">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ea28-141">次の例の実装の一部を示しています、`Person`を実装するクラス<xref:System.IEquatable%601>が 2 つのプロパティと`LastName`と`SSN`します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-141">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="4ea28-142"><xref:System.IEquatable%601.Equals%2A>メソッドを返します。`True`場合、 `SSN` 2 つのプロパティ`Person`オブジェクトは同じです。 それ以外を返します`False`します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-142">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="4ea28-143">`Person` オブジェクトに保存できる、<xref:System.Collections.Generic.List%601>オブジェクトし、を識別できます、`Contains`メソッドを次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="4ea28-143">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4ea28-144">実装する場合<see cref="M:System.IEquatable`1.Equals(`0)" />の基本クラスの実装をオーバーライドすることも必要があります。<see cref="M:System.Object.Equals(System.Object)" />と<see cref="M:System.Object.GetHashCode" />の動作の一貫性のあるあるように、<see cref="M:System.IEquatable`1.Equals(`0)" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="4ea28-144">If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method.</span></span> <span data-ttu-id="4ea28-145">オーバーライドする場合<see cref="M:System.Object.Equals(System.Object)" />、静的な呼び出しでオーバーライドされた実装が呼び出されますも<see langword="Equals(System.Object, System.Object)" />クラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="4ea28-145">If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class.</span></span> <span data-ttu-id="4ea28-146">さらに、オーバー ロードする必要があります、<see langword="op_Equality" />と<see langword="op_Inequality" />演算子。</span><span class="sxs-lookup"><span data-stu-id="4ea28-146">In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators.</span></span> <span data-ttu-id="4ea28-147">これにより、すべてのテストが等しいかどうかが、例を示していますが、一貫性のある結果を返すこと。</span><span class="sxs-lookup"><span data-stu-id="4ea28-147">This ensures that all tests for equality return consistent results, which the example illustrates.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>