<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEquatable`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac519bc49f94beee1a3c075a5ffa5eaa52f9c90027f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19bc49f94beee1a3c075a5ffa5eaa52f9c90027f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The type of objects to compare.</source>
          <target state="translated">比較するオブジェクトの型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IEquatable`1">
          <source>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</source>
          <target state="translated">インスタンスの等価性判断を目的とする型固有のメソッドを作成するために値型またはクラスで実装する、汎用のメソッドを定義します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</source>
          <target state="translated">このインターフェイスは、値を持つことができますされるした処理を表します (例、数値と文字列クラス) の型によって実装されます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>A value type or class implements the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method to create a type-specific method suitable for determining equality of instances.</source>
          <target state="translated">値型またはクラスで実装する、<ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>インスタンスの等価性を決定するために適切な種類に固有のメソッドを作成します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method, which determines the sort order of instances of the implementing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph>インターフェイスを定義、<ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph>メソッドを実装する型のインスタンスの並べ替え順序を決定します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, which determines the equality of instances of the implementing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph>インターフェイスを定義、<ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>メソッドを実装する型のインスタンスが等しいかどうかを決定します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface is used by generic collection objects such as <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> when testing for equality in such methods as <ph id="ph5">`Contains`</ph>, <ph id="ph6">`IndexOf`</ph>, <ph id="ph7">`LastIndexOf`</ph>, and <ph id="ph8">`Remove`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph>インターフェイスがなどのジェネリック コレクション オブジェクトで使用が<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>などのメソッドに等しいかどうかをテストするとき<ph id="ph5">`Contains`</ph>、 <ph id="ph6">`IndexOf`</ph>、 <ph id="ph7">`LastIndexOf`</ph>、および<ph id="ph8">`Remove`</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>It should be implemented for any object that might be stored in a generic collection.</source>
          <target state="translated">ジェネリック コレクション内に保存されている任意のオブジェクトを実装する必要があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>See the example for the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">例を参照して、<ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Replace the type parameter of the <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> interface with the type that is implementing this interface.</source>
          <target state="translated">型パラメーターを置き換える、<ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>がこのインターフェイスを実装している型を持つインターフェイスです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, you should also override the base class implementations of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> so that their behavior is consistent with that of the <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> method.</source>
          <target state="translated">実装する場合<ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>の基本クラスの実装を上書きすることも必要があります。<ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>と<ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph>できるように、これらの動作に一貫性のあるのは、<ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you do override <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, your overridden implementation is also called in calls to the static <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> method on your class.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>、静的への呼び出しで、オーバーライドされた実装が呼び出されますも<ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph>クラスのメソッドです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>In addition, you should overload the <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> and <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operators.</source>
          <target state="translated">さらに、必要がありますをオーバー ロードする、<ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph>と<ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph>演算子。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>This ensures that all tests for equality return consistent results.</source>
          <target state="translated">これにより、すべてのテストが等しいかどうかが一貫性のある結果を返すことです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>For information on overriding <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, see the <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> article.</source>
          <target state="translated">上書きする方法について<ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>を参照してください、<ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>資料です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>For a value type, you should always implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> and override <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> for better performance.</source>
          <target state="translated">値型の場合は常に実装する<ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>オーバーライドと<ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>パフォーマンス向上のためです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source><ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> boxes value types and relies on reflection to compare two values for equality.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> ボックスの値型と等しいかどうかの 2 つの値を比較するためにリフレクションに依存しています。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Both your implementation of <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> and your override of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> should return consistent results.</source>
          <target state="translated">両方の実装<ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>のオーバーライドと<ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>一貫性のある結果を返す必要があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, you should also implement <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> if instances of your type can be ordered or sorted.</source>
          <target state="translated">実装する場合<ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>も実装する必要があります<ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph>場合は、型のインスタンスを順次または並べ替えことができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If your type implements <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, you almost always also implement <ph id="ph2">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</source>
          <target state="translated">型を実装する場合<ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>、実装することもほぼ<ph id="ph2">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation.</source>
          <target state="translated">ここで型が、順序関係をサポートしますが、等値の順序関係と異なる可能性があります設計の一部があることに注意してください。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Consider a <ph id="ph1">`Person`</ph> class where you sort alphabetically.</source>
          <target state="translated">検討してください、<ph id="ph1">`Person`</ph>場所をアルファベット順に並べ替えクラスです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Two people with the same name sort the same, but are not the same person.</source>
          <target state="translated">同じ名前を持つ 2 人のユーザーは、同じ値の並べ替えが、同じ人物ではありません。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source>An object to compare with this object.</source>
          <target state="translated">このオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のオブジェクトが <ph id="ph2">&lt;paramref name="other" /&gt;</ph> パラメーターと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method is intended to perform a test for equality with another object of type <ph id="ph2">`T`</ph>, the same type as the current object.</source>
          <target state="translated">実装、<ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>メソッド型の別のオブジェクトとの等価性テストを実行するためのものが<ph id="ph2">`T`</ph>、現在のオブジェクトと同じ型です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601.Equals(%600)&gt;</ph> method is called in the following circumstances:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601.Equals(%600)&gt;</ph>メソッドは、次の状況で呼び出されます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When the <ph id="ph1">`Equals`</ph> method is called and the <ph id="ph2">`other`</ph> argument is a strongly-typed object of type <ph id="ph3">`T`</ph>.</source>
          <target state="translated">ときに、<ph id="ph1">`Equals`</ph>メソッドが呼び出されると、<ph id="ph2">`other`</ph>引数は、厳密に型指定された型のオブジェクト<ph id="ph3">`T`</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>(If <ph id="ph1">`other`</ph> is not of type <ph id="ph2">`T`</ph>, the base <ph id="ph3">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">(場合<ph id="ph1">`other`</ph>型ではありません<ph id="ph2">`T`</ph>、基本<ph id="ph3">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Of the two methods, <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> offers slightly better performance.)</source>
          <target state="translated">2 つのメソッドの<ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph>若干より高いパフォーマンスを提供します)。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When the search methods of a number of generic collection objects are called.</source>
          <target state="translated">多数のジェネリック コレクション オブジェクトの検索メソッドが呼び出された場合。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Some of these types and their methods include the following:</source>
          <target state="translated">これらの型とそのメソッドの一部を以下に示します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Some of the generic overloads of the <ph id="ph1">&lt;xref:System.Array.BinarySearch%2A&gt;</ph> method.</source>
          <target state="translated">ジェネリック オーバー ロードのいくつか、<ph id="ph1">&lt;xref:System.Array.BinarySearch%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">検索方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスを含む<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>.</source>
          <target state="translated">検索方法、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラスを含む<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the generic <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Remove%2A&gt;</ph>.</source>
          <target state="translated">ジェネリックの検索方法<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>クラスを含む<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Remove%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> so that the object can be easily identified and manipulated.</source>
          <target state="translated">つまり、クラスのオブジェクトは、配列やジェネリック コレクション オブジェクトに格納されること可能性を処理するにを実装することをお勧め<ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph>オブジェクトを簡単に識別および操作できるようにします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When implementing the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, define equality appropriately for the type specified by the generic type argument.</source>
          <target state="translated">実装する場合、<ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>メソッド、ジェネリック型引数で指定された型を適切に等しいかどうかを定義します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>For example, if the type argument is <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, define equality appropriately for the comparison of two 32-bit signed integers.</source>
          <target state="translated">たとえば、型引数は、 <ph id="ph1">&lt;xref:System.Int32&gt;</ph>、2 つの 32 ビット符号付き整数の比較を適切に等しいかどうかを定義します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The following example shows the partial implementation of a <ph id="ph1">`Person`</ph> class that implements <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> and has two properties, <ph id="ph3">`LastName`</ph> and <ph id="ph4">`SSN`</ph>.</source>
          <target state="translated">次の例の実装の一部を示しています、<ph id="ph1">`Person`</ph>を実装するクラス<ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph>2 つのプロパティと<ph id="ph3">`LastName`</ph>と<ph id="ph4">`SSN`</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method returns <ph id="ph2">`True`</ph> if the <ph id="ph3">`SSN`</ph> property of two <ph id="ph4">`Person`</ph> objects is identical; otherwise, it returns <ph id="ph5">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>メソッドを返します。<ph id="ph2">`True`</ph>場合、 <ph id="ph3">`SSN`</ph> 2 つのプロパティ<ph id="ph4">`Person`</ph>オブジェクトと同じです。 を返しますそれ以外の場合、<ph id="ph5">`False`</ph>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source><ph id="ph1">`Person`</ph> objects can then be stored in a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object and can be identified by the <ph id="ph3">`Contains`</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`Person`</ph> オブジェクトを格納することができますし、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクトし、を識別できます、<ph id="ph3">`Contains`</ph>メソッドを次の例のようにします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>If you implement <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>, you should also override the base class implementations of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> so that their behavior is consistent with that of the <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> method.</source>
          <target state="translated">実装する場合<ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>の基本クラスの実装を上書きすることも必要があります。<ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>と<ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph>できるように、これらの動作に一貫性のあるのは、<ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>If you do override <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, your overridden implementation is also called in calls to the static <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> method on your class.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>、静的への呼び出しで、オーバーライドされた実装が呼び出されますも<ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph>クラスのメソッドです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>In addition, you should overload the <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> and <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operators.</source>
          <target state="translated">さらに、必要がありますをオーバー ロードする、<ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph>と<ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph>演算子。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>This ensures that all tests for equality return consistent results, which the example illustrates.</source>
          <target state="translated">これにより、等しいかどうかのすべてのテストに例を示していますが、一貫性のある結果が返されること。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>