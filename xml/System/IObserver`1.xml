<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="00c93a2b7fbd20c6ecdd29e16d53ca90e30b62db" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51906753" /></Metadata><TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <TypeSignature Language="F#" Value="type IObserver&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">通知情報を提供するオブジェクト。</typeparam>
    <summary>プッシュ ベースの通知を受信するメカニズムを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObserver%601>と<xref:System.IObservable%601>インターフェイスが汎用化されたプッシュ ベースの通知、オブザーバー デザイン パターンとも呼ばれるメカニズムを提供します。 <xref:System.IObservable%601>インターフェイス (プロバイダー); の通知を送信するクラスを表す、<xref:System.IObserver%601>インターフェイスは、受信する (オブザーバー) クラスを表します。 `T` 通知情報を提供するクラスを表します。  
  
 <xref:System.IObserver%601>プロバイダーから通知を受け取る実装を整列します (、<xref:System.IObservable%601>実装) をプロバイダーのそれ自体のインスタンスを渡すことによって<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>メソッド。 このメソッドが戻る、<xref:System.IDisposable>プロバイダーの前にオブザーバーをアンサブスク ライブするために使用できるオブジェクトは、通知の送信が完了するとします。  
  
 <xref:System.IObserver%601>インターフェイスはオブザーバーを実装する必要がある次の 3 つのメソッドを定義します。  
  
-   <xref:System.IObserver%601.OnNext%2A>メソッドで、新しいデータまたは状態情報をオブザーバーに提供する、プロバイダーによって呼び出されます。  
  
-   <xref:System.IObserver%601.OnError%2A>メソッドでは、データが利用不可、アクセスできない、または破損していることを示すために、プロバイダーによって通常と呼ばれる、またはプロバイダーには、その他の何らかのエラー状態が発生しました。  
  
-   <xref:System.IObserver%601.OnCompleted%2A>メソッドで、オブザーバーに通知の送信が完了したことを示す、プロバイダーによって呼び出されます。  
  
   
  
## Examples  
 次の例は、オブザーバー デザイン パターンを示しています。 定義、`Location`緯度と経度の情報を含むクラスです。  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationReporter`クラスには、<xref:System.IObserver%601>実装します。 コンソールには、現在の場所に関する情報が表示されます。 そのコンス トラクターが含まれています、`name`パラメーターは、これにより、`LocationReporter`の文字列の出力で自身を識別するインスタンス。 含まれています、`Subscribe`メソッドは、プロバイダーの呼び出しをラップする<xref:System.IObservable%601.Subscribe%2A>メソッド。 これにより、メソッドは、返された割り当てる<xref:System.IDisposable>秘密の変数への参照。 `LocationReporter`クラスも含まれています、`Unsubscribe`メソッドを呼び出す、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>メソッドによって返されるオブジェクトの<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>メソッド。 次のコード定義、`LocationReporter`クラス。  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 `LocationTracker`クラスには、<xref:System.IObservable%601>実装します。 その`TrackLocation`メソッドは、null 許容型で渡される`Location`緯度と経度のデータを格納しているオブジェクト。 場合、`Location`値が`null`、`TrackLocation`メソッドの呼び出し、<xref:System.IObserver%601.OnNext%2A>各オブザーバーのメソッド。  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 場合、`Location`値は`null`、`TrackLocation`メソッドをインスタンス化、`LocationNotFoundException`オブジェクトで、次の例に示します。 各オブザーバーを呼び出して<xref:System.IObserver%601.OnError%2A>メソッドを渡します、`LocationNotFoundException`オブジェクト。 なお`LocationNotFoundException`から派生した<xref:System.Exception>が新しいメンバーは追加されません。  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 通知を受信するオブザーバーを登録、`TrackLocation`オブジェクトを呼び出すことによってその<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>メソッドで、オブザーバー オブジェクトへの参照をプライベート ジェネリックに割り当てます<xref:System.Collections.Generic.List%601>オブジェクト。 メソッドを返します、`Unsubscriber`となるオブジェクト、<xref:System.IDisposable>により、通知の受信を停止するオブザーバーを実装します。 `LocationTracker`クラスも含まれています、`EndTransmission`メソッド。 場所データをさらに利用できない場合は、メソッドの各オブザーバーの<xref:System.IObserver%601.OnCompleted%2A>メソッドし、オブザーバーの内部リストをクリアします。  
  
 次のコードは、プロバイダーとオブザーバーにし、インスタンス化します。  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberSignature Language="F#" Value="abstract member OnCompleted : unit -&gt; unit" Usage="iObserver.OnCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロバイダーでプッシュ ベースの通知の送信が完了したことをオブザーバーに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブザーバーの<xref:System.IObserver%601.OnCompleted%2A>実装が呼び出されると、<xref:System.IObserver%601.OnCompleted%2A>メソッドを呼び出すことができます必要に応じて、<xref:System.IDisposable.Dispose%2A>のメソッド、<xref:System.IDisposable>が呼び出されたときに、オブザーバーに返されたオブジェクト、<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>メソッド。  
  
   
  
## Examples  
 次の例の実装を提供する、<xref:System.IObserver%601.OnCompleted%2A>追跡アプリケーションの緯度/経度のメソッド。 メソッドは、さらにデータがありませんが利用し、プロバイダーの呼び出しに単に報告<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>実装します。 例を参照してください、<xref:System.IObserver%601>完全な例についてはトピック。  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberSignature Language="F#" Value="abstract member OnError : Exception -&gt; unit" Usage="iObserver.OnError error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">エラーに関する追加情報を提供するオブジェクト。</param>
        <summary>プロバイダーでエラー状態が発生したことをオブザーバーに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `error`から派生したオブジェクトは、 <xref:System.Exception?displayProperty=nameWithType>、必ずしも、プロバイダーによってスローされる例外を表すものはありません。 見つからないか、使用できないデータなど、日常的なまたは予期されるエラーの条件を表すこともできます。 <xref:System.IObserver%601.OnError%2A>メソッドは、情報と見なす必要があり、プロバイダーはエラー処理を提供するオブザーバーを期待できません。  
  
   
  
## Examples  
 次の例の実装を提供する、<xref:System.IObserver%601.OnError%2A>追跡アプリケーションの緯度/経度のメソッド。 データが現在使用できない;、メソッドは単に報告します。行いませんの使用、<xref:System.Exception>をパラメーターとして渡されるオブジェクト。 例を参照してください、<xref:System.IObserver%601>完全な例についてはトピック。  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c834760f-ddd4-417f-abb7-a059679d5b8c">オブサーバー デザイン パターンのベスト プラクティス</related>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberSignature Language="F#" Value="abstract member OnNext : 'T -&gt; unit" Usage="iObserver.OnNext value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">現在の通知情報。</param>
        <summary>新しいデータをオブザーバーに提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブザーバーが呼び出されたプロバイダーの後<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>メソッドに、プロバイダーはオブザーバーの<xref:System.IObserver%601.OnNext%2A>通知を提供するメソッド。  
  
   
  
## Examples  
 次の例の実装を提供する、<xref:System.IObserver%601.OnNext%2A>追跡アプリケーションの緯度/経度のメソッド。 例を参照してください、<xref:System.IObserver%601>完全な例についてはトピック。  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>