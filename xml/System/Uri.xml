<Type Name="Uri" FullName="System.Uri">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f31f66dc7ef61083f857685fcdb50a85d836898f" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174380" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Uri : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Uri extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Uri" />
  <TypeSignature Language="VB.NET" Value="Public Class Uri&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Uri : System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.UriTypeConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>URI (Uniform Resource Identifier) のオブジェクト表現を可能にし、URI の一部へ簡単にアクセスできるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URI は、イントラネットまたはインターネット上のアプリケーションを使用可能なリソースの簡潔な表現です。 <xref:System.Uri>クラスは、プロパティと解析、比較、および結合を含む Uri を処理するためのメソッドを定義します。 <xref:System.Uri>クラスのプロパティは読み取り専用以外の場合は、変更可能なオブジェクトを作成するには、<xref:System.UriBuilder>クラスです。  
  
 相対 Uri (たとえば、"/new/index.htm") は、絶対ようにベース URI に対する展開する必要があります。 <xref:System.Uri.MakeRelative%2A>メソッドは、必要な場合に、相対 Uri を絶対 Uri に変換を提供します。  
  
 <xref:System.Uri>文字列がパターンの識別子を含む整形式 URI である場合、コンス トラクターは URI 文字列をエスケープしませんしないでください。  
  
 <xref:System.Uri>プロパティは、対応する 16 進数に置き換えられます 127 を超える Unicode 値を持つすべての文字のエスケープのエンコーディングで正規データ形式を返します。 正規の形式で URI を格納する、<xref:System.Uri>コンス トラクターは、次の手順を実行します。  
  
-   URI スキームを小文字に変換します。  
  
-   ホスト名を小文字に変換します。  
  
-   IPv6 アドレスのホスト名が、標準の IPv6 アドレスが使用されます。 < その他の省略可能な IPv6 データが削除されます。  
  
-   既定値と空のポート番号を削除します。

-   予約済みの目的を持たないエスケープ文字 (% でエンコードされたオクテットとも呼ばれます) が (とも呼ばれるされているエスケープされない) にデコードします。 これらの予約文字は、大文字と小文字のアルファベット (%41 ~ %5a および % 61 %7a)、小数点以下桁数 (30 ~ %39)、ハイフン (%2d)、ピリオド (%2e)、アンダー スコア (%5f) し、ティルダ (%7 e)。

-   圧縮のシーケンスで階層構造の uri のパスをなど正規化/./、/./、および//(シーケンスをエスケープするかどうか)。 一部のスキームをこれらのシーケンスは圧縮されませんがあることに注意してください。
  
-   階層構造の Uri では、スラッシュ (/) でホストを終了していない場合は、1 つが追加されます。  
  
-   既定では、URI 内の予約文字は、RFC 2396 に従ってエスケープされます。 この動作の変更、URI のどのケースの予約文字の International Resource Identifier または国際ドメイン名の解析が有効な場合は、RFC 3986 および RFC 3987 に従ってエスケープされます。

 一部のスキーム、ドット セグメントと空のセグメントのコンス トラクターの正規化の一部として (/./、/../、および//) を圧縮 (つまり、削除されます)。 URI がこれらのシーケンスを圧縮スキームには、http、https、tcp、net.pipe、および net.tcp が含まれます。 他のスキームのいくつか、これらのシーケンスは圧縮されません。 次に、実際にどのようなこのを圧縮することを示します。
  
```  
var uri = new Uri("http://myUrl/../.."); // http scheme, unescaped
OR
var uri = new Uri("http://myUrl/%2E%2E/%2E%2E"); // http scheme, escaped
OR
var uri = new Uri("ftp://myUrl/../.."); // ftp scheme, unescaped
OR
var uri = new Uri("ftp://myUrl/%2E%2E/%2E%2E"); // ftp scheme, escaped

Console.WriteLine(uri.AbsoluteUri);  
Console.WriteLine(uri.PathAndQuery);  
```  
  
 このコードを実行すると、エスケープ解除されたために必要な場合と、圧縮は、エスケープ シーケンスと、次の出力を返します。

```  
http://myUrl/  
/  
```  
  
 内容を変換することができます、<xref:System.Uri>クラスを使用して、読み取り可能な URI 参照へのエンコードされたエスケープ URI 参照を<xref:System.Uri.ToString%2A>メソッドです。 出力でエスケープするいくつかの予約文字がある点に注意してください、<xref:System.Uri.ToString%2A>メソッドです。 これは、によって返される値から取得した URI の明確な再構築をサポートする<xref:System.Uri.ToString%2A>です。  
  
 一部の Uri には、フラグメント id またはクエリが含まれます。 フラグメント識別子とは、番号記号に続くテキスト (#)、シャープ記号以外は含まれませんフラグメント テキストが格納されている、<xref:System.Uri.Fragment%2A>プロパティです。 クエリの情報は、URI に疑問符 (?) に続くテキストです。クエリ テキストが格納されている、<xref:System.Uri.Query%2A>プロパティです。  
  
 .NET framework version 1.1 では、コンス トラクターに指定した文字列には、不明なスキームが含まれている場合、"c:\\"、Uri クラスの挿入"//"コロンの後にします。 たとえば、URI`xyz:c:\abc`に変換されます`xyz://c:/abc`です。 .NET Framework version 2.0 では、この動作が削除されて、および例文字列に変換`xyz:c:/abc`です。  
  
> [!NOTE]
>  URI クラスは、両方 10 進表記の IPv4 プロトコルと IPv6 プロトコルのコロン区切り 16 進で IP アドレスの使用をサポートします。 忘れずに、IPv6 アドレス http://[::1 と同様に、角かっこで囲む] です。  
  
## <a name="international-resource-identifier-support"></a>International Resource Identifier のサポート  
 通常は web アドレスは、非常に制限されている一連の文字から成る統一リソース識別子を使用して表されます。  
  
-   英文字の大文字と小文字の ASCII 文字。  
  
-   0 から 9 の数字。  
  
-   その他の少数の ASCII シンボル。  
  
 Uri の仕様は、RFC 2396、RFC 2732、RFC 3986 および RFC 3987 を発行して、インターネット技術標準化委員会 (IETF) に記載されています。  
  
 インターネットの成長により、英語以外の言語を使用するリソースを識別する必要性が高まっています。 このニーズに対応し、非 ASCII 文字 (Unicode/ISO 10646 の文字セット内の文字) を許可する識別子が、International Resource Identifier (IRI) として知られています。 IRI の仕様は、IETF によって発行された RFC 3987 で規定されています。 IRI を使用すると、URL に Unicode 文字を含めることができます。  
  
 既存の<xref:System.Uri>で .NET Framework v3.5、3.0 SP1、クラスが拡張され、RFC 3987 に基づいて、2.0 SP1 IRI サポートを提供します。 バージョン 4.5 より前に .NET Framework のバージョンのユーザーでは、特に IRI を有効にする場合を除き、.NET Framework 2.0 の動作から変更は表示されません。 これにより、.NET Framework の以前のバージョンとのアプリケーションの互換性を保証します。  
  
 IRI のサポートを有効にするのには、次の変更が必要です。  
  
-   国際化ドメイン名 (IDN) の解析中、ドメイン名に適用するかどうかと IRI 解析規則を適用するかどうかを指定します。 これ行う、 *machine.config*または、 *app.config*ファイル。 たとえば、次を追加します。  
  
    ```xml  
    <configuration>  
      <uri>  
      <idn enabled="All" />  
      <iriParsing enabled="true" />  
      </uri>  
    </configuration>  
    ```  
  
 .NET Framework 4.5 以降のユーザーには、有効になっている IRI 常があります。 IRI 解析では変更できません、 *.config*ファイル。  
  
 IDN を有効にすると、ドメイン名に含まれるすべての Unicode のラベルが Punycode のラベルに変換されます。 Punycode 名には ASCII 文字のみが含まれ、常に xn-- プレフィックスで始まります。 この理由は、ほとんどの DNS サーバーは ASCII 文字しかサポートしていないため、インターネットで既存の DNS サーバーをサポートするためです (RFC 3940 を参照)。  
  
 IRI と IDN を有効にすると、<xref:System.Uri.DnsSafeHost%2A?displayProperty=nameWithType> プロパティの値に影響します。 IRI と IDN を有効にすると、<xref:System.Uri.Equals%2A>、<xref:System.Uri.OriginalString%2A>、<xref:System.Uri.GetComponents%2A>、および <xref:System.Uri.IsWellFormedOriginalString%2A> メソッドの動作を変更することもできます。  
  
 使用される DNS サーバーによって、IDN 可能な値は次の 3 つです。  
  
-   有効な idn = All  
  
     この値は、Unicode のドメイン名があれば、それを等価の Punycode (IDN 名) に変換します。  
  
-   有効な idn AllExceptIntranet を =  
  
     この値は、すべての Unicode ドメイン名 (IDN 名) と同等の Punycode を使用するローカルのイントラネットではなくに変換されます。 ここでは、ローカルのイントラネット上の国際化名の処理、イントラネットで使用される DNS サーバーは、Unicode 名前解決をサポートする必要があります。  
  
-   有効な idn = なし  
  
     この値は、どの Unicode のドメイン名も、Punycode を使用するように変換しません。 これは、.NET Framework 2.0 の動作と整合する既定値です。  
  
 IRI 解析を有効にすると (有効になっている iriParsing = `true`) に正規化および文字のチェックが RFC 3986 および RFC 3987 で最新の IRI 規則に従って行われます。 IRI 解析を無効にすると、正規化および文字のチェックが (IPv6 のリテラル) の RFC 2396 および RFC 2732 に従って実行します。  既定値は、バージョン 4.5 より前に .NET Framework のバージョンは、`false`です。 既定値は、.NET framework バージョン 4.5 以降、`true`の設定によって IRI 解析の有効な状態を変更することはできませんし、 *.config*ファイル。  
  
 IRI と IDN の処理、<xref:System.Uri>を使用してクラスを制御することも、 <xref:System.Configuration.IriParsingElement?displayProperty=nameWithType>、 <xref:System.Configuration.IdnElement?displayProperty=nameWithType>、および<xref:System.Configuration.UriSection?displayProperty=nameWithType>構成設定のクラスです。 <xref:System.Configuration.IriParsingElement?displayProperty=nameWithType> 設定は、<xref:System.Uri> クラスでの IRI 処理を有効または無効にします。 <xref:System.Configuration.IdnElement?displayProperty=nameWithType> 設定は、<xref:System.Uri> クラスでの IDN 処理を有効または無効にします。 <xref:System.Configuration.IriParsingElement?displayProperty=nameWithType> 設定も間接的に IDN を制御します。 IDN 処理を可能にするためには、IRI 処理を有効にする必要があります。 IRI 処理が無効になっている場合、IDN 処理は既定の設定に設定されます。既定の設定では、互換性のために .NET Framework 2.0 の動作が使用され、IDN 名は使用されません。  
  
 構成の設定、<xref:System.Configuration.IriParsingElement?displayProperty=nameWithType>と<xref:System.Configuration.IdnElement?displayProperty=nameWithType>が読み取られる 1 回と最初<xref:System.Uri?displayProperty=nameWithType>クラスを構築します。 それ以降の構成設定の変更は無視されます。  
  
 IRI と IDN をサポートするカスタマイズ可能なパーサーを作成できるように、<xref:System.GenericUriParser?displayProperty=nameWithType> クラスも拡張されています。 <xref:System.GenericUriParser?displayProperty=nameWithType> オブジェクトの動作は、<xref:System.GenericUriParserOptions?displayProperty=nameWithType> 列挙型で使用可能な値のビットごとの組み合わせを <xref:System.GenericUriParser?displayProperty=nameWithType> コンストラクターに渡すことによって指定されます。 <xref:System.GenericUriParserOptions.IriParsing?displayProperty=nameWithType> 型は、パーサーが International Resource Identifiers (IRI) の RFC 3987 で規定された解析規則をサポートしていることを示します。 IRI が使用されるかどうかは、既に説明した構成値によって決まります。  
  
 <xref:System.GenericUriParserOptions.Idn?displayProperty=nameWithType> 型は、パーサーがホスト名の国際化ドメイン名 (IDN) の解析をサポートしていることを示します。 IDN を使用するかどうかは、既に説明した構成値によって決まります。  
  
## <a name="performance-considerations"></a>パフォーマンスに関する考慮事項  
 *Web.config を使用する場合 * 場合は、スキーマの識別子は、標準的に、Uri を処理する、アプリケーション、その他の時間を初期化するために Uri を格納しているファイルが必要です。 このような場合は、開始時ではなく、Uri が必要なときに、アプリケーションの影響を受ける部分を初期化します。  
  
   
  
## Examples  
 次の例のインスタンスを作成する、<xref:System.Uri>クラス オブジェクトの作成を使用して、<xref:System.Net.WebRequest>インスタンス。  
  
 [!code-cpp[Classic Uri Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri Example/CS/source.cs#1)]
 [!code-vb[Classic Uri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>セキュリティ上の問題のため、アプリケーションで使用注意を受け入れる場合<see cref="T:System.Uri" />インスタンスを使用して信頼されていないソースから<paramref name="dontEscape" />'éý'<see langword="true" />です。URI 文字列の有効性を確認するには呼び出すことによって、<see cref="M:System.Uri.IsWellFormedOriginalString" />メソッドです。</para>
    </block>
    <altmember cref="T:System.Configuration.IdnElement" />
    <altmember cref="T:System.Configuration.IriParsingElement" />
    <altmember cref="T:System.Configuration.UriSection" />
    <altmember cref="P:System.Uri.DnsSafeHost" />
    <altmember cref="M:System.Uri.MakeRelative(System.Uri)" />
    <altmember cref="M:System.Uri.IsWellFormedOriginalString" />
    <altmember cref="T:System.UriBuilder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (string uriString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string uriString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (uriString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Uri(System::String ^ uriString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriString">
          <see cref="T:System.Uri" /> インスタンスで表されるリソースを表す文字列。 文字列形式の IPv6 アドレスは、かっこで囲む必要があることに注意してください。 たとえば、"http://[2607:f8b0:400d:c06::69]" のようにします。</param>
        <summary>指定した URI を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを作成、 <xref:System.Uri> URI 文字列からのインスタンス。 URI の解析、正規の形式で格納および、必要なエスケープ エンコーディングは、します。  
  
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
 このコンス トラクターでは、`string`パラメーターが絶対 URI を参照して呼び出すことと同じ、<xref:System.Uri.%23ctor%2A>を持つコンス トラクター <xref:System.UriKind> 'éý'<xref:System.UriKind.Absolute>です。 場合、`string`コンス トラクターに渡されたパラメーターが相対 URI の場合、このコンス トラクターがスローされます、<xref:System.UriFormatException>です。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Uri> URI を持つインスタンス"http://www.contoso.com/"です。  
  
 [!code-cpp[Classic Uri.Uri Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Uri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Uri Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Uri Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Uri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Uri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriString" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">
            <para>[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。</para>
          </block>
          <paramref name="uriString" /> は空です。  または、<paramref name="uriString" /> に指定されたスキームの形式が正しくありません。 「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。  または、<paramref name="uriString" /> に含まれるスラッシュが多すぎます。  または、<paramref name="uriString" /> に指定されたパスワードが無効です。  または、<paramref name="uriString" /> に指定されたホスト名が無効です。  または、<paramref name="uriString" /> に指定されたファイル名が無効です。  または、<paramref name="uriString" /> に指定されたユーザー名が無効です。  または、<paramref name="uriString" /> に指定するホスト名や機関名の末尾を円記号にすることはできません。  または、<paramref name="uriString" /> に指定されたポート番号が無効であるか、解析できません。  または、<paramref name="uriString" /> の長さが 65519 文字を超えています。  または、<paramref name="uriString" /> に指定されたスキームの長さが 1023 文字を超えています。  または、<paramref name="uriString" /> に無効な文字シーケンスが含まれています。  または、<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Uri (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Uri(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">新しい <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Uri" /> クラスのインスタンス。</param>
        <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> インスタンスに関連付けられているシリアル化ストリームのソースを格納する <see cref="T:System.Uri" /> クラスのインスタンス。</param>
        <summary>
          <see cref="T:System.Uri" /> クラスと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスの指定したインスタンスから、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを実装して、<xref:System.Runtime.Serialization.ISerializable>のためのインターフェイス、<xref:System.Uri>クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serializationInfo" /> パラメーターには、<see langword="null" /> URI が格納されます。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="serializationInfo" /> パラメーターには、空の URI が格納されます。  または、指定されたスキームの形式が正しくありません。 「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。  または、URI に含まれているスラッシュが多すぎます。  または、URI で指定されたパスワードが無効です。  または、URI に指定されたホスト名が無効です。  または、URI に指定されたファイル名が無効です。  または、URI で指定されたユーザー名が無効です。  または、URI に指定するホスト名や機関名の末尾を円記号にすることはできません。  または、URI に指定されたポート番号が無効であるか、解析できません。  または、URI の長さが 65519 文字を超えています。  または、URI に指定されたスキームの長さが 1023 文字を超えています。  または、URI に無効な文字シーケンスが含まれています。  または、URI に指定する MS-DOS パスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (string uriString, bool dontEscape);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string uriString, bool dontEscape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (uriString As String, dontEscape As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Uri(System::String ^ uriString, bool dontEscape);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The constructor has been deprecated. Please use new Uri(string). The dontEscape parameter is deprecated and is always false. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="dontEscape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="uriString">
          <see cref="T:System.Uri" /> インスタンスで表されるリソースを表す文字列。 文字列形式の IPv6 アドレスは、かっこで囲む必要があることに注意してください。 たとえば、"http://[2607:f8b0:400d:c06::69]" のようにします。</param>
        <param name="dontEscape">
          <c>uriString</c> が完全にエスケープされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定した URI を使用し、明示的な文字エスケープ制御を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを作成、 <xref:System.Uri> URI 文字列からのインスタンス。 URI の解析し、正規の形式で格納します。  
  
 `dontEscape`パラメーター コントロール予約文字は変換するかどうかにエスケープ シーケンスです。 このパラメーターに設定する必要があります`true`URI 内のすべての予約文字をエスケープされていることを確認する場合のみです。 値に設定`true`を完全にエスケープされていない URI は、予期しない動作を引き起こすことができます。 常にこのパラメーターを設定することを強くお勧め`false`です。  
  
 場合`dontEscape`に設定されている`false`、コンス トラクターは、パーセント (%) のすべての項目は有効なエスケープ シーケンスを続くことを確認して予約済みの文字をエスケープします。 割合を次の文字シーケンスが有効でない場合は、25%、% が置き換えられます。  
  
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>の URI インスタンスhttp://www.contoso.com/Hello%20World.htmです。 格納されている URI が完全にエスケープされ、正規の形式では、ため、`dontEscape`にパラメーターを設定することができます`true`です。  
  
 [!code-cpp[Classic Uri.Uri1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Uri1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Uri1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Uri1 Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Uri1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Uri1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriString" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="uriString" /> が空か、空白だけを含んでいます。  または、<paramref name="uriString" /> に指定されたスキームが無効です。  または、<paramref name="uriString" /> に含まれるスラッシュが多すぎます。  または、<paramref name="uriString" /> に指定されたパスワードが無効です。  または、<paramref name="uriString" /> に指定されたホスト名が無効です。  または、<paramref name="uriString" /> に指定されたファイル名が無効です。  または、<paramref name="uriString" /> に指定されたユーザー名が無効です。  または、<paramref name="uriString" /> に指定するホスト名や機関名の末尾を円記号にすることはできません。  または、<paramref name="uriString" /> に指定されたポート番号が無効であるか、解析できません。  または、<paramref name="uriString" /> の長さが 65519 文字を超えています。  または、<paramref name="uriString" /> に指定されたスキームの長さが 1023 文字を超えています。  または、<paramref name="uriString" /> に無効な文字シーケンスが含まれています。  または、<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (string uriString, UriKind uriKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string uriString, valuetype System.UriKind uriKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.String,System.UriKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Uri(System::String ^ uriString, UriKind uriKind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="uriKind" Type="System.UriKind" />
      </Parameters>
      <Docs>
        <param name="uriString">
          <see cref="T:System.Uri" /> インスタンスで表されるリソースを表す文字列。 文字列形式の IPv6 アドレスは、かっこで囲む必要があることに注意してください。 たとえば、"http://[2607:f8b0:400d:c06::69]" のようにします。</param>
        <param name="uriKind">URI 文字列が相対 URI、絶対 URI、または不確定のいずれであるかを指定します。</param>
        <summary>指定した URI を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。 このコンストラクターでは、URI 文字列を相対 URI、絶対 URI、または不確定のいずれかに指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 相対パスと絶対 Uri では、形式でさまざまな制限があります。 たとえば、相対 URI の場合は、スキームまたは機関には必要ありません。 指定した値`uriKind`で渡された URI の種類に一致する必要があります`uriString`です。 ただし場合、<xref:System.UriKind.RelativeOrAbsolute>を指定すると、相対パスまたは絶対 URI 文字列を指定できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="uriKind" /> が無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriString" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">
            <para>[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。</para>
          </block>
          <paramref name="uriString" /> には相対 URI が含まれており、<paramref name="uriKind" /> は <see cref="F:System.UriKind.Absolute" /> です。  または  <paramref name="uriString" /> に絶対 URI が含まれており、<paramref name="uriKind" /> は <see cref="F:System.UriKind.Relative" /> です。  または  <paramref name="uriString" /> が空です。  または、<paramref name="uriString" /> に指定されたスキームの形式が正しくありません。 「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。  または、<paramref name="uriString" /> に含まれるスラッシュが多すぎます。  または、<paramref name="uriString" /> に指定されたパスワードが無効です。  または、<paramref name="uriString" /> に指定されたホスト名が無効です。  または、<paramref name="uriString" /> に指定されたファイル名が無効です。  または、<paramref name="uriString" /> に指定されたユーザー名が無効です。  または、<paramref name="uriString" /> に指定するホスト名や機関名の末尾を円記号にすることはできません。  または、<paramref name="uriString" /> に指定されたポート番号が無効であるか、解析できません。  または、<paramref name="uriString" /> の長さが 65519 文字を超えています。  または、<paramref name="uriString" /> に指定されたスキームの長さが 1023 文字を超えています。  または、<paramref name="uriString" /> に無効な文字シーケンスが含まれています。  または、<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUri As Uri, relativeUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Uri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">ベース URI。</param>
        <param name="relativeUri">ベース URI に追加する相対 URI。</param>
        <summary>指定したベース URI と相対 URI 文字列に基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを作成、<xref:System.Uri>インスタンスを組み合わせることで、`baseUri`と`relativeUri`です。 場合`relativeUri`(スキーム、ホスト名、および必要に応じて、ポート番号を含む) は絶対 URI には、<xref:System.Uri>のみを使用して、インスタンスが作成される`relativeUri`です。  
 
 場合、`baseUri`は相対的な部分があります (のように`/api`)、相対の一部は、スラッシュで終わっていなければなりませんし、(のように`/api/`) 場合は、相対的な一部`baseUri`に構築された内でも維持<xref:System.Uri>です。 

 また場合、`relativeUri`の任意の相対的な部分に置き換え、スラッシュで始まる、 `baseUri`

 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
   
  
## Examples  
 次の例は、の新しいインスタンスを作成、 <xref:System.Uri> uri は相対 Uri を組み合わせることによってクラスhttp://www.contoso.comおよび絶対 URI を形成する catalog/shownew.htmhttp://www.contoso.com/catalog/shownew.htmです。  
  
 [!code-cpp[Classic Uri.Uri3 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Uri3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Uri3 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Uri3 Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Uri3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Uri3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">
            <para>[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。</para>
          </block>
          <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI が空であるか、スペースのみを含んでいます。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたスキームが無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI に含まれるスラッシュが多すぎます。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたパスワードが無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたホスト名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたファイル名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたユーザー名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたホスト名や機関名の末尾を円記号にすることはできません。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたポート番号が無効であるか、解析できません。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI の長さが 65,519 文字を超えています。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたスキームの長さが 1,023 文字を超えています。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI に無効な文字シーケンスがあります。  または、<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (Uri baseUri, Uri relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUri, class System.Uri relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUri As Uri, relativeUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Uri(Uri ^ baseUri, Uri ^ relativeUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="baseUri">新しい <see cref="T:System.Uri" /> インスタンスのベースとなる絶対 <see cref="T:System.Uri" />。</param>
        <param name="relativeUri">
          <c>baseUri</c> と組み合わせる相対 <see cref="T:System.Uri" /> インスタンス。</param>
        <summary>指定したベース <see cref="T:System.Uri" /> のインスタンスと相対 <see cref="T:System.Uri" /> のインスタンスの組み合わせに基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが新たに作成<xref:System.Uri>絶対を組み合わせることによってインスタンス<xref:System.Uri>インスタンス、 `baseUri`、相対パスで<xref:System.Uri>インスタンス、`relativeUri`です。 場合`relativeUri`は絶対<xref:System.Uri>(スキーム、ホスト名、および必要に応じて、ポート番号を含む)、インスタンス、<xref:System.Uri>のみを使用して、インスタンスが作成される`relativeUri`です。  
 
 場合、`baseUri`は相対的な部分があります (のように`/api`)、相対の一部は、スラッシュで終わっていなければなりませんし、(のように`/api/`) 場合は、相対的な一部`baseUri`に構築された内でも維持<xref:System.Uri>です。 

 また場合、`relativeUri`の任意の相対的な部分に置き換え、スラッシュで始まる、 `baseUri`
 
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
   
  
## Examples  
 この例は、絶対<xref:System.Uri>インスタンス、`absoluteUri`と相対<xref:System.Uri>インスタンス、`relativeUri`です。 新しい<xref:System.Uri>インスタンス、 `combinedUri`、これら 2 つのインスタンスが作成されます。  
  
 [!code-cpp[NCLUriEnhancements#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#2)]
 [!code-csharp[NCLUriEnhancements#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#2)]
 [!code-vb[NCLUriEnhancements#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">
            <para>[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。</para>
          </block>
          <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI が空であるか、スペースのみを含んでいます。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたスキームが無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI に含まれるスラッシュが多すぎます。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたパスワードが無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたホスト名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたファイル名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたユーザー名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたホスト名や機関名の末尾を円記号にすることはできません。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたポート番号が無効であるか、解析できません。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI の長さが 65,519 文字を超えています。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたスキームの長さが 1,023 文字を超えています。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI に無効な文字シーケンスがあります。  または、<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (Uri baseUri, string relativeUri, bool dontEscape);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUri, string relativeUri, bool dontEscape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUri As Uri, relativeUri As String, dontEscape As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Uri(Uri ^ baseUri, System::String ^ relativeUri, bool dontEscape);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The constructor has been deprecated. Please new Uri(Uri, string). The dontEscape parameter is deprecated and is always false. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
        <Parameter Name="dontEscape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="baseUri">ベース URI。</param>
        <param name="relativeUri">ベース URI に追加する相対 URI。</param>
        <param name="dontEscape">
          <c>uriString</c> が完全にエスケープされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>明示的な文字エスケープ制御を使用し、指定したベース URI と相対 URI に基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを作成、<xref:System.Uri>組み合わせることによってインスタンス`baseUri`と`relativeUri`です。 URI が渡された場合`relativeUri`(スキーム、ホスト名、および必要に応じて、ポート番号を含む) は絶対 URI には、<xref:System.Uri>のみを使用して、インスタンスが作成される`relativeUri`です。  
  
 `dontEscape`パラメーター コントロール予約文字は変換するかどうかにエスケープ シーケンスです。 このパラメーターに設定する必要があります`true`URI 内のすべての予約文字をエスケープされていることを確認する場合のみです。 値に設定`true`を完全にエスケープされていない URI は、予期しない動作を引き起こすことができます。 常にこのパラメーターを設定することを強くお勧め`false`です。 場合`dontEscape`に設定されている`false`、コンス トラクターは、パーセント (%) のすべての項目は有効なエスケープ シーケンスを続くことを確認して予約済みの文字をエスケープします。 割合を次の文字シーケンスが有効でない場合は、25%、% が置き換えられます。  
  
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
   
  
## Examples  
 次の例は、の新しいインスタンスを作成、 <xref:System.Uri> uri は相対 Uri を組み合わせることによってクラスhttp://www.contoso.comと Hello%20World.htm を絶対 URI を形成します。  
  
 [!code-cpp[Classic Uri.Uri4 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Uri4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Uri4 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Uri4 Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Uri4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Uri4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI が空であるか、または空白文字だけが含まれています。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたスキームが無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI に含まれるスラッシュが多すぎます。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたパスワードが無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたホスト名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたファイル名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたユーザー名が無効です。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたホスト名や機関名の末尾を円記号にすることはできません。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたポート番号が無効であるか、解析できません。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI の長さが 65,519 文字を超えています。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI で指定されたスキームの長さが 1,023 文字を超えています。  または、<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて形成された URI に無効な文字シーケンスがあります。  または、<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\\\ で始める必要があります。</exception>
        <block subset="none" type="usage">
          <para>セキュリティ上の問題のため、アプリケーションを呼び出せません URI 文字列でこのコンス トラクターを使用して信頼されていないソースから<paramref name="dontEscape" />'éý'<see langword="true" />です。代わりに、呼び出すことによって、URI 文字列の有効性を確認できます、<see cref="M:System.Uri.IsWellFormedOriginalString" />このコンス トラクターを呼び出す前にメソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AbsolutePath">
      <MemberSignature Language="C#" Value="public string AbsolutePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AbsolutePath" />
      <MemberSignature Language="DocId" Value="P:System.Uri.AbsolutePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AbsolutePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AbsolutePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI の絶対パスを取得します。</summary>
        <value>リソースの絶対パスを含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.AbsolutePath%2A>プロパティ情報の要求を解決するのには、サーバーを使用するパス情報を格納します。 通常これは、サーバーのファイル システムに必要な情報へのパスを示します、アプリケーションまたはスクリプトの情報を提供するサーバーを実行する必要があります。  
  
 パス情報は、スキーム、ホスト名、または URI のクエリ部分には含まれません。  
  
   
  
## Examples  
 次の例では、パス/catalog/shownew.htm をコンソールに出力します。  
  
 [!code-cpp[Classic Uri.AbsolutePath Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.AbsolutePath Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.AbsolutePath Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.AbsolutePath Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.AbsolutePath Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.AbsolutePath Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AbsoluteUri">
      <MemberSignature Language="C#" Value="public string AbsoluteUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AbsoluteUri" />
      <MemberSignature Language="DocId" Value="P:System.Uri.AbsoluteUri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AbsoluteUri As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AbsoluteUri { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>絶対 URI を取得します。</summary>
        <value>URI 全体を含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.AbsoluteUri%2A>プロパティに格納されている URI 全体が含まれています、<xref:System.Uri>インスタンス、すべてのフラグメントとクエリ文字列を含むです。  
  
   
  
## Examples  
 次の例の完全な内容の書き込み、<xref:System.Uri>コンソールへのインスタンス。 この例で、http://www.contoso.com/catalog/shownew.htm?date=todayがコンソールに書き込まれます。  
  
 [!code-cpp[Classic Uri.AbsoluteUri Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.AbsoluteUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.AbsoluteUri Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.AbsoluteUri Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.AbsoluteUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.AbsoluteUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Authority">
      <MemberSignature Language="C#" Value="public string Authority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Authority" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Authority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authority As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Authority { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバーの DNS (Domain Name System) ホスト名または IP アドレスと、ポート番号を取得します。</summary>
        <value>このインスタンスで表される URI の権限構成要素を格納している <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.Authority%2A>プロパティは、通常、サーバーの DNS ホスト名または IP アドレス。 このプロパティは、URI の既定のポートと異なる場合、サービスのポート番号にすることがあります。 場合、<xref:System.Uri.Authority%2A>コンポーネントには、予約文字が含まれている、これらは、このプロパティによって返される文字列値にエスケープします。  
  
   
  
## Examples  
 次の例は、ホスト名 (www.contoso.com) とポート番号を書き込みます (8080) をコンソールに、サーバーの。  
  
 [!code-cpp[Classic Uri.Authority Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Authority Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Authority Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Authority Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Authority Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Authority Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Canonicalize">
      <MemberSignature Language="C#" Value="protected virtual void Canonicalize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Canonicalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Canonicalize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Canonicalize ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Canonicalize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>内部的に格納された URI を正規形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正規の形式の URI を内部的に格納します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このメソッドは、絶対 URI でのみ有効です。</exception>
        <exception cref="T:System.UriFormatException">この URI の形式が誤っています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckHostName">
      <MemberSignature Language="C#" Value="public static UriHostNameType CheckHostName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.UriHostNameType CheckHostName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.CheckHostName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckHostName (name As String) As UriHostNameType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UriHostNameType CheckHostName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UriHostNameType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">検証対象のホスト名。 値は、IPv4 アドレス、IPv6 アドレス、またはインターネット ホスト名です。</param>
        <summary>指定したホスト名が有効な DNS 名であるかどうかを判断します。</summary>
        <returns>ホスト名の型を示す <see cref="T:System.UriHostNameType" />。 ホスト名の型を判断できない場合、またはホスト名が <see langword="null" /> か長さ 0 の文字列の場合、このメソッドは <see cref="F:System.UriHostNameType.Unknown" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.CheckHostName%2A>メソッドでは、指定されたホスト名が有効なインターネット ホスト名の要件を満たしていることを確認します。 ありません、ただし、実行、ホストの存在を確認するホスト名を検索します。  
  
   
  
## Examples  
 次の例では、ホスト名が有効かどうかを確認します。  
  
 [!code-cpp[Classic Uri.CheckHostName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.CheckHostName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.CheckHostName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.CheckHostName Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.CheckHostName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.CheckHostName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSchemeName">
      <MemberSignature Language="C#" Value="public static bool CheckSchemeName (string schemeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CheckSchemeName(string schemeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.CheckSchemeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckSchemeName (schemeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CheckSchemeName(System::String ^ schemeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schemeName">検証対象のスキーム名。</param>
        <summary>指定したスキーム名が有効かどうかを判断します。</summary>
        <returns>スキーム名が有効な場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、既定では、RFC 2396 に従って有効性のスキーム名を確認します。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、このメソッドは、RFC 3986 に従って有効性のスキーム名を確認します。 スキーム名は英字で始まる必要があります、アルファベット、数字、および文字のみを含める必要があります"です。"、"+"または"-"です。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキーム名が有効かどうかを確認します。  
  
 [!code-cpp[NCLUriExamples#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#9)]
 [!code-csharp[NCLUriExamples#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#9)]
 [!code-vb[NCLUriExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSecurity">
      <MemberSignature Language="C#" Value="protected virtual void CheckSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CheckSecurity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.CheckSecurity" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CheckSecurity ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CheckSecurity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメソッドを呼び出しても、何も効果はありません。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Uri uri1, class System.Uri uri2, valuetype System.UriComponents partsToCompare, valuetype System.UriFormat compareFormat, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (uri1 As Uri, uri2 As Uri, partsToCompare As UriComponents, compareFormat As UriFormat, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(Uri ^ uri1, Uri ^ uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri1" Type="System.Uri" />
        <Parameter Name="uri2" Type="System.Uri" />
        <Parameter Name="partsToCompare" Type="System.UriComponents" />
        <Parameter Name="compareFormat" Type="System.UriFormat" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="uri1">最初の <see cref="T:System.Uri" />。</param>
        <param name="uri2">第 2 の <see cref="T:System.Uri" />。</param>
        <param name="partsToCompare">比較する <c>uri1</c> と <c>uri2</c> の部分を指定する <see cref="T:System.UriComponents" /> 値のビットごとの組み合わせ。</param>
        <param name="compareFormat">URI の構成要素の比較時に使用する文字エスケープを指定する <see cref="T:System.UriFormat" /> 値の 1 つ。</param>
        <param name="comparisonType">
          <see cref="T:System.StringComparison" /> 値のいずれか 1 つ。</param>
        <summary>指定した比較規則を使用して、2 つの URI の指定部分を比較します。</summary>
        <returns>比較する <see cref="T:System.Int32" /> 構成要素の構文上の関係を示す <see cref="T:System.Uri" /> 値。  
  
 <list type="table"><listheader><term> 値  </term><description> 意味  </description></listheader><item><term> 0 より小さい  </term><description><paramref name="uri1" /> は <paramref name="uri2" /> より小さい値です。</description></item><item><term> 0 </term><description><paramref name="uri1" /> は <paramref name="uri2" /> と等価です。</description></item><item><term> 0 より大きい  </term><description><paramref name="uri1" /> は <paramref name="uri2" /> より大きくなっています。  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 両方`uri1`と`uri2`は`null`、このメソッドは 0 を返します。 URI の値を比較するときに、相対 URI は常により小さい値は絶対 URI および URI を null 以外は null の URI を超えるは常にします。 ケースの両方`uri1`と`uri2`されない`null`がどちらも相対 Uri、絶対 Uri 両方と、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType>メソッドは、比較を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="DnsSafeHost">
      <MemberSignature Language="C#" Value="public string DnsSafeHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DnsSafeHost" />
      <MemberSignature Language="DocId" Value="P:System.Uri.DnsSafeHost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DnsSafeHost As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DnsSafeHost { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DNS の解決に安全に使用できるホスト名を、必要に応じてエスケープを解除してから取得します。</summary>
        <value>A<see cref="T:System.String" />既に解決に適している場合、DNS の解決です。 または、元のホスト文字列に適した形式の URI のホスト部分を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角かっこ () を削除する IPv6 アドレスの場合は、および<xref:System.Net.IPAddress.ScopeId%2A>プロパティが、このインスタンスが作成されたときに指定されている場合。

(たとえば、"http://[fe80::200:39ff:fe36:1a2d%254]/temp/example.htm")、DnsSafeHost しエスケープの文字列を返しますこのインスタンスを構築するエスケープ文字列を使用した場合。 返される任意のエスケープされた文字列をエスケープ解除`DnsSafeHost`DNS 解決をその文字列を使用する前に (この例を参照してください)。 (たとえば、"http://[fe80::200:39ff:fe36:1a2d%4]/temp/example.htm")、DnsSafeHost、エスケープされていない文字列を返しますこのインスタンスを構築するために無効なエスケープされていない文字列を使用した場合。
  
 <xref:System.Uri.DnsSafeHost%2A>プロパティは、このトピックの後半で説明したように構成設定に依存します。 使用する場合は、矛盾する結果につながる可能性がある Windows ストア アプリケーションによって構成設定を変更することはできません<xref:System.Uri.DnsSafeHost%2A>です。 <xref:System.Uri.IdnHost%2A>プロパティは、推奨される代替を使用する手段として提供<xref:System.Uri.DnsSafeHost%2A>ので、<xref:System.Uri.IdnHost%2A>は常に保証されて現在に関係なく、安全な DNS *app.config*設定可能性があります。  
  
 <xref:System.Uri.DnsSafeHost%2A>で .NET Framework v3.5、3.0 SP1、プロパティが拡張され、2.0 SP1 International Resource Identifier (IRI) を提供するサポートに基づいて RFC 3987 です。 現在のユーザーは、自分で明確に IRI を有効にしない限り、.NET Framework 2.0 の動作からは変更に気付きません。 これにより、.NET Framework の以前のバージョンとのアプリケーションの互換性を保証します。  
  
 IRI のサポートを有効にするのには、次の 2 つの変更が必要です。  
  
1.  次の行を追加、 *machine.config* .NET Framework 2.0 のディレクトリの下のファイル  
  
     \<section name="uri" type="System.Configuration.UriSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />  
  
2.  国際化ドメイン名 (IDN) の解析中、ドメイン名に適用するかどうかと IRI 解析規則を適用するかどうかを指定します。 これ行う、 *machine.config*または、 *app.config*ファイル。 たとえば、次を追加します。  
  
    ```xml  
    <configuration>  
      <uri>  
      <idn enabled="All" />  
      <iriParsing enabled="true" />  
      </uri>  
    </configuration>  
    ```  
  
 IDN を有効にすると、ドメイン名に含まれるすべての Unicode のラベルが Punycode のラベルに変換されます。 Punycode 名には ASCII 文字のみが含まれ、常に xn-- プレフィックスで始まります。 この理由は、ほとんどの DNS サーバーは ASCII 文字しかサポートしていないため、インターネットで既存の DNS サーバーをサポートするためです (RFC 3940 を参照)。  
  
 値にのみ影響 IDN を有効にすると、<xref:System.Uri.DnsSafeHost%2A>プロパティです。  
  
 使用される DNS サーバーによって、IDN 可能な値は次の 3 つです。  
  
-   有効な idn = All  
  
     この値は、Unicode のドメイン名があれば、それを等価の Punycode (IDN 名) に変換します。  
  
-   有効な idn AllExceptIntranet を =  
  
     この値は、すべての外部 Unicode ドメイン名を、等価の Punycode (IDN 名) を使用するように変換します。 このように、ローカルなイントラネットで国際名を処理する場合、このイントラネットで使用する DNS サーバーは Unicode 名をサポートしている必要があります。  
  
-   有効な idn = なし  
  
     この値は、どの Unicode のドメイン名も、Punycode を使用するように変換しません。 これは、.NET Framework 2.0 の動作と整合する既定値です。  
  
 IRI 解析を有効にする (有効になっている iriParsing = `true`) 正規化を行うし、RFC 3987 ルールに従って最新 IRI チェック文字です。 既定値は`false`が正規化を行うし、(IPv6 のリテラル) の RFC 2396 に従ってチェックおよび RFC 2732 を文字です。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>文字列からインスタンス。 返される値の差が示されている<xref:System.Uri.Host%2A>ホスト名または URI で指定されたアドレスが返されますから返される値<xref:System.Uri.DnsSafeHost%2A>、安全に DNS の解決に使用されているアドレスが返されます。  
  
 [!code-cpp[NCLUriEnhancements#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#4)]
 [!code-csharp[NCLUriEnhancements#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#4)]
 [!code-vb[NCLUriEnhancements#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#4)]  

 前述の「解説」に、それを解決する前に、ホスト名にエスケープ解除します。 使用することができます、<xref:System.Uri.UnescapeDataString%2A>エスケープ解除して、ホスト名をするメソッドを呼び出すことによって解決できます、<xref:System.Net.Dns.GetHostEntry%2A>メソッドです。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand">現在のインスタンスと比較する <see cref="T:System.Uri" /> インスタンスまたは URI 識別子。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスを比較し、相互に等価かどうかを判断します。</summary>
        <returns>2 つのインスタンスが同じ URI を表す場合は、<see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.Equals%2A>メソッドは、ユーザー情報に関係なく、2 つのインスタンスを比較 (<xref:System.Uri.UserInfo%2A>) およびフラグメント (<xref:System.Uri.Fragment%2A>) 部分が含まれる可能性があります。 たとえば、Uri を指定http://www.contoso.com/index.htm#searchとhttp://user:password@www.contoso.com/index.htm、<xref:System.Uri.Equals%2A>メソッドは`true`します。  
  
 場合 1 つ<xref:System.Uri>インスタンスの Unicode のホスト名の形式と`comparand`パラメーターが含まれる、<xref:System.Uri>インスタンスまたは名前を持つ同等 Punycode ホスト、し、ホスト名で構成される識別子<xref:System.Uri.Equals%2A>を返します`true`International Resource Identifier (IRI) および国際化ドメイン名 (IDN) のサポートが有効になっている場合にのみです。 Punycode 名には ASCII 文字のみが含まれ、常に xn-- プレフィックスで始まります。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
> [!NOTE]
>  .NET Framework version 1.0 および 1.1 で、<xref:System.Uri.Query%2A>も無視されます。  
  
> [!NOTE]
>  <xref:System.Uri.Equals%2A>メソッドは派生クラスでオーバーライドできます。 悪意のあるエンティティは、メソッドを変更できなかったとに注意を使用します。 セキュリティ チェックを実行し、このインスタンスは、信頼できる発行元から付属していたわかっていない限り、このメソッドを使用する必要があります。  
  
   
  
## Examples  
 この例では、2 つ作成されます<xref:System.Uri>文字列からインスタンスし、比較を同じ値を表すかどうかを判断します。 `address1` および`address2`は同じため、<xref:System.Uri.Fragment%2A>この比較の部分は無視されます。 結果は、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriExamples#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#8)]
 [!code-csharp[NCLUriExamples#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#8)]
 [!code-vb[NCLUriExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">部分的に信頼されたコードからの派生を防ぐに<see cref="T:System.Uri" />です。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="protected virtual void Escape ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Escape() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Escape" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Escape ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Escape();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パス構成要素内の安全でない文字または予約文字を 16 進の文字表現に変換します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UriFormatException">コンストラクターから渡された URI が無効です。 URI の文字数が多すぎる場合、または URI が相対 URI である場合に、この例外が発生することがあります。</exception>
      </Docs>
    </Member>
    <Member MemberName="EscapeDataString">
      <MemberSignature Language="C#" Value="public static string EscapeDataString (string stringToEscape);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string EscapeDataString(string stringToEscape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.EscapeDataString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EscapeDataString (stringToEscape As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ EscapeDataString(System::String ^ stringToEscape);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringToEscape" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stringToEscape">エスケープする文字列。</param>
        <summary>文字列をエスケープ表現に変換します。</summary>
        <returns>
          <see cref="T:System.String" /> のエスケープ表現を格納する <paramref name="stringToEscape" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Uri.EscapeDataString%2A>メソッド RFC 2396 予約されていない文字を除くすべての文字を 16 進数表記に変換します。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、<xref:System.Uri.EscapeDataString%2A>すべてのメソッドに変換文字、除いて RFC 3986 の予約されていない文字を 16 進数表です。 すべての Unicode 文字は、エスケープされる前に、utf-8 形式に変換されます。  
  
 このメソッドが想定する`stringToEscape`にエスケープ シーケンスがありません。  
  
 既定では、文字列は、RFC 2396 に従ってエスケープされます。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、文字列は RFC 3986 および RFC 3987 に従ってエスケープされます。 予約済みおよび予約されていない文字の定義については、これらの Rfc を参照してください。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stringToEscape" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">
            <para>[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。</para>
          </block>
          <paramref name="stringToEscape" /> の長さが 32766 文字を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="EscapeString">
      <MemberSignature Language="C#" Value="protected static string EscapeString (string str);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig string EscapeString(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.EscapeString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function EscapeString (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::String ^ EscapeString(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. Please use GetComponents() or static EscapeUriString() to escape a Uri component or a string. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">エスケープ表現に変換する文字列。</param>
        <summary>文字列をエスケープ表現に変換します。</summary>
        <returns>文字列のエスケープ表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.EscapeString%2A>メソッドが予約されている RFC 2396 文字と文字値が 127 より大きいすべての文字を 16 進数形式に変換します。 すべての Unicode 文字は、エスケープされる前に、utf-8 形式に変換されます。  
  
 既定では、文字列は、RFC 2396 に従ってエスケープされます。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、文字列は RFC 3986 および RFC 3987 に従ってエスケープされます。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EscapeUriString">
      <MemberSignature Language="C#" Value="public static string EscapeUriString (string stringToEscape);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string EscapeUriString(string stringToEscape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.EscapeUriString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EscapeUriString (stringToEscape As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ EscapeUriString(System::String ^ stringToEscape);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringToEscape" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stringToEscape">エスケープする文字列。</param>
        <summary>URI 文字列をエスケープ表現に変換します。</summary>
        <returns>
          <see cref="T:System.String" /> のエスケープ表現を格納する <paramref name="stringToEscape" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Uri.EscapeUriString%2A>エスケープされていない URI 文字列にパラメーターを準備する方法、<xref:System.Uri.%23ctor%2A>コンス トラクターです。  
  
 既定では、<xref:System.Uri.EscapeUriString%2A>メソッド RFC 2396 予約されていない文字を除く、すべての文字を 16 進数表記に変換します。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、<xref:System.Uri.EscapeUriString%2A>すべてのメソッドに変換文字、除いて RFC 3986 の予約されていない文字を 16 進数表です。 すべての Unicode 文字は、エスケープされる前に、utf-8 形式に変換されます。  
  
 このメソッドが想定する`stringToEscape`にエスケープ シーケンスがありません。  
  
 既定では、文字列は、RFC 2396 に従ってエスケープされます。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、文字列は RFC 3986 および RFC 3987 に従ってエスケープされます。 予約済みおよび予約されていない文字の定義については、これらの Rfc を参照してください。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stringToEscape" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">
            <para>[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。</para>
          </block>
          <paramref name="stringToEscape" /> の長さが 32766 文字を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Fragment">
      <MemberSignature Language="C#" Value="public string Fragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Fragment" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Fragment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Fragment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Fragment { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エスケープ URI フラグメントを取得します。</summary>
        <value>URI フラグメント情報を含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.Fragment%2A>プロパティは、フラグメント マーカー自体を含め、URI にフラグメント マーカー (#) が続くすべてのテキストを取得します。 URI を指定されたhttp://www.contoso.com/index.htm#main、<xref:System.Uri.Fragment%2A>プロパティは #main を返します。  
  
 <xref:System.Uri.Fragment%2A>プロパティがいずれかでないと見なされます<xref:System.Uri.Equals%2A>比較します。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、フラグメント情報をコンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#4)]
 [!code-csharp[NCLUriExamples#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#4)]
 [!code-vb[NCLUriExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromHex">
      <MemberSignature Language="C#" Value="public static int FromHex (char digit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FromHex(char digit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.FromHex(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHex (digit As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FromHex(char digit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digit" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="digit">変換する 16 進数の数字 (0 ～ 9、a ～ f、A ～ F)。</param>
        <summary>16 進数の数字に対応する 10 進数値を取得します。</summary>
        <returns>指定した 16 進数に対応する 0 ～ 15 の数値を含む <see cref="T:System.Int32" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.FromHex%2A>メソッドを表す 16 進文字を変換します (0 ~ 9、a ~ f、A ~ F) を 10 進値 (0 ~ 15) にします。 場合`digit`は有効な 16 進ではありません、<xref:System.ArgumentException>例外がスローされます。  
  
   
  
## Examples  
 次の例では、かどうか、文字が 16 進数の文字である場合は、対応する 10 進値をコンソールに出力を決定します。  
  
 [!code-cpp[NCLUriExamples#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#1)]
 [!code-csharp[NCLUriExamples#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#1)]
 [!code-vb[NCLUriExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="digit" /> が有効な 16 進数の数字 (0 ～ 9、a ～ f、A ～ F) ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetComponents">
      <MemberSignature Language="C#" Value="public string GetComponents (UriComponents components, UriFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetComponents(valuetype System.UriComponents components, valuetype System.UriFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComponents (components As UriComponents, format As UriFormat) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetComponents(UriComponents components, UriFormat format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="System.UriComponents" />
        <Parameter Name="format" Type="System.UriFormat" />
      </Parameters>
      <Docs>
        <param name="components">現在のインスタンスの中で呼び出し元に返す部分を指定する <see cref="T:System.UriComponents" /> 値のビットごとの組み合わせ。</param>
        <param name="format">特殊文字のエスケープ方法を制御する <see cref="T:System.UriFormat" /> の値の 1 つ。</param>
        <summary>指定した特殊文字エスケープを使用して、現在のインスタンスの指定した構成要素を取得します。</summary>
        <returns>構成要素を格納した <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UriComponents.Query>、 <xref:System.UriComponents.Fragment>、 <xref:System.UriComponents.Scheme>、 <xref:System.UriComponents.UserInfo>、 <xref:System.UriComponents.Host>、 <xref:System.UriComponents.Port>、および<xref:System.UriComponents.Path>コンポーネント区切り記号を含めないでください。 組み合わせることができます、<xref:System.UriComponents.KeepDelimiter>区切り記号で値を取得するには、その値のいずれかをフラグ (ビットごとの OR 演算子を使用)。 他のすべての<xref:System.UriComponents>値、および、値の組み合わせ、返される値に区切り記号が含まれます。  
  
 コンポーネントは、URI に出現する順序で返されます。 たとえば場合、<xref:System.UriComponents.Scheme>を指定すると、最初に表示します。  
  
 International Resource Identifier (IRI) および国際化ドメイン名 (IDN) のサポートが有効な場合に返される文字数、<xref:System.String>が増加します。 IRI をサポートするために使用される Punycode 名は、ASCII 文字のみが含まれてし、常に xn--プレフィックスを持つ開始します。 Unicode サロゲート文字が正しくで処理する IRI と IDN が有効になっているときに、<xref:System.Uri.GetComponents%2A>メソッドです。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
> [!NOTE]
>  場合、<xref:System.Uri.GetComponents%2A>メソッドが呼び出された`format`'éý'<xref:System.UriFormat.Unescaped>への引数として戻り値を使用することはできません、 <xref:System.Uri.%23ctor%2A> 、該当するショートカットを作成するコンス トラクター<xref:System.Uri>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="components" /> が、有効な <see cref="T:System.UriComponents" /> 値の組み合わせではありません。</exception>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Uri" /> が絶対 URI ではありません。 相対 URI は、このメソッドでは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>URI を処理するためのハッシュ コードを取得します。</summary>
        <returns>この URI に対して生成されたハッシュ値を格納している <see cref="T:System.Int32" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、ハッシュ コードをコンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#4)]
 [!code-csharp[NCLUriExamples#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#4)]
 [!code-vb[NCLUriExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLeftPart">
      <MemberSignature Language="C#" Value="public string GetLeftPart (UriPartial part);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetLeftPart(valuetype System.UriPartial part) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.GetLeftPart(System.UriPartial)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLeftPart (part As UriPartial) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetLeftPart(UriPartial part);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="part" Type="System.UriPartial" />
      </Parameters>
      <Docs>
        <param name="part">
          <see cref="T:System.UriPartial" /> 値のうち、返される URI 部分の末尾を指定する値。</param>
        <summary>
          <see cref="T:System.Uri" /> インスタンスの指定部分を取得します。</summary>
        <returns>
          <see cref="T:System.String" /> インスタンスの指定部分を含む <see cref="T:System.Uri" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.GetLeftPart%2A>メソッドで指定された部分で終わる、URI 文字列の左端の部分を含む文字列を返します`part`です。  
  
 <xref:System.Uri.GetLeftPart%2A> 次の場合は、区切り記号が含まれています。  
  
-   <xref:System.UriPartial.Scheme> スキームの区切り記号が含まれます。  
  
-   <xref:System.UriPartial.Authority> パス区切り記号は含まれません。  
  
-   <xref:System.UriPartial.Path> クエリやフラグメントの区切り記号までの元の URI では、任意の区切り記号が含まれています。  
  
-   <xref:System.UriPartial.Query> 含まれています、 <xref:System.UriPartial.Path>、さらに、クエリとその区切り記号。  
  
 次の例は、URI と呼び出しの結果<xref:System.Uri.GetLeftPart%2A>で<xref:System.UriPartial.Scheme>、 <xref:System.UriPartial.Authority>、 <xref:System.UriPartial.Path>、または<xref:System.UriPartial.Query>です。  
  
|URI|Scheme|機関|パス|クエリ|  
|---------|------------|---------------|----------|-----------|  
|http://www.contoso.com/index.htm?date=today|http://|http://www.contoso.com|http://www.contoso.com/index.htm|http://www.contoso.com/index.htm?date=today|  
|http://www.contoso.com/index.htm#main|http://|http://www.contoso.com|http://www.contoso.com/index.htm|http://www.contoso.com/index.htm|  
|mailto:user@contoso.com?subject=uri|mailto:|mailto:user@contoso.com|mailto:user@contoso.com?subject=uri|\<なし >|  
|nntp://news.contoso.com/123456@contoso.com|nntp://|nntp://news.contoso.com|nntp://news.contoso.com/123456@contoso.com|nntp://news.contoso.com/123456@contoso.com|  
|news:123456@contoso.com|ニュース:|news:123456@contoso.com|news:123456@contoso.com|\<なし >|  
|file://server/filename.ext|file://|file://server|file://server/filename.ext|file://server/filename.ext|  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、パス、コンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#4)]
 [!code-csharp[NCLUriExamples#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#4)]
 [!code-vb[NCLUriExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Uri" /> インスタンスは、絶対インスタンスではありません。</exception>
        <exception cref="T:System.ArgumentException">指定した <paramref name="part" /> が有効ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <param name="streamingContext">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <summary>現在のインスタンスをシリアル化するために必要なデータを返します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">メソッドを使用してシリアル化します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="HexEscape">
      <MemberSignature Language="C#" Value="public static string HexEscape (char character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HexEscape(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.HexEscape(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HexEscape (character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HexEscape(char character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">16 進数表現に変換する文字。</param>
        <summary>指定した文字を等価な 16 進数値に変換します。</summary>
        <returns>指定した文字の 16 進数表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、文字を等価の 16 進数に変換し、コンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#1)]
 [!code-csharp[NCLUriExamples#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#1)]
 [!code-vb[NCLUriExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="character" /> が 255 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="HexUnescape">
      <MemberSignature Language="C#" Value="public static char HexUnescape (string pattern, ref int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char HexUnescape(string pattern, int32&amp; index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.HexUnescape(System.String,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HexUnescape (pattern As String, ByRef index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char HexUnescape(System::String ^ pattern, int % index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="index" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="pattern">文字の 16 進数表現。</param>
        <param name="index">
          <c>pattern</c> での文字の 16 進数表現の開始位置。</param>
        <summary>指定した 16 進数文字表現を文字に変換します。</summary>
        <returns>
          <paramref name="index" /> の位置の 16 進数エンコーディングが表現する文字。 <paramref name="index" /> の位置の文字が 16 進数エンコーディングでない場合は、<paramref name="index" /> の位置の文字が返されます。 <paramref name="index" /> の値が増加し、返された文字の次の文字を指します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次のコード例は、文字があるかどうか 16 進エンコードされ、コンソールへの書き込みと同等の文字の場合を決定します。  
  
 [!code-cpp[NCLUriExamples#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#2)]
 [!code-csharp[NCLUriExamples#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#2)]
 [!code-vb[NCLUriExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満か <paramref name="pattern" /> に含まれている文字数以上の値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Host" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Host As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Host { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスのホスト構成要素を取得します。</summary>
        <value>ホスト名を含む <see cref="T:System.String" />。 通常は、サーバーの DNS ホスト名または IP アドレスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 異なり、<xref:System.Uri.Authority%2A>プロパティ、このプロパティの値では、ポート番号は含まれません。  
  
   
  
## Examples  
 次の例では、コンソールに、サーバーのホスト名 (www.contoso.com) を書き込みます。  
  
 [!code-cpp[Classic Uri.Host Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Host Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Host Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Host Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Host Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Host Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HostNameType">
      <MemberSignature Language="C#" Value="public UriHostNameType HostNameType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.UriHostNameType HostNameType" />
      <MemberSignature Language="DocId" Value="P:System.Uri.HostNameType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostNameType As UriHostNameType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property UriHostNameType HostNameType { UriHostNameType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UriHostNameType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI に指定したホスト名の型を取得します。</summary>
        <value>
          <see cref="T:System.UriHostNameType" /> 列挙体のメンバー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスおよび書き込み、<xref:System.Uri.HostNameType%2A>コンソールにします。  
  
 [!code-cpp[NCLUriExamples#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#9)]
 [!code-csharp[NCLUriExamples#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#9)]
 [!code-vb[NCLUriExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IdnHost">
      <MemberSignature Language="C#" Value="public string IdnHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IdnHost" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IdnHost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IdnHost As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IdnHost { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ホストの RFC 3490 準拠国際ドメイン名 (該当する場合には Punycode を使用する)。 この文字列は、必要に応じてエスケープを解除後、DNS の解決に安全に使用できます。</summary>
        <value>IDN 標準 <see cref="T:System.String" /> に従って Punycode で書式設定されたホスト名を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、Punycode 形式でドメイン名が必要な低レベルのネットワーク プロトコルを使用するために提供します。 コードにその特定の形式が必要としない場合は、使用<xref:System.Uri.Host%2A>ホスト名です。  
  
 非推奨<xref:System.Uri.DnsSafeHost%2A>プロパティが依存*app.config*設定には、Windows ストア アプリケーションでは変更できません。 IdnHost が推奨される代替を使用する手段として提供される<xref:System.Uri.DnsSafeHost%2A>ので、<xref:System.Uri.IdnHost%2A>は常に保証されて現在に関係なく、安全な DNS *app.config*設定可能性があります。  

 (たとえば、"http://[fe80::200:39ff:fe36:1a2d%254]/temp/example.htm")、IdnHost しエスケープの文字列を返しますこのインスタンスを構築するエスケープ文字列を使用した場合。 DNS 解決をその文字列を使用する前に IdnHost から返される、エスケープされた文字列をエスケープ解除する必要があります。 注意している場合 (たとえば、"http://[fe80::200:39ff:fe36:1a2d%4]/temp/example.htm")、し IdnHost エスケープされていない文字列を返しますこのインスタンスを構築するには無効なエスケープされていない文字列を使用しました。


 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbsoluteUri">
      <MemberSignature Language="C#" Value="public bool IsAbsoluteUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbsoluteUri" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsAbsoluteUri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbsoluteUri As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbsoluteUri { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Uri" /> インスタンスが絶対インスタンスであるかどうかの値を取得します。</summary>
        <value>
          <see cref="T:System.Boolean" /> インスタンスが絶対インスタンスである場合は <see langword="true" /> 値が <see cref="T:System.Uri" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは`true`場合、文字列または<xref:System.Uri>コンス トラクターに渡されたインスタンスは、絶対パスとして解析できる<xref:System.Uri>インスタンスで、スキーム、権限、およびパスが含まれています。 それ以外の場合、<xref:System.Uri>インスタンスの相対パスとして扱われ、スキームまたは他の URI コンポーネントは省略可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBadFileSystemCharacter">
      <MemberSignature Language="C#" Value="protected virtual bool IsBadFileSystemCharacter (char character);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsBadFileSystemCharacter(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsBadFileSystemCharacter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsBadFileSystemCharacter (character As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsBadFileSystemCharacter(char character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">テスト対象の <see cref="T:System.Char" />。</param>
        <summary>ファイル システム名で文字が無効かどうかの値を取得します。</summary>
        <returns>指定した文字が無効な場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字が、NTFS ファイル システムの規則に従って解析します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBaseOf">
      <MemberSignature Language="C#" Value="public bool IsBaseOf (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsBaseOf(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsBaseOf(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsBaseOf(Uri ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">テスト対象に指定する <see cref="T:System.Uri" /> インスタンス。</param>
        <summary>現在の <see cref="T:System.Uri" /> インスタンスが、指定した <see cref="T:System.Uri" /> インスタンスのベースかどうかを判断します。</summary>
        <returns>現在の <see langword="true" /> インスタンスが <see cref="T:System.Uri" /> のベースである場合は <paramref name="uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.IsBaseOf%2A> 現在の比較に使用<xref:System.Uri>インスタンスを指定した<xref:System.Uri>この URI が、指定されたベースであるかどうかを判別<xref:System.Uri>です。 2 つを比較するときに<xref:System.Uri>基本リレーションシップ、ユーザー情報を決定するオブジェクト (<xref:System.Uri.UserInfo%2A>) は評価されません。 2 つの Uri (uri1 と uri2) を比較するときに uri1 場合、uri2 のすべての内容を無視して、最後のスラッシュ (/)、2 つの Uri は同一と uri2 のベースであります。 使用してhttp://host/path/path/file?queryベース URI として、次の表にその他の Uri の基盤となっているかどうか。  
  
|URI|http://host/path/path/file?query 基本クラスします。|  
|---------|------------------------------------------------------|  
|http://host/path/path/file/|可|  
|http://host/path/path/#fragment|可|  
|http://host/path/path/MoreDir/"|可|  
|http://host/path/path/OtherFile?Query|可|  
|http://host/path/path/|可|  
|http://host/path/path/file|可|  
|http://host/path/path|Ｘ|  
|http://host/path/path?query|Ｘ|  
|http://host/path/path#Fragment|Ｘ|  
|http://host/path/path2/|Ｘ|  
://host/path/path2/MoreDir|Ｘ|  
|http://host/path/File|Ｘ|  
  
   
  
## Examples  
 この例で作成、 <xref:System.Uri> 、底を表すインスタンス<xref:System.Uri>インスタンス。 2 つ目を作成し、<xref:System.Uri>文字列からインスタンス。 呼び出す<xref:System.Uri.IsBaseOf%2A>ベースのインスタンスが 2 番目のインスタンスのベースであるかどうかを判別します。 結果は、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#6)]
 [!code-csharp[NCLUriEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#6)]
 [!code-vb[NCLUriEnhancements#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uri" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultPort">
      <MemberSignature Language="C#" Value="public bool IsDefaultPort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaultPort" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsDefaultPort" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefaultPort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefaultPort { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI のポート値が、このスキームの既定のポート値かどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Boolean" /> プロパティの値がこのスキームの既定ポートの場合は <see langword="true" /> 値が <see cref="P:System.Uri.Port" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスおよび既定のポートを使用するかどうかを確認します。  
  
 [!code-cpp[NCLUriExamples#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#4)]
 [!code-csharp[NCLUriExamples#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#4)]
 [!code-vb[NCLUriExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsExcludedCharacter">
      <MemberSignature Language="C#" Value="protected static bool IsExcludedCharacter (char character);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool IsExcludedCharacter(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsExcludedCharacter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function IsExcludedCharacter (character As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool IsExcludedCharacter(char character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">テスト対象の <see cref="T:System.Char" />。</param>
        <summary>指定した文字をエスケープする必要があるかどうかの値を取得します。</summary>
        <returns>指定した文字をエスケープする必要がある場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFile">
      <MemberSignature Language="C#" Value="public bool IsFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFile" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFile { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した <see cref="T:System.Uri" /> がファイル URI かどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Boolean" /> がファイル URI の場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.IsFile%2A>プロパティは`true`ときに、<xref:System.Uri.Scheme%2A>プロパティ =<xref:System.Uri.UriSchemeFile>です。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンス化し、それがファイル URI であるかどうかを決定します。  
  
 [!code-cpp[NCLUriExamples#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#6)]
 [!code-csharp[NCLUriExamples#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#6)]
 [!code-vb[NCLUriExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsHexDigit">
      <MemberSignature Language="C#" Value="public static bool IsHexDigit (char character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHexDigit(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsHexDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHexDigit (character As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHexDigit(char character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">検証対象の文字。</param>
        <summary>指定した文字が有効な 16 進数の数字かどうかを判断します。</summary>
        <returns>文字が有効な 16 進数の値である場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 16 進数字とは、0 ~ 9 の数字と A ~ F または a ~ f の文字です。  
  
   
  
## Examples  
 次の例では、かどうか、文字が 16 進数の文字である場合は、対応する 10 進値をコンソールに出力を決定します。  
  
 [!code-cpp[NCLUriExamples#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#1)]
 [!code-csharp[NCLUriExamples#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#1)]
 [!code-vb[NCLUriExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHexEncoding">
      <MemberSignature Language="C#" Value="public static bool IsHexEncoding (string pattern, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHexEncoding(string pattern, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsHexEncoding(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHexEncoding (pattern As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHexEncoding(System::String ^ pattern, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">確認する文字列。</param>
        <param name="index">
          <c>pattern</c> 内で 16 進エンコーディングを確認する位置。</param>
        <summary>文字列内の文字が 16 進エンコードかどうかを判断します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> が指定された位置の 16 進エンコードの場合は <see langword="true" /> 値が <paramref name="pattern" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.IsHexEncoding%2A>メソッドは、0 からの数値は、"hex"、"%hexhex"、文字列内のパターンに依存する 16 進エンコードのチェックを 9 または A ~ F (大文字と小文字) からの文字です。  
  
   
  
## Examples  
 次のコード例は、文字があるかどうか 16 進エンコードされ、コンソールへの書き込みと同等の文字の場合を決定します。  
  
 [!code-cpp[NCLUriExamples#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#2)]
 [!code-csharp[NCLUriExamples#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#2)]
 [!code-vb[NCLUriExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoopback">
      <MemberSignature Language="C#" Value="public bool IsLoopback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsLoopback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoopback { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した <see cref="T:System.Uri" /> がローカル ホストを参照するかどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Boolean" /> がローカル ホストを参照する場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.IsLoopback%2A> 返します`true`場合、このインスタンスの作成時に指定された URI が 127.0.0.1、ループバック、localhost、または URI を指定しなかったかどうかまたはホストの情報 (たとえば、file:///c:Dir/file.txt)。 その他のすべての Uri 戻り`false`です。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンス化し、ローカル ホストを参照しているかどうかを決定します。  
  
 [!code-cpp[NCLUriExamples#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#6)]
 [!code-csharp[NCLUriExamples#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#6)]
 [!code-vb[NCLUriExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReservedCharacter">
      <MemberSignature Language="C#" Value="protected virtual bool IsReservedCharacter (char character);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsReservedCharacter(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsReservedCharacter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsReservedCharacter (character As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsReservedCharacter(char character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">テスト対象の <see cref="T:System.Char" />。</param>
        <summary>指定した文字が予約済みの文字であるかどうかを示す値を取得します。</summary>
        <returns>指定した文字が予約済みの文字である場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnc">
      <MemberSignature Language="C#" Value="public bool IsUnc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnc" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsUnc" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnc As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnc { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した <see cref="T:System.Uri" /> が UNC (Universal Naming Convention) パスかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Boolean" /> が UNC パスの場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.IsUnc%2A>プロパティは`true`場合、指定した<xref:System.Uri>インスタンスは、UNC パス (など\\\server\folder または file://server/folder)。 このプロパティは常に返します`true`場合に URI が file:// スキーム、ホストのコンポーネントを指定します。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンス化し、UNC パスであるかどうかを決定します。  
  
 [!code-cpp[NCLUriExamples#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#6)]
 [!code-csharp[NCLUriExamples#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#6)]
 [!code-vb[NCLUriExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsWellFormedOriginalString">
      <MemberSignature Language="C#" Value="public bool IsWellFormedOriginalString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsWellFormedOriginalString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsWellFormedOriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Function IsWellFormedOriginalString () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsWellFormedOriginalString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Uri" /> の作成に使用された文字列が正しい形式かどうか、およびこれ以上エスケープする必要がないかどうかを示します。</summary>
        <returns>文字列が整形式である場合は <see cref="T:System.Boolean" />、それ以外の場合は <see langword="true" /> である <see langword="false" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列は、既定では RFC 2396 および RFC 2732 に従って整形式であると見なされます。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、文字列と見なされます RFC 3986 および RFC 3987 に従って適切な形式  
  
 文字列は、不適切に作成された、次の条件のいずれかが発生した場合は false を返すメソッドの原因と考えられます。  
  
|Error|例|  
|-----------|-------------|  
|文字列が正しくエスケープされていません。|[http://www.contoso.com/path???/file](http://www.contoso.com/path???/file) 名|  
|文字列は、絶対<xref:System.Uri>暗黙的なファイルを表す<xref:System.Uri>です。|c:\\\directory\filename|  
|文字列は、絶対 URI には、パスの前にスラッシュがありません。|file://c:/directory/filename|  
|文字列には、スラッシュとして扱われる場合でものエスケープ解除されたバック スラッシュが含まれています。|http:\\\host/path/file|  
|文字列が階層的な絶対パスを表す<xref:System.Uri>「://」を含んでいません。|www.contoso.com/path/file|  
|対応するパーサー、<xref:System.Uri.Scheme%2A?displayProperty=nameWithType>元の文字列が整形式でないことを示します。|この例は、URI のスキームによって異なります。|  
  
 既定では、文字列を構築するために使用<xref:System.Uri>RFC 2396 および RFC 2732 によって適切な形式で配布されたと見なされます。  
  
 International Resource Identifier (IRI) および国際化ドメイン名 (IDN) のサポートが有効にすると、構築するために使用される文字列<xref:System.Uri>RFC 3986 および RFC 3987 によって適切な形式で配布されたと見なされます。 IRI をサポートするために使用される Punycode 名は、ASCII 文字のみが含まれてし、常に xn--プレフィックスを持つ開始します。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWellFormedUriString">
      <MemberSignature Language="C#" Value="public static bool IsWellFormedUriString (string uriString, UriKind uriKind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWellFormedUriString(string uriString, valuetype System.UriKind uriKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWellFormedUriString(System::String ^ uriString, UriKind uriKind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="uriKind" Type="System.UriKind" />
      </Parameters>
      <Docs>
        <param name="uriString">
          <see cref="T:System.Uri" /> の構築に使用される文字列。</param>
        <param name="uriKind">
          <c>uriString</c> 内の <see cref="T:System.Uri" /> の型。</param>
        <summary>文字列を使用して URI を作成する際に、文字列の形式が正しいかどうかを示し、文字列をそれ以上エスケープする必要がないことを確認します。</summary>
        <returns>文字列が整形式である場合は <see cref="T:System.Boolean" />、それ以外の場合は <see langword="true" /> である <see langword="false" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 バージョンの .NET バージョン 4.5 より前に、既定では、文字列と見なされます RFC 2396 および RFC 2732 によって適切な形式で配布されました。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、文字列は、RFC 3986 および RFC 3987 によって適切な形式で配布されたと見なされます。  
  
 .NET 4.5 以降は、文字列は常と見なされる整形式で RFC 3986 および RFC 3987、かどうか IRI または IDN が有効にします。 ただし、これはのみ .NET 4.5 を対象とするアプリの場合は true またはそれ以降に注意してください。 .NET 4.0 を対象とするアプリでは、互換コードの呼び出しし、古い (4.5 プレ) 動作が発生します。  
  
 文字列が整形式と見なさ、原因で、次の条件のいずれかが発生した場合は false を返すメソッド  
  
|Error|例|  
|-----------|-------------|  
|文字列が正しくエスケープされていません。|[http://www.contoso.com/path???/file](http://www.contoso.com/path???/file) 名|  
|文字列は、絶対<xref:System.Uri>暗黙的なファイルを表す<xref:System.Uri>です。|c:\\\directory\filename|  
|文字列は、絶対 URI には、パスの前にスラッシュがありません。|file://c:/directory/filename|  
|スラッシュとして扱う場合でも、文字列がエスケープされていない円記号を含む|http:\\\host/path/file|  
|文字列が階層的な絶対パスを表す<xref:System.Uri>「://」を含んでいません|www.contoso.com/path/file|  
|対応するパーサー、<xref:System.Uri.Scheme%2A>元の文字列が整形式でないことを示します。|この例は、URI のスキームによって異なります。|  
|以降では、.NET 4.5、相対 Uri にコロン (': ')、最初のセグメントでは考慮されません整形式です。|2013.05.29_14:33:41|  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalPath">
      <MemberSignature Language="C#" Value="public string LocalPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalPath" />
      <MemberSignature Language="DocId" Value="P:System.Uri.LocalPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカル オペレーティング システムでのファイル名表現を取得します。</summary>
        <value>ローカル オペレーティング システムでのファイル名表現を含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される値はエスケープ解除されます。 パスが Windows ファイル パスとして認識されると、すべてのスラッシュ (/) が円記号によって置き換えられます (\\)。  
  
 URI の`file://computer/file.ext`、絶対パスが`/file.ext`のローカル パスは`\\computer\file.ext`します。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、ローカル パスをコンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#6)]
 [!code-csharp[NCLUriExamples#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#6)]
 [!code-vb[NCLUriExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeRelative">
      <MemberSignature Language="C#" Value="public string MakeRelative (Uri toUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MakeRelative(class System.Uri toUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.MakeRelative(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeRelative (toUri As Uri) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MakeRelative(Uri ^ toUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. Please use MakeRelativeUri(Uri uri). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="toUri">現在の URI と比較する URI。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスの相違点を判断します。</summary>
        <returns>この URI インスタンスと <paramref name="toUri" /> のホスト名とスキームが同じ場合、現在の URI インスタンスに追加したときに <see cref="T:System.String" /> パラメーターを作成する相対 URI を表す <paramref name="toUri" /> がこのメソッドから返されます。  ホスト名またはスキームが異なる場合は、<see cref="T:System.String" /> パラメーターを表す <paramref name="toUri" /> がこのメソッドから返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、URI インスタンス`toUri`、通話の結果と<xref:System.Uri.MakeRelative%2A>です。  
  
|現在の URI インスタンス|`toUri`|戻り値|  
|--------------------------|-------------|------------------|  
|http://www.contoso.com/|http://www.contoso.com/test/test.htm|test/test.htm|  
|http://www.contoso.com/test1/|http://www.contoso.com/|../|  
|http://www.contoso.com:8000/|http://www.contoso.com/test/test.htm|http://www.contoso.com/test/test.htm|  
|http://username@www.contoso.com/|http://www.contoso.com/test1/test1.txt|test1/test1.txt|  
  
 ユーザーについては、URI に存在する場合は無視されます。  
  
   
  
## Examples  
 次の例では、2<xref:System.Uri>インスタンス。 パス情報の違いは、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriExamples#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#3)]
 [!code-csharp[NCLUriExamples#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#3)]
 [!code-vb[NCLUriExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="toUri" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このメソッドは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeRelativeUri">
      <MemberSignature Language="C#" Value="public Uri MakeRelativeUri (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Uri MakeRelativeUri(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.MakeRelativeUri(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Uri ^ MakeRelativeUri(Uri ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">現在の URI と比較する URI。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスの相違点を判断します。</summary>
        <returns>この URI インスタンスと <paramref name="uri" /> のホスト名とスキームが同じ場合、現在の URI インスタンスに追加したときに <see cref="T:System.Uri" /> を作成する相対 <paramref name="uri" /> がこのメソッドから返されます。  ホスト名またはスキームが異なる場合は、<see cref="T:System.Uri" /> パラメーターを表す <paramref name="uri" /> がこのメソッドから返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、URI インスタンス`toUri`、通話の結果と<xref:System.Uri.MakeRelativeUri%2A>です。  
  
|現在の URI インスタンス|`toUri`|戻り値|  
|--------------------------|-------------|------------------|  
|http://www.contoso.com/|http://www.contoso.com/test/test.htm|test/test.htm|  
|http://www.contoso.com/test1/|http://www.contoso.com/|../|  
|http://www.contoso.com:8000/|http://www.contoso.com/test/test.htm|http://www.contoso.com/test/test.htm|  
|http://username@www.contoso.com/|http://www.contoso.com/test1/test1.txt|test1/test1.txt|  
  
 ユーザーについては、URI に存在する場合は無視されます。  
  
   
  
## Examples  
 次の例では、2<xref:System.Uri>インスタンス。 パス情報の違いは、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriExamples#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#3)]
 [!code-csharp[NCLUriExamples#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#3)]
 [!code-vb[NCLUriExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uri" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Uri uri1, Uri uri2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Uri uri1, class System.Uri uri2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.op_Equality(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (uri1 As Uri, uri2 As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Uri ^ uri1, Uri ^ uri2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri1" Type="System.Uri" />
        <Parameter Name="uri2" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri1">
          <c>uri2</c> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
        <param name="uri2">
          <c>uri1</c> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスの値が同一かどうかを判断します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> の各インスタンスが等しい場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロードを使用して、<xref:System.Uri.Equals%2A>メソッドを呼び出せば確認するかどうか、2 つ<xref:System.Uri>が等価です。 <xref:System.Uri.UserInfo%2A> および<xref:System.Uri.Fragment%2A>この比較を行うときに、コンテンツは無視されます。  
  
   
  
## Examples  
 この例では 3 つ<xref:System.Uri>文字列からインスタンスし、比較を同じ値を表すかどうかを判断します。 `Address1` および`Address2`は同じため、<xref:System.Uri.Fragment%2A>この比較の部分は無視されます。 結果は、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriEnhancements#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#5)]
 [!code-csharp[NCLUriEnhancements#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#5)]
 [!code-vb[NCLUriEnhancements#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Uri uri1, Uri uri2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Uri uri1, class System.Uri uri2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.op_Inequality(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (uri1 As Uri, uri2 As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Uri ^ uri1, Uri ^ uri2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri1" Type="System.Uri" />
        <Parameter Name="uri2" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri1">
          <c>uri2</c> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
        <param name="uri2">
          <c>uri1</c> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスの値が同一でないかどうかを判断します。</summary>
        <returns>2 つの <see cref="T:System.Boolean" /> インスタンスが等しくない場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。 どちらかのパラメーターが <see langword="null" /> の場合、このメソッドは <see langword="true" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロードを使用して、<xref:System.Uri.Equals%2A>メソッドを呼び出せば確認するかどうか、2 つ<xref:System.Uri>インスタンスが同じではありません。 <xref:System.Uri.UserInfo%2A> および<xref:System.Uri.Fragment%2A>この比較を行うときに、コンテンツは無視されます。  
  
   
  
## Examples  
 この例では 3 つ<xref:System.Uri>文字列からインスタンスし、比較を同じ値を表すかどうかを判断します。 `Address2` および`Address3`が同じでないため`Address3`が含まれています、<xref:System.Uri.Query%2A>でもない`Address2`です。 結果は、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriEnhancements#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#5)]
 [!code-csharp[NCLUriEnhancements#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#5)]
 [!code-vb[NCLUriEnhancements#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Uri.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Uri" /> コンストラクターに渡された元の URI 文字列を取得します。</summary>
        <value>このインスタンスの作成時に指定した URI 自体を含む <see cref="T:System.String" />。それ以外の場合は <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンス トラクターに指定された URI には、先頭または末尾のスペースが含まれている、これらのスペースは保持されます。  
  
 このプロパティによって返される値と異なる<xref:System.Uri.ToString%2A>と<xref:System.Uri.AbsoluteUri%2A>です。 <xref:System.Uri.ToString%2A> URI のエスケープ解除された正規の形式を返します。 <xref:System.Uri.AbsoluteUri%2A> URI のエスケープされた正規の形式を返します。  
  
 International Resource Identifier (IRI) および国際化ドメイン名 (IDN) のサポートを有効にすると、<xref:System.Uri.OriginalString%2A>文字列を返します、元非正規化されたホスト名を Punycode で 1 つを初期化するために使用した場合、<xref:System.Uri>インスタンス。 Punycode 名には ASCII 文字のみが含まれ、常に xn-- プレフィックスで始まります。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
 ときに、<xref:System.Uri>オブジェクトをシリアル化、<xref:System.Uri.OriginalString%2A>は保持されません。 シリアル化プロセスでは完全にエスケープされたと正規化<xref:System.Uri.AbsoluteUri%2A>プロパティをシリアル化するときにします。 <xref:System.Uri>を含む IPv6 アドレス、IPv6 アドレスとスコープ ID が含まれますでシリアル化された<xref:System.Uri>オブジェクト。  
  
   
  
## Examples  
 次の例は、新しい作成<xref:System.Uri>文字列からインスタンス。 返される値の差が示されている<xref:System.Uri.OriginalString%2A>への呼び出しと、コンス トラクターに渡された文字列が返されます<xref:System.Uri.ToString%2A>文字列の正規の形式が返されます。  
  
 [!code-cpp[NCLUriEnhancements#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#3)]
 [!code-csharp[NCLUriEnhancements#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#3)]
 [!code-vb[NCLUriEnhancements#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="protected virtual void Parse ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Parse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Parse" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Parse ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Parse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスの URI を解析し、有効な URI で必要とされるすべての部分が含まれていることを確認します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UriFormatException">コンストラクターから渡された URI が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="PathAndQuery">
      <MemberSignature Language="C#" Value="public string PathAndQuery { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PathAndQuery" />
      <MemberSignature Language="DocId" Value="P:System.Uri.PathAndQuery" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathAndQuery As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PathAndQuery { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Uri.AbsolutePath" /> プロパティと <see cref="P:System.Uri.Query" /> プロパティを疑問符 (?) で区切った形式で取得します。</summary>
        <value>
          <see cref="T:System.String" /> プロパティと <see cref="P:System.Uri.AbsolutePath" /> プロパティが疑問符 (?) で区切られた形式で含まれている <see cref="P:System.Uri.Query" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.PathAndQuery%2A>プロパティには、サーバーと、要求と共に送信される情報の照会で絶対パスが含まれています。 連結することと同じである、<xref:System.Uri.AbsolutePath%2A>と<xref:System.Uri.Query%2A>プロパティです。  
  
 <xref:System.Uri.PathAndQuery%2A>プロパティが既定では RFC 2396 に従ってエスケープされます。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、<xref:System.Uri.PathAndQuery%2A>プロパティは、RFC 3986 および RFC 3987 に従ってエスケープされます。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## Examples  
 次の例では、URI のパス (/catalog/shownew.htm) とクエリ (日付 = 今日) については、コンソールにします。  
  
 [!code-cpp[Classic Uri.PathAndQuery Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.PathAndQuery Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.PathAndQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Port" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Port As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Port { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この URI のポート番号を取得します。</summary>
        <value>この URI のポート番号を格納している <see cref="T:System.Int32" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ポート番号は、URI で参照されているサーバーにアクセスするために使用されるプロトコルのポートを定義します。 ポートは、URI の一部として指定されていない場合、<xref:System.Uri.Port%2A>プロトコルの既定値を返します。 既定のポート番号がない場合は、このプロパティは、-1 を返します。  
  
   
  
## Examples  
 次の例は、URI のポート番号をコンソールに書き込みます。 この場合、値は、HTTP、ポート 80 の既定のポート番号です。  
  
 [!code-cpp[Classic Uri.Port Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Port Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Port Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Port Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Port Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Port Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public string Query { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Query" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Query" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Query As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Query { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した URI に含まれているクエリ情報を取得します。</summary>
        <value>指定した URI のクエリ情報を含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.Query%2A>プロパティには、URI に含まれているクエリ情報が含まれています。 クエリの情報はパス情報、疑問符 (?) で区切られ、URI の末尾まで続きます。 返される情報照会にはには、先頭に疑問符が含まれています。  
  
 クエリの情報は、既定では、RFC 2396 に従ってエスケープされます。 International Resource Identifier (Iri) または国際化ドメイン名 (IDN) の解析が有効になっている場合、クエリの情報は RFC 3986 および RFC 3987 に従ってエスケープされます。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## Examples  
 次の例は、クエリを記述しますか? 日付をコンソールに今日 = です。  
  
 [!code-cpp[Classic Uri.PathAndQuery Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Uri.PathAndQuery Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/CS/source.cs#2)]
 [!code-vb[Classic Uri.PathAndQuery Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この URI のスキーム名を取得します。</summary>
        <value>この URI のスキームを含み、小文字に変換された <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.Scheme%2A>プロパティを初期化するために使用されるスキームを返します、<xref:System.Uri>インスタンス。 このプロパティは、スキームが初期化に使用されることを指定していない、<xref:System.Uri>インスタンスが認識されました。  
  
 次の表に、によって返されるいくつかの可能な値の例については、<xref:System.Uri.Scheme%2A>プロパティです。  
  
|Scheme|説明|  
|------------|-----------------|  
|ファイル|リソースは、ローカル コンピューターのファイルです。|  
|ftp|FTP 経由でリソースにアクセスします。|  
|Gopher|Gopher プロトコル経由でリソースにアクセスします。|  
|http|HTTP 経由でリソースにアクセスします。|  
|https|SSL で暗号化された HTTP 経由でリソースにアクセスします。|  
|ldap|LDAP プロトコルを使用してリソースにアクセスします。|  
|mailto|リソースが電子メール アドレスであり SMTP プロトコルを使用してアクセスします。|  
|net.pipe|名前付きパイプ経由でリソースにアクセスします。|  
|net.tcp|リソースは、TCP エンドポイントからアクセスされます。|  
|news|NNTP プロトコル経由でリソースにアクセスします。|  
|nntp|NNTP プロトコル経由でリソースにアクセスします。|  
|telnet|TELNET プロトコルを使用してリソースにアクセスします。|  
|uuid|サービスと通信するための一意な UUID エンドポイント名を使用してリソースにアクセスします。|  
  
   
  
## Examples  
 次の例では、スキーム名 (http) をコンソールに書き込みます、 http://www.contoso.com/ URI。  
  
 [!code-cpp[Classic Uri.Scheme Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Scheme Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Scheme Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Scheme Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Scheme Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Scheme Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemeDelimiter">
      <MemberSignature Language="C#" Value="public static readonly string SchemeDelimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string SchemeDelimiter" />
      <MemberSignature Language="DocId" Value="F:System.Uri.SchemeDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SchemeDelimiter As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ SchemeDelimiter;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI のアドレス部分と通信プロトコル スキームを区切る文字を指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例から文字列を作成する<xref:System.Uri.UriSchemeHttp>、 <xref:System.Uri.SchemeDelimiter>、およびアドレス。 A<xref:System.Uri>インスタンスは、文字列から作成されます。  
  
 [!code-cpp[NCLUriExamples#17](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#17)]
 [!code-csharp[NCLUriExamples#17](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#17)]
 [!code-vb[NCLUriExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Segments">
      <MemberSignature Language="C#" Value="public string[] Segments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Segments" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Segments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Segments As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Segments { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した URI を構成するパス セグメントを格納している配列を取得します。</summary>
        <value>指定した URI を構成するパス セグメントを格納している <see cref="T:System.String" /> 配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.Segments%2A>プロパティは、「セグメント」(部分文字列) を含む URI の絶対パスを形成する文字列の配列を返します。 最初のセグメントは、スラッシュ (/) や、パスの末尾に到達するまで、その最初の文字からの絶対パスを解析して取得されます。 各セグメントは、前のセグメントにした後に、最初の文字で開始し、[次へ] のスラッシュまたはパスの末尾で終了します。 (URI の絶対パスが含まれますすべてホストとポートの後、クエリおよびフラグメント前に、。)  
  
 次の例では、2 つの Uri のセグメントと絶対パスを示します。 クエリ、フラグメント、絶対パスの一部ではないと、セグメントがないため、2 番目の例を示しています。  
  
 絶対 URI  
 http://www.contoso.com/Chapters/Chapter1/Sections/Section1.htm  
  
 絶対パス  
 /Chapters/Chapter1/Sections/Section1.htm  
  
 セグメント  
 /Chapters/Chapter1/Sections/Section1.htm  
  
 絶対 URI  
 http://www.contoso.com/Chapters/Chapter1/Sections/Section1.htm#page1?answer=NO  
  
 絶対パス  
 /Chapters/Chapter1/Sections/Section1.htm  
  
 セグメント  
 /Chapters/Chapter1/Sections/Section1.htm  
  
 絶対パスが、'/' で始まる、ため、最初のセグメントが含まれているし、それ以外のものに注意してください。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Uri> 3 でインスタンスのセグメントを画面上のセグメントを表示します。  
  
 [!code-cpp[NCLUriExamples#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#5)]
 [!code-csharp[NCLUriExamples#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#5)]
 [!code-vb[NCLUriExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <param name="streamingContext">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <summary>現在のインスタンスをシリアル化するために必要なデータを返します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">メソッドを使用してシリアル化します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定した <see cref="T:System.Uri" /> インスタンスの正規文字列表現を取得します。</summary>
        <returns>エスケープ解除された正規形式の <see cref="T:System.String" /> インスタンスを格納している <see cref="T:System.Uri" /> インスタンス。 #、?、および % 以外のすべての文字は、エスケープ解除されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって返される文字列は、ポート情報を含まない、ポートは、スキームの既定のポートとします。  
  
> [!NOTE]
>  によって返される文字列、<xref:System.Uri.ToString%2A>メソッドが制御文字は、コンソール アプリケーションの状態が破損することができますを含めることがあります。 使用することができます、<xref:System.Uri.GetComponents%2A>メソッドを<xref:System.UriFormat.SafeUnescaped?displayProperty=nameWithType>形式返された文字列からコントロール文字を削除します。  
  
   
  
## Examples  
 次の例は、新しい作成<xref:System.Uri>文字列からインスタンス。 返される値の差が示されている<xref:System.Uri.OriginalString%2A>への呼び出しと、コンス トラクターに渡された文字列が返されます<xref:System.Uri.ToString%2A>文字列の正規の形式が返されます。  
  
 [!code-cpp[NCLUriExamples#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#7)]
 [!code-csharp[NCLUriExamples#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#7)]
 [!code-vb[NCLUriExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#7)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">部分的に信頼されたコードからの派生を防ぐに<see cref="T:System.Uri" />です。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryCreate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Uri" /> を作成します。 <see cref="T:System.Uri" /> を作成できない場合に、例外がスローされません。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (string uriString, UriKind uriKind, out Uri result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(string uriString, valuetype System.UriKind uriKind, [out] class System.Uri&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(System::String ^ uriString, UriKind uriKind, [Runtime::InteropServices::Out] Uri ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="uriKind" Type="System.UriKind" />
        <Parameter Name="result" Type="System.Uri&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="uriString">
          <see cref="T:System.String" /> を表す <see cref="T:System.Uri" />。</param>
        <param name="uriKind">URI の種類。</param>
        <param name="result">このメソッドから制御が戻るときに、作成された <see cref="T:System.Uri" /> を格納します。</param>
        <summary>指定した <see cref="T:System.Uri" /> インスタンスと <see cref="T:System.String" /> を使用して、新しい <see cref="T:System.UriKind" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> が正常に作成された場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが戻る場合`true`、新しい<xref:System.Uri>に`result`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (Uri baseUri, string relativeUri, out Uri result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(class System.Uri baseUri, string relativeUri, [out] class System.Uri&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (baseUri As Uri, relativeUri As String, ByRef result As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(Uri ^ baseUri, System::String ^ relativeUri, [Runtime::InteropServices::Out] Uri ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
        <Parameter Name="result" Type="System.Uri&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="baseUri">ベース <see cref="T:System.Uri" />。</param>
        <param name="relativeUri">ベース <see cref="T:System.Uri" /> に追加する <see cref="T:System.String" /> として表される相対 <see cref="T:System.Uri" />。</param>
        <param name="result">このメソッドから制御が戻るときに、<c>baseUri</c> および <c>relativeUri</c> から作成される <see cref="T:System.Uri" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したベースおよび相対 <see cref="T:System.Uri" /> のインスタンスを使用して、新しい <see cref="T:System.String" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> が正常に作成された場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが戻る場合`true`、新しい<xref:System.Uri>に`result`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (Uri baseUri, Uri relativeUri, out Uri result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(class System.Uri baseUri, class System.Uri relativeUri, [out] class System.Uri&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCreate (baseUri As Uri, relativeUri As Uri, ByRef result As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryCreate(Uri ^ baseUri, Uri ^ relativeUri, [Runtime::InteropServices::Out] Uri ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
        <Parameter Name="result" Type="System.Uri&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="baseUri">ベース <see cref="T:System.Uri" />。</param>
        <param name="relativeUri">ベース <see cref="T:System.Uri" /> に追加する相対 <see cref="T:System.Uri" />。</param>
        <param name="result">このメソッドから制御が戻るときに、<c>baseUri</c> および <c>relativeUri</c> から作成される <see cref="T:System.Uri" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したベースおよび相対 <see cref="T:System.Uri" /> のインスタンスを使用して、新しい <see cref="T:System.Uri" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> が正常に作成された場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが戻る場合`true`、新しい<xref:System.Uri>に`result`です。  
  
 このメソッドは、URI を構築、正規の形式で格納およびそれを検証します。 ハンドルされない例外が発生する場合、このメソッドはそれをキャッチします。 作成する場合、 <xref:System.Uri> get 例外は、のいずれかを使用して、<xref:System.Uri.%23ctor%2A>コンス トラクターです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unescape">
      <MemberSignature Language="C#" Value="protected virtual string Unescape (string path);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string Unescape(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Unescape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Unescape (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ Unescape(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. Please use GetComponents() or static UnescapeDataString() to unescape a Uri component or a string. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">変換対象の <see cref="T:System.String" />。</param>
        <summary>エスケープ シーケンスをエスケープ解除された形式に置換することによって、指定した文字列を変換します。</summary>
        <returns>
          <see cref="T:System.String" /> パラメーターのエスケープ解除された値を格納している <paramref name="path" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnescapeDataString">
      <MemberSignature Language="C#" Value="public static string UnescapeDataString (string stringToUnescape);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UnescapeDataString(string stringToUnescape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.UnescapeDataString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnescapeDataString (stringToUnescape As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UnescapeDataString(System::String ^ stringToUnescape);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringToUnescape" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stringToUnescape">エスケープ解除する文字列。</param>
        <summary>文字列をエスケープ解除された表現に変換します。</summary>
        <returns>
          <see cref="T:System.String" /> のエスケープ解除された表現を格納する <paramref name="stringToUnescape" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、注意してください。 以前にエスケープされた文字列をエスケープ解除は、あいまいさとエラー可能性があります。  
  
 多くの Web ブラウザーでは、プラスに Uri 内の空白文字をエスケープ文字は (「+」);ただし、UnescapeDataString メソッドは変換されませんプラス記号をスペースにこの動作は、すべての URI スキームでは標準ではないため。  
  
   
  
## Examples  
 次のコード例は、URI のエスケープ解除し、そのいずれかのプラス記号 (「+」) には、スペースに変換します。  
  
 [!code-csharp[NCLUriExamples#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stringToUnescape" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Uri.EscapeDataString(System.String)" />
        <altmember cref="M:System.Uri.EscapeUriString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UriSchemeFile">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeFile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeFile" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeFile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeFile As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeFile;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI がファイルを指すポインターであることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework version 1.1 で、"`file:///path`「に変換された URI」`file:/path`"です。 バージョン 2.0 は修正されています。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeFile>です。  
  
 [!code-cpp[NCLUriExamples#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#10)]
 [!code-csharp[NCLUriExamples#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#10)]
 [!code-vb[NCLUriExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeFtp">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeFtp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeFtp" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeFtp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeFtp As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeFtp;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル転送プロトコル (FTP: File Transfer Protocol) 経由で URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeFtp>です。  
  
 [!code-cpp[NCLUriExamples#15](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#15)]
 [!code-csharp[NCLUriExamples#15](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#15)]
 [!code-vb[NCLUriExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeGopher">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeGopher;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeGopher" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeGopher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeGopher As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeGopher;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gopher プロトコル経由で URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeGopher>です。  
  
 [!code-cpp[NCLUriExamples#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#14)]
 [!code-csharp[NCLUriExamples#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#14)]
 [!code-vb[NCLUriExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeHttp">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeHttp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeHttp" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeHttp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeHttp As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeHttp;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP (Hypertext Transfer Protocol) 経由で URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeHttp>です。  
  
 [!code-cpp[NCLUriExamples#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#9)]
 [!code-csharp[NCLUriExamples#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#9)]
 [!code-vb[NCLUriExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeHttps">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeHttps;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeHttps" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeHttps" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeHttps As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeHttps;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTPS (Secure Hypertext Transfer Protocol) 経由で URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeHttps>です。  
  
 [!code-cpp[NCLUriExamples#16](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#16)]
 [!code-csharp[NCLUriExamples#16](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#16)]
 [!code-vb[NCLUriExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeMailto">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeMailto;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeMailto" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeMailto" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeMailto As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeMailto;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI が電子メール アドレスであり、SMTP (Simple Mail Transport Protocol) 経由でこの URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeMailto>です。  
  
 [!code-cpp[NCLUriExamples#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#11)]
 [!code-csharp[NCLUriExamples#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#11)]
 [!code-vb[NCLUriExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeNetPipe">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeNetPipe;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeNetPipe" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeNetPipe" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeNetPipe As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeNetPipe;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows Communication Foundation (WCF) によって使用される NetPipe スキームを通じて URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeNetTcp">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeNetTcp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeNetTcp" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeNetTcp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeNetTcp As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeNetTcp;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows Communication Foundation (WCF) によって使用される NetTcp スキームを通じて URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeNews">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeNews;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeNews" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeNews" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeNews As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeNews;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI がインターネット ニュース グループであり、この URI へ NNTP (Network News Transport Protocol) 経由でアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeNews>です。  
  
 [!code-cpp[NCLUriExamples#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#12)]
 [!code-csharp[NCLUriExamples#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#12)]
 [!code-vb[NCLUriExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeNntp">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeNntp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeNntp" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeNntp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemeNntp As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemeNntp;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI がインターネット ニュース グループであり、この URI へ NNTP (Network News Transport Protocol) 経由でアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 NNTP<xref:System.Uri>解析エラーで .NET Framework version 1.1 が修正されたことです。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeNntp>です。  
  
 [!code-cpp[NCLUriExamples#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#13)]
 [!code-csharp[NCLUriExamples#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#13)]
 [!code-vb[NCLUriExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserEscaped">
      <MemberSignature Language="C#" Value="public bool UserEscaped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UserEscaped" />
      <MemberSignature Language="DocId" Value="P:System.Uri.UserEscaped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserEscaped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UserEscaped { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Uri" /> インスタンスの作成前に、URI 文字列が完全にエスケープされたことを示します。</summary>
        <value>
          <see cref="T:System.Boolean" /> インスタンスの作成時に <see langword="true" /> パラメーターが <paramref name="dontEscape" /> に設定されている場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri.UserEscaped%2A>プロパティに設定されている`true`を作成する、文字列が使用することを示すために、<xref:System.Uri>前に、コンス トラクターに渡されたインスタンスが完全にエスケープです。 つまり、`dontEscape`コンス トラクターの呼び出しのパラメーターがに設定された`true`です。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンス化し、かどうかが完全にエスケープが作成されたときを判断します。  
  
 [!code-cpp[NCLUriExamples#18](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#18)]
 [!code-csharp[NCLUriExamples#18](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#18)]
 [!code-vb[NCLUriExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserInfo">
      <MemberSignature Language="C#" Value="public string UserInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserInfo" />
      <MemberSignature Language="DocId" Value="P:System.Uri.UserInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserInfo As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserInfo { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した URI に関連付けられているユーザー名、パスワードなどのユーザー固有の情報を取得します。</summary>
        <value>URI に関連付けられたユーザー情報を格納する <see cref="T:System.String" />。 戻り値には、URI のユーザー情報部分の区切り記号として予約されている '@' 文字が含まれません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される値は、「ユーザー名: パスワード」の形式では通常です。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Uri>インスタンスし、ユーザー情報をコンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples#18](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#18)]
 [!code-csharp[NCLUriExamples#18](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#18)]
 [!code-vb[NCLUriExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>