<Type Name="Exception" FullName="System.Exception">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3cd7feda3f45d855645a0e6ecb699bd9f871df9" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34254662" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Exception : System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit Exception extends System.Object implements class System.Runtime.InteropServices._Exception, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Exception" />
  <TypeSignature Language="VB.NET" Value="Public Class Exception&#xA;Implements _Exception, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Exception : System::Runtime::InteropServices::_Exception, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Exception</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Exception))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="870bd-101">アプリケーションの実行中に発生したエラーを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="870bd-101">Represents errors that occur during application execution.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-102">このクラスは、すべての例外の基底クラスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-102">This class is the base class for all exceptions.</span></span> <span data-ttu-id="870bd-103">エラーが発生するときに、システムまたは現在実行中のアプリケーションのいずれかにによって報告エラーに関する情報を含む例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="870bd-103">When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.</span></span> <span data-ttu-id="870bd-104">例外がスローされた後に、アプリケーションまたは既定の例外ハンドラーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-104">After an exception is thrown, it is handled by the application or by the default exception handler.</span></span>  
  
 <span data-ttu-id="870bd-105">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="870bd-105">In this section:</span></span>  
  
 <span data-ttu-id="870bd-106">[エラーと例外](#Errors) </span><span class="sxs-lookup"><span data-stu-id="870bd-106">[Errors and exceptions](#Errors) </span></span>  
 <span data-ttu-id="870bd-107">[Try/catch ブロック](#TryCatch) </span><span class="sxs-lookup"><span data-stu-id="870bd-107">[Try/catch blocks](#TryCatch) </span></span>  
 <span data-ttu-id="870bd-108">[例外の種類に関する機能](#Features) </span><span class="sxs-lookup"><span data-stu-id="870bd-108">[Exception type features](#Features) </span></span>  
 <span data-ttu-id="870bd-109">[例外クラスのプロパティ](#Properties) </span><span class="sxs-lookup"><span data-stu-id="870bd-109">[Exception class properties](#Properties) </span></span>  
 <span data-ttu-id="870bd-110">[パフォーマンスに関する考慮事項](#Performance) </span><span class="sxs-lookup"><span data-stu-id="870bd-110">[Performance considerations](#Performance) </span></span>  
 <span data-ttu-id="870bd-111">[例外を再スロー](#Rethrow) </span><span class="sxs-lookup"><span data-stu-id="870bd-111">[Re-throwing an exception](#Rethrow) </span></span>  
 <span data-ttu-id="870bd-112">[標準の例外を選択します。](#Standard) </span><span class="sxs-lookup"><span data-stu-id="870bd-112">[Choosing standard exceptions](#Standard) </span></span>  
 [<span data-ttu-id="870bd-113">カスタム例外を実装します。</span><span class="sxs-lookup"><span data-stu-id="870bd-113">Implementing custom exceptions</span></span>](#Custom)  
  
<a name="Errors"></a>   
## <a name="errors-and-exceptions"></a><span data-ttu-id="870bd-114">エラーと例外</span><span class="sxs-lookup"><span data-stu-id="870bd-114">Errors and exceptions</span></span>  
 <span data-ttu-id="870bd-115">実行時エラーは、さまざまな理由で発生します。</span><span class="sxs-lookup"><span data-stu-id="870bd-115">Run-time errors can occur for a variety of reasons.</span></span> <span data-ttu-id="870bd-116">ただし、すべてのエラーは、コードの例外として処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-116">However, not all errors should be handled as exceptions in your code.</span></span> <span data-ttu-id="870bd-117">ここでは、実行時とそれらに応答する適切な方法で発生する可能性があるエラーのいくつかのカテゴリです。</span><span class="sxs-lookup"><span data-stu-id="870bd-117">Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.</span></span>  
  
-   <span data-ttu-id="870bd-118">**使用状況のエラー。**</span><span class="sxs-lookup"><span data-stu-id="870bd-118">**Usage errors.**</span></span> <span data-ttu-id="870bd-119">使用法のエラーでは、エラーのために、例外が発生するプログラム ロジックを表します。</span><span class="sxs-lookup"><span data-stu-id="870bd-119">A usage error represents an error in program logic that can result in an exception.</span></span> <span data-ttu-id="870bd-120">ただし、エラーは、例外処理ではなく、欠陥のあるコードを変更することで対処する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-120">However, the error should be addressed not through exception handling but by modifying the faulty code.</span></span> <span data-ttu-id="870bd-121">オーバーライドなど、<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>次の例のメソッドと見なします、`obj`引数は null 以外に常にあります。</span><span class="sxs-lookup"><span data-stu-id="870bd-121">For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method in the following example assumes that the `obj` argument must always be non-null.</span></span>  
  
     [!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]
     [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]  
  
     <span data-ttu-id="870bd-122"><xref:System.NullReferenceException>結果生成される例外と`obj`は`null`ソース コードを呼び出す前に null を明示的にテストを変更することで排除できる、 <xref:System.Object.Equals%2A?displayProperty=nameWithType> override キーワードと再コンパイルします。</span><span class="sxs-lookup"><span data-stu-id="870bd-122">The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=nameWithType> override and then re-compiling.</span></span> <span data-ttu-id="870bd-123">次の例には、処理を修正済みのソース コードが含まれています、`null`引数。</span><span class="sxs-lookup"><span data-stu-id="870bd-123">The following example contains the corrected source code that handles a `null` argument.</span></span>  
  
     [!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]
     [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]  
  
     <span data-ttu-id="870bd-124">使用状況のエラーの例外処理を使用する代わりに使用することができます、<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>デバッグ ビルドで、使用状況のエラーを識別するメソッドと<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>デバッグとリリースの両方で使用状況のエラーを識別するメソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="870bd-124">Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method to identify usage errors in both debug and release builds.</span></span> <span data-ttu-id="870bd-125">詳細については、次を参照してください。[マネージ コードのアサーション](/visualstudio/debugger/assertions-in-managed-code)です。</span><span class="sxs-lookup"><span data-stu-id="870bd-125">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
-   <span data-ttu-id="870bd-126">**プログラムのエラーです。**</span><span class="sxs-lookup"><span data-stu-id="870bd-126">**Program errors.**</span></span> <span data-ttu-id="870bd-127">プログラム エラーは、必ずしもバグのないコードを記述して回避できない実行時エラーです。</span><span class="sxs-lookup"><span data-stu-id="870bd-127">A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.</span></span>  
  
     <span data-ttu-id="870bd-128">場合によっては、プログラム エラーが必要"または"日常的なエラーが発生を反映することがあります。</span><span class="sxs-lookup"><span data-stu-id="870bd-128">In some cases, a program error may reflect an expected or routine error condition.</span></span> <span data-ttu-id="870bd-129">この場合、代わりに、操作を再試行してくださいプログラム エラーを処理する例外処理を使用しないでくださいする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-129">In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.</span></span> <span data-ttu-id="870bd-130">たとえば、ユーザーが特定の形式で日付を入力すると予想される場合を解析できます日付文字列を呼び出して、<xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>を返すメソッド、<xref:System.Boolean>を使用する代わりに、解析操作が成功したかどうかを示す値、<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>をスローするメソッド、<xref:System.FormatException>例外日付文字列に変換できない場合、<xref:System.DateTime>値。</span><span class="sxs-lookup"><span data-stu-id="870bd-130">For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="870bd-131">同様に、ユーザーは、存在しないファイルを開くしようとすると、まず呼び出せます、<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>ファイルが存在し、その場合は、作成するかどうかユーザーに確認するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="870bd-131">Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.</span></span>  
  
     <span data-ttu-id="870bd-132">それ以外の場合に、プログラム エラーは、コードで処理できる予期しないエラーが発生を反映します。</span><span class="sxs-lookup"><span data-stu-id="870bd-132">In other cases, a program error reflects an unexpected error condition that can be handled in your code.</span></span> <span data-ttu-id="870bd-133">たとえば、ファイルが存在することを確認したら、場合でも可能性がある前に削除が開くことができます、または破損する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-133">For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.</span></span> <span data-ttu-id="870bd-134">その場合は、インスタンス化してファイルを開こうとして、<xref:System.IO.StreamReader>オブジェクトまたは通話、<xref:System.IO.File.Open%2A>メソッドがスローする可能性が、<xref:System.IO.FileNotFoundException>例外。</span><span class="sxs-lookup"><span data-stu-id="870bd-134">In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception.</span></span> <span data-ttu-id="870bd-135">このような場合は、例外、エラーから復旧する処理を使用してください。</span><span class="sxs-lookup"><span data-stu-id="870bd-135">In these cases, you should use exception handling to recover from the error.</span></span>  
  
-   <span data-ttu-id="870bd-136">**システム障害。**</span><span class="sxs-lookup"><span data-stu-id="870bd-136">**System failures.**</span></span> <span data-ttu-id="870bd-137">システム障害は、プログラムでは意味のある方法で処理できない実行時エラーです。</span><span class="sxs-lookup"><span data-stu-id="870bd-137">A system failure is a run-time error that cannot be handled programmatically in a meaningful way.</span></span> <span data-ttu-id="870bd-138">たとえば、任意のメソッドをスローできます、<xref:System.OutOfMemoryException>例外の場合は、共通言語ランタイムは、追加のメモリを割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="870bd-138">For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory.</span></span> <span data-ttu-id="870bd-139">通常、システム エラーでは、例外処理を使用して処理されていません。</span><span class="sxs-lookup"><span data-stu-id="870bd-139">Ordinarily, system failures are not handled by using exception handling.</span></span> <span data-ttu-id="870bd-140">代わりに、できる場合がありますなどを使用してイベント<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>を呼び出すと、<xref:System.Environment.FailFast%2A?displayProperty=nameWithType>例外情報を記録し、アプリケーションが終了する前に、エラーのユーザーに通知するメソッド。</span><span class="sxs-lookup"><span data-stu-id="870bd-140">Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> and call the <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> method to log exception information and notify the user of the failure before the application terminates.</span></span>  
  
<a name="TryCatch"></a>   
## <a name="trycatch-blocks"></a><span data-ttu-id="870bd-141">Try/catch ブロック</span><span class="sxs-lookup"><span data-stu-id="870bd-141">Try/catch blocks</span></span>  
 <span data-ttu-id="870bd-142">共通言語ランタイムが例外として、オブジェクトの表現とプログラム コードおよび例外処理にコードの分離に基づいている例外処理モデルを提供`try`ブロックと`catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="870bd-142">The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks.</span></span> <span data-ttu-id="870bd-143">1 つまたは複数があることができます`catch`ブロックする場合に、それぞれ特定の種類の例外、または別のブロックより特定な例外をキャッチする 1 つのブロックを処理するよう設計されています。</span><span class="sxs-lookup"><span data-stu-id="870bd-143">There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</span></span>  
  
 <span data-ttu-id="870bd-144">内で、コードを配置する必要があります、アプリケーションでは、アプリケーション コードのブロックの実行中に発生する例外を処理する場合、`try`ステートメントと呼びます、`try`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="870bd-144">If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block.</span></span> <span data-ttu-id="870bd-145">によってスローされる例外を処理するアプリケーション コード、`try`ブロック内の配置、`catch`ステートメントと呼びます、`catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="870bd-145">Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block.</span></span> <span data-ttu-id="870bd-146">0 個以上`catch`ブロックが関連付けられている、`try`ブロック、および各`catch`ブロックには、処理する例外の種類を決定する型のフィルターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="870bd-146">Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.</span></span>  
  
 <span data-ttu-id="870bd-147">例外が発生する、`try`ブロック、システムは、関連付けられている検索`catch`が見つかるまで、アプリケーション コードに現れる順序内のブロック、`catch`例外を処理するブロック。</span><span class="sxs-lookup"><span data-stu-id="870bd-147">When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception.</span></span> <span data-ttu-id="870bd-148">A`catch`ブロック型の例外を処理`T`catch ブロックの型のフィルターを指定する場合`T`する種類のいずれかまたは`T`から派生します。</span><span class="sxs-lookup"><span data-stu-id="870bd-148">A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from.</span></span> <span data-ttu-id="870bd-149">システムが見つかると、最初の検索を停止した`catch`例外を処理するブロック。</span><span class="sxs-lookup"><span data-stu-id="870bd-149">The system stops searching after it finds the first `catch` block that handles the exception.</span></span> <span data-ttu-id="870bd-150">このため、アプリケーション コードで、`catch`前に、型を処理するブロックを指定する必要があります、`catch`このセクションの内容を次の例に示すように、その基本型を処理するブロック。</span><span class="sxs-lookup"><span data-stu-id="870bd-150">For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section.</span></span> <span data-ttu-id="870bd-151">処理する catch ブロック`System.Exception`最後に指定します。</span><span class="sxs-lookup"><span data-stu-id="870bd-151">A catch block that handles `System.Exception` is specified last.</span></span>  
  
 <span data-ttu-id="870bd-152">ない場合、`catch`に現在関連付けられているブロック`try`、例外、および現在のブロックの処理`try`内で他のブロックが入れ子になった`try`ブロックを現在の呼び出し、 `catch` [次へ] の外側に関連付けられているブロック`try`ブロックが検索されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-152">If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched.</span></span> <span data-ttu-id="870bd-153">ない場合は`catch`例外のブロックが見つかると、システムは、現在の呼び出し前の入れ子レベルを検索します。</span><span class="sxs-lookup"><span data-stu-id="870bd-153">If no `catch` block for the exception is found, the system searches previous nesting levels in the current call.</span></span> <span data-ttu-id="870bd-154">ない場合は`catch`ブロック、現在の呼び出しで例外が検出された、コール スタックに渡された例外および前のスタック フレームが検索、`catch`例外を処理するブロック。</span><span class="sxs-lookup"><span data-stu-id="870bd-154">If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception.</span></span> <span data-ttu-id="870bd-155">呼び出し履歴の検索では、例外が処理されたか、呼び出し履歴にフレームがなくなるまでを継続します。</span><span class="sxs-lookup"><span data-stu-id="870bd-155">The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.</span></span> <span data-ttu-id="870bd-156">検索することがなく、呼び出しスタックの一番上に達した場合、`catch`既定の例外ハンドラー、例外処理ブロックを処理し、アプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="870bd-156">If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.</span></span>  
  
<a name="Features"></a>   
## <a name="exception-type-features"></a><span data-ttu-id="870bd-157">例外の種類に関する機能</span><span class="sxs-lookup"><span data-stu-id="870bd-157">Exception type features</span></span>  
 <span data-ttu-id="870bd-158">例外の種類は、次の機能をサポートします。</span><span class="sxs-lookup"><span data-stu-id="870bd-158">Exception types support the following features:</span></span>  
  
-   <span data-ttu-id="870bd-159">エラーを説明する人が判読できるテキストです。</span><span class="sxs-lookup"><span data-stu-id="870bd-159">Human-readable text that describes the error.</span></span> <span data-ttu-id="870bd-160">例外が発生するときに、ランタイムは、問題を解決するのには、エラーの性質をユーザーに通知し、アクションを提案する使用可能なテキスト メッセージをします。</span><span class="sxs-lookup"><span data-stu-id="870bd-160">When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.</span></span> <span data-ttu-id="870bd-161">このテキスト メッセージが保持されている、<xref:System.Exception.Message%2A>例外オブジェクトのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-161">This text message is held in the <xref:System.Exception.Message%2A> property of the exception object.</span></span> <span data-ttu-id="870bd-162">例外オブジェクトの作成時に、その特定の例外の詳細を説明するコンス トラクターに文字列を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="870bd-162">During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.</span></span> <span data-ttu-id="870bd-163">コンス トラクターにエラー メッセージの引数が指定されていない場合は、既定のエラー メッセージが使用されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-163">If no error message argument is supplied to the constructor, the default error message is used.</span></span> <span data-ttu-id="870bd-164">詳細については、<xref:System.Exception.Message%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="870bd-164">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="870bd-165">例外がスローされたときに、呼び出し履歴の状態。</span><span class="sxs-lookup"><span data-stu-id="870bd-165">The state of the call stack when the exception was thrown.</span></span> <span data-ttu-id="870bd-166"><xref:System.Exception.StackTrace%2A>プロパティでは、コード内のエラーの発生場所を決定するのに使用できるスタック トレースを実行します。</span><span class="sxs-lookup"><span data-stu-id="870bd-166">The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code.</span></span> <span data-ttu-id="870bd-167">スタック トレースには、呼び出されたすべてのメソッドと呼び出しが行われる場所のソース ファイル内の行番号が一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-167">The stack trace lists all the called methods and the line numbers in the source file where the calls are made.</span></span>  
  
<a name="Properties"></a>   
## <a name="exception-class-properties"></a><span data-ttu-id="870bd-168">例外クラスのプロパティ</span><span class="sxs-lookup"><span data-stu-id="870bd-168">Exception class properties</span></span>  
 <span data-ttu-id="870bd-169"><xref:System.Exception>クラスには、さまざまなコードの場所、種類、ヘルプ ファイル、および例外の原因の識別に役立つプロパティが含まれています: <xref:System.Exception.StackTrace%2A>、 <xref:System.Exception.InnerException%2A>、 <xref:System.Exception.Message%2A>、 <xref:System.Exception.HelpLink%2A>、 <xref:System.Exception.HResult%2A>、 <xref:System.Exception.Source%2A>、 <xref:System.Exception.TargetSite%2A>、および<xref:System.Exception.Data%2A>です。</span><span class="sxs-lookup"><span data-stu-id="870bd-169">The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.</span></span>  
  
 <span data-ttu-id="870bd-170">2 つ以上の例外と因果関係が存在する場合に、<xref:System.Exception.InnerException%2A>プロパティは、この情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="870bd-170">When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information.</span></span> <span data-ttu-id="870bd-171">この内部例外への応答では、外側の例外はスローします。</span><span class="sxs-lookup"><span data-stu-id="870bd-171">The outer exception is thrown in response to this inner exception.</span></span> <span data-ttu-id="870bd-172">外側の例外を処理するコードは、エラーより適切に処理前の内部例外からの情報を使用できます。</span><span class="sxs-lookup"><span data-stu-id="870bd-172">The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.</span></span> <span data-ttu-id="870bd-173">例外に関する補足情報は、キーと値のペアのコレクションとして格納できます、<xref:System.Exception.Data%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-173">Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.</span></span>  
  
 <span data-ttu-id="870bd-174">例外オブジェクトの作成時に、コンス トラクターに渡されるエラー メッセージ文字列をローカライズするかを使用して、リソース ファイルから指定することができます、<xref:System.Resources.ResourceManager>クラスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-174">The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class.</span></span> <span data-ttu-id="870bd-175">ローカライズされたリソースの詳細については、次を参照してください。、[サテライト アセンブリの作成](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)と[パッケージ化と配置リソース](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="870bd-175">For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.</span></span>  
  
 <span data-ttu-id="870bd-176">例外が発生した理由に関する詳細情報をユーザーに提供する、<xref:System.Exception.HelpLink%2A>プロパティはヘルプ ファイルへの URL (または URN) を保持できます。</span><span class="sxs-lookup"><span data-stu-id="870bd-176">To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.</span></span>  
  
 <span data-ttu-id="870bd-177"><xref:System.Exception>クラスは、値が 0x80131500 HRESULT COR_E_EXCEPTION を使用します。</span><span class="sxs-lookup"><span data-stu-id="870bd-177">The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</span></span>  
  
 <span data-ttu-id="870bd-178">インスタンスの初期プロパティ値の一覧については、<xref:System.Exception>クラスを参照してください、<xref:System.Exception.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="870bd-178">For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.</span></span>  
  
<a name="Performance"></a>   
## <a name="performance-considerations"></a><span data-ttu-id="870bd-179">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="870bd-179">Performance considerations</span></span>  
 <span data-ttu-id="870bd-180">スローまたは例外を処理して、膨大量のシステム リソースと実行時間を消費します。</span><span class="sxs-lookup"><span data-stu-id="870bd-180">Throwing or handling an exception consumes a significant amount of system resources and execution time.</span></span> <span data-ttu-id="870bd-181">予測可能なイベントを処理したり、フロー制御が、真に異常な状態の処理にのみ例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="870bd-181">Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.</span></span> <span data-ttu-id="870bd-182">たとえば、場合によっては、クラス ライブラリを開発している場合などに、有効なパラメーターで呼び出されるメソッドを想定しているため、メソッドの引数が、無効な場合に例外をスローする適切なは。</span><span class="sxs-lookup"><span data-stu-id="870bd-182">For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.</span></span> <span data-ttu-id="870bd-183">無効なメソッドに、引数、使用エラーの結果ではない場合に、何か異常が発生したことを意味します。</span><span class="sxs-lookup"><span data-stu-id="870bd-183">An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.</span></span> <span data-ttu-id="870bd-184">逆は例外をスローしない場合、ユーザー入力が正しくないため、場合によっては無効なデータを入力するユーザーを想定できます。</span><span class="sxs-lookup"><span data-stu-id="870bd-184">Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.</span></span> <span data-ttu-id="870bd-185">代わりに、ユーザーが有効な入力を入力できるように再試行メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="870bd-185">Instead, provide a retry mechanism so users can enter valid input.</span></span> <span data-ttu-id="870bd-186">また、使用状況のエラーを処理する例外を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-186">Nor should you use exceptions to handle usage errors.</span></span> <span data-ttu-id="870bd-187">代わりに、[アサーション](/visualstudio/debugger/assertions-in-managed-code)を特定し、使用状況のエラーを修正します。</span><span class="sxs-lookup"><span data-stu-id="870bd-187">Instead, use [assertions](/visualstudio/debugger/assertions-in-managed-code) to identify and correct usage errors.</span></span>  
  
 <span data-ttu-id="870bd-188">さらは例外をスローしないリターン コードが十分です。例外にリターン コードを変換できません。定期的に catch 例外、無視するか、および処理を続行します。</span><span class="sxs-lookup"><span data-stu-id="870bd-188">In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.</span></span>  
  
<a name="Rethrow"></a>   
## <a name="re-throwing-an-exception"></a><span data-ttu-id="870bd-189">例外の再スロー</span><span class="sxs-lookup"><span data-stu-id="870bd-189">Re-throwing an exception</span></span>  
 <span data-ttu-id="870bd-190">多くの場合、例外ハンドラーだけでは、呼び出し元へ例外を渡します。</span><span class="sxs-lookup"><span data-stu-id="870bd-190">In many cases, an exception handler simply wants to pass the exception on to the caller.</span></span> <span data-ttu-id="870bd-191">これは、多くの場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="870bd-191">This most often occurs in:</span></span>  
  
-   <span data-ttu-id="870bd-192">さらに、.NET Framework クラス ライブラリやその他のクラス ライブラリ内のメソッドへの呼び出しをラップするクラス ライブラリです。</span><span class="sxs-lookup"><span data-stu-id="870bd-192">A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.</span></span>  
  
-   <span data-ttu-id="870bd-193">アプリケーションまたは致命的な例外が発生するライブラリ。</span><span class="sxs-lookup"><span data-stu-id="870bd-193">An application or library that encounters a fatal exception.</span></span> <span data-ttu-id="870bd-194">例外ハンドラーは、例外を記録し、例外を再スローできます。</span><span class="sxs-lookup"><span data-stu-id="870bd-194">The exception handler can log the exception and then re-throw the exception.</span></span>  
  
 <span data-ttu-id="870bd-195">例外を再スローすることをお勧めは単に使用する、[スロー](~/docs/csharp/language-reference/keywords/throw.md) (C#) ステートメント、および[スロー](~/docs/visual-basic/language-reference/statements/throw-statement.md)式を含めずに、Visual Basic でのステートメント。</span><span class="sxs-lookup"><span data-stu-id="870bd-195">The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression.</span></span> <span data-ttu-id="870bd-196">これにより、呼び出し元に例外が伝達されたときに、すべての呼び出し履歴情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="870bd-196">This ensures that all call stack information is preserved when the exception is propagated to the caller.</span></span> <span data-ttu-id="870bd-197">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-197">The following example illustrates this.</span></span> <span data-ttu-id="870bd-198">文字列の拡張メソッドで`FindOccurrences`、1 つまたは複数の呼び出しをラップ<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>事前にその引数を検証することがなくです。</span><span class="sxs-lookup"><span data-stu-id="870bd-198">A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> without validating its arguments beforehand.</span></span>  
  
 [!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]
 [!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]  
  
 <span data-ttu-id="870bd-199">呼び出し元を呼び出して`FindOccurrences`2 回クリックします。</span><span class="sxs-lookup"><span data-stu-id="870bd-199">A caller then calls `FindOccurrences` twice.</span></span> <span data-ttu-id="870bd-200">2 つ目の呼び出しで`FindOccurrences`、呼び出し元のパス、`null`検索文字列として、どのケース、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>をスローするメソッド、<xref:System.ArgumentNullException>例外。</span><span class="sxs-lookup"><span data-stu-id="870bd-200">In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method to throw an <xref:System.ArgumentNullException> exception.</span></span> <span data-ttu-id="870bd-201">によってこの例外が処理される、`FindOccurrences`メソッドを呼び出し元に渡されたバックします。</span><span class="sxs-lookup"><span data-stu-id="870bd-201">This exception is handled by the `FindOccurrences` method and passed back to the caller.</span></span> <span data-ttu-id="870bd-202">式のない throw ステートメントを使用するため、例からの出力は、呼び出し履歴が保持されることを示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-202">Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.</span></span>  
  
 [!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]
 [!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]  
  
 <span data-ttu-id="870bd-203">これに対してを使用して、例外が再スローされた場合、</span><span class="sxs-lookup"><span data-stu-id="870bd-203">In contrast, if the exception is re-thrown by using the</span></span>  
  
```csharp  
throw e  
```  
  
```vb  
Throw e  
```  
  
 <span data-ttu-id="870bd-204">ステートメントでは、完全なコール スタックが維持されないと、例には、次の出力が生成します。</span><span class="sxs-lookup"><span data-stu-id="870bd-204">statement, the full call stack is not preserved, and the example would generate the following output:</span></span>  
  
```Output  
  
'a' occurs at the following character positions: 4, 7, 15  
  
An exception (ArgumentNullException) occurred.  
Message:  
   Value cannot be null.  
Parameter name: value  
  
Stack Trace:  
      at Library.FindOccurrences(String s, String f)  
   at Example.Main()  
  
```  
  
 <span data-ttu-id="870bd-205">少し複雑になる代替手段は、新しい例外をスローして、内部例外の元の例外のコール スタック情報を保持するためにです。</span><span class="sxs-lookup"><span data-stu-id="870bd-205">A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.</span></span> <span data-ttu-id="870bd-206">呼び出し元は、新しい例外を使用してできます<xref:System.Exception.InnerException%2A>スタック フレームと、元の例外に関する他の情報を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-206">The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception.</span></span> <span data-ttu-id="870bd-207">この場合は、throw ステートメントは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="870bd-207">In this case, the throw statement is:</span></span>  
  
 [!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]
 [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]  
  
 <span data-ttu-id="870bd-208">知っておく、例外を処理するユーザー コードには、<xref:System.Exception.InnerException%2A>プロパティは、例外ハンドラーを次に示すように、元の例外に関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="870bd-208">The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.</span></span>  
  
 [!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]
 [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]  
  
<a name="Standard"></a>   
## <a name="choosing-standard-exceptions"></a><span data-ttu-id="870bd-209">標準の例外を選択します。</span><span class="sxs-lookup"><span data-stu-id="870bd-209">Choosing standard exceptions</span></span>  
 <span data-ttu-id="870bd-210">例外をスローした場合は、カスタム例外を実装する代わりに、.NET Framework で多くの場合、既存の例外の種類を使用できます。</span><span class="sxs-lookup"><span data-stu-id="870bd-210">When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.</span></span> <span data-ttu-id="870bd-211">これら 2 つの条件下で、標準の例外の種類を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-211">You should use a standard exception type under these two conditions:</span></span>  
  
-   <span data-ttu-id="870bd-212">使用法のエラーによって発生した例外をスローした (つまり、エラーのために、メソッドを呼び出し元が開発者によってなされたプログラム ロジックによって)。</span><span class="sxs-lookup"><span data-stu-id="870bd-212">You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).</span></span> <span data-ttu-id="870bd-213">通常は例外をスローするよう<xref:System.ArgumentException>、 <xref:System.ArgumentNullException>、 <xref:System.InvalidOperationException>、または<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="870bd-213">Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="870bd-214">開発者が修正できるように、例外オブジェクトをインスタンス化すると、エラーが記述する必要がある場合は例外オブジェクトのコンス トラクターに指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="870bd-214">The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.</span></span> <span data-ttu-id="870bd-215">詳細については、<xref:System.Exception.Message%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="870bd-215">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="870bd-216">既存の .NET Framework の例外で呼び出し元に通信できるエラーを処理します。</span><span class="sxs-lookup"><span data-stu-id="870bd-216">You are handling an error that can be communicated to the caller with an existing .NET Framework exception.</span></span> <span data-ttu-id="870bd-217">可能な最も派生例外をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-217">You should throw the most derived exception possible.</span></span> <span data-ttu-id="870bd-218">たとえば、メソッドは、列挙型の有効なメンバーである引数を必要とする場合をスローする、 <xref:System.ComponentModel.InvalidEnumArgumentException> (最も派生クラス) ではなく、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="870bd-218">For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="870bd-219">次の表は、一般的な例外の種類と条件にするをスローするには、一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-219">The following table lists common exception types and the conditions under which you would throw them.</span></span>  
  
|<span data-ttu-id="870bd-220">例外</span><span class="sxs-lookup"><span data-stu-id="870bd-220">Exception</span></span>|<span data-ttu-id="870bd-221">条件</span><span class="sxs-lookup"><span data-stu-id="870bd-221">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="870bd-222">メソッドに渡される null 以外の引数が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="870bd-222">A non-null argument that is passed to a method is invalid.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="870bd-223">メソッドに渡される引数は`null`します。</span><span class="sxs-lookup"><span data-stu-id="870bd-223">An argument that is passed to a method is `null`.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="870bd-224">引数は、有効な値の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="870bd-224">An argument is outside the range of valid values.</span></span>|  
|<xref:System.IO.DirectoryNotFoundException>|<span data-ttu-id="870bd-225">ディレクトリのパスの一部が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="870bd-225">Part of a directory path is not valid.</span></span>|  
|<xref:System.DivideByZeroException>|<span data-ttu-id="870bd-226">整数の分母または<xref:System.Decimal>除算演算が 0 です。</span><span class="sxs-lookup"><span data-stu-id="870bd-226">The denominator in an integer or <xref:System.Decimal> division operation is zero.</span></span>|  
|<xref:System.IO.DriveNotFoundException>|<span data-ttu-id="870bd-227">ドライブは使用できませんか、存在しません。</span><span class="sxs-lookup"><span data-stu-id="870bd-227">A drive is unavailable or does not exist.</span></span>|  
|<xref:System.IO.FileNotFoundException>|<span data-ttu-id="870bd-228">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="870bd-228">A file does not exist.</span></span>|  
|<xref:System.FormatException>|<span data-ttu-id="870bd-229">値から変換する文字列変換メソッドがなどの形式が適切ではありません`Parse`です。</span><span class="sxs-lookup"><span data-stu-id="870bd-229">A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`.</span></span>|  
|<xref:System.IndexOutOfRangeException>|<span data-ttu-id="870bd-230">インデックスでは、配列またはコレクションの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="870bd-230">An index is outside the bounds of an array or collection.</span></span>|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="870bd-231">メソッドの呼び出しがオブジェクトの現在の状態では無効です。</span><span class="sxs-lookup"><span data-stu-id="870bd-231">A method call is invalid in an object's current state.</span></span>|  
|<xref:System.Collections.Generic.KeyNotFoundException>|<span data-ttu-id="870bd-232">コレクション内のメンバーにアクセスするための指定したキーが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="870bd-232">The specified key for accessing a member in a collection cannot be found.</span></span>|  
|<xref:System.NotImplementedException>|<span data-ttu-id="870bd-233">メソッドまたは操作が実装されていません。</span><span class="sxs-lookup"><span data-stu-id="870bd-233">A method or operation is not implemented.</span></span>|  
|<xref:System.NotSupportedException>|<span data-ttu-id="870bd-234">メソッドまたは操作がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="870bd-234">A method or operation is not supported.</span></span>|  
|<xref:System.ObjectDisposedException>|<span data-ttu-id="870bd-235">破棄されたオブジェクトで操作を実行するとします。</span><span class="sxs-lookup"><span data-stu-id="870bd-235">An operation is performed on an object that has been disposed.</span></span>|  
|<xref:System.OverflowException>|<span data-ttu-id="870bd-236">算術演算、キャスト演算または変換操作は、オーバーフローが発生します。</span><span class="sxs-lookup"><span data-stu-id="870bd-236">An arithmetic, casting, or conversion operation results in an overflow.</span></span>|  
|<xref:System.IO.PathTooLongException>|<span data-ttu-id="870bd-237">パスまたはファイル名は、システム定義の最大長を超えています。</span><span class="sxs-lookup"><span data-stu-id="870bd-237">A path or file name exceeds the maximum system-defined length.</span></span>|  
|<xref:System.PlatformNotSupportedException>|<span data-ttu-id="870bd-238">操作は現在のプラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="870bd-238">The operation is not supported on the current platform.</span></span>|  
|<xref:System.RankException>|<span data-ttu-id="870bd-239">間違った次元数の配列は、メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-239">An array with the wrong number of dimensions is passed to a method.</span></span>|  
|<xref:System.TimeoutException>|<span data-ttu-id="870bd-240">操作に割り当てられた時間間隔の有効期限が切れています。</span><span class="sxs-lookup"><span data-stu-id="870bd-240">The time interval allotted to an operation has expired.</span></span>|  
|<xref:System.UriFormatException>|<span data-ttu-id="870bd-241">無効な Uniform Resource Identifier () が使用されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-241">An invalid Uniform Resource Identifier (URI) is used.</span></span>|  
  
<a name="Custom"></a>   
## <a name="implementing-custom-exceptions"></a><span data-ttu-id="870bd-242">カスタム例外を実装します。</span><span class="sxs-lookup"><span data-stu-id="870bd-242">Implementing custom exceptions</span></span>  
 <span data-ttu-id="870bd-243">次の場合、既存の .NET Framework の例外を使用して、エラー状態を処理するが不足です。</span><span class="sxs-lookup"><span data-stu-id="870bd-243">In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:</span></span>  
  
-   <span data-ttu-id="870bd-244">例外は、既存の .NET Framework の例外にマップできない一意なプログラム エラーを反映するとき。</span><span class="sxs-lookup"><span data-stu-id="870bd-244">When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.</span></span>  
  
-   <span data-ttu-id="870bd-245">例外が処理されるとは異なる既存の .NET Framework の例外または例外を適切な処理を必要とする場合は、同様の例外から明確する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-245">When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.</span></span> <span data-ttu-id="870bd-246">スローする場合など、<xref:System.ArgumentOutOfRangeException>対象の整数型の範囲外にある文字列の数値表現の解析中に例外を避けたいと、適切な指定していない呼び出し元からの結果の制限、エラー値、メソッドを呼び出すときに、同じ例外を使用します。</span><span class="sxs-lookup"><span data-stu-id="870bd-246">For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.</span></span>  
  
 <span data-ttu-id="870bd-247"><xref:System.Exception>クラスは、.NET Framework のすべての例外の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-247">The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework.</span></span> <span data-ttu-id="870bd-248">多くの派生クラスのメンバーの継承の動作に依存、 <xref:System.Exception> ; クラスのメンバーをオーバーライドしないで<xref:System.Exception>、またも一意のメンバーを定義しないでください。</span><span class="sxs-lookup"><span data-stu-id="870bd-248">Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.</span></span>  
  
 <span data-ttu-id="870bd-249">クラスを定義する、独自の例外。</span><span class="sxs-lookup"><span data-stu-id="870bd-249">To define your own exception class:</span></span>  
  
1.  <span data-ttu-id="870bd-250">継承するクラス定義<xref:System.Exception>です。</span><span class="sxs-lookup"><span data-stu-id="870bd-250">Define a class that inherits from <xref:System.Exception>.</span></span> <span data-ttu-id="870bd-251">必要に応じて、例外に関する追加情報を提供するクラスに必要なすべての一意のメンバーを定義します。</span><span class="sxs-lookup"><span data-stu-id="870bd-251">If necessary, define any unique members needed by your class to provide additional information about the exception.</span></span> <span data-ttu-id="870bd-252">たとえば、<xref:System.ArgumentException>クラスが含まれています、 <xref:System.ArgumentException.ParamName%2A> 、引数の例外の原因となったパラメーターの名前を指定するプロパティと<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>プロパティが含まれています、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A>タイムアウト間隔を示すプロパティ。</span><span class="sxs-lookup"><span data-stu-id="870bd-252">For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.</span></span>  
  
2.  <span data-ttu-id="870bd-253">必要に応じて、変更または変更する機能を持つ継承されたメンバーをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="870bd-253">If necessary, override any inherited members whose functionality you want to change or modify.</span></span> <span data-ttu-id="870bd-254">既存のほとんどの派生クラスのことに注意してください<xref:System.Exception>継承されたメンバーの動作は無効にします。</span><span class="sxs-lookup"><span data-stu-id="870bd-254">Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.</span></span>  
  
3.  <span data-ttu-id="870bd-255">カスタム例外オブジェクトをシリアル化可能かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="870bd-255">Determine whether your custom exception object is serializable.</span></span> <span data-ttu-id="870bd-256">シリアル化では、例外に関する情報を保存することができ、例外情報をサーバーとクライアント プロキシによってリモート処理コンテキスト内の共有を許可します。</span><span class="sxs-lookup"><span data-stu-id="870bd-256">Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.</span></span> <span data-ttu-id="870bd-257">例外オブジェクトをシリアル化可能にするを使用してマークする、<xref:System.SerializableAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="870bd-257">To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
4.  <span data-ttu-id="870bd-258">例外クラスのコンス トラクターを定義します。</span><span class="sxs-lookup"><span data-stu-id="870bd-258">Define the constructors of your exception class.</span></span> <span data-ttu-id="870bd-259">通常、例外クラスには、次のコンス トラクターの 1 つ以上が必要あります。</span><span class="sxs-lookup"><span data-stu-id="870bd-259">Typically, exception classes have one or more of the following constructors:</span></span>  
  
    -   <span data-ttu-id="870bd-260"><xref:System.Exception.%23ctor>、既定値を使用して、新しい例外オブジェクトのプロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="870bd-260"><xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.</span></span>  
  
    -   <span data-ttu-id="870bd-261"><xref:System.Exception.%23ctor%28System.String%29>、指定したエラー メッセージで新しい例外オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="870bd-261"><xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.</span></span>  
  
    -   <span data-ttu-id="870bd-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>を、指定したエラー メッセージと内部例外が新しい例外オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="870bd-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.</span></span>  
  
    -   <span data-ttu-id="870bd-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>、これは、`protected`からの新しい例外オブジェクトを初期化するコンス トラクターがデータをシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="870bd-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data.</span></span> <span data-ttu-id="870bd-264">例外オブジェクトをシリアル化可能なを選択した場合、このコンス トラクターを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-264">You should implement this constructor if you've chosen to make your exception object serializable.</span></span>  
  
 <span data-ttu-id="870bd-265">次の例では、カスタム例外クラスの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-265">The following example illustrates the use of a custom exception class.</span></span> <span data-ttu-id="870bd-266">定義する、`NotPrimeException`クライアントが最適ではない開始番号を指定して、素数のシーケンスを取得しようとするときにスローされる例外です。</span><span class="sxs-lookup"><span data-stu-id="870bd-266">It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.</span></span> <span data-ttu-id="870bd-267">例外は、新しいプロパティを定義`NonPrime`、以外の素数の例外を引き起こしたを返します。</span><span class="sxs-lookup"><span data-stu-id="870bd-267">The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception.</span></span> <span data-ttu-id="870bd-268">保護されているパラメーターなしのコンス トラクターおよびを持つコンス トラクターを実装するだけでなく<xref:System.Runtime.Serialization.SerializationInfo>と<xref:System.Runtime.Serialization.StreamingContext>シリアル化する場合のパラメーター、`NotPrimeException`クラスをサポートするために次の 3 つ追加のコンス トラクターを定義、`NonPrime`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-268">Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.</span></span>  <span data-ttu-id="870bd-269">各コンス トラクターは、値の非-素数を保持するだけでなく、基底クラス コンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="870bd-269">Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.</span></span> <span data-ttu-id="870bd-270">`NotPrimeException`もクラスには、<xref:System.SerializableAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="870bd-270">The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]
 [!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]  
  
 <span data-ttu-id="870bd-271">`PrimeNumberGenerator`次の例に示すようにクラスでは、エラトステネスの篩を使用して、2 から、クラス コンス トラクターへの呼び出しでクライアントによって指定された制限に含まれる素数のシーケンスを計算します。</span><span class="sxs-lookup"><span data-stu-id="870bd-271">The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.</span></span> <span data-ttu-id="870bd-272">`GetPrimesFrom`メソッドより大きいか等しい指定された制限を低くして、すべての素数を返しますが、スロー、`NotPrimeException`その下限の値が素数の数値ではない場合。</span><span class="sxs-lookup"><span data-stu-id="870bd-272">The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.</span></span>  
  
 [!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]
 [!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]  
  
 <span data-ttu-id="870bd-273">次の例は、次の 2 つの呼び出し、`GetPrimesFrom`メソッドと素数以外をアプリケーション ドメインの境界を越えるうちの 1 つです。</span><span class="sxs-lookup"><span data-stu-id="870bd-273">The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries.</span></span> <span data-ttu-id="870bd-274">どちらの場合、例外がスローされ、クライアント コード内で正常に処理します。</span><span class="sxs-lookup"><span data-stu-id="870bd-274">In both cases, the exception is thrown and successfully handled in client code.</span></span>  
  
 [!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]
 [!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="870bd-275">Windows ランタイムと [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="870bd-275">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="870bd-276">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]の[!INCLUDE[win8](~/includes/win8-md.md)]、非 .NET Framework のスタック フレームから例外が伝達されたときに、一部の例外情報は通常失われます。</span><span class="sxs-lookup"><span data-stu-id="870bd-276">In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.</span></span> <span data-ttu-id="870bd-277">以降で、[!INCLUDE[net_v451](~/includes/net-v451-md.md)]と[!INCLUDE[win81](~/includes/win81-md.md)]、共通言語ランタイムは引き続き、元の使用<xref:System.Exception>その例外は、非 .NET Framework のスタック フレームに変更された場合を除き、スローされたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="870bd-277">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-278">次の例で、`catch`処理に定義されているブロック<xref:System.ArithmeticException>エラーです。</span><span class="sxs-lookup"><span data-stu-id="870bd-278">The following example demonstrates a `catch` block that is defined to handle <xref:System.ArithmeticException> errors.</span></span> <span data-ttu-id="870bd-279">これは、`catch`ブロックも catches<xref:System.DivideByZeroException>エラー、ため<xref:System.DivideByZeroException>から派生<xref:System.ArithmeticException>があるとありません`catch`に対して明示的に定義されているブロック<xref:System.DivideByZeroException>エラーです。</span><span class="sxs-lookup"><span data-stu-id="870bd-279">This `catch` block also catches <xref:System.DivideByZeroException> errors, because <xref:System.DivideByZeroException> derives from <xref:System.ArithmeticException> and there is no `catch` block explicitly defined for <xref:System.DivideByZeroException> errors.</span></span>  
  
 [!code-cpp[CatchException#1](~/samples/snippets/cpp/VS_Snippets_CLR/CatchException/CPP/catchexception.cpp#1)]
 [!code-csharp[CatchException#1](~/samples/snippets/csharp/VS_Snippets_CLR/CatchException/CS/catchexception.cs#1)]
 [!code-vb[CatchException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CatchException/VB/catchexception.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-280">
            <see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-280">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="870bd-281">
            <see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-281">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-282">このコンストラクターは、新しいインスタンスの <xref:System.Exception.Message%2A> プロパティを初期化して、その値として、現在のシステムのカルチャを反映した、エラーを説明するシステム提供のメッセージを指定します。</span><span class="sxs-lookup"><span data-stu-id="870bd-282">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="870bd-283">すべての派生クラスでは、この既定のコンス トラクターを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-283">All the derived classes should provide this default constructor.</span></span> <span data-ttu-id="870bd-284"><xref:System.Exception> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-284">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="870bd-285">プロパティ</span><span class="sxs-lookup"><span data-stu-id="870bd-285">Property</span></span>|<span data-ttu-id="870bd-286">[値]</span><span class="sxs-lookup"><span data-stu-id="870bd-286">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="870bd-287">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="870bd-287">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="870bd-288">システム提供のローカライズされた説明。</span><span class="sxs-lookup"><span data-stu-id="870bd-288">A system-supplied localized description.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="870bd-289">次のコード例では、`Exception`定義済みのメッセージを使用します。</span><span class="sxs-lookup"><span data-stu-id="870bd-289">The following code example derives an `Exception` that uses a predefined message.</span></span> <span data-ttu-id="870bd-290">派生クラスと、ベースのパラメーターなしのコンス トラクターの使用をコードに示します`Exception`クラスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-290">The code demonstrates the use of the parameterless constructor for the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/new.cpp#1)]
 [!code-csharp[System.Exception.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/new.cs#1)]
 [!code-vb[System.Exception.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/new.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="870bd-291">エラーを説明するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-291">The message that describes the error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="870bd-292">指定したエラー メッセージを使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-292">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-293">このコンス トラクター、<xref:System.Exception.Message%2A>を使用して、新しいインスタンスのプロパティ、`message`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="870bd-293">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter.</span></span> <span data-ttu-id="870bd-294">場合、`message`パラメーターは`null`、これは、呼び出した場合と同じ、<xref:System.Exception.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="870bd-294">If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="870bd-295"><xref:System.Exception> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-295">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="870bd-296">プロパティ</span><span class="sxs-lookup"><span data-stu-id="870bd-296">Property</span></span>|<span data-ttu-id="870bd-297">[値]</span><span class="sxs-lookup"><span data-stu-id="870bd-297">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="870bd-298">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="870bd-298">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="870bd-299">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="870bd-299">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="870bd-300">次のコード例では、`Exception`特定の条件。</span><span class="sxs-lookup"><span data-stu-id="870bd-300">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="870bd-301">コードは、例をベースと派生クラスの両方について、パラメーターとして呼び出し元指定のメッセージを受け取るコンス トラクターの使用`Exception`クラスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-301">The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/news.cpp#2)]
 [!code-csharp[System.Exception.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/news.cs#2)]
 [!code-vb[System.Exception.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/news.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="870bd-302">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-302">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="870bd-303">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-303">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="870bd-304">シリアル化したデータを使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-304">Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-305">このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-305">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="870bd-306">詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)です。</span><span class="sxs-lookup"><span data-stu-id="870bd-306">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-307">次のコード例は、派生を定義シリアル化可能な`Exception`クラスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-307">The following code example defines a derived serializable `Exception` class.</span></span> <span data-ttu-id="870bd-308">コードは、0 による除算エラーを強制し、派生した例外を使用して、インスタンスを作成し、(<xref:System.Runtime.Serialization.SerializationInfo>、 <xref:System.Runtime.Serialization.StreamingContext>) コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="870bd-308">The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) constructor.</span></span> <span data-ttu-id="870bd-309">コードをファイルにインスタンスをシリアル化する、ファイルに、新しい例外をスローすることと、逆シリアル化し、キャッチして、例外のデータが表示されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-309">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="870bd-310">
            <paramref name="info" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-310">The <paramref name="info" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="870bd-311">クラス名が <see langword="null" /> であるか、<see cref="P:System.Exception.HResult" /> が 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-311">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="870bd-312">例外の原因を説明するエラー メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-312">The error message that explains the reason for the exception.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="870bd-313">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-313">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="870bd-314">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-314">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-315">前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照が格納されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-315">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="870bd-316"><xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。`Nothing` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は <xref:System.Exception.InnerException%2A>) を返します。</span><span class="sxs-lookup"><span data-stu-id="870bd-316">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="870bd-317"><xref:System.Exception> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-317">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="870bd-318">プロパティ</span><span class="sxs-lookup"><span data-stu-id="870bd-318">Property</span></span>|<span data-ttu-id="870bd-319">[値]</span><span class="sxs-lookup"><span data-stu-id="870bd-319">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="870bd-320">内部例外の参照。</span><span class="sxs-lookup"><span data-stu-id="870bd-320">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="870bd-321">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="870bd-321">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="870bd-322">次のコード例では、`Exception`特定の条件。</span><span class="sxs-lookup"><span data-stu-id="870bd-322">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="870bd-323">メッセージと内部例外、派生クラスと、ベースの両方のパラメーターとして受け取るコンス トラクターの使用をコードに示します`Exception`クラスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-323">The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/newsi.cpp#3)]
 [!code-csharp[System.Exception.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/newsi.cs#3)]
 [!code-vb[System.Exception.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/newsi.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Data" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::IDictionary ^ Data { System::Collections::IDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-324">例外に関する追加のユーザー定義情報を提供する、キー/値ペアのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-324">Gets a collection of key/value pairs that provide additional user-defined information about the exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="870bd-325">
            <see cref="T:System.Collections.IDictionary" /> インターフェイスを実装し、ユーザー定義のキー/値ペアのコレクションを格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-325">An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs.</span>
          </span>
          <span data-ttu-id="870bd-326">既定値は空のコレクションです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-326">The default is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-327">使用して、<xref:System.Collections.IDictionary?displayProperty=nameWithType>によって返されるオブジェクト、<xref:System.Exception.Data%2A>補助情報、例外に関連する格納および取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-327">Use the <xref:System.Collections.IDictionary?displayProperty=nameWithType> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception.</span></span> <span data-ttu-id="870bd-328">情報は、任意の数のユーザー定義のキー/値ペアの形式でです。</span><span class="sxs-lookup"><span data-stu-id="870bd-328">The information is in the form of an arbitrary number of user-defined key/value pairs.</span></span> <span data-ttu-id="870bd-329">各キー/値ペアの重要なコンポーネントが通常識別文字列、ペアの値のコンポーネントがどの型のオブジェクトを指定できます。</span><span class="sxs-lookup"><span data-stu-id="870bd-329">The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.</span></span>  
  
## <a name="keyvalue-pair-security"></a><span data-ttu-id="870bd-330">キー/値ペアのセキュリティ</span><span class="sxs-lookup"><span data-stu-id="870bd-330">Key/Value Pair Security</span></span>  
 <span data-ttu-id="870bd-331">によって返されるコレクションに格納されているキー/値ペアの<xref:System.Exception.Data%2A>プロパティは安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="870bd-331">The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure.</span></span> <span data-ttu-id="870bd-332">アプリケーションを呼び出すと、入れ子になった一連のルーチンの各ルーチンには、例外ハンドラーが含まれている場合、結果のコール スタックには、これらの例外ハンドラーの階層が含まれています。</span><span class="sxs-lookup"><span data-stu-id="870bd-332">If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.</span></span> <span data-ttu-id="870bd-333">下位レベルのルーチンは、例外をスローする場合呼び出しスタックの階層内のいずれかの上位レベルの例外ハンドラーの読み取りや他の例外ハンドラーによってコレクションに格納されているキー/値ペアを変更できます。</span><span class="sxs-lookup"><span data-stu-id="870bd-333">If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.</span></span> <span data-ttu-id="870bd-334">つまり、キー/値ペア内の情報が機密ではないことと、アプリケーションが、キー/値ペア内の情報が破損している場合に、正常に動作が保証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-334">This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.</span></span>  
  
## <a name="key-conflicts"></a><span data-ttu-id="870bd-335">キーの競合</span><span class="sxs-lookup"><span data-stu-id="870bd-335">Key Conflicts</span></span>  
 <span data-ttu-id="870bd-336">キーの競合は、別の例外ハンドラー、キー/値ペアにアクセスする同じキーを指定する場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="870bd-336">A key conflict occurs when different exception handlers specify the same key to access a key/value pair.</span></span> <span data-ttu-id="870bd-337">キーの競合の結果は、下位レベルの例外ハンドラーがより高いレベルの例外ハンドラーと通信できる誤ってされ、この通信微妙なプログラム エラーが発生する可能性がありますので、アプリケーションを開発する際に、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="870bd-337">Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.</span></span> <span data-ttu-id="870bd-338">ただし、注意が必要する場合は、アプリケーションを強化するためにキーの競合を使用できます。</span><span class="sxs-lookup"><span data-stu-id="870bd-338">However, if you are cautious you can use key conflicts to enhance your application.</span></span>  
  
## <a name="avoiding-key-conflicts"></a><span data-ttu-id="870bd-339">キーの競合の回避</span><span class="sxs-lookup"><span data-stu-id="870bd-339">Avoiding Key Conflicts</span></span>  
 <span data-ttu-id="870bd-340">キー/値ペアの一意のキーを生成する、名前付け規則を採用することでキーの競合を回避します。</span><span class="sxs-lookup"><span data-stu-id="870bd-340">Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.</span></span> <span data-ttu-id="870bd-341">たとえば、名前付け規則では、アプリケーションのピリオドで区切った名前で構成されるキーのペア、および一意の識別子の補足情報を提供するメソッドを生成可能性があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-341">For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.</span></span>  
  
 <span data-ttu-id="870bd-342">2 つのアプリケーションでは、という名前の製品と仕入先とすると各 Sales という名前のメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="870bd-342">Suppose two applications, named Products and Suppliers, each has a method named Sales.</span></span> <span data-ttu-id="870bd-343">製品のアプリケーションで Sales メソッドは、製品の識別番号 (在庫の単位または SKU の管理) を提供します。</span><span class="sxs-lookup"><span data-stu-id="870bd-343">The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.</span></span> <span data-ttu-id="870bd-344">サプライヤー アプリケーションで Sales メソッドは、id 番号、または、業者の SID を提供します。</span><span class="sxs-lookup"><span data-stu-id="870bd-344">The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.</span></span> <span data-ttu-id="870bd-345">そのため、この例の名前付け規則は、"Products.Sales.SKU"と"Suppliers.Sales.SID"キーを生成します。</span><span class="sxs-lookup"><span data-stu-id="870bd-345">Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</span></span>  
  
## <a name="exploiting-key-conflicts"></a><span data-ttu-id="870bd-346">キーの競合を悪用します。</span><span class="sxs-lookup"><span data-stu-id="870bd-346">Exploiting Key Conflicts</span></span>  
 <span data-ttu-id="870bd-347">キーの競合を悪用するには、処理を制御する 1 つ以上の特殊な既定のキーの存在を使用します。</span><span class="sxs-lookup"><span data-stu-id="870bd-347">Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.</span></span> <span data-ttu-id="870bd-348">たとえば、1 つのシナリオでは、呼び出しスタックの階層内の最上位レベルの例外ハンドラーは、下位レベルの例外ハンドラーによってスローされたすべての例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="870bd-348">Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.</span></span> <span data-ttu-id="870bd-349">特殊なキーを使用して、キー/値ペアが存在する場合、高度な例外ハンドラーの書式で残りのキー/値ペア、<xref:System.Collections.IDictionary>オブジェクトでは、いくつかの通常の方法で残りのキー/値ペアがそれ以外の場合、書式設定します。</span><span class="sxs-lookup"><span data-stu-id="870bd-349">If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</span></span>  
  
 <span data-ttu-id="870bd-350">今すぐたとえば、別のシナリオでは、コール スタックの階層の各レベルでの例外ハンドラーは、[次へ] の下位レベルの例外ハンドラーによってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="870bd-350">Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.</span></span> <span data-ttu-id="870bd-351">さらに、各例外ハンドラーがによって返されるコレクションを知っている、<xref:System.Exception.Data%2A>プロパティには、キーの既定のセットにアクセスできるキー/値ペアのセットが含まれています。</span><span class="sxs-lookup"><span data-stu-id="870bd-351">In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.</span></span>  
  
 <span data-ttu-id="870bd-352">各例外ハンドラーは、その例外ハンドラーに固有の情報に対応するキー/値ペアの値の構成を更新するのにキーの既定のセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="870bd-352">Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.</span></span> <span data-ttu-id="870bd-353">更新プロセスが完了したら、例外ハンドラーは上位の次の例外ハンドラーに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="870bd-353">After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.</span></span> <span data-ttu-id="870bd-354">最後に、最上位レベルの例外ハンドラーは、キー/値ペアにアクセスし、すべての下位レベルの例外ハンドラーからの統合の更新情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-354">Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-355">次の例で追加してを使用して情報を取得する方法、<xref:System.Exception.Data%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-355">The following example demonstrates how to add and retrieve information using the <xref:System.Exception.Data%2A> property.</span></span>  
  
 [!code-cpp[exception.data#1](~/samples/snippets/cpp/VS_Snippets_CLR/exception.data/CPP/data.cpp#1)]
 [!code-csharp[exception.data#1](~/samples/snippets/csharp/VS_Snippets_CLR/exception.data/CS/data.cs#1)]
 [!code-vb[exception.data#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/exception.data/VB/data.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.DictionaryEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetBaseException">
      <MemberSignature Language="C#" Value="public virtual Exception GetBaseException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Exception GetBaseException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetBaseException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBaseException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Exception ^ GetBaseException();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetBaseException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="870bd-356">派生クラスでオーバーライドされた場合、それ以後に発生する 1 つ以上の例外の主要な原因である <see cref="T:System.Exception" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-356">When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="870bd-357">例外のチェインでスローされた最初の例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-357">The first exception thrown in a chain of exceptions.</span>
          </span>
          <span data-ttu-id="870bd-358">現在の例外の <see cref="P:System.Exception.InnerException" /> プロパティが null 参照 (Visual Basic の場合は <see langword="Nothing" />) である場合、このプロパティは現在の例外を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-358">If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (<see langword="Nothing" /> in Visual Basic), this property returns the current exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-359">例外のチェインから成る例外のセットで参照されている例外の直接の結果として、チェーン内の各例外がスローされたようにその`InnerException`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-359">A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property.</span></span> <span data-ttu-id="870bd-360">チェーンの指定した場合、チェーン内の他のすべての例外の根本原因である 1 つだけ例外があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-360">For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.</span></span> <span data-ttu-id="870bd-361">この例外は、基本的な例外と呼ばれると、その`InnerException`プロパティには常に null 参照が含まれています。</span><span class="sxs-lookup"><span data-stu-id="870bd-361">This exception is called the base exception and its `InnerException` property always contains a null reference.</span></span>  
  
 <span data-ttu-id="870bd-362">すべての例外の例外のチェイン、`GetBaseException`メソッドは、同じオブジェクト (基本例外) を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-362">For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception).</span></span>  
  
 <span data-ttu-id="870bd-363">使用して、`GetBaseException`メソッド例外の根本原因を見つけるには、現在の例外と最初の例外の間で発生した例外に関する情報は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="870bd-363">Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-364">次のコード例では、2 つの派生を定義します`Exception`クラスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-364">The following code example defines two derived `Exception` classes.</span></span> <span data-ttu-id="870bd-365">例外を強制しの各派生クラスに再度スローします。</span><span class="sxs-lookup"><span data-stu-id="870bd-365">It forces an exception and then throws it again with each of the derived classes.</span></span> <span data-ttu-id="870bd-366">コードの使用方法を示します、`GetBaseException`元の例外を取得します。</span><span class="sxs-lookup"><span data-stu-id="870bd-366">The code shows the use of the `GetBaseException` method to retrieve the original exception.</span></span>  
  
 [!code-cpp[System.Exception.GetBaseException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CPP/getbaseexc.cpp#1)]
 [!code-csharp[System.Exception.GetBaseException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CS/getbaseexc.cs#1)]
 [!code-vb[System.Exception.GetBaseException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetBaseException/VB/getbaseexc.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="870bd-367">
            <para>
              <see langword="GetBaseException" />メソッドが例外の内容または形式に対する制御を必要とするクラスでオーバーライドします。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-367">
              <para>The <see langword="GetBaseException" /> method is overridden in classes that require control over the exception content or format.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="870bd-368">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-368">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="870bd-369">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-369">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="870bd-370">派生クラスでオーバーライドされた場合は、その例外に関する情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-370">When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-371">`GetObjectData` は、シリアル化する対象のすべての例外オブジェクト データを使用して、<xref:System.Runtime.Serialization.SerializationInfo> を設定します。</span><span class="sxs-lookup"><span data-stu-id="870bd-371">`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization.</span></span> <span data-ttu-id="870bd-372">逆シリアル化中に、ストリームで転送された `SerializationInfo` から例外が再構成されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-372">During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-373">次のコード例は、派生を定義シリアル化可能な`Exception`を実装するクラス`GetObjectData`軽微な変更するため 2 つのプロパティに対して、および、呼び出しの基本クラスをシリアル化を実行します。</span><span class="sxs-lookup"><span data-stu-id="870bd-373">The following code example defines a derived serializable `Exception` class that implements `GetObjectData`, which makes minor changes to two properties and then calls the base class to perform the serialization.</span></span> <span data-ttu-id="870bd-374">例は、0 による除算エラーを強制し、派生した例外のインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-374">The example forces a divide-by-0 error and then creates an instance of the derived exception.</span></span> <span data-ttu-id="870bd-375">コードをファイルにインスタンスをシリアル化する、ファイルに、新しい例外をスローすることと、逆シリアル化し、キャッチして、例外のデータが表示されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-375">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="870bd-376">
            <paramref name="info" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-376">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="870bd-377">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-377">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="870bd-378">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-378">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="870bd-379">現在のインスタンスのランタイム型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-379">Gets the runtime type of the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="870bd-380">現在のインスタンスの正確なランタイム型を表す <see cref="T:System.Type" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-380">A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-381"><xref:System.Exception.GetType%2A>メソッドは、.NET Framework インフラストラクチャをサポートするために存在し、内部的には、基本的なメソッドを呼び出します<xref:System.Object.GetType%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="870bd-381">The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="HelpLink">
      <MemberSignature Language="C#" Value="public virtual string HelpLink { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpLink" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HelpLink" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpLink As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpLink { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.HelpLink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-382">この例外に関連付けられているヘルプ ファイルへのリンクを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-382">Gets or sets a link to the help file associated with this exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="870bd-383">URN (Uniform Resource Name) または URL (Uniform Resource Locator)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-383">The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-384">ヘルプ ファイルを表す戻り値は、URN または URL です。</span><span class="sxs-lookup"><span data-stu-id="870bd-384">The return value, which represents a help file, is a URN or URL.</span></span> <span data-ttu-id="870bd-385">たとえば、`HelpLink`値可能性があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-385">For example, the `HelpLink` value could be:</span></span>  
  
 <span data-ttu-id="870bd-386">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span><span class="sxs-lookup"><span data-stu-id="870bd-386">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-387">次のコード例をスロー、`Exception`が設定された、`HelpLink`プロパティには、そのコンス トラクターとし、キャッチされた例外と表示`HelpLink`です。</span><span class="sxs-lookup"><span data-stu-id="870bd-387">The following code example throws an `Exception` that sets the `HelpLink` property in its constructor and then catches the exception and displays `HelpLink`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HResult">
      <MemberSignature Language="C#" Value="public int HResult { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HResult" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HResult" />
      <MemberSignature Language="VB.NET" Value="Public Property HResult As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:  property int HResult {  public:&#xA;int get(); protected:&#xA; void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-388">特定の例外に割り当てられているコード化数値である HRESULT を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-388">Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="870bd-389">HRESULT 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-389">The HRESULT value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-390">HRESULT は 32 ビットの値を 3 つのフィールドに分かれています。 重大度コード、機能コード、およびエラー コード。</span><span class="sxs-lookup"><span data-stu-id="870bd-390">HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.</span></span> <span data-ttu-id="870bd-391">重大度コードでは、戻り値が、情報、警告、またはエラーを表すかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-391">The severity code indicates whether the return value represents information, warning, or error.</span></span> <span data-ttu-id="870bd-392">機能コードでは、エラーの原因のシステムの領域を識別します。</span><span class="sxs-lookup"><span data-stu-id="870bd-392">The facility code identifies the area of the system responsible for the error.</span></span> <span data-ttu-id="870bd-393">エラー コードは、例外を表すために割り当てられている一意の番号です。</span><span class="sxs-lookup"><span data-stu-id="870bd-393">The error code is a unique number that is assigned to represent the exception.</span></span> <span data-ttu-id="870bd-394">各例外は、HRESULT を個別にマップされます。</span><span class="sxs-lookup"><span data-stu-id="870bd-394">Each exception is mapped to a distinct HRESULT.</span></span> <span data-ttu-id="870bd-395">マネージ コードでは、例外をスローするときに、ランタイムは、HRESULT を COM クライアントに渡します。</span><span class="sxs-lookup"><span data-stu-id="870bd-395">When managed code throws an exception, the runtime passes the HRESULT to the COM client.</span></span> <span data-ttu-id="870bd-396">アンマネージ コードには、エラーが返されます、HRESULT がランタイムによってスローされる例外に変換されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-396">When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</span></span> <span data-ttu-id="870bd-397">HRESULT 値と、対応する .NET Framework の例外については、次を参照してください。[する方法: マップの Hresult と例外](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)です。</span><span class="sxs-lookup"><span data-stu-id="870bd-397">For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span> <span data-ttu-id="870bd-398">参照してください[の共通 HRESULT 値](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx)が遭遇する最も高い値の一覧については、Windows ドキュメント。</span><span class="sxs-lookup"><span data-stu-id="870bd-398">See [Common HRESULT Values](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.</span></span>  
  
 <span data-ttu-id="870bd-399">以降で、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Exception.HResult%2A>プロパティの set アクセス操作子が保護されている、一方の get アクセス操作子はパブリックです。</span><span class="sxs-lookup"><span data-stu-id="870bd-399">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.</span></span>  <span data-ttu-id="870bd-400">.NET Framework の以前のバージョンで、get アクセス操作子および set アクセス操作子の両方が保護されます。</span><span class="sxs-lookup"><span data-stu-id="870bd-400">In previous versions of the .NET Framework, both getter and setter are protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-401">次のコード例は、派生を定義`Exception`設定クラス、`HResult`プロパティをそのコンス トラクターでカスタム値にします。</span><span class="sxs-lookup"><span data-stu-id="870bd-401">The following code example defines a derived `Exception` class that sets the `HResult` property to a custom value in its constructor.</span></span>  
  
 [!code-cpp[System.Exception.HResult#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.HResult/CPP/hresult.cpp#1)]
 [!code-csharp[System.Exception.HResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.HResult/CS/hresult.cs#1)]
 [!code-vb[System.Exception.HResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.HResult/VB/hresult.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerException">
      <MemberSignature Language="C#" Value="public Exception InnerException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception InnerException" />
      <MemberSignature Language="DocId" Value="P:System.Exception.InnerException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ InnerException { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.InnerException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-402">現在の例外の原因となる <see cref="T:System.Exception" /> インスタンスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-402">Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="870bd-403">現在の例外を発生させたエラーを説明するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-403">An object that describes the error that caused the current exception.</span>
          </span>
          <span data-ttu-id="870bd-404">
            <see cref="P:System.Exception.InnerException" /> プロパティは、<see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> コンストラクターに渡されたものと同じ値を返します。内部例外の値がコンストラクターに渡されなかった場合は <see langword="null" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-404">The <see cref="P:System.Exception.InnerException" /> property returns the same value as was passed into the <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> constructor, or <see langword="null" /> if the inner exception value was not supplied to the constructor.</span>
          </span>
          <span data-ttu-id="870bd-405">このプロパティは読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-405">This property is read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-406">ときに例外`X`前の例外の直接の結果としてスローされる`Y`、<xref:System.Exception.InnerException%2A>プロパティ`X`への参照を含める必要があります`Y`です。</span><span class="sxs-lookup"><span data-stu-id="870bd-406">When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`.</span></span>  
  
 <span data-ttu-id="870bd-407"><xref:System.Exception.InnerException%2A> プロパティを使用して、現在の例外の原因になった例外のセットを取得します。</span><span class="sxs-lookup"><span data-stu-id="870bd-407">Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.</span></span>  
  
 <span data-ttu-id="870bd-408">以前の例外をキャッチする新しい例外を作成することができます。</span><span class="sxs-lookup"><span data-stu-id="870bd-408">You can create a new exception that catches an earlier exception.</span></span> <span data-ttu-id="870bd-409">2 つ目の例外を処理エラーより適切に処理前の例外からの追加情報に使用するコードです。</span><span class="sxs-lookup"><span data-stu-id="870bd-409">The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</span></span>  
  
 <span data-ttu-id="870bd-410">ファイルを読み取り、そのファイルからデータを書式設定する関数があるとします。</span><span class="sxs-lookup"><span data-stu-id="870bd-410">Suppose that there is a function that reads a file and formats the data from that file.</span></span> <span data-ttu-id="870bd-411">コード ファイルを読み取るしようと、この例では、<xref:System.IO.IOException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="870bd-411">In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown.</span></span> <span data-ttu-id="870bd-412">関数をキャッチ、<xref:System.IO.IOException>をスローし、<xref:System.IO.FileNotFoundException>です。</span><span class="sxs-lookup"><span data-stu-id="870bd-412">The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>.</span></span> <span data-ttu-id="870bd-413"><xref:System.IO.IOException>で保存することでした、<xref:System.Exception.InnerException%2A>のプロパティ、 <xref:System.IO.FileNotFoundException>、キャッチするコードを有効にすると、<xref:System.IO.FileNotFoundException>最初のエラーの原因をチェックします。</span><span class="sxs-lookup"><span data-stu-id="870bd-413">The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.</span></span>  
  
 <span data-ttu-id="870bd-414"><xref:System.Exception.InnerException%2A>例外オブジェクトの初期化時に、内部例外への参照を保持するプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="870bd-414">The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-415">次の例では、スローして、内部例外を参照する例外のキャッチを示します。</span><span class="sxs-lookup"><span data-stu-id="870bd-415">The following example demonstrates throwing and catching an exception that references an inner exception.</span></span>  
  
 [!code-cpp[InnerEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/InnerEx/CPP/innerex.cpp#1)]
 [!code-csharp[InnerEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/InnerEx/CS/innerex.cs#1)]
 [!code-vb[InnerEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InnerEx/VB/innerex.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public virtual string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Message</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-416">現在の例外を説明するメッセージを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-416">Gets a message that describes the current exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="870bd-417">例外の理由を説明するエラー メッセージ、または空の文字列 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-417">The error message that explains the reason for the exception, or an empty string ("").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-418">エラー メッセージは、例外を処理する開発者を対象します。</span><span class="sxs-lookup"><span data-stu-id="870bd-418">Error messages target the developer who is handling the exception.</span></span> <span data-ttu-id="870bd-419">テキスト、<xref:System.Exception.Message%2A>プロパティは、エラーを完全に記述する必要があり、可能であれば、する必要があります、エラーを修正する方法を説明もします。</span><span class="sxs-lookup"><span data-stu-id="870bd-419">The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error.</span></span> <span data-ttu-id="870bd-420">トップレベルの例外ハンドラーをエンドユーザーのメッセージを表示するには、するようにする必要がありますが文法的に正しいことと、メッセージの文がピリオドで終了します。</span><span class="sxs-lookup"><span data-stu-id="870bd-420">Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.</span></span> <span data-ttu-id="870bd-421">疑問符 (?) または感嘆符は使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="870bd-421">Do not use question marks or exclamation points.</span></span> <span data-ttu-id="870bd-422">アプリケーションでは、ローカライズされた例外メッセージを使用する場合は、正確に変換されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-422">If your application uses localized exception messages, you should ensure that they are accurately translated.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="870bd-423">適切なアクセス許可をチェックせず例外メッセージ内の機密情報が開示されません。</span><span class="sxs-lookup"><span data-stu-id="870bd-423">Do not disclose sensitive information in exception messages without checking for the appropriate permissions.</span></span>  
  
 <span data-ttu-id="870bd-424">値、<xref:System.Exception.Message%2A>によって返される情報のプロパティが含まれている<xref:System.Exception.ToString%2A>です。<xref:System.Exception.Message%2A>プロパティを作成するときにのみ、<xref:System.Exception>です。</span><span class="sxs-lookup"><span data-stu-id="870bd-424">The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>.</span></span> <span data-ttu-id="870bd-425">現在のインスタンスのコンス トラクターにメッセージが指定されていない場合、システムは、現在のシステムのカルチャを使用して書式設定されている既定のメッセージを提供します。</span><span class="sxs-lookup"><span data-stu-id="870bd-425">If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</span></span>  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="870bd-426">Windows ランタイムと [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="870bd-426">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="870bd-427">以降で、[!INCLUDE[net_v451](~/includes/net-v451-md.md)]と[!INCLUDE[win81](~/includes/win81-md.md)]、Windows ランタイム型と .NET Framework の一部ではないメンバーから反映される例外からエラー メッセージの忠実性が向上します。</span><span class="sxs-lookup"><span data-stu-id="870bd-427">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.</span></span> <span data-ttu-id="870bd-428">Visual C コンポーネント拡張からの例外のメッセージは具体的には、(C + + CX) .NET Framework に反映されるようになりました<xref:System.Exception>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="870bd-428">In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-429">次のコード例をスローおよびキャッチし、<xref:System.Exception>例外、例外のテキストを表示し、、使用してメッセージ、<xref:System.Exception.Message%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-429">The following code example throws and then catches an <xref:System.Exception> exception and displays the exception's text message using the <xref:System.Exception.Message%2A> property.</span></span>
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="870bd-430">
            <para>プロパティから例外をスローするのテキストで参照する必要がある場合<see cref="P:System.Exception.Message" />設定または取得するプロパティの引数には、プロパティ引数の名前として"value"を使用します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-430">
              <para>If you throw an exception from a property, and you need to refer in the text of <see cref="P:System.Exception.Message" /> to the property argument that you set or get, use "value" as the name of the property argument.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="overrides">
          <span data-ttu-id="870bd-431">
            <para>
              <see cref="P:System.Exception.Message" />プロパティがメッセージの内容や形式に対する制御権限を必要とするクラスでオーバーライドします。アプリケーション コードが発生する例外に関する情報を表示する必要があるときにこのプロパティが通常にアクセスします。エラー メッセージをローカライズする必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-431">
              <para>The <see cref="P:System.Exception.Message" /> property is overridden in classes that require control over message content or format. Application code typically accesses this property when it needs to display information about an exception that has been caught.  The error message should be localized.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SerializeObjectState">
      <MemberSignature Language="C#" Value="protected event EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState" />
      <MemberSignature Language="DocId" Value="E:System.Exception.SerializeObjectState" />
      <MemberSignature Language="VB.NET" Value="Protected Custom Event SerializeObjectState As EventHandler(Of SafeSerializationEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; event EventHandler&lt;System::Runtime::Serialization::SafeSerializationEventArgs ^&gt; ^ SerializeObjectState;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-432">例外がシリアル化され、例外に関するシリアル化されたデータを含む例外状態オブジェクトが作成されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-432">Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-433">例外状態オブジェクトを実装して、<xref:System.Runtime.Serialization.ISafeSerializationData>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-433">The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 <span data-ttu-id="870bd-434">ときに、<xref:System.Exception.SerializeObjectState>イベントがサブスクライブしている場合、例外が逆シリアル化し、空の例外として作成します。</span><span class="sxs-lookup"><span data-stu-id="870bd-434">When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception.</span></span> <span data-ttu-id="870bd-435">例外状態を逆シリアル化もと、例外のコンス トラクターは実行されず、します。</span><span class="sxs-lookup"><span data-stu-id="870bd-435">The exception's constructor is not run, and the exception state is also deserialized.</span></span> <span data-ttu-id="870bd-436"><xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A>例外状態オブジェクトのコールバック メソッドに通知し、逆シリアル化されたデータを空の例外をプッシュすることができます。</span><span class="sxs-lookup"><span data-stu-id="870bd-436">The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.</span></span>  
  
 <span data-ttu-id="870bd-437"><xref:System.Exception.SerializeObjectState>イベントおよび例外データを逆シリアル化に透過的な例外の種類を有効にします。</span><span class="sxs-lookup"><span data-stu-id="870bd-437">The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data.</span></span> <span data-ttu-id="870bd-438">透過的なコード内で、動作しているアクセス許可セットの範囲内のコマンドを実行ことはできません実行、呼び出しから派生したりクリティカルなコードが含まれてできます。</span><span class="sxs-lookup"><span data-stu-id="870bd-438">Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.</span></span>  
  
 <span data-ttu-id="870bd-439">場合、<xref:System.Exception.SerializeObjectState>イベントがサブスクライブしていないかを使用して通常どおりに逆シリアル化が発生した、<xref:System.Exception.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="870bd-439">If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="870bd-440">通常のハンドラーを<xref:System.Exception.SerializeObjectState>そのシリアル化を提供する例外のコンス トラクターでイベントを追加します。</span><span class="sxs-lookup"><span data-stu-id="870bd-440">Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization.</span></span> <span data-ttu-id="870bd-441">コンス トラクターがないため、実行すると実行、<xref:System.Exception.SerializeObjectState>イベント ハンドラーが実行されると、シリアル化、逆シリアル化された例外をスローできます、<xref:System.Runtime.Serialization.SerializationException>例外を逆シリアル化しようとしたときに例外です。</span><span class="sxs-lookup"><span data-stu-id="870bd-441">But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception.</span></span> <span data-ttu-id="870bd-442">これを回避するにはのハンドラーを追加する必要がありますも、<xref:System.Exception.SerializeObjectState>内のイベント、<xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="870bd-442">To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="870bd-443">具体的な使用例」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="870bd-443">See the Examples section for an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-444">次の例では定義、`BadDivisionException`を処理する、<xref:System.Exception.SerializeObjectState>イベント。</span><span class="sxs-lookup"><span data-stu-id="870bd-444">The following example defines a `BadDivisionException` that handles the <xref:System.Exception.SerializeObjectState> event.</span></span> <span data-ttu-id="870bd-445">これは、入れ子になった状態オブジェクトも含まれています。 という名前の構造`BadDivisionExceptionState`を実装する、<xref:System.Runtime.Serialization.ISafeSerializationData>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="870bd-445">It also contains a state object, which is a nested structure named `BadDivisionExceptionState` that implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 [!code-csharp[System.Exception.SerializeObjectState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.serializeobjectstate/cs/example2.cs#1)]
 [!code-vb[System.Exception.SerializeObjectState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.serializeobjectstate/vb/example2.vb#1)]  
  
 <span data-ttu-id="870bd-446">`BadDivisionException` 0 による浮動小数点除算が発生したときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="870bd-446">The `BadDivisionException` exception is thrown when a floating-point division by zero occurs.</span></span> <span data-ttu-id="870bd-447">最初の 0 による除算では、中にインスタンス化、`BadDivisionException`オブジェクトをシリアル化、および例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="870bd-447">During the first division by zero, the example instantiates a `BadDivisionException` object, serializes it, and throws the exception.</span></span> <span data-ttu-id="870bd-448">0 による後続の部門が発生すると、この例は、シリアル化されたオブジェクトを逆シリアル化、なってし、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="870bd-448">When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception.</span></span> <span data-ttu-id="870bd-449">オブジェクトのシリアル化、逆シリアル化、シリアル、および逆シリアル化のために、この例で追加、<xref:System.Exception.SerializeObjectState>両方で、イベント ハンドラー、`BadDivisionException`クラスのコンス トラクターと、<xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType>実装します。</span><span class="sxs-lookup"><span data-stu-id="870bd-449">To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <xref:System.Exception.SerializeObjectState> event handler both in the `BadDivisionException` class constructor and in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="870bd-450">
            <para>このイベントは、サブスクライブ、使用される場合、以下の継承階層内のすべての派生型は、同じシリアル化機構を実装する必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-450">
              <para>If this event is subscribed to and used, all derived types that follow in the inheritance hierarchy must implement the same serialization mechanism.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public virtual string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Source" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Source</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-451">エラーの原因となるアプリケーションまたはオブジェクトの名前を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-451">Gets or sets the name of the application or the object that causes the error.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="870bd-452">エラーの原因となるアプリケーションまたはオブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-452">The name of the application or the object that causes the error.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-453">場合、<xref:System.Exception.Source%2A>プロパティが明示的に設定されていない、ランタイムに自動的に設定が、例外が発生したアセンブリの名前。</span><span class="sxs-lookup"><span data-stu-id="870bd-453">If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-454">次の例をスロー、`Exception`が設定された、`Source`プロパティには、そのコンス トラクターとし、キャッチされた例外と表示`Source`です。</span><span class="sxs-lookup"><span data-stu-id="870bd-454">The following example throws an `Exception` that sets the `Source` property in its constructor and then catches the exception and displays `Source`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="870bd-455">このオブジェクトはランタイム <see cref="N:System.Reflection" /> オブジェクトでなければなりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-455">The object must be a runtime <see cref="N:System.Reflection" /> object</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="StackTrace">
      <MemberSignature Language="C#" Value="public virtual string StackTrace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StackTrace" />
      <MemberSignature Language="DocId" Value="P:System.Exception.StackTrace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StackTrace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ StackTrace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.StackTrace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-456">呼び出し履歴で直前のフレームの文字列形式を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-456">Gets a string representation of the immediate frames on the call stack.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="870bd-457">呼び出し履歴の直前のフレームを説明する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-457">A string that describes the immediate frames of the call stack.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-458">実行スタックは、指定された時点で実行されているすべてのメソッドを追跡します。</span><span class="sxs-lookup"><span data-stu-id="870bd-458">The execution stack keeps track of all the methods that are in execution at a given instant.</span></span> <span data-ttu-id="870bd-459">メソッド呼び出しのトレースは、スタック トレースと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="870bd-459">A trace of the method calls is called a stack trace.</span></span> <span data-ttu-id="870bd-460">スタック トレースの一覧は、例外が発生する、メソッド内の行番号に呼び出し履歴を追跡する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="870bd-460">The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</span></span>  
  
 <span data-ttu-id="870bd-461"><xref:System.Exception.StackTrace%2A>プロパティは、例外がスローされた場所に送られたコール スタックのフレームを返します。</span><span class="sxs-lookup"><span data-stu-id="870bd-461">The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown.</span></span> <span data-ttu-id="870bd-462">新しいインスタンスを作成することで、コール スタック フレームに関する情報を取得することができます、<xref:System.Diagnostics.StackTrace?displayProperty=nameWithType>クラスを使用してその<xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="870bd-462">You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="870bd-463">アプリケーション コードで例外がスローされるたびに、共通言語ランタイム (CLR) は、スタック トレースを更新 (を使用して、`throw`キーワード) です。</span><span class="sxs-lookup"><span data-stu-id="870bd-463">The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword).</span></span> <span data-ttu-id="870bd-464">場合は、例外がスローされましたが、メソッドと異なるメソッドで再スローされました、スタック トレースには、ここで例外がスローされた最初、メソッド内の場所と、例外が再スロー メソッド内の場所の両方が含まれています。</span><span class="sxs-lookup"><span data-stu-id="870bd-464">If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.</span></span> <span data-ttu-id="870bd-465">場合は、例外がスローされ、後で再度スローされ、同じ方法で、スタック トレースには、例外が再スローして例外をスローした場所には含まれませんの場所にはのみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="870bd-465">If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</span></span>  
  
 <span data-ttu-id="870bd-466"><xref:System.Exception.StackTrace%2A>プロパティは多くのメソッド呼び出しなどのコード変換のため期待どおりに、報告可能性があります、インライン展開の最適化中に発生します。</span><span class="sxs-lookup"><span data-stu-id="870bd-466">The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-467">次のコード例をスロー、`Exception`し、その例外をキャッチしてスタック トレースを使用して、表示、`StackTrace`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-467">The following code example throws an `Exception` and then catches it and displays a stack trace using the `StackTrace` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="870bd-468">
            <para>
              <see langword="StackTrace" />プロパティは、スタック トレースの内容または形式に対する制御を必要とするクラスでオーバーライドします。既定では、スタック トレースは、例外オブジェクトがスローされる直前にキャプチャされます。使用して<see cref="P:System.Environment.StackTrace" />例外がスローされていないときに、スタック トレース情報を取得します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-468">
              <para>The <see langword="StackTrace" /> property is overridden in classes that require control over the stack trace content or format.  By default, the stack trace is captured immediately before an exception object is thrown. Use <see cref="P:System.Environment.StackTrace" /> to get stack trace information when no exception is being thrown.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Environment.StackTrace" />
      </Docs>
    </Member>
    <Member MemberName="TargetSite">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodBase TargetSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase TargetSite" />
      <MemberSignature Language="DocId" Value="P:System.Exception.TargetSite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetSite As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodBase ^ TargetSite { System::Reflection::MethodBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.TargetSite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="870bd-469">現在の例外がスローされたメソッドを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-469">Gets the method that throws the current exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="870bd-470">現在の例外をスローした <see cref="T:System.Reflection.MethodBase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-470">The <see cref="T:System.Reflection.MethodBase" /> that threw the current exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-471">この例外をスローするメソッドを使用できない、スタック トレースが null 参照ではない場合 (`Nothing` Visual Basic で)、<xref:System.Exception.TargetSite%2A>スタック トレースからメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="870bd-471">If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace.</span></span> <span data-ttu-id="870bd-472">スタック トレースが null 参照であると、<xref:System.Exception.TargetSite%2A> も null 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="870bd-472">If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="870bd-473"><xref:System.Exception.TargetSite%2A>プロパティは、例外がスローされた例外ハンドラーがアプリケーション ドメインの境界を越えて例外を処理する場合、メソッドの名前を正確に表示されない場合があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-473">The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-474">次のコード例をスロー、`Exception`し、その例外をキャッチして元メソッドを使用して、表示、`TargetSite`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="870bd-474">The following code example throws an `Exception` and then catches it and displays the originating method using the `TargetSite` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="870bd-475">現在の例外の文字列形式を作成して返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-475">Creates and returns a string representation of the current exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="870bd-476">現在の例外の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="870bd-476">A string representation of the current exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="870bd-477"><xref:System.Exception.ToString%2A> ユーザーが理解できるものでは現在の例外の表現を返します。</span><span class="sxs-lookup"><span data-stu-id="870bd-477"><xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans.</span></span> <span data-ttu-id="870bd-478">例外には、カルチャに依存するデータが含まれています、文字列形式にによって返されます`ToString`は現在のシステム カルチャが考慮するために必要です。</span><span class="sxs-lookup"><span data-stu-id="870bd-478">Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture.</span></span> <span data-ttu-id="870bd-479">返される文字列の形式の正確な要件はありませんが、ユーザー側で認識されるオブジェクトの値を反映するようにしようとする必要があります。</span><span class="sxs-lookup"><span data-stu-id="870bd-479">Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</span></span>  
  
 <span data-ttu-id="870bd-480">既定の実装<xref:System.Exception.ToString%2A>を現在の例外、メッセージ、呼び出しの結果をスローしたクラスの名前を取得<xref:System.Exception.ToString%2A>、内部例外、および呼び出しの結果で<xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="870bd-480">The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="870bd-481">これらのメンバーのいずれかが場合`null`、その値が返される文字列に含まれていません。</span><span class="sxs-lookup"><span data-stu-id="870bd-481">If any of these members is `null`, its value is not included in the returned string.</span></span>  
  
 <span data-ttu-id="870bd-482">エラー メッセージが存在しない場合、または空の文字列である場合 ("")、エラー メッセージも返されません。</span><span class="sxs-lookup"><span data-stu-id="870bd-482">If there is no error message or if it is an empty string (""), then no error message is returned.</span></span> <span data-ttu-id="870bd-483">されていない場合にのみ、内部例外とスタック トレースの名前が返されます`null`です。</span><span class="sxs-lookup"><span data-stu-id="870bd-483">The name of the inner exception and the stack trace are returned only if they are not `null`.</span></span>  
  
 <span data-ttu-id="870bd-484">このメソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="870bd-484">This method overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="870bd-485">次の例は、例外が発生し、呼び出し元の結果を表示<xref:System.Exception.ToString%2A>その例外でします。</span><span class="sxs-lookup"><span data-stu-id="870bd-485">The following example causes an exception and displays the result of calling <xref:System.Exception.ToString%2A> on that exception.</span></span> <span data-ttu-id="870bd-486">なお、<xref:System.Exception.ToString%2A?displayProperty=nameWithType>例外クラス インスタンスの引数リストに表示されるときに、メソッドが暗黙的に呼び出される、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="870bd-486">Note that the <xref:System.Exception.ToString%2A?displayProperty=nameWithType> method is called implicitly when the Exception class instance appears in the argument list of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[System.Exception.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.exception.tostring/cpp/ToStringEx1.cpp#1)]
 [!code-csharp[System.Exception.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.tostring/cs/ToStringEx1.cs#1)]
 [!code-vb[System.Exception.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.tostring/vb/ToStringEx1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>