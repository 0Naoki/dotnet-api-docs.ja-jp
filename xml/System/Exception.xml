<Type Name="Exception" FullName="System.Exception">
  <Metadata><Meta Name="ms.openlocfilehash" Value="941ce6ec902db92558c052227196f17b68b2f254" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725200" /></Metadata><TypeSignature Language="C#" Value="public class Exception : System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit Exception extends System.Object implements class System.Runtime.InteropServices._Exception, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Exception" />
  <TypeSignature Language="VB.NET" Value="Public Class Exception&#xA;Implements _Exception, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Exception : System::Runtime::InteropServices::_Exception, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Exception = class&#xA;    interface ISerializable&#xA;    interface _Exception" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Exception</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Exception))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5e8fb-101">アプリケーションの実行中に発生したエラーを表します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-101">Represents errors that occur during application execution.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-102">このクラスは、すべての例外の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-102">This class is the base class for all exceptions.</span></span> <span data-ttu-id="5e8fb-103">エラーが発生したときに、システムまたは現在実行中のアプリケーションのいずれかがによって報告、エラーに関する情報を含む例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-103">When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.</span></span> <span data-ttu-id="5e8fb-104">例外がスローされた後、アプリケーションまたは既定の例外ハンドラーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-104">After an exception is thrown, it is handled by the application or by the default exception handler.</span></span>  
  
 <span data-ttu-id="5e8fb-105">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="5e8fb-105">In this section:</span></span>  
  
 <span data-ttu-id="5e8fb-106">[エラーと例外](#Errors) </span><span class="sxs-lookup"><span data-stu-id="5e8fb-106">[Errors and exceptions](#Errors) </span></span>  
 <span data-ttu-id="5e8fb-107">[Try/catch ブロック](#TryCatch) </span><span class="sxs-lookup"><span data-stu-id="5e8fb-107">[Try/catch blocks](#TryCatch) </span></span>  
 <span data-ttu-id="5e8fb-108">[例外の種類の機能](#Features) </span><span class="sxs-lookup"><span data-stu-id="5e8fb-108">[Exception type features](#Features) </span></span>  
 <span data-ttu-id="5e8fb-109">[例外クラスのプロパティ](#Properties) </span><span class="sxs-lookup"><span data-stu-id="5e8fb-109">[Exception class properties](#Properties) </span></span>  
 <span data-ttu-id="5e8fb-110">[パフォーマンスに関する考慮事項](#Performance) </span><span class="sxs-lookup"><span data-stu-id="5e8fb-110">[Performance considerations](#Performance) </span></span>  
 <span data-ttu-id="5e8fb-111">[例外の再スロー](#Rethrow) </span><span class="sxs-lookup"><span data-stu-id="5e8fb-111">[Re-throwing an exception](#Rethrow) </span></span>  
 <span data-ttu-id="5e8fb-112">[標準の例外を選択します。](#Standard) </span><span class="sxs-lookup"><span data-stu-id="5e8fb-112">[Choosing standard exceptions](#Standard) </span></span>  
 [<span data-ttu-id="5e8fb-113">カスタム例外を実装します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-113">Implementing custom exceptions</span></span>](#Custom)  
  
<a name="Errors"></a>   
## <a name="errors-and-exceptions"></a><span data-ttu-id="5e8fb-114">エラーと例外</span><span class="sxs-lookup"><span data-stu-id="5e8fb-114">Errors and exceptions</span></span>  
 <span data-ttu-id="5e8fb-115">実行時エラーは、さまざまな理由で発生します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-115">Run-time errors can occur for a variety of reasons.</span></span> <span data-ttu-id="5e8fb-116">ただし、すべてのエラーは、コードの例外として処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-116">However, not all errors should be handled as exceptions in your code.</span></span> <span data-ttu-id="5e8fb-117">ここでは、実行時とそれらに応答する適切な方法で発生する可能性があるエラーのいくつかのカテゴリです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-117">Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.</span></span>  
  
-   <span data-ttu-id="5e8fb-118">**使用状況のエラー。**</span><span class="sxs-lookup"><span data-stu-id="5e8fb-118">**Usage errors.**</span></span> <span data-ttu-id="5e8fb-119">使用法のエラーは、例外が発生するプログラム ロジックでエラーを表します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-119">A usage error represents an error in program logic that can result in an exception.</span></span> <span data-ttu-id="5e8fb-120">ただし、エラーは、例外処理ではなく、問題のあるコードを変更することでアドレス指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-120">However, the error should be addressed not through exception handling but by modifying the faulty code.</span></span> <span data-ttu-id="5e8fb-121">オーバーライドなど、<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>メソッドは、次の例を前提としている`obj`引数は null 以外に常にあります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-121">For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method in the following example assumes that the `obj` argument must always be non-null.</span></span>  
  
     [!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]
     [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]  
  
     <span data-ttu-id="5e8fb-122"><xref:System.NullReferenceException>の例外をとき`obj`は`null`明示的に呼び出す前に null をテストするソース コードを修正して取り除くことができます、 <xref:System.Object.Equals%2A?displayProperty=nameWithType> override キーワードと再コンパイルします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-122">The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=nameWithType> override and then re-compiling.</span></span> <span data-ttu-id="5e8fb-123">次の例には処理する修正されたソース コードが含まれています、`null`引数。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-123">The following example contains the corrected source code that handles a `null` argument.</span></span>  
  
     [!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]
     [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]  
  
     <span data-ttu-id="5e8fb-124">使用状況のエラーの例外処理を使用して、代わりに使用することができます、<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>デバッグ ビルドでの使用状況のエラーを識別するメソッドと<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>デバッグとリリースの両方で使用エラーを識別するためにメソッドが構築されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-124">Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method to identify usage errors in both debug and release builds.</span></span> <span data-ttu-id="5e8fb-125">詳細については、「[マネージド コードのアサーション](/visualstudio/debugger/assertions-in-managed-code)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-125">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
-   <span data-ttu-id="5e8fb-126">**プログラムのエラー。**</span><span class="sxs-lookup"><span data-stu-id="5e8fb-126">**Program errors.**</span></span> <span data-ttu-id="5e8fb-127">プログラム エラーは、必ずしもバグのないコードを記述することで回避することはできませんが、ランタイム エラーです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-127">A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.</span></span>  
  
     <span data-ttu-id="5e8fb-128">場合によっては、プログラム エラーは、想定または日常的なエラー状態を反映可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-128">In some cases, a program error may reflect an expected or routine error condition.</span></span> <span data-ttu-id="5e8fb-129">ここでは、プログラム エラーを処理し、代わりに、操作を再試行する例外処理の使用を回避する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-129">In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.</span></span> <span data-ttu-id="5e8fb-130">たとえば場合は、ユーザーが特定の形式で日付を入力必要ですが、解析できます日付文字列を呼び出して、<xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>を返すメソッドを<xref:System.Boolean>を使用する代わりに、解析操作が成功したかどうかを示す値<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>メソッドがスローされます、<xref:System.FormatException>日付文字列に変換できない場合は例外を<xref:System.DateTime>値。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-130">For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="5e8fb-131">同様に、ユーザーは、存在しないファイルを開くしようとすると、最初に呼び出せる、<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>ファイルが存在し、その場合は、作成するかどうか、ユーザーを要求するかどうかを確認する方法。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-131">Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.</span></span>  
  
     <span data-ttu-id="5e8fb-132">それ以外の場合は、プログラム エラーは、コードで処理できる、予期しないエラー状態を反映します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-132">In other cases, a program error reflects an unexpected error condition that can be handled in your code.</span></span> <span data-ttu-id="5e8fb-133">たとえば、場合でも、ファイルが存在することを確認したら、それが削除できます前に、それを開くか、または、壊れている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-133">For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.</span></span> <span data-ttu-id="5e8fb-134">その場合は、インスタンス化してファイルを開こうとした、<xref:System.IO.StreamReader>オブジェクトまたは呼び出し元、<xref:System.IO.File.Open%2A>メソッドがスローする可能性が、<xref:System.IO.FileNotFoundException>例外。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-134">In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception.</span></span> <span data-ttu-id="5e8fb-135">このような場合は、例外、エラーから回復する処理を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-135">In these cases, you should use exception handling to recover from the error.</span></span>  
  
-   <span data-ttu-id="5e8fb-136">**システム障害。**</span><span class="sxs-lookup"><span data-stu-id="5e8fb-136">**System failures.**</span></span> <span data-ttu-id="5e8fb-137">システム障害は、プログラムでは意味のある方法で処理できない実行時エラーです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-137">A system failure is a run-time error that cannot be handled programmatically in a meaningful way.</span></span> <span data-ttu-id="5e8fb-138">たとえば、任意のメソッドをスローできます、<xref:System.OutOfMemoryException>例外の場合は、共通言語ランタイムが追加のメモリを割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-138">For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory.</span></span> <span data-ttu-id="5e8fb-139">通常、システム障害は例外処理を使用して、処理されません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-139">Ordinarily, system failures are not handled by using exception handling.</span></span> <span data-ttu-id="5e8fb-140">代わりに、できる場合がありますなど、イベントを使用する<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>を呼び出すと、<xref:System.Environment.FailFast%2A?displayProperty=nameWithType>例外情報を記録し、アプリケーションが終了する前に、エラーをユーザーに通知するメソッド。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-140">Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> and call the <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> method to log exception information and notify the user of the failure before the application terminates.</span></span>  
  
<a name="TryCatch"></a>   
## <a name="trycatch-blocks"></a><span data-ttu-id="5e8fb-141">Try/catch ブロック</span><span class="sxs-lookup"><span data-stu-id="5e8fb-141">Try/catch blocks</span></span>  
 <span data-ttu-id="5e8fb-142">共通言語ランタイムは、例外として、オブジェクトの表現とプログラム コードと例外処理にコードの分離に基づく例外処理モデルを提供します。`try`ブロックと`catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-142">The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks.</span></span> <span data-ttu-id="5e8fb-143">1 つまたは複数があることができます`catch`ブロックする場合に、それぞれ特定の種類の例外、または別のブロックよりも具体的な例外をキャッチする 1 つのブロックを処理するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-143">There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</span></span>  
  
 <span data-ttu-id="5e8fb-144">コードがある必要があります内に配置するアプリケーションでは、アプリケーション コードのブロックの実行中に発生する例外を処理する場合、`try`ステートメントと呼びます、`try`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-144">If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block.</span></span> <span data-ttu-id="5e8fb-145">によってスローされた例外を処理するアプリケーション コード、`try`ブロックが内に配置される、`catch`ステートメントと呼びます、`catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-145">Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block.</span></span> <span data-ttu-id="5e8fb-146">0 個以上`catch`ブロックに関連付けられ、`try`ブロック、および各`catch`ブロックに処理する例外の種類を決定する種類のフィルターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-146">Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.</span></span>  
  
 <span data-ttu-id="5e8fb-147">例外が発生したときに、`try`ブロック、システムに関連付けられている検索`catch`ことによって検出されるまでに、アプリケーション コードに表示される順序でブロックを`catch`例外を処理するブロック。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-147">When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception.</span></span> <span data-ttu-id="5e8fb-148">A`catch`ブロック型の例外を処理`T`catch ブロックの種類のフィルターが指定されている場合`T`任意の型または`T`から派生します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-148">A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from.</span></span> <span data-ttu-id="5e8fb-149">システムが 1 つ目のインスタンスを検出した後に検索を停止した`catch`例外を処理するブロック。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-149">The system stops searching after it finds the first `catch` block that handles the exception.</span></span> <span data-ttu-id="5e8fb-150">このため、アプリケーション コードで、`catch`前に、型を処理するブロックを指定する必要があります、`catch`このセクションの次の例に示すように、基本型を処理するブロック。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-150">For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section.</span></span> <span data-ttu-id="5e8fb-151">処理する catch ブロック`System.Exception`最後に指定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-151">A catch block that handles `System.Exception` is specified last.</span></span>  
  
 <span data-ttu-id="5e8fb-152">None の場合、`catch`に現在関連付けられているブロック`try`ブロック処理、例外と現在`try`内でその他のブロックが入れ子になった`try`、現在の呼び出しでブロック、`catch`ブロックに次の関連付けそれを囲む`try`ブロックが検索されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-152">If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched.</span></span> <span data-ttu-id="5e8fb-153">ない場合は`catch`例外のブロックが見つかると、システムは、現在の呼び出しの前の入れ子レベルを検索します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-153">If no `catch` block for the exception is found, the system searches previous nesting levels in the current call.</span></span> <span data-ttu-id="5e8fb-154">ない場合は`catch`ブロック、例外が、現在の呼び出しで見つかった、コール スタックに渡された例外および以前のスタック フレームが検索、`catch`例外を処理するブロック。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-154">If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception.</span></span> <span data-ttu-id="5e8fb-155">呼び出し履歴にフレームがなくなるまで、または、例外が処理されるまで、呼び出し履歴の検索が続行されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-155">The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.</span></span> <span data-ttu-id="5e8fb-156">検索せず、呼び出しスタックの一番上に達した場合、`catch`既定の例外ハンドラー、例外処理ブロックを処理し、アプリケーションが終了します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-156">If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.</span></span>  
  
<a name="Features"></a>   
## <a name="exception-type-features"></a><span data-ttu-id="5e8fb-157">例外の種類の機能</span><span class="sxs-lookup"><span data-stu-id="5e8fb-157">Exception type features</span></span>  
 <span data-ttu-id="5e8fb-158">例外の種類は、次の機能をサポートします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-158">Exception types support the following features:</span></span>  
  
-   <span data-ttu-id="5e8fb-159">エラーを説明する人間が判読できるテキスト。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-159">Human-readable text that describes the error.</span></span> <span data-ttu-id="5e8fb-160">例外が発生したときに、ランタイムは、問題を解決するのには、エラーの性質をユーザーに通知し、アクションを提案する使用可能なテキスト メッセージにします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-160">When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.</span></span> <span data-ttu-id="5e8fb-161">このテキスト メッセージが保持されている、<xref:System.Exception.Message%2A>例外オブジェクトのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-161">This text message is held in the <xref:System.Exception.Message%2A> property of the exception object.</span></span> <span data-ttu-id="5e8fb-162">例外オブジェクトを作成する際は、コンス トラクターに、その特定の例外の詳細を説明テキスト文字列を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-162">During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.</span></span> <span data-ttu-id="5e8fb-163">コンス トラクターにエラー メッセージの引数が指定されていない場合は、既定のエラー メッセージが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-163">If no error message argument is supplied to the constructor, the default error message is used.</span></span> <span data-ttu-id="5e8fb-164">詳細については、<xref:System.Exception.Message%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-164">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="5e8fb-165">例外がスローされたときに、呼び出し履歴の状態。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-165">The state of the call stack when the exception was thrown.</span></span> <span data-ttu-id="5e8fb-166"><xref:System.Exception.StackTrace%2A>プロパティは、コードでエラーが発生するかを判断するのに使用できるスタック トレースを保持します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-166">The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code.</span></span> <span data-ttu-id="5e8fb-167">スタック トレースは、呼び出されたすべてのメソッドと、呼び出しが行われる場所のソース ファイル内の行番号を示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-167">The stack trace lists all the called methods and the line numbers in the source file where the calls are made.</span></span>  
  
<a name="Properties"></a>   
## <a name="exception-class-properties"></a><span data-ttu-id="5e8fb-168">例外クラスのプロパティ</span><span class="sxs-lookup"><span data-stu-id="5e8fb-168">Exception class properties</span></span>  
 <span data-ttu-id="5e8fb-169"><xref:System.Exception>クラスには、さまざまなコードの場所、種類、ヘルプ ファイル、および例外の原因の特定に役立つプロパティが含まれています: <xref:System.Exception.StackTrace%2A>、 <xref:System.Exception.InnerException%2A>、 <xref:System.Exception.Message%2A>、 <xref:System.Exception.HelpLink%2A>、 <xref:System.Exception.HResult%2A>、 <xref:System.Exception.Source%2A>、<xref:System.Exception.TargetSite%2A>、および<xref:System.Exception.Data%2A>します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-169">The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.</span></span>  
  
 <span data-ttu-id="5e8fb-170">2 つ以上の例外と因果関係が存在する場合に、<xref:System.Exception.InnerException%2A>プロパティは、この情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-170">When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information.</span></span> <span data-ttu-id="5e8fb-171">この内部例外への応答では、外側の例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-171">The outer exception is thrown in response to this inner exception.</span></span> <span data-ttu-id="5e8fb-172">外側の例外を処理するコードは、前の内部例外からの情報を使用して、エラーをより適切に処理できます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-172">The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.</span></span> <span data-ttu-id="5e8fb-173">内のキー/値ペアのコレクションとして、例外に関する補足情報を格納できる、<xref:System.Exception.Data%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-173">Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.</span></span>  
  
 <span data-ttu-id="5e8fb-174">例外オブジェクトの作成時に、コンス トラクターに渡されるエラー メッセージ文字列はローカライズする必要があるし、を使用してリソース ファイルから指定することができます、<xref:System.Resources.ResourceManager>クラス。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-174">The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class.</span></span> <span data-ttu-id="5e8fb-175">ローカライズされたリソースの詳細については、次を参照してください。、[サテライト アセンブリの作成](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)と[Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)トピック。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-175">For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.</span></span>  
  
 <span data-ttu-id="5e8fb-176">例外が発生した理由に関する詳細情報をユーザーに提供する、<xref:System.Exception.HelpLink%2A>プロパティがヘルプ ファイルへの URL (または URN) を保持できます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-176">To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.</span></span>  
  
 <span data-ttu-id="5e8fb-177"><xref:System.Exception>クラスは、値が 0x80131500 HRESULT COR_E_EXCEPTION を使用します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-177">The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</span></span>  
  
 <span data-ttu-id="5e8fb-178">インスタンスの初期プロパティ値の一覧については、<xref:System.Exception>クラスを参照してください、<xref:System.Exception.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-178">For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.</span></span>  
  
<a name="Performance"></a>   
## <a name="performance-considerations"></a><span data-ttu-id="5e8fb-179">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="5e8fb-179">Performance considerations</span></span>  
 <span data-ttu-id="5e8fb-180">スローすることや、例外の処理は、大量のシステム リソースと実行時間を消費します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-180">Throwing or handling an exception consumes a significant amount of system resources and execution time.</span></span> <span data-ttu-id="5e8fb-181">予測可能なイベントを処理したり、フロー制御が、真に異常な状態の処理にのみ例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-181">Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.</span></span> <span data-ttu-id="5e8fb-182">たとえば、場合によっては、クラス ライブラリを開発しているときなど、メソッドの引数は、有効なパラメーターで呼び出されるメソッドを想定しているため有効でない場合は、例外をスローする妥当なは。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-182">For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.</span></span> <span data-ttu-id="5e8fb-183">無効なメソッド引数では、使用状況、エラーの結果でない場合に、何か異常が発生したことを意味します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-183">An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.</span></span> <span data-ttu-id="5e8fb-184">逆は例外はスローされません、場合によっては無効なデータを入力するユーザーを想定できるため、ユーザー入力が有効でない場合。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-184">Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.</span></span> <span data-ttu-id="5e8fb-185">代わりに、ユーザーは、有効な入力を入力できるように再試行メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-185">Instead, provide a retry mechanism so users can enter valid input.</span></span> <span data-ttu-id="5e8fb-186">また、使用状況のエラーを処理する例外を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-186">Nor should you use exceptions to handle usage errors.</span></span> <span data-ttu-id="5e8fb-187">代わりに、[アサーション](/visualstudio/debugger/assertions-in-managed-code)を特定し、使用状況のエラーを修正します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-187">Instead, use [assertions](/visualstudio/debugger/assertions-in-managed-code) to identify and correct usage errors.</span></span>  
  
 <span data-ttu-id="5e8fb-188">リターン コードで十分です。 ときに例外をスローしないでくださいさらに、リターン コードを例外に変換できません。および例外定期的に catch は、無視するか、および処理を続行します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-188">In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.</span></span>  
  
<a name="Rethrow"></a>   
## <a name="re-throwing-an-exception"></a><span data-ttu-id="5e8fb-189">例外の再スロー</span><span class="sxs-lookup"><span data-stu-id="5e8fb-189">Re-throwing an exception</span></span>  
 <span data-ttu-id="5e8fb-190">多くの場合、例外ハンドラーは、呼び出し元に例外を渡すだけですが。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-190">In many cases, an exception handler simply wants to pass the exception on to the caller.</span></span> <span data-ttu-id="5e8fb-191">このほとんどは、多くの場合に行われます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-191">This most often occurs in:</span></span>  
  
-   <span data-ttu-id="5e8fb-192">さらに、.NET Framework クラス ライブラリやその他のクラス ライブラリでメソッドの呼び出しをラップするクラス ライブラリです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-192">A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.</span></span>  
  
-   <span data-ttu-id="5e8fb-193">アプリケーションまたは致命的な例外が発生するライブラリ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-193">An application or library that encounters a fatal exception.</span></span> <span data-ttu-id="5e8fb-194">例外ハンドラーでは、例外をログにでき、例外を再スローすることができます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-194">The exception handler can log the exception and then re-throw the exception.</span></span>  
  
 <span data-ttu-id="5e8fb-195">例外を再スローするお勧めの方法は、単に使用する、[スロー](~/docs/csharp/language-reference/keywords/throw.md) (C#) ステートメント、[スロー](~/docs/visual-basic/language-reference/statements/throw-statement.md)式を含めず、Visual Basic でのステートメント。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-195">The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression.</span></span> <span data-ttu-id="5e8fb-196">これにより、呼び出し元に例外が伝達されるすべての呼び出し履歴情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-196">This ensures that all call stack information is preserved when the exception is propagated to the caller.</span></span> <span data-ttu-id="5e8fb-197">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-197">The following example illustrates this.</span></span> <span data-ttu-id="5e8fb-198">文字列の拡張メソッドで`FindOccurrences`、1 つまたは複数の呼び出しをラップします<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>その引数の事前検証なし。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-198">A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> without validating its arguments beforehand.</span></span>  
  
 [!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]
 [!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]  
  
 <span data-ttu-id="5e8fb-199">呼び出し元を呼び出して`FindOccurrences`2 回クリックします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-199">A caller then calls `FindOccurrences` twice.</span></span> <span data-ttu-id="5e8fb-200">2 番目の呼び出しで`FindOccurrences`、呼び出し元のパスを`null`ケースを検索文字列として、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>をスローするメソッド、<xref:System.ArgumentNullException>例外。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-200">In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method to throw an <xref:System.ArgumentNullException> exception.</span></span> <span data-ttu-id="5e8fb-201">によってこの例外を処理、`FindOccurrences`メソッドを呼び出し元に渡されたバックします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-201">This exception is handled by the `FindOccurrences` method and passed back to the caller.</span></span> <span data-ttu-id="5e8fb-202">式のない throw ステートメントを使用しているため、例からの出力は、呼び出し履歴が保持されることを示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-202">Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.</span></span>  
  
 [!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]
 [!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]  
  
 <span data-ttu-id="5e8fb-203">一方を使用して、例外が再スローされた場合、</span><span class="sxs-lookup"><span data-stu-id="5e8fb-203">In contrast, if the exception is re-thrown by using the</span></span>  
  
```csharp  
throw e  
```  
  
```vb  
Throw e  
```  
  
 <span data-ttu-id="5e8fb-204">ステートメントでは、完全な呼び出し履歴は保持されませんし、例は、次の出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-204">statement, the full call stack is not preserved, and the example would generate the following output:</span></span>  
  
```Output  
  
'a' occurs at the following character positions: 4, 7, 15  
  
An exception (ArgumentNullException) occurred.  
Message:  
   Value cannot be null.  
Parameter name: value  
  
Stack Trace:  
      at Library.FindOccurrences(String s, String f)  
   at Example.Main()  
  
```  
  
 <span data-ttu-id="5e8fb-205">少し煩雑な代替手段は、新しい例外をスローして、内部例外の元の例外のコール スタック情報を保持するためには。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-205">A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.</span></span> <span data-ttu-id="5e8fb-206">呼び出し元は、新しい例外を使用できます<xref:System.Exception.InnerException%2A>プロパティがスタック フレームと、元の例外に関する他の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-206">The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception.</span></span> <span data-ttu-id="5e8fb-207">この場合は、throw ステートメントは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-207">In this case, the throw statement is:</span></span>  
  
 [!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]
 [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]  
  
 <span data-ttu-id="5e8fb-208">例外を処理するユーザー コードが認識することが、<xref:System.Exception.InnerException%2A>プロパティは、次の例外ハンドラーに示すように、元の例外に関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-208">The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.</span></span>  
  
 [!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]
 [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]  
  
<a name="Standard"></a>   
## <a name="choosing-standard-exceptions"></a><span data-ttu-id="5e8fb-209">標準の例外を選択します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-209">Choosing standard exceptions</span></span>  
 <span data-ttu-id="5e8fb-210">例外をスローするときに、カスタム例外を実装する代わりに .NET Framework の多くの場合、既存の例外の種類を使用できます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-210">When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.</span></span> <span data-ttu-id="5e8fb-211">これら 2 つの条件下で、標準の例外の種類を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-211">You should use a standard exception type under these two conditions:</span></span>  
  
-   <span data-ttu-id="5e8fb-212">使用法のエラーによって引き起こされる例外をスローしている (つまり、メソッドを呼び出すことが開発者によって行われたプログラム ロジックのエラーによって)。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-212">You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).</span></span> <span data-ttu-id="5e8fb-213">通常は例外をスローするよう<xref:System.ArgumentException>、 <xref:System.ArgumentNullException>、 <xref:System.InvalidOperationException>、または<xref:System.NotSupportedException>します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-213">Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="5e8fb-214">開発者によって修正できるように、エラーを記述する必要があります、例外オブジェクトをインスタンス化するときに、例外オブジェクトのコンス トラクターを指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-214">The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.</span></span> <span data-ttu-id="5e8fb-215">詳細については、<xref:System.Exception.Message%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-215">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="5e8fb-216">既存の .NET Framework の例外で呼び出し元に伝えることがエラーが処理されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-216">You are handling an error that can be communicated to the caller with an existing .NET Framework exception.</span></span> <span data-ttu-id="5e8fb-217">考えられる最も派生例外をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-217">You should throw the most derived exception possible.</span></span> <span data-ttu-id="5e8fb-218">たとえば、メソッドが有効な列挙型のメンバーである引数を必要とする必要がありますをスローする、 <xref:System.ComponentModel.InvalidEnumArgumentException> (最も派生クラス) ではなく、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-218">For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="5e8fb-219">次の表は、一般的な例外タイプとをそれらをスローは条件を示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-219">The following table lists common exception types and the conditions under which you would throw them.</span></span>  
  
|<span data-ttu-id="5e8fb-220">例外</span><span class="sxs-lookup"><span data-stu-id="5e8fb-220">Exception</span></span>|<span data-ttu-id="5e8fb-221">条件</span><span class="sxs-lookup"><span data-stu-id="5e8fb-221">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="5e8fb-222">メソッドに渡される null 以外の引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-222">A non-null argument that is passed to a method is invalid.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="5e8fb-223">メソッドに渡される引数が`null`します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-223">An argument that is passed to a method is `null`.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="5e8fb-224">引数は、有効な値の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-224">An argument is outside the range of valid values.</span></span>|  
|<xref:System.IO.DirectoryNotFoundException>|<span data-ttu-id="5e8fb-225">ディレクトリ パスの一部が無効です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-225">Part of a directory path is not valid.</span></span>|  
|<xref:System.DivideByZeroException>|<span data-ttu-id="5e8fb-226">整数で、分母または<xref:System.Decimal>除算演算が 0 です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-226">The denominator in an integer or <xref:System.Decimal> division operation is zero.</span></span>|  
|<xref:System.IO.DriveNotFoundException>|<span data-ttu-id="5e8fb-227">ドライブをご利用いただけませんまたは存在しません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-227">A drive is unavailable or does not exist.</span></span>|  
|<xref:System.IO.FileNotFoundException>|<span data-ttu-id="5e8fb-228">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-228">A file does not exist.</span></span>|  
|<xref:System.FormatException>|<span data-ttu-id="5e8fb-229">などの変換メソッドによって、文字列から変換する適切な形式で値がない`Parse`します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-229">A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`.</span></span>|  
|<xref:System.IndexOutOfRangeException>|<span data-ttu-id="5e8fb-230">インデックスが配列またはコレクションの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-230">An index is outside the bounds of an array or collection.</span></span>|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="5e8fb-231">メソッドの呼び出しがオブジェクトの現在の状態では無効です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-231">A method call is invalid in an object's current state.</span></span>|  
|<xref:System.Collections.Generic.KeyNotFoundException>|<span data-ttu-id="5e8fb-232">コレクション内のメンバーにアクセスするための指定したキーが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-232">The specified key for accessing a member in a collection cannot be found.</span></span>|  
|<xref:System.NotImplementedException>|<span data-ttu-id="5e8fb-233">メソッドまたは操作が実装されていません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-233">A method or operation is not implemented.</span></span>|  
|<xref:System.NotSupportedException>|<span data-ttu-id="5e8fb-234">メソッドまたは操作がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-234">A method or operation is not supported.</span></span>|  
|<xref:System.ObjectDisposedException>|<span data-ttu-id="5e8fb-235">操作が破棄されているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-235">An operation is performed on an object that has been disposed.</span></span>|  
|<xref:System.OverflowException>|<span data-ttu-id="5e8fb-236">算術演算、キャストまたは変換操作の結果はオーバーフローが発生します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-236">An arithmetic, casting, or conversion operation results in an overflow.</span></span>|  
|<xref:System.IO.PathTooLongException>|<span data-ttu-id="5e8fb-237">パスまたはファイル名は、システム定義の最大長を超えています。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-237">A path or file name exceeds the maximum system-defined length.</span></span>|  
|<xref:System.PlatformNotSupportedException>|<span data-ttu-id="5e8fb-238">現在のプラットフォームでは、操作がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-238">The operation is not supported on the current platform.</span></span>|  
|<xref:System.RankException>|<span data-ttu-id="5e8fb-239">問題の次元数を含む配列がメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-239">An array with the wrong number of dimensions is passed to a method.</span></span>|  
|<xref:System.TimeoutException>|<span data-ttu-id="5e8fb-240">操作に割り当てられた時間間隔が終了しました。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-240">The time interval allotted to an operation has expired.</span></span>|  
|<xref:System.UriFormatException>|<span data-ttu-id="5e8fb-241">無効な Uniform Resource Identifier (URI) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-241">An invalid Uniform Resource Identifier (URI) is used.</span></span>|  
  
<a name="Custom"></a>   
## <a name="implementing-custom-exceptions"></a><span data-ttu-id="5e8fb-242">カスタム例外を実装します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-242">Implementing custom exceptions</span></span>  
 <span data-ttu-id="5e8fb-243">次の場合、既存の .NET Framework の例外を使用して、エラー状態を処理するための適切ではありません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-243">In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:</span></span>  
  
-   <span data-ttu-id="5e8fb-244">ときに、例外には、既存の .NET Framework の例外にマップできない固有のプログラム エラーが反映されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-244">When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.</span></span>  
  
-   <span data-ttu-id="5e8fb-245">例外の処理とは異なる既存の .NET Framework の例外または例外を適切な処理が必要な場合は、同様の例外から区別する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-245">When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.</span></span> <span data-ttu-id="5e8fb-246">スローする場合など、<xref:System.ArgumentOutOfRangeException>例外のターゲットの整数型の範囲外である文字列の数値表現の解析中に、しない、同じ例外を指定していない呼び出し元に起因するエラーに使用する、メソッドを呼び出すと、適切なのことに制約されている値。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-246">For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.</span></span>  
  
 <span data-ttu-id="5e8fb-247"><xref:System.Exception>クラスは、.NET Framework のすべての例外の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-247">The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework.</span></span> <span data-ttu-id="5e8fb-248">多くの派生クラスのメンバーの継承の動作に依存、 <xref:System.Exception> ; クラスのメンバーをオーバーライドしないで<xref:System.Exception>、またも任意の一意のメンバーを定義しないでください。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-248">Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.</span></span>  
  
 <span data-ttu-id="5e8fb-249">独自の例外クラスを定義するには。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-249">To define your own exception class:</span></span>  
  
1.  <span data-ttu-id="5e8fb-250">継承するクラスを定義<xref:System.Exception>します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-250">Define a class that inherits from <xref:System.Exception>.</span></span> <span data-ttu-id="5e8fb-251">必要に応じて、例外に関する追加情報を提供するクラスに必要な任意の一意のメンバーを定義します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-251">If necessary, define any unique members needed by your class to provide additional information about the exception.</span></span> <span data-ttu-id="5e8fb-252">など、<xref:System.ArgumentException>クラスが含まれています、<xref:System.ArgumentException.ParamName%2A>の引数の例外の原因となったパラメーターの名前を指定するプロパティと<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>プロパティが含まれています、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A>タイムアウト間隔を示すプロパティです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-252">For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.</span></span>  
  
2.  <span data-ttu-id="5e8fb-253">必要に応じて、変更または変更する機能を持つ継承されたメンバーをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-253">If necessary, override any inherited members whose functionality you want to change or modify.</span></span> <span data-ttu-id="5e8fb-254">既存のほとんどを派生クラスの<xref:System.Exception>継承されたメンバーの動作をオーバーライドできません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-254">Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.</span></span>  
  
3.  <span data-ttu-id="5e8fb-255">カスタム例外オブジェクトがシリアル化できるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-255">Determine whether your custom exception object is serializable.</span></span> <span data-ttu-id="5e8fb-256">シリアル化では、例外に関する情報を保存することができ、例外情報をリモート処理コンテキスト内のサーバーとクライアント プロキシで共有を許可します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-256">Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.</span></span> <span data-ttu-id="5e8fb-257">例外オブジェクトをシリアル化可能にするには、マークで、<xref:System.SerializableAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-257">To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
4.  <span data-ttu-id="5e8fb-258">例外クラスのコンス トラクターを定義します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-258">Define the constructors of your exception class.</span></span> <span data-ttu-id="5e8fb-259">通常、例外クラスは、次のコンス トラクターの 1 つ以上あります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-259">Typically, exception classes have one or more of the following constructors:</span></span>  
  
    -   <span data-ttu-id="5e8fb-260"><xref:System.Exception.%23ctor>、既定値を使用する新しい例外オブジェクトのプロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-260"><xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.</span></span>  
  
    -   <span data-ttu-id="5e8fb-261"><xref:System.Exception.%23ctor%28System.String%29>を指定したエラー メッセージが新しい例外オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-261"><xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.</span></span>  
  
    -   <span data-ttu-id="5e8fb-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>を指定したエラー メッセージと内部例外を新しい例外オブジェクトを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.</span></span>  
  
    -   <span data-ttu-id="5e8fb-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>、これは、`protected`からの新しい例外オブジェクトを初期化するコンス トラクターにシリアル化されたデータ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data.</span></span> <span data-ttu-id="5e8fb-264">例外オブジェクトをシリアル化できるようにすることを選択した場合は、このコンス トラクターを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-264">You should implement this constructor if you've chosen to make your exception object serializable.</span></span>  
  
 <span data-ttu-id="5e8fb-265">次の例では、カスタム例外クラスの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-265">The following example illustrates the use of a custom exception class.</span></span> <span data-ttu-id="5e8fb-266">定義、`NotPrimeException`クライアントが素数でない開始番号を指定することによって、素数のシーケンスを取得する場合にスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-266">It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.</span></span> <span data-ttu-id="5e8fb-267">例外は、新しいプロパティを定義します。 `NonPrime`、、以外の素数、例外の原因となったを返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-267">The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception.</span></span> <span data-ttu-id="5e8fb-268">保護されているパラメーターなしのコンス トラクターを持つコンス トラクターを実装するだけでなく<xref:System.Runtime.Serialization.SerializationInfo>と<xref:System.Runtime.Serialization.StreamingContext>パラメーターのシリアル化、`NotPrimeException`クラス定義をサポートする 3 つの追加コンス トラクター、`NonPrime`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-268">Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.</span></span>  <span data-ttu-id="5e8fb-269">各コンス トラクターは、値の非の素数を保持するだけでなく基底クラスのコンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-269">Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.</span></span> <span data-ttu-id="5e8fb-270">`NotPrimeException`クラスが指定されても、<xref:System.SerializableAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-270">The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]
 [!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]  
  
 <span data-ttu-id="5e8fb-271">`PrimeNumberGenerator`次の例に示すようにクラスでは、Sieve of Eratosthenes を使用して、クライアントがそのクラス コンス トラクターの呼び出しで指定された制限を 2 から素数のシーケンスを計算します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-271">The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.</span></span> <span data-ttu-id="5e8fb-272">`GetPrimesFrom`メソッドは指定した下限以上であるすべての素数を返しますが、スロー、`NotPrimeException`その下限の値が素数ではない場合。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-272">The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.</span></span>  
  
 [!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]
 [!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]  
  
 <span data-ttu-id="5e8fb-273">次の例では 2 つの呼び出し、`GetPrimesFrom`メソッドと素数以外をアプリケーション ドメインの境界を越えるうちの 1 つ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-273">The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries.</span></span> <span data-ttu-id="5e8fb-274">どちらの場合も、例外がスローされ、クライアント コードで正常に処理します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-274">In both cases, the exception is thrown and successfully handled in client code.</span></span>  
  
 [!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]
 [!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="5e8fb-275">Windows ランタイムと [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="5e8fb-275">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="5e8fb-276">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]の[!INCLUDE[win8](~/includes/win8-md.md)]、非 .NET Framework のスタック フレームで例外が伝達されるいくつかの例外情報が通常は失われます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-276">In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.</span></span> <span data-ttu-id="5e8fb-277">以降では、[!INCLUDE[net_v451](~/includes/net-v451-md.md)]と[!INCLUDE[win81](~/includes/win81-md.md)]、共通言語ランタイムは引き続き、元の使用<xref:System.Exception>その例外は、非 .NET Framework のスタック フレームに変更されていない場合にスローされたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-277">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-278">次の例で、`catch`処理するために定義されているブロック<xref:System.ArithmeticException>エラー。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-278">The following example demonstrates a `catch` block that is defined to handle <xref:System.ArithmeticException> errors.</span></span> <span data-ttu-id="5e8fb-279">これは、`catch`キャッチでブロックも<xref:System.DivideByZeroException>エラー、ため<xref:System.DivideByZeroException>から派生<xref:System.ArithmeticException>はありません`catch`を明示的に定義されているブロック<xref:System.DivideByZeroException>エラー。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-279">This `catch` block also catches <xref:System.DivideByZeroException> errors, because <xref:System.DivideByZeroException> derives from <xref:System.ArithmeticException> and there is no `catch` block explicitly defined for <xref:System.DivideByZeroException> errors.</span></span>  
  
 [!code-cpp[CatchException#1](~/samples/snippets/cpp/VS_Snippets_CLR/CatchException/CPP/catchexception.cpp#1)]
 [!code-csharp[CatchException#1](~/samples/snippets/csharp/VS_Snippets_CLR/CatchException/CS/catchexception.cs#1)]
 [!code-vb[CatchException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CatchException/VB/catchexception.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="5e8fb-280">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="5e8fb-280">Handling and Throwing Exceptions</span></span></related>
    <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md"><span data-ttu-id="5e8fb-281">デスクトップ アプリケーションでのリソースのパッケージ化と配置</span><span class="sxs-lookup"><span data-stu-id="5e8fb-281">Packaging and Deploying Resources in Desktop Apps</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1"><span data-ttu-id="5e8fb-282">マネージド コードのアサーション</span><span class="sxs-lookup"><span data-stu-id="5e8fb-282">Assertions in Managed Code</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5e8fb-283"><see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-283">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5e8fb-284"><see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-284">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-285">このコンストラクターは、新しいインスタンスの <xref:System.Exception.Message%2A> プロパティを初期化して、その値として、現在のシステムのカルチャを反映した、エラーを説明するシステム提供のメッセージを指定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-285">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="5e8fb-286">すべての派生クラスでは、この既定のコンス トラクターを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-286">All the derived classes should provide this default constructor.</span></span> <span data-ttu-id="5e8fb-287"><xref:System.Exception> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-287">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="5e8fb-288">プロパティ</span><span class="sxs-lookup"><span data-stu-id="5e8fb-288">Property</span></span>|<span data-ttu-id="5e8fb-289">[値]</span><span class="sxs-lookup"><span data-stu-id="5e8fb-289">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="5e8fb-290">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-290">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="5e8fb-291">システム提供のローカライズされた説明。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-291">A system-supplied localized description.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-292">次のコード例では、`Exception`定義済みのメッセージを使用します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-292">The following code example derives an `Exception` that uses a predefined message.</span></span> <span data-ttu-id="5e8fb-293">コードは、基本と派生クラスのパラメーターなしのコンス トラクターの使用を示します`Exception`クラス。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-293">The code demonstrates the use of the parameterless constructor for the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/new.cpp#1)]
 [!code-csharp[System.Exception.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/new.cs#1)]
 [!code-vb[System.Exception.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/new.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new Exception : string -&gt; Exception" Usage="new System.Exception message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="5e8fb-294">エラーを説明するメッセージ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-294">The message that describes the error.</span></span></param>
        <summary><span data-ttu-id="5e8fb-295">指定したエラー メッセージを使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-295">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-296">このコンス トラクターの初期化、<xref:System.Exception.Message%2A>を使用して、新しいインスタンスのプロパティ、`message`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-296">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter.</span></span> <span data-ttu-id="5e8fb-297">場合、`message`パラメーターが`null`、これは、呼び出すことと同じ、<xref:System.Exception.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-297">If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="5e8fb-298"><xref:System.Exception> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-298">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="5e8fb-299">プロパティ</span><span class="sxs-lookup"><span data-stu-id="5e8fb-299">Property</span></span>|<span data-ttu-id="5e8fb-300">[値]</span><span class="sxs-lookup"><span data-stu-id="5e8fb-300">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="5e8fb-301">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-301">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="5e8fb-302">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-302">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-303">次のコード例では、`Exception`特定の条件。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-303">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="5e8fb-304">コードの使い方の基本と派生クラスをパラメーターとして呼び出し元が指定したメッセージを受け取るコンス トラクターの`Exception`クラス。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-304">The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/news.cpp#2)]
 [!code-csharp[System.Exception.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/news.cs#2)]
 [!code-vb[System.Exception.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/news.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new Exception : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; Exception" Usage="new System.Exception (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="5e8fb-305">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-305">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="5e8fb-306">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-306">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="5e8fb-307">シリアル化したデータを使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-307">Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-308">このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-308">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="5e8fb-309">詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-309">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-310">次のコード例は、派生定義シリアル化可能な`Exception`クラス。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-310">The following code example defines a derived serializable `Exception` class.</span></span> <span data-ttu-id="5e8fb-311">コードが強制的に 0 による除算のエラーとを使用して、派生した例外のインスタンスを作成し、(<xref:System.Runtime.Serialization.SerializationInfo>、 <xref:System.Runtime.Serialization.StreamingContext>) コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-311">The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) constructor.</span></span> <span data-ttu-id="5e8fb-312">コードをファイルにインスタンスをシリアル化、新しい例外のスローにファイルを逆シリアル化し、キャッチして、例外のデータが表示されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-312">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5e8fb-313"><paramref name="info" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-313"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><span data-ttu-id="5e8fb-314">クラス名が <see langword="null" /> であるか、<see cref="P:System.Exception.HResult" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-314">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="5e8fb-315">XML シリアル化および SOAP シリアル化</span><span class="sxs-lookup"><span data-stu-id="5e8fb-315">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new Exception : string * Exception -&gt; Exception" Usage="new System.Exception (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="5e8fb-316">例外の原因を説明するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-316">The error message that explains the reason for the exception.</span></span></param>
        <param name="innerException"><span data-ttu-id="5e8fb-317">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-317">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</span></span></param>
        <summary><span data-ttu-id="5e8fb-318">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Exception" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-318">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-319">前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照が格納されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-319">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="5e8fb-320"><xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。`Nothing` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は <xref:System.Exception.InnerException%2A>) を返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-320">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="5e8fb-321"><xref:System.Exception> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-321">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="5e8fb-322">プロパティ</span><span class="sxs-lookup"><span data-stu-id="5e8fb-322">Property</span></span>|<span data-ttu-id="5e8fb-323">[値]</span><span class="sxs-lookup"><span data-stu-id="5e8fb-323">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="5e8fb-324">内部例外の参照。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-324">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="5e8fb-325">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-325">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-326">次のコード例では、`Exception`特定の条件。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-326">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="5e8fb-327">コードは、メッセージと内部例外の基本と派生クラスの両方のパラメーターとして受け取るコンス トラクターの使用を示します`Exception`クラス。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-327">The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/newsi.cpp#3)]
 [!code-csharp[System.Exception.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/newsi.cs#3)]
 [!code-vb[System.Exception.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/newsi.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Data" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::IDictionary ^ Data { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Collections.IDictionary" Usage="System.Exception.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-328">例外に関する追加のユーザー定義情報を提供する、キー/値ペアのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-328">Gets a collection of key/value pairs that provide additional user-defined information about the exception.</span></span></summary>
        <value><span data-ttu-id="5e8fb-329"><see cref="T:System.Collections.IDictionary" /> インターフェイスを実装し、ユーザー定義のキー/値ペアのコレクションを格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-329">An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs.</span></span> <span data-ttu-id="5e8fb-330">既定値は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-330">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-331">使用して、<xref:System.Collections.IDictionary?displayProperty=nameWithType>によって返されるオブジェクト、<xref:System.Exception.Data%2A>プロパティを格納および例外に関連する補足情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-331">Use the <xref:System.Collections.IDictionary?displayProperty=nameWithType> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception.</span></span> <span data-ttu-id="5e8fb-332">情報は任意の数のユーザー定義のキー/値ペアの形式です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-332">The information is in the form of an arbitrary number of user-defined key/value pairs.</span></span> <span data-ttu-id="5e8fb-333">各キー/値ペアのキー コンポーネントは、問題を識別する文字列では通常ペアの値のコンポーネントは任意の種類のオブジェクトであることができます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-333">The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.</span></span>  
  
## <a name="keyvalue-pair-security"></a><span data-ttu-id="5e8fb-334">キー/値ペアのセキュリティ</span><span class="sxs-lookup"><span data-stu-id="5e8fb-334">Key/Value Pair Security</span></span>  
 <span data-ttu-id="5e8fb-335">によって返されるコレクションに格納されているキー/値のペア、<xref:System.Exception.Data%2A>プロパティは、安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-335">The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure.</span></span> <span data-ttu-id="5e8fb-336">アプリケーションを呼び出すと、入れ子になった一連のルーチンの各ルーチンには、例外ハンドラーが含まれている場合は、結果のコール スタックには、これらの例外ハンドラーの階層が含まれています。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-336">If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.</span></span> <span data-ttu-id="5e8fb-337">低レベル ルーチンでは、例外をスローする場合、呼び出しスタックの階層内のいずれかの上位レベルの例外ハンドラーは読み取りや、他の例外ハンドラーによって、コレクションに格納されているキー/値ペアを変更します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-337">If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.</span></span> <span data-ttu-id="5e8fb-338">つまり、キー/値ペア内の情報が機密ではないと、アプリケーションが、キー/値ペア内の情報が破損している場合に、正常に動作が保証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-338">This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.</span></span>  
  
## <a name="key-conflicts"></a><span data-ttu-id="5e8fb-339">キーの競合</span><span class="sxs-lookup"><span data-stu-id="5e8fb-339">Key Conflicts</span></span>  
 <span data-ttu-id="5e8fb-340">キーの競合は、別の例外ハンドラー、キー/値のペアへのアクセスに同じキーを指定する場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-340">A key conflict occurs when different exception handlers specify the same key to access a key/value pair.</span></span> <span data-ttu-id="5e8fb-341">キーの競合の結果には、下位レベルの例外ハンドラーより高度な例外ハンドラーと通信できる誤ってをこの通信プログラムの微妙なエラーが発生する可能性がありますので、アプリケーションを開発する際に、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-341">Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.</span></span> <span data-ttu-id="5e8fb-342">ただし、注意が必要ですが、アプリケーションを強化するためにキーの競合を使用できます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-342">However, if you are cautious you can use key conflicts to enhance your application.</span></span>  
  
## <a name="avoiding-key-conflicts"></a><span data-ttu-id="5e8fb-343">キーの競合を避ける</span><span class="sxs-lookup"><span data-stu-id="5e8fb-343">Avoiding Key Conflicts</span></span>  
 <span data-ttu-id="5e8fb-344">キー/値ペアの一意のキーを生成する名前付け規則を採用することでキーの競合を回避します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-344">Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.</span></span> <span data-ttu-id="5e8fb-345">たとえば、名前付け規則では、アプリケーションのピリオドで区切った名前で構成されるキーのペア、および一意の識別子の補足情報を提供するメソッドを生成可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-345">For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.</span></span>  
  
 <span data-ttu-id="5e8fb-346">たとえば、2 つのアプリケーションには、製品と仕入先がという名前をそれぞれ Sales という名前のメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-346">Suppose two applications, named Products and Suppliers, each has a method named Sales.</span></span> <span data-ttu-id="5e8fb-347">製品のアプリケーションで Sales メソッドでは、製品の識別番号 (在庫の単位または SKU の管理) を提供します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-347">The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.</span></span> <span data-ttu-id="5e8fb-348">Id 番号、または SID、サプライヤーのサプライヤー アプリケーション内の Sales メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-348">The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.</span></span> <span data-ttu-id="5e8fb-349">そのため、この例の名前付け規則は、"Products.Sales.SKU"と"Suppliers.Sales.SID"キーを生成します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-349">Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</span></span>  
  
## <a name="exploiting-key-conflicts"></a><span data-ttu-id="5e8fb-350">キーの競合を悪用します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-350">Exploiting Key Conflicts</span></span>  
 <span data-ttu-id="5e8fb-351">キーの競合を悪用するには、1 つ以上の特殊な既定のキーの存在を使用して処理を制御します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-351">Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.</span></span> <span data-ttu-id="5e8fb-352">たとえば、1 つのシナリオでは、コール スタックの階層で最上位レベルの例外ハンドラーは、下位レベルの例外ハンドラーによってスローされたすべての例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-352">Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.</span></span> <span data-ttu-id="5e8fb-353">高度な例外ハンドラーが内の残りのキー/値ペアを書式設定する特殊なキーとキー/値ペアが存在する場合、<xref:System.Collections.IDictionary>オブジェクトでは、残りのキー/値ペアが通常の方法で書式設定、それ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-353">If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</span></span>  
  
 <span data-ttu-id="5e8fb-354">これでと、別のシナリオでコール スタックの階層の各レベルでの例外ハンドラーは、[次へ] の下位レベルの例外ハンドラーによってスローされた例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-354">Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.</span></span> <span data-ttu-id="5e8fb-355">さらに、各例外ハンドラーがによって返されるコレクションを知っている、<xref:System.Exception.Data%2A>プロパティに既定の一連のキーでアクセスできるキー/値ペアのセットが含まれています。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-355">In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.</span></span>  
  
 <span data-ttu-id="5e8fb-356">各例外ハンドラーでは、その例外ハンドラーに固有の情報に対応するキー/値ペアの値のコンポーネントを更新するのにキーの既定のセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-356">Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.</span></span> <span data-ttu-id="5e8fb-357">更新プロセスが完了したら、例外ハンドラーは、次のより高度な例外ハンドラーに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-357">After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.</span></span> <span data-ttu-id="5e8fb-358">最後に、最上位レベルの例外ハンドラーは、キー/値ペアにアクセスし、すべての下位レベルの例外ハンドラーから統合の更新プログラムの情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-358">Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-359">次の例では、追加しを使用して情報を取得する方法、<xref:System.Exception.Data%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-359">The following example demonstrates how to add and retrieve information using the <xref:System.Exception.Data%2A> property.</span></span>  
  
 [!code-cpp[exception.data#1](~/samples/snippets/cpp/VS_Snippets_CLR/exception.data/CPP/data.cpp#1)]
 [!code-csharp[exception.data#1](~/samples/snippets/csharp/VS_Snippets_CLR/exception.data/CS/data.cs#1)]
 [!code-vb[exception.data#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/exception.data/VB/data.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.DictionaryEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetBaseException">
      <MemberSignature Language="C#" Value="public virtual Exception GetBaseException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Exception GetBaseException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetBaseException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBaseException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Exception ^ GetBaseException();" />
      <MemberSignature Language="F#" Value="abstract member GetBaseException : unit -&gt; Exception&#xA;override this.GetBaseException : unit -&gt; Exception" Usage="exception.GetBaseException " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetBaseException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5e8fb-360">派生クラスでオーバーライドされた場合、それ以後に発生する 1 つ以上の例外の主要な原因である <see cref="T:System.Exception" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-360">When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</span></span></summary>
        <returns><span data-ttu-id="5e8fb-361">例外のチェインでスローされた最初の例外。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-361">The first exception thrown in a chain of exceptions.</span></span> <span data-ttu-id="5e8fb-362">現在の例外の <see cref="P:System.Exception.InnerException" /> プロパティが null 参照 (Visual Basic の場合は <see langword="Nothing" />) である場合、このプロパティは現在の例外を返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-362">If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (<see langword="Nothing" /> in Visual Basic), this property returns the current exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-363">例外のチェーンから成る例外のセットで参照されている例外の直接の結果として、チェーン内の各例外がスローされるように、`InnerException`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-363">A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property.</span></span> <span data-ttu-id="5e8fb-364">チェーンの指定した場合、チェーン内の他のすべての例外の根本原因である 1 つだけ例外があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-364">For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.</span></span> <span data-ttu-id="5e8fb-365">この例外は、基本の例外と呼ばれる、その`InnerException`プロパティには常に null 参照が含まれています。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-365">This exception is called the base exception and its `InnerException` property always contains a null reference.</span></span>  
  
 <span data-ttu-id="5e8fb-366">例外のチェーン内のすべての例外、`GetBaseException`メソッドは、同じオブジェクト (基本例外) を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-366">For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception).</span></span>  
  
 <span data-ttu-id="5e8fb-367">使用して、`GetBaseException`メソッド例外の根本原因を見つけるには、現在の例外と、最初の例外の発生した可能性がある例外について必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-367">Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-368">次のコード例では、2 つの派生を定義します`Exception`クラス。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-368">The following code example defines two derived `Exception` classes.</span></span> <span data-ttu-id="5e8fb-369">例外を強制し、各派生クラスで再度スローします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-369">It forces an exception and then throws it again with each of the derived classes.</span></span> <span data-ttu-id="5e8fb-370">コードの使用を示しています、`GetBaseException`元の例外を取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-370">The code shows the use of the `GetBaseException` method to retrieve the original exception.</span></span>  
  
 [!code-cpp[System.Exception.GetBaseException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CPP/getbaseexc.cpp#1)]
 [!code-csharp[System.Exception.GetBaseException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CS/getbaseexc.cs#1)]
 [!code-vb[System.Exception.GetBaseException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetBaseException/VB/getbaseexc.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5e8fb-371"><see langword="GetBaseException" />メソッドが例外内容または形式に対する制御を必要とするクラスでオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-371">The <see langword="GetBaseException" /> method is overridden in classes that require control over the exception content or format.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="exception.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="5e8fb-372">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-372">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="5e8fb-373">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-373">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="5e8fb-374">派生クラスでオーバーライドされた場合は、その例外に関する情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-374">When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-375">`GetObjectData` は、シリアル化する対象のすべての例外オブジェクト データを使用して、<xref:System.Runtime.Serialization.SerializationInfo> を設定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-375">`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization.</span></span> <span data-ttu-id="5e8fb-376">逆シリアル化中に、ストリームで転送された `SerializationInfo` から例外が再構成されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-376">During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-377">次のコード例は、派生定義シリアル化可能な`Exception`を実装するクラス`GetObjectData`、2 つのプロパティに軽微な変更は、これとし、呼び出しの基本クラスをシリアル化を実行します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-377">The following code example defines a derived serializable `Exception` class that implements `GetObjectData`, which makes minor changes to two properties and then calls the base class to perform the serialization.</span></span> <span data-ttu-id="5e8fb-378">この例では、強制的に 0 による除算エラーしから派生した例外のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-378">The example forces a divide-by-0 error and then creates an instance of the derived exception.</span></span> <span data-ttu-id="5e8fb-379">コードをファイルにインスタンスをシリアル化、新しい例外のスローにファイルを逆シリアル化し、キャッチして、例外のデータが表示されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-379">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5e8fb-380"><paramref name="info" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-380">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5e8fb-381">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-381">requires full trust for the immediate caller.</span></span> <span data-ttu-id="5e8fb-382">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-382">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="exception.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5e8fb-383">現在のインスタンスのランタイム型を取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-383">Gets the runtime type of the current instance.</span></span></summary>
        <returns><span data-ttu-id="5e8fb-384">現在のインスタンスの正確なランタイム型を表す <see cref="T:System.Type" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-384">A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-385"><xref:System.Exception.GetType%2A>メソッドは、.NET Framework インフラストラクチャをサポートするために存在し、内部的には、基本的なメソッドを呼び出します<xref:System.Object.GetType%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-385">The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="HelpLink">
      <MemberSignature Language="C#" Value="public virtual string HelpLink { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpLink" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HelpLink" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpLink As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpLink { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpLink : string with get, set" Usage="System.Exception.HelpLink" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.HelpLink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-386">この例外に関連付けられているヘルプ ファイルへのリンクを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-386">Gets or sets a link to the help file associated with this exception.</span></span></summary>
        <value><span data-ttu-id="5e8fb-387">URN (Uniform Resource Name) または URL (Uniform Resource Locator)。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-387">The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-388">ヘルプ ファイルを表す戻り値は、URN または URL です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-388">The return value, which represents a help file, is a URN or URL.</span></span> <span data-ttu-id="5e8fb-389">たとえば、`HelpLink`値可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-389">For example, the `HelpLink` value could be:</span></span>  
  
 <span data-ttu-id="5e8fb-390">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span><span class="sxs-lookup"><span data-stu-id="5e8fb-390">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-391">次のコード例がスローされます、`Exception`設定、`HelpLink`プロパティでは、コンス トラクターとし、キャッチされた例外と表示`HelpLink`します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-391">The following code example throws an `Exception` that sets the `HelpLink` property in its constructor and then catches the exception and displays `HelpLink`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HResult">
      <MemberSignature Language="C#" Value="public int HResult { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HResult" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HResult" />
      <MemberSignature Language="VB.NET" Value="Public Property HResult As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:  property int HResult {  public:&#xA;int get(); protected:&#xA; void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HResult : int with get, set" Usage="System.Exception.HResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-392">特定の例外に割り当てられているコード化数値である HRESULT を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-392">Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</span></span></summary>
        <value><span data-ttu-id="5e8fb-393">HRESULT 値。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-393">The HRESULT value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-394">HRESULT は 32 ビット値は、3 つのフィールドに分かれています。 重大度コード、機能コード、およびエラー コード。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-394">HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.</span></span> <span data-ttu-id="5e8fb-395">重大度コードでは、戻り値が、情報、警告、またはエラーを表すかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-395">The severity code indicates whether the return value represents information, warning, or error.</span></span> <span data-ttu-id="5e8fb-396">機能コードでは、エラーの原因のシステムの領域を識別します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-396">The facility code identifies the area of the system responsible for the error.</span></span> <span data-ttu-id="5e8fb-397">エラー コードは、例外を表すために割り当てられている一意の番号です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-397">The error code is a unique number that is assigned to represent the exception.</span></span> <span data-ttu-id="5e8fb-398">各例外は、個別の HRESULT にマップされます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-398">Each exception is mapped to a distinct HRESULT.</span></span> <span data-ttu-id="5e8fb-399">マネージ コードでは、例外をスローするときに、ランタイムは、HRESULT を COM クライアントに渡します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-399">When managed code throws an exception, the runtime passes the HRESULT to the COM client.</span></span> <span data-ttu-id="5e8fb-400">アンマネージ コードにエラーが返されるときは、HRESULT が、ランタイムによってスローされる例外に変換されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-400">When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</span></span> <span data-ttu-id="5e8fb-401">HRESULT 値と、対応する .NET Framework の例外については、次を参照してください。[方法。Hresult に例外](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-401">For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span> <span data-ttu-id="5e8fb-402">参照してください[の共通 HRESULT 値](https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx)が発生する最も高い値の一覧については、Windows ドキュメント。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-402">See [Common HRESULT Values](https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.</span></span>  
  
 <span data-ttu-id="5e8fb-403">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Exception.HResult%2A>プロパティの set アクセス操作子が保護されている、その取得メソッドはパブリックです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-403">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.</span></span>  <span data-ttu-id="5e8fb-404">.NET Framework の以前のバージョンでは、getter と setter の両方を保護します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-404">In previous versions of the .NET Framework, both getter and setter are protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-405">次のコード例を定義する派生`Exception`設定クラス、`HResult`プロパティをそのコンス トラクターでカスタム値にします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-405">The following code example defines a derived `Exception` class that sets the `HResult` property to a custom value in its constructor.</span></span>  
  
 [!code-cpp[System.Exception.HResult#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.HResult/CPP/hresult.cpp#1)]
 [!code-csharp[System.Exception.HResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.HResult/CS/hresult.cs#1)]
 [!code-vb[System.Exception.HResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.HResult/VB/hresult.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/610b364b-2761-429d-9c4a-afbc3e66f1b9"><span data-ttu-id="5e8fb-406">方法: HRESULT に例外を割り当てる</span><span class="sxs-lookup"><span data-stu-id="5e8fb-406">How to: Map HRESULTs and Exceptions</span></span></related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx"><span data-ttu-id="5e8fb-407">共通 HRESULT 値</span><span class="sxs-lookup"><span data-stu-id="5e8fb-407">Common HRESULT Values</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InnerException">
      <MemberSignature Language="C#" Value="public Exception InnerException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception InnerException" />
      <MemberSignature Language="DocId" Value="P:System.Exception.InnerException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ InnerException { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerException : Exception" Usage="System.Exception.InnerException" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.InnerException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-408">現在の例外の原因となる <see cref="T:System.Exception" /> インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-408">Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</span></span></summary>
        <value><span data-ttu-id="5e8fb-409">現在の例外を発生させたエラーを説明するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-409">An object that describes the error that caused the current exception.</span></span> <span data-ttu-id="5e8fb-410"><see cref="P:System.Exception.InnerException" /> プロパティは、<see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> コンストラクターに渡されたものと同じ値を返します。内部例外の値がコンストラクターに渡されなかった場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-410">The <see cref="P:System.Exception.InnerException" /> property returns the same value as was passed into the <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> constructor, or <see langword="null" /> if the inner exception value was not supplied to the constructor.</span></span> <span data-ttu-id="5e8fb-411">このプロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-411">This property is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-412">ときに例外`X`直前の例外の直接の結果としてスローされる`Y`、<xref:System.Exception.InnerException%2A>プロパティの`X`への参照を含める必要があります`Y`します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-412">When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`.</span></span>  
  
 <span data-ttu-id="5e8fb-413"><xref:System.Exception.InnerException%2A> プロパティを使用して、現在の例外の原因になった例外のセットを取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-413">Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.</span></span>  
  
 <span data-ttu-id="5e8fb-414">以前の例外をキャッチする新しい例外を作成することができます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-414">You can create a new exception that catches an earlier exception.</span></span> <span data-ttu-id="5e8fb-415">2 つ目の例外を処理、エラーをより適切に処理するために以前の例外から追加情報に使用するコードです。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-415">The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</span></span>  
  
 <span data-ttu-id="5e8fb-416">ファイルを読み取り、そのファイルからデータを書式設定する関数があるとします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-416">Suppose that there is a function that reads a file and formats the data from that file.</span></span> <span data-ttu-id="5e8fb-417">コード ファイルを読み取るしようと、この例では、<xref:System.IO.IOException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-417">In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown.</span></span> <span data-ttu-id="5e8fb-418">関数をキャッチ、<xref:System.IO.IOException>をスローし、<xref:System.IO.FileNotFoundException>します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-418">The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>.</span></span> <span data-ttu-id="5e8fb-419"><xref:System.IO.IOException>で保存できませんでした、<xref:System.Exception.InnerException%2A>のプロパティ、 <xref:System.IO.FileNotFoundException>、キャッチするコードを有効にすると、<xref:System.IO.FileNotFoundException>最初のエラーの原因を確認します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-419">The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.</span></span>  
  
 <span data-ttu-id="5e8fb-420"><xref:System.Exception.InnerException%2A>例外オブジェクトの初期化時に、内部例外への参照を保持するプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-420">The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-421">次の例は、スローおよび内部例外を参照する例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-421">The following example demonstrates throwing and catching an exception that references an inner exception.</span></span>  
  
 [!code-cpp[InnerEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/InnerEx/CPP/innerex.cpp#1)]
 [!code-csharp[InnerEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/InnerEx/CS/innerex.cs#1)]
 [!code-vb[InnerEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InnerEx/VB/innerex.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public virtual string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Exception.Message" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Message</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-422">現在の例外を説明するメッセージを取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-422">Gets a message that describes the current exception.</span></span></summary>
        <value><span data-ttu-id="5e8fb-423">例外の理由を説明するエラー メッセージ、または空の文字列 ("")。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-423">The error message that explains the reason for the exception, or an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-424">エラー メッセージは、例外を処理する開発者を対象します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-424">Error messages target the developer who is handling the exception.</span></span> <span data-ttu-id="5e8fb-425">テキスト、<xref:System.Exception.Message%2A>プロパティは、エラーを完全に記述する必要があり、可能であれば、する必要があります、エラーを修正する方法を説明もします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-425">The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error.</span></span> <span data-ttu-id="5e8fb-426">最上位の例外ハンドラーが、エンドユーザーのメッセージを表示するには、のでが文法的に正しいことと、メッセージの各文がピリオドで終わることをことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-426">Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.</span></span> <span data-ttu-id="5e8fb-427">疑問符 (?) または感嘆符は使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-427">Do not use question marks or exclamation points.</span></span> <span data-ttu-id="5e8fb-428">アプリケーションでは、ローカライズされた例外メッセージを使用する場合は、正確に変換されていることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-428">If your application uses localized exception messages, you should ensure that they are accurately translated.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5e8fb-429">適切なアクセス許可をチェックすることがなく例外メッセージに機密情報が開示されません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-429">Do not disclose sensitive information in exception messages without checking for the appropriate permissions.</span></span>  
  
 <span data-ttu-id="5e8fb-430">値、<xref:System.Exception.Message%2A>によって返される情報のプロパティが含まれている<xref:System.Exception.ToString%2A>します。<xref:System.Exception.Message%2A>プロパティが設定を作成するときにのみ、<xref:System.Exception>します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-430">The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>.</span></span> <span data-ttu-id="5e8fb-431">現在のインスタンスのコンス トラクターにメッセージが指定されていない場合、システムは現在のシステム カルチャを使用して書式設定されている既定のメッセージを提供します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-431">If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</span></span>  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="5e8fb-432">Windows ランタイムと [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="5e8fb-432">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="5e8fb-433">以降では、[!INCLUDE[net_v451](~/includes/net-v451-md.md)]と[!INCLUDE[win81](~/includes/win81-md.md)]、Windows ランタイム型と .NET Framework の一部ではないメンバーから継承される例外からエラー メッセージの忠実性が向上しています。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-433">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.</span></span> <span data-ttu-id="5e8fb-434">具体的には、Visual C コンポーネント拡張からメッセージを例外 (C +/cli CX) .NET Framework のバックアップに反映させるようになりました<xref:System.Exception>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-434">In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-435">次のコード例をスローおよびキャッチし、<xref:System.Exception>例外、例外のテキストが表示されますを使用してメッセージ、<xref:System.Exception.Message%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-435">The following code example throws and then catches an <xref:System.Exception> exception and displays the exception's text message using the <xref:System.Exception.Message%2A> property.</span></span>
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5e8fb-436">プロパティから例外をスローしてのテキスト内で参照する必要がある場合<see cref="P:System.Exception.Message" />を設定または取得するプロパティの引数には、プロパティ引数の名前として"value"を使用します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-436">If you throw an exception from a property, and you need to refer in the text of <see cref="P:System.Exception.Message" /> to the property argument that you set or get, use "value" as the name of the property argument.</span></span></para></block>
        <block subset="none" type="overrides"><para><span data-ttu-id="5e8fb-437"><see cref="P:System.Exception.Message" />プロパティがメッセージの内容または形式の制御を必要とするクラスでオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-437">The <see cref="P:System.Exception.Message" /> property is overridden in classes that require control over message content or format.</span></span> <span data-ttu-id="5e8fb-438">アプリケーション コードがキャッチされた例外についての情報を表示する必要があるとき、このプロパティを通常にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-438">Application code typically accesses this property when it needs to display information about an exception that has been caught.</span></span>  
  
<span data-ttu-id="5e8fb-439">エラー メッセージをローカライズする必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-439">The error message should be localized.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SerializeObjectState">
      <MemberSignature Language="C#" Value="protected event EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState" />
      <MemberSignature Language="DocId" Value="E:System.Exception.SerializeObjectState" />
      <MemberSignature Language="VB.NET" Value="Protected Custom Event SerializeObjectState As EventHandler(Of SafeSerializationEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; event EventHandler&lt;System::Runtime::Serialization::SafeSerializationEventArgs ^&gt; ^ SerializeObjectState;" />
      <MemberSignature Language="F#" Value="member this.SerializeObjectState : EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " Usage="member this.SerializeObjectState : System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-440">例外がシリアル化され、例外に関するシリアル化されたデータを含む例外状態オブジェクトが作成されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-440">Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-441">例外の状態オブジェクトを実装して、<xref:System.Runtime.Serialization.ISafeSerializationData>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-441">The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 <span data-ttu-id="5e8fb-442">ときに、<xref:System.Exception.SerializeObjectState>イベントをサブスクライブすると、例外が逆シリアル化し、空の例外として作成します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-442">When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception.</span></span> <span data-ttu-id="5e8fb-443">例外のコンス トラクターが実行されないと、例外の状態を逆シリアル化もします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-443">The exception's constructor is not run, and the exception state is also deserialized.</span></span> <span data-ttu-id="5e8fb-444"><xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A>例外状態オブジェクトのコールバック メソッドに空の例外を逆シリアル化されたデータをプッシュすることができます、ように通知されます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-444">The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.</span></span>  
  
 <span data-ttu-id="5e8fb-445"><xref:System.Exception.SerializeObjectState>イベントにより、例外データを逆シリアル化およびシリアル化する透過的な例外の種類。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-445">The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data.</span></span> <span data-ttu-id="5e8fb-446">透過的なコード内で、それが動作しているアクセス許可セットの範囲内のコマンドを実行ことはできません実行を呼び出す、派生元のしたりクリティカルなコードを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-446">Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.</span></span>  
  
 <span data-ttu-id="5e8fb-447">場合、<xref:System.Exception.SerializeObjectState>イベントがサブスクライブしていない、逆シリアル化の発生を使用して通常どおり、<xref:System.Exception.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-447">If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="5e8fb-448">ハンドラーでは、通常、<xref:System.Exception.SerializeObjectState>そのシリアル化を提供する例外のコンス トラクターでイベントを追加します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-448">Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization.</span></span> <span data-ttu-id="5e8fb-449">コンス トラクターがないため、ときに実行、<xref:System.Exception.SerializeObjectState>イベント ハンドラーが実行される、スロー、逆シリアル化された例外をシリアル化することができます、<xref:System.Runtime.Serialization.SerializationException>例外、例外を逆シリアル化しようとするとします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-449">But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception.</span></span> <span data-ttu-id="5e8fb-450">これを回避するにはのハンドラーを追加する必要がありますも、<xref:System.Exception.SerializeObjectState>内のイベント、<xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-450">To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5e8fb-451">説明については、「例」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-451">See the Examples section for an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-452">次の例では、定義、`BadDivisionException`を処理する、<xref:System.Exception.SerializeObjectState>イベント。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-452">The following example defines a `BadDivisionException` that handles the <xref:System.Exception.SerializeObjectState> event.</span></span> <span data-ttu-id="5e8fb-453">これは、入れ子になった状態のオブジェクトも含まれています。 という名前の構造`BadDivisionExceptionState`を実装する、<xref:System.Runtime.Serialization.ISafeSerializationData>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-453">It also contains a state object, which is a nested structure named `BadDivisionExceptionState` that implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 [!code-csharp[System.Exception.SerializeObjectState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.serializeobjectstate/cs/example2.cs#1)]
 [!code-vb[System.Exception.SerializeObjectState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.serializeobjectstate/vb/example2.vb#1)]  
  
 <span data-ttu-id="5e8fb-454">`BadDivisionException` 0 による浮動小数点除算が発生したときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-454">The `BadDivisionException` exception is thrown when a floating-point division by zero occurs.</span></span> <span data-ttu-id="5e8fb-455">例では、インスタンス化中 0 による除算の最初に、`BadDivisionException`オブジェクト、シリアル化、および例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-455">During the first division by zero, the example instantiates a `BadDivisionException` object, serializes it, and throws the exception.</span></span> <span data-ttu-id="5e8fb-456">0 による後続の部門が発生すると、例が既にシリアル化されたオブジェクトを逆シリアル化、なって、および例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-456">When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception.</span></span> <span data-ttu-id="5e8fb-457">オブジェクトのシリアル化、逆シリアル化、シリアル、および逆シリアル化のために、例、<xref:System.Exception.SerializeObjectState>両方で、イベント ハンドラー、`BadDivisionException`クラスのコンス トラクターと、<xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType>実装します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-457">To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <xref:System.Exception.SerializeObjectState> event handler both in the `BadDivisionException` class constructor and in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5e8fb-458">このイベントは購読し、使用した場合、以下の継承階層内のすべての派生型は同じシリアル化機構を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-458">If this event is subscribed to and used, all derived types that follow in the inheritance hierarchy must implement the same serialization mechanism.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public virtual string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Source" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Exception.Source" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Source</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-459">エラーの原因となるアプリケーションまたはオブジェクトの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-459">Gets or sets the name of the application or the object that causes the error.</span></span></summary>
        <value><span data-ttu-id="5e8fb-460">エラーの原因となるアプリケーションまたはオブジェクトの名前。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-460">The name of the application or the object that causes the error.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-461">場合、<xref:System.Exception.Source%2A>プロパティが明示的に設定されていない、ランタイムが自動的に設定が、例外が発生したアセンブリの名前にします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-461">If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-462">次の例がスローされます、`Exception`設定、`Source`プロパティでは、コンス トラクターとし、キャッチされた例外と表示`Source`します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-462">The following example throws an `Exception` that sets the `Source` property in its constructor and then catches the exception and displays `Source`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5e8fb-463">このオブジェクトはランタイム <see cref="N:System.Reflection" /> オブジェクトでなければなりません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-463">The object must be a runtime <see cref="N:System.Reflection" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StackTrace">
      <MemberSignature Language="C#" Value="public virtual string StackTrace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StackTrace" />
      <MemberSignature Language="DocId" Value="P:System.Exception.StackTrace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StackTrace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ StackTrace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StackTrace : string" Usage="System.Exception.StackTrace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.StackTrace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-464">呼び出し履歴で直前のフレームの文字列形式を取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-464">Gets a string representation of the immediate frames on the call stack.</span></span></summary>
        <value><span data-ttu-id="5e8fb-465">呼び出し履歴の直前のフレームを説明する文字列。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-465">A string that describes the immediate frames of the call stack.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-466">実行スタックは、指定された時点で実行されているすべてのメソッドを追跡します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-466">The execution stack keeps track of all the methods that are in execution at a given instant.</span></span> <span data-ttu-id="5e8fb-467">メソッド呼び出しのトレースは、スタック トレースと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-467">A trace of the method calls is called a stack trace.</span></span> <span data-ttu-id="5e8fb-468">スタック トレースの一覧は、例外が発生したメソッドの行番号に呼び出し履歴を追跡する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-468">The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</span></span>  
  
 <span data-ttu-id="5e8fb-469"><xref:System.Exception.StackTrace%2A>プロパティは、例外がスローされた場所で行われた呼び出し履歴のフレームを返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-469">The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown.</span></span> <span data-ttu-id="5e8fb-470">新しいインスタンスを作成して、呼び出し履歴フレームに関する情報を取得できます、<xref:System.Diagnostics.StackTrace?displayProperty=nameWithType>クラスとを使用してその<xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-470">You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5e8fb-471">アプリケーション コードで例外がスローされるたびに、共通言語ランタイム (CLR) は、スタック トレースを更新 (を使用して、`throw`キーワード)。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-471">The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword).</span></span> <span data-ttu-id="5e8fb-472">スタック トレースが、例外がスローされた当初、メソッド内の場所と、例外があった場所メソッド内の場所の両方を含む例外がスローされましたが、メソッドと異なるメソッドで再スローされた場合再スローされます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-472">If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.</span></span> <span data-ttu-id="5e8fb-473">例外がスローされると後で再度スローされ、同じメソッドの場合、スタック トレースには、場所と、例外が再度スローされますが、例外をスローした場所には含まれませんのみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-473">If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</span></span>  
  
 <span data-ttu-id="5e8fb-474"><xref:System.Exception.StackTrace%2A>プロパティは多くのメソッド呼び出しなどのためのコード変換、期待どおりに、報告がインライン化、最適化中に発生しました。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-474">The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-475">次のコード例がスローされます、`Exception`し、それをキャッチして使用してスタック トレースが表示されます、、`StackTrace`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-475">The following code example throws an `Exception` and then catches it and displays a stack trace using the `StackTrace` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5e8fb-476"><see langword="StackTrace" />プロパティがスタック トレースの内容または形式の制御を必要とするクラスでオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-476">The <see langword="StackTrace" /> property is overridden in classes that require control over the stack trace content or format.</span></span>  
  
<span data-ttu-id="5e8fb-477">既定では、スタック トレースは、例外オブジェクトがスローされる直前にキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-477">By default, the stack trace is captured immediately before an exception object is thrown.</span></span> <span data-ttu-id="5e8fb-478">使用<see cref="P:System.Environment.StackTrace" />例外がスローされていないときに、スタック トレース情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-478">Use <see cref="P:System.Environment.StackTrace" /> to get stack trace information when no exception is being thrown.</span></span></para></block>
        <altmember cref="P:System.Environment.StackTrace" />
      </Docs>
    </Member>
    <Member MemberName="TargetSite">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodBase TargetSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase TargetSite" />
      <MemberSignature Language="DocId" Value="P:System.Exception.TargetSite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetSite As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodBase ^ TargetSite { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetSite : System.Reflection.MethodBase" Usage="System.Exception.TargetSite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.TargetSite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5e8fb-479">現在の例外がスローされたメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-479">Gets the method that throws the current exception.</span></span></summary>
        <value><span data-ttu-id="5e8fb-480">現在の例外をスローした <see cref="T:System.Reflection.MethodBase" />。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-480">The <see cref="T:System.Reflection.MethodBase" /> that threw the current exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-481">この例外をスローするメソッドがないし、スタック トレースが null 参照ではない場合 (`Nothing` Visual basic)、<xref:System.Exception.TargetSite%2A>スタック トレースからメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-481">If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace.</span></span> <span data-ttu-id="5e8fb-482">スタック トレースが null 参照であると、<xref:System.Exception.TargetSite%2A> も null 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-482">If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e8fb-483"><xref:System.Exception.TargetSite%2A>プロパティは、例外がスローされた例外ハンドラーがアプリケーション ドメイン境界を越えて例外を処理する場合、メソッドの名前を正確に表示されない場合があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-483">The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-484">次のコード例がスローされます、`Exception`し、それをキャッチして、発信元を使用する方法が表示されます、`TargetSite`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-484">The following code example throws an `Exception` and then catches it and displays the originating method using the `TargetSite` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="exception.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5e8fb-485">現在の例外の文字列形式を作成して返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-485">Creates and returns a string representation of the current exception.</span></span></summary>
        <returns><span data-ttu-id="5e8fb-486">現在の例外の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-486">A string representation of the current exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e8fb-487"><xref:System.Exception.ToString%2A> 人間が理解できるものでは現在の例外の表現を返します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-487"><xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans.</span></span> <span data-ttu-id="5e8fb-488">例外には、カルチャに依存するデータが含まれる、文字列形式にによって返されます`ToString`する現在のシステム カルチャが考慮が必要です。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-488">Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture.</span></span> <span data-ttu-id="5e8fb-489">返される文字列の形式については、正確な要件はありませんは、ユーザー側で認識されるオブジェクトの値を反映するように試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-489">Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</span></span>  
  
 <span data-ttu-id="5e8fb-490">既定の実装<xref:System.Exception.ToString%2A>を現在の例外、メッセージ、呼び出しの結果をスローしたクラスの名前を取得します。<xref:System.Exception.ToString%2A>内部例外、および呼び出しの結果で<xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-490">The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5e8fb-491">これらのメンバーのいずれかが場合`null`、その値が返される文字列に含まれません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-491">If any of these members is `null`, its value is not included in the returned string.</span></span>  
  
 <span data-ttu-id="5e8fb-492">エラー メッセージがない場合、または空の文字列である場合 ("")、エラー メッセージが返されません。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-492">If there is no error message or if it is an empty string (""), then no error message is returned.</span></span> <span data-ttu-id="5e8fb-493">それ以外の場合にのみ、内部例外とスタック トレースの名前が返される`null`します。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-493">The name of the inner exception and the stack trace are returned only if they are not `null`.</span></span>  
  
 <span data-ttu-id="5e8fb-494">このメソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-494">This method overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e8fb-495">次の例は、例外が発生し、呼び出し元の結果が表示されます<xref:System.Exception.ToString%2A>その例外でします。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-495">The following example causes an exception and displays the result of calling <xref:System.Exception.ToString%2A> on that exception.</span></span> <span data-ttu-id="5e8fb-496">なお、<xref:System.Exception.ToString%2A?displayProperty=nameWithType>例外クラスのインスタンスが引数の一覧に表示されたら、メソッドが暗黙的に呼び出されます、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5e8fb-496">Note that the <xref:System.Exception.ToString%2A?displayProperty=nameWithType> method is called implicitly when the Exception class instance appears in the argument list of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[System.Exception.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.exception.tostring/cpp/ToStringEx1.cpp#1)]
 [!code-csharp[System.Exception.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.tostring/cs/ToStringEx1.cs#1)]
 [!code-vb[System.Exception.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.tostring/vb/ToStringEx1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>