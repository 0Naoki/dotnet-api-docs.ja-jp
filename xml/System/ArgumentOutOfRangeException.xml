<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ArgumentOutOfRangeException.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ae4dc936aee4ea8e32ea32ca4b1af528d509c201.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae4dc936aee4ea8e32ea32ca4b1af528d509c201</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ArgumentOutOfRangeException">
          <source>The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.</source>
          <target state="translated">引数の値が、呼び出されたメソッドで定義されている許容範囲外である場合にスローされる例外。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>An              <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception is thrown when a method is invoked and at least one of the arguments passed to the method is not <ph id="ph2">`null`</ph> and contains an invalid value that is not a member of the set of values expected for the argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>メソッドが呼び出され、メソッドに渡された引数の少なくとも 1 つは例外がスローされます<ph id="ph2">`null`</ph>引数に必要な値のセットのメンバーではない無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property identifies the invalid argument, and the <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property, if a value is present, identifies the invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph>プロパティは、無効な引数を識別し、<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph>プロパティに値が存在する場合は、無効な値を識別します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Typically, an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> results from developer error.</source>
          <target state="translated">通常、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>開発者のエラーの結果します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Instead of handling the exception in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block, you should eliminate the cause of the exception or, if the argument is returned by a method call or input by the user before being passed to the method that throws the exception, you should validate arguments before passing them to the method.</source>
          <target state="translated">例外を処理する代わりに、 <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph>ブロックで例外の原因を排除する必要があります、または、引数は、メソッドの呼び出しによって返されるか、例外をスローするメソッドに渡される前にユーザーが入力、メソッドに渡される前に、の引数を検証する必要があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> is used extensively by:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> は広範囲に使用されます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Classes in the <ph id="ph1">&lt;xref:System.Collections&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces.</source>
          <target state="translated">内のクラス、<ph id="ph1">&lt;xref:System.Collections&gt;</ph>と<ph id="ph2">&lt;xref:System.IO&gt;</ph>名前空間。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The <ph id="ph1">&lt;xref:System.Array&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Array&gt;</ph> クラス</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>String manipulation methods in the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">文字列操作メソッドに、<ph id="ph1">&lt;xref:System.String&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The conditions in which an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception             is thrown include the following:</source>
          <target state="translated">これで、条件、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外がスローされます、次のとおりです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You are retrieving the member of a collection by its index number, and the index number is invalid.</source>
          <target state="translated">インデックス番号でコレクションのメンバーを取得して、インデックス番号が無効です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>This is the most common cause of an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">これは、最も一般的な原因と、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Typically, the index number is invalid for one of three reasons:</source>
          <target state="translated">通常、インデックス番号を使用しない有効な 3 つの理由のいずれか。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The collection has no members, and your code assumes that it does.</source>
          <target state="translated">コレクションは、メンバーを持たないコードが行われていることを想定しています。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following example attempts to retrieve the first element of a collection that has no elements:</source>
          <target state="translated">次の例は、要素を持たないコレクションの最初の要素の取得を試みます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>To prevent the exception, check whether the collection's <ph id="ph1">`Count`</ph> property is greater than zero before attempting to retrieve any members, as the following code fragment does.</source>
          <target state="translated">例外を防ぐためには、確認するかどうか、コレクションの<ph id="ph1">`Count`</ph>プロパティは任意のメンバーを取得する前に次のコード フラグメントは、0 より大きい値です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>In some cases, this may occur because you are attempting to add a member to a collection by using an index that does not exist, rather than by calling the method, such as <ph id="ph1">`Add`</ph>, that exists for this purpose.</source>
          <target state="translated">場合によっては、これが発生するなど、メソッドを呼び出すことではなく、存在しないインデックスを使用して、コレクションにメンバーを追加しようとしているため<ph id="ph1">`Add`</ph>、この目的のために存在します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following example attempts to add an element to a collection by using a non-existent index rather than calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">次の例を呼び出すのではなく、存在しないインデックスを使用してコレクションに要素を追加しようとしました。、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following code fragment corrects this error:</source>
          <target state="translated">次のコード フラグメントには、このエラーが修正されています。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You're attempting to retrieve an item whose index is negative.</source>
          <target state="translated">負のインデックスを持つ項目を取得しようとしています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>This usually occurs because you've searched a collection for the index of a particular element and have erroneously assumed that the search is successful.</source>
          <target state="translated">これは通常、特定の要素のインデックスのコレクションを検索したし、検索が成功したことを想定が誤ってするために発生します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>In the following example, the call to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29?displayProperty=nameWithType&gt;</ph> method fails  to find a string equal to "Z" and so returns -1.</source>
          <target state="translated">次の例への呼び出しで、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29?displayProperty=nameWithType&gt;</ph>メソッドは、文字列"Z"に等しいは-1 を返しますの検出に失敗します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>However, this is an invalid index value.</source>
          <target state="translated">ただし、これは、無効なインデックス値です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>To prevent the exception, check that the search is successful by making sure that the returned index is greater than or equal to zero before attempting to retrieve the item from the collection, as the following code fragment does.</source>
          <target state="translated">例外を防ぐためには、返されるインデックスがより大きいまたはコレクションから項目を取得する前に 0 に等しい、次のコード フラグメントはことを確認することで、検索が成功したことを確認してください。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You're attempting to retrieve an element whose index is equal to the value of the collection's <ph id="ph1">`Count`</ph> property, as the following example illustrates.</source>
          <target state="translated">インデックスがコレクションの値と等しい要素を取得しようとしている<ph id="ph1">`Count`</ph>プロパティ、次の例として示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Because collections in the .NET Framework use zero-based indexing, the first element of the collection is at index 0, and the last element is at index <ph id="ph1">`Count`</ph> - 1.</source>
          <target state="translated">.NET Framework のコレクションでは、0 から始まるインデックスを使用する、コレクションの最初の要素はインデックス 0、および最後の要素がインデックス位置にあるため<ph id="ph1">`Count`</ph>- 1。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You can eliminate the error by ensuring that you access the last element at index  <ph id="ph1">`Count`</ph> - 1, as the following code does.</source>
          <target state="translated">インデックスにある最後の要素にアクセスすることを確認して、エラーを解決できる<ph id="ph1">`Count`</ph>- 1、次のコードのようです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You are attempting to perform a string operation by calling a string manipulation method, and the starting index does not exist in the string.</source>
          <target state="translated">文字列操作メソッドを呼び出すことによって、文字列操作を実行しようとしているし、文字列の開始インデックスが存在しません。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Overloads of methods such as such as <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.String.Insert%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph6">&lt;xref:System.String.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph7">&lt;xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph8">&lt;xref:System.String.Remove%2A&gt;</ph>,  or <ph id="ph9">&lt;xref:System.String.Substring%2A?displayProperty=nameWithType&gt;</ph> that allow you to specify the starting index of the operation require that the index be a valid position within the string.</source>
          <target state="translated">などのようにメソッドのオーバー ロード<ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph2">&lt;xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph3">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph4">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.String.Insert%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph6">&lt;xref:System.String.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph7">&lt;xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph8">&lt;xref:System.String.Remove%2A&gt;</ph>、または<ph id="ph9">&lt;xref:System.String.Substring%2A?displayProperty=nameWithType&gt;</ph>を指定できる操作の開始インデックスは、インデックスは、文字列内の有効な位置にすることが必要です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Valid indexes range from 0 to <ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph> - 1.</source>
          <target state="translated">有効なインデックスの範囲は 0 ~ <ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph> - 1。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>There are four common causes of this <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception:</source>
          <target state="translated">この 4 つの一般的な原因がある<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You are working with an empty string., or <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">空の文字列です。 を使用しているか、<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Because its <ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph> property returns 0, any attempt to manipulate it by index throws an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">その<ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph>プロパティは 0、しようとするインデックスをスローした操作を返します、<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following example, defines a <ph id="ph1">`GetFirstCharacter`</ph> method that returns the first character of a string.</source>
          <target state="translated">次の例では、定義、<ph id="ph1">`GetFirstCharacter`</ph>を文字列の最初の文字を返すメソッド。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>If the string is empty, as the final string passed to the method is, the method throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">渡される最終的な文字列として文字列が空の場合、メソッドは、メソッドをスロー、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You can eliminate the exception by testing whether the string's <ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph> is greater than zero or by calling the <ph id="ph2">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> method to ensure that the string is not <ph id="ph3">`null`</ph> or empty.</source>
          <target state="translated">テストで、例外を排除することができるかどうか、文字列の<ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=nameWithType&gt;</ph>の呼び出しで 0 よりも大きい、<ph id="ph2">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph>文字列がないことを確認するメソッド<ph id="ph3">`null`</ph>または空です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following code fragment does the latter.</source>
          <target state="translated">次のコード フラグメントは、後者はします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>In this case, if the string is <ph id="ph1">`null`</ph> or empty, the <ph id="ph2">`GetFirstCharacter`</ph> method returns U+0000.</source>
          <target state="translated">この場合、文字列は<ph id="ph1">`null`</ph>空、または、<ph id="ph2">`GetFirstCharacter`</ph>メソッドは u+0000 を返します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You're manipulating a string based on the position of a substring within that string, and you've failed to determine whether the substring was actually found.</source>
          <target state="translated">その文字列内の部分文字列の位置に基づいて、文字列を操作して、部分文字列が実際に検出されたかどうかを決定に失敗しました。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following example extracts the second word of a two-word phrase.</source>
          <target state="translated">次の例では、2 つの単語のフレーズの 2 番目の単語を抽出します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>It throws  an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception if the phrase consists of only one word, and therefore does not contain an embedded space character.</source>
          <target state="translated">スロー、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>という語句が 1 つだけの単語で構成に埋め込まれたスペース文字含まれていない場合は例外です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>This occurs because the call to the <ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29?displayProperty=nameWithType&gt;</ph> method returns -1 to indicate that the search failed, and this invalid value is then passed to the  <ph id="ph2">&lt;xref:System.String.Substring%28System.Int32%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">これへの呼び出し、<ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29?displayProperty=nameWithType&gt;</ph>メソッドを検索に失敗し、この無効な値に渡されますを示すために-1 を返します、<ph id="ph2">&lt;xref:System.String.Substring%28System.Int32%29?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>To eliminate the exception, validate the value returned by the string search method before calling the string manipulation method.</source>
          <target state="translated">例外を回避するのには、文字列操作メソッドを呼び出す前に、文字列検索メソッドによって返される値を検証します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You've attempted to extract a substring that is outside the range of the current string.</source>
          <target state="translated">現在の文字列の範囲外にある部分文字列を抽出しようとしました。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The methods that extract substrings all require that you specify the starting position of the substring and, for substrings that do not continue to the end of the string, the number of characters in the substring.</source>
          <target state="translated">このメソッドは、部分文字列の部分文字列の文字数、文字列の末尾まで続行しない部分文字列の開始位置を指定することが必要なすべての部分文字列を抽出します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Note that this is not the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> of the last character in the substring.</source>
          <target state="translated">これはありません、<bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>の部分文字列の最後の文字です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>An <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception is typically thrown in this case because you've incorrectly calculated the number of characters in the substring.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>通常例外はスローここでは、した正しく計算されないのでない部分文字列の文字の数。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>If you are using a search method like <ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph> to identify the starting and ending positions of a substring:</source>
          <target state="translated">ような検索メソッドを使用している場合<ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>を開始および終了した部分文字列の位置を識別します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>If the character in the ending position returned by <ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph> is to be included in the substring, the ending position of the substring is given by the formula</source>
          <target state="translated">終了位置にある文字がによって返される場合<ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>、部分文字列に含まれる部分文字列の終了位置が、数式で指定されました。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>If the character in the ending position returned by <ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph> is to be excluded from the substring, the ending position of the substring is given by the formula</source>
          <target state="translated">終了位置にある文字がによって返される場合<ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph>、部分文字列から除外するのには、数式で部分文字列の終了位置を指定しました。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following example defines a <ph id="ph1">`FindWords`</ph> method that uses the <ph id="ph2">&lt;xref:System.String.IndexOfAny%28System.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to identify space characters and punctuation marks in a string and returns an array that contains the words found in the string.</source>
          <target state="translated">次の例では定義、<ph id="ph1">`FindWords`</ph>で使用する方法、<ph id="ph2">&lt;xref:System.String.IndexOfAny%28System.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>スペースおよび句読点を識別するメソッドは文字列でマークし、文字列内にある単語を含む配列を返します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You have passed a negative number to a method with an argument that requires only positive numbers and zero, or you have passed either a negative number or zero to a method with an argument that requires only positive numbers.</source>
          <target state="translated">負の数は正の数値と 0 の場合のみ必要とする引数を持つメソッドに渡されたまたは負の数または正の数値だけを必要とする引数を持つメソッドに 0 のいずれかが成功します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>For example, the <ph id="ph1">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method requires that you specify the number of elements in each dimension of a two-dimensional array; valid values for each dimension can range from 0 to <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>メソッドは、2 次元配列の各次元で要素の数を指定が必要です。 各ディメンションに有効な値は 0 ~ 範囲は<ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>But because the dimension argument in the following example has a negative value, the method throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">次の例では、次元の引数が負の値を持つためがスローされますが、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>To correct the error, ensure that the value of the invalid argument is non-negative.</source>
          <target state="translated">エラーを修正するには、無効な引数の値は、負でないことを確認します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You can do this by providing a valid value, as the following code fragment does.</source>
          <target state="translated">次のコード フラグメントはよう、有効な値を提供することによってこれを実行できます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>You can also validate the input and, if it is invalid, take some action.</source>
          <target state="translated">また、入力を検証してが有効でない場合は、いくつかのアクションを実行できます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following code fragment displays an error message instead of calling the method.</source>
          <target state="translated">次のコード フラグメントには、メソッドを呼び出す代わりに、エラー メッセージが表示されます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>A race condition exists in an app that is multithreaded or has tasks that  execute asynchronously and that updates an array or collection.</source>
          <target state="translated">競合状態は、マルチ スレッドを非同期的に実行して、配列またはコレクションを更新するタスクがあるアプリに存在します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object to populate a collection of <ph id="ph2">`Continent`</ph> objects.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクトのコレクションを設定する<ph id="ph2">`Continent`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>It throws an  <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception if the example attempts to display the seven items in the collection before the collection is fully populated.</source>
          <target state="translated">スロー、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外の場合は、例は、コレクションが完全に設定する前に、コレクションにある 7 つのアイテムを表示しようとしています。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>In this case, two resources are accessed from multiple threads:</source>
          <target state="translated">この場合、2 つのリソースは複数のスレッドからアクセスします。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The <ph id="ph1">`continents`</ph> collection.</source>
          <target state="translated"><ph id="ph1">`continents`</ph> のコレクション。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Its <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType&gt;</ph> method is called from multiple threads.</source>
          <target state="translated">その<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType&gt;</ph>メソッドが複数のスレッドから呼び出されます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>In addition, the main or primary thread assumes the collection is fully populated with seven elements when it iterates its members.</source>
          <target state="translated">さらに、メインまたはプライマリ スレッドでは、7 つの要素では、そのメンバーを反復処理時に、コレクションが設定完全前提としています。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The <ph id="ph1">`msg`</ph> string, which is concatenated from multiple threads.</source>
          <target state="translated"><ph id="ph1">`msg`</ph>複数のスレッドから連結された文字列。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>To correct the error, ensure that shared state is accessed in a thread-safe way, as follows.</source>
          <target state="translated">このエラーを修正するには、共有状態にアクセスすること、スレッド セーフな方法で次のようを確認します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>if your app uses an array or collection object, consider using a thread-safe collection class, such as the types in the <ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace or the <ph id="ph2">&lt;xref:System.Collections.Immutable&gt;</ph> out-of-band release.</source>
          <target state="translated">アプリでは、配列またはコレクション オブジェクトを使用する場合は、型など、スレッド セーフなコレクション クラスを使用することを検討してください、<ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph>名前空間または<ph id="ph2">&lt;xref:System.Collections.Immutable&gt;</ph>帯域外のリリースです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>Ensure that shared state (that is, resources that can be accessed by multiple threads) is accessed in a thread-safe way, so that only one thread at a time has exclusive access to the resources.</source>
          <target state="translated">一度に 1 つのスレッドがあるリソースへの排他アクセスできるように、スレッド セーフな方法で共有状態 (つまり、複数のスレッドがアクセスできるリソース) にアクセスすることを確認します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>A large number of classes, such as <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Interlocked&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Mutex&gt;</ph>, are available to synchronize access to resources.</source>
          <target state="translated">クラスの数が多いなど<ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph>、 <ph id="ph2">&lt;xref:System.Threading.Interlocked&gt;</ph>、 <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>、および<ph id="ph4">&lt;xref:System.Threading.Mutex&gt;</ph>リソースへのアクセスを同期するために使用します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>For more information, see <bpt id="p1">[</bpt>Threading<ept id="p1">](http://msdn.microsoft.com/library/7b46a7d9-c6f1-46d1-a947-ae97471bba87)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>スレッド<ept id="p1">](http://msdn.microsoft.com/library/7b46a7d9-c6f1-46d1-a947-ae97471bba87)</ept>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>In addition, language support is available through the <bpt id="p1">[</bpt>lock<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> statement in C# and the <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> construct in Visual Basic.</source>
          <target state="translated">さらに、言語はサポートしています、<bpt id="p1">[</bpt>ロック<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept>(C#) ステートメント、および<bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> Visual Basic で作成します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following example addresses the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception and the other issues from the previous example.</source>
          <target state="translated">次の例のアドレス、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外と、前の例から、その他の問題です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>It replaces the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object with a   <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> object to ensure that access to the collection is thread-safe, uses a <ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph> object to ensure that the application thread continues only after other threads have executed, and uses a lock to ensure that only one thread can  access the <ph id="ph4">`msg`</ph> variable at a time.</source>
          <target state="translated">置き換えられます、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクトを<ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph>オブジェクトを使用して、コレクションへのアクセスがスレッド セーフであることを確認して、<ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph>他のスレッドが実行され、使用して、その 1 つのスレッドのロックにアクセスできる後にのみ、アプリケーション スレッドを続行することを確認するオブジェクト、<ph id="ph4">`msg`</ph>一度に変数。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> uses the HRESULT COR_E_ARGUMENTOUTOFRANGE, which has the value 0x80131502.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> 値は 0x80131502 HRESULT COR_E_ARGUMENTOUTOFRANGE を使用します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> constructors.</source>
          <target state="translated">インスタンスの初期プロパティ値の一覧については<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>を参照してください、<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>The following example defines a class to contain information about an invited guest.</source>
          <target state="translated">次の例では、招待されたゲストに関する情報を格納するクラスを定義します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArgumentOutOfRangeException">
          <source>If the guest is younger than 21, an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception is thrown.</source>
          <target state="translated">ゲストが、21 歳未満の場合、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>例外がスローされます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="T:System.ArgumentOutOfRangeException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Nonnegative number required."</source>
          <target state="translated">このコンス トラクター、 <ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph> 「負でないのために必要な数です」など、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">このメッセージには、現在のシステムのカルチャが考慮されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 参照 (Visual Basic の場合は <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">ローカライズされたエラー メッセージ文字列。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>The name of the parameter that causes this exception.</source>
          <target state="translated">この例外の原因となったパラメーターの名前。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> class with the name of the parameter that causes this exception.</source>
          <target state="translated">この例外の原因である引数の名前を指定して、<ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Nonnegative number required."</source>
          <target state="translated">このコンス トラクター、 <ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph> 「負でないのために必要な数です」など、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">このメッセージには、現在のシステムのカルチャが考慮されます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property of the new instance using the <ph id="ph2">`paramName`</ph> parameter.</source>
          <target state="translated">このコンストラクターは、新しいインスタンスの <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> プロパティを <ph id="ph2">`paramName`</ph> パラメーターを使用して初期化します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>The content of <ph id="ph1">`paramName`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`paramName`</ph> の内容は、ユーザーが理解できる内容にします。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 参照 (Visual Basic の場合は <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>The empty string ("").</source>
          <target state="translated">空の文字列 ("") です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
          <source>The parameter name string.</source>
          <target state="translated">パラメーター名の文字列。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object that holds the serialized object data.</source>
          <target state="translated">シリアル化されたオブジェクト データを保持するオブジェクト。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that describes the source or destination of the serialized data.</source>
          <target state="translated">シリアル化されたデータの転送元または転送先を記述するオブジェクト。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">シリアル化したデータを使用して、<ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML および SOAP シリアル化<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for this exception.</source>
          <target state="translated">この例外の原因を説明するエラー メッセージ。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception, or a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if no inner exception is specified.</source>
          <target state="translated">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> class with a specified error message and the exception that is the cause of this exception.</source>
          <target state="translated">エラー メッセージ、およびこの例外の原因である例外を指定して、<ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>The name of the parameter that caused the exception.</source>
          <target state="translated">例外の原因となったパラメーターの名前。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>The message that describes the error.</source>
          <target state="translated">エラーを説明するメッセージ。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> class with the name of the parameter that causes this exception and a specified error message.</source>
          <target state="translated">この例外の原因となるパラメーターの名前と、指定したエラー メッセージを使用して、<ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph> property of the new instance using the value of the <ph id="ph2">`message`</ph> parameter.</source>
          <target state="translated">このコンス トラクター、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph>プロパティの値を使用して、新しいインスタンスの<ph id="ph2">`message`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>The content of the <ph id="ph1">`message`</ph> parameter is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> パラメーターの内容は、ユーザーが理解できる内容にします。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property of the new instance using the <ph id="ph2">`paramName`</ph> parameter.</source>
          <target state="translated">このコンストラクターは、新しいインスタンスの <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> プロパティを <ph id="ph2">`paramName`</ph> パラメーターを使用して初期化します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>The content of <ph id="ph1">`paramName`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`paramName`</ph> の内容は、ユーザーが理解できる内容にします。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>The error message string.</source>
          <target state="translated">エラー メッセージ文字列。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
          <source>The parameter name string.</source>
          <target state="translated">パラメーター名の文字列。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The name of the parameter that caused the exception.</source>
          <target state="translated">例外の原因となったパラメーターの名前。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The value of the argument that causes this exception.</source>
          <target state="translated">この例外の原因である引数の値。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The message that describes the error.</source>
          <target state="translated">エラーを説明するメッセージ。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> class with the parameter name, the value of the argument, and a specified error message.</source>
          <target state="translated">パラメーター名、引数の値、および指定されたエラー メッセージを使用して、<ph id="ph1">&lt;see cref="T:System.ArgumentOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property of the new instance using the <ph id="ph2">`paramName`</ph> parameter, the <ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property using the <ph id="ph4">`actualValue`</ph> parameter, and the <ph id="ph5">&lt;xref:System.ArgumentException.Message%2A&gt;</ph> property using the <ph id="ph6">`message`</ph> parameter.</source>
          <target state="translated">このコンス トラクター、<ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph>の新しいインスタンスを使用して、プロパティ、<ph id="ph2">`paramName`</ph>パラメーター、<ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph>プロパティを使用して、<ph id="ph4">`actualValue`</ph>パラメーター、および<ph id="ph5">&lt;xref:System.ArgumentException.Message%2A&gt;</ph>プロパティを使用して、<ph id="ph6">`message`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The content of the <ph id="ph1">`paramName`</ph> and <ph id="ph2">`message`</ph> parameters is intended to be understood by humans.</source>
          <target state="translated">内容、<ph id="ph1">`paramName`</ph>と<ph id="ph2">`message`</ph>パラメーターをユーザーが理解できるものではします。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The caller of this constructor is required to ensure that these strings have been localized for the current system culture.</source>
          <target state="translated">このコンス トラクターの呼び出し元は、これらの文字列が現在のシステムのカルチャにローカライズされていることを確認するために必要です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The <ph id="ph1">`actualValue`</ph> parameter is not used within the .NET Framework class library.</source>
          <target state="translated"><ph id="ph1">`actualValue`</ph>パラメーターは、.NET Framework クラス ライブラリ内では使用されません。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>However, the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property is provided so that applications can use the available argument value.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph>プロパティは、アプリケーションが使用可能な引数の値を使用できるように提供します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The <ph id="ph1">`actualValue`</ph> parameter contains an invalid value that is passed to the method and causes this exception to be thrown.</source>
          <target state="translated"><ph id="ph1">`actualValue`</ph>パラメーターには、メソッドに渡され、スローされる例外の原因を無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>This value is stored in the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property and its string representation is appended to the message string held in the <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph> property.</source>
          <target state="translated">この値は、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph>プロパティとその文字列形式で保持されているメッセージ文字列に追加、<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The argument value.</source>
          <target state="translated">引数値。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">Null 参照 (<ph id="ph1">`Nothing`</ph> Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The error message string.</source>
          <target state="translated">エラー メッセージ文字列。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
          <source>The parameter name string.</source>
          <target state="translated">パラメーター名の文字列。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>Gets the argument value that causes this exception.</source>
          <target state="translated">この例外の原因である引数値を取得します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> that contains the value of the parameter that caused the current <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> の原因となったパラメーターの値が含まれた <ph id="ph1">&lt;see langword="Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>Use this property to retrieve the invalid argument.</source>
          <target state="translated">無効な引数を取得するのにには、このプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>The <ph id="ph1">`ActualValue`</ph> property returns the same value that was passed to the constructor, or <ph id="ph2">`null`</ph> if no value was supplied.</source>
          <target state="translated"><ph id="ph1">`ActualValue`</ph>プロパティは、コンス トラクターに渡されたものと同じ値を返しますまたは<ph id="ph2">`null`</ph>値が指定されていない場合。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property is assigned a value at the time of object construction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph>プロパティにはオブジェクトの構築時に、値が割り当てられます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>If the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property value is not <ph id="ph2">`null`</ph>, a string representation of the value is appended to the message string held by the <ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph> property.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph>プロパティの値が<ph id="ph2">`null`</ph>、によって保持されているメッセージ文字列に、値の文字列形式を追加、<ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property is not used within the .NET Framework class library.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph>プロパティは、.NET Framework クラス ライブラリ内では使用されません。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>It carries a null value in all the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> objects thrown by the .NET Framework class library.</source>
          <target state="translated">すべてのページで、null 値を持ち込むこと、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>オブジェクト、.NET Framework クラス ライブラリによってスローされます。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property is provided so that applications can use the available argument value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph>プロパティは、アプリケーションが使用可能な引数の値を使用できるように提供します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.ActualValue">
          <source>This property is read-only and should be overridden only to customize the content or format of the value.</source>
          <target state="translated">このプロパティは読み取り専用と、コンテンツまたは値の書式をカスタマイズするには、のみをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object that holds the serialized object data.</source>
          <target state="translated">シリアル化されたオブジェクト データを保持するオブジェクト。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that describes the source or destination of the serialized data.</source>
          <target state="translated">シリアル化されたデータの転送元または転送先を記述するオブジェクト。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Sets the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with the invalid argument value and additional exception information.</source>
          <target state="translated">無効な引数値と追加の例外情報を使用して <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> オブジェクトを設定します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.GetObjectData%2A&gt;</ph> sets a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> object with all the exception object data targeted for serialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.GetObjectData%2A&gt;</ph> 設定、<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>シリアル化の対象となるすべての例外オブジェクト データを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>During deserialization, the exception object is reconstituted from the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> transmitted over the stream.</source>
          <target state="translated">逆シリアル化中に例外オブジェクトを再構成、<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>ストリームで転送します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;paramref name="info" /&gt;</ph> object is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> オブジェクトが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>for providing serialization services.</source>
          <target state="translated">シリアル化サービスを提供します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration:   <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">関連する列挙値:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>セキュリティ アクション。 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.ArgumentOutOfRangeException.Message">
          <source>Gets the error message and the string representation of the invalid argument value, or only the error message if the argument value is null.</source>
          <target state="translated">エラー メッセージおよび無効な引数値の文字列形式を取得します。引数値が null の場合は、エラー メッセージだけを取得します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source>The text message for this exception.</source>
          <target state="translated">この例外のエラー メッセージ。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source>The value of this property takes one of two forms, as follows.</source>
          <target state="translated">このプロパティの値は、次の 2 つの値のいずれかになります。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> The <ph id="ph5">&lt;paramref name="actualValue" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> <ph id="ph5">&lt;paramref name="actualValue" /&gt;</ph>は<ph id="ph6">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The <ph id="ph3">&lt;paramref name="message" /&gt;</ph> string passed to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> <ph id="ph3">&lt;paramref name="message" /&gt;</ph>コンス トラクターに渡された文字列。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> The <ph id="ph5">&lt;paramref name="actualValue" /&gt;</ph> is not <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> <ph id="ph5">&lt;paramref name="actualValue" /&gt;</ph>は<ph id="ph6">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The <ph id="ph3">&lt;paramref name="message" /&gt;</ph> string appended with the string representation of the invalid argument value.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> <ph id="ph3">&lt;paramref name="message" /&gt;</ph>文字列が無効な引数の値の文字列表記に追加します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source>This property overrides <ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph>.</source>
          <target state="translated">このプロパティのオーバーライド<ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source>The error message should describe the expected values of the parameter that causes this exception.</source>
          <target state="translated">エラー メッセージには、この例外の原因となるパラメーターの値を説明する必要があります。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArgumentOutOfRangeException.Message">
          <source>The error message should be localized.</source>
          <target state="translated">エラー メッセージをローカライズする必要があります。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>