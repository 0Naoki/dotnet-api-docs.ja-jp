<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99bb022affed551d601d1d09475d11521f717cf7" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52732616" /></Metadata><TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c552a-101"><see cref="T:System.String" /> オブジェクトの反復処理と個別の文字の読み取りをサポートします。</span><span class="sxs-lookup"><span data-stu-id="c552a-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="c552a-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="c552a-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c552a-103">A<xref:System.CharEnumerator>参照先の文字に読み取り専用アクセスを提供します。<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="c552a-104">たとえば、`foreach`コレクションの要素を反復処理、Microsoft Visual Basic および c# のプログラミング言語のステートメントを取得、<xref:System.CharEnumerator>から、<xref:System.String>を内の文字を反復処理するためにオブジェクトオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="c552a-105">`CharEnumerator`クラスは、個々 の 16 ビットを列挙します。<xref:System.Char>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="c552a-105">The `CharEnumerator` class enumerates individual 16-bit <xref:System.Char> instances.</span></span> <span data-ttu-id="c552a-106">Graphemes (つまり、combiding 文字が 1 つまたは複数続く文字) を考慮しませんまたは 1 つの文字とサロゲート ペア (つまり、Unicode 基本多言語面以外の文字)。</span><span class="sxs-lookup"><span data-stu-id="c552a-106">It does not consider graphemes (that is, a character followed by one or more combiding characters) or surrogate pairs (that is, characters outside the Unicode Basic Multilingual Plane) as single characters.</span></span> <span data-ttu-id="c552a-107">これらの種類の文字を 1 つの単位として処理する列挙子を使用して、<xref:System.Globalization.StringInfo>クラス。</span><span class="sxs-lookup"><span data-stu-id="c552a-107">For an enumerator that handles these types of characters as a single unit, use the <xref:System.Globalization.StringInfo> class.</span></span>

 <span data-ttu-id="c552a-108">パブリック コンス トラクターがない<xref:System.CharEnumerator>します。</span><span class="sxs-lookup"><span data-stu-id="c552a-108">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="c552a-109">代わりに、<xref:System.String>オブジェクトの<xref:System.String.GetEnumerator%2A>メソッドを取得する、<xref:System.CharEnumerator>文字列参照に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="c552a-109">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="c552a-110">A <xref:System.CharEnumerator> 、文字列の文字に内部インデックスを維持、<xref:System.CharEnumerator>参照。</span><span class="sxs-lookup"><span data-stu-id="c552a-110">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="c552a-111">インデックスの状態は、文字列内の文字を参照する場合に、文字列内の文字位置または最後の文字の後に最初の文字の前に論理的に参照している場合は無効であり、有効です。</span><span class="sxs-lookup"><span data-stu-id="c552a-111">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="c552a-112">インデックスでは、論理的に最初の文字では前に、の位置に初期化され、イテレーションが完了したら最後の文字後位置に設定されています。</span><span class="sxs-lookup"><span data-stu-id="c552a-112">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="c552a-113">インデックスが有効な間文字にアクセスしようとした場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c552a-113">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="c552a-114"><xref:System.CharEnumerator.MoveNext%2A>メソッドは、先頭と後続の文字が順番にアクセスするため、いずれかによって、インデックスをインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="c552a-114">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="c552a-115"><xref:System.CharEnumerator.Reset%2A>メソッドは、最初の文字の前に論理的に位置するインデックスを設定します。</span><span class="sxs-lookup"><span data-stu-id="c552a-115">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="c552a-116"><xref:System.CharEnumerator.Current%2A>プロパティがインデックスによって参照される現在の文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="c552a-116">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="c552a-117"><xref:System.CharEnumerator.Clone%2A>メソッドのコピーを作成、<xref:System.CharEnumerator>します。</span><span class="sxs-lookup"><span data-stu-id="c552a-117">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c552a-118">複数の独立したインスタンス<xref:System.CharEnumerator>1 つまたは複数のスレッド間での単一のインスタンスへのアクセスがあることができます<xref:System.String>します。</span><span class="sxs-lookup"><span data-stu-id="c552a-118">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="c552a-119">このクラスを実装してサポートするために、<xref:System.Collections.IEnumerator>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="c552a-119">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="c552a-120">列挙子の使用に関する詳細については、次を参照してください。、<xref:System.Collections.IEnumerator>トピック。</span><span class="sxs-lookup"><span data-stu-id="c552a-120">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c552a-121">次の例では、<xref:System.CharEnumerator>文字列内の個々 の文字を列挙するクラス。</span><span class="sxs-lookup"><span data-stu-id="c552a-121">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="c552a-122">インスタンス化、<xref:System.CharEnumerator>オブジェクトを呼び出すことによって、<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>メソッドでは、次の移動 1 文字から呼び出すことによって、<xref:System.CharEnumerator.MoveNext%2A>メソッド、しの値を取得することによって、現在の文字を表示、<xref:System.CharEnumerator.Current%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="c552a-122">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="c552a-123">ただしを使用して、同じ操作をより直感的に実行できること`foreach`(で C# の場合) または`For Each`(Visual Basic の場合) で次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="c552a-123">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c552a-124">現在のコピーを作成します<see cref="T:System.CharEnumerator" />オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-124">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="c552a-125"><see cref="T:System.Object" /> 、現在のコピーである<see cref="T:System.CharEnumerator" />オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-125">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c552a-126">戻り値のこのインスタンスのコピーである<xref:System.CharEnumerator>と現在の状態。</span><span class="sxs-lookup"><span data-stu-id="c552a-126">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="c552a-127">これは反復処理中に、状態を保存するために役立ちます、<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-127">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="c552a-128">たとえば、アプリケーションで元のインスタンスの<xref:System.CharEnumerator>内の各文字を反復処理する、<xref:System.String>します。</span><span class="sxs-lookup"><span data-stu-id="c552a-128">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="c552a-129">アプリケーションが処理を一時停止し、呼び出す一意な文字が検出されたときに、<xref:System.CharEnumerator.Clone%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="c552a-129">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="c552a-130">これを実際には、保存、<xref:System.CharEnumerator>内のオブジェクトのインデックス、<xref:System.String>します。</span><span class="sxs-lookup"><span data-stu-id="c552a-130">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="c552a-131">アプリケーションの別の部分に移動する複製を使用して、`String`補足的な処理を実行します。</span><span class="sxs-lookup"><span data-stu-id="c552a-131">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="c552a-132">このナビゲーションの副作用は、複製には、処理が停止した位置の追跡ができなくなったです。</span><span class="sxs-lookup"><span data-stu-id="c552a-132">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="c552a-133">ただし、補助処理が完了したら、アプリケーション、複製され、元を使用して<xref:System.CharEnumerator>での作業を再開するインスタンス、<xref:System.String>元の処理が停止しました。</span><span class="sxs-lookup"><span data-stu-id="c552a-133">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c552a-134">このメソッドがサポートするために実装されて、<xref:System.ICloneable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="c552a-134">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c552a-135">これによって列挙された文字列の現在参照されている文字を取得<see cref="T:System.CharEnumerator" />オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-135">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="c552a-136">これによって現在参照されている Unicode 文字<see cref="T:System.CharEnumerator" />オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-136">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c552a-137"><xref:System.CharEnumerator>クラスは、列挙された文字列では、内部のインデックスを保持し、<xref:System.CharEnumerator.Current%2A>プロパティは、インデックスによって参照される現在の文字を返します。</span><span class="sxs-lookup"><span data-stu-id="c552a-137">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="c552a-138">このプロパティは、インデックスが有効な場合にのみ呼び出す必要があります。それ以外の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c552a-138">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c552a-139">インデックスは、常に空の文字列の有効な ("")。</span><span class="sxs-lookup"><span data-stu-id="c552a-139">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="c552a-140">インデックスも無効です。 後に、<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>または<xref:System.CharEnumerator.Reset%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c552a-140">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="c552a-141">これらのメソッドのいずれかが呼び出された後に呼び出す、<xref:System.CharEnumerator.MoveNext%2A>メソッドを列挙された文字列の最初の文字のインデックスを調整します。</span><span class="sxs-lookup"><span data-stu-id="c552a-141">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="c552a-142">インデックスが有効なときに、<xref:System.CharEnumerator.MoveNext%2A>メソッドを返します。`true`します。</span><span class="sxs-lookup"><span data-stu-id="c552a-142">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="c552a-143"><xref:System.CharEnumerator.Current%2A> インデックス、およびを連続して呼び出すには移動しません<xref:System.CharEnumerator.Current%2A>まで同じ文字を返す<xref:System.CharEnumerator.MoveNext%2A>、 <xref:System.CharEnumerator.Reset%2A>、または<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c552a-143"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c552a-144">次の例では、<xref:System.CharEnumerator>文字列内の個々 の文字を列挙するクラス。</span><span class="sxs-lookup"><span data-stu-id="c552a-144">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="c552a-145">インスタンス化、<xref:System.CharEnumerator>オブジェクトを呼び出すことによって、<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>メソッドでは、次の移動 1 文字から呼び出すことによって、<xref:System.CharEnumerator.MoveNext%2A>メソッド、しの値を取得することによって、現在の文字を表示、<xref:System.CharEnumerator.Current%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="c552a-145">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="c552a-146">ただしを使用して、同じ操作をより直感的に実行できること`foreach`(で C# の場合) または`For Each`(Visual Basic の場合) で次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="c552a-146">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c552a-147">インデックスが無効です。これは、最初の前後は、列挙された文字列の最後の文字があります。</span><span class="sxs-lookup"><span data-stu-id="c552a-147">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c552a-148"><see cref="T:System.CharEnumerator" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="c552a-148">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c552a-149"><xref:System.CharEnumerator> を使い終わったら、<xref:System.CharEnumerator.Dispose%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c552a-149">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="c552a-150"><xref:System.CharEnumerator.Dispose%2A>メソッドによって、<xref:System.CharEnumerator> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="c552a-150">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="c552a-151"><xref:System.CharEnumerator.Dispose%2A>呼び出し後は、<xref:System.CharEnumerator>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.CharEnumerator> へのすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c552a-151">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="c552a-152">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c552a-152">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c552a-153"><xref:System.CharEnumerator>への最後の参照を解放する前に、必ず<xref:System.CharEnumerator.Dispose%2A>を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="c552a-153">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="c552a-154">そうしないと、ガベージ コレクターが <xref:System.CharEnumerator> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="c552a-154">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c552a-155">現在の内部のインデックスをインクリメント<see cref="T:System.CharEnumerator" />列挙された文字列の次の文字をオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-155">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns><span data-ttu-id="c552a-156"><see langword="true" /> インデックスが正常にインクリメントされた場合、列挙された文字列内でそれ以外の場合、<see langword="false" />します。</span><span class="sxs-lookup"><span data-stu-id="c552a-156"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c552a-157"><xref:System.CharEnumerator>クラスは、列挙された文字列では、内部のインデックスを保持し、<xref:System.CharEnumerator.MoveNext%2A>メソッドは、いずれかによって、インデックスをインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="c552a-157">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="c552a-158">呼び出す<xref:System.CharEnumerator.MoveNext%2A>呼び出した後<xref:System.String.GetEnumerator%2A>または<xref:System.CharEnumerator.Reset%2A>を最初の文字を列挙された文字列内の現在の文字位置をインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="c552a-158">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="c552a-159">戻り値がチェック`true`を現在の文字位置が有効であるかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c552a-159">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="c552a-160">列挙された文字列の最後の文字を超えるインデックスがある場合、インデックスは変更されず`false`が返されます。</span><span class="sxs-lookup"><span data-stu-id="c552a-160">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="c552a-161">列挙された文字列が空の場合は、ことがわかります ("") の状態、<xref:System.CharEnumerator>は常に有効です。</span><span class="sxs-lookup"><span data-stu-id="c552a-161">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="c552a-162">これは内部のインデックス、<xref:System.CharEnumerator>は最初、列挙された文字列の最初の文字の前に、したがってが無効です。</span><span class="sxs-lookup"><span data-stu-id="c552a-162">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="c552a-163"><xref:System.CharEnumerator.MoveNext%2A> 論理的にも有効ではない、列挙された文字列の最後の (存在しない) 文字の後に、インデックスを設定します。</span><span class="sxs-lookup"><span data-stu-id="c552a-163"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c552a-164">次の例では、<xref:System.CharEnumerator>文字列内の個々 の文字を列挙するクラス。</span><span class="sxs-lookup"><span data-stu-id="c552a-164">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="c552a-165">インスタンス化、<xref:System.CharEnumerator>オブジェクトを呼び出すことによって、<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>メソッドでは、次の移動 1 文字から呼び出すことによって、<xref:System.CharEnumerator.MoveNext%2A>メソッド、しの値を取得することによって、現在の文字を表示、<xref:System.CharEnumerator.Current%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="c552a-165">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="c552a-166">ただしを使用して、同じ操作をより直感的に実行できること`foreach`(で C# の場合) または`For Each`(Visual Basic の場合) で次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="c552a-166">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c552a-167">列挙された文字列の最初の文字の論理的に前に、の位置のインデックスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c552a-167">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c552a-168"><xref:System.CharEnumerator>クラスは、列挙された文字列では、内部のインデックスを保持し、<xref:System.CharEnumerator.Reset%2A>メソッドは、無効な状態にインデックスを設定します。</span><span class="sxs-lookup"><span data-stu-id="c552a-168">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c552a-169">これによって列挙された文字列の現在参照されている文字を取得<see cref="T:System.CharEnumerator" />オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-169">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="c552a-170">このメンバーの詳細については、「<see cref="P:System.Collections.IEnumerator.Current" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="c552a-170">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="c552a-171">これによって現在参照されているボックス化された Unicode 文字<see cref="T:System.CharEnumerator" />オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c552a-171">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c552a-172">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="c552a-172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c552a-173">これは、<xref:System.CharEnumerator> のインスタンスが <xref:System.Collections.IEnumerator> インターフェイスにキャストされる場合にのみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="c552a-173">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c552a-174">列挙は開始されません。</span><span class="sxs-lookup"><span data-stu-id="c552a-174">Enumeration has not started.</span></span>  
  
<span data-ttu-id="c552a-175">- または -</span><span class="sxs-lookup"><span data-stu-id="c552a-175">-or-</span></span> 
<span data-ttu-id="c552a-176">列挙体が終了しました。</span><span class="sxs-lookup"><span data-stu-id="c552a-176">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c552a-177"><see cref="T:System.CharEnumerator" /> クラスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="c552a-177">Releases all resources used by the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="c552a-178">完了したら IDisposable.Dispose の呼び出しを使用して、<xref:System.CharEnumerator>クラス。</span><span class="sxs-lookup"><span data-stu-id="c552a-178">Call IDisposable.Dispose when you are finished using the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="c552a-179">メソッドのまま、<xref:System.CharEnumerator>クラスを使用できない状態です。</span><span class="sxs-lookup"><span data-stu-id="c552a-179">The method leaves the <xref:System.CharEnumerator> class in an unusable state.</span></span> <span data-ttu-id="c552a-180">呼び出した後に、すべての参照を解放する必要があります、<xref:System.CharEnumerator>クラスのガベージ コレクターがメモリをクリアできるようにする、<xref:System.CharEnumerator>クラスが使用していた。</span><span class="sxs-lookup"><span data-stu-id="c552a-180">After calling it, you must release all references to the <xref:System.CharEnumerator> class so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> class was occupying.</span></span>

<span data-ttu-id="c552a-181">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c552a-181">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE]
> <span data-ttu-id="c552a-182">最後の参照を解放する前に常に IDisposable.Dispose を呼び出して、<xref:System.CharEnumerator>クラス。</span><span class="sxs-lookup"><span data-stu-id="c552a-182">Always call IDisposable.Dispose before you release your last reference to the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="c552a-183">そうしないと、ガベージ コレクターが <xref:System.CharEnumerator> オブジェクトの <xref:System.Object.Finalize> メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="c552a-183">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's <xref:System.Object.Finalize> method.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>