<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0570f4e2dd53178598e0e6fbf7b325d2cd252378" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3d128-101">
        <see cref="T:System.String" /> オブジェクトの反復処理と個別の文字の読み取りをサポートします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3d128-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span>
      </span>
      <span data-ttu-id="3d128-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3d128-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d128-103">A <xref:System.CharEnumerator> 、参照先の文字に読み取り専用のアクセスを提供<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3d128-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="3d128-104">たとえば、`foreach`コレクションの要素を反復処理し、Microsoft Visual Basic および c# のプログラミング言語のステートメントを取得、<xref:System.CharEnumerator>から、<xref:System.String>そのオブジェクト内の文字を反復処理するためにオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3d128-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  
  
 <span data-ttu-id="3d128-105">パブリック コンス トラクターがない<xref:System.CharEnumerator>です。</span><span class="sxs-lookup"><span data-stu-id="3d128-105">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="3d128-106">代わりに、<xref:System.String>オブジェクトの<xref:System.String.GetEnumerator%2A>を取得するメソッド、<xref:System.CharEnumerator>参照文字列を初期化します。</span><span class="sxs-lookup"><span data-stu-id="3d128-106">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="3d128-107">A<xref:System.CharEnumerator>内部インデックス文字列の文字に保持されて、<xref:System.CharEnumerator>参照します。</span><span class="sxs-lookup"><span data-stu-id="3d128-107">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="3d128-108">インデックスの状態は、文字列内の文字を参照している場合は、文字列内の文字位置の最後の文字の前後、最初の文字に論理的に参照している場合は無効であり、有効です。</span><span class="sxs-lookup"><span data-stu-id="3d128-108">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="3d128-109">インデックスは、最初の文字の前に論理的な位置に初期化または、イテレーションが完了すると、最後の文字の後の位置に設定が。</span><span class="sxs-lookup"><span data-stu-id="3d128-109">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="3d128-110">インデックスが有効でないときに文字にアクセスしようとする場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d128-110">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="3d128-111"><xref:System.CharEnumerator.MoveNext%2A>メソッドは、最初と後続の文字は順番にアクセスするため、いずれかによって、インデックスをインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="3d128-111">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="3d128-112"><xref:System.CharEnumerator.Reset%2A>メソッドは、最初の文字の前に論理的に位置するインデックスを設定します。</span><span class="sxs-lookup"><span data-stu-id="3d128-112">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="3d128-113"><xref:System.CharEnumerator.Current%2A>プロパティがインデックスによって参照される現在の文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="3d128-113">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="3d128-114"><xref:System.CharEnumerator.Clone%2A>メソッドのコピーを作成、<xref:System.CharEnumerator>です。</span><span class="sxs-lookup"><span data-stu-id="3d128-114">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d128-115">複数の独立したインスタンス<xref:System.CharEnumerator>1 つまたは複数のスレッド間での単一のインスタンスへのアクセスを持つことができます<xref:System.String>です。</span><span class="sxs-lookup"><span data-stu-id="3d128-115">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="3d128-116">このクラスがサポートするために実装されている、<xref:System.Collections.IEnumerator>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="3d128-116">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="3d128-117">列挙子の使用に関する詳細については、次を参照してください。、<xref:System.Collections.IEnumerator>トピックです。</span><span class="sxs-lookup"><span data-stu-id="3d128-117">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d128-118">次の例では、<xref:System.CharEnumerator>文字列内の個々 の文字を列挙するクラス。</span><span class="sxs-lookup"><span data-stu-id="3d128-118">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="3d128-119">インスタンス化、<xref:System.CharEnumerator>オブジェクトを呼び出して、<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>メソッドを移動し、1 文字から、次に呼び出すことによって、<xref:System.CharEnumerator.MoveNext%2A>メソッド、しの値を取得することによって、現在の文字を表示、<xref:System.CharEnumerator.Current%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="3d128-119">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="3d128-120">ただしを使用して、同じ操作をより直感的に実行することができます`foreach`(C# の場合) または`For Each`(Visual Basic の場合) の次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="3d128-120">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d128-121">現在の <see cref="T:System.CharEnumerator" /> オブジェクトのコピーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-121">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d128-122">現在の <see cref="T:System.Object" /> オブジェクトのコピーである <see cref="T:System.CharEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-122">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d128-123">戻り値のこのインスタンスのコピーである<xref:System.CharEnumerator>と現在の状態。</span><span class="sxs-lookup"><span data-stu-id="3d128-123">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="3d128-124">これは反復処理中に、状態を保存するために便利な<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3d128-124">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="3d128-125">たとえば、アプリケーションで使用する、元のインスタンスの<xref:System.CharEnumerator>内の各文字を反復処理する、<xref:System.String>です。</span><span class="sxs-lookup"><span data-stu-id="3d128-125">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="3d128-126">アプリケーションが処理を一時停止し、呼び出す一意な文字が検出されたときに、<xref:System.CharEnumerator.Clone%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="3d128-126">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="3d128-127">これを実際には、保存、<xref:System.CharEnumerator>内のオブジェクトのインデックス、<xref:System.String>です。</span><span class="sxs-lookup"><span data-stu-id="3d128-127">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="3d128-128">アプリケーションの別の部分に移動する、複製を使用して、`String`補足的な処理を実行します。</span><span class="sxs-lookup"><span data-stu-id="3d128-128">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="3d128-129">このナビゲーションの副作用は、複製が処理が停止した位置のトラックを失ったです。</span><span class="sxs-lookup"><span data-stu-id="3d128-129">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="3d128-130">ただし、補助処理が完了したら、アプリケーション、複製され、元を使用して<xref:System.CharEnumerator>に関する作業を再開するインスタンス、<xref:System.String>元の処理が停止しました。</span><span class="sxs-lookup"><span data-stu-id="3d128-130">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d128-131">このメソッドがサポートするために実装されている、<xref:System.ICloneable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="3d128-131">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d128-132">この <see cref="T:System.CharEnumerator" /> オブジェクトによって列挙された文字列内の現在参照されている文字を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-132">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d128-133">この <see cref="T:System.CharEnumerator" /> オブジェクトによって現在参照されている Unicode 文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-133">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d128-134"><xref:System.CharEnumerator>クラスは、列挙型の文字列を内部のインデックスを保持し、<xref:System.CharEnumerator.Current%2A>プロパティは、インデックスによって現在参照されている文字を返します。</span><span class="sxs-lookup"><span data-stu-id="3d128-134">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="3d128-135">このプロパティは、インデックスが有効である場合にのみ呼び出す必要があります。それ以外の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d128-135">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="3d128-136">インデックスは常に空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="3d128-136">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="3d128-137">インデックスが正しくありませんも後に、<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>または<xref:System.CharEnumerator.Reset%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3d128-137">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="3d128-138">これらのメソッドのいずれかが呼び出された後の呼び出し、<xref:System.CharEnumerator.MoveNext%2A>列挙文字列の最初の文字のインデックスを調整する方法です。</span><span class="sxs-lookup"><span data-stu-id="3d128-138">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="3d128-139">インデックスが有効なときに、<xref:System.CharEnumerator.MoveNext%2A>メソッドを返します。`true`です。</span><span class="sxs-lookup"><span data-stu-id="3d128-139">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="3d128-140"><xref:System.CharEnumerator.Current%2A> 連続して呼び出すと、インデックスを移動しません<xref:System.CharEnumerator.Current%2A>まで同じ文字を返す<xref:System.CharEnumerator.MoveNext%2A>、 <xref:System.CharEnumerator.Reset%2A>、または<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="3d128-140"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d128-141">次の例では、<xref:System.CharEnumerator>文字列内の個々 の文字を列挙するクラス。</span><span class="sxs-lookup"><span data-stu-id="3d128-141">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="3d128-142">インスタンス化、<xref:System.CharEnumerator>オブジェクトを呼び出して、<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>メソッドを移動し、1 文字から、次に呼び出すことによって、<xref:System.CharEnumerator.MoveNext%2A>メソッド、しの値を取得することによって、現在の文字を表示、<xref:System.CharEnumerator.Current%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="3d128-142">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="3d128-143">ただしを使用して、同じ操作をより直感的に実行することができます`foreach`(C# の場合) または`For Each`(Visual Basic の場合) の次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="3d128-143">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3d128-144">インデックスが無効です。つまり、インデックスが列挙型文字列の先頭文字の前または末尾文字の後を参照しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-144">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d128-145">
            <see cref="T:System.CharEnumerator" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-145">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d128-146"><xref:System.CharEnumerator.Dispose%2A> を使い終わったら <xref:System.CharEnumerator> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3d128-146">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="3d128-147"><xref:System.CharEnumerator.Dispose%2A> メソッドによって、<xref:System.CharEnumerator> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="3d128-147">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="3d128-148">呼び出した後<xref:System.CharEnumerator.Dispose%2A>へのすべての参照を解放する必要があります、<xref:System.CharEnumerator>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.CharEnumerator>占有されていた。</span><span class="sxs-lookup"><span data-stu-id="3d128-148">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="3d128-149">詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span><span class="sxs-lookup"><span data-stu-id="3d128-149">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d128-150"><xref:System.CharEnumerator.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.CharEnumerator> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="3d128-150">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="3d128-151">そうしないと、ガベージ コレクターが <xref:System.CharEnumerator> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="3d128-151">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d128-152">現在の <see cref="T:System.CharEnumerator" /> オブジェクトの内部インデックスを、列挙された文字列の次の文字にインクリメントします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-152">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d128-153">インデックスが正しくインクリメントされ、列挙された文字列内を参照している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-153">
              <see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d128-154"><xref:System.CharEnumerator>クラスは、列挙型の文字列を内部のインデックスを保持し、<xref:System.CharEnumerator.MoveNext%2A>メソッドは、いずれかによって、インデックスをインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="3d128-154">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="3d128-155">呼び出す<xref:System.CharEnumerator.MoveNext%2A>呼び出した後<xref:System.String.GetEnumerator%2A>または<xref:System.CharEnumerator.Reset%2A>を最初の文字に列挙された文字列内の現在の文字位置をインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="3d128-155">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="3d128-156">戻り値がチェック`true`を現在の文字位置が有効であるかを判断します。</span><span class="sxs-lookup"><span data-stu-id="3d128-156">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="3d128-157">インデックスが変更されていないインデックスが列挙された文字列の最後の文字を超える場合、および`false`が返されます。</span><span class="sxs-lookup"><span data-stu-id="3d128-157">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="3d128-158">列挙された文字列が空の場合を注意してください ("") では、状態、<xref:System.CharEnumerator>は常に使用します。</span><span class="sxs-lookup"><span data-stu-id="3d128-158">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="3d128-159">これは内部のインデックス、<xref:System.CharEnumerator>最初に列挙された文字列の最初の文字の前に、無効です。</span><span class="sxs-lookup"><span data-stu-id="3d128-159">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="3d128-160"><xref:System.CharEnumerator.MoveNext%2A> 論理的にも有効ではない列挙文字列の最後の (存在しない) 文字の後にインデックスを設定します。</span><span class="sxs-lookup"><span data-stu-id="3d128-160"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d128-161">次の例では、<xref:System.CharEnumerator>文字列内の個々 の文字を列挙するクラス。</span><span class="sxs-lookup"><span data-stu-id="3d128-161">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="3d128-162">インスタンス化、<xref:System.CharEnumerator>オブジェクトを呼び出して、<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>メソッドを移動し、1 文字から、次に呼び出すことによって、<xref:System.CharEnumerator.MoveNext%2A>メソッド、しの値を取得することによって、現在の文字を表示、<xref:System.CharEnumerator.Current%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="3d128-162">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="3d128-163">ただしを使用して、同じ操作をより直感的に実行することができます`foreach`(C# の場合) または`For Each`(Visual Basic の場合) の次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="3d128-163">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d128-164">インデックスを列挙された文字列の先頭文字の前の位置で論理的に初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-164">Initializes the index to a position logically before the first character of the enumerated string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d128-165"><xref:System.CharEnumerator>クラスは、列挙型の文字列を内部のインデックスを保持し、<xref:System.CharEnumerator.Reset%2A>メソッドは、無効な状態にインデックスを設定します。</span><span class="sxs-lookup"><span data-stu-id="3d128-165">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d128-166">この <see cref="T:System.CharEnumerator" /> オブジェクトによって列挙された文字列内の現在参照されている文字を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-166">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
          <span data-ttu-id="3d128-167">このメンバーの詳細については、「<see cref="P:System.Collections.IEnumerator.Current" />」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-167">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d128-168">この <see cref="T:System.CharEnumerator" /> オブジェクトによって現在参照されているボックス化された Unicode 文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-168">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d128-169">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="3d128-169">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3d128-170">これは、<xref:System.CharEnumerator> のインスタンスが <xref:System.Collections.IEnumerator> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="3d128-170">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3d128-171">列挙は開始されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-171">Enumeration has not started.</span>
          </span>
          <span data-ttu-id="3d128-172">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-172">-or-</span>
          </span>
          <span data-ttu-id="3d128-173">列挙が終了しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d128-173">Enumeration has ended.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>