<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21d3a84923de729b6e13f9da922c7da81ff2c0c2" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52736282" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.ReadOnlySpan`1" /> の要素の列挙子を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) c# 言語の[ごとにしています.[次へ]](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Visual Basic でコンス トラクターには、列挙子の複雑さが隠されています。 使用して、列挙子を直接操作するのではなく`foreach`または`For Each...Next`をお勧めします。 

最初の要素の前に、列挙子を配置する初期状態で、<xref:System.ReadOnlySpan`1>します。 この位置では、<xref:System.ReadOnlySpan`1.Enumerator.Current> が未定義です。 呼び出す必要があります<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>の最初の項目を列挙子を進める、<xref:System.ReadOnlySpan`1>の値を読み取る前に<xref:System.ReadOnlySpan`1.Enumerator.Current>します。

<xref:System.ReadOnlySpan`1.Enumerator.Current> までの同じ値を返します<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>が呼び出されます。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 設定<xref:System.ReadOnlySpan`1.Enumerator.Current>で次の項目に、<xref:System.ReadOnlySpan`1>します。

場合<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>の末尾を渡す、 <xref:System.ReadOnlySpan`1>、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>返します`false`します。 この状態では、後続の呼び出しで列挙子の場合<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>を返すことも`false`と<xref:System.ReadOnlySpan`1.Enumerator.Current>が定義されていません。 設定することはできません<xref:System.ReadOnlySpan`1.Enumerator.Current>の最初の項目を<xref:System.ReadOnlySpan`1>列挙子の新しいインスタンスを代わりに作成する必要があります。 もう一度です。 

ただし、<xref:System.ReadOnlySpan`1>が基になるデータが、スタックに割り当てられる、<xref:System.ReadOnlySpan`1>へのポインターができない可能性があります。 そのため、反復、<xref:System.ReadOnlySpan`1>スレッド セーフなプロシージャでは本質的にありません。 列挙中にスレッド セーフを保証するために、独自の同期を実装する必要があります。

.NET では、他のいくつかの列挙子構造体とは異なり、 <xref:System.ReadOnlySpan`1.Enumerator>:

- 実装しません、<xref:System.Collections.IEnumerator>または<xref:System.Collections.Generic.IEnumerator`1>インターフェイス。 これは、ため<xref:System.ReadOnlySpan`1.Enumerator>は、 [ref 構造体](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types)とボックス化することはできません。

- 含まれません、`Reset`メソッドは、最初の要素の前に初期位置、範囲内に列挙子を設定することができます。 (、<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType>メソッドは、インターフェイスの一部として実装する必要がありますが、ほとんどの実装者が例外をスローまたは実装を提供しない)。]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T&amp; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列挙子の現在位置にある項目への参照を取得します。</summary>
        <value><see cref="T:System.ReadOnlySpan`1" /> のうち、列挙子の現在位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[`Current` 次の条件のいずれかで定義されていません。 

- 列挙子を作成すると、直後に、列挙子は範囲の最初の要素の前に配置します。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 範囲の最初の要素への値を読み取る前に、列挙子を進めるに呼び出す必要がある`Current`します。

- 最後の呼び出し<xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>返される`false`スパンの最後を示します。 

`Current` までの同じ値を返します<xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>が呼び出されます。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 設定`Current`範囲で次の項目にします。]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙子を <see cref="System.ReadOnlySpan`1" /> の次の項目に進めます。</summary>
        <returns>列挙子が次の項目に正常に進んだ場合は `true`、範囲の末尾を超えた場合は `false` です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[列挙子を作成した後、span と最初の呼び出しの最初の要素の前に配置されて`MoveNext`範囲の最初の項目を列挙子を進めます。 

場合`MoveNext`、範囲の末尾を渡します`MoveNext`返します`false`します。 この状態では、後続の呼び出しで列挙子の場合`MoveNext`を返すことも`false`します。]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>