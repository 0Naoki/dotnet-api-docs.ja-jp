<Type Name="AppDomain" FullName="System.AppDomain">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dcd9ac88a0a161873d835922b453f3bf3a1ce079" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55322425" /></Metadata><TypeSignature Language="C#" Value="public sealed class AppDomain : MarshalByRefObject, _AppDomain, System.Security.IEvidenceFactory" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit AppDomain extends System.MarshalByRefObject implements class System._AppDomain, class System.Security.IEvidenceFactory" />
  <TypeSignature Language="DocId" Value="T:System.AppDomain" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AppDomain&#xA;Inherits MarshalByRefObject&#xA;Implements _AppDomain, IEvidenceFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppDomain sealed : MarshalByRefObject, _AppDomain, System::Security::IEvidenceFactory" />
  <TypeSignature Language="F#" Value="type AppDomain = class&#xA;    inherit MarshalByRefObject&#xA;    interface _AppDomain&#xA;    interface IEvidenceFactory" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System._AppDomain</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IEvidenceFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System._AppDomain))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="62a35-101">アプリケーション ドメインを表します。アプリケーション ドメインとは、アプリケーションが実行される分離された環境です。</span><span class="sxs-lookup"><span data-stu-id="62a35-101">Represents an application domain, which is an isolated environment where applications execute.</span></span> <span data-ttu-id="62a35-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-103">によって表されるアプリケーション ドメイン<xref:System.AppDomain>オブジェクト、ヘルプ、マネージ コードの実行の分離性、アンロード、およびセキュリティの境界を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-103">Application domains, which are represented by <xref:System.AppDomain> objects, help provide isolation, unloading, and security boundaries for executing managed code.</span></span>  
  
-   <span data-ttu-id="62a35-104">アプリケーション ドメインを使用すると、プロセスを引き起こす可能性のあるタスクを分離できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-104">Use application domains to isolate tasks that might bring down a process.</span></span> <span data-ttu-id="62a35-105">場合の状態、<xref:System.AppDomain>タスクを実行しているが、不安定になります、<xref:System.AppDomain>プロセス与えずアンロードできます。</span><span class="sxs-lookup"><span data-stu-id="62a35-105">If the state of the <xref:System.AppDomain> that's executing a task becomes unstable, the <xref:System.AppDomain> can be unloaded without affecting the process.</span></span> <span data-ttu-id="62a35-106">再起動しなくても、プロセスが長時間にわたって実行する必要がありますこれは重要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-106">This is important when a process must run for long periods without restarting.</span></span> <span data-ttu-id="62a35-107">データを共有しないようにタスクを分離するのにアプリケーション ドメインを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="62a35-107">You can also use application domains to isolate tasks that should not share data.</span></span>  
  
-   <span data-ttu-id="62a35-108">アセンブリが既定のアプリケーション ドメインに読み込まれている場合は、ことはできませんメモリからアンロード、プロセスの実行中にします。</span><span class="sxs-lookup"><span data-stu-id="62a35-108">If an assembly is loaded into the default application domain, it cannot be unloaded from memory while the process is running.</span></span> <span data-ttu-id="62a35-109">ただし、読み込み、アセンブリを実行する 2 つ目のアプリケーション ドメインを開いた場合、アセンブリが読み込まれないそのアプリケーション ドメインが読み込まれるとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-109">However, if you open a second application domain to load and execute the assembly, the assembly is unloaded when that application domain is unloaded.</span></span> <span data-ttu-id="62a35-110">場合によっては大きな Dll を使用する実行時間の長いプロセスのワーキング セットを最小限に抑えるには、この手法を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-110">Use this technique to minimize the working set of long-running processes that occasionally use large DLLs.</span></span>  
  
 > [!NOTE]
 >  <span data-ttu-id="62a35-111">.NET Core で、<xref:System.AppDomain>実装およびデザインによって制限されますが、分離、アンロード、およびセキュリティの境界を行いません。</span><span class="sxs-lookup"><span data-stu-id="62a35-111">On .NET Core, the <xref:System.AppDomain> implementation is limited by design and does not provide isolation, unloading, or security boundaries.</span></span> <span data-ttu-id="62a35-112">.NET core で正確に 1 つである<xref:System.AppDomain>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-112">For .NET Core, there is exactly one <xref:System.AppDomain>.</span></span> <span data-ttu-id="62a35-113">を通じて提供されます。 分離とアンロード<xref:System.Runtime.Loader.AssemblyLoadContext>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-113">Isolation and unloading are provided through <xref:System.Runtime.Loader.AssemblyLoadContext>.</span></span> <span data-ttu-id="62a35-114">セキュリティ境界は、プロセスの境界との適切なリモート処理技術によって提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-114">Security boundaries should be provided by process boundaries and appropriate remoting techniques.</span></span>
 
 <span data-ttu-id="62a35-115">複数のアプリケーション ドメインが 1 つのプロセスで実行できます。ただし、アプリケーション ドメインとスレッド間の一対一の相関関係はありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-115">Multiple application domains can run in a single process; however, there is not a one-to-one correlation between application domains and threads.</span></span> <span data-ttu-id="62a35-116">複数のスレッドが 1 つのアプリケーション ドメインに属することができ、スレッドが 1 つのアプリケーション ドメインで実行中に、特定のスレッドが、特定の時点を 1 つのアプリケーション ドメインに限定されていません。</span><span class="sxs-lookup"><span data-stu-id="62a35-116">Several threads can belong to a single application domain, and while a given thread is not confined to a single application domain, at any given time, a thread executes in a single application domain.</span></span>  
  
 <span data-ttu-id="62a35-117">使用してアプリケーション ドメインが作成された、<xref:System.AppDomain.CreateDomain%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-117">Application domains are created using the <xref:System.AppDomain.CreateDomain%2A> method.</span></span> <span data-ttu-id="62a35-118"><xref:System.AppDomain> インスタンスが読み込まれ、アセンブリを実行するために使用 (<xref:System.Reflection.Assembly>)。</span><span class="sxs-lookup"><span data-stu-id="62a35-118"><xref:System.AppDomain> instances are used to load and execute assemblies (<xref:System.Reflection.Assembly>).</span></span> <span data-ttu-id="62a35-119">ときに、<xref:System.AppDomain>が不要になった使用中で、アンロードできます。</span><span class="sxs-lookup"><span data-stu-id="62a35-119">When an <xref:System.AppDomain> is no longer in use, it can be unloaded.</span></span>  
  
 <span data-ttu-id="62a35-120"><xref:System.AppDomain>クラスは、アプリケーション ドメインが、アンロードされるときに、アセンブリが読み込まれるときに、または未処理の例外がスローされたときに応答するアプリケーションを有効にするイベントのセットを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a35-120">The <xref:System.AppDomain> class implements a set of events that enable applications to respond when an assembly is loaded, when an application domain will be unloaded, or when an unhandled exception is thrown.</span></span>  
  
 <span data-ttu-id="62a35-121">アプリケーション ドメインの使用の詳細については、次を参照してください。[アプリケーション ドメイン](~/docs/framework/app-domains/application-domains.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-121">For more information on using application domains, see [Application Domains](~/docs/framework/app-domains/application-domains.md).</span></span>  
  
 <span data-ttu-id="62a35-122">このクラスは、実装、 <xref:System.MarshalByRefObject>、 <xref:System._AppDomain>、および<xref:System.Security.IEvidenceFactory>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="62a35-122">This class implements the <xref:System.MarshalByRefObject>, <xref:System._AppDomain>, and <xref:System.Security.IEvidenceFactory> interfaces.</span></span>  
  
 <span data-ttu-id="62a35-123">リモート処理可能なラッパーを作成する必要がありますしない、<xref:System.AppDomain>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-123">You should never create a remotable wrapper for an <xref:System.AppDomain> object.</span></span> <span data-ttu-id="62a35-124">リモート参照を公開そうでした<xref:System.AppDomain>などのメソッドを公開する<xref:System.AppDomain.CreateInstance%2A>リモート アクセスを効果的にコード アクセス セキュリティを破棄して<xref:System.AppDomain>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-124">Doing so could publish a remote reference to that <xref:System.AppDomain>, exposing methods such as <xref:System.AppDomain.CreateInstance%2A> to remote access and effectively destroying code access security for that <xref:System.AppDomain>.</span></span> <span data-ttu-id="62a35-125">悪意のあるクライアントが、リモートに接続する<xref:System.AppDomain>任意のリソースへのアクセスを取得する可能性があります、<xref:System.AppDomain>自体へのアクセスに含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-125">Malicious clients connecting to the remoted <xref:System.AppDomain> could obtain access to any resource the <xref:System.AppDomain> itself has access to.</span></span> <span data-ttu-id="62a35-126">拡張する型のリモート処理可能なラッパーを作成しない<xref:System.MarshalByRefObject>セキュリティ システムをバイパスする悪意のあるクライアントで使用できるメソッドを実装するとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-126">Do not create remotable wrappers for any type that extends <xref:System.MarshalByRefObject> and that implements methods that could be used by malicious clients to bypass the security system.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="62a35-127">既定値、<xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType>プロパティは`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-127">The default value for the <xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType> property is `false`.</span></span> <span data-ttu-id="62a35-128">この設定は、サービスの安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-128">This setting is unsafe for services.</span></span> <span data-ttu-id="62a35-129">サービスを防ぐため、部分的に信頼されたコードをダウンロードしてから、このプロパティを設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-129">To prevent services from downloading partially trusted code, set this property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-130">この例は、新たに作成する方法を示しています。 <xref:System.AppDomain>、を内の型の新しいインスタンスを作成<xref:System.AppDomain>、し、その型のオブジェクトと通信します。</span><span class="sxs-lookup"><span data-stu-id="62a35-130">This example shows how to create a new <xref:System.AppDomain>, instantiate a type in that new <xref:System.AppDomain>, and communicate with that type's object.</span></span> <span data-ttu-id="62a35-131">さらに、この例はアンロードする方法を示しています。、<xref:System.AppDomain>原因でガベージ コレクション オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-131">In addition, this example shows how to unload the <xref:System.AppDomain> causing the object to be garbage collected.</span></span>  
  
 [!code-cpp[AppDomainX#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomainX/cpp/AppDomainX.cpp#1)]
 [!code-csharp[AppDomainX#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomainX/cs/AppDomainX.cs#1)]
 [!code-vb[AppDomainX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomainX/VB/AppDomainX.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/07ea8438-7a34-49f0-a7e8-3d6ff7e4a482"><span data-ttu-id="62a35-132">方法: アプリケーション ドメインを構成する</span><span class="sxs-lookup"><span data-stu-id="62a35-132">How To: Configure an Application Domain</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/ba1fa43e-49f5-47d9-bd7f-3024af16f4ba"><span data-ttu-id="62a35-133">方法: アプリケーション ドメインを作成する</span><span class="sxs-lookup"><span data-stu-id="62a35-133">How To: Create an Application Domain</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/1432aa2d-bd83-4346-bf3b-a1b7920e2aa9"><span data-ttu-id="62a35-134">方法 : アプリケーション ドメインにアセンブリを読み込む</span><span class="sxs-lookup"><span data-stu-id="62a35-134">How to: Load Assemblies into an Application Domain</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/f356116d-e415-4f7c-a332-6e6a60227192"><span data-ttu-id="62a35-135">方法 : アプリケーション ドメインをアンロードする</span><span class="sxs-lookup"><span data-stu-id="62a35-135">How to: Unload an Application Domain</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ActivationContext">
      <MemberSignature Language="C#" Value="public ActivationContext ActivationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ActivationContext ActivationContext" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ActivationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActivationContext As ActivationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ActivationContext ^ ActivationContext { ActivationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActivationContext : ActivationContext" Usage="System.AppDomain.ActivationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ActivationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-136">現在のアプリケーション ドメインのアクティベーション コンテキストを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-136">Gets the activation context for the current application domain.</span></span></summary>
        <value><span data-ttu-id="62a35-137">現在のアプリケーション ドメインのアクティベーション コンテキストを表すオブジェクト。ドメインにアクティベーション コンテキストが存在しない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-137">An object that represents the activation context for the current application domain, or <see langword="null" /> if the domain has no activation context.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-138">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-138">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-139">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-139">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AppendPrivatePath">
      <MemberSignature Language="C#" Value="public void AppendPrivatePath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendPrivatePath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.AppendPrivatePath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendPrivatePath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AppendPrivatePath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member AppendPrivatePath : string -&gt; unit&#xA;override this.AppendPrivatePath : string -&gt; unit" Usage="appDomain.AppendPrivatePath path" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.AppendPrivatePath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("AppDomain.AppendPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.AppendPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="62a35-140">プライベート パスに追加するディレクトリ名。</span><span class="sxs-lookup"><span data-stu-id="62a35-140">The name of the directory to be appended to the private path.</span></span></param>
        <summary><span data-ttu-id="62a35-141">指定されたディレクトリ名をプライベート パス リストに追加します。</span><span class="sxs-lookup"><span data-stu-id="62a35-141">Appends the specified directory name to the private path list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-142">このプロパティの使用は推奨されませんが既に読み込まれている後にアセンブリのプローブのパスが変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-142">The use of this property is not recommended, because it might change the probing path for assemblies after they have already been loaded.</span></span> <span data-ttu-id="62a35-143">代わりに、<xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType> プロパティを使用してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-143">Use the <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 <span data-ttu-id="62a35-144">プライベートのパスまたは相対検索パスには、アセンブリ リゾルバーがプライベート アセンブリをプローブするベース ディレクトリに対する相対パスです。</span><span class="sxs-lookup"><span data-stu-id="62a35-144">The private path, or relative search path, is the path relative to the base directory where the assembly resolver probes for private assemblies.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-145">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-145">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-146">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-146">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-147">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-147">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationIdentity">
      <MemberSignature Language="C#" Value="public ApplicationIdentity ApplicationIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ApplicationIdentity ApplicationIdentity" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ApplicationIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationIdentity As ApplicationIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ApplicationIdentity ^ ApplicationIdentity { ApplicationIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationIdentity : ApplicationIdentity" Usage="System.AppDomain.ApplicationIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ApplicationIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-148">アプリケーション ドメイン内のアプリケーションの ID を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-148">Gets the identity of the application in the application domain.</span></span></summary>
        <value><span data-ttu-id="62a35-149">アプリケーション ドメイン内のアプリケーションを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-149">An object that identifies the application in the application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-150">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-150">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-151">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-151">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationTrust">
      <MemberSignature Language="C#" Value="public System.Security.Policy.ApplicationTrust ApplicationTrust { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.ApplicationTrust ApplicationTrust" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ApplicationTrust" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationTrust As ApplicationTrust" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::ApplicationTrust ^ ApplicationTrust { System::Security::Policy::ApplicationTrust ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationTrust : System.Security.Policy.ApplicationTrust" Usage="System.AppDomain.ApplicationTrust" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.ApplicationTrust</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-152">アプリケーションに付与されているアクセス許可の情報を取得し、実行に必要な信頼レベルがそのアプリケーションにあるかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="62a35-152">Gets information describing permissions granted to an application and whether the application has a trust level that allows it to run.</span></span></summary>
        <value><span data-ttu-id="62a35-153">アプリケーション ドメインにおけるアプリケーションのアクセス許可および信頼情報をカプセル化するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-153">An object that encapsulates permission and trust information for the application in the application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-154">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-154">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-155">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-155">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplyPolicy">
      <MemberSignature Language="C#" Value="public string ApplyPolicy (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ApplyPolicy(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ApplyPolicy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyPolicy (assemblyName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ApplyPolicy(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.ApplyPolicy : string -&gt; string" Usage="appDomain.ApplyPolicy assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-156">アセンブリの表示名。<see cref="P:System.Reflection.Assembly.FullName" /> プロパティによって返される表示名と同じ形式で指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-156">The assembly display name, in the form provided by the <see cref="P:System.Reflection.Assembly.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="62a35-157">ポリシーが適用された後のアセンブリの表示名を返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-157">Returns the assembly display name after policy has been applied.</span></span></summary>
        <returns><span data-ttu-id="62a35-158">ポリシーが適用された後のアセンブリの表示名を保持する文字列。</span><span class="sxs-lookup"><span data-stu-id="62a35-158">A string containing the assembly display name after policy has been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-159"><xref:System.AppDomain.ApplyPolicy%2A>メソッドは、アセンブリの表示名とポリシー適用後の表示名を返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-159">The <xref:System.AppDomain.ApplyPolicy%2A> method takes an assembly display name and returns the post-policy display name.</span></span> <span data-ttu-id="62a35-160">これは、リフレクションのみのコンテキストでポリシーが適用されないため、ポリシーを使用してアセンブリを読み込む必要がある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="62a35-160">This is useful if you need to load an assembly using policy, because the reflection-only context does not apply policy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyLoad">
      <MemberSignature Language="C#" Value="public event AssemblyLoadEventHandler AssemblyLoad;" />
      <MemberSignature Language="ILAsm" Value=".event class System.AssemblyLoadEventHandler AssemblyLoad" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.AssemblyLoad" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AssemblyLoad As AssemblyLoadEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event AssemblyLoadEventHandler ^ AssemblyLoad;" />
      <MemberSignature Language="F#" Value="member this.AssemblyLoad : AssemblyLoadEventHandler " Usage="member this.AssemblyLoad : System.AssemblyLoadEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.AssemblyLoad</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AssemblyLoadEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-161">アセンブリが読み込まれたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-161">Occurs when an assembly is loaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-162"><xref:System.AssemblyLoadEventHandler>デリゲートに対して、このイベントは、どのようなアセンブリが読み込まれたことを示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-162">The <xref:System.AssemblyLoadEventHandler> delegate for this event indicates what assembly was loaded.</span></span>  
  
 <span data-ttu-id="62a35-163">このイベントのイベント ハンドラーを登録するには、必要なアクセス許可が必要または<xref:System.Security.SecurityException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-163">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="62a35-164">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-164">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-165">次のサンプルでは、<xref:System.AppDomain.AssemblyLoad>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-165">The following sample demonstrates the <xref:System.AppDomain.AssemblyLoad> event.</span></span>  
  
 <span data-ttu-id="62a35-166">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-166">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-167">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-167">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_AssemblyLoad#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_AssemblyLoad/CPP/assemblyload.cpp#1)]
 [!code-csharp[AppDomain_AssemblyLoad#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_AssemblyLoad/CS/assemblyload.cs#1)]
 [!code-vb[AppDomain_AssemblyLoad#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_AssemblyLoad/VB/assemblyload.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-168">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-168">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-169">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-169">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AssemblyResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler AssemblyResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler AssemblyResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.AssemblyResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AssemblyResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ AssemblyResolve;" />
      <MemberSignature Language="F#" Value="member this.AssemblyResolve : ResolveEventHandler " Usage="member this.AssemblyResolve : System.ResolveEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.AssemblyResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-170">アセンブリの解決が失敗したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-170">Occurs when the resolution of an assembly fails.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-171">役割です、<xref:System.ResolveEventHandler>で指定されているアセンブリを返すには、このイベントの<xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType>プロパティ、またはアセンブリが認識されない場合は null を返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-171">It is the responsibility of the <xref:System.ResolveEventHandler> for this event to return the assembly that is specified by the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property, or to return null if the assembly is not recognized.</span></span> <span data-ttu-id="62a35-172">アセンブリは実行コンテキストに読み込まれる必要があります。リフレクション専用コンテキストに読み込まれる、負荷が発生します。 このイベントを発生させたは失敗します。</span><span class="sxs-lookup"><span data-stu-id="62a35-172">The assembly must be loaded into an execution context; if it is loaded into the reflection-only context, the load that caused this event to be raised fails.</span></span>  
  
 <span data-ttu-id="62a35-173">このイベントの使用に関するガイダンスについては、次を参照してください。[アセンブリ読み込みの解決](~/docs/framework/app-domains/resolve-assembly-loads.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-173">For guidance on the use of this event, see [Resolving Assembly Loads](~/docs/framework/app-domains/resolve-assembly-loads.md).</span></span>  
  
 <span data-ttu-id="62a35-174">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>プロパティは、解決できなかったアセンブリの読み込みを要求したアセンブリを返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-174">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property returns the assembly that requested the assembly load that could not be resolved.</span></span> <span data-ttu-id="62a35-175">たとえば、ローダーが、プローブ パスに要求元のアセンブリとその依存関係はないため、要求元のアセンブリの依存関係を読み込めませんしない場合もあります。</span><span class="sxs-lookup"><span data-stu-id="62a35-175">For example, the loader might be unable to load a dependency of the requesting assembly because the requesting assembly and its dependency are not in the probing path.</span></span> <span data-ttu-id="62a35-176">依存関係の 1 つ以上のバージョンが利用可能な場合は、要求元のアセンブリの id を知ることが、依存関係を検出するか、適切なバージョンを識別するときに便利な可能性がありますに。</span><span class="sxs-lookup"><span data-stu-id="62a35-176">Knowing the identity of the requesting assembly might be useful in locating the dependency or in identifying the correct version, if more than one version of the dependency is available.</span></span> <span data-ttu-id="62a35-177">詳細については、「<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-177">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="62a35-178">以降では、 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<xref:System.ResolveEventHandler>リソース アセンブリを含め、すべてのアセンブリのイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-178">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <xref:System.ResolveEventHandler> event is raised for all assemblies, including resource assemblies.</span></span> <span data-ttu-id="62a35-179">以前のバージョンでは、リソース アセンブリに対して、イベントが生成されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-179">In earlier versions, the event was not raised for resource assemblies.</span></span> <span data-ttu-id="62a35-180">オペレーティング システムがローカライズされている場合、ハンドラーが複数回を呼び出すことがあります。 各カルチャ フォールバック チェーン内に 1 回です。</span><span class="sxs-lookup"><span data-stu-id="62a35-180">If the operating system is localized, the handler might be called multiple times: once for each culture in the fallback chain.</span></span>  
  
 <span data-ttu-id="62a35-181">このイベントで、<xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType>プロパティは、ポリシーが適用される前に、アセンブリ名を返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-181">For this event, the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property returns the assembly name before policy is applied.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="62a35-182">イベント ハンドラーがない値を返すまでに、イベント ハンドラーが順序で呼び出されます場合、このイベントの 1 つ以上のイベント ハンドラーが登録されている、`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-182">If more than one event handler is registered for this event, the event handlers are called in order until an event handler returns a value that isn't `null`.</span></span> <span data-ttu-id="62a35-183">後続のイベント ハンドラーは無視されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-183">Subsequent event handlers are ignored.</span></span>
  
 <span data-ttu-id="62a35-184">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-184">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-185">次のサンプルでは、<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-185">The following sample demonstrates the <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-186">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-186">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-187">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-187">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AssemblyResolve#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyResolve/CPP/assemblyresolve.cpp#1)]
 [!code-csharp[AssemblyResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyResolve/CS/assemblyresolve.cs#1)]
 [!code-vb[AssemblyResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyResolve/VB/assemblyresolve.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-188">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-188">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-189">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-189">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
        <related type="Article" href="https://msdn.microsoft.com/library/5099e549-f4fd-49fb-a290-549edd456c6a"><span data-ttu-id="62a35-190">解決 (アセンブリ読み込みを)</span><span class="sxs-lookup"><span data-stu-id="62a35-190">Resolving Assembly Loads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppDomain.BaseDirectory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.BaseDirectory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-191">アセンブリを探すためにアセンブリ リゾルバーが使用したベース ディレクトリを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-191">Gets the base directory that the assembly resolver uses to probe for assemblies.</span></span></summary>
        <value><span data-ttu-id="62a35-192">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-192">The base directory that the assembly resolver uses to probe for assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-193">このプロパティに対応、<xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-193">This property corresponds to the <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="62a35-194">これも取得できますを使用して、<xref:System.AppDomain.GetData%2A>文字列"APPBASE"を持つメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-194">It can also be retrieved using the <xref:System.AppDomain.GetData%2A> method with the string "APPBASE".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-195">次のコード例は、ドメインに読み込むアセンブリを検索するときに使用するベース ディレクトリを指定する、新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-195">The following code example creates a new application domain, specifying a base directory to use when searching for assemblies to load into the domain.</span></span> <span data-ttu-id="62a35-196">使用して、<xref:System.AppDomain.BaseDirectory%2A>プロパティをコンソールに表示するためのベース ディレクトリ パスを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-196">The example then uses the <xref:System.AppDomain.BaseDirectory%2A> property to obtain the base directory path, for display to the console.</span></span>  
  
 [!code-cpp[ADSetup#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADSetup/CPP/adsetup.cpp#1)]
 [!code-csharp[ADSetup#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADSetup/CS/adsetup.cs#1)]
 [!code-vb[ADSetup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADSetup/VB/adsetup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-197">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-197">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-198">パス自体の情報へのアクセスを含め、パスはフォーム file:// でまたは\\\UNC\dir または"c:\\"。</span><span class="sxs-lookup"><span data-stu-id="62a35-198">for access to the information in the path itself, including if the path is in the form "file://" or \\\UNC\dir or "c:\\".</span></span> <span data-ttu-id="62a35-199">列挙体に関連付けられている:<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-199">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.ApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="ClearPrivatePath">
      <MemberSignature Language="C#" Value="public void ClearPrivatePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearPrivatePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ClearPrivatePath" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearPrivatePath ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearPrivatePath();" />
      <MemberSignature Language="F#" Value="abstract member ClearPrivatePath : unit -&gt; unit&#xA;override this.ClearPrivatePath : unit -&gt; unit" Usage="appDomain.ClearPrivatePath " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ClearPrivatePath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("AppDomain.ClearPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.ClearPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-200">プライベート アセンブリの場所を指定するパスを空の文字列 ("") にリセットします。</span><span class="sxs-lookup"><span data-stu-id="62a35-200">Resets the path that specifies the location of private assemblies to the empty string ("").</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-201">プライベート パスは、プライベート アセンブリを検索する、共通言語ランタイムが検索するベース ディレクトリの相対パスです。</span><span class="sxs-lookup"><span data-stu-id="62a35-201">The private path is a path relative to the base directory that the common language runtime searches to locate private assemblies.</span></span>  
  
 <span data-ttu-id="62a35-202">詳細については、「<xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-202">For more information, see <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-203">次のコード例は、使用する方法を示します、<xref:System.AppDomain.ClearPrivatePath%2A>アセンブリが読み込まれるときに検索するプライベート パスの一覧からすべてのエントリを削除する方法。</span><span class="sxs-lookup"><span data-stu-id="62a35-203">The following code example demonstrates how to use the <xref:System.AppDomain.ClearPrivatePath%2A> method to remove all entries from the list of private paths to search when assemblies are loaded.</span></span>  
  
 <span data-ttu-id="62a35-204">このメソッドは、廃止されており新しい開発ないで使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-204">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[ADClearPrivatePath#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADClearPrivatePath/CPP/adclearprivatepath.cpp#1)]
 [!code-csharp[ADClearPrivatePath#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADClearPrivatePath/CS/adclearprivatepath.cs#1)]
 [!code-vb[ADClearPrivatePath#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADClearPrivatePath/VB/adclearprivatepath.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-205">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-205">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-206">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-206">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-207">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-207">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ClearShadowCopyPath">
      <MemberSignature Language="C#" Value="public void ClearShadowCopyPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearShadowCopyPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ClearShadowCopyPath" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearShadowCopyPath ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearShadowCopyPath();" />
      <MemberSignature Language="F#" Value="abstract member ClearShadowCopyPath : unit -&gt; unit&#xA;override this.ClearShadowCopyPath : unit -&gt; unit" Usage="appDomain.ClearShadowCopyPath " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ClearShadowCopyPath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyDirectories")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.ClearShadowCopyPath has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyDirectories instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-208">シャドウ コピーされたアセンブリが含まれているディレクトリのリストを空の文字列 ("") にリセットします。</span><span class="sxs-lookup"><span data-stu-id="62a35-208">Resets the list of directories containing shadow copied assemblies to the empty string ("").</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-209">シャドウ コピーのパスは、シャドウ コピーされたアセンブリのディレクトリのリストが格納されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-209">The shadow copy path is a list of directories where shadow copied assemblies are stored.</span></span>  
  
 <span data-ttu-id="62a35-210">詳細については、次を参照してください。<xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType>と[アセンブリのシャドウ コピー](~/docs/framework/app-domains/shadow-copy-assemblies.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-210">For more information, see <xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-211">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-211">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-212">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-212">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-213">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-213">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="F:System.String.Empty" />
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="62a35-214">アセンブリのシャドウ コピー</span><span class="sxs-lookup"><span data-stu-id="62a35-214">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateComInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-215">指定した COM 型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-215">Creates a new instance of a specified COM type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateComInstanceFrom (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CreateComInstanceFrom : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateComInstanceFrom (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-216">要求された型を定義するアセンブリが格納されているファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-216">The name of a file containing an assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-217">要求された型の名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-217">The name of the requested type.</span></span></param>
        <summary><span data-ttu-id="62a35-218">指定した COM 型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-218">Creates a new instance of a specified COM type.</span></span> <span data-ttu-id="62a35-219">型を含んでいるアセンブリのファイルの名前と、型の名前をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-219">Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="62a35-220"><paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-220">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="62a35-221">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-221">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-222">このメソッドを使用して、ローカル型を読み込むことがなく、リモート オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-222">Use this method to create objects remotely without having to load the type locally.</span></span>  
  
 <span data-ttu-id="62a35-223">戻り値は、実際のオブジェクトにアクセスするラップ解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-223">The return value must to be unwrapped to access the real object.</span></span>  
  
 <span data-ttu-id="62a35-224">A<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>属性の値`true`; 型のインスタンスを作成するこのメソッドの COM 型を明示的にまたは既定で適用する必要がありますそれ以外の場合、<xref:System.TypeLoadException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-224">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-225">次の例します。</span><span class="sxs-lookup"><span data-stu-id="62a35-225">The following sample demonstrates</span></span>  
  
 [!code-cpp[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/CPP/createcominstancefrom.cpp#1)]
 [!code-csharp[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/CS/createcominstancefrom.cs#1)]
 [!code-vb[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/VB/createcominstancefrom.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-226"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-226"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-227">型を読み込めません。</span><span class="sxs-lookup"><span data-stu-id="62a35-227">The type cannot be loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-228">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-228">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-229">パラメーターなしのパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-229">No public parameterless constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-230"><paramref name="assemblyName" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-230"><paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="62a35-231"><paramref name="typeName" /> は抽象クラスです。</span><span class="sxs-lookup"><span data-stu-id="62a35-231"><paramref name="typeName" /> is an abstract class.</span></span>  
  
<span data-ttu-id="62a35-232">または</span><span class="sxs-lookup"><span data-stu-id="62a35-232">-or-</span></span> 
<span data-ttu-id="62a35-233">このメンバーは、遅延バインディング メカニズムで呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-233">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-234">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-234">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-235"><paramref name="assemblyName" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="62a35-235"><paramref name="assemblyName" /> is an empty string ("").</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-236"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-236"><paramref name="assemblyName" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-237">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-237">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-238">参照されている COM オブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-238">The COM object that is being referred to is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-239">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-239">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-240">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-240">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-241">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-241">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyFile, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyFile, string typeName, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateComInstanceFrom (assemblyFile As String, typeName As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.CreateComInstanceFrom : string * string * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateComInstanceFrom (assemblyFile, typeName, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-242">要求された型を定義するアセンブリが格納されているファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-242">The name of a file containing an assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-243">要求された型の名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-243">The name of the requested type.</span></span></param>
        <param name="hashValue"><span data-ttu-id="62a35-244">計算されたハッシュ コードの値を表します。</span><span class="sxs-lookup"><span data-stu-id="62a35-244">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="62a35-245">アセンブリ マニフェストが使用するハッシュ アルゴリズムを表します。</span><span class="sxs-lookup"><span data-stu-id="62a35-245">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="62a35-246">指定した COM 型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-246">Creates a new instance of a specified COM type.</span></span> <span data-ttu-id="62a35-247">型を含んでいるアセンブリのファイルの名前と、型の名前をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-247">Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="62a35-248"><paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-248">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="62a35-249">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-249">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-250">このメソッドを使用して、ローカル型を読み込むことがなく、リモート オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-250">Use this method to create objects remotely without having to load the type locally.</span></span>  
  
 <span data-ttu-id="62a35-251">戻り値は、実際のオブジェクトにアクセスするラップ解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-251">The return value must to be unwrapped to access the real object.</span></span>  
  
 <span data-ttu-id="62a35-252">A<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>属性の値`true`; 型のインスタンスを作成するこのメソッドの COM 型を明示的にまたは既定で適用する必要がありますそれ以外の場合、<xref:System.TypeLoadException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-252">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-253"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-253"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-254">型を読み込めません。</span><span class="sxs-lookup"><span data-stu-id="62a35-254">The type cannot be loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-255">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-255">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-256">パラメーターなしのパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-256">No public parameterless constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-257"><paramref name="assemblyFile" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-257"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="62a35-258"><paramref name="typeName" /> は抽象クラスです。</span><span class="sxs-lookup"><span data-stu-id="62a35-258"><paramref name="typeName" /> is an abstract class.</span></span>  
  
<span data-ttu-id="62a35-259">または</span><span class="sxs-lookup"><span data-stu-id="62a35-259">-or-</span></span> 
<span data-ttu-id="62a35-260">このメンバーは、遅延バインディング メカニズムで呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-260">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-261">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-261">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-262"><paramref name="assemblyFile" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="62a35-262"><paramref name="assemblyFile" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-263"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-263"><paramref name="assemblyFile" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-264">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-264">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-265">参照されている COM オブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-265">The COM object that is being referred to is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-266">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-266">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-267">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-267">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-268">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-268">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDomain">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-269">新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-269">Creates a new application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string -&gt; AppDomain" Usage="System.AppDomain.CreateDomain friendlyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="62a35-270">ドメインの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-270">The friendly name of the domain.</span></span></param>
        <summary><span data-ttu-id="62a35-271">名前を指定して新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-271">Creates a new application domain with the specified name.</span></span></summary>
        <returns><span data-ttu-id="62a35-272">新しく作成されたアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-272">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-273">`friendlyName`人間にわかりやすい方法でドメインを識別するパラメーターが対象としています。</span><span class="sxs-lookup"><span data-stu-id="62a35-273">The `friendlyName` parameter is intended to identify the domain in a manner that is meaningful to humans.</span></span> <span data-ttu-id="62a35-274">この文字列は、ユーザー インターフェイスに表示するための適切なである必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-274">This string should be suitable for display in user interfaces.</span></span>  
  
 <span data-ttu-id="62a35-275">このメソッドのオーバー ロードを使用して、<xref:System.AppDomainSetup>既定のアプリケーション ドメインからの情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-275">This method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-276">次の例を示します、一般のいずれかを使用してドメインを作成する方法、<xref:System.AppDomain.CreateDomain%2A>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-276">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-277"><paramref name="friendlyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-277"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="62a35-278">.NET Core でサポートされていないメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-278">Method not supported on .NET Core.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-279">証拠を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-279">to provide evidence.</span></span> <span data-ttu-id="62a35-280"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-280">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="P:System.AppDomain.FriendlyName" />
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="62a35-281">ドメインの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-281">The friendly name of the domain.</span></span> <span data-ttu-id="62a35-282">この表示名は、ドメインを識別するためにユーザー インターフェイスに表示できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-282">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="62a35-283">詳細については、「<see cref="P:System.AppDomain.FriendlyName" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-283">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="62a35-284">アプリケーション ドメインで実行されるコードの ID を確立する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-284">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="62a35-285">現在のアプリケーション ドメインの証拠を使用するには、<see langword="null" /> を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a35-285">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <summary><span data-ttu-id="62a35-286">名前および証拠を指定して新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-286">Creates a new application domain with the given name using the supplied evidence.</span></span></summary>
        <returns><span data-ttu-id="62a35-287">新しく作成されたアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-287">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-288">このメソッドのオーバー ロードを使用して、<xref:System.AppDomainSetup>既定のアプリケーション ドメインからの情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-288">This method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
 <span data-ttu-id="62a35-289">場合`securityInfo`は省略すると、現在のアプリケーション ドメインから証拠を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-289">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="62a35-290">サンド ボックス アプリケーション ドメインを作成するのには、このメソッドのオーバー ロードを使わないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-290">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="62a35-291">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、指定されている証拠`securityInfo`不要になったアプリケーション ドメインの許可セットに影響します。</span><span class="sxs-lookup"><span data-stu-id="62a35-291">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="62a35-292">使用して、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29>サンド ボックス アプリケーション ドメインを作成するメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-292">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-293">次の例を示します、一般のいずれかを使用してドメインを作成する方法、<xref:System.AppDomain.CreateDomain%2A>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-293">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-294"><paramref name="friendlyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-294"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-295">証拠を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-295">to provide evidence.</span></span> <span data-ttu-id="62a35-296"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-296">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, info As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ info);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo, info)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="info" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="62a35-297">ドメインの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-297">The friendly name of the domain.</span></span> <span data-ttu-id="62a35-298">この表示名は、ドメインを識別するためにユーザー インターフェイスに表示できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-298">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="62a35-299">詳細については、「<see cref="P:System.AppDomain.FriendlyName" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-299">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="62a35-300">アプリケーション ドメインで実行されるコードの ID を確立する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-300">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="62a35-301">現在のアプリケーション ドメインの証拠を使用するには、<see langword="null" /> を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a35-301">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="info"><span data-ttu-id="62a35-302">アプリケーション ドメインの初期化情報を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-302">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="62a35-303">名前、証拠、およびアプリケーション ドメイン設定情報を指定して、新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-303">Creates a new application domain using the specified name, evidence, and application domain setup information.</span></span></summary>
        <returns><span data-ttu-id="62a35-304">新しく作成されたアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-304">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-305">場合`info`は省略すると、このメソッドのオーバー ロードを使用して、<xref:System.AppDomainSetup>既定のアプリケーション ドメインからの情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-305">If `info` is not supplied, this method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
 <span data-ttu-id="62a35-306">場合`securityInfo`は省略すると、現在のアプリケーション ドメインから証拠を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-306">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="62a35-307">サンド ボックス アプリケーション ドメインを作成するのには、このメソッドのオーバー ロードを使わないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-307">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="62a35-308">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、指定されている証拠`securityInfo`不要になったアプリケーション ドメインの許可セットに影響します。</span><span class="sxs-lookup"><span data-stu-id="62a35-308">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="62a35-309">使用して、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29>サンド ボックス アプリケーション ドメインを作成するメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-309">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-310">次の例を示します、一般のいずれかを使用してドメインを作成する方法、<xref:System.AppDomain.CreateDomain%2A>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-310">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-311"><paramref name="friendlyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-311"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-312">証拠を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-312">to provide evidence.</span></span> <span data-ttu-id="62a35-313"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-313">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info, System.Security.PermissionSet grantSet, params System.Security.Policy.StrongName[] fullTrustAssemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup info, class System.Security.PermissionSet grantSet, class System.Security.Policy.StrongName[] fullTrustAssemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, info As AppDomainSetup, grantSet As PermissionSet, ParamArray fullTrustAssemblies As StrongName()) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ info, System::Security::PermissionSet ^ grantSet, ... cli::array &lt;System::Security::Policy::StrongName ^&gt; ^ fullTrustAssemblies);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup * System.Security.PermissionSet * System.Security.Policy.StrongName[] -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo, info, grantSet, fullTrustAssemblies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="info" Type="System.AppDomainSetup" />
        <Parameter Name="grantSet" Type="System.Security.PermissionSet" />
        <Parameter Name="fullTrustAssemblies" Type="System.Security.Policy.StrongName[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="62a35-314">ドメインの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-314">The friendly name of the domain.</span></span> <span data-ttu-id="62a35-315">この表示名は、ドメインを識別するためにユーザー インターフェイスに表示できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-315">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="62a35-316">詳細については、<see cref="P:System.AppDomain.FriendlyName" /> の説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-316">For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="62a35-317">アプリケーション ドメインで実行されるコードの ID を確立する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-317">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="62a35-318">現在のアプリケーション ドメインの証拠を使用するには、<see langword="null" /> を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a35-318">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="info"><span data-ttu-id="62a35-319">アプリケーション ドメインの初期化情報を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-319">An object that contains application domain initialization information.</span></span></param>
        <param name="grantSet"><span data-ttu-id="62a35-320">新しいアプリケーション ドメインに読み込まれた、特定のアクセス許可を持たないすべてのアセンブリに付与される既定のアクセス許可セット。</span><span class="sxs-lookup"><span data-stu-id="62a35-320">A default permission set that is granted to all assemblies loaded into the new application domain that do not have specific grants.</span></span></param>
        <param name="fullTrustAssemblies"><span data-ttu-id="62a35-321">新しいアプリケーション ドメインで、完全に信頼されていると見なされるアセンブリを表す厳密名の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-321">An array of strong names representing assemblies to be considered fully trusted in the new application domain.</span></span></param>
        <summary><span data-ttu-id="62a35-322">指定された名前、証拠、アプリケーション ドメインの設定情報、既定のアクセス許可セット、および完全信頼されたアセンブリの配列を使用して、新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-322">Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</span></span></summary>
        <returns><span data-ttu-id="62a35-323">新しく作成されたアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-323">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-324">設定する必要があります、<xref:System.AppDomainSetup.ApplicationBase%2A>のプロパティ、<xref:System.AppDomainSetup>オブジェクトに対して指定する`info`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-324">You must set the <xref:System.AppDomainSetup.ApplicationBase%2A> property of the <xref:System.AppDomainSetup> object that you supply for `info`.</span></span> <span data-ttu-id="62a35-325">それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-325">Otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="62a35-326">場合`securityInfo`は省略すると、現在のアプリケーション ドメインから証拠を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-326">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="62a35-327">提供情報`grantSet`と`fullTrustAssemblies`を作成するために使用する<xref:System.Security.Policy.ApplicationTrust>新しいアプリケーション ドメインのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-327">The information provided for `grantSet` and `fullTrustAssemblies` is used to create an <xref:System.Security.Policy.ApplicationTrust> object for the new application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-328"><paramref name="friendlyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-328"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a35-329">アプリケーション ドメインが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-329">The application domain is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-330">または</span><span class="sxs-lookup"><span data-stu-id="62a35-330">-or-</span></span> 
<span data-ttu-id="62a35-331"><see cref="P:System.AppDomainSetup.ApplicationBase" /> プロパティは、<paramref name="info" /> 用に提供される <see cref="T:System.AppDomainSetup" /> オブジェクトでは設定されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-331">The <see cref="P:System.AppDomainSetup.ApplicationBase" /> property is not set on the <see cref="T:System.AppDomainSetup" /> object that is supplied for <paramref name="info" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-332">作成し、アプリケーション ドメインを操作する権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-332">for the ability to create and manipulate an application domain.</span></span> <span data-ttu-id="62a35-333"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-333">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</span></span> <span data-ttu-id="62a35-334">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.Demand" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-334">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, appBasePath As String, appRelativeSearchPath As String, shadowCopyFiles As Boolean) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, System::String ^ appBasePath, System::String ^ appRelativeSearchPath, bool shadowCopyFiles);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence * string * string * bool -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appBasePath" Type="System.String" />
        <Parameter Name="appRelativeSearchPath" Type="System.String" />
        <Parameter Name="shadowCopyFiles" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="62a35-335">ドメインの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-335">The friendly name of the domain.</span></span> <span data-ttu-id="62a35-336">この表示名は、ドメインを識別するためにユーザー インターフェイスに表示できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-336">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="62a35-337">詳細については、「<see cref="P:System.AppDomain.FriendlyName" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-337">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="62a35-338">アプリケーション ドメインで実行されるコードの ID を確立する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-338">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="62a35-339">現在のアプリケーション ドメインの証拠を使用するには、<see langword="null" /> を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a35-339">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="appBasePath"><span data-ttu-id="62a35-340">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-340">The base directory that the assembly resolver uses to probe for assemblies.</span></span> <span data-ttu-id="62a35-341">詳細については、「<see cref="P:System.AppDomain.BaseDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-341">For more information, see <see cref="P:System.AppDomain.BaseDirectory" />.</span></span></param>
        <param name="appRelativeSearchPath"><span data-ttu-id="62a35-342">アセンブリ リゾルバーがプライベート アセンブリを調べる場所を示す、ベース ディレクトリを基準とした相対パス。</span><span class="sxs-lookup"><span data-stu-id="62a35-342">The path relative to the base directory where the assembly resolver should probe for private assemblies.</span></span> <span data-ttu-id="62a35-343">詳細については、「<see cref="P:System.AppDomain.RelativeSearchPath" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-343">For more information, see <see cref="P:System.AppDomain.RelativeSearchPath" />.</span></span></param>
        <param name="shadowCopyFiles"><span data-ttu-id="62a35-344"><see langword="true" /> の場合、アセンブリのシャドウ コピーはこのアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-344">If <see langword="true" />, a shadow copy of an assembly is loaded into this application domain.</span></span></param>
        <summary><span data-ttu-id="62a35-345">名前、証拠、アプリケーション ベース パス、相対検索パス、およびアセンブリのシャドウ コピーをアプリケーション ドメインに読み込むかどうかを示すパラメーターを指定して、新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-345">Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</span></span></summary>
        <returns><span data-ttu-id="62a35-346">新しく作成されたアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-346">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-347">場合`securityInfo`は省略すると、現在のアプリケーション ドメインから証拠を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-347">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="62a35-348">シャドウ コピーの詳細については、次を参照してください。<xref:System.AppDomain.ShadowCopyFiles%2A>と[アセンブリのシャドウ コピー](~/docs/framework/app-domains/shadow-copy-assemblies.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-348">For more information about shadow copying, see <xref:System.AppDomain.ShadowCopyFiles%2A> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="62a35-349">サンド ボックス アプリケーション ドメインを作成するのには、このメソッドのオーバー ロードを使わないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-349">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="62a35-350">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、指定されている証拠`securityInfo`不要になったアプリケーション ドメインの許可セットに影響します。</span><span class="sxs-lookup"><span data-stu-id="62a35-350">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="62a35-351">使用して、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29>サンド ボックス アプリケーション ドメインを作成するメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-351">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-352">次の例を示します、一般のいずれかを使用してドメインを作成する方法、<xref:System.AppDomain.CreateDomain%2A>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-352">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-353"><paramref name="friendlyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-353"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-354">証拠を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-354">to provide evidence.</span></span> <span data-ttu-id="62a35-355"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-355">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer adInit, string[] adInitArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, class System.AppDomainInitializer adInit, string[] adInitArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, appBasePath As String, appRelativeSearchPath As String, shadowCopyFiles As Boolean, adInit As AppDomainInitializer, adInitArgs As String()) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, System::String ^ appBasePath, System::String ^ appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer ^ adInit, cli::array &lt;System::String ^&gt; ^ adInitArgs);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence * string * string * bool * AppDomainInitializer * string[] -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles, adInit, adInitArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appBasePath" Type="System.String" />
        <Parameter Name="appRelativeSearchPath" Type="System.String" />
        <Parameter Name="shadowCopyFiles" Type="System.Boolean" />
        <Parameter Name="adInit" Type="System.AppDomainInitializer" />
        <Parameter Name="adInitArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="62a35-356">ドメインの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-356">The friendly name of the domain.</span></span> <span data-ttu-id="62a35-357">この表示名は、ドメインを識別するためにユーザー インターフェイスに表示できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-357">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="62a35-358">詳細については、「<see cref="P:System.AppDomain.FriendlyName" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-358">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="62a35-359">アプリケーション ドメインで実行されるコードの ID を確立する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-359">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="62a35-360">現在のアプリケーション ドメインの証拠を使用するには、<see langword="null" /> を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a35-360">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="appBasePath"><span data-ttu-id="62a35-361">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-361">The base directory that the assembly resolver uses to probe for assemblies.</span></span> <span data-ttu-id="62a35-362">詳細については、「<see cref="P:System.AppDomain.BaseDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-362">For more information, see <see cref="P:System.AppDomain.BaseDirectory" />.</span></span></param>
        <param name="appRelativeSearchPath"><span data-ttu-id="62a35-363">アセンブリ リゾルバーがプライベート アセンブリを調べる場所を示す、ベース ディレクトリを基準とした相対パス。</span><span class="sxs-lookup"><span data-stu-id="62a35-363">The path relative to the base directory where the assembly resolver should probe for private assemblies.</span></span> <span data-ttu-id="62a35-364">詳細については、「<see cref="P:System.AppDomain.RelativeSearchPath" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-364">For more information, see <see cref="P:System.AppDomain.RelativeSearchPath" />.</span></span></param>
        <param name="shadowCopyFiles"><span data-ttu-id="62a35-365">アプリケーション ドメインにアセンブリのシャドウ コピーを読み込む場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-365"><see langword="true" /> to load a shadow copy of an assembly into the application domain.</span></span></param>
        <param name="adInit"><span data-ttu-id="62a35-366">新しい <see cref="T:System.AppDomain" /> オブジェクトの初期化時に呼び出されるコールバック メソッドを表す <see cref="T:System.AppDomainInitializer" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="62a35-366">An <see cref="T:System.AppDomainInitializer" /> delegate that represents a callback method to invoke when the new <see cref="T:System.AppDomain" /> object is initialized.</span></span></param>
        <param name="adInitArgs"><span data-ttu-id="62a35-367">新しい <see cref="T:System.AppDomain" /> オブジェクトの初期化時に <paramref name="adInit" /> によって表されるコールバックに渡される文字列型引数の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-367">An array of string arguments to be passed to the callback represented by <paramref name="adInit" />, when the new <see cref="T:System.AppDomain" /> object is initialized.</span></span></param>
        <summary><span data-ttu-id="62a35-368">名前、証拠、アプリケーション ベース パス、相対検索パス、およびアセンブリのシャドウ コピーをアプリケーション ドメインに読み込むかどうかを示すパラメーターを指定して、新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-368">Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</span></span> <span data-ttu-id="62a35-369">アプリケーション ドメインを初期化したときに呼び出されるコールバック メソッドと、そのコールバック メソッドに渡す文字列型引数の配列を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-369">Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</span></span></summary>
        <returns><span data-ttu-id="62a35-370">新しく作成されたアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-370">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-371">によって表されるメソッド`adInit`新しく作成されたアプリケーション ドメインのコンテキストで実行されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-371">The method represented by `adInit` is executed in the context of the newly created application domain.</span></span>  
  
 <span data-ttu-id="62a35-372">場合`securityInfo`は省略すると、現在のアプリケーション ドメインから証拠を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-372">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="62a35-373">シャドウ コピーの詳細については、次を参照してください。<xref:System.AppDomain.ShadowCopyFiles%2A>と[アセンブリのシャドウ コピー](~/docs/framework/app-domains/shadow-copy-assemblies.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-373">For more information about shadow copying, see <xref:System.AppDomain.ShadowCopyFiles%2A> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="62a35-374">サンド ボックス アプリケーション ドメインを作成するのには、このメソッドのオーバー ロードを使わないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-374">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="62a35-375">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、指定されている証拠`securityInfo`不要になったアプリケーション ドメインの許可セットに影響します。</span><span class="sxs-lookup"><span data-stu-id="62a35-375">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="62a35-376">使用して、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29>サンド ボックス アプリケーション ドメインを作成するメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-376">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-377"><paramref name="friendlyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-377"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-378">証拠を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-378">to provide evidence.</span></span> <span data-ttu-id="62a35-379"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-379">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-380">指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-380">Creates a new instance of a specified type defined in a specified assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * string -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstance (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-381">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-381">The display name of the assembly.</span></span> <span data-ttu-id="62a35-382">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-382">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-383">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-383">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="62a35-384">指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-384">Creates a new instance of the specified type defined in the specified assembly.</span></span></summary>
        <returns><span data-ttu-id="62a35-385"><paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-385">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="62a35-386">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-386">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-387">このメソッドの既定のコンス トラクターを呼び出す`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-387">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="62a35-388">参照してください<xref:System.Reflection.AssemblyName>の形式に関する`assemblyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-388">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="62a35-389">呼び出そうとすると<xref:System.AppDomain.CreateInstance%2A>ターゲット上で対象のアプリケーション ドメイン内のアセンブリの読み込みが成功した現在のアプリケーション ドメインではないアプリケーション ドメインが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-389">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="62a35-390"><xref:System.Reflection.Assembly>でない<xref:System.MarshalByRefObject>、このメソッドが返すしようとした場合、 <xref:System.Reflection.Assembly> 、現在のアプリケーション ドメインに読み込まれたアセンブリ、共通言語ランタイムが、現在のアプリケーション ドメインにアセンブリを読み込むにしてください、。負荷が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-390">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="62a35-391">現在のアプリケーション ドメインに読み込まれるアセンブリは、2 つのアプリケーション ドメインのパスの設定が異なる場合、最初に読み込まれたアセンブリから異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-391">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-392">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-392">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-393"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-393"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-394"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-394"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-395">または</span><span class="sxs-lookup"><span data-stu-id="62a35-395">-or-</span></span> 
<span data-ttu-id="62a35-396">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-396">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-397">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-397">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-398"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-398"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-399">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-399">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-400">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-400">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-401"><paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-401"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-402">このインスタンスは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-402">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-403">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-403">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-404">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-404">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-405">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-405">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-406">デリゲートのインスタンスを作成するときに、アンマネージ コードを呼び出す機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-406">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="62a35-407">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="62a35-407">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (assemblyName As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstance (assemblyName, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-408">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-408">The display name of the assembly.</span></span> <span data-ttu-id="62a35-409">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-409">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-410">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-410">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-411">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-411">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-412">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-412">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-413">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-413">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-414">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-414">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="62a35-415">指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-415">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="62a35-416">アクティベーション属性の配列をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-416">A parameter specifies an array of activation attributes.</span></span></summary>
        <returns><span data-ttu-id="62a35-417"><paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-417">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="62a35-418">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-418">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-419">このメソッドの既定のコンス トラクターを呼び出す`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-419">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="62a35-420">参照してください<xref:System.Reflection.AssemblyName>の形式に関する`assemblyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-420">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="62a35-421">呼び出そうとすると<xref:System.AppDomain.CreateInstance%2A>ターゲット上で対象のアプリケーション ドメイン内のアセンブリの読み込みが成功した現在のアプリケーション ドメインではないアプリケーション ドメインが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-421">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="62a35-422"><xref:System.Reflection.Assembly>でない<xref:System.MarshalByRefObject>、このメソッドが返すしようとした場合、 <xref:System.Reflection.Assembly> 、現在のアプリケーション ドメインに読み込まれたアセンブリ、共通言語ランタイムが、現在のアプリケーション ドメインにアセンブリを読み込むにしてください、。負荷が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-422">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="62a35-423">現在のアプリケーション ドメインに読み込まれるアセンブリは、2 つのアプリケーション ドメインのパスの設定が異なる場合、最初に読み込まれたアセンブリから異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-423">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-424">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-424">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-425"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-425"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-426"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-426"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-427">または</span><span class="sxs-lookup"><span data-stu-id="62a35-427">-or-</span></span> 
<span data-ttu-id="62a35-428">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-428">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-429">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-429">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-430"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-430"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-431">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-431">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-432">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-432">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-433">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-433">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-434"><paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-434"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-435">このインスタンスは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-435">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-436">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-436">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-437">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-437">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-438">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-438">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-439">デリゲートのインスタンスを作成するときに、アンマネージ コードを呼び出す機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-439">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="62a35-440">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="62a35-440">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="62a35-441">すべての型のメンバーに対して操作を呼び出す権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-441">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="62a35-442">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="62a35-442">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstance : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstance (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-443">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-443">The display name of the assembly.</span></span> <span data-ttu-id="62a35-444">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-444">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-445">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-445">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="62a35-446">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</span><span class="sxs-lookup"><span data-stu-id="62a35-446">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="62a35-447"><paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="62a35-447">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-448"><paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-448">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="62a35-449">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-449">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="62a35-450"><paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-450">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-451">コンストラクターに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-451">The arguments to pass to the constructor.</span></span> <span data-ttu-id="62a35-452">この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-452">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="62a35-453">既定のコンストラクターを優先する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-453">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="62a35-454"><paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-454">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-455"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-455">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-456">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-456">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-457">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-457">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-458">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。</span><span class="sxs-lookup"><span data-stu-id="62a35-458">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="62a35-459">クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-459">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-460">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-460">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="62a35-461">指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-461">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="62a35-462">バインダー、バインディング フラグ、コンストラクター引数、引数を解釈するために使用するカルチャ固有の情報、および省略可能なアクティベーション属性をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-462">Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.</span></span></summary>
        <returns><span data-ttu-id="62a35-463"><paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-463">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="62a35-464">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-464">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-465">参照してください<xref:System.Reflection.AssemblyName>の形式に関する`assemblyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-465">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="62a35-466">呼び出そうとすると<xref:System.AppDomain.CreateInstance%2A>ターゲット上で対象のアプリケーション ドメイン内のアセンブリの読み込みが成功した現在のアプリケーション ドメインではないアプリケーション ドメインが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-466">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="62a35-467"><xref:System.Reflection.Assembly>でない<xref:System.MarshalByRefObject>、このメソッドが返すしようとした場合、 <xref:System.Reflection.Assembly> 、現在のアプリケーション ドメインに読み込まれたアセンブリ、共通言語ランタイムが、現在のアプリケーション ドメインにアセンブリを読み込むにしてください、。負荷が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-467">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="62a35-468">現在のアプリケーション ドメインに読み込まれるアセンブリは、2 つのアプリケーション ドメインのパスの設定が異なる場合、最初に読み込まれたアセンブリから異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-468">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-469">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-469">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-470"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-470"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-471"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-471"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-472">または</span><span class="sxs-lookup"><span data-stu-id="62a35-472">-or-</span></span> 
 <span data-ttu-id="62a35-473">現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</span><span class="sxs-lookup"><span data-stu-id="62a35-473"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-474">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-474">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-475"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-475"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-476">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-476">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-477">一致するコンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-477">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-478">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-478">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-479"><paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-479"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-480">このインスタンスは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-480">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-481">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-481">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-482">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-482">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-483">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-483">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-484">デリゲートのインスタンスを作成するときに、アンマネージ コードを呼び出す機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-484">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="62a35-485">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="62a35-485">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="62a35-486">すべての型のメンバーに対して操作を呼び出す権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-486">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="62a35-487">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="62a35-487">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstance (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-488">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-488">The display name of the assembly.</span></span> <span data-ttu-id="62a35-489">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-489">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-490">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-490">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="62a35-491">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</span><span class="sxs-lookup"><span data-stu-id="62a35-491">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="62a35-492"><paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="62a35-492">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-493"><paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-493">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="62a35-494">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-494">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="62a35-495"><paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-495">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-496">コンストラクターに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-496">The arguments to pass to the constructor.</span></span> <span data-ttu-id="62a35-497">この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-497">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="62a35-498">既定のコンストラクターを優先する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-498">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="62a35-499"><paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-499">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-500"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-500">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-501">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-501">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-502">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-502">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-503">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-503">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-504">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-504">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="62a35-505"><paramref name="typeName" /> の作成を承認するために使用される情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-505">Information used to authorize creation of <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="62a35-506">指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-506">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="62a35-507">バインダー、バインディング フラグ、コンストラクター引数、引数を解釈するために使用するカルチャ固有の情報、アクティベーション属性、型を作成するために必要な承認情報をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-507">Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.</span></span></summary>
        <returns><span data-ttu-id="62a35-508"><paramref name="typeName" /> で指定した新しいインスタンスのラッパーであるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-508">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="62a35-509">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-509">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-510">参照してください<xref:System.Reflection.AssemblyName>の形式に関する`assemblyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-510">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="62a35-511">呼び出そうとすると<xref:System.AppDomain.CreateInstance%2A>ターゲット上で対象のアプリケーション ドメイン内のアセンブリの読み込みが成功した現在のアプリケーション ドメインではないアプリケーション ドメインが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-511">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="62a35-512"><xref:System.Reflection.Assembly>でない<xref:System.MarshalByRefObject>、このメソッドが返すしようとした場合、 <xref:System.Reflection.Assembly> 、現在のアプリケーション ドメインに読み込まれたアセンブリ、共通言語ランタイムが、現在のアプリケーション ドメインにアセンブリを読み込むにしてください、。負荷が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-512">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="62a35-513">現在のアプリケーション ドメインに読み込まれるアセンブリは、2 つのアプリケーション ドメインのパスの設定が異なる場合、最初に読み込まれたアセンブリから異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-513">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-514">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-514">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-515"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-515"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-516"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-516"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-517">または</span><span class="sxs-lookup"><span data-stu-id="62a35-517">-or-</span></span> 
<span data-ttu-id="62a35-518">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-518">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-519">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-519">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-520"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-520"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-521">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-521">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-522">一致するコンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-522">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-523">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-523">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="62a35-524">または</span><span class="sxs-lookup"><span data-stu-id="62a35-524">-or-</span></span> 
 <span data-ttu-id="62a35-525"><paramref name="securityAttributes" /> が <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-525"><paramref name="securityAttributes" /> is not <see langword="null" />.</span></span> <span data-ttu-id="62a35-526">レガシ CAS ポリシーが有効になっていない場合は、<paramref name="securityAttributes" /> を <see langword="null." /> にする必要があります</span><span class="sxs-lookup"><span data-stu-id="62a35-526">When legacy CAS policy is not enabled, <paramref name="securityAttributes" /> should be <see langword="null." /></span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-527"><paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-527"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-528">このインスタンスは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-528">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-529">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-529">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-530">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-530">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-531">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-531">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-532">証拠を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-532">to provide evidence.</span></span> <span data-ttu-id="62a35-533"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-533">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="62a35-534">すべての型のメンバーに対して操作を呼び出す権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-534">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="62a35-535">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="62a35-535">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceAndUnwrap">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-536">指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-536">Creates a new instance of a specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceAndUnwrap (assemblyName As String, typeName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceAndUnwrap : string * string -&gt; obj" Usage="appDomain.CreateInstanceAndUnwrap (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-537">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-537">The display name of the assembly.</span></span> <span data-ttu-id="62a35-538">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-538">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-539">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-539">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="62a35-540">指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-540">Creates a new instance of the specified type.</span></span> <span data-ttu-id="62a35-541">型が定義されているアセンブリの名前と、型の名前をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-541">Parameters specify the assembly where the type is defined, and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="62a35-542"><paramref name="typeName" /> で指定したオブジェクトのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a35-542">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-543">これは、結合メソッドは<xref:System.AppDomain.CreateInstance%2A>と<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-543">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="62a35-544">このメソッドの既定のコンス トラクターを呼び出す`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-544">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="62a35-545">参照してください<xref:System.Reflection.AssemblyName>の形式に関する`assemblyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-545">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="62a35-546">参照してください、<xref:System.Type.FullName%2A?displayProperty=nameWithType>プロパティの形式に関する`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-546">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-547">メソッドへの事前バインディングされた呼び出しを行った場合`M`型のオブジェクトの`T1`によって返された<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>、メソッドは、型のオブジェクトのメソッドへの事前バインディングされた呼び出しをおよび`T2`アセンブリで`C`以外、現在のアセンブリまたはアセンブリを含む`T1`、アセンブリ`C`は現在のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-547">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="62a35-548">事前バインディングされた呼び出し場合でも、この読み込みが行われます`T1.M()`の本体で行われた、 <xref:System.Reflection.Emit.DynamicMethod>、またはその他の動的に生成されたコード。</span><span class="sxs-lookup"><span data-stu-id="62a35-548">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="62a35-549">現在のドメインが既定のドメイン、アセンブリがかどうか`C`プロセスが終了するまでアンロードすることはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-549">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="62a35-550">後で、現在のドメインがアセンブリの読み込みを試みると`C`負荷が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-550">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-551">次のコード例では、別のアプリケーション ドメインでコードを実行する最も簡単な方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-551">The following code example shows the simplest way to execute code in another application domain.</span></span> <span data-ttu-id="62a35-552">例では、という名前のクラスを定義する`Worker`から継承する<xref:System.MarshalByRefObject>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-552">The example defines a class named `Worker` that inherits from <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="62a35-553">`Worker`クラスを実行しているアプリケーション ドメインの名前を表示するメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-553">The `Worker` class defines a method that displays the name of the application domain in which it is executing.</span></span> <span data-ttu-id="62a35-554">インスタンスを作成する例では、`Worker`既定のアプリケーション ドメインと、新しいアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-554">The example creates instances of `Worker` in the default application domain and in a new application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-555">含むアセンブリ`Worker`両方のアプリケーション ドメインに読み込まれる必要がありますが、新しいアプリケーション ドメインにのみ存在する他のアセンブリを読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-555">The assembly that contains `Worker` must be loaded into both application domains, but it can load other assemblies that exist only in the new application domain.</span></span>  
  
 [!code-cpp[CreateInstanceAndUnwrap2#1](~/samples/snippets/cpp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cpp/source.cpp#1)]
 [!code-csharp[CreateInstanceAndUnwrap2#1](~/samples/snippets/csharp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cs/source.cs#1)]
 [!code-vb[CreateInstanceAndUnwrap2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CreateInstanceAndUnwrap2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-556"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-556"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-557">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-557">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-558"><paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-558"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-559"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-559"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-560">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-560">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-561">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-561">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-562"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-562"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-563">または</span><span class="sxs-lookup"><span data-stu-id="62a35-563">-or-</span></span> 
<span data-ttu-id="62a35-564">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-564">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-565">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-565">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-566">アセンブリ マニフェストを含むファイルを読み取るため、モジュール マニフェストのファイル以外から型を作成する場合またはします。</span><span class="sxs-lookup"><span data-stu-id="62a35-566">for the ability to read the file containing the assembly manifest, or if you are creating a type from a module other than the manifest file.</span></span> <span data-ttu-id="62a35-567">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-567">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-568">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-568">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceAndUnwrap (assemblyName As String, typeName As String, activationAttributes As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceAndUnwrap : string * string * obj[] -&gt; obj" Usage="appDomain.CreateInstanceAndUnwrap (assemblyName, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-569">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-569">The display name of the assembly.</span></span> <span data-ttu-id="62a35-570">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-570">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-571">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-571">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-572">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-572">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-573">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-573">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-574">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-574">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-575">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-575">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="62a35-576">指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-576">Creates a new instance of the specified type.</span></span> <span data-ttu-id="62a35-577">型が定義されているアセンブリの名前、型の名前、およびアクティベーション属性の配列をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-577">Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.</span></span></summary>
        <returns><span data-ttu-id="62a35-578"><paramref name="typeName" /> で指定したオブジェクトのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a35-578">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-579">これは、結合メソッドは<xref:System.AppDomain.CreateInstance%2A>と<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-579">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="62a35-580">このメソッドの既定のコンス トラクターを呼び出す`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-580">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="62a35-581">参照してください<xref:System.Reflection.AssemblyName>の形式に関する`assemblyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-581">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="62a35-582">参照してください、<xref:System.Type.FullName%2A?displayProperty=nameWithType>プロパティの形式に関する`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-582">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-583">メソッドへの事前バインディングされた呼び出しを行った場合`M`型のオブジェクトの`T1`によって返された<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>、メソッドは、型のオブジェクトのメソッドへの事前バインディングされた呼び出しをおよび`T2`アセンブリで`C`以外、現在のアセンブリまたはアセンブリを含む`T1`、アセンブリ`C`は現在のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-583">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="62a35-584">事前バインディングされた呼び出し場合でも、この読み込みが行われます`T1.M()`の本体で行われた、 <xref:System.Reflection.Emit.DynamicMethod>、またはその他の動的に生成されたコード。</span><span class="sxs-lookup"><span data-stu-id="62a35-584">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="62a35-585">現在のドメインが既定のドメイン、アセンブリがかどうか`C`プロセスが終了するまでアンロードすることはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-585">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="62a35-586">後で、現在のドメインがアセンブリの読み込みを試みると`C`負荷が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-586">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 [!code-cpp[ADDyno#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDyno/CPP/addyno.cpp#1)]
 [!code-csharp[ADDyno#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDyno/CS/addyno.cs#1)]
 [!code-vb[ADDyno#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDyno/VB/addyno.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-587"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-587"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-588">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-588">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-589"><paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-589"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-590"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-590"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-591">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-591">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-592">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-592">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-593">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-593">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-594"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-594"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-595">または</span><span class="sxs-lookup"><span data-stu-id="62a35-595">-or-</span></span> 
<span data-ttu-id="62a35-596">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-596">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-597">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-597">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-598">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-598">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-599">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-599">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-600">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-600">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-601">デリゲートのインスタンスを作成するときに、アンマネージ コードを呼び出す機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-601">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="62a35-602">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="62a35-602">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="62a35-603">すべての型のメンバーに対して操作を呼び出す権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-603">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="62a35-604">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="62a35-604">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceAndUnwrap : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj" Usage="appDomain.CreateInstanceAndUnwrap (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-605">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-605">The display name of the assembly.</span></span> <span data-ttu-id="62a35-606">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-606">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-607">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-607">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="62a35-608">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</span><span class="sxs-lookup"><span data-stu-id="62a35-608">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="62a35-609"><paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="62a35-609">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-610"><paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-610">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="62a35-611">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-611">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="62a35-612"><paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-612">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-613">コンストラクターに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-613">The arguments to pass to the constructor.</span></span> <span data-ttu-id="62a35-614">この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-614">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="62a35-615">既定のコンストラクターを優先する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-615">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="62a35-616">型の強制変換を制御するために使用するカルチャ固有のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-616">A culture-specific object used to govern the coercion of types.</span></span> <span data-ttu-id="62a35-617"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see langword="CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-617">If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-618">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-618">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-619">一般的に、1 つの配列に 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-619">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object.</span></span> <span data-ttu-id="62a35-620">リモート オブジェクトのアクティブ化に必要な URL を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-620">that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-621">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。</span><span class="sxs-lookup"><span data-stu-id="62a35-621">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="62a35-622">クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-622">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-623">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-623">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="62a35-624">指定したアセンブリで定義されている、指定した型の新しいインスタンスを作成します。型名の大文字と小文字の区別を無視するかどうか、作成する型を選択するために使用されるバインディング属性とバインダー、コンストラクターの引数、カルチャ、およびアクティベーション属性を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-624">Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</span></span></summary>
        <returns><span data-ttu-id="62a35-625"><paramref name="typeName" /> で指定したオブジェクトのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a35-625">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-626">これは、結合メソッドは<xref:System.AppDomain.CreateInstance%2A>と<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-626">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="62a35-627">参照してください<xref:System.Reflection.AssemblyName>の形式に関する`assemblyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-627">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="62a35-628">参照してください、<xref:System.Type.FullName%2A?displayProperty=nameWithType>プロパティの形式に関する`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-628">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-629">メソッドへの事前バインディングされた呼び出しを行った場合`M`型のオブジェクトの`T1`によって返された<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>、メソッドは、型のオブジェクトのメソッドへの事前バインディングされた呼び出しをおよび`T2`アセンブリで`C`以外、現在のアセンブリまたはアセンブリを含む`T1`、アセンブリ`C`は現在のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-629">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="62a35-630">事前バインディングされた呼び出し場合でも、この読み込みが行われます`T1.M()`の本体で行われた、 <xref:System.Reflection.Emit.DynamicMethod>、またはその他の動的に生成されたコード。</span><span class="sxs-lookup"><span data-stu-id="62a35-630">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="62a35-631">現在のドメインが既定のドメイン、アセンブリがかどうか`C`プロセスが終了するまでアンロードすることはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-631">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="62a35-632">後で、現在のドメインがアセンブリの読み込みを試みると`C`負荷が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-632">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-633">次の例では、使用、`ignoreCase`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="62a35-633">The following sample demonstrates the use of the `ignoreCase` parameter.</span></span>  
  
 [!code-cpp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CPP/ignorecase.cpp#1)]
 [!code-csharp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CS/ignorecase.cs#1)]
 [!code-vb[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/VB/ignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-634"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-634"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-635">一致するコンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-635">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-636"><paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-636"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-637"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-637"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-638">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-638">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-639">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-639">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-640">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-640">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-641"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-641"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-642">または</span><span class="sxs-lookup"><span data-stu-id="62a35-642">-or-</span></span> 
 <span data-ttu-id="62a35-643">現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</span><span class="sxs-lookup"><span data-stu-id="62a35-643"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-644">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-644">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-645">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-645">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-646">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-646">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-647">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-647">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-648">デリゲートのインスタンスを作成するときに、アンマネージ コードを呼び出す機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-648">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="62a35-649">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="62a35-649">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="62a35-650">すべての型のメンバーに対して操作を呼び出す権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-650">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="62a35-651">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="62a35-651">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceAndUnwrap : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; obj" Usage="appDomain.CreateInstanceAndUnwrap (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceAndUnwrap which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-652">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-652">The display name of the assembly.</span></span> <span data-ttu-id="62a35-653">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-653">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-654">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-654">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="62a35-655">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</span><span class="sxs-lookup"><span data-stu-id="62a35-655">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="62a35-656"><paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="62a35-656">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-657"><paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-657">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="62a35-658">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-658">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="62a35-659"><paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-659">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-660">コンストラクターに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-660">The arguments to pass to the constructor.</span></span> <span data-ttu-id="62a35-661">この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-661">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="62a35-662">既定のコンストラクターを優先する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-662">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="62a35-663">型の強制変換を制御するために使用するカルチャ固有のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-663">A culture-specific object used to govern the coercion of types.</span></span> <span data-ttu-id="62a35-664"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see langword="CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-664">If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-665">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-665">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-666">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-666">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-667">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。</span><span class="sxs-lookup"><span data-stu-id="62a35-667">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="62a35-668">クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-668">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-669">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-669">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="62a35-670"><paramref name="typeName" /> の作成を承認するために使用される情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-670">Information used to authorize creation of <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="62a35-671">指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-671">Creates a new instance of the specified type.</span></span> <span data-ttu-id="62a35-672">型の名前、およびその検索方法と作成方法をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-672">Parameters specify the name of the type, and how it is found and created.</span></span></summary>
        <returns><span data-ttu-id="62a35-673"><paramref name="typeName" /> で指定したオブジェクトのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a35-673">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-674">これは、結合メソッドは<xref:System.AppDomain.CreateInstance%2A>と<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-674">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="62a35-675">参照してください<xref:System.Reflection.AssemblyName>の形式に関する`assemblyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-675">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="62a35-676">参照してください、<xref:System.Type.FullName%2A?displayProperty=nameWithType>プロパティの形式に関する`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-676">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-677">メソッドへの事前バインディングされた呼び出しを行った場合`M`型のオブジェクトの`T1`によって返された<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>、メソッドは、型のオブジェクトのメソッドへの事前バインディングされた呼び出しをおよび`T2`アセンブリで`C`以外、現在のアセンブリまたはアセンブリを含む`T1`、アセンブリ`C`は現在のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-677">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="62a35-678">事前バインディングされた呼び出し場合でも、この読み込みが行われます`T1.M()`の本体で行われた、 <xref:System.Reflection.Emit.DynamicMethod>、またはその他の動的に生成されたコード。</span><span class="sxs-lookup"><span data-stu-id="62a35-678">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="62a35-679">現在のドメインが既定のドメイン、アセンブリがかどうか`C`プロセスが終了するまでアンロードすることはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-679">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="62a35-680">後で、現在のドメインがアセンブリの読み込みを試みると`C`負荷が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-680">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-681">次の例では、使用、`ignoreCase`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="62a35-681">The following sample demonstrates the use of the `ignoreCase` parameter.</span></span>  
  
 [!code-cpp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CPP/ignorecase.cpp#1)]
 [!code-csharp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CS/ignorecase.cs#1)]
 [!code-vb[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/VB/ignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-682"><paramref name="assemblyName" /> または <paramref name="typeName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-682"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-683">一致するコンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-683">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-684"><paramref name="typename" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-684"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-685"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-685"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-686">呼び出し元には、このコンストラクターを呼び出すアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-686">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-687">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-687">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-688">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-688">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-689"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-689"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-690">または</span><span class="sxs-lookup"><span data-stu-id="62a35-690">-or-</span></span> 
<span data-ttu-id="62a35-691">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-691">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-692">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-692">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-693">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-693">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-694">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-694">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-695">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-695">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-696">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-696">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-697"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-697">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="62a35-698">すべての型のメンバーに対して操作を呼び出す権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-698">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="62a35-699">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="62a35-699">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-700">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-700">Creates a new instance of a specified type defined in the specified assembly file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFrom (assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceFrom : string * string -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstanceFrom : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstanceFrom (assemblyFile, typeName)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-701">要求する型を定義しているアセンブリが格納されているファイルの名前 (パスを含む)。</span><span class="sxs-lookup"><span data-stu-id="62a35-701">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="62a35-702">アセンブリは <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> メソッドを使用して読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-702">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-703">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-703">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="62a35-704">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-704">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="62a35-705">新しいインスタンスのラッパーであるオブジェクト。<paramref name="typeName" /> が見つからない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-705">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="62a35-706">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-706">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-707">既定のコンス トラクター`typeName`が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-707">The default constructor for `typeName` is invoked.</span></span>  
  
 <span data-ttu-id="62a35-708">詳細については、<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-708">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="62a35-709">ときに、<xref:System.AppDomain.CreateInstanceFrom%2A>メソッドは、呼び出しが行われる元のアプリケーション ドメイン以外、対象のアプリケーション ドメインでインスタンスを作成するために使用、アセンブリが対象のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-709">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="62a35-710">ただし、呼び出し元のアプリケーション ドメインにインスタンスをラップされたない場合は、特定の方法でラップされていないインスタンスを使用して可能性があります、呼び出し元のアプリケーション ドメインに読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-710">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="62a35-711">たとえば、インスタンスは、ラップされたが、その型の情報を要求する可能性があります、そのメソッドを呼び出すために遅延バインディング。</span><span class="sxs-lookup"><span data-stu-id="62a35-711">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="62a35-712">アセンブリが呼び出し元のアプリケーション ドメインに読み込まれると、例外が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-712">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="62a35-713">呼び出し元のアプリケーション ドメインに同じアセンブリの別のバージョンが以前に読み込まれた場合、または呼び出し元のアプリケーション ドメインの読み込みパスがなど、対象のアプリケーション ドメインを例外と異なる場合<xref:System.MissingMethodException>発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-713">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="62a35-714">呼び出し元のアプリケーション ドメインが、インスタンスの型の事前バインディングされた呼び出しを行った場合<xref:System.InvalidCastException>インスタンスのキャストを試行したときにスローされることができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-714">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-715">次の例は、使用する方法を示します、<xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29>対象のアプリケーション ドメインでオブジェクトのインスタンスを作成し、そのメソッドを呼び出すメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-715">The following example shows how to use the <xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29> method overload to create an instance of an object in a target application domain and call its methods.</span></span>  
  
 <span data-ttu-id="62a35-716">例では、定義、`MarshallableExample`クラスは、アプリケーション ドメイン境界を越えてマーシャ リングすることができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-716">The example defines the `MarshallableExample` class, which can be marshaled across application domain boundaries.</span></span> <span data-ttu-id="62a35-717">例は、現在実行中のアセンブリのパスを作成、対象のアプリケーション ドメインを作成しを使用して、<xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29>対象のアプリケーション ドメインにアセンブリを読み込むしのインスタンスを作成するメソッドのオーバー ロード`MarshallableExample`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-717">The example builds a path to the currently executing assembly, creates a target application domain, and uses the <xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29> method overload to load the example assembly into the target application domain and create an instance of `MarshallableExample`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-718">パスが、この例では絶対値であってため、相対パスも機能、<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>メソッドを使用して、アセンブリを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-718">The path is absolute in this example, but a relative path would also work because the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> method is used to load the assembly.</span></span>  
  
 <span data-ttu-id="62a35-719">オブジェクト ハンドルをラップ解除した後は、例は、対象のアプリケーション ドメインでオブジェクトを使用する 3 つの方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-719">After unwrapping the object handle, the example demonstrates three ways to use an object in a target application domain:</span></span>  
  
-   <span data-ttu-id="62a35-720">リフレクションを使用して、遅延バインディングのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="62a35-720">Invoking a method with late binding, using reflection.</span></span> <span data-ttu-id="62a35-721">これには、これにより、呼び出し元のアプリケーション ドメインに読み込まれるアセンブリ、型情報が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-721">This requires type information, which causes the assembly to be loaded into the application domain of the caller.</span></span> <span data-ttu-id="62a35-722">(この例では、既に読み込まれます。)</span><span class="sxs-lookup"><span data-stu-id="62a35-722">(In this example, it is already loaded.)</span></span>  
  
-   <span data-ttu-id="62a35-723">オブジェクトを呼び出し元と呼び出し先の両方に既知のインターフェイスにキャストします。</span><span class="sxs-lookup"><span data-stu-id="62a35-723">Casting the object to an interface known to both the caller and the callee.</span></span> <span data-ttu-id="62a35-724">インターフェイスは、呼び出し元のアセンブリまたは呼び出し元と呼び出し先の両方によって参照される 3 つ目のアセンブリに定義されているが場合、に、呼び出されるアセンブリは、呼び出し元のアプリケーション ドメインにアンロードされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-724">If the interface is defined in the calling assembly or in a third assembly referenced by both the caller and the callee, the called assembly is not loaded into the application domain of the caller.</span></span>  
  
-   <span data-ttu-id="62a35-725">呼び出し元にその型がわかっているときに直接オブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-725">Using the object directly when its type is known to the caller.</span></span> <span data-ttu-id="62a35-726">アセンブリは、呼び出し元のアプリケーション ドメインに読み込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-726">The assembly must be loaded into the application domain of the caller.</span></span>  
  
 <span data-ttu-id="62a35-727">呼び出し元のアプリケーション ドメインに呼び出されるアセンブリの読み込みを回避することもできますが、呼び出し元から派生するは、<xref:System.MarshalByRefObject>クラスと対象のアプリケーション ドメインで実行できるメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-727">Another way to avoid loading the called assembly into the application domain of the caller is for the caller to derive from the <xref:System.MarshalByRefObject> class and to define a method that can be run in the target application domain.</span></span> <span data-ttu-id="62a35-728">ターゲット アセンブリが既に対象のアプリケーション ドメインに読み込まれるために、そのメソッドは、ターゲット アセンブリを調べるにリフレクションを使用できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-728">That method can use reflection to examine a target assembly, because the target assembly is already loaded into the target application domain.</span></span> <span data-ttu-id="62a35-729">例をご覧ください、<xref:System.AppDomain.DynamicDirectory%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-729">See the example for the <xref:System.AppDomain.DynamicDirectory%2A> property.</span></span>  
  
 [!code-cpp[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/cpp/example.cpp#1)]
 [!code-csharp[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/cs/example.cs#1)]
 [!code-vb[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-730"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-730"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-731">- または -</span><span class="sxs-lookup"><span data-stu-id="62a35-731">-or-</span></span> 
 <span data-ttu-id="62a35-732"><paramref name="typeName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-732"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-733"><paramref name="assemblyFile" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-733"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-734"><paramref name="typeName" /> が <paramref name="assemblyFile" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-734"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-735">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-735">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-736">パラメーターなしのパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-736">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-737">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-737">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-738"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-738"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-739">または</span><span class="sxs-lookup"><span data-stu-id="62a35-739">-or-</span></span> 
<span data-ttu-id="62a35-740">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-740">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-741">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-741">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-742">このインスタンスは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-742">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-743">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-743">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-744">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-744">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-745">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-745">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFrom (assemblyFile As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceFrom : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstanceFrom : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstanceFrom (assemblyFile, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-746">要求する型を定義しているアセンブリが格納されているファイルの名前 (パスを含む)。</span><span class="sxs-lookup"><span data-stu-id="62a35-746">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="62a35-747">アセンブリは <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> メソッドを使用して読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-747">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-748">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-748">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-749">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-749">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-750">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-750">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-751">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-751">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-752">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-752">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="62a35-753">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-753">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="62a35-754">新しいインスタンスのラッパーであるオブジェクト。<paramref name="typeName" /> が見つからない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-754">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="62a35-755">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-755">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-756">既定のコンス トラクター`typeName`が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-756">The default constructor for `typeName` is invoked.</span></span>  
  
 <span data-ttu-id="62a35-757">この方法の詳細については、次を参照してください。、<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-757">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="62a35-758">ときに、<xref:System.AppDomain.CreateInstanceFrom%2A>メソッドは、呼び出しが行われる元のアプリケーション ドメイン以外、対象のアプリケーション ドメインでインスタンスを作成するために使用、アセンブリが対象のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-758">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="62a35-759">ただし、呼び出し元のアプリケーション ドメインにインスタンスをラップされたない場合は、特定の方法でラップされていないインスタンスを使用して可能性があります、呼び出し元のアプリケーション ドメインに読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-759">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="62a35-760">たとえば、インスタンスは、ラップされたが、その型の情報を要求する可能性があります、そのメソッドを呼び出すために遅延バインディング。</span><span class="sxs-lookup"><span data-stu-id="62a35-760">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="62a35-761">アセンブリが呼び出し元のアプリケーション ドメインに読み込まれると、例外が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-761">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="62a35-762">呼び出し元のアプリケーション ドメインに同じアセンブリの別のバージョンが以前に読み込まれた場合、または呼び出し元のアプリケーション ドメインの読み込みパスがなど、対象のアプリケーション ドメインを例外と異なる場合<xref:System.MissingMethodException>発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-762">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="62a35-763">呼び出し元のアプリケーション ドメインが、インスタンスの型の事前バインディングされた呼び出しを行った場合<xref:System.InvalidCastException>インスタンスのキャストを試行したときにスローされることができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-763">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-764"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-764"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-765"><paramref name="assemblyFile" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-765"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-766"><paramref name="typeName" /> が <paramref name="assemblyFile" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-766"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-767">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-767">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-768">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-768">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-769">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-769">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-770">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-770">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-771"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-771"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-772">または</span><span class="sxs-lookup"><span data-stu-id="62a35-772">-or-</span></span> 
<span data-ttu-id="62a35-773">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-773">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-774">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-774">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-775">このインスタンスは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-775">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-776">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-776">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-777">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-777">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-778">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-778">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFrom : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstanceFrom (assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-779">要求する型を定義しているアセンブリが格納されているファイルの名前 (パスを含む)。</span><span class="sxs-lookup"><span data-stu-id="62a35-779">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="62a35-780">アセンブリは <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> メソッドを使用して読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-780">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-781">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-781">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="62a35-782">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</span><span class="sxs-lookup"><span data-stu-id="62a35-782">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="62a35-783"><paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="62a35-783">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-784"><paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-784">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="62a35-785">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-785">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="62a35-786"><paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-786">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-787">コンストラクターに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-787">The arguments to pass to the constructor.</span></span> <span data-ttu-id="62a35-788">この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-788">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="62a35-789">既定のコンストラクターを優先する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-789">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="62a35-790"><paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-790">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-791"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-791">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-792">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-792">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-793">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-793">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-794">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。</span><span class="sxs-lookup"><span data-stu-id="62a35-794">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="62a35-795">クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-795">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-796">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-796">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="62a35-797">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-797">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="62a35-798">新しいインスタンスのラッパーであるオブジェクト。<paramref name="typeName" /> が見つからない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-798">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="62a35-799">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-799">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-800">詳細については、<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-800">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="62a35-801">ときに、<xref:System.AppDomain.CreateInstanceFrom%2A>メソッドは、呼び出しが行われる元のアプリケーション ドメイン以外、対象のアプリケーション ドメインでインスタンスを作成するために使用、アセンブリが対象のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-801">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="62a35-802">ただし、呼び出し元のアプリケーション ドメインにインスタンスをラップされたない場合は、特定の方法でラップされていないインスタンスを使用して可能性があります、呼び出し元のアプリケーション ドメインに読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-802">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="62a35-803">たとえば、インスタンスは、ラップされたが、その型の情報を要求する可能性があります、そのメソッドを呼び出すために遅延バインディング。</span><span class="sxs-lookup"><span data-stu-id="62a35-803">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="62a35-804">アセンブリが呼び出し元のアプリケーション ドメインに読み込まれると、例外が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-804">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="62a35-805">呼び出し元のアプリケーション ドメインに同じアセンブリの別のバージョンが以前に読み込まれた場合、または呼び出し元のアプリケーション ドメインの読み込みパスがなど、対象のアプリケーション ドメインを例外と異なる場合<xref:System.MissingMethodException>発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-805">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="62a35-806">呼び出し元のアプリケーション ドメインが、インスタンスの型の事前バインディングされた呼び出しを行った場合<xref:System.InvalidCastException>インスタンスのキャストを試行したときにスローされることができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-806">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-807"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-807"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-808">- または -</span><span class="sxs-lookup"><span data-stu-id="62a35-808">-or-</span></span> 
 <span data-ttu-id="62a35-809"><paramref name="typeName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-809"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-810">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-810">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-811">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-811">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-812"><paramref name="assemblyFile" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-812"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-813"><paramref name="typeName" /> が <paramref name="assemblyFile" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-813"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-814">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-814">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-815">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-815">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-816"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-816"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-817">または</span><span class="sxs-lookup"><span data-stu-id="62a35-817">-or-</span></span> 
 <span data-ttu-id="62a35-818">現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyFile" /> がコンパイルされました。</span><span class="sxs-lookup"><span data-stu-id="62a35-818"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-819">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-819">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-820">このインスタンスは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-820">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-821">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-821">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-822">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-822">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-823">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-823">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceFrom : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstanceFrom : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstanceFrom (assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-824">要求する型を定義しているアセンブリが格納されているファイルの名前 (パスを含む)。</span><span class="sxs-lookup"><span data-stu-id="62a35-824">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="62a35-825">アセンブリは <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> メソッドを使用して読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-825">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-826">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-826">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="62a35-827">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</span><span class="sxs-lookup"><span data-stu-id="62a35-827">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="62a35-828"><paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="62a35-828">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-829"><paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-829">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="62a35-830">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-830">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="62a35-831"><paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-831">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-832">コンストラクターに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-832">The arguments to pass to the constructor.</span></span> <span data-ttu-id="62a35-833">この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-833">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="62a35-834">既定のコンストラクターを優先する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-834">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="62a35-835"><paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-835">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-836"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-836">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-837">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-837">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-838">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-838">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-839">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。</span><span class="sxs-lookup"><span data-stu-id="62a35-839">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="62a35-840">クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-840">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-841">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-841">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="62a35-842"><paramref name="typeName" /> の作成を承認するために使用される情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-842">Information used to authorize creation of <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="62a35-843">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-843">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="62a35-844">新しいインスタンスのラッパーであるオブジェクト。<paramref name="typeName" /> が見つからない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-844">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="62a35-845">実際のオブジェクトにアクセスするには、戻り値のラップを解除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-845">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-846">この方法の詳細については、次を参照してください。、<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-846">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="62a35-847">ときに、<xref:System.AppDomain.CreateInstanceFrom%2A>メソッドは、呼び出しが行われる元のアプリケーション ドメイン以外、対象のアプリケーション ドメインでインスタンスを作成するために使用、アセンブリが対象のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-847">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="62a35-848">ただし、呼び出し元のアプリケーション ドメインにインスタンスをラップされたない場合は、特定の方法でラップされていないインスタンスを使用して可能性があります、呼び出し元のアプリケーション ドメインに読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-848">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="62a35-849">たとえば、インスタンスは、ラップされたが、その型の情報を要求する可能性があります、そのメソッドを呼び出すために遅延バインディング。</span><span class="sxs-lookup"><span data-stu-id="62a35-849">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="62a35-850">アセンブリが呼び出し元のアプリケーション ドメインに読み込まれると、例外が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-850">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="62a35-851">呼び出し元のアプリケーション ドメインに同じアセンブリの別のバージョンが以前に読み込まれた場合、または呼び出し元のアプリケーション ドメインの読み込みパスがなど、対象のアプリケーション ドメインを例外と異なる場合<xref:System.MissingMethodException>発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-851">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="62a35-852">呼び出し元のアプリケーション ドメインが、インスタンスの型の事前バインディングされた呼び出しを行った場合<xref:System.InvalidCastException>インスタンスのキャストを試行したときにスローされることができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-852">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-853"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-853"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-854">- または -</span><span class="sxs-lookup"><span data-stu-id="62a35-854">-or-</span></span> 
 <span data-ttu-id="62a35-855"><paramref name="typeName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-855"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-856">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-856">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="62a35-857">または</span><span class="sxs-lookup"><span data-stu-id="62a35-857">-or-</span></span> 
 <span data-ttu-id="62a35-858"><paramref name="securityAttributes" /> が <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-858"><paramref name="securityAttributes" /> is not <see langword="null" />.</span></span> <span data-ttu-id="62a35-859">レガシ CAS ポリシーが有効でない場合は、<paramref name="securityAttributes" /> を <see langword="null" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-859">When legacy CAS policy is not enabled, <paramref name="securityAttributes" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-860">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-860">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-861"><paramref name="assemblyFile" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-861"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-862"><paramref name="typeName" /> が <paramref name="assemblyFile" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-862"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-863">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-863">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-864">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-864">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-865"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-865"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-866">または</span><span class="sxs-lookup"><span data-stu-id="62a35-866">-or-</span></span> 
<span data-ttu-id="62a35-867">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-867">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-868">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-868">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="62a35-869">このインスタンスは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-869">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-870">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-870">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-871">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-871">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-872">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-872">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-873">証拠を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-873">to provide evidence.</span></span> <span data-ttu-id="62a35-874"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-874">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFromAndUnwrap">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-875">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-875">Creates a new instance of a specified type defined in the specified assembly file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFromAndUnwrap (assemblyName As String, typeName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFromAndUnwrap : string * string -&gt; obj" Usage="appDomain.CreateInstanceFromAndUnwrap (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-876">要求された型を定義するアセンブリのファイル名とパス。</span><span class="sxs-lookup"><span data-stu-id="62a35-876">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-877">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-877">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="62a35-878">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-878">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="62a35-879">要求されたオブジェクト。<paramref name="typeName" /> が見つからなかった場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-879">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-880">これは、結合メソッドは<xref:System.AppDomain.CreateInstanceFrom%2A>と<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-880">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="62a35-881">このメソッドの既定のコンス トラクターを呼び出す`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-881">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="62a35-882">詳細については、<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-882">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-883"><paramref name="assemblyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-883"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-884">- または -</span><span class="sxs-lookup"><span data-stu-id="62a35-884">-or-</span></span> 
 <span data-ttu-id="62a35-885"><paramref name="typeName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-885"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-886">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-886">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-887"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-887"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-888"><paramref name="typeName" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-888"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-889">パラメーターなしのパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-889">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-890">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-890">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-891"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-891"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-892">または</span><span class="sxs-lookup"><span data-stu-id="62a35-892">-or-</span></span> 
<span data-ttu-id="62a35-893">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-893">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-894">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-894">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-895">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-895">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-896">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-896">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-897">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-897">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFromAndUnwrap (assemblyName As String, typeName As String, activationAttributes As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFromAndUnwrap : string * string * obj[] -&gt; obj" Usage="appDomain.CreateInstanceFromAndUnwrap (assemblyName, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-898">要求された型を定義するアセンブリのファイル名とパス。</span><span class="sxs-lookup"><span data-stu-id="62a35-898">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-899">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します (<see cref="P:System.Type.FullName" /> プロパティを参照)。</span><span class="sxs-lookup"><span data-stu-id="62a35-899">The fully qualified name of the requested type, including the namespace but not the assembly (see the <see cref="P:System.Type.FullName" /> property).</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-900">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-900">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-901">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-901">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-902">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-902">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-903">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-903">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="62a35-904">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-904">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="62a35-905">要求されたオブジェクト。<paramref name="typeName" /> が見つからなかった場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-905">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-906">これは、結合メソッドは<xref:System.AppDomain.CreateInstanceFrom%2A>と<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-906">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="62a35-907">このメソッドの既定のコンス トラクターを呼び出す`typeName`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-907">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="62a35-908">この方法の詳細については、次を参照してください。、<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-908">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-909"><paramref name="assemblyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-909"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-910">- または -</span><span class="sxs-lookup"><span data-stu-id="62a35-910">-or-</span></span> 
 <span data-ttu-id="62a35-911"><paramref name="typeName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-911"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-912">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-912">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-913">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-913">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-914"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-914"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-915"><paramref name="typeName" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-915"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-916">パラメーターなしのパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-916">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-917">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-917">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-918"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-918"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-919">または</span><span class="sxs-lookup"><span data-stu-id="62a35-919">-or-</span></span> 
<span data-ttu-id="62a35-920">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-920">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-921">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-921">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-922">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-922">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-923">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-923">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-924">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-924">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFromAndUnwrap : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj" Usage="appDomain.CreateInstanceFromAndUnwrap (assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-925">要求された型を定義するアセンブリのファイル名とパス。</span><span class="sxs-lookup"><span data-stu-id="62a35-925">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-926">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-926">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="62a35-927">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</span><span class="sxs-lookup"><span data-stu-id="62a35-927">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="62a35-928"><paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="62a35-928">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-929"><paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-929">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="62a35-930">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-930">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="62a35-931"><paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-931">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-932">コンストラクターに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-932">The arguments to pass to the constructor.</span></span> <span data-ttu-id="62a35-933">この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-933">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="62a35-934">既定のコンストラクターを優先する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-934">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="62a35-935"><paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-935">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-936"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-936">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-937">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-937">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-938">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-938">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-939">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。</span><span class="sxs-lookup"><span data-stu-id="62a35-939">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="62a35-940">クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-940">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-941">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-941">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="62a35-942">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。型名の大文字と小文字の区別を無視するかどうか、作成する型を選択するために使用されるバインディング属性とバインダー、コンストラクターの引数、カルチャ、およびアクティベーション属性を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-942">Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</span></span></summary>
        <returns><span data-ttu-id="62a35-943">要求されたオブジェクト。<paramref name="typeName" /> が見つからなかった場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-943">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-944">これは、結合メソッドは<xref:System.AppDomain.CreateInstanceFrom%2A>と<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-944">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="62a35-945">この方法の詳細については、次を参照してください。、<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-945">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-946"><paramref name="assemblyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-946"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-947">- または -</span><span class="sxs-lookup"><span data-stu-id="62a35-947">-or-</span></span> 
 <span data-ttu-id="62a35-948"><paramref name="typeName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-948"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-949">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-949">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-950">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-950">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-951"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-951"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-952"><paramref name="typeName" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-952"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-953">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-953">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-954">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-954">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-955"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-955"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-956">または</span><span class="sxs-lookup"><span data-stu-id="62a35-956">-or-</span></span> 
 <span data-ttu-id="62a35-957">現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</span><span class="sxs-lookup"><span data-stu-id="62a35-957"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime that the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-958">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-958">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-959">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-959">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-960">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-960">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-961">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-961">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFromAndUnwrap : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; obj" Usage="appDomain.CreateInstanceFromAndUnwrap (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFromAndUnwrap which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-962">要求された型を定義するアセンブリのファイル名とパス。</span><span class="sxs-lookup"><span data-stu-id="62a35-962">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="62a35-963">要求する型の完全修飾名。アセンブリは指定せずに、名前空間だけを指定します。この名前は、<see cref="P:System.Type.FullName" /> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-963">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="62a35-964">検索で大文字と小文字を区別するかどうかを指定する Boolean 値。</span><span class="sxs-lookup"><span data-stu-id="62a35-964">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="62a35-965"><paramref name="typeName" /> コンストラクターの検索に影響を与える 0 個以上のビット フラグの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="62a35-965">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-966"><paramref name="bindingAttr" /> が 0 の場合は、大文字と小文字を区別してパブリック コンストラクターを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-966">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="62a35-967">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-967">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="62a35-968"><paramref name="binder" /> が null の場合は、既定のバインダーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-968">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-969">コンストラクターに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-969">The arguments to pass to the constructor.</span></span> <span data-ttu-id="62a35-970">この引数の配列は、呼び出すコンストラクターのパラメーターに対して、数、順序、および型を一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-970">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="62a35-971">既定のコンストラクターを優先する場合は、<paramref name="args" /> を空の配列または null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-971">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="62a35-972"><paramref name="args" /> から <paramref name="typeName" /> コンストラクターに対して宣言された仮引数型への強制変換を制御するカルチャ固有の情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-972">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="62a35-973"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-973">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="62a35-974">アクティべーションに参加できる 1 つ以上の属性の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-974">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="62a35-975">通常、リモート オブジェクトをアクティブ化するために必要な URL を指定する 1 つの <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> オブジェクトを含む配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-975">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="62a35-976">このパラメーターは、クライアント側でアクティブ化されるオブジェクトに関連しています。</span><span class="sxs-lookup"><span data-stu-id="62a35-976">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="62a35-977">クライアント アクティベーションは、下位互換性のために残されているレガシ テクノロジです。新規の開発には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-977">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="62a35-978">分散アプリケーションは、代わりに Windows Communication Foundation (WCF) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-978">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="62a35-979"><paramref name="typeName" /> の作成を承認するために使用される情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-979">Information used to authorize creation of <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="62a35-980">指定したアセンブリ ファイルで定義されている、指定した型の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-980">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="62a35-981">要求されたオブジェクト。<paramref name="typeName" /> が見つからなかった場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-981">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-982">これは、結合メソッドは<xref:System.AppDomain.CreateInstanceFrom%2A>と<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-982">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="62a35-983">この方法の詳細については、次を参照してください。、<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-983">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-984"><paramref name="assemblyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-984"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-985">- または -</span><span class="sxs-lookup"><span data-stu-id="62a35-985">-or-</span></span> 
 <span data-ttu-id="62a35-986"><paramref name="typeName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-986"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-987">呼び出し元は、<see cref="T:System.MarshalByRefObject" /> を継承しないオブジェクトのアクティベーション属性を提供できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-987">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-988">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-988">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-989"><paramref name="assemblyName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-989"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="62a35-990"><paramref name="typeName" /> が <paramref name="assemblyName" /> に見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-990"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-991">一致するパブリック コンストラクターが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-991">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="62a35-992">呼び出し元には、このコンストラクターを呼び出すために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-992">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-993"><paramref name="assemblyName" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-993"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-994">または</span><span class="sxs-lookup"><span data-stu-id="62a35-994">-or-</span></span> 
<span data-ttu-id="62a35-995">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-995">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-996">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-996">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="62a35-997">アセンブリ マニフェストを含むファイルの読み取りに必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-997">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="62a35-998">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="62a35-998">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-999">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-999">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CurrentDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.AppDomain CurrentDomain" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.CurrentDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDomain As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property AppDomain ^ CurrentDomain { AppDomain ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDomain : AppDomain" Usage="System.AppDomain.CurrentDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1000">現在の <see cref="T:System.Threading.Thread" /> に対する現在のアプリケーション ドメインを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1000">Gets the current application domain for the current <see cref="T:System.Threading.Thread" />.</span></span></summary>
        <value><span data-ttu-id="62a35-1001">現在のアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1001">The current application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a35-1002">次のコード例では、新しいアプリケーション ドメインを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1002">The following code example creates a new application domain.</span></span> <span data-ttu-id="62a35-1003"><xref:System.AppDomain.CurrentDomain%2A>プロパティを使用して、取得、<xref:System.AppDomain>現在のアプリケーション ドメインを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1003">The <xref:System.AppDomain.CurrentDomain%2A> property is used to obtain an <xref:System.AppDomain> object that represents the current application domain.</span></span> <span data-ttu-id="62a35-1004"><xref:System.AppDomain.FriendlyName%2A>プロパティは、コマンドラインで表示される現在のアプリケーション ドメインの名前を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1004">The <xref:System.AppDomain.FriendlyName%2A> property provides the name of the current application domain, which is then displayed at the command line.</span></span>  
  
 [!code-cpp[ADApplicationBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADApplicationBase/CPP/adapplicationbase.cpp#1)]
 [!code-csharp[ADApplicationBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADApplicationBase/CS/adapplicationbase.cs#1)]
 [!code-vb[ADApplicationBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADApplicationBase/VB/adapplicationbase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-1005">現在のアプリケーション ドメインで動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1005">Defines a dynamic assembly in the current application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1006">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1006">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1007">動的アセンブリのアクセス モード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1007">The access mode for the dynamic assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1008">名前とアクセス モードを指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1008">Defines a dynamic assembly with the specified name and access mode.</span></span></summary>
        <returns><span data-ttu-id="62a35-1009">名前とアクセス モードが指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1009">A dynamic assembly with the specified name and access mode.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1010">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1010">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1011">詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1011">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1012">動的アセンブリを生成するコードの開発中はお勧めのオーバー ロードを使用すること、<xref:System.AppDomain.DefineDynamicAssembly%2A>証拠、アクセス許可を指定するメソッドを含む動的アセンブリを作成証拠を指定する<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="62a35-1012">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1013">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1013">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1014">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1014">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1015">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1015">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1016">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1016">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1017">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1017">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1018"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1018"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1019"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1019">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1020">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1020">-or-</span></span> 
<span data-ttu-id="62a35-1021"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1021">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1022">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1022">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1023">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1023">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1024">動的アセンブリのアクセス モード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1024">The access mode for the dynamic assembly.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="62a35-1025">アセンブリに適用される属性を列挙した一覧。属性がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1025">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="62a35-1026">名前、アクセス モード、およびカスタム属性を指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1026">Defines a dynamic assembly with the specified name, access mode, and custom attributes.</span></span></summary>
        <returns><span data-ttu-id="62a35-1027">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1027">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1028">このメソッドのオーバー ロードを使用すると、動的アセンブリの作成時に適用しない限り、正しく動作していない属性を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1028">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="62a35-1029">たとえば、セキュリティなどの属性<xref:System.Security.SecurityTransparentAttribute>と<xref:System.Security.SecurityCriticalAttribute>動的アセンブリが作成された後に追加されている場合に正常に機能しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1029">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="62a35-1030">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するときだけ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1030">This method should be used only to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1031">この制限の詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1031">For more information about this restriction, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 <span data-ttu-id="62a35-1032">このメソッドのオーバー ロードがで導入された、[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1032">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1033">次のコード サンプルを含む動的アセンブリを作成する方法を示しています、<xref:System.Security.SecurityTransparentAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1033">The following code sample shows how to create a dynamic assembly that has the <xref:System.Security.SecurityTransparentAttribute>.</span></span> <span data-ttu-id="62a35-1034">属性の配列の要素として指定する必要があります<xref:System.Reflection.Emit.CustomAttributeBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1034">The attribute must be specified as an element of an array of <xref:System.Reflection.Emit.CustomAttributeBuilder> objects.</span></span>  
  
 <span data-ttu-id="62a35-1035">最初の手順で作成、<xref:System.Reflection.Emit.CustomAttributeBuilder>では、属性のコンス トラクターを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1035">The first step in creating the <xref:System.Reflection.Emit.CustomAttributeBuilder> is to obtain a constructor for the attribute.</span></span> <span data-ttu-id="62a35-1036">コンス トラクターは、パラメーターを持たないため、<xref:System.Type.GetConstructor%2A>の空の配列メソッドが呼び出された<xref:System.Type>パラメーターの型を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1036">The constructor has no parameters, so the <xref:System.Type.GetConstructor%2A> method is called with an empty array of <xref:System.Type> objects to represent the types of the parameters.</span></span> <span data-ttu-id="62a35-1037">2 番目の手順では、その結果を渡す<xref:System.Reflection.ConstructorInfo>オブジェクトのコンス トラクターを<xref:System.Reflection.Emit.CustomAttributeBuilder>クラス、型の空の配列と共に<xref:System.Object>に引数を表します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1037">The second step is to pass the resulting <xref:System.Reflection.ConstructorInfo> object to the constructor for the <xref:System.Reflection.Emit.CustomAttributeBuilder> class, together with an empty array of type <xref:System.Object> to represent the arguments.</span></span>  
  
 <span data-ttu-id="62a35-1038">結果の<xref:System.Reflection.Emit.CustomAttributeBuilder>に渡されますが、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドとして、配列の唯一の要素。</span><span class="sxs-lookup"><span data-stu-id="62a35-1038">The resulting <xref:System.Reflection.Emit.CustomAttributeBuilder> is then passed to the <xref:System.AppDomain.DefineDynamicAssembly%2A> method as the only element of an array.</span></span>  
  
 <span data-ttu-id="62a35-1039">コード例では、新しい動的アセンブリにモジュールと型を定義し、アセンブリの属性を表示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1039">The example code defines a module and a type in the new dynamic assembly, and then displays the assembly's attributes.</span></span>  
  
 [!code-cpp[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/cpp/source.cpp#1)]
 [!code-csharp[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/cs/source.cs#1)]
 [!code-vb[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1040"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1040"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1041"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1041">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1042">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1042">-or-</span></span> 
<span data-ttu-id="62a35-1043"><paramref name="name" /> の <see langword="Name" /> プロパティが空白で始まっているか、スラッシュまたは円記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1043">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1044">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1044">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.Policy.Evidence -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.Policy.Evidence -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, evidence)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default.  See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1045">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1045">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1046">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1046">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="evidence"><span data-ttu-id="62a35-1047">動的アセンブリに指定する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1047">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="62a35-1048">証拠は、ポリシーの解決に使用する証拠の最終セットを変更されないために使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1048">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <summary><span data-ttu-id="62a35-1049">名前、アクセス モード、および証拠を指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1049">Defines a dynamic assembly using the specified name, access mode, and evidence.</span></span></summary>
        <returns><span data-ttu-id="62a35-1050">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1050">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1051">のみ完全に信頼された呼び出し元を指定できます、`evidence`動的を定義するときに<xref:System.Reflection.Assembly>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1051">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="62a35-1052">マップは、ランタイム、<xref:System.Security.Policy.Evidence>付与されたアクセス許可を決定するセキュリティ ポリシーを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1052">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="62a35-1053">呼び出し元は、null を指定する必要がありますを部分的に信頼された`evidence`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1053">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="62a35-1054">場合`evidence`は`null`、ランタイムによってアクセス許可セットがコピー、現在の付与とから呼び出し元のセットを拒否<xref:System.Reflection.Assembly>を動的<xref:System.Reflection.Assembly>定義されていると、ポリシーを解決済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1054">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="62a35-1055">場合、動的<xref:System.Reflection.Assembly>がディスクに保存すると、その後の読み込みは、場所に関連付けられたポリシーに基づいて付与を取得は場所、<xref:System.Reflection.Assembly>が保存されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1055">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="62a35-1056">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1056">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1057">詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1057">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1058">動的アセンブリを生成するコードの開発中はお勧めのオーバー ロードを使用すること、<xref:System.AppDomain.DefineDynamicAssembly%2A>証拠、アクセス許可を指定するメソッドを含む動的アセンブリを作成証拠を指定する<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="62a35-1058">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1059">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1059">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1060">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1060">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1061">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1061">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and the <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1062">最初に、コード例がのインスタンスを作成しよう`MyDynamicType`呼び出すことによって、<xref:System.AppDomain.CreateInstance%2A>メソッドは無効なアセンブリ名、および結果の例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1062">First, the code example tries to create an instance of `MyDynamicType` by calling the <xref:System.AppDomain.CreateInstance%2A> method with an invalid assembly name, and catches the resulting exception.</span></span>  
  
 <span data-ttu-id="62a35-1063">コード例のイベント ハンドラーを追加し、<xref:System.AppDomain.AssemblyResolve>イベント、もう一度のインスタンスを作成しようと`MyDynamicType`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1063">The code example then adds an event handler for the <xref:System.AppDomain.AssemblyResolve> event, and again tries to create an instance of`MyDynamicType`.</span></span> <span data-ttu-id="62a35-1064">呼び出し中に<xref:System.AppDomain.CreateInstance%2A>、<xref:System.AppDomain.AssemblyResolve>無効なアセンブリのイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1064">During the call to <xref:System.AppDomain.CreateInstance%2A>, the <xref:System.AppDomain.AssemblyResolve> event is raised for the invalid assembly.</span></span> <span data-ttu-id="62a35-1065">イベント ハンドラーは、という名前の型を含む動的アセンブリを作成します。 `MyDynamicType`、型、パラメーターなしのコンス トラクターを提供し、新しい動的アセンブリを返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1065">The event handler creates a dynamic assembly that contains a type named `MyDynamicType`, gives the type a parameterless constructor, and returns the new dynamic assembly.</span></span> <span data-ttu-id="62a35-1066">呼び出し<xref:System.AppDomain.CreateInstance%2A>、正常に終了した後のコンス トラクターと`MyDynamicType`コンソールにメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1066">The call to <xref:System.AppDomain.CreateInstance%2A> then finishes successfully, and the constructor for `MyDynamicType` displays a message at the console.</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1067"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1067"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1068"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1068">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1069">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1069">-or-</span></span> 
<span data-ttu-id="62a35-1070"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1070">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1071">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1071">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1072">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1072">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1073"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1073">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1074">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1074">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1075">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1075">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="62a35-1076">アセンブリを保存するディレクトリの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1076">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="62a35-1077"><paramref name="dir" /> が <see langword="null" /> の場合は、現在のディレクトリが既定で使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1077">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <summary><span data-ttu-id="62a35-1078">名前、アクセス モード、およびストレージ ディレクトリを指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1078">Defines a dynamic assembly using the specified name, access mode, and storage directory.</span></span></summary>
        <returns><span data-ttu-id="62a35-1079">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1079">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1080">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1080">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1081">詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1081">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1082">動的アセンブリを生成するコードの開発中はお勧めのオーバー ロードを使用すること、<xref:System.AppDomain.DefineDynamicAssembly%2A>証拠、アクセス許可を指定するメソッドを含む動的アセンブリを作成証拠を指定する<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="62a35-1082">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1083">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1083">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1084">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1084">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1085">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1085">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1086">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1086">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1087">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1087">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1088"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1088"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1089"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1089">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1090">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1090">-or-</span></span> 
<span data-ttu-id="62a35-1091"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1091">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1092">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1092">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes, System.Security.SecurityContextSource securityContextSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes, valuetype System.Security.SecurityContextSource securityContextSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes, System::Security::SecurityContextSource securityContextSource);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; * System.Security.SecurityContextSource -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, assemblyAttributes, securityContextSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
        <Parameter Name="securityContextSource" Type="System.Security.SecurityContextSource" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1093">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1093">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1094">動的アセンブリのアクセス モード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1094">The access mode for the dynamic assembly.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="62a35-1095">アセンブリに適用される属性を列挙した一覧。属性がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1095">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <param name="securityContextSource"><span data-ttu-id="62a35-1096">セキュリティ コンテキストのソース。</span><span class="sxs-lookup"><span data-stu-id="62a35-1096">The source of the security context.</span></span></param>
        <summary><span data-ttu-id="62a35-1097">名前、アクセス モード、カスタム属性、およびセキュリティ コンテキストのソースを指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1097">Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.</span></span></summary>
        <returns><span data-ttu-id="62a35-1098">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1098">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1099">このメソッドのオーバー ロードを使用すると、動的アセンブリの作成時に適用しない限り、正しく動作していない属性を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1099">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="62a35-1100">たとえば、セキュリティなどの属性<xref:System.Security.SecurityTransparentAttribute>と<xref:System.Security.SecurityCriticalAttribute>動的アセンブリが作成された後に追加されている場合に正常に機能しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1100">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="62a35-1101">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するときだけ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1101">This method should be used only to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1102">この制限の詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1102">For more information about this restriction, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1103"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1103"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1104"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1104">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1105">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1105">-or-</span></span> 
<span data-ttu-id="62a35-1106"><paramref name="name" /> の <see langword="Name" /> プロパティが空白で始まっているか、スラッシュまたは円記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1106">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1107">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1107">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="62a35-1108"><paramref name="securityContextSource" /> の値が列挙値ではありませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-1108">The value of <paramref name="securityContextSource" /> was not one of the enumeration values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, evidence)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of DefineDynamicAssembly which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkId=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1109">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1109">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1110">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1110">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="62a35-1111">アセンブリを保存するディレクトリの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1111">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="62a35-1112"><paramref name="dir" /> が <see langword="null" /> の場合は、現在のディレクトリが既定で使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1112">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="62a35-1113">動的アセンブリに指定する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1113">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="62a35-1114">証拠は、ポリシーの解決に使用する証拠の最終セットを変更されないために使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1114">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <summary><span data-ttu-id="62a35-1115">名前、アクセス モード、ストレージ ディレクトリ、および証拠を指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1115">Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.</span></span></summary>
        <returns><span data-ttu-id="62a35-1116">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1116">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1117">のみ完全に信頼された呼び出し元を指定できます、`evidence`動的を定義するときに<xref:System.Reflection.Assembly>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1117">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="62a35-1118">マップは、ランタイム、<xref:System.Security.Policy.Evidence>付与されたアクセス許可を決定するセキュリティ ポリシーを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1118">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="62a35-1119">呼び出し元は、null を指定する必要がありますを部分的に信頼された`evidence`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1119">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="62a35-1120">場合`evidence`は`null`、ランタイムによってアクセス許可セットがコピー、現在の付与とから呼び出し元のセットを拒否<xref:System.Reflection.Assembly>を動的<xref:System.Reflection.Assembly>定義されていると、ポリシーを解決済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1120">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="62a35-1121">場合、動的<xref:System.Reflection.Assembly>がディスクに保存すると、その後の読み込みは、場所に関連付けられたポリシーに基づいて付与を取得は場所、<xref:System.Reflection.Assembly>が保存されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1121">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="62a35-1122">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1122">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1123">詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1123">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1124">動的アセンブリを生成するコードの開発中はお勧めのオーバー ロードを使用すること、<xref:System.AppDomain.DefineDynamicAssembly%2A>証拠、アクセス許可を指定するメソッドを含む動的アセンブリを作成証拠を指定する<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="62a35-1124">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1125">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1125">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1126">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1126">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1127">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1127">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1128">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1128">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1129">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1129">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1130"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1130"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1131"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1131">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1132">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1132">-or-</span></span> 
<span data-ttu-id="62a35-1133"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1133">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1134">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1134">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1135">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1135">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1136"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1136">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, requiredPermissions, optionalPermissions, refusedPermissions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default.  See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1137">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1137">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1138">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1138">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="62a35-1139">必須のアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1139">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="62a35-1140">オプションのアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1140">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="62a35-1141">拒否されたアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1141">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="62a35-1142">名前、アクセス モード、およびアクセス許可要求を指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1142">Defines a dynamic assembly using the specified name, access mode, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="62a35-1143">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1143">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1144">指定されたアクセス許可要求`requiredPermissions`、 `optionalPermissions`、および`refusedPermissions`動的アセンブリに保存され、メモリに再読み込みしない限りは使用されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1144">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are not used unless the dynamic assembly has been saved and reloaded into memory.</span></span> <span data-ttu-id="62a35-1145">ディスクのオーバー ロードを使用することはありません保存されている一時アセンブリのアクセス許可要求を指定する、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドも、要求されたアクセス許可、および供給としての証拠を示す、<xref:System.Security.Policy.Evidence>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1145">To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence as well as requested permissions, and supply an <xref:System.Security.Policy.Evidence> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1146">動的アセンブリを生成するコードの開発中はお勧めのオーバー ロードを使用すること、<xref:System.AppDomain.DefineDynamicAssembly%2A>証拠、アクセス許可を指定するメソッドを含む動的アセンブリを作成証拠を指定する<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="62a35-1146">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1147">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1147">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1148">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1148">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="62a35-1149">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1149">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1150">詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1150">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1151">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1151">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1152">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1152">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1153">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1153">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1154"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1154"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1155"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1155">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1156">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1156">-or-</span></span> 
<span data-ttu-id="62a35-1157"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1157">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1158">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1158">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, bool isSynchronized, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String, isSynchronized As Boolean, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, bool isSynchronized, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * bool * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, isSynchronized, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1159">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1159">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1160">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1160">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="62a35-1161">動的アセンブリを保存するディレクトリの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1161">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="62a35-1162"><paramref name="dir" /> が <see langword="null" /> の場合、現在のディレクトリが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1162">If <paramref name="dir" /> is <see langword="null" />, the current directory is used.</span></span></param>
        <param name="isSynchronized"><span data-ttu-id="62a35-1163">動的アセンブリ内のモジュール、型、およびメンバーの作成を同期する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1163"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="62a35-1164">アセンブリに適用される属性を列挙した一覧。属性がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1164">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="62a35-1165">名前、アクセス モード、ストレージ ディレクトリ、および同期オプションを指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1165">Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.</span></span></summary>
        <returns><span data-ttu-id="62a35-1166">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1166">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1167">このメソッドのオーバー ロードを使用すると、動的アセンブリの作成時に適用しない限り、正しく動作していない属性を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1167">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="62a35-1168">たとえば、セキュリティなどの属性<xref:System.Security.SecurityTransparentAttribute>と<xref:System.Security.SecurityCriticalAttribute>動的アセンブリが作成された後に追加されている場合に正常に機能しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1168">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="62a35-1169">場合`isSynchronized`は`true`、結果の次のメソッド<xref:System.Reflection.Emit.AssemblyBuilder>を同期する: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>、および<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1169">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="62a35-1170">これらのメソッドの 2 つは、異なるスレッドで呼び出されると、もう一方が完了するまで 1 つブロックされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1170">If two of these methods are called on different threads, one will block until the other is completed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1171"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1171"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1172"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1172">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1173">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1173">-or-</span></span> 
<span data-ttu-id="62a35-1174"><paramref name="name" /> の <see langword="Name" /> プロパティが空白で始まっているか、スラッシュまたは円記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1174">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1175">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1175">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, evidence, requiredPermissions, optionalPermissions, refusedPermissions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1176">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1176">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1177">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1177">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="evidence"><span data-ttu-id="62a35-1178">動的アセンブリに指定する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1178">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="62a35-1179">証拠は、ポリシーの解決に使用する証拠の最終セットを変更されないために使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1179">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="62a35-1180">必須のアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1180">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="62a35-1181">オプションのアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1181">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="62a35-1182">拒否されたアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1182">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="62a35-1183">名前、アクセス モード、証拠、およびアクセス許可要求を指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1183">Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="62a35-1184">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1184">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1185">指定されたアクセス許可要求`requiredPermissions`、`optionalPermissions`と`refusedPermissions`場合にだけ使用`evidence`が指定されても、または動的アセンブリが保存され、メモリに再度読み込まれる場合。</span><span class="sxs-lookup"><span data-stu-id="62a35-1185">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1186">動的アセンブリを生成するコードの開発中をお勧めを含めるように<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1186">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1187">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1187">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1188">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1188">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="62a35-1189">のみ完全に信頼された呼び出し元を指定できます、`evidence`動的を定義するときに<xref:System.Reflection.Assembly>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1189">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="62a35-1190">マップは、ランタイム、<xref:System.Security.Policy.Evidence>付与されたアクセス許可を決定するセキュリティ ポリシーを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1190">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="62a35-1191">呼び出し元は、null を指定する必要がありますを部分的に信頼された`evidence`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1191">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="62a35-1192">場合`evidence`は`null`、ランタイムによってアクセス許可セットがコピー、現在の付与とから呼び出し元のセットを拒否<xref:System.Reflection.Assembly>を動的<xref:System.Reflection.Assembly>定義されていると、ポリシーを解決済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1192">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="62a35-1193">場合、動的<xref:System.Reflection.Assembly>がディスクに保存すると、その後の読み込みは、場所に関連付けられたポリシーに基づいて付与を取得は場所、<xref:System.Reflection.Assembly>が保存されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1193">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="62a35-1194">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1194">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1195">詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1195">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1196">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1196">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1197">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1197">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1198">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1198">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1199"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1199"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1200"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1200">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1201">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1201">-or-</span></span> 
<span data-ttu-id="62a35-1202"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1202">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1203">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1203">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1204">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1204">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1205"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1205">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1206">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1206">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1207">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1207">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="62a35-1208">アセンブリを保存するディレクトリの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1208">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="62a35-1209"><paramref name="dir" /> が <see langword="null" /> の場合は、現在のディレクトリが既定で使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1209">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="62a35-1210">必須のアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1210">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="62a35-1211">オプションのアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1211">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="62a35-1212">拒否されたアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1212">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="62a35-1213">名前、アクセス モード、ストレージ ディレクトリ、およびアクセス許可要求を指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1213">Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="62a35-1214">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1214">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1215">指定されたアクセス許可要求`requiredPermissions`、 `optionalPermissions`、および`refusedPermissions`動的アセンブリに保存され、メモリに再読み込みしない限りは使用されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1215">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are not used unless the dynamic assembly has been saved and reloaded into memory.</span></span> <span data-ttu-id="62a35-1216">ディスクのオーバー ロードを使用することはありません保存されている一時アセンブリのアクセス許可要求を指定する、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドも、要求されたアクセス許可、および供給としての証拠を示す、<xref:System.Security.Policy.Evidence>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1216">To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence as well as requested permissions, and supply an <xref:System.Security.Policy.Evidence> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1217">動的アセンブリを生成するコードの開発中はお勧めのオーバー ロードを使用すること、<xref:System.AppDomain.DefineDynamicAssembly%2A>証拠、アクセス許可を指定するメソッドを含む動的アセンブリを作成証拠を指定する<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="62a35-1217">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1218">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1218">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1219">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1219">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="62a35-1220">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1220">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1221">詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1221">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1222">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1222">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1223">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1223">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1224">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1224">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1225"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1225"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1226"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1226">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1227">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1227">-or-</span></span> 
<span data-ttu-id="62a35-1228"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1228">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1229">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1229">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default.  Please see http://go.microsoft.com/fwlink/?LinkId=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1230">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1230">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1231">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1231">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="62a35-1232">アセンブリを保存するディレクトリの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1232">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="62a35-1233"><paramref name="dir" /> が <see langword="null" /> の場合は、現在のディレクトリが既定で使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1233">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="62a35-1234">動的アセンブリに指定する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1234">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="62a35-1235">証拠は、ポリシーの解決に使用する証拠の最終セットを変更されないために使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1235">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="62a35-1236">必須のアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1236">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="62a35-1237">オプションのアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1237">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="62a35-1238">拒否されたアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1238">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="62a35-1239">名前、アクセス モード、ストレージ ディレクトリ、証拠、およびアクセス許可要求を指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1239">Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="62a35-1240">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1240">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1241">指定されたアクセス許可要求`requiredPermissions`、`optionalPermissions`と`refusedPermissions`場合にだけ使用`evidence`が指定されても、または動的アセンブリが保存され、メモリに再度読み込まれる場合。</span><span class="sxs-lookup"><span data-stu-id="62a35-1241">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1242">動的アセンブリを生成するコードの開発中をお勧めを含めるように<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1242">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1243">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1243">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1244">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1244">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="62a35-1245">のみ完全に信頼された呼び出し元を指定できます、`evidence`動的を定義するときに<xref:System.Reflection.Assembly>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1245">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="62a35-1246">マップは、ランタイム、<xref:System.Security.Policy.Evidence>付与されたアクセス許可を決定するセキュリティ ポリシーを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1246">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="62a35-1247">呼び出し元は、null を指定する必要がありますを部分的に信頼された`evidence`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1247">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="62a35-1248">場合`evidence`は`null`、ランタイムによってアクセス許可セットがコピー、現在の付与とから呼び出し元のセットを拒否<xref:System.Reflection.Assembly>を動的<xref:System.Reflection.Assembly>定義されていると、ポリシーを解決済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1248">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="62a35-1249">場合、動的<xref:System.Reflection.Assembly>がディスクに保存すると、その後の読み込みは、場所に関連付けられたポリシーに基づいて付与を取得は場所、<xref:System.Reflection.Assembly>が保存されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1249">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="62a35-1250">このメソッドは、現在のアプリケーション ドメインで、動的アセンブリを定義するのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1250">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="62a35-1251">詳細については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1251">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1252">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1252">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1253">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1253">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1254">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1254">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1255"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1255"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1256"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1256">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1257">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1257">-or-</span></span> 
<span data-ttu-id="62a35-1258"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1258">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1259">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1259">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1260">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1260">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1261"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1261">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions, bool isSynchronized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions, bool isSynchronized);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet * bool -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet * bool -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions, isSynchronized)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1262">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1262">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1263">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1263">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="62a35-1264">動的アセンブリを保存するディレクトリの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1264">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="62a35-1265"><paramref name="dir" /> が <see langword="null" /> の場合は、現在のディレクトリが既定で使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1265">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="62a35-1266">動的アセンブリに指定する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1266">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="62a35-1267">証拠は、ポリシーの解決に使用する証拠の最終セットを変更されないために使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1267">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="62a35-1268">必須のアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1268">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="62a35-1269">オプションのアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1269">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="62a35-1270">拒否されたアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1270">The refused permissions request.</span></span></param>
        <param name="isSynchronized"><span data-ttu-id="62a35-1271">動的アセンブリ内のモジュール、型、およびメンバーの作成を同期する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1271"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="62a35-1272">名前、アクセス モード、ストレージ ディレクトリ、証拠、アクセス許可要求、および同期オプションを指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1272">Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.</span></span></summary>
        <returns><span data-ttu-id="62a35-1273">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1273">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1274">指定されたアクセス許可要求`requiredPermissions`、`optionalPermissions`と`refusedPermissions`場合にだけ使用`evidence`が指定されても、または動的アセンブリが保存され、メモリに再度読み込まれる場合。</span><span class="sxs-lookup"><span data-stu-id="62a35-1274">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1275">動的アセンブリを生成するコードの開発中をお勧めを含めるように<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>で`refusedPermissions`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1275">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="62a35-1276">含む<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>で、`refusedPermissions`パラメーターは、MSIL が検証されていることを保証します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1276">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="62a35-1277">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用する場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1277">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="62a35-1278">動的な定義するときに、完全に信頼された呼び出し元は、証拠を提供できますのみ<xref:System.Reflection.Assembly>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1278">Only fully trusted callers can supply their evidence when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="62a35-1279">マップは、ランタイム、<xref:System.Security.Policy.Evidence>付与されたアクセス許可を決定するセキュリティ ポリシーを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1279">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="62a35-1280">呼び出し元を指定する必要がありますを部分的に信頼された`null`の`evidence`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="62a35-1280">Partially trusted callers must supply `null` for the `evidence` parameter.</span></span> <span data-ttu-id="62a35-1281">場合`evidence`は`null`、ランタイムによってアクセス許可セットがコピー、現在の付与とから呼び出し元のセットを拒否<xref:System.Reflection.Assembly>を動的<xref:System.Reflection.Assembly>定義されていると、ポリシーを解決済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1281">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="62a35-1282">場合、動的<xref:System.Reflection.Assembly>がディスクに保存すると、その後の読み込みは、場所に関連付けられたポリシーに基づいて付与を取得は場所、<xref:System.Reflection.Assembly>が保存されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1282">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="62a35-1283">場合`isSynchronized`は`true`、結果の次のメソッド<xref:System.Reflection.Emit.AssemblyBuilder>を同期する: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>、および<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1283">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="62a35-1284">これらのメソッドの 2 つは、異なるスレッドで呼び出されると、もう一方が完了するまで 1 つブロックされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1284">If two of these methods are called on different threads, one will block until the other completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1285">次のサンプルでは、<xref:System.AppDomain.DefineDynamicAssembly%2A>メソッドと<xref:System.AppDomain.AssemblyResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1285">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-1286">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1286">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1287">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1287">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1288"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1288"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1289"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1289">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1290">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1290">-or-</span></span> 
<span data-ttu-id="62a35-1291"><paramref name="name" /> の <see langword="Name" /> プロパティが空白文字で始まるか、スラッシュまたはバック スラッシュを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1291">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1292">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1292">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1293">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1293">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1294"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1294">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions, bool isSynchronized, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions, bool isSynchronized, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet * bool * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions, isSynchronized, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1295">動的アセンブリの一意の ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-1295">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="62a35-1296">動的アセンブリにアクセスするときのモード。</span><span class="sxs-lookup"><span data-stu-id="62a35-1296">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="62a35-1297">動的アセンブリを保存するディレクトリの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1297">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="62a35-1298"><paramref name="dir" /> が <see langword="null" /> の場合、現在のディレクトリが使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1298">If <paramref name="dir" /> is <see langword="null" />, the current directory is used.</span></span></param>
        <param name="evidence"><span data-ttu-id="62a35-1299">動的アセンブリに指定する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1299">The evidence that is supplied for the dynamic assembly.</span></span> <span data-ttu-id="62a35-1300">証拠は、ポリシーの解決に使用する証拠の最終セットを変更されないために使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1300">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="62a35-1301">必須のアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1301">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="62a35-1302">オプションのアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1302">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="62a35-1303">拒否されたアクセス許可要求。</span><span class="sxs-lookup"><span data-stu-id="62a35-1303">The refused permissions request.</span></span></param>
        <param name="isSynchronized"><span data-ttu-id="62a35-1304">動的アセンブリ内のモジュール、型、およびメンバーの作成を同期する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1304"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="62a35-1305">アセンブリに適用される属性を列挙した一覧。属性がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1305">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="62a35-1306">名前、アクセス モード、ストレージ ディレクトリ、証拠、アクセス許可要求、同期オプション、およびカスタム属性を指定して、動的アセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1306">Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.</span></span></summary>
        <returns><span data-ttu-id="62a35-1307">名前と機能が指定された動的アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1307">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1308">このメソッドのオーバー ロードを使用すると、動的アセンブリの作成時に適用しない限り、正しく動作していない属性を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1308">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="62a35-1309">たとえば、セキュリティなどの属性<xref:System.Security.SecurityTransparentAttribute>と<xref:System.Security.SecurityCriticalAttribute>動的アセンブリが作成された後に追加されている場合に正常に機能しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1309">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="62a35-1310">指定されたアクセス許可要求、 `requiredPermissions`、 `optionalPermissions`、および`refusedPermissions`場合にのみ、パラメーターが使用される、`evidence`パラメーターが指定されても、または動的アセンブリが保存され、メモリに再度読み込まれる場合。</span><span class="sxs-lookup"><span data-stu-id="62a35-1310">The permission requests specified for the `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` parameters are used only if the `evidence` parameter is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1311">含めることをお勧め動的アセンブリを生成するコードを開発する際に、<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>フラグ、`refusedPermissions`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="62a35-1311">When you develop code that emits dynamic assemblies, we recommend that you include the <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> flag in the `refusedPermissions` parameter.</span></span> <span data-ttu-id="62a35-1312">このフラグを含めることにより、Microsoft intermediate language (MSIL) が検証されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1312">The inclusion of this flag ensures that the Microsoft intermediate language (MSIL) will be verified.</span></span> <span data-ttu-id="62a35-1313">この手法では、意図せずに検出するために非常に困難ですが、検証できないコードの生成を検出します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1313">This technique will detect the unintentional generation of unverifiable code, which otherwise is very difficult to detect.</span></span> <span data-ttu-id="62a35-1314">この技法の制限はまた、ある<xref:System.Security.SecurityException>完全な信頼を要求するコードで使用した場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1314">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when it is used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="62a35-1315">動的な定義するときに、完全に信頼された呼び出し元は証拠を提供できますのみ<xref:System.Reflection.Assembly>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1315">Only fully trusted callers can supply evidence when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="62a35-1316">ランタイムのマップ、<xref:System.Security.Policy.Evidence>付与されたアクセス許可を決定するセキュリティ ポリシーを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1316">The runtime maps the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="62a35-1317">呼び出し元を指定する必要がありますを部分的に信頼された`null`の`evidence`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="62a35-1317">Partially trusted callers must supply `null` for the `evidence` parameter.</span></span> <span data-ttu-id="62a35-1318">場合`evidence`は`null`、ランタイムは、定義されていると、ポリシーを解決済みとしてマークされる動的アセンブリを呼び出し元のアセンブリから (つまりは、現在の許可、セットを拒否) アクセス許可セットをコピーします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1318">If `evidence` is `null`, the runtime copies the permission sets (that is, the current grant and deny sets) from the caller's assembly to the dynamic assembly that is being defined, and marks the policy as resolved.</span></span>  
  
 <span data-ttu-id="62a35-1319">動的アセンブリがディスク、その後に保存されているかどうかの負荷が動的アセンブリが保存された場所に関連付けられているポリシーに基づいて付与を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1319">If the dynamic assembly is saved to disk, subsequent loads will get grants based on policies that are associated with the location where the dynamic assembly was saved.</span></span>  
  
 <span data-ttu-id="62a35-1320">場合`isSynchronized`は`true`、結果の次のメソッド<xref:System.Reflection.Emit.AssemblyBuilder>を同期する: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>、 <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>、および<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1320">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="62a35-1321">これらのメソッドの 2 つは、異なるスレッドで呼び出されると、もう一方が完了するまで 1 つブロックされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1321">If two of these methods are called on different threads, one will block until the other is completed.</span></span>  
  
 <span data-ttu-id="62a35-1322">このメソッドのオーバー ロードがで導入された、[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1322">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1323"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1323"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-1324"><paramref name="name" /> の <see langword="Name" /> プロパティが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1324">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a35-1325">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1325">-or-</span></span> 
<span data-ttu-id="62a35-1326"><paramref name="name" /> の <see langword="Name" /> プロパティが空白で始まっているか、スラッシュまたは円記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1326">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1327">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1327">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1328">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1328">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1329"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1329">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DoCallBack">
      <MemberSignature Language="C#" Value="public void DoCallBack (CrossAppDomainDelegate callBackDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoCallBack(class System.CrossAppDomainDelegate callBackDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoCallBack (callBackDelegate As CrossAppDomainDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DoCallBack(CrossAppDomainDelegate ^ callBackDelegate);" />
      <MemberSignature Language="F#" Value="abstract member DoCallBack : CrossAppDomainDelegate -&gt; unit&#xA;override this.DoCallBack : CrossAppDomainDelegate -&gt; unit" Usage="appDomain.DoCallBack callBackDelegate" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DoCallBack(System.CrossAppDomainDelegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBackDelegate" Type="System.CrossAppDomainDelegate" />
      </Parameters>
      <Docs>
        <param name="callBackDelegate"><span data-ttu-id="62a35-1330">呼び出すメソッドを指定するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="62a35-1330">A delegate that specifies a method to call.</span></span></param>
        <summary><span data-ttu-id="62a35-1331">指定したデリゲートで識別される、別のアプリケーション ドメイン内のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1331">Executes the code in another application domain that is identified by the specified delegate.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1332">`callBackDelegate` 値を指定できますマーシャ リングする-、-、 <xref:System.MarshalByRefObject>、または<xref:System.ContextBoundObject>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1332">`callBackDelegate` can specify a marshal-by-value, <xref:System.MarshalByRefObject>, or <xref:System.ContextBoundObject>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1333">次の例は、静的 using<xref:System.AppDomain.DoCallBack%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1333">The following sample demonstrates using a static <xref:System.AppDomain.DoCallBack%2A> method.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_static.cpp#1)]
 [!code-csharp[AppDomain_DoCallBack#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_static.cs#1)]
 [!code-vb[AppDomain_DoCallBack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_static.vb#1)]  
  
 <span data-ttu-id="62a35-1334">次の例を使用して、<xref:System.AppDomain.DoCallBack%2A>値によってメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1334">The following sample demonstrates using the <xref:System.AppDomain.DoCallBack%2A> method by value.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#2](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_byval.cpp#2)]
 [!code-csharp[AppDomain_DoCallBack#2](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_byval.cs#2)]
 [!code-vb[AppDomain_DoCallBack#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_byval.vb#2)]  
  
 <span data-ttu-id="62a35-1335">次の例を使用して、<xref:System.AppDomain.DoCallBack%2A>参照によってメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1335">The following sample demonstrates using the <xref:System.AppDomain.DoCallBack%2A> method by reference.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#3](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_byref.cpp#3)]
 [!code-csharp[AppDomain_DoCallBack#3](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_byref.cs#3)]
 [!code-vb[AppDomain_DoCallBack#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_byref.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1336"><paramref name="callBackDelegate" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1336"><paramref name="callBackDelegate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DomainManager">
      <MemberSignature Language="C#" Value="public AppDomainManager DomainManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomainManager DomainManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.DomainManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainManager As AppDomainManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainManager ^ DomainManager { AppDomainManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomainManager : AppDomainManager" Usage="System.AppDomain.DomainManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomainManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1337">アプリケーション ドメインの初期化時にホストから提供されたドメイン マネージャーを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1337">Gets the domain manager that was provided by the host when the application domain was initialized.</span></span></summary>
        <value><span data-ttu-id="62a35-1338">アプリケーション ドメインの初期化時にホストから提供されたドメイン マネージャーを表すオブジェクト。ドメイン マネージャーが提供されなかった場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1338">An object that represents the domain manager provided by the host when the application domain was initialized, or <see langword="null" /> if no domain manager was provided.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1339">共通言語ランタイム (CLR) のアンマネージ ホストは、ドメイン マネージャーを提供できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1339">An unmanaged host of the common language runtime (CLR) can provide a domain manager.</span></span> <span data-ttu-id="62a35-1340">ドメイン マネージャーが、新しいアプリケーション ドメインの初期化中に参加してなど、他の管理者の指定、 <xref:System.Security.HostSecurityManager>、アプリケーション ドメインの操作に参加します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1340">The domain manager can participate in initializing the new application domain and supply other managers, such as a <xref:System.Security.HostSecurityManager>, that participate in the operations of the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-1341">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1341">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-1342">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1342">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DomainUnload">
      <MemberSignature Language="C#" Value="public event EventHandler DomainUnload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DomainUnload" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.DomainUnload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DomainUnload As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ DomainUnload;" />
      <MemberSignature Language="F#" Value="member this.DomainUnload : EventHandler " Usage="member this.DomainUnload : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.DomainUnload</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1343"><see cref="T:System.AppDomain" /> をアンロードしようとすると発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1343">Occurs when an <see cref="T:System.AppDomain" /> is about to be unloaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1344"><xref:System.EventHandler>デリゲートのアプリケーション ドメインが読み込まれる前に、このイベントは終了のすべてのアクティビティを実行できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1344">The <xref:System.EventHandler> delegate for this event can perform any termination activities before the application domain is unloaded.</span></span>  
  
 <span data-ttu-id="62a35-1345">各アプリケーション ドメインがアンロードされるときに処理を実行する必要がありますには、このイベントのイベント ハンドラーを登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1345">Each application domain that needs to perform processing when it is unloaded should register an event handler for this event.</span></span> <span data-ttu-id="62a35-1346">共有イベント ハンドラーがないため、使用、<xref:System.EventHandler>デリゲートがアンロードされているドメインを識別できません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1346">A shared event handler should not be used, because the <xref:System.EventHandler> delegate does not identify the domain that is being unloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1347">既定のアプリケーション ドメインでは、このイベントが発生することはありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1347">This event is never raised in the default application domain.</span></span>  
  
 <span data-ttu-id="62a35-1348">イベントが発生したスレッドについて前提を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="62a35-1348">Do not make assumptions about the thread the event is raised on.</span></span> <span data-ttu-id="62a35-1349">呼ばれるものとは別のスレッドでイベントを発生させることができます、<xref:System.AppDomain.Unload%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1349">The event can be raised on a different thread than the one that called the <xref:System.AppDomain.Unload%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1350">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-1350">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicDirectory">
      <MemberSignature Language="C#" Value="public string DynamicDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DynamicDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.DynamicDirectory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DynamicDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynamicDirectory : string" Usage="System.AppDomain.DynamicDirectory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.DynamicDirectory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1351">動的に作成されたアセンブリを探すためにアセンブリ リゾルバーが使用するディレクトリを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1351">Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</span></span></summary>
        <value><span data-ttu-id="62a35-1352">動的に作成されたアセンブリを探すためにアセンブリ リゾルバーが使用するディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1352">The directory that the assembly resolver uses to probe for dynamically created assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1353">動的なディレクトリを設定するには、ベース ディレクトリ パスを割り当てる、<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>のプロパティ、<xref:System.AppDomainSetup>新しいアプリケーション ドメインを作成するために使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1353">To set the dynamic directory, assign a base directory path to the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property of the <xref:System.AppDomainSetup> object that will be used to create the new application domain.</span></span> <span data-ttu-id="62a35-1354">割り当てる文字列のハッシュ コードを単純な名前を持つサブディレクトリの追加により、プロパティに割り当てるベース ディレクトリ パスが変更された、<xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType>プロパティ、ベース ディレクトリの形式が*元パス* \\*ハッシュ コード*します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1354">The base directory path you assign to the property is modified by the addition of a subdirectory whose simple name is the hash code of the string you assign to the <xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType> property, so the format of the base directory is *original path*\\*hash code*.</span></span> <span data-ttu-id="62a35-1355">動的ディレクトリは、このベース ディレクトリのサブディレクトリです。</span><span class="sxs-lookup"><span data-stu-id="62a35-1355">The dynamic directory is a subdirectory of this base directory.</span></span> <span data-ttu-id="62a35-1356">単純な名前の値である、<xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType>プロパティ、その形式が*元のパス*\\*ハッシュ コード*\\*アプリケーション名*します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1356">Its simple name is the value of the <xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType> property, so its format is *original path*\\*hash code*\\*application name*.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1357">次の例では、動的アセンブリのディレクトリとアプリケーション ドメインを作成、動的アセンブリを生成および動的のディレクトリに格納新しいアプリケーション ドメインにアセンブリを読み込み、それを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1357">The following example creates an application domain with a directory for dynamic assemblies, emits a dynamic assembly and stores it in the dynamic directory, and then loads the assembly into the new application domain and uses it.</span></span>  
  
 <span data-ttu-id="62a35-1358">例は、作成、<xref:System.AppDomainSetup>オブジェクトとセットの<xref:System.AppDomainSetup.ApplicationName%2A>を"Example"プロパティとその<xref:System.AppDomainSetup.DynamicBase%2A>プロパティを"C:\DynamicAssemblyDir"。</span><span class="sxs-lookup"><span data-stu-id="62a35-1358">The example creates an <xref:System.AppDomainSetup> object and sets its <xref:System.AppDomainSetup.ApplicationName%2A> property to "Example" and its <xref:System.AppDomainSetup.DynamicBase%2A> property to "C:\DynamicAssemblyDir".</span></span> <span data-ttu-id="62a35-1359">例を表示し、<xref:System.AppDomainSetup.DynamicBase%2A>プロパティ、アプリケーション名のハッシュ コードが最初に割り当てられたパスのサブディレクトリとして追加されていないことを表示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1359">The example then displays the <xref:System.AppDomainSetup.DynamicBase%2A> property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1360">この例では、ベース ディレクトリの目的は、アプリケーションの例のプローブ パスの外部にします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1360">The base directory in this example is intended to be outside the probing path for the example application.</span></span> <span data-ttu-id="62a35-1361">別の場所の例をコンパイルしてください。</span><span class="sxs-lookup"><span data-stu-id="62a35-1361">Be sure to compile the example in a different location.</span></span> <span data-ttu-id="62a35-1362">例を実行するたびに、ベース ディレクトリとすべてのサブディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1362">Delete the base directory and all its subdirectories each time you run the example.</span></span>  
  
 <span data-ttu-id="62a35-1363">例では、作成、新しいアプリケーション ドメインを使用して、<xref:System.AppDomainSetup>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1363">The example creates a new application domain, using the <xref:System.AppDomainSetup> object.</span></span> <span data-ttu-id="62a35-1364">この例では、<xref:System.AppDomain.DynamicDirectory%2A>ディレクトリを作成するために、ディレクトリの名前を取得するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1364">The example uses the <xref:System.AppDomain.DynamicDirectory%2A> property to retrieve the name of the directory, so it can create the directory.</span></span> <span data-ttu-id="62a35-1365">(例では、でした同じくらい簡単に事前に作成、ディレクトリ、元のパス、アプリケーション名、およびアプリケーション名のハッシュ コードを連結することにより。)</span><span class="sxs-lookup"><span data-stu-id="62a35-1365">(The example could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.)</span></span>  
  
 <span data-ttu-id="62a35-1366">この例を`GenerateDynamicAssembly`という名前のアセンブリを出力するメソッド`DynamicHelloWorld.dll`し、新しいアプリケーション ドメインの動的なディレクトリに格納します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1366">The example has a `GenerateDynamicAssembly` method that emits an assembly named `DynamicHelloWorld.dll` and stores it in the new application domain's dynamic directory.</span></span> <span data-ttu-id="62a35-1367">動的アセンブリには、1 つの型が含まれています。 `HelloWorld`、静的メソッドを持つ (`Shared` Visual Basic でのメソッド) という名前の`HelloFromAD`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1367">The dynamic assembly contains one type, `HelloWorld`, that has a static method (`Shared` method in Visual Basic) named `HelloFromAD`.</span></span> <span data-ttu-id="62a35-1368">このメソッドを呼び出すには、アプリケーション ドメインの名前が表示されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1368">Calling this method displays the name of the application domain.</span></span>  
  
 <span data-ttu-id="62a35-1369">`Example`クラスから派生<xref:System.MarshalByRefObject>例では、新しいアプリケーション ドメインと呼び出しで、クラスのインスタンスを作成できるように、その`Test`メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1369">The `Example` class derives from <xref:System.MarshalByRefObject>, so the example can create an instance of the class in the new application domain and call its `Test` method.</span></span> <span data-ttu-id="62a35-1370">`Test`メソッドその表示名で動的アセンブリをロードして、静的な`HelloFromAD`メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1370">The `Test` method loads the dynamic assembly by its display name and calls the static `HelloFromAD` method.</span></span>  
  
 <span data-ttu-id="62a35-1371">という名前のアセンブリのコードを記述することで、動的なディレクトリが通常のプローブ パスの後に検索を表示する`DynamicHelloWorld.dll`し、この例と同じディレクトリにコンパイルしています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1371">You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named `DynamicHelloWorld.dll` and compiling it in the same directory as this example.</span></span> <span data-ttu-id="62a35-1372">という名前のクラスがアセンブリにあります`HelloWorld`という名前の静的メソッドで`HelloFromAD`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1372">The assembly must have a class named `HelloWorld` with a static method named `HelloFromAD`.</span></span> <span data-ttu-id="62a35-1373">このメソッドはの例で 1 つとして同じ機能を使用する必要はありません。単にコンソールに文字列を表示できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1373">This method does not have to have the same functionality as the one in the example; it can simply display a string to the console.</span></span> <span data-ttu-id="62a35-1374">アセンブリがあります、<xref:System.Reflection.AssemblyVersionAttribute>属性をそのバージョンを 1.0.0.0 に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1374">The assembly must also have an <xref:System.Reflection.AssemblyVersionAttribute> attribute that sets its version to 1.0.0.0.</span></span> <span data-ttu-id="62a35-1375">例を実行するときに、動的なディレクトリを検索する前に、現在のディレクトリでコンパイルしたアセンブリが見つかりました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1375">When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.</span></span>  
  
 [!code-cpp[ADDynamicBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDynamicBase/CPP/addynamicbase.cpp#1)]
 [!code-csharp[ADDynamicBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDynamicBase/CS/addynamicbase.cs#1)]
 [!code-vb[ADDynamicBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDynamicBase/VB/addynamicbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1376">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1376">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1377">パス情報にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1377">for access to the path information.</span></span> <span data-ttu-id="62a35-1378"><see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1378">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence Evidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence" Usage="System.AppDomain.Evidence" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.IEvidenceFactory.Evidence</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1379">このアプリケーション ドメインに関連付けられている <see cref="T:System.Security.Policy.Evidence" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1379">Gets the <see cref="T:System.Security.Policy.Evidence" /> associated with this application domain.</span></span></summary>
        <value><span data-ttu-id="62a35-1380">このアプリケーション ドメインに関連付けられた証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1380">The evidence associated with this application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1381">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1381">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1382">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1382">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1383"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1383">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span> <span data-ttu-id="62a35-1384">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.Demand" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1384">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-1385">指定したファイルに格納されているアセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1385">Executes the assembly contained in the specified file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAssembly : string -&gt; int&#xA;override this.ExecuteAssembly : string -&gt; int" Usage="appDomain.ExecuteAssembly assemblyFile" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-1386">実行するアセンブリが格納されているファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1386">The name of the file that contains the assembly to execute.</span></span></param>
        <summary><span data-ttu-id="62a35-1387">指定したファイルに格納されているアセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1387">Executes the assembly contained in the specified file.</span></span></summary>
        <returns><span data-ttu-id="62a35-1388">アセンブリのエントリ ポイントが返す値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1388">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1389">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1389">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1390">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1390">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="62a35-1391">このメソッドを使用してアセンブリを読み込み、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1391">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="62a35-1392">使用してアセンブリを実行することも、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを使用してアセンブリを読み込む、<xref:System.Reflection.Assembly.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1392">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1393">作成する、<xref:System.AppDomain>読み込みと実行を使用して、<xref:System.AppDomain.CreateDomain%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1393">To create the <xref:System.AppDomain> to load and execute, use the <xref:System.AppDomain.CreateDomain%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1394">次の例のオーバー ロードのいずれかを使用して<xref:System.AppDomain.ExecuteAssembly%2A>で 2 つのドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1394">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1395"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1395"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1396"><paramref name="assemblyFile" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1396"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1397"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1397"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1398">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1398">-or-</span></span> 
<span data-ttu-id="62a35-1399">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1399">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1400">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1400">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1401">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1401">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1402">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1402">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1403">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1403">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1404">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1404">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1405">file:// で始まらないする URI を読み取る。</span><span class="sxs-lookup"><span data-stu-id="62a35-1405">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1406">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1406">to execute a console application.</span></span> <span data-ttu-id="62a35-1407"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1407">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAssembly : string * System.Security.Policy.Evidence -&gt; int&#xA;override this.ExecuteAssembly : string * System.Security.Policy.Evidence -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssembly which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-1408">実行するアセンブリが格納されているファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1408">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="62a35-1409">アセンブリを読み込むために必要な証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1409">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1410">指定したファイルに格納されているアセンブリを、指定した証拠を使用して実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1410">Executes the assembly contained in the specified file, using the specified evidence.</span></span></summary>
        <returns><span data-ttu-id="62a35-1411">アセンブリのエントリ ポイントが返す値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1411">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1412">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1412">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1413"><xref:System.AppDomain.ExecuteAssembly%2A>メソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1413">The <xref:System.AppDomain.ExecuteAssembly%2A> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="62a35-1414">このメソッドを使用してアセンブリを読み込み、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1414">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="62a35-1415">使用してアセンブリを実行することも、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを使用してアセンブリを読み込む、<xref:System.Reflection.Assembly.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1415">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1416">次の例のオーバー ロードのいずれかを使用して<xref:System.AppDomain.ExecuteAssembly%2A>で 2 つのドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1416">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1417"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1417"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1418"><paramref name="assemblyFile" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1418"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1419"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1419"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1420">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1420">-or-</span></span> 
<span data-ttu-id="62a35-1421">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1421">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1422">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1422">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1423">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1423">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1424">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1424">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1425">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1425">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1426"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1426">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1427">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1427">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1428">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1428">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1429">file:// で始まらないする URI を読み取る。</span><span class="sxs-lookup"><span data-stu-id="62a35-1429">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1430">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1430">to execute a console application.</span></span> <span data-ttu-id="62a35-1431"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1431">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssembly : string * string[] -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-1432">実行するアセンブリが格納されているファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1432">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-1433">アセンブリのエントリ ポイントに渡す引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1433">The arguments to the entry point of the assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1434">指定したファイルに格納されているアセンブリを、指定した引数を使用して実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1434">Executes the assembly contained in the specified file, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="62a35-1435">アセンブリのエントリ ポイントから返された値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1435">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1436">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1436">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1437">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1437">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="62a35-1438">このメソッドを使用してアセンブリを読み込み、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1438">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="62a35-1439">使用してアセンブリを実行することも、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを使用してアセンブリを読み込む、<xref:System.Reflection.Assembly.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1439">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1440">次の例のオーバー ロードのいずれかを使用して<xref:System.AppDomain.ExecuteAssembly%2A>で 2 つのドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1440">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1441"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1441"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1442"><paramref name="assemblyFile" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1442"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1443"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1443"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1444">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1444">-or-</span></span> 
 <span data-ttu-id="62a35-1445">現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyFile" /> がコンパイルされました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1445"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1446">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1446">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1447">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1447">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1448">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1448">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1449">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1449">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1450">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1450">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1451">file:// で始まらないする URI を読み取る。</span><span class="sxs-lookup"><span data-stu-id="62a35-1451">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1452">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1452">to execute a console application.</span></span> <span data-ttu-id="62a35-1453"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1453">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence, args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity, cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAssembly : string * System.Security.Policy.Evidence * string[] -&gt; int&#xA;override this.ExecuteAssembly : string * System.Security.Policy.Evidence * string[] -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, assemblySecurity, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssembly which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-1454">実行するアセンブリが格納されているファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1454">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="62a35-1455">アセンブリに指定する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1455">The supplied evidence for the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-1456">アセンブリのエントリ ポイントに渡す引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1456">The arguments to the entry point of the assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1457">指定したファイルに格納されているアセンブリを、指定した証拠と引数を使用して実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1457">Executes the assembly contained in the specified file, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="62a35-1458">アセンブリのエントリ ポイントが返す値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1458">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1459">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1459">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1460">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1460">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="62a35-1461">このメソッドを使用してアセンブリを読み込み、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1461">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="62a35-1462">使用してアセンブリを実行することも、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを使用してアセンブリを読み込む、<xref:System.Reflection.Assembly.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1462">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1463">次の例のオーバー ロードのいずれかを使用して<xref:System.AppDomain.ExecuteAssembly%2A>で 2 つのドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1463">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1464"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1464"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1465"><paramref name="assemblyFile" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1465"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1466"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1466"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1467">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1467">-or-</span></span> 
<span data-ttu-id="62a35-1468">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1468">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1469">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1469">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1470">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1470">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-1471"><paramref name="assemblySecurity" /> が <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1471"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="62a35-1472">レガシ CAS ポリシーが有効でない場合は、<paramref name="assemblySecurity" /> を <see langword="null" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1472">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1473">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1473">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1474">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1474">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1475"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1475">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1476">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1476">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1477">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1477">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1478">file:// で始まらないする URI を読み取る。</span><span class="sxs-lookup"><span data-stu-id="62a35-1478">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1479">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1479">to execute a console application.</span></span> <span data-ttu-id="62a35-1480"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1480">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, string[] args, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, args As String(), hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, cli::array &lt;System::String ^&gt; ^ args, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssembly : string * string[] * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, args, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-1481">実行するアセンブリが格納されているファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1481">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-1482">アセンブリのエントリ ポイントに渡す引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1482">The arguments to the entry point of the assembly.</span></span></param>
        <param name="hashValue"><span data-ttu-id="62a35-1483">計算されたハッシュ コードの値を表します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1483">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="62a35-1484">アセンブリ マニフェストが使用するハッシュ アルゴリズムを表します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1484">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="62a35-1485">指定したファイルに格納されているアセンブリを、指定した引数、ハッシュ値、およびハッシュ アルゴリズムを使用して実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1485">Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="62a35-1486">アセンブリのエントリ ポイントから返された値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1486">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1487">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1487">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1488">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1488">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="62a35-1489">このメソッドを使用してアセンブリを読み込み、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1489">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="62a35-1490">使用してアセンブリを実行することも、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを使用してアセンブリを読み込む、<xref:System.Reflection.Assembly.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1490">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1491">次の例のオーバー ロードのいずれかを使用して<xref:System.AppDomain.ExecuteAssembly%2A>で 2 つのドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1491">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1492"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1492"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1493"><paramref name="assemblyFile" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1493"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1494"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1494"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1495">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1495">-or-</span></span> 
 <span data-ttu-id="62a35-1496">現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyFile" /> がコンパイルされました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1496"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1497">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1497">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1498">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1498">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1499">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1499">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1500">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1500">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1501">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1501">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1502">file:// で始まらないする URI を読み取る。</span><span class="sxs-lookup"><span data-stu-id="62a35-1502">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1503">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1503">to execute a console application.</span></span> <span data-ttu-id="62a35-1504"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1504">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence, args As String(), hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity, cli::array &lt;System::String ^&gt; ^ args, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssembly : string * System.Security.Policy.Evidence * string[] * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, assemblySecurity, args, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssembly which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="62a35-1505">実行するアセンブリが格納されているファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1505">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="62a35-1506">アセンブリに指定する証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1506">The supplied evidence for the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-1507">アセンブリのエントリ ポイントに渡す引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1507">The arguments to the entry point of the assembly.</span></span></param>
        <param name="hashValue"><span data-ttu-id="62a35-1508">計算されたハッシュ コードの値を表します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1508">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="62a35-1509">アセンブリ マニフェストが使用するハッシュ アルゴリズムを表します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1509">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="62a35-1510">指定したファイルに格納されているアセンブリを、指定した証拠、引数、ハッシュ値、およびハッシュ アルゴリズムを使用して実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1510">Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="62a35-1511">アセンブリのエントリ ポイントが返す値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1511">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1512">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1512">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1513">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1513">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="62a35-1514">このメソッドを使用してアセンブリを読み込み、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1514">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="62a35-1515">使用してアセンブリを実行することも、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを使用してアセンブリを読み込む、<xref:System.Reflection.Assembly.Load%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1515">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1516">次のサンプルのオーバー ロードのいずれかの使用例<xref:System.AppDomain.ExecuteAssembly%2A>で 2 つのドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1516">Thefollowing sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1517"><paramref name="assemblyFile" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1517"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1518"><paramref name="assemblyFile" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1518"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1519"><paramref name="assemblyFile" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1519"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1520">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1520">-or-</span></span> 
<span data-ttu-id="62a35-1521">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyFile" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1521">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1522">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1522">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1523">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1523">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-1524"><paramref name="assemblySecurity" /> が <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1524"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="62a35-1525">レガシ CAS ポリシーが有効でない場合は、<paramref name="assemblySecurity" /> を <see langword="null" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1525">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1526">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1526">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1527">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1527">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1528"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1528">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1529">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1529">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1530">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1530">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1531">file:// で始まらないする URI を読み取る。</span><span class="sxs-lookup"><span data-stu-id="62a35-1531">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1532">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1532">to execute a console application.</span></span> <span data-ttu-id="62a35-1533"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1533">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteAssemblyByName">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-1534">アセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1534">Executes an assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : string -&gt; int" Usage="appDomain.ExecuteAssemblyByName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-1535">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-1535">The display name of the assembly.</span></span> <span data-ttu-id="62a35-1536">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-1536">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <summary><span data-ttu-id="62a35-1537">表示名を指定してアセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1537">Executes an assembly given its display name.</span></span></summary>
        <returns><span data-ttu-id="62a35-1538">アセンブリのエントリ ポイントが返す値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1538">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1539"><xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドと同様の機能を提供する、<xref:System.AppDomain.ExecuteAssembly%2A>メソッドは、表示名でアセンブリを指定する、または<xref:System.Reflection.AssemblyName>ファイルの場所ではなく、します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1539">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="62a35-1540">そのため、<xref:System.AppDomain.ExecuteAssemblyByName%2A>を持つアセンブリを読み込み、<xref:System.Reflection.Assembly.Load%2A>メソッドではなく、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1540">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1541">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1541">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1542">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1542">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="62a35-1543">作成する、<xref:System.AppDomain>読み込みと実行を使用して、<xref:System.AppDomain.CreateDomain%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1543">To create the <xref:System.AppDomain> to load and execute, use the <xref:System.AppDomain.CreateDomain%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1544"><paramref name="assemblyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1544"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1545"><paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1545">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1546"><paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1546">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1547">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1547">-or-</span></span> 
<span data-ttu-id="62a35-1548">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1548">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1549">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1549">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1550"><paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1550">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1551">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1551">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1552">ファイルまたはパス、自体の情報へのアクセスと表示名をパスにリダイレクトするためのディレクトリからの読み取りアクセス。</span><span class="sxs-lookup"><span data-stu-id="62a35-1552">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="62a35-1553">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1553">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1554">表示名が URL にリダイレクトされたときに、Web サイトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1554">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1555">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1555">to execute a console application.</span></span> <span data-ttu-id="62a35-1556"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1556">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Reflection.AssemblyName" />
        <altmember cref="M:System.Reflection.Assembly.Load(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(class System.Reflection.AssemblyName assemblyName, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::Reflection::AssemblyName ^ assemblyName, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : System.Reflection.AssemblyName * string[] -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-1557">アセンブリの名前を表す <see cref="T:System.Reflection.AssemblyName" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1557">An <see cref="T:System.Reflection.AssemblyName" /> object representing the name of the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-1558">プロセスを起動するときに渡すコマンド ライン引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1558">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="62a35-1559"><see cref="T:System.Reflection.AssemblyName" /> を指定し、指定された引数を使用してアセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1559">Executes the assembly given an <see cref="T:System.Reflection.AssemblyName" />, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="62a35-1560">アセンブリのエントリ ポイントから返された値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1560">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1561"><xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドと同様の機能を提供する、<xref:System.AppDomain.ExecuteAssembly%2A>メソッドは、表示名でアセンブリを指定する、または<xref:System.Reflection.AssemblyName>ファイルの場所ではなく、します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1561">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="62a35-1562">そのため、<xref:System.AppDomain.ExecuteAssemblyByName%2A>を持つアセンブリを読み込み、<xref:System.Reflection.Assembly.Load%2A>メソッドではなく、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1562">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1563">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1563">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1564">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1564">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1565"><paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1565">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1566"><paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1566">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1567"><paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1567">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1568">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1568">-or-</span></span> 
 <span data-ttu-id="62a35-1569">現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1569"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1570">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1570">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1571">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1571">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1572">ファイルまたはパス、自体の情報へのアクセスと表示名をパスにリダイレクトするためのディレクトリからの読み取りアクセス。</span><span class="sxs-lookup"><span data-stu-id="62a35-1572">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="62a35-1573">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1573">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1574">表示名が URL にリダイレクトされたときに、Web サイトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1574">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1575">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1575">to execute a console application.</span></span> <span data-ttu-id="62a35-1576"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1576">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, assemblySecurity As Evidence) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : string * System.Security.Policy.Evidence -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssemblyByName which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-1577">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-1577">The display name of the assembly.</span></span> <span data-ttu-id="62a35-1578">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-1578">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="62a35-1579">アセンブリを読み込むために必要な証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1579">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1580">表示名を指定し、指定された証拠を使用してアセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1580">Executes an assembly given its display name, using the specified evidence.</span></span></summary>
        <returns><span data-ttu-id="62a35-1581">アセンブリのエントリ ポイントが返す値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1581">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1582"><xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドと同様の機能を提供する、<xref:System.AppDomain.ExecuteAssembly%2A>メソッドは、表示名でアセンブリを指定する、または<xref:System.Reflection.AssemblyName>ファイルの場所ではなく、します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1582">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="62a35-1583">そのため、<xref:System.AppDomain.ExecuteAssemblyByName%2A>を持つアセンブリを読み込み、<xref:System.Reflection.Assembly.Load%2A>メソッドではなく、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1583">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1584">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1584">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1585"><xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1585">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1586">使用すると、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを<xref:System.Security.Policy.Evidence>パラメーターの証拠がマージされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1586">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="62a35-1587">引数として指定された証拠、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドは、ローダーによって提供される証拠の部分を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1587">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1588"><paramref name="assemblyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1588"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1589"><paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1589">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1590"><paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1590">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1591"><paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1591">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1592">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1592">-or-</span></span> 
<span data-ttu-id="62a35-1593">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1593">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1594">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1594">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1595">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1595">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1596">ファイルまたはパス、自体の情報へのアクセスと表示名をパスにリダイレクトするためのディレクトリからの読み取りアクセス。</span><span class="sxs-lookup"><span data-stu-id="62a35-1596">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="62a35-1597">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1597">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1598">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1598">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1599"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1599">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1600">表示名が URL にリダイレクトされたときに、Web サイトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1600">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1601">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1601">to execute a console application.</span></span> <span data-ttu-id="62a35-1602"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1602">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, ParamArray args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : string * string[] -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-1603">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-1603">The display name of the assembly.</span></span> <span data-ttu-id="62a35-1604">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-1604">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-1605">プロセスを起動するときに渡すコマンド ライン引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1605">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="62a35-1606">表示名を指定し、指定された引数を使用してアセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1606">Executes the assembly given its display name, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="62a35-1607">アセンブリのエントリ ポイントから返された値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1607">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1608"><xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドと同様の機能を提供する、<xref:System.AppDomain.ExecuteAssembly%2A>メソッドは、表示名でアセンブリを指定する、または<xref:System.Reflection.AssemblyName>ファイルの場所ではなく、します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1608">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="62a35-1609">そのため、<xref:System.AppDomain.ExecuteAssemblyByName%2A>を持つアセンブリを読み込み、<xref:System.Reflection.Assembly.Load%2A>メソッドではなく、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1609">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1610">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1610">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1611">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1611">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1612"><paramref name="assemblyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1612"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1613"><paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1613">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1614"><paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1614">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1615"><paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1615">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1616">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1616">-or-</span></span> 
 <span data-ttu-id="62a35-1617">現在読み込まれているバージョンよりも新しいバージョンの共通言語ランタイムで、<paramref name="assemblyName" /> がコンパイルされました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1617"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1618">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1618">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1619">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1619">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1620">ファイルまたはパス、自体の情報へのアクセスと表示名をパスにリダイレクトするためのディレクトリからの読み取りアクセス。</span><span class="sxs-lookup"><span data-stu-id="62a35-1620">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="62a35-1621">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1621">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1622">表示名が URL にリダイレクトされたときに、Web サイトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1622">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1623">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1623">to execute a console application.</span></span> <span data-ttu-id="62a35-1624"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1624">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, System.Security.Policy.Evidence assemblySecurity, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(class System.Reflection.AssemblyName assemblyName, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::Reflection::AssemblyName ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : System.Reflection.AssemblyName * System.Security.Policy.Evidence * string[] -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, assemblySecurity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssemblyByName which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-1625">アセンブリの名前を表す <see cref="T:System.Reflection.AssemblyName" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1625">An <see cref="T:System.Reflection.AssemblyName" /> object representing the name of the assembly.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="62a35-1626">アセンブリを読み込むために必要な証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1626">Evidence for loading the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-1627">プロセスを起動するときに渡すコマンド ライン引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1627">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="62a35-1628"><see cref="T:System.Reflection.AssemblyName" /> を指定し、指定された証拠および引数を使用してアセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1628">Executes the assembly given an <see cref="T:System.Reflection.AssemblyName" />, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="62a35-1629">アセンブリのエントリ ポイントが返す値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1629">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1630"><xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドと同様の機能を提供する、<xref:System.AppDomain.ExecuteAssembly%2A>メソッドは、表示名でアセンブリを指定する、または<xref:System.Reflection.AssemblyName>ファイルの場所ではなく、します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1630">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="62a35-1631">そのため、<xref:System.AppDomain.ExecuteAssemblyByName%2A>を持つアセンブリを読み込み、<xref:System.Reflection.Assembly.Load%2A>メソッドではなく、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1631">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1632">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1632">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1633">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1633">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1634">使用すると、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを<xref:System.Security.Policy.Evidence>パラメーターの証拠がマージされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1634">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="62a35-1635">引数として指定された証拠、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドは、ローダーによって提供される証拠の部分を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1635">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1636"><paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1636">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1637"><paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1637">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1638"><paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1638">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1639">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1639">-or-</span></span> 
<span data-ttu-id="62a35-1640">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1640">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1641">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1641">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-1642"><paramref name="assemblySecurity" /> が <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1642"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="62a35-1643">レガシ CAS ポリシーが有効でない場合は、<paramref name="assemblySecurity" /> を <see langword="null" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1643">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1644">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1644">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1645">ファイルまたはパス、自体の情報へのアクセスと表示名をパスにリダイレクトするためのディレクトリからの読み取りアクセス。</span><span class="sxs-lookup"><span data-stu-id="62a35-1645">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="62a35-1646">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1646">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1647">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1647">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1648"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1648">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1649">表示名が URL にリダイレクトされたときに、Web サイトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1649">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1650">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1650">to execute a console application.</span></span> <span data-ttu-id="62a35-1651"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1651">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, assemblySecurity As Evidence, ParamArray args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : string * System.Security.Policy.Evidence * string[] -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, assemblySecurity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssemblyByName which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="62a35-1652">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-1652">The display name of the assembly.</span></span> <span data-ttu-id="62a35-1653">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-1653">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="62a35-1654">アセンブリを読み込むために必要な証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1654">Evidence for loading the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="62a35-1655">プロセスを起動するときに渡すコマンド ライン引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1655">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="62a35-1656">表示名を指定し、指定された証拠および引数を使用してアセンブリを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1656">Executes the assembly given its display name, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="62a35-1657">アセンブリのエントリ ポイントが返す値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1657">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1658"><xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドと同様の機能を提供する、<xref:System.AppDomain.ExecuteAssembly%2A>メソッドは、表示名でアセンブリを指定する、または<xref:System.Reflection.AssemblyName>ファイルの場所ではなく、します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1658">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="62a35-1659">そのため、<xref:System.AppDomain.ExecuteAssemblyByName%2A>を持つアセンブリを読み込み、<xref:System.Reflection.Assembly.Load%2A>メソッドではなく、<xref:System.Reflection.Assembly.LoadFile%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1659">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1660">アセンブリが .NET Framework のヘッダーで指定されたエントリ ポイントで実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1660">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="62a35-1661">このメソッドでは、新しいプロセスまたはアプリケーション ドメインは作成されませんし、新しいスレッド上で、エントリ ポイント メソッドは実行されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1661">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1662">使用すると、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドを<xref:System.Security.Policy.Evidence>パラメーターの証拠がマージされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1662">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="62a35-1663">引数として指定された証拠、<xref:System.AppDomain.ExecuteAssemblyByName%2A>メソッドは、ローダーによって提供される証拠の部分を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1663">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1664"><paramref name="assemblyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1664"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1665"><paramref name="assemblyName" /> によって指定したアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1665">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1666"><paramref name="assemblyName" /> によって指定したアセンブリが検出されましたが、読み込むことができません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1666">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1667"><paramref name="assemblyName" /> によって指定したアセンブリは、有効なアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1667">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1668">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1668">-or-</span></span> 
<span data-ttu-id="62a35-1669">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyName" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1669">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1670">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1670">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-1671"><paramref name="assemblySecurity" /> が <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1671"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="62a35-1672">レガシ CAS ポリシーが有効でない場合は、<paramref name="assemblySecurity" /> を <see langword="null" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1672">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="62a35-1673">指定したアセンブリには、エントリ ポイントがありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1673">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1674">ファイルまたはパス、自体の情報へのアクセスと表示名をパスにリダイレクトするためのディレクトリからの読み取りアクセス。</span><span class="sxs-lookup"><span data-stu-id="62a35-1674">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="62a35-1675">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1675">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1676">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1676">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1677"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1677">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1678">表示名が URL にリダイレクトされたときに、Web サイトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1678">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="62a35-1679">コンソール アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1679">to execute a console application.</span></span> <span data-ttu-id="62a35-1680"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1680">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="FirstChanceException">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; FirstChanceException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; FirstChanceException" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.FirstChanceException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FirstChanceException As EventHandler(Of FirstChanceExceptionEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs ^&gt; ^ FirstChanceException;" />
      <MemberSignature Language="F#" Value="member this.FirstChanceException : EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; " Usage="member this.FirstChanceException : System.EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1681">アプリケーション ドメイン内の例外ハンドラーに対する呼び出し履歴をランタイムが検索する前に、マネージド コード内で例外がスローされた場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1681">Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1682">このイベントは、通知だけです。</span><span class="sxs-lookup"><span data-stu-id="62a35-1682">This event is only a notification.</span></span> <span data-ttu-id="62a35-1683">このイベントを処理する例外を処理したりしない後続の例外が何らかの方法で処理に影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1683">Handling this event does not handle the exception or affect subsequent exception handling in any way.</span></span> <span data-ttu-id="62a35-1684">イベントが発生したイベント ハンドラーが呼び出された後は、共通言語ランタイム (CLR) は、例外のハンドラーの検索を開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1684">After the event has been raised and event handlers have been invoked, the common language runtime (CLR) begins to search for a handler for the exception.</span></span> <span data-ttu-id="62a35-1685"><xref:System.AppDomain.FirstChanceException> アプリケーション ドメインを任意のマネージ例外を確認する最初の機会を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1685"><xref:System.AppDomain.FirstChanceException> provides the application domain with a first chance to examine any managed exception.</span></span>  
  
 <span data-ttu-id="62a35-1686">イベントは、アプリケーション ドメインごとに処理できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1686">The event can be handled per application domain.</span></span> <span data-ttu-id="62a35-1687">スレッドが呼び出しの実行中の複数のアプリケーション ドメインを通過、CLR は、そのアプリケーション ドメインに一致する例外ハンドラーの検索を開始する前に、イベント ハンドラーが登録したアプリケーション ドメインごとに、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1687">If a thread passes through multiple application domains while executing a call, the event is raised in each application domain that has registered an event handler, before the CLR begins searching for a matching exception handler in that application domain.</span></span> <span data-ttu-id="62a35-1688">イベントが処理された後、そのアプリケーション ドメインに一致する例外ハンドラーの検索が行われます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1688">After the event has been handled, a search is made for a matching exception handler in that application domain.</span></span> <span data-ttu-id="62a35-1689">[なし] が見つかった場合は、次のアプリケーション ドメインで、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1689">If none is found, the event is raised in the next application domain.</span></span>  
  
 <span data-ttu-id="62a35-1690">イベントのハンドラーで発生するすべての例外を処理する必要があります、<xref:System.AppDomain.FirstChanceException>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-1690">You must handle all exceptions that occur in the event handler for the <xref:System.AppDomain.FirstChanceException> event.</span></span> <span data-ttu-id="62a35-1691">それ以外の場合、<xref:System.AppDomain.FirstChanceException>発生を再帰的には、します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1691">Otherwise, <xref:System.AppDomain.FirstChanceException> is raised recursively.</span></span> <span data-ttu-id="62a35-1692">これは、結果、スタック オーバーフローが発生し、アプリケーションが終了します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1692">This could result in a stack overflow and termination of the application.</span></span> <span data-ttu-id="62a35-1693">例外の通知は、仮想マシンに影響を与えるからメモリ不足やスタック オーバーフローなどのインフラストラクチャに関連する例外を保持する、制約された実行領域 (Cer) として、このイベントのイベント ハンドラーを実装することをお勧めします。処理中です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1693">We recommend that you implement event handlers for this event as constrained execution regions (CERs), to keep infrastructure-related exceptions such as out-of-memory or stack overflow from affecting the virtual machine while the exception notification is being processed.</span></span>  
  
 <span data-ttu-id="62a35-1694">このイベントがない限り、イベント ハンドラーがセキュリティ クリティカルであり、アクセス違反など、プロセスの状態の破損を示す例外の発生しません、<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="62a35-1694">This event is not raised for exceptions that indicate corruption of process state, such as access violations, unless the event handler is security-critical and has the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute.</span></span>  
  
 <span data-ttu-id="62a35-1695">この通知イベントが処理されるときに、共通言語ランタイムはスレッドの中止を中断します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1695">The common language runtime suspends thread aborts while this notification event is being handled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1696">次の例は、一連のという名前のアプリケーション ドメインを作成`AD0`を通じて`AD3`で、`Worker`各アプリケーション ドメイン内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1696">The following example creates a series of application domains named `AD0` through `AD3`, with a `Worker` object in each application domain.</span></span> <span data-ttu-id="62a35-1697">各`Worker`オブジェクトへの参照には、`Worker`以外の次のアプリケーション ドメイン内のオブジェクト、`Worker`最後のアプリケーション ドメインでします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1697">Each `Worker` object has a reference to the `Worker` object in the next application domain, except for the `Worker` in the last application domain.</span></span> <span data-ttu-id="62a35-1698"><xref:System.AppDomain.FirstChanceException>を除くすべてのアプリケーション ドメインでイベントを処理`AD1`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1698">The <xref:System.AppDomain.FirstChanceException> event is handled in all application domains except `AD1`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1699">この例では、複数のアプリケーション ドメインで初回例外通知を示すだけでなくで単純なユース ケースが見つかります[方法。初回例外通知を受け取る](~/docs/framework/app-domains/how-to-receive-first-chance-exception-notifications.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1699">In addition to this example, which demonstrates first-chance exception notifications in multiple application domains, you can find simple use cases in [How to: Receive First-Chance Exception Notifications](~/docs/framework/app-domains/how-to-receive-first-chance-exception-notifications.md).</span></span>  
  
 <span data-ttu-id="62a35-1700">アプリケーション ドメインが作成されると、既定のアプリケーション ドメインが呼び出し、`TestException`メソッドの最初のアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1700">When the application domains have been created, the default application domain calls the `TestException` method for the first application domain.</span></span> <span data-ttu-id="62a35-1701">各`Worker`オブジェクトの呼び出し、`TestException`メソッドの最後まで、[次へ] のアプリケーション ドメイン`Worker`が処理または未処理の例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1701">Each `Worker` object calls the `TestException` method for the next application domain, until the last `Worker` throws an exception that is either handled or unhandled.</span></span> <span data-ttu-id="62a35-1702">現在のスレッドがすべてのアプリケーション ドメインを通過するため、および`TestException`アプリケーション ドメインごとにスタックに追加されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1702">Thus, the current thread passes through all the application domains, and `TestException` is added to the stack in each application domain.</span></span>  
  
 <span data-ttu-id="62a35-1703">ときに、最終`Worker`オブジェクト、例外を処理する、<xref:System.AppDomain.FirstChanceException>最後のアプリケーション ドメインでのみイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1703">When the last `Worker` object handles the exception, the <xref:System.AppDomain.FirstChanceException> event is raised only in the last application domain.</span></span> <span data-ttu-id="62a35-1704">他のアプリケーション ドメインでは、イベントは発生しませんので、例外を処理するためにされなくなります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1704">The other application domains never get a chance to handle the exception, so the event is not raised.</span></span>  
  
 <span data-ttu-id="62a35-1705">ときに、最後`Worker`オブジェクトが例外を処理していない、<xref:System.AppDomain.FirstChanceException>イベント ハンドラーを持っている各アプリケーション ドメインでイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1705">When the last `Worker` object does not handle the exception, the <xref:System.AppDomain.FirstChanceException> event is raised in each application domain that has an event handler.</span></span> <span data-ttu-id="62a35-1706">各イベント ハンドラーが完了すると、スタックがアンワインドの既定のアプリケーション ドメインで例外がキャッチされるまで続行されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1706">After each event handler has finished, the stack continues to unwind until the exception is caught by the default application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1707">イベントは近くの履歴の表示の拡大と既定のアプリケーション ドメインに近づけるためのを表示する変更`e.Exception.Message`に`e.Exception`で、`FirstChanceHandler`イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="62a35-1707">To see how the stack display grows as the event is raised closer and closer to the default application domain, change `e.Exception.Message` to `e.Exception` in the `FirstChanceHandler` event handlers.</span></span> <span data-ttu-id="62a35-1708">そのときに注意してください`TestException`2 回表示されるアプリケーション ドメインの境界を越えて呼び出される: プロキシでスタブに 1 回です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1708">Notice that when `TestException` is called across application domain boundaries, it appears twice: once for the proxy and once for the stub.</span></span>  
  
 [!code-csharp[System.AppDomain.FirstChanceException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/cs/example.cs#1)]
 [!code-vb[System.AppDomain.FirstChanceException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-1709">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1709">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-1710">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1710">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" />
        <altmember cref="E:System.AppDomain.UnhandledException" />
        <related type="Article" href="https://msdn.microsoft.com/library/66f002b8-a97d-4a6e-a503-2cec01689113"><span data-ttu-id="62a35-1711">方法: 初回例外通知を受け取る</span><span class="sxs-lookup"><span data-stu-id="62a35-1711">How to: Receive First-Chance Exception Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FriendlyName">
      <MemberSignature Language="C#" Value="public string FriendlyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FriendlyName" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.FriendlyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FriendlyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FriendlyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FriendlyName : string" Usage="System.AppDomain.FriendlyName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.FriendlyName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1712">アプリケーション ドメインの表示名を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1712">Gets the friendly name of this application domain.</span></span></summary>
        <value><span data-ttu-id="62a35-1713">アプリケーション ドメインの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-1713">The friendly name of this application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1714">既定のアプリケーション ドメインのフレンドリ名は、プロセス実行可能ファイルのファイル名です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1714">The friendly name of the default application domain is the file name of the process executable.</span></span> <span data-ttu-id="62a35-1715">たとえば、プロセスを開始する実行可能ファイルが使用されている場合は`"c:\MyAppDirectory\MyAssembly.exe"`、既定のアプリケーション ドメインのフレンドリ名は`"MyAssembly.exe"`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1715">For example, if the executable used to start the process is `"c:\MyAppDirectory\MyAssembly.exe"`, the friendly name of the default application domain is `"MyAssembly.exe"`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1716">次のコード例では、<xref:System.AppDomain.FriendlyName%2A>プロパティを現在のアプリケーション ドメインのわかりやすい名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1716">The following code example uses the <xref:System.AppDomain.FriendlyName%2A> property to get the friendly name of the current application domain.</span></span> <span data-ttu-id="62a35-1717">既定のアプリケーション ドメインのフレンドリ名は、アプリケーションの実行可能ファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1717">For the default application domain, the friendly name is the name of the application's executable file.</span></span> <span data-ttu-id="62a35-1718">コード例では、アプリケーション ドメインに関する追加情報も表示されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1718">The code example also displays additional information about the application domain.</span></span>  
  
 [!code-cpp[ADApplicationBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADApplicationBase/CPP/adapplicationbase.cpp#1)]
 [!code-csharp[ADApplicationBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADApplicationBase/CS/adapplicationbase.cs#1)]
 [!code-vb[ADApplicationBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADApplicationBase/VB/adapplicationbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1719">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1719">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly[] GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly[] GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As Assembly()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="abstract member GetAssemblies : unit -&gt; System.Reflection.Assembly[]&#xA;override this.GetAssemblies : unit -&gt; System.Reflection.Assembly[]" Usage="appDomain.GetAssemblies " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetAssemblies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-1720">アプリケーション ドメインの実行コンテキストに読み込まれているアセンブリを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1720">Gets the assemblies that have been loaded into the execution context of this application domain.</span></span></summary>
        <returns><span data-ttu-id="62a35-1721">アプリケーション ドメイン内のアセンブリの配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-1721">An array of assemblies in this application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a35-1722">次のコード例では、<xref:System.AppDomain.GetAssemblies%2A>アプリケーション ドメインに読み込まれているすべてのアセンブリの一覧を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1722">The following code example uses the <xref:System.AppDomain.GetAssemblies%2A> method to get a list of all assemblies that have been loaded into the application domain.</span></span> <span data-ttu-id="62a35-1723">アセンブリは、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1723">The assemblies are then displayed to the console.</span></span>  
  
 <span data-ttu-id="62a35-1724">このコード例を実行するという名前のアセンブリを作成する必要があります。 `CustomLibrary.dll`、に渡されるアセンブリ名を変更したり、<xref:System.AppDomain.GetAssemblies%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1724">To run this code example, you need to create an assembly named `CustomLibrary.dll`, or change the assembly name that is passed to the <xref:System.AppDomain.GetAssemblies%2A> method.</span></span>  
  
 [!code-cpp[ADGetAssemblies#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetAssemblies/CPP/adgetassemblies.cpp#1)]
 [!code-csharp[ADGetAssemblies#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetAssemblies/CS/adgetassemblies.cs#1)]
 [!code-vb[ADGetAssemblies#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetAssemblies/VB/adgetassemblies.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1725">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1725">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentThreadId">
      <MemberSignature Language="C#" Value="public static int GetCurrentThreadId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentThreadId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetCurrentThreadId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentThreadId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentThreadId();" />
      <MemberSignature Language="F#" Value="static member GetCurrentThreadId : unit -&gt; int" Usage="System.AppDomain.GetCurrentThreadId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("AppDomain.GetCurrentThreadId has been deprecated because it does not provide a stable Id when managed threads are running on fibers (aka lightweight threads). To get a stable identifier for a managed thread, use the ManagedThreadId property on Thread.'")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.GetCurrentThreadId has been deprecated because it does not provide a stable Id when managed threads are running on fibers (aka lightweight threads). To get a stable identifier for a managed thread, use the ManagedThreadId property on Thread.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-1726">現在のスレッドの識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1726">Gets the current thread identifier.</span></span></summary>
        <returns><span data-ttu-id="62a35-1727">現在のスレッドの識別子を表す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1727">A 32-bit signed integer that is the identifier of the current thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1728">使用して、<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType>プロパティは、.NET Framework がファイバー (つまり、簡易スレッド) をサポートする環境でホストされている場合にも安定しています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1728">Use the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property, which is stable even when the .NET Framework is hosted by an environment that supports fibers (that is, lightweight threads).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1729">このメソッドを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="62a35-1729">to call this method.</span></span> <span data-ttu-id="62a35-1730"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1730">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="62a35-1731">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.Demand" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1731">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
        <altmember cref="T:System.Int32" />
        <altmember cref="P:System.Threading.Thread.ManagedThreadId" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj&#xA;override this.GetData : string -&gt; obj" Usage="appDomain.GetData name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetData(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-1732">あらかじめ定義されたアプリケーション ドメイン プロパティの名前、または独自に定義したアプリケーション ドメイン プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-1732">The name of a predefined application domain property, or the name of an application domain property you have defined.</span></span></param>
        <summary><span data-ttu-id="62a35-1733">現在のアプリケーション ドメイン内に格納されている、指定した名前の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1733">Gets the value stored in the current application domain for the specified name.</span></span></summary>
        <returns><span data-ttu-id="62a35-1734"><paramref name="name" /> プロパティの値。プロパティが存在しない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1734">The value of the <paramref name="name" /> property, or <see langword="null" /> if the property does not exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1735">このインスタンスのプロパティを説明する名前とデータのペアの内部キャッシュ内のエントリの値を取得するには、このメソッドを使用して<xref:System.AppDomain>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1735">Use this method to retrieve the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <xref:System.AppDomain>.</span></span> <span data-ttu-id="62a35-1736">なお、比較の`name`をキーと値のペアの名前は大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1736">Note that the comparison of `name` with the name of key-value pairs is case-sensitive.</span></span>  
  
 <span data-ttu-id="62a35-1737">キャッシュには、アプリケーション ドメインの作成時に挿入される定義済みのシステム エントリに自動的に含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1737">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="62a35-1738">その値を検査することができます、<xref:System.AppDomain.GetData%2A>メソッド、または同等<xref:System.AppDomainSetup>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1738">You can inspect their values with the <xref:System.AppDomain.GetData%2A> method, or the equivalent <xref:System.AppDomainSetup> properties.</span></span>  
  
 <span data-ttu-id="62a35-1739">挿入すると、独自のユーザー定義名前とデータ ペアの変更、<xref:System.AppDomain.SetData%2A>メソッドでは、その値を検査し、<xref:System.AppDomain.GetData%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1739">You can insert or modify your own user defined name-data pairs with the <xref:System.AppDomain.SetData%2A> method and inspect their values with the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
 <span data-ttu-id="62a35-1740">次の表、`name`の各システム エントリとそれに対応する定義済みの<xref:System.AppDomainSetup>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1740">The following table describes the `name` of each predefined system entry and its corresponding <xref:System.AppDomainSetup> property.</span></span>  
  
|<span data-ttu-id="62a35-1741">'Name' の値</span><span class="sxs-lookup"><span data-stu-id="62a35-1741">Value of 'name'</span></span>|<span data-ttu-id="62a35-1742">プロパティ</span><span class="sxs-lookup"><span data-stu-id="62a35-1742">Property</span></span>|  
|---------------------|--------------|  
|<span data-ttu-id="62a35-1743">"APPBASE"</span><span class="sxs-lookup"><span data-stu-id="62a35-1743">"APPBASE"</span></span>|<xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1744">"APP_CONFIG_FILE"</span><span class="sxs-lookup"><span data-stu-id="62a35-1744">"APP_CONFIG_FILE"</span></span>|<xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1745">"APP_LAUNCH_URL"</span><span class="sxs-lookup"><span data-stu-id="62a35-1745">"APP_LAUNCH_URL"</span></span>|<span data-ttu-id="62a35-1746">(プロパティなし)</span><span class="sxs-lookup"><span data-stu-id="62a35-1746">(no property)</span></span><br /><br /> <span data-ttu-id="62a35-1747">"APP_LAUNCH_URL"は、リダイレクトする前に、ユーザーによって要求された URL を表します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1747">"APP_LAUNCH_URL" represents the URL originally requested by the user, before any redirection.</span></span> <span data-ttu-id="62a35-1748">アプリケーションが Internet Explorer などのブラウザーで起動された場合にのみ使用可能なは。</span><span class="sxs-lookup"><span data-stu-id="62a35-1748">It is available only when the application has been launched with a browser such as Internet Explorer.</span></span> <span data-ttu-id="62a35-1749">すべてのブラウザーでは、この値を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1749">Not all browsers provide this value.</span></span>|  
|<span data-ttu-id="62a35-1750">"APP_NAME"</span><span class="sxs-lookup"><span data-stu-id="62a35-1750">"APP_NAME"</span></span>|<xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1751">"BINPATH_PROBE_ONLY"</span><span class="sxs-lookup"><span data-stu-id="62a35-1751">"BINPATH_PROBE_ONLY"</span></span>|<xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1752">"CACHE_BASE"</span><span class="sxs-lookup"><span data-stu-id="62a35-1752">"CACHE_BASE"</span></span>|<xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1753">"CODE_DOWNLOAD_DISABLED"</span><span class="sxs-lookup"><span data-stu-id="62a35-1753">"CODE_DOWNLOAD_DISABLED"</span></span>|<xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1754">"DEV_PATH"</span><span class="sxs-lookup"><span data-stu-id="62a35-1754">"DEV_PATH"</span></span>|<span data-ttu-id="62a35-1755">(プロパティなし)</span><span class="sxs-lookup"><span data-stu-id="62a35-1755">(no property)</span></span>|  
|<span data-ttu-id="62a35-1756">"DISALLOW_APP"</span><span class="sxs-lookup"><span data-stu-id="62a35-1756">"DISALLOW_APP"</span></span>|<xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1757">"DISALLOW_APP_BASE_PROBING"</span><span class="sxs-lookup"><span data-stu-id="62a35-1757">"DISALLOW_APP_BASE_PROBING"</span></span>|<xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1758">"DISALLOW_APP_REDIRECTS"</span><span class="sxs-lookup"><span data-stu-id="62a35-1758">"DISALLOW_APP_REDIRECTS"</span></span>|<xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1759">"DYNAMIC_BASE"</span><span class="sxs-lookup"><span data-stu-id="62a35-1759">"DYNAMIC_BASE"</span></span>|<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1760">"FORCE_CACHE_INSTALL"</span><span class="sxs-lookup"><span data-stu-id="62a35-1760">"FORCE_CACHE_INSTALL"</span></span>|<xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1761">"LICENSE_FILE"、またはアプリケーション固有の文字列</span><span class="sxs-lookup"><span data-stu-id="62a35-1761">"LICENSE_FILE", or an application-specific string</span></span>|<xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1762">"LOADER_OPTIMIZATION"</span><span class="sxs-lookup"><span data-stu-id="62a35-1762">"LOADER_OPTIMIZATION"</span></span>|<xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1763">"LOCATION_URI"</span><span class="sxs-lookup"><span data-stu-id="62a35-1763">"LOCATION_URI"</span></span>|<span data-ttu-id="62a35-1764">(プロパティなし)</span><span class="sxs-lookup"><span data-stu-id="62a35-1764">(no property)</span></span>|  
|<span data-ttu-id="62a35-1765">「場合」</span><span class="sxs-lookup"><span data-stu-id="62a35-1765">"PRIVATE_BINPATH"</span></span>|<xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="62a35-1766">"REGEX_DEFAULT_MATCH_TIMEOUT"</span><span class="sxs-lookup"><span data-stu-id="62a35-1766">"REGEX_DEFAULT_MATCH_TIMEOUT"</span></span>|<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=nameWithType><br /><br /> <span data-ttu-id="62a35-1767">"REGEX_DEFAULT_MATCH_TIMEOUT"はシステムのエントリではありませんし、呼び出すことによってその値を設定することができます、<xref:System.AppDomain.SetData%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1767">"REGEX_DEFAULT_MATCH_TIMEOUT" is not a system entry, and its value can be set by calling the <xref:System.AppDomain.SetData%2A> method.</span></span>|  
|<span data-ttu-id="62a35-1768">"SHADOW_COPY_DIRS"</span><span class="sxs-lookup"><span data-stu-id="62a35-1768">"SHADOW_COPY_DIRS"</span></span>|<xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType>|  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1769">次の例では、新しいアプリケーション ドメインを作成するには、ドメインのシステム指定の値を設定およびドメインの新しい値のペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1769">The following example creates a new application domain, sets a system-provided value for the domain, and adds a new value pair for the domain.</span></span> <span data-ttu-id="62a35-1770">例では、しを使用する方法を示します、<xref:System.AppDomain.GetData%2A>これらの値のペアからデータを取得し、それらをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1770">The example then demonstrates how to use the <xref:System.AppDomain.GetData%2A> method to retrieve the data from these value pairs and display them to the console.</span></span>  
  
 [!code-cpp[ADGetData#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetData/CPP/adgetdata.cpp#1)]
 [!code-csharp[ADGetData#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetData/CS/adgetdata.cs#1)]
 [!code-vb[ADGetData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetData/VB/adgetdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1771"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1771"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1772">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1772">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1773">パス自体であるため、パスにプロパティが適用される場合の情報にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1773">for access to the information in the path itself, if the property applies to a path.</span></span> <span data-ttu-id="62a35-1774"><see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1774">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="M:System.AppDomain.SetData(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="appDomain.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-1775">現在のインスタンスの型を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1775">Gets the type of the current instance.</span></span></summary>
        <returns><span data-ttu-id="62a35-1776">現在のインスタンスの型。</span><span class="sxs-lookup"><span data-stu-id="62a35-1776">The type of the current instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.AppDomain.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1777">プロセス内のアプリケーション ドメインを一意に識別する整数を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1777">Gets an integer that uniquely identifies the application domain within the process.</span></span></summary>
        <value><span data-ttu-id="62a35-1778">アプリケーション ドメインを識別する整数。</span><span class="sxs-lookup"><span data-stu-id="62a35-1778">An integer that identifies the application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a35-1779">次のコード例では、2 つ目のアプリケーション ドメインを作成し、既定のドメインと、新しいドメインに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1779">The following code example creates a second application domain and displays information about the default domain and the new domain.</span></span>  
  
 [!code-cpp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CPP/System.AppDomain.IsDefaultAppDomain.cpp#1)]
 [!code-csharp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CS/source.cs#1)]
 [!code-vb[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="appDomain.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.InitializeLifetimeService</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-1780">リースが作成されないようにすることで、<see cref="T:System.AppDomain" /> に無期限の有効期間を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1780">Gives the <see cref="T:System.AppDomain" /> an infinite lifetime by preventing a lease from being created.</span></span></summary>
        <returns><span data-ttu-id="62a35-1781">常に <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1781">Always <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1782">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1782">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-1783">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1783">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-1784">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1784">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsCompatibilitySwitchSet">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsCompatibilitySwitchSet (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; IsCompatibilitySwitchSet(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCompatibilitySwitchSet (value As String) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; IsCompatibilitySwitchSet(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsCompatibilitySwitchSet : string -&gt; Nullable&lt;bool&gt;" Usage="appDomain.IsCompatibilitySwitchSet value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="62a35-1785">テストする互換性スイッチ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1785">The compatibility switch to test.</span></span></param>
        <summary><span data-ttu-id="62a35-1786">いずれかの互換性スイッチが設定されているかどうか、設定されている場合は指定の互換性スイッチが設定されているかどうかを示す、null 許容のブール値を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1786">Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</span></span></summary>
        <returns><span data-ttu-id="62a35-1787">互換性スイッチが設定されていない場合は null 参照 (Visual Basic では <see langword="Nothing" />)。それ以外の場合は、<paramref name="value" /> で指定された互換性スイッチが設定されているかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="62a35-1787">A null reference (<see langword="Nothing" /> in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <paramref name="value" /> is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1788">このメソッドは、現在のアプリケーション ドメインの指定された互換性スイッチが設定されているかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1788">This method tests whether the specified compatibility switch has been set for the current application domain.</span></span> <span data-ttu-id="62a35-1789">互換性スイッチは、(方法文字列が並べ替えられます)、通常、動作を復元するが、.NET Framework のバージョン間で変更されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1789">Compatibility switches typically restore a behavior (such as the way strings are sorted) that was changed between versions of the .NET Framework.</span></span>  <span data-ttu-id="62a35-1790">呼び出すことによって設定されている、<xref:System.AppDomainSetup.SetCompatibilitySwitches%2A?displayProperty=nameWithType>メソッドは、アプリケーション ドメインを作成する前にします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1790">They are set by calling the <xref:System.AppDomainSetup.SetCompatibilitySwitches%2A?displayProperty=nameWithType> method before creating an application domain.</span></span>  
  
 <span data-ttu-id="62a35-1791">次の表では、.NET Framework の以前のバージョンの動作を復元する設定できる互換性スイッチの例を示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1791">The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.</span></span>  
  
|<span data-ttu-id="62a35-1792">切り替え</span><span class="sxs-lookup"><span data-stu-id="62a35-1792">Switch</span></span>|<span data-ttu-id="62a35-1793">説明</span><span class="sxs-lookup"><span data-stu-id="62a35-1793">Meaning</span></span>|  
|------------|-------------|  
|<span data-ttu-id="62a35-1794">"NetFx40_LegacySecurityPolicy"</span><span class="sxs-lookup"><span data-stu-id="62a35-1794">"NetFx40_LegacySecurityPolicy"</span></span>|<span data-ttu-id="62a35-1795">コード アクセス セキュリティ (CAS)、[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]でこのアプリケーション ドメインを有効にします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1795">Code access security (CAS) for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] is enabled in this application domain.</span></span> <span data-ttu-id="62a35-1796">参照してください[ &lt;NetFx40_LegacySecurityPolicy&gt;要素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1796">See [&lt;NetFx40_LegacySecurityPolicy&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md).</span></span>|  
|<span data-ttu-id="62a35-1797">"NetFx40_Legacy20SortingBehavior"</span><span class="sxs-lookup"><span data-stu-id="62a35-1797">"NetFx40_Legacy20SortingBehavior"</span></span>|<span data-ttu-id="62a35-1798">文字列の既定値を並べ替え、[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]はこのアプリケーション ドメインで有効にします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1798">String sorting defaults for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] are enabled in this application domain.</span></span> <span data-ttu-id="62a35-1799">その成功には、インストールされるように sort00001000.dll が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1799">Its success requires sort00001000.dll to be installed.</span></span> <span data-ttu-id="62a35-1800">参照してください[ &lt;CompatSortNLSVersion&gt;要素](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1800">See [&lt;CompatSortNLSVersion&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md).</span></span>|  
|<span data-ttu-id="62a35-1801">"NetFx40_Legacy40SortingBehavior"</span><span class="sxs-lookup"><span data-stu-id="62a35-1801">"NetFx40_Legacy40SortingBehavior"</span></span>|<span data-ttu-id="62a35-1802">文字列の既定値を並べ替え、 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Unicode 5.0 は、このアプリケーション ドメインで有効になっているとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1802">String sorting defaults for the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and Unicode 5.0 are enabled in this application domain.</span></span> <span data-ttu-id="62a35-1803">その成功には、インストールする sort00060101.dll が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1803">Its success requires sort00060101.dll to be installed.</span></span>|  
|<span data-ttu-id="62a35-1804">"NetFx40_TimeSpanLegacyFormatMode"</span><span class="sxs-lookup"><span data-stu-id="62a35-1804">"NetFx40_TimeSpanLegacyFormatMode"</span></span>|<span data-ttu-id="62a35-1805"><xref:System.TimeSpan> 書式設定の動作、[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]でこのアプリケーション ドメインを有効にします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1805"><xref:System.TimeSpan> formatting behavior for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] is enabled in this application domain.</span></span>  <span data-ttu-id="62a35-1806">参照してください[ &lt;TimeSpan_LegacyFormatMode&gt;要素](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)の"復元レガシ TimeSpan"の書式設定」、および、<xref:System.TimeSpan>トピック。</span><span class="sxs-lookup"><span data-stu-id="62a35-1806">See [&lt;TimeSpan_LegacyFormatMode&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md) and the "Restoring Legacy TimeSpan Formatting" section of the <xref:System.TimeSpan> topic.</span></span>|  
|<span data-ttu-id="62a35-1807">"UseRandomizedStringHashAlgorithm"</span><span class="sxs-lookup"><span data-stu-id="62a35-1807">"UseRandomizedStringHashAlgorithm"</span></span>|<span data-ttu-id="62a35-1808">ランタイムに文字列のハッシュ コードを計算する、アプリケーション ドメイン間で一貫したハッシュ コードを生成する 1 つのハッシュ アルゴリズムを使用する代わりのアプリケーション ドメインごと。</span><span class="sxs-lookup"><span data-stu-id="62a35-1808">The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains.</span></span> <span data-ttu-id="62a35-1809">参照してください[ &lt;UseRandomizedStringHashAlgorithm&gt;要素](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1809">See [&lt;UseRandomizedStringHashAlgorithm&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md).</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="IsDefaultAppDomain">
      <MemberSignature Language="C#" Value="public bool IsDefaultAppDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDefaultAppDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsDefaultAppDomain" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefaultAppDomain () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefaultAppDomain();" />
      <MemberSignature Language="F#" Value="member this.IsDefaultAppDomain : unit -&gt; bool" Usage="appDomain.IsDefaultAppDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-1810">アプリケーション ドメインが、プロセスの既定のアプリケーション ドメインであるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1810">Returns a value that indicates whether the application domain is the default application domain for the process.</span></span></summary>
        <returns><span data-ttu-id="62a35-1811">現在の <see cref="T:System.AppDomain" /> オブジェクトがプロセスの既定のアプリケーション ドメインを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1811"><see langword="true" /> if the current <see cref="T:System.AppDomain" /> object represents the default application domain for the process; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1812">すべてのマネージ プロセスでは、既定のアプリケーション ドメインがあります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1812">Every managed process has a default application domain.</span></span> <span data-ttu-id="62a35-1813">既定のドメインで実行が開始されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1813">Execution begins in the default domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1814">次のコード例では、2 つ目のアプリケーション ドメインを作成し、既定のドメインと、新しいドメインに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1814">The following code example creates a second application domain and displays information about the default domain and the new domain.</span></span>  
  
 [!code-cpp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CPP/System.AppDomain.IsDefaultAppDomain.cpp#1)]
 [!code-csharp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CS/source.cs#1)]
 [!code-vb[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalizingForUnload">
      <MemberSignature Language="C#" Value="public bool IsFinalizingForUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsFinalizingForUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsFinalizingForUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFinalizingForUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFinalizingForUnload();" />
      <MemberSignature Language="F#" Value="member this.IsFinalizingForUnload : unit -&gt; bool" Usage="appDomain.IsFinalizingForUnload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-1815">このアプリケーション ドメインがアンロード中で、これに含まれるオブジェクトが共通言語ランタイムによって終了処理されているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1815">Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</span></span></summary>
        <returns><span data-ttu-id="62a35-1816">アプリケーション ドメインがアンロード中で、共通言語ランタイムがファイナライザーの呼び出しを既に開始している場合は <see langword="true" />。これ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1816"><see langword="true" /> if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1817">オブジェクトのファイナライズ メソッドは、オブジェクトがガベージ コレクトされる前に必要なクリーンアップ操作を実行する機会を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1817">The finalization method for an object provides you an opportunity to perform any necessary cleanup operations before the object is garbage collected.</span></span> <span data-ttu-id="62a35-1818">終了後、オブジェクトがアクセスできるが無効な状態で、そのために使用できなくなります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1818">After finalization, the object is accessible but in an invalid state and therefore unusable.</span></span> <span data-ttu-id="62a35-1819">最終的には、ガベージ コレクションが完了し、オブジェクトを解放します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1819">Eventually, garbage collection completes and reclaims the object.</span></span>  
  
 <span data-ttu-id="62a35-1820">オブジェクトのファイナライズ メソッドは、次の状況のいずれかで: ガベージ コレクション中に、共通言語ランタイムがシャット ダウンするとき、またはオブジェクトを含むアプリケーション ドメインがアンロードされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1820">An object's finalization method is called in one of the following situations: during garbage collection, when the common language runtime is shutting down, or when the application domain that contains the object is unloaded.</span></span> <span data-ttu-id="62a35-1821"><xref:System.AppDomain.IsFinalizingForUnload%2A>メソッドを返します。`true`のみで最後のケースでは、これは返されません`true`ファイナライズ定期的なガベージ コレクションから、または CLR シャット ダウンからの結果の場合。</span><span class="sxs-lookup"><span data-stu-id="62a35-1821">The <xref:System.AppDomain.IsFinalizingForUnload%2A> method returns `true` only in the last case; it does not return `true` if finalization results from routine garbage collection or from CLR shutdown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1822">CLR シャット ダウンにより終了処理は、かどうかを調べるには、<xref:System.Environment.HasShutdownStarted%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1822">To determine whether finalization is due to CLR shutdown, use the <xref:System.Environment.HasShutdownStarted%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="62a35-1823">返します`true`終了処理は、アプリケーション ドメインがアンロードされるため、または、CLR がシャット ダウンする場合。</span><span class="sxs-lookup"><span data-stu-id="62a35-1823">It returns `true` if finalization is due to an application domain being unloaded or to the CLR shutting down.</span></span>  
  
 <span data-ttu-id="62a35-1824">ドメインのアンロード中、終了メソッドで実行中に、静的フィールドによって参照され、終了メソッドを持つ別のオブジェクトにアクセスする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1824">While executing in your finalization method during domain unloading, you might want to access another object that is referenced by a static field and has a finalization method.</span></span> <span data-ttu-id="62a35-1825">ただし、この操作を行いますアクセスされるオブジェクトが既にファイナライズされているため、確実にことはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1825">However, you cannot reliably do so because the accessed object might already have been finalized.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1826">このルールの例外は、<xref:System.Console>クラスは、ストリーム オブジェクトを参照する静的フィールドが含まれていますが、常に、ドメインのアンロード、またはシステムのシャット ダウン中も、システム コンソールに記述できますように特別に実装されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1826">An exception to this rule is the <xref:System.Console> class, which contains static fields that reference stream objects, but is implemented specially so you can always write to the system console, even during domain unloading or system shutdown.</span></span>  
  
 <span data-ttu-id="62a35-1827">オブジェクトのファイナライズ メソッドでこのメソッドを使用すると、オブジェクトを含むアプリケーション ドメインがアンロード中かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1827">Use this method in an object's finalization method to determine whether the application domain that contains the object is unloading.</span></span> <span data-ttu-id="62a35-1828">場合は、終了メソッドを持つ静的フィールドによって参照されるオブジェクトを確実にアクセスできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1828">If that is the case, you cannot reliably access any object that has a finalization method and is referenced by a static field.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Environment.HasShutdownStarted" />
      </Docs>
    </Member>
    <Member MemberName="IsFullyTrusted">
      <MemberSignature Language="C#" Value="public bool IsFullyTrusted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFullyTrusted" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.IsFullyTrusted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFullyTrusted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFullyTrusted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFullyTrusted : bool" Usage="System.AppDomain.IsFullyTrusted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1829">現在のアプリケーション ドメインに読み込まれたアセンブリが、完全に信頼された状態で実行されるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1829">Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</span></span></summary>
        <value><span data-ttu-id="62a35-1830">現在のアプリケーション ドメインに読み込まれたアセンブリが、完全に信頼された状態で実行される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1830"><see langword="true" /> if assemblies that are loaded into the current application domain execute with full trust; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1831">このメソッドは常に返します`true`デスクトップ上で実行されるアプリケーションの既定のアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-1831">This method always returns `true` for the default application domain of an application that runs on the desktop.</span></span> <span data-ttu-id="62a35-1832">返します`false`サンド ボックス アプリケーション ドメインを使用して作成された、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>アプリケーション ドメインに与えられるアクセス許可が完全な信頼と等価でない場合、メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1832">It returns `false` for a sandboxed application domain that was created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload, unless the permissions that are granted to the application domain are equivalent to full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1833">次の例で、<xref:System.AppDomain.IsFullyTrusted%2A>プロパティおよび<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>完全信頼と部分的に信頼されたアプリケーション ドメインのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1833">The following example demonstrates the <xref:System.AppDomain.IsFullyTrusted%2A> property and the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> property with fully trusted and partially trusted application domains.</span></span> <span data-ttu-id="62a35-1834">完全に信頼されたアプリケーション ドメインでは、アプリケーションの既定のアプリケーション ドメインです。</span><span class="sxs-lookup"><span data-stu-id="62a35-1834">The fully trusted application domain is the default application domain for the application.</span></span> <span data-ttu-id="62a35-1835">使用して、部分的に信頼されたアプリケーション ドメインが作成された、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1835">The partially trusted application domain is created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload.</span></span>  
  
 <span data-ttu-id="62a35-1836">この例では、`Worker`から派生したクラス<xref:System.MarshalByRefObject>ので、アプリケーション ドメイン境界を越えてマーシャ リングすることができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1836">The example uses a `Worker` class that derives from <xref:System.MarshalByRefObject>, so it can be marshaled across application domain boundaries.</span></span> <span data-ttu-id="62a35-1837">例は、作成、`Worker`既定のアプリケーション ドメイン内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1837">The example creates a `Worker` object in the default application domain.</span></span> <span data-ttu-id="62a35-1838">呼び出して、`TestIsFullyTrusted`アプリケーション ドメインとアプリケーション ドメインに読み込まれている 2 つのアセンブリのプロパティ値を表示する方法: mscorlib は、.NET Framework とアセンブリの一部です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1838">It then calls the `TestIsFullyTrusted` method to display the property value for the application domain and for two assemblies that are loaded into the application domain: mscorlib, which is part of the .NET Framework, and the example assembly.</span></span> <span data-ttu-id="62a35-1839">両方のアセンブリが完全に信頼されたために、アプリケーション ドメインが完全に信頼されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1839">The application domain is fully trusted, so both assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="62a35-1840">例では、作成別`Worker`サンド ボックス アプリケーション ドメインと、もう一度呼び出し内のオブジェクト、`TestIsFullyTrusted`メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1840">The example creates another `Worker` object in a sandboxed application domain and again calls the `TestIsFullyTrusted` method.</span></span> <span data-ttu-id="62a35-1841">Mscorlib は、部分的に信頼されたアプリケーション ドメインであっても常に、信頼できるが、アセンブリが部分的に信頼されました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1841">Mscorlib is always trusted, even in a partially trusted application domain, but the example assembly is partially trusted.</span></span>  
  
 [!code-csharp[System.AppDomain.IsFullyTrusted#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.isfullytrusted/cs/example.cs#1)]
 [!code-vb[System.AppDomain.IsFullyTrusted#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.isfullytrusted/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHomogenous">
      <MemberSignature Language="C#" Value="public bool IsHomogenous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHomogenous" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.IsHomogenous" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHomogenous As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHomogenous { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHomogenous : bool" Usage="System.AppDomain.IsHomogenous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-1842">アプリケーション ドメインに読み込まれたすべてのアセンブリに付与されるアクセス許可セットが、現在のアプリケーション ドメインに存在するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1842">Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</span></span></summary>
        <value><span data-ttu-id="62a35-1843">一貫して付与されるアクセス許可セットが現在のアプリケーション ドメインに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-1843"><see langword="true" /> if the current application domain has a homogenous set of permissions; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1844">このプロパティを返します`true`サンド ボックス アプリケーション ドメインを使用して作成された、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1844">This property returns `true` for sandboxed application domains that were created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="62a35-1845">サンド ボックス アプリケーション ドメインがある同種一連のアクセス許可。つまり、同じ一連の権限は、アプリケーション ドメインに読み込まれるすべての部分的に信頼されたアセンブリに与えられます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1845">Sandboxed application domains have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</span></span> <span data-ttu-id="62a35-1846">必要に応じて、サンド ボックス アプリケーション ドメインには、この権限を設定して、代わりに完全な信頼で実行から除外される厳密な名前のアセンブリの一覧があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1846">A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</span></span>  
  
 <span data-ttu-id="62a35-1847">完全信頼コードで使用できる、<xref:System.AppDomain.PermissionSet%2A>サンド ボックス アプリケーション ドメインの同種の許可セットを決定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1847">Fully trusted code can use the <xref:System.AppDomain.PermissionSet%2A> property to determine the homogenous grant set of a sandboxed application domain.</span></span>  
  
 <span data-ttu-id="62a35-1848">このプロパティも返します`true`デスクトップ アプリケーションでの既定のアプリケーション ドメインのため、そのアプリケーション ドメインは、すべてのアセンブリに完全な信頼を付与します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1848">This property also returns `true` for the default application domain of a desktop application, because that application domain grants full trust to all assemblies.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.AppDomain.PermissionSet" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-1849">現在のアプリケーション ドメインに <see cref="T:System.Reflection.Assembly" /> を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1849">Loads an <see cref="T:System.Reflection.Assembly" /> into this application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly);" />
      <MemberSignature Language="F#" Value="abstract member Load : byte[] -&gt; System.Reflection.Assembly&#xA;override this.Load : byte[] -&gt; System.Reflection.Assembly" Usage="appDomain.Load rawAssembly" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="62a35-1850">生成されたアセンブリを含む COFF ベースのイメージである <see langword="byte" /> 型配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-1850">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1851">生成された <see cref="T:System.Reflection.Assembly" /> を含む COFF (Common Object File Format) ベースのイメージを使用して、<see cref="T:System.Reflection.Assembly" /> を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1851">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span></summary>
        <returns><span data-ttu-id="62a35-1852">読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1852">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1853">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このメソッドを使用して読み込まれるアセンブリの信頼レベルは、アプリケーション ドメインの信頼レベルと同じです。</span><span class="sxs-lookup"><span data-stu-id="62a35-1853">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="62a35-1854">このメソッドは、現在のアプリケーション ドメインにアセンブリを読み込む場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1854">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="62a35-1855">このメソッドが静的なを呼び出すことができない相互運用性の呼び出し元に、便宜上指定<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1855">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62a35-1856">他のアプリケーション ドメインにアセンブリを読み込む場合などメソッドを使用して<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1856">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="62a35-1857">このメソッドのすべてのオーバー ロードする一般的な情報については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1857">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1858">次の例では、生のアセンブリの読み込みの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1858">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="62a35-1859">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1859">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1860">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1860">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1861"><paramref name="rawAssembly" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1861"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1862"><paramref name="rawAssembly" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1862"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1863">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1863">-or-</span></span> 
<span data-ttu-id="62a35-1864">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="rawAssembly" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1864">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1865">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1865">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1866">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1866">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1867">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1867">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1868">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1868">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyRef As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly&#xA;override this.Load : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="appDomain.Load assemblyRef" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Reflection.AssemblyName)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyRef"><span data-ttu-id="62a35-1869">読み込むアセンブリについて記述しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1869">An object that describes the assembly to load.</span></span></param>
        <summary><span data-ttu-id="62a35-1870"><see cref="T:System.Reflection.AssemblyName" /> を指定して、<see cref="T:System.Reflection.Assembly" /> を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1870">Loads an <see cref="T:System.Reflection.Assembly" /> given its <see cref="T:System.Reflection.AssemblyName" />.</span></span></summary>
        <returns><span data-ttu-id="62a35-1871">読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1871">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1872">このメソッドは、現在のアプリケーション ドメインにアセンブリを読み込む場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1872">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="62a35-1873">このメソッドが静的なを呼び出すことができない相互運用性の呼び出し元に、便宜上指定<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1873">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62a35-1874">他のアプリケーション ドメインにアセンブリを読み込む場合などメソッドを使用して<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1874">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="62a35-1875">要求されたアセンブリのバージョンが既に読み込まれている場合、このメソッドは、別のバージョンが要求された場合でも、読み込まれたアセンブリを返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1875">If a version of the requested assembly is already loaded, this method returns the loaded assembly, even if a different version is requested.</span></span>  
  
 <span data-ttu-id="62a35-1876">部分的なアセンブリ名を指定して`assemblyRef`はお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1876">Supplying a partial assembly name for `assemblyRef` is not recommended.</span></span> <span data-ttu-id="62a35-1877">(部分的な名前は、1 つまたは複数のカルチャ、バージョン、または公開キー トークンを省略します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1877">(A partial name omits one or more of culture, version, or public key token.</span></span> <span data-ttu-id="62a35-1878">代わりに文字列を受け取るオーバー ロードの場合、<xref:System.Reflection.AssemblyName>オブジェクト、"MyAssembly, バージョン 1.0.0.0 を ="部分的な名前の例を示しますと"MyAssembly, バージョン 1.0.0.0、カルチャを = = neutral, PublicKeyToken = 18ab3442da84b47"完全な名前の例を示します)。パフォーマンスに悪影響を及ぼすが部分的な名前を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1878">For overloads that take a string instead of an <xref:System.Reflection.AssemblyName> object, "MyAssembly, Version=1.0.0.0" is an example of a partial name and "MyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18ab3442da84b47" is an example of a full name.) Using partial names has a negative effect on performance.</span></span> <span data-ttu-id="62a35-1879">さらに、部分的なアセンブリ名はアセンブリを読み込むグローバル アセンブリ キャッシュからアプリケーション ベース ディレクトリ内のアセンブリの正確なコピーがある場合にのみ (<xref:System.AppDomain.BaseDirectory%2A>または<xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="62a35-1879">In addition, a partial assembly name can load an assembly from the global assembly cache only if there is an exact copy of the assembly in the application base directory (<xref:System.AppDomain.BaseDirectory%2A> or <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="62a35-1880">場合、現在<xref:System.AppDomain>オブジェクトは、アプリケーション ドメインを表す`A`、および<xref:System.AppDomain.Load%2A>メソッドの呼び出し元のアプリケーション ドメイン`B`アセンブリは両方のアプリケーション ドメインに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1880">If the current <xref:System.AppDomain> object represents application domain `A`, and the <xref:System.AppDomain.Load%2A> method is called from application domain `B`, the assembly is loaded into both application domains.</span></span> <span data-ttu-id="62a35-1881">たとえば、次のコードの読み込み`MyAssembly`新しいアプリケーション ドメインに`ChildDomain`とコードが実行されるアプリケーション ドメインにもします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1881">For example, the following code loads `MyAssembly` into the new application domain `ChildDomain` and also into the application domain where the code executes:</span></span>  
  
 [!code-cpp[System.AppDomain.Load#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.appdomain.load/cpp/source.cpp#1)]
 [!code-csharp[System.AppDomain.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.load/cs/source.cs#1)]
 [!code-vb[System.AppDomain.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.load/vb/source.vb#1)]  
  
 <span data-ttu-id="62a35-1882">両方のドメインにアセンブリが読み込まれる<xref:System.Reflection.Assembly>から派生していない<xref:System.MarshalByRefObject>、および戻り値のため、<xref:System.AppDomain.Load%2A>メソッドをマーシャ リングすることはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1882">The assembly is loaded into both domains because <xref:System.Reflection.Assembly> does not derive from <xref:System.MarshalByRefObject>, and therefore the return value of the <xref:System.AppDomain.Load%2A> method cannot be marshaled.</span></span> <span data-ttu-id="62a35-1883">代わりに、共通言語ランタイムは、呼び出し元のアプリケーション ドメインにアセンブリの読み込みを試みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1883">Instead, the common language runtime tries to load the assembly into the calling application domain.</span></span> <span data-ttu-id="62a35-1884">2 つのアプリケーション ドメインに読み込まれるアセンブリは、2 つのアプリケーション ドメインのパスの設定が異なる場合は異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1884">The assemblies that are loaded into the two application domains might be different if the path settings for the two application domains are different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-1885">両方の場合、<xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType>プロパティと<xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType>プロパティが設定されて、アセンブリを読み込むには、最初の試行は、表示名を使用 (によって返されるバージョン、カルチャ、およびなどを含む、<xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>プロパティ)。</span><span class="sxs-lookup"><span data-stu-id="62a35-1885">If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property).</span></span> <span data-ttu-id="62a35-1886">ファイルが見つからない場合、<xref:System.Reflection.AssemblyName.CodeBase%2A>プロパティを使用して、アセンブリを検索します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1886">If the file is not found, the <xref:System.Reflection.AssemblyName.CodeBase%2A> property is used to search for the assembly.</span></span> <span data-ttu-id="62a35-1887">使用して、アセンブリが見つかった場合<xref:System.Reflection.AssemblyName.CodeBase%2A>表示名のアセンブリが照合されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1887">If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly.</span></span> <span data-ttu-id="62a35-1888">一致が見つからない場合、<xref:System.IO.FileLoadException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1888">If the match fails, a <xref:System.IO.FileLoadException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1889"><paramref name="assemblyRef" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1889"><paramref name="assemblyRef" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1890"><paramref name="assemblyRef" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1890"><paramref name="assemblyRef" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1891"><paramref name="assemblyRef" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1891"><paramref name="assemblyRef" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1892">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1892">-or-</span></span> 
<span data-ttu-id="62a35-1893">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyRef" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1893">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1894">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1894">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1895">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1895">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1896">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1896">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1897">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1897">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (string assemblyString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(string assemblyString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyString As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::String ^ assemblyString);" />
      <MemberSignature Language="F#" Value="abstract member Load : string -&gt; System.Reflection.Assembly&#xA;override this.Load : string -&gt; System.Reflection.Assembly" Usage="appDomain.Load assemblyString" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="62a35-1898">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-1898">The display name of the assembly.</span></span> <span data-ttu-id="62a35-1899">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-1899">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <summary><span data-ttu-id="62a35-1900">表示名を指定して <see cref="T:System.Reflection.Assembly" /> を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1900">Loads an <see cref="T:System.Reflection.Assembly" /> given its display name.</span></span></summary>
        <returns><span data-ttu-id="62a35-1901">読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1901">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1902">このメソッドは、現在のアプリケーション ドメインにアセンブリを読み込む場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1902">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="62a35-1903">このメソッドが静的なを呼び出すことができない相互運用性の呼び出し元に、便宜上指定<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1903">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62a35-1904">他のアプリケーション ドメインにアセンブリを読み込む場合などメソッドを使用して<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1904">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="62a35-1905">このメソッドのすべてのオーバー ロードする一般的な情報については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1905">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1906"><paramref name="assemblyString" /> は <see langword="null" /> です</span><span class="sxs-lookup"><span data-stu-id="62a35-1906"><paramref name="assemblyString" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1907"><paramref name="assemblyString" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1907"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1908"><paramref name="assemblyString" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1908"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1909">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1909">-or-</span></span> 
<span data-ttu-id="62a35-1910">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyString" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1910">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1911">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1911">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1912">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1912">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1913">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1913">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1914">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1914">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1915">アセンブリがローカルでない場合、アセンブリの場所にアクセスする機能。</span><span class="sxs-lookup"><span data-stu-id="62a35-1915">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte(), rawSymbolStore As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore);" />
      <MemberSignature Language="F#" Value="abstract member Load : byte[] * byte[] -&gt; System.Reflection.Assembly&#xA;override this.Load : byte[] * byte[] -&gt; System.Reflection.Assembly" Usage="appDomain.Load (rawAssembly, rawSymbolStore)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[],System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="62a35-1916">生成されたアセンブリを含む COFF ベースのイメージである <see langword="byte" /> 型配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-1916">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="62a35-1917">アセンブリのシンボルを表す生バイトを格納している <see langword="byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-1917">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1918">生成された <see cref="T:System.Reflection.Assembly" /> を含む COFF (Common Object File Format) ベースのイメージを使用して、<see cref="T:System.Reflection.Assembly" /> を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1918">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span> <span data-ttu-id="62a35-1919"><see cref="T:System.Reflection.Assembly" /> のシンボルを表す生バイトも読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1919">The raw bytes representing the symbols for the <see cref="T:System.Reflection.Assembly" /> are also loaded.</span></span></summary>
        <returns><span data-ttu-id="62a35-1920">読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1920">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1921">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このメソッドを使用して読み込まれるアセンブリの信頼レベルは、アプリケーション ドメインの信頼レベルと同じです。</span><span class="sxs-lookup"><span data-stu-id="62a35-1921">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="62a35-1922">このメソッドは、現在のアプリケーション ドメインにアセンブリを読み込む場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1922">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="62a35-1923">このメソッドが静的なを呼び出すことができない相互運用性の呼び出し元に、便宜上指定<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1923">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62a35-1924">他のアプリケーション ドメインにアセンブリを読み込む場合などメソッドを使用して<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1924">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="62a35-1925">このメソッドのすべてのオーバー ロードする一般的な情報については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1925">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1926">次の例では、生のアセンブリの読み込みの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1926">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="62a35-1927">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1927">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1928">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1928">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1929"><paramref name="rawAssembly" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1929"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1930"><paramref name="rawAssembly" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1930"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1931">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1931">-or-</span></span> 
<span data-ttu-id="62a35-1932">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="rawAssembly" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1932">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1933">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1933">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1934">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1934">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1935">file:// で始まらないする URI を読み取る。</span><span class="sxs-lookup"><span data-stu-id="62a35-1935">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1936">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1936">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1937">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1937">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyRef As AssemblyName, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Reflection.AssemblyName * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly&#xA;override this.Load : System.Reflection.AssemblyName * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="appDomain.Load (assemblyRef, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyRef"><span data-ttu-id="62a35-1938">読み込むアセンブリについて記述しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-1938">An object that describes the assembly to load.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="62a35-1939">アセンブリを読み込むために必要な証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1939">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1940"><see cref="T:System.Reflection.AssemblyName" /> を指定して、<see cref="T:System.Reflection.Assembly" /> を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1940">Loads an <see cref="T:System.Reflection.Assembly" /> given its <see cref="T:System.Reflection.AssemblyName" />.</span></span></summary>
        <returns><span data-ttu-id="62a35-1941">読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1941">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1942">このメソッドは、現在のアプリケーション ドメインにアセンブリを読み込む場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1942">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="62a35-1943">このメソッドが静的なを呼び出すことができない相互運用性の呼び出し元に、便宜上指定<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1943">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62a35-1944">他のアプリケーション ドメインにアセンブリを読み込む場合などメソッドを使用して<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1944">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="62a35-1945">このメソッドのすべてのオーバー ロードする一般的な情報については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1945">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1946"><paramref name="assemblyRef" /> は <see langword="null" /> です</span><span class="sxs-lookup"><span data-stu-id="62a35-1946"><paramref name="assemblyRef" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1947"><paramref name="assemblyRef" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1947"><paramref name="assemblyRef" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1948"><paramref name="assemblyRef" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1948"><paramref name="assemblyRef" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1949">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1949">-or-</span></span> 
<span data-ttu-id="62a35-1950">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyRef" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1950">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1951">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1951">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1952">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1952">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1953">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1953">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1954">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1954">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1955">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1955">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1956"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1956">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1957">file:// フォームではないパスを読み取るため、または"\\\UNC\dir\\"または"c:\\"。</span><span class="sxs-lookup"><span data-stu-id="62a35-1957">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(string assemblyString, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyString As String, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::String ^ assemblyString, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="abstract member Load : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly&#xA;override this.Load : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="appDomain.Load (assemblyString, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="62a35-1958">アセンブリの表示名。</span><span class="sxs-lookup"><span data-stu-id="62a35-1958">The display name of the assembly.</span></span> <span data-ttu-id="62a35-1959">以下を参照してください。<see cref="P:System.Reflection.Assembly.FullName" /></span><span class="sxs-lookup"><span data-stu-id="62a35-1959">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="62a35-1960">アセンブリを読み込むために必要な証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1960">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1961">表示名を指定して <see cref="T:System.Reflection.Assembly" /> を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1961">Loads an <see cref="T:System.Reflection.Assembly" /> given its display name.</span></span></summary>
        <returns><span data-ttu-id="62a35-1962">読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1962">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1963">このメソッドは、現在のアプリケーション ドメインにアセンブリを読み込む場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1963">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="62a35-1964">このメソッドが静的なを呼び出すことができない相互運用性の呼び出し元に、便宜上指定<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1964">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62a35-1965">他のアプリケーション ドメインにアセンブリを読み込む場合などメソッドを使用して<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1965">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="62a35-1966">このメソッドのすべてのオーバー ロードする一般的な情報については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1966">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1967"><paramref name="assemblyString" /> は <see langword="null" /> です</span><span class="sxs-lookup"><span data-stu-id="62a35-1967"><paramref name="assemblyString" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="62a35-1968"><paramref name="assemblyString" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1968"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1969"><paramref name="assemblyString" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1969"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1970">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1970">-or-</span></span> 
<span data-ttu-id="62a35-1971">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="assemblyString" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1971">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1972">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1972">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1973">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1973">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-1974">証拠とアセンブリの読み込み。</span><span class="sxs-lookup"><span data-stu-id="62a35-1974">to load an assembly with evidence.</span></span> <span data-ttu-id="62a35-1975"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-1975">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-1976">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1976">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-1977">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1977">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-1978">file:// フォームではないパスを読み取るため、または"\\\UNC\dir\\"または"c:\\"。</span><span class="sxs-lookup"><span data-stu-id="62a35-1978">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte(), rawSymbolStore As Byte(), securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="abstract member Load : byte[] * byte[] * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly&#xA;override this.Load : byte[] * byte[] * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="appDomain.Load (rawAssembly, rawSymbolStore, securityEvidence)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkId=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="62a35-1979">生成されたアセンブリを含む COFF ベースのイメージである <see langword="byte" /> 型配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-1979">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="62a35-1980">アセンブリのシンボルを表す生バイトを格納している <see langword="byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-1980">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</span></span></param>
        <param name="securityEvidence"><span data-ttu-id="62a35-1981">アセンブリを読み込むために必要な証拠。</span><span class="sxs-lookup"><span data-stu-id="62a35-1981">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="62a35-1982">生成された <see cref="T:System.Reflection.Assembly" /> を含む COFF (Common Object File Format) ベースのイメージを使用して、<see cref="T:System.Reflection.Assembly" /> を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1982">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span> <span data-ttu-id="62a35-1983"><see cref="T:System.Reflection.Assembly" /> のシンボルを表す生バイトも読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-1983">The raw bytes representing the symbols for the <see cref="T:System.Reflection.Assembly" /> are also loaded.</span></span></summary>
        <returns><span data-ttu-id="62a35-1984">読み込まれるアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="62a35-1984">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-1985">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このメソッドを使用して読み込まれるアセンブリの信頼レベルは、アプリケーション ドメインの信頼レベルと同じです。</span><span class="sxs-lookup"><span data-stu-id="62a35-1985">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="62a35-1986">このメソッドは、現在のアプリケーション ドメインにアセンブリを読み込む場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1986">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="62a35-1987">このメソッドが静的なを呼び出すことができない相互運用性の呼び出し元に、便宜上指定<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-1987">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="62a35-1988">他のアプリケーション ドメインにアセンブリを読み込む場合などメソッドを使用して<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1988">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="62a35-1989">このメソッドのすべてのオーバー ロードする一般的な情報については、次を参照してください。、<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1989">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-1990">次の例では、生のアセンブリの読み込みの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1990">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="62a35-1991">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-1991">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-1992">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-1992">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-1993"><paramref name="rawAssembly" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-1993"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="62a35-1994"><paramref name="rawAssembly" /> は正しいアセンブリではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1994"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="62a35-1995">または</span><span class="sxs-lookup"><span data-stu-id="62a35-1995">-or-</span></span> 
<span data-ttu-id="62a35-1996">共通言語ランタイムのバージョン 2.0 以降が現在読み込まれています。<paramref name="rawAssembly" /> は、より新しいバージョンでコンパイルされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-1996">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-1997">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-1997">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="62a35-1998">アセンブリまたはモジュールが、2 つの異なる証拠を使用して 2 回読み込まれました。</span><span class="sxs-lookup"><span data-stu-id="62a35-1998">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="62a35-1999"><paramref name="securityEvidence" /> が <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-1999"><paramref name="securityEvidence" /> is not <see langword="null" />.</span></span> <span data-ttu-id="62a35-2000">レガシ CAS ポリシーが有効でない場合は、<paramref name="securityEvidence" /> を <see langword="null" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2000">When legacy CAS policy is not enabled, <paramref name="securityEvidence" /> should be <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-2001">証拠を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2001">to provide evidence.</span></span> <span data-ttu-id="62a35-2002"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-2002">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span> <span data-ttu-id="62a35-2003">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.Demand" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2003">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-2004">ファイルまたはディレクトリからと、パス自体の情報にアクセスするための読み取りにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2004">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="62a35-2005">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2005">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="62a35-2006">file:// フォームではないパスを読み取るため、または"\\\UNC\dir\\"または"c:\\"。</span><span class="sxs-lookup"><span data-stu-id="62a35-2006">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MonitoringIsEnabled">
      <MemberSignature Language="C#" Value="public static bool MonitoringIsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool MonitoringIsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringIsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property MonitoringIsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool MonitoringIsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringIsEnabled : bool with get, set" Usage="System.AppDomain.MonitoringIsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2007">現在のプロセスに対して、アプリケーション ドメインの CPU およびメモリの監視が有効になっているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2007">Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process.</span></span> <span data-ttu-id="62a35-2008">プロセスに対して一度有効にした監視を無効にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2008">Once monitoring is enabled for a process, it cannot be disabled.</span></span></summary>
        <value><span data-ttu-id="62a35-2009">監視が有効になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-2009"><see langword="true" /> if monitoring is enabled; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2010">これは、`static`プロパティ (`Shared`プロパティ Visual Basic) CPU とメモリがプロセス内のすべてのアプリケーション ドメインの監視を制御します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2010">This `static` property (`Shared` property in Visual Basic) controls CPU and memory monitoring of all the application domains in the process.</span></span>  
  
 <span data-ttu-id="62a35-2011">このプロパティを設定しようとした場合`false`、<xref:System.ArgumentException>例外がスローされた場合でも、プロパティの現在の値が`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2011">If you attempt to set this property to `false`, a <xref:System.ArgumentException> exception is thrown, even if the current value of the property is `false`.</span></span>  
  
 <span data-ttu-id="62a35-2012">使用することができますの監視を有効にすると、 <xref:System.AppDomain.MonitoringSurvivedMemorySize%2A>、 <xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A>、<xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A>と<xref:System.AppDomain.MonitoringTotalProcessorTime%2A>インスタンスのプロパティの個々 のアプリケーション ドメインの CPU とメモリの使用状況を監視します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2012">Once monitoring is enabled, you can use the <xref:System.AppDomain.MonitoringSurvivedMemorySize%2A>, <xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A>, <xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A>, and <xref:System.AppDomain.MonitoringTotalProcessorTime%2A> instance properties to monitor CPU and memory use of individual application domains.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a35-2013">現在のプロセスがこのプロパティに値 <see langword="false" /> を代入しようとしました。</span><span class="sxs-lookup"><span data-stu-id="62a35-2013">The current process attempted to assign the value <see langword="false" /> to this property.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2014">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2014">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2015">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2015">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="62a35-2016">アプリケーション ドメインのリソース監視</span><span class="sxs-lookup"><span data-stu-id="62a35-2016">Application Domain Resource Monitoring</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/02119ab6-1e91-448e-97ad-e7b2e5c4bbbd"><span data-ttu-id="62a35-2017">&lt;appdomainResourceMonitoring&gt;要素</span><span class="sxs-lookup"><span data-stu-id="62a35-2017">&lt;appdomainResourceMonitoring&gt; Element</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MonitoringSurvivedMemorySize">
      <MemberSignature Language="C#" Value="public long MonitoringSurvivedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MonitoringSurvivedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringSurvivedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringSurvivedMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MonitoringSurvivedMemorySize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringSurvivedMemorySize : int64" Usage="System.AppDomain.MonitoringSurvivedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2018">最後のコレクションの実行後に残された、現在のアプリケーション ドメインによって参照されていることが判明しているバイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2018">Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</span></span></summary>
        <value><span data-ttu-id="62a35-2019">残っているバイト数。</span><span class="sxs-lookup"><span data-stu-id="62a35-2019">The number of surviving bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2020">統計情報は、各ガベージ コレクションが更新されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2020">The statistics are updated with each garbage collection.</span></span> <span data-ttu-id="62a35-2021">ただし、完全なブロッキング コレクションの後にのみ正確である保証は、つまり、コレクションの中に、アプリケーションが停止するを含むすべてのジェネレーションのコレクションが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2021">However, they are guaranteed to be accurate only after a full, blocking collection; that is, a collection that includes all generations and that stops the application while collection occurs.</span></span> <span data-ttu-id="62a35-2022">たとえば、<xref:System.GC.Collect?displayProperty=nameWithType>メソッドのオーバー ロードは、完全なブロッキング コレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2022">For example, the <xref:System.GC.Collect?displayProperty=nameWithType> method overload performs a full, blocking collection.</span></span> <span data-ttu-id="62a35-2023">(同時実行コレクションはバック グラウンドで発生して、アプリケーションはブロックされません)。</span><span class="sxs-lookup"><span data-stu-id="62a35-2023">(Concurrent collection occurs in the background and does not block the application.)</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a35-2024"><see langword="static" /> (Visual Basic では <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> プロパティが <see langword="false" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2024">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2025">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2025">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2026">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2026">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="62a35-2027">アプリケーション ドメインのリソース監視</span><span class="sxs-lookup"><span data-stu-id="62a35-2027">Application Domain Resource Monitoring</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MonitoringSurvivedProcessMemorySize">
      <MemberSignature Language="C#" Value="public static long MonitoringSurvivedProcessMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 MonitoringSurvivedProcessMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringSurvivedProcessMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MonitoringSurvivedProcessMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long MonitoringSurvivedProcessMemorySize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringSurvivedProcessMemorySize : int64" Usage="System.AppDomain.MonitoringSurvivedProcessMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2028">最後のコレクションの実行後に残された、プロセス内のすべてのアプリケーション ドメインにおける合計バイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2028">Gets the total bytes that survived from the last collection for all application domains in the process.</span></span></summary>
        <value><span data-ttu-id="62a35-2029">プロセスに残っている合計バイト数。</span><span class="sxs-lookup"><span data-stu-id="62a35-2029">The total number of surviving bytes for the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2030">完全なブロッキング コレクションの後にこの番号を表すバイトの数は現在上でライブで保持マネージ ヒープを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2030">After a full, blocking collection, this number represents the number of bytes currently held live on managed heaps.</span></span> <span data-ttu-id="62a35-2031">によって報告される数に近いことが、<xref:System.GC.GetTotalMemory%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2031">It should be close to the number reported by the <xref:System.GC.GetTotalMemory%2A> method.</span></span> <span data-ttu-id="62a35-2032">短期コレクションの後にこの番号を表すバイト数の現在保持されている短期のジェネレーションにライブします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2032">After an ephemeral collection, this number represents the number of bytes currently held live in ephemeral generations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a35-2033"><see langword="static" /> (Visual Basic では <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> プロパティが <see langword="false" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2033">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2034">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2034">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2035">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2035">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="62a35-2036">アプリケーション ドメインのリソース監視</span><span class="sxs-lookup"><span data-stu-id="62a35-2036">Application Domain Resource Monitoring</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MonitoringTotalAllocatedMemorySize">
      <MemberSignature Language="C#" Value="public long MonitoringTotalAllocatedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MonitoringTotalAllocatedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringTotalAllocatedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringTotalAllocatedMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MonitoringTotalAllocatedMemorySize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringTotalAllocatedMemorySize : int64" Usage="System.AppDomain.MonitoringTotalAllocatedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2037">アプリケーション ドメインが作成されてから、そのアプリケーション ドメインで実行されたすべてのメモリ割り当ての合計サイズをバイト単位で取得します。収集されたメモリは差し引かれません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2037">Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</span></span></summary>
        <value><span data-ttu-id="62a35-2038">すべてのメモリ割り当ての合計サイズ。</span><span class="sxs-lookup"><span data-stu-id="62a35-2038">The total size of all memory allocations.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a35-2039"><see langword="static" /> (Visual Basic では <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> プロパティが <see langword="false" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2039">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2040">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2040">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2041">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2041">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="62a35-2042">アプリケーション ドメインのリソース監視</span><span class="sxs-lookup"><span data-stu-id="62a35-2042">Application Domain Resource Monitoring</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MonitoringTotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan MonitoringTotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MonitoringTotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringTotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringTotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MonitoringTotalProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringTotalProcessorTime : TimeSpan" Usage="System.AppDomain.MonitoringTotalProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2043">プロセスが開始されてから、現在のアプリケーション ドメインでの実行中にすべてのスレッドで使用された合計プロセッサ時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2043">Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</span></span></summary>
        <value><span data-ttu-id="62a35-2044">現在のアプリケーション ドメインの合計プロセッサ時間。</span><span class="sxs-lookup"><span data-stu-id="62a35-2044">Total processor time for the current application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2045">アプリケーション ドメインの報告される合計時間には、プロセス内の各スレッドは、そのアプリケーション ドメインで実行に費やされた時間が含まれます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2045">The total time that is reported for an application domain includes the time each thread in the process spent executing in that application domain.</span></span>  
  
 <span data-ttu-id="62a35-2046">アンマネージ コードを呼び出すスレッドは、アプリケーション ドメインに関連付けられたままとアンマネージ コードは、呼び出しが行われたアプリケーション ドメインの報告の実行にかかったプロセッサ時間です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2046">A thread that calls into unmanaged code is still associated with an application domain, and the processor time spent executing the unmanaged code is reported for the application domain where the call was made.</span></span>  
  
 <span data-ttu-id="62a35-2047">ときにスレッドがブロックされているかがスリープ状態を使用せずプロセッサ時間。</span><span class="sxs-lookup"><span data-stu-id="62a35-2047">When a thread is blocked or sleeping, it does not consume processor time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a35-2048"><see langword="static" /> (Visual Basic では <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> プロパティが <see langword="false" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2048">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2049">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2049">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2050">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2050">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="62a35-2051">アプリケーション ドメインのリソース監視</span><span class="sxs-lookup"><span data-stu-id="62a35-2051">Application Domain Resource Monitoring</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PermissionSet">
      <MemberSignature Language="C#" Value="public System.Security.PermissionSet PermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet PermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.PermissionSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::PermissionSet ^ PermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PermissionSet : System.Security.PermissionSet" Usage="System.AppDomain.PermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2052">サンドボックス化されたアプリケーション ドメインのアクセス許可セットを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2052">Gets the permission set of a sandboxed application domain.</span></span></summary>
        <value><span data-ttu-id="62a35-2053">サンドボックス化されたアプリケーション ドメインのアクセス許可セット。</span><span class="sxs-lookup"><span data-stu-id="62a35-2053">The permission set of the sandboxed application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2054">サンド ボックス アプリケーション ドメインを使用して作成された、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>メソッドのオーバー ロードがある、権限のセットを同種; は、同じ一連の権限がアプリケーション ドメインに読み込まれるすべての部分的に信頼されたアセンブリに付与されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2054">Sandboxed application domains that were created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</span></span> <span data-ttu-id="62a35-2055">必要に応じて、サンド ボックス アプリケーション ドメインには、この権限を設定して、代わりに完全な信頼で実行から除外される厳密な名前のアセンブリの一覧があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2055">A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2056">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2056">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2057">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2057">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomain.IsHomogenous" />
      </Docs>
    </Member>
    <Member MemberName="ProcessExit">
      <MemberSignature Language="C#" Value="public event EventHandler ProcessExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ProcessExit" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ProcessExit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProcessExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ProcessExit;" />
      <MemberSignature Language="F#" Value="member this.ProcessExit : EventHandler " Usage="member this.ProcessExit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.ProcessExit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2058">既定のアプリケーション ドメインの親プロセスが終了した場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2058">Occurs when the default application domain's parent process exits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2059"><xref:System.EventHandler>このイベントは、ファイルを閉じるなどの終了活動を実行できるの解放ストレージで、プロセスが終了する前にします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2059">The <xref:System.EventHandler> for this event can perform termination activities, such as closing files, releasing storage and so on, before the process ends.</span></span>  
  
 <span data-ttu-id="62a35-2060">以降、.NET Framework version 2.0 では、このイベントはイベント ハンドラーを登録する各アプリケーション ドメインで発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2060">Beginning with the .NET Framework version 2.0, this event is raised in each application domain that registers an event handler.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-2061">.NET framework のすべての合計実行時間<xref:System.AppDomain.ProcessExit>すべてのファイナライザーの合計実行時間がプロセスのシャット ダウンの制限と同様、イベント ハンドラーが限られています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2061">In .NET Framework, the total execution time of all <xref:System.AppDomain.ProcessExit> event handlers is limited, just as the total execution time of all finalizers is limited at process shutdown.</span></span> <span data-ttu-id="62a35-2062">既定では 2 秒です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2062">The default is two seconds.</span></span> <span data-ttu-id="62a35-2063">アンマネージ ホストは呼び出すことでこの実行時間を変更することができます、 [iclrpolicymanager::settimeout](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-settimeout-method.md)メソッドを[OPR_ProcessExit](~/docs/framework/unmanaged-api/hosting/eclroperation-enumeration.md)列挙値。</span><span class="sxs-lookup"><span data-stu-id="62a35-2063">An unmanaged host can change this execution time by calling the [ICLRPolicyManager::SetTimeout](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-settimeout-method.md) method with the [OPR_ProcessExit](~/docs/framework/unmanaged-api/hosting/eclroperation-enumeration.md) enumeration value.</span></span> <span data-ttu-id="62a35-2064">この制限時間は .NET Core ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2064">This time limit does not exist in .NET Core.</span></span>  
  
 <span data-ttu-id="62a35-2065">.NET Framework バージョン 1.0 および 1.1 では、このイベントは、既定のアプリケーション ドメインでのみ発生し、イベント ハンドラーが既定のアプリケーション ドメインに登録されている場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="62a35-2065">In the .NET Framework versions 1.0 and 1.1, this event is raised only in the default application domain, and only if an event handler is registered in the default application domain.</span></span>  
  
 <span data-ttu-id="62a35-2066">このイベントのイベント ハンドラーを登録するには、必要なアクセス許可が必要または<xref:System.Security.SecurityException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2066">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="62a35-2067">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2067">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyAssemblyResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler ReflectionOnlyAssemblyResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler ReflectionOnlyAssemblyResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ReflectionOnlyAssemblyResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ReflectionOnlyAssemblyResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event ResolveEventHandler ^ ReflectionOnlyAssemblyResolve;" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnlyAssemblyResolve : ResolveEventHandler " Usage="member this.ReflectionOnlyAssemblyResolve : System.ResolveEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2068">リフレクション専用のコンテキストでアセンブリの解決に失敗した場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2068">Occurs when the resolution of an assembly fails in the reflection-only context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2069">リフレクションのみのコンテキストでの依存関係は自動的に解決されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2069">In the reflection-only context, dependencies are not resolved automatically.</span></span> <span data-ttu-id="62a35-2070">これらは、プリロードする必要があります。 またはこのイベントのハンドラーによって返されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2070">They must be preloaded or returned by the handler for this event.</span></span> <span data-ttu-id="62a35-2071">アセンブリがリフレクションのみのコンテキストに既に読み込まれていない依存関係を持つ場合は、このイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2071">This event is raised when an assembly has a dependency that is not already loaded into the reflection-only context.</span></span> <span data-ttu-id="62a35-2072">依存関係の欠落がで指定された、<xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-2072">The missing dependency is specified by the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="62a35-2073"><xref:System.ResolveEventHandler>のこのイベントは、依存関係を満たすアセンブリを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2073">The <xref:System.ResolveEventHandler> for this event must return an assembly that satisfies the dependency.</span></span> <span data-ttu-id="62a35-2074">返されるアセンブリは、リフレクション専用コンテキストに読み込まれる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2074">The assembly that is returned must be loaded into the reflection-only context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="62a35-2075">このイベントは、リフレクション専用コンテキストに読み込むアセンブリの依存関係がないに対してのみ発生します (たとえばを使用して、<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>メソッド)。</span><span class="sxs-lookup"><span data-stu-id="62a35-2075">This event is raised only for missing dependencies of the assembly that you are loading into the reflection-only context (for example, by using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> method).</span></span> <span data-ttu-id="62a35-2076">読み込むアセンブリが見つからない場合は発生しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2076">It is not raised if the assembly that you are loading cannot be found.</span></span>  
  
 <span data-ttu-id="62a35-2077">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>プロパティは、解決できなかったアセンブリの読み込みを要求したアセンブリを返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2077">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property returns the assembly that requested the assembly load that could not be resolved.</span></span> <span data-ttu-id="62a35-2078">要求元のアセンブリの id を知ることは、1 つ以上のバージョンが利用可能な場合に、依存関係の正しいバージョンを特定するのに役立ちますに可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2078">Knowing the identity of the requesting assembly might be useful in identifying the correct version of the dependency, if more than one version is available.</span></span> <span data-ttu-id="62a35-2079">詳細については、「<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2079">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="62a35-2080">このイベントで、<xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType>プロパティは、ポリシーが適用される前に、アセンブリ名を返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2080">For this event, the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property returns the assembly name before policy is applied.</span></span>  
  
 <span data-ttu-id="62a35-2081">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2081">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2082">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2082">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2083">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2083">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetAssemblies">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly[] ReflectionOnlyGetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly[] ReflectionOnlyGetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ReflectionOnlyGetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function ReflectionOnlyGetAssemblies () As Assembly()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Assembly ^&gt; ^ ReflectionOnlyGetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnlyGetAssemblies : unit -&gt; System.Reflection.Assembly[]" Usage="appDomain.ReflectionOnlyGetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-2084">アプリケーション ドメインのリフレクション専用コンテキストに読み込まれているアセンブリを返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2084">Returns the assemblies that have been loaded into the reflection-only context of the application domain.</span></span></summary>
        <returns><span data-ttu-id="62a35-2085">アプリケーション ドメインのリフレクション専用コンテキストに読み込まれているアセンブリを表す <see cref="T:System.Reflection.Assembly" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-2085">An array of <see cref="T:System.Reflection.Assembly" /> objects that represent the assemblies loaded into the reflection-only context of the application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2086">このメソッドは、リフレクション専用コンテキストに読み込まれているアセンブリを返します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2086">This method returns the assemblies that have been loaded into the reflection-only context.</span></span> <span data-ttu-id="62a35-2087">読み込まれたアセンブリの実行を取得するを使用して、<xref:System.AppDomain.GetAssemblies%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2087">To get the assemblies that have been loaded for execution, use the <xref:System.AppDomain.GetAssemblies%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2088">実行コンテキストにし、さらに、リフレクション専用コンテキストに、次のコード例は、System.dll アセンブリを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2088">The following code example loads the System.dll assembly into the execution context and then into the reflection-only context.</span></span> <span data-ttu-id="62a35-2089"><xref:System.AppDomain.GetAssemblies%2A>と<xref:System.AppDomain.ReflectionOnlyGetAssemblies%2A>メソッドを使用して、それぞれのコンテキストに読み込まれるアセンブリを表示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2089">The <xref:System.AppDomain.GetAssemblies%2A> and <xref:System.AppDomain.ReflectionOnlyGetAssemblies%2A> methods are used to display the assemblies loaded into each context.</span></span>  
  
 [!code-cpp[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/CPP/reflectiononly.cpp#1)]
 [!code-csharp[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/CS/reflectiononly.cs#1)]
 [!code-vb[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/VB/reflectiononly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2090">アンロードされたアプリケーション ドメインで操作が試行されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2090">An operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.AppDomain.GetAssemblies" />
      </Docs>
    </Member>
    <Member MemberName="RelativeSearchPath">
      <MemberSignature Language="C#" Value="public string RelativeSearchPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RelativeSearchPath" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.RelativeSearchPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelativeSearchPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RelativeSearchPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RelativeSearchPath : string" Usage="System.AppDomain.RelativeSearchPath" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.RelativeSearchPath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2091">アセンブリ リゾルバーがプライベート アセンブリを探す場所を示す、ベース ディレクトリ以下のパスを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2091">Gets the path under the base directory where the assembly resolver should probe for private assemblies.</span></span></summary>
        <value><span data-ttu-id="62a35-2092">アセンブリ リゾルバーがプライベート アセンブリを探す場所を示す、ベース ディレクトリ以下のパス。</span><span class="sxs-lookup"><span data-stu-id="62a35-2092">The path under the base directory where the assembly resolver should probe for private assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2093">プライベート アセンブリは、アプリケーションと同じディレクトリ構造にデプロイされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2093">Private assemblies are deployed in the same directory structure as the application.</span></span> <span data-ttu-id="62a35-2094">パスが指定されている場合、<xref:System.AppDomain.RelativeSearchPath%2A>プロパティが  <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>、無視されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2094">If the path specified by the <xref:System.AppDomain.RelativeSearchPath%2A> property is not under <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>, it is ignored.</span></span>  
  
 <span data-ttu-id="62a35-2095">このプロパティを使用して設定値を返します<xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2095">This property returns the value set using <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2096">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2096">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="62a35-2097">パス情報にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2097">for access to the path information.</span></span> <span data-ttu-id="62a35-2098"><see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-2098">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.PrivateBinPath" />
      </Docs>
    </Member>
    <Member MemberName="ResourceResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler ResourceResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler ResourceResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ResourceResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResourceResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ ResourceResolve;" />
      <MemberSignature Language="F#" Value="member this.ResourceResolve : ResolveEventHandler " Usage="member this.ResourceResolve : System.ResolveEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.ResourceResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2099">リソースが正しくリンクされていなかったり、アセンブリに埋め込まれているなどの理由からリソースの解決に失敗した場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2099">Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2100"><xref:System.ResolveEventHandler>のこのイベントは、リソースを含むアセンブリを検索し、返すことを試みることができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2100">The <xref:System.ResolveEventHandler> for this event can attempt to locate the assembly containing the resource and return it.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="62a35-2101">有効なリンクされたリソースのファイルが見つからなかったため、解決が失敗した場合、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2101">This event is not raised if resolution fails because no file can be found for a valid linked resource.</span></span> <span data-ttu-id="62a35-2102">イベントは、マニフェスト リソース ストリームが見つかりませんが、個別のリソース キーが見つからない場合は発生しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2102">It is raised if a manifest resource stream cannot be found, but it is not raised if an individual resource key cannot be found.</span></span>  
  
 <span data-ttu-id="62a35-2103">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>プロパティには、リソースを要求したアセンブリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2103">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property contains the assembly that requested the resource.</span></span> <span data-ttu-id="62a35-2104">詳細については、「<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2104">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="62a35-2105">このイベントのイベント ハンドラーを登録するには、必要なアクセス許可が必要または<xref:System.Security.SecurityException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2105">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="62a35-2106">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2106">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2107">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2107">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2108">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2108">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="SetAppDomainPolicy">
      <MemberSignature Language="C#" Value="public void SetAppDomainPolicy (System.Security.Policy.PolicyLevel domainPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAppDomainPolicy(class System.Security.Policy.PolicyLevel domainPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAppDomainPolicy (domainPolicy As PolicyLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAppDomainPolicy(System::Security::Policy::PolicyLevel ^ domainPolicy);" />
      <MemberSignature Language="F#" Value="member this.SetAppDomainPolicy : System.Security.Policy.PolicyLevel -&gt; unit" Usage="appDomain.SetAppDomainPolicy domainPolicy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("AppDomain policy levels are obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("AppDomain policy levels are obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainPolicy" Type="System.Security.Policy.PolicyLevel" />
      </Parameters>
      <Docs>
        <param name="domainPolicy"><span data-ttu-id="62a35-2109">セキュリティ ポリシー レベル。</span><span class="sxs-lookup"><span data-stu-id="62a35-2109">The security policy level.</span></span></param>
        <summary><span data-ttu-id="62a35-2110">アプリケーション ドメインのセキュリティ ポリシー レベルを設定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2110">Establishes the security policy level for this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2111">アセンブリに読み込まれる前に、このメソッドを呼び出す、<xref:System.AppDomain>効果がセキュリティ ポリシーの順序で。</span><span class="sxs-lookup"><span data-stu-id="62a35-2111">Call this method before an assembly is loaded into the <xref:System.AppDomain> in order for the security policy to have effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2112">次の例では、使用する方法、<xref:System.AppDomain.SetAppDomainPolicy%2A>アプリケーション ドメインのセキュリティ ポリシー レベルを設定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2112">The following example demonstrates how to use the <xref:System.AppDomain.SetAppDomainPolicy%2A> method to set the security policy level of an application domain.</span></span>  
  
 [!code-cpp[ADSetAppDomainPolicy#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADSetAppDomainPolicy/CPP/adsetappdomainpolicy.cpp#1)]
 [!code-csharp[ADSetAppDomainPolicy#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADSetAppDomainPolicy/CS/adsetappdomainpolicy.cs#1)]
 [!code-vb[ADSetAppDomainPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADSetAppDomainPolicy/VB/adsetappdomainpolicy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-2113"><paramref name="domainPolicy" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2113"><paramref name="domainPolicy" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Policy.PolicyException"><span data-ttu-id="62a35-2114">セキュリティ ポリシー レベルが既に設定されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2114">The security policy level has already been set.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2115">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2115">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2116">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2116">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2117">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2117">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCachePath">
      <MemberSignature Language="C#" Value="public void SetCachePath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCachePath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetCachePath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCachePath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetCachePath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member SetCachePath : string -&gt; unit&#xA;override this.SetCachePath : string -&gt; unit" Usage="appDomain.SetCachePath path" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetCachePath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.SetCachePath")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.SetCachePath has been deprecated. Please investigate the use of AppDomainSetup.CachePath instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="62a35-2118">シャドウ コピー先の絶対パス。</span><span class="sxs-lookup"><span data-stu-id="62a35-2118">The fully qualified path to the shadow copy location.</span></span></param>
        <summary><span data-ttu-id="62a35-2119">指定したディレクトリ パスを、アセンブリのシャドウ コピー先として設定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2119">Establishes the specified directory path as the location where assemblies are shadow copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2120">場合、キャッシュのパスは無視されます、<xref:System.AppDomainSetup.ApplicationName%2A>プロパティは設定されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2120">The cache path is ignored if the <xref:System.AppDomainSetup.ApplicationName%2A> property is not set.</span></span> <span data-ttu-id="62a35-2121"><xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2121">See the <xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="62a35-2122">シャドウ コピーの詳細については、次を参照してください。[アセンブリのシャドウ コピー](~/docs/framework/app-domains/shadow-copy-assemblies.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2122">For more information on shadow copying see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2123">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2123">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2124">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2124">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2125">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2125">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.CachePath" />
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="62a35-2126">アセンブリのシャドウ コピー</span><span class="sxs-lookup"><span data-stu-id="62a35-2126">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a35-2127">アプリケーション ドメイン プロパティに値を代入します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2127">Assigns a value to an application domain property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string name, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string name, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (name As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetData(System::String ^ name, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit&#xA;override this.SetData : string * obj -&gt; unit" Usage="appDomain.SetData (name, data)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetData(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-2128">作成または変更の対象となるユーザー定義アプリケーション ドメイン プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-2128">The name of a user-defined application domain property to create or change.</span></span></param>
        <param name="data"><span data-ttu-id="62a35-2129">プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="62a35-2129">The value of the property.</span></span></param>
        <summary><span data-ttu-id="62a35-2130">指定したアプリケーション ドメイン プロパティに、指定した値を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2130">Assigns the specified value to the specified application domain property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2131">このメソッドを使用して、エントリを挿入するのこのインスタンスのプロパティを説明する名前とデータのペアの内部キャッシュ内のエントリの値を変更または<xref:System.AppDomain>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2131">Use this method to insert an entry, or modify the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="62a35-2132">キャッシュには、アプリケーション ドメインの作成時に挿入される定義済みのシステム エントリに自動的に含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2132">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="62a35-2133">挿入または、このメソッドを使用してシステム エントリを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2133">You cannot insert or modify system entries with this method.</span></span> <span data-ttu-id="62a35-2134">システムのエントリを変更しようとするメソッドの呼び出しには効果がありません。メソッドは例外をスローしていません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2134">A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</span></span> <span data-ttu-id="62a35-2135">システム エントリの値を検査することができます、<xref:System.AppDomain.GetData%2A>メソッド、または同等<xref:System.AppDomainSetup>プロパティの説明<xref:System.AppDomain.GetData%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2135">You can inspect the values of system entries with the <xref:System.AppDomain.GetData%2A> method, or the equivalent <xref:System.AppDomainSetup> properties described in <xref:System.AppDomain.GetData%2A>.</span></span>  
  
 <span data-ttu-id="62a35-2136">値として"REGEX_DEFAULT_MATCH_TIMEOUT"を指定して正規表現パターンを評価するための既定のタイムアウト間隔の値を設定するには、このメソッドを呼び出すことができます、`name`引数と<xref:System.TimeSpan>タイムアウトを表す値です間隔の値として、`data`引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-2136">You can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the `name` argument and a <xref:System.TimeSpan> value that represents the timeout interval as the value of the `data` argument.</span></span> <span data-ttu-id="62a35-2137">挿入またはこのメソッドを使用して、独自のユーザー定義名とデータの組み合わせを変更しでその値を検査、<xref:System.AppDomain.GetData%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2137">You can also insert or modify your own user defined name-data pairs with this method and inspect their values with the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2138">次の例では、使用する方法、<xref:System.AppDomain.SetData%28System.String%2CSystem.Object%29>新しい値のペアを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2138">The following example demonstrates how to use the <xref:System.AppDomain.SetData%28System.String%2CSystem.Object%29> method to create a new value pair.</span></span> <span data-ttu-id="62a35-2139">使用して、<xref:System.AppDomain.GetData%2A>値を取得し、コンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2139">The example then uses the <xref:System.AppDomain.GetData%2A> method to retrieve the value, and displays it to the console.</span></span>  
  
 [!code-cpp[ADGetData#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetData/CPP/adgetdata.cpp#1)]
 [!code-csharp[ADGetData#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetData/CS/adgetdata.cs#1)]
 [!code-vb[ADGetData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetData/VB/adgetdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2140">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2140">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2141">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2141">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2142">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2142">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.AppDomain.GetData(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string name, object data, System.Security.IPermission permission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetData(string name, object data, class System.Security.IPermission permission) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (name As String, data As Object, permission As IPermission)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ name, System::Object ^ data, System::Security::IPermission ^ permission);" />
      <MemberSignature Language="F#" Value="member this.SetData : string * obj * System.Security.IPermission -&gt; unit" Usage="appDomain.SetData (name, data, permission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="permission" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a35-2143">作成または変更の対象となるユーザー定義アプリケーション ドメイン プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="62a35-2143">The name of a user-defined application domain property to create or change.</span></span></param>
        <param name="data"><span data-ttu-id="62a35-2144">プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="62a35-2144">The value of the property.</span></span></param>
        <param name="permission"><span data-ttu-id="62a35-2145">プロパティの取得時に呼び出し元に要求するアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="62a35-2145">The permission to demand of the caller when the property is retrieved.</span></span></param>
        <summary><span data-ttu-id="62a35-2146">アプリケーション ドメインの特定のプロパティに対し、指定された値を代入します。プロパティの取得時に呼び出し元に要求するアクセス許可を引数として受け取ります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2146">Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2147">挿入または独自のアプリケーション ドメインのプロパティを説明する名前/データ ペアの内部キャッシュにユーザー定義のエントリを変更するには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2147">Use this method to insert or modify your own user-defined entries in an internal cache of name/data pairs that describe properties of the application domain.</span></span> <span data-ttu-id="62a35-2148">エントリを挿入する場合は、エントリが取得されるときに適用するアクセス許可の要求を指定できます。さらの値として"REGEX_DEFAULT_MATCH_TIMEOUT"を指定して正規表現パターンを評価するための既定のタイムアウト間隔の値を設定するには、このメソッドを呼び出すことができます、`name`引数と<xref:System.TimeSpan>を表す値、タイムアウト間隔の値として、`data`引数。</span><span class="sxs-lookup"><span data-stu-id="62a35-2148">When you insert an entry, you can specify a permission demand to enforce when the entry is retrieved.In addition, you can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the `name` argument and a <xref:System.TimeSpan> value that represents the timeout interval as the value of the `data` argument.</span></span>  
  
 <span data-ttu-id="62a35-2149">このメソッドを使用して、システム定義のプロパティ文字列をセキュリティの要求を割り当てることはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2149">You cannot use this method to assign a security demand to a system-defined property string.</span></span>  
  
 <span data-ttu-id="62a35-2150">キャッシュには、アプリケーション ドメインの作成時に挿入される定義済みのシステム エントリに自動的に含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2150">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="62a35-2151">挿入または、このメソッドを使用してシステム エントリを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2151">You cannot insert or modify system entries with this method.</span></span> <span data-ttu-id="62a35-2152">システムのエントリを変更しようとするメソッドの呼び出しには効果がありません。メソッドは例外をスローしていません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2152">A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</span></span> <span data-ttu-id="62a35-2153">システム エントリの値を検査することができます、<xref:System.AppDomain.GetData%2A>メソッドまたは同等<xref:System.AppDomainSetup>は「解説」で説明するプロパティ、<xref:System.AppDomain.GetData%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2153">You can inspect the values of system entries with the <xref:System.AppDomain.GetData%2A> method or the equivalent <xref:System.AppDomainSetup> properties described in the Remarks section for the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-2154"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2154"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a35-2155"><paramref name="name" /> にシステム定義のプロパティ文字列が指定されているにもかかわらず、<paramref name="permission" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2155"><paramref name="name" /> specifies a system-defined property string and <paramref name="permission" /> is not <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2156">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2156">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2157">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2157">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetDynamicBase">
      <MemberSignature Language="C#" Value="public void SetDynamicBase (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDynamicBase(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetDynamicBase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDynamicBase (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDynamicBase(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetDynamicBase : string -&gt; unit" Usage="appDomain.SetDynamicBase path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.DynamicBase")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.SetDynamicBase has been deprecated. Please investigate the use of AppDomainSetup.DynamicBase instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="62a35-2158">動的に生成されたファイルの格納先となるサブディレクトリに対するベース ディレクトリを指定する絶対パス。</span><span class="sxs-lookup"><span data-stu-id="62a35-2158">The fully qualified path that is the base directory for subdirectories where dynamic assemblies are stored.</span></span></param>
        <summary><span data-ttu-id="62a35-2159">動的に生成されたファイルの格納先、およびそのファイルへのアクセス先となるサブディレクトリに対するベース ディレクトリとして、ディレクトリ パスを設定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2159">Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2160">このメソッドは、設定、<xref:System.AppDomainSetup.DynamicBase%2A>プロパティ、内部の<xref:System.AppDomainSetup>このインスタンスに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2160">This method sets the <xref:System.AppDomainSetup.DynamicBase%2A> property of the internal <xref:System.AppDomainSetup> associated with this instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2161">このメソッドは、廃止されており新しい開発ないで使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2161">This method is now obsolete, and should not be used for new development.</span></span> <span data-ttu-id="62a35-2162">次の例が旧式でない別の方法を使用する方法を示します、<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-2162">The following example shows how to use the non-obsolete alternative, the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="62a35-2163">この例の詳細については、次を参照してください。、<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>プロパティまたは<xref:System.AppDomain.DynamicDirectory%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-2163">For an explanation of this example, see the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property or the <xref:System.AppDomain.DynamicDirectory%2A> property.</span></span>  
  
 [!code-cpp[ADDynamicBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDynamicBase/CPP/addynamicbase.cpp#1)]
 [!code-csharp[ADDynamicBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDynamicBase/CS/addynamicbase.cs#1)]
 [!code-vb[ADDynamicBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDynamicBase/VB/addynamicbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2164">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2164">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2165">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2165">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2166">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2166">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.DynamicBase" />
      </Docs>
    </Member>
    <Member MemberName="SetPrincipalPolicy">
      <MemberSignature Language="C#" Value="public void SetPrincipalPolicy (System.Security.Principal.PrincipalPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPrincipalPolicy(valuetype System.Security.Principal.PrincipalPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPrincipalPolicy (policy As PrincipalPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPrincipalPolicy(System::Security::Principal::PrincipalPolicy policy);" />
      <MemberSignature Language="F#" Value="member this.SetPrincipalPolicy : System.Security.Principal.PrincipalPolicy -&gt; unit" Usage="appDomain.SetPrincipalPolicy policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Principal.PrincipalPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="62a35-2167">スレッドにアタッチするプリンシパル オブジェクトの型を指定する、<see cref="T:System.Security.Principal.PrincipalPolicy" /> のいずれかの値。</span><span class="sxs-lookup"><span data-stu-id="62a35-2167">One of the <see cref="T:System.Security.Principal.PrincipalPolicy" /> values that specifies the type of the principal object to attach to threads.</span></span></param>
        <summary><span data-ttu-id="62a35-2168">アプリケーション ドメインでスレッドを実行中に、スレッドがプリンシパルにバインドしようとした場合に、プリンシパル オブジェクトと ID オブジェクトをそのスレッドに関連付ける方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2168">Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2169">この値を設定するが効果的なは、使用する前に設定した場合のみが、<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a35-2169">Setting this value will only be effective if you set it before using the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="62a35-2170">例では、設定した場合の<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>次を使用して指定されたプリンシパル (たとえば、汎用プリンシパル) を<xref:System.AppDomain.SetPrincipalPolicy%2A>を設定するメソッド、<xref:System.Security.Principal.PrincipalPolicy>に<xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>、現在のプリンシパルは、汎用プリンシパルに残ります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2170">For example, if you set <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> to a given principal (for example, a generic principal) and then use the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to set the <xref:System.Security.Principal.PrincipalPolicy> to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, the current principal will remain the generic principal.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2171">次の例を使用するスレッドへの影響を示しています、<xref:System.AppDomain.SetPrincipalPolicy%2A>アプリケーション ドメインのプリンシパルのポリシーを変更するメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2171">The following example shows the effect on threads of using the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to change the principal policy of the application domain.</span></span> <span data-ttu-id="62a35-2172">使用する効果も示しています、<xref:System.AppDomain.SetThreadPrincipal%2A>のアプリケーション ドメインのスレッドにアタッチするために使用できるプリンシパルを変更するメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2172">It also shows the effect of using the <xref:System.AppDomain.SetThreadPrincipal%2A> method to change the principal that is available for attaching to threads in the application domain.</span></span>  
  
 [!code-cpp[ADPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADPrincipal/CPP/adprincipal.cpp#1)]
 [!code-csharp[ADPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADPrincipal/CS/adprincipal.cs#1)]
 [!code-vb[ADPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADPrincipal/VB/adprincipal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2173">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2173">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-2174">プリンシパル オブジェクトを操作する権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2174">for ability to manipulate the principal object.</span></span> <span data-ttu-id="62a35-2175"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-2175">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span> <span data-ttu-id="62a35-2176">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.Demand" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2176">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetShadowCopyFiles">
      <MemberSignature Language="C#" Value="public void SetShadowCopyFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetShadowCopyFiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetShadowCopyFiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetShadowCopyFiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetShadowCopyFiles();" />
      <MemberSignature Language="F#" Value="member this.SetShadowCopyFiles : unit -&gt; unit" Usage="appDomain.SetShadowCopyFiles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyFiles")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.SetShadowCopyFiles has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyFiles instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-2177">シャドウ コピーをオンにします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2177">Turns on shadow copying.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2178">シャドウ コピーの詳細については、次を参照してください。[アセンブリのシャドウ コピー](~/docs/framework/app-domains/shadow-copy-assemblies.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2178">For more information on shadow copying, see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2179">このメソッドは、廃止されており新しい開発ないで使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2179">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[adproperties#1](~/samples/snippets/cpp/VS_Snippets_CLR/adproperties/CPP/adproperties.cpp#1)]
 [!code-csharp[adproperties#1](~/samples/snippets/csharp/VS_Snippets_CLR/adproperties/CS/adproperties.cs#1)]
 [!code-vb[adproperties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/adproperties/VB/adproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2180">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2180">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2181">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2181">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2182">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2182">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="62a35-2183">アセンブリのシャドウ コピー</span><span class="sxs-lookup"><span data-stu-id="62a35-2183">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetShadowCopyPath">
      <MemberSignature Language="C#" Value="public void SetShadowCopyPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetShadowCopyPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetShadowCopyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetShadowCopyPath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetShadowCopyPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member SetShadowCopyPath : string -&gt; unit&#xA;override this.SetShadowCopyPath : string -&gt; unit" Usage="appDomain.SetShadowCopyPath path" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetShadowCopyPath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyDirectories")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.SetShadowCopyPath has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyDirectories instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="62a35-2184">ディレクトリ名のリスト。各ディレクトリ名はセミコロンで区切られます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2184">A list of directory names, where each name is separated by a semicolon.</span></span></param>
        <summary><span data-ttu-id="62a35-2185">指定したディレクトリ パスを、シャドウ コピーするアセンブリがある場所として設定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2185">Establishes the specified directory path as the location of assemblies to be shadow copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2186">既定では、シャドウ コピーには、調査で見つかったすべてのアセンブリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2186">By default, a shadow copy includes all assemblies found through probing.</span></span> <span data-ttu-id="62a35-2187"><xref:System.AppDomain.SetShadowCopyPath%2A>メソッドによって指定されたディレクトリでアセンブリをシャドウ コピーを制限する`path`します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2187">The <xref:System.AppDomain.SetShadowCopyPath%2A> method restricts the shadow copy to the assemblies in the directories specified by `path`.</span></span>  
  
 <span data-ttu-id="62a35-2188"><xref:System.AppDomain.SetShadowCopyPath%2A>メソッドでアセンブリを検索する追加のディレクトリが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2188">The <xref:System.AppDomain.SetShadowCopyPath%2A> method does not specify additional directories to be searched for assemblies.</span></span> <span data-ttu-id="62a35-2189">アセンブリのシャドウ コピーする必要があります既に検索パスの例の下に<xref:System.AppDomain.BaseDirectory%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2189">Assemblies to be shadow-copied must already be located in the search path, for example under <xref:System.AppDomain.BaseDirectory%2A>.</span></span> <span data-ttu-id="62a35-2190"><xref:System.AppDomain.SetShadowCopyPath%2A>メソッドでは、どの検索パスがシャドウ-コピーする対象を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2190">The <xref:System.AppDomain.SetShadowCopyPath%2A> method specifies which search paths are eligible to be shadow-copied.</span></span>  
  
 <span data-ttu-id="62a35-2191">このメソッドは、設定、<xref:System.AppDomainSetup.ShadowCopyDirectories%2A>プロパティ、内部の<xref:System.AppDomainSetup>このインスタンスに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2191">This method sets the <xref:System.AppDomainSetup.ShadowCopyDirectories%2A> property of the internal <xref:System.AppDomainSetup> associated with this instance.</span></span>  
  
 <span data-ttu-id="62a35-2192">シャドウ コピーの詳細については、次を参照してください。[アセンブリのシャドウ コピー](~/docs/framework/app-domains/shadow-copy-assemblies.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2192">For more information on shadow copying, see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2193">このメソッドは、廃止されており新しい開発ないで使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2193">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[ADShadowCopy#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADShadowCopy/CPP/adshadowcopy.cpp#1)]
 [!code-csharp[ADShadowCopy#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADShadowCopy/CS/adshadowcopy.cs#1)]
 [!code-vb[ADShadowCopy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADShadowCopy/VB/adshadowcopy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2194">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2194">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2195">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2195">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2196">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2196">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="62a35-2197">アセンブリのシャドウ コピー</span><span class="sxs-lookup"><span data-stu-id="62a35-2197">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetThreadPrincipal">
      <MemberSignature Language="C#" Value="public void SetThreadPrincipal (System.Security.Principal.IPrincipal principal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreadPrincipal(class System.Security.Principal.IPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetThreadPrincipal (principal As IPrincipal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetThreadPrincipal(System::Security::Principal::IPrincipal ^ principal);" />
      <MemberSignature Language="F#" Value="member this.SetThreadPrincipal : System.Security.Principal.IPrincipal -&gt; unit" Usage="appDomain.SetThreadPrincipal principal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Principal.IPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="62a35-2198">スレッドに関連付けるプリンシパル オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a35-2198">The principal object to attach to threads.</span></span></param>
        <summary><span data-ttu-id="62a35-2199">アプリケーション ドメインでスレッドを実行中に、スレッドがプリンシパルにバインドしようとした場合に、そのスレッドに関連付ける既定のプリンシパル オブジェクトを設定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2199">Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a35-2200">次の例を使用する効果を示しています、<xref:System.AppDomain.SetThreadPrincipal%2A>アプリケーション ドメインで実行されているスレッドにアタッチするために使用できるプリンシパルを変更するメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2200">The following example shows the effect of using the <xref:System.AppDomain.SetThreadPrincipal%2A> method to change the principal that is available for attaching to threads that are executing in the application domain.</span></span> <span data-ttu-id="62a35-2201">使用するスレッドへの影響も示しています、<xref:System.AppDomain.SetPrincipalPolicy%2A>アプリケーション ドメインのプリンシパルのポリシーを変更するメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2201">It also shows the effect on threads of using the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to change the principal policy of the application domain.</span></span>  
  
 [!code-cpp[ADPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADPrincipal/CPP/adprincipal.cpp#1)]
 [!code-csharp[ADPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADPrincipal/CS/adprincipal.cs#1)]
 [!code-vb[ADPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADPrincipal/VB/adprincipal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-2202"><paramref name="principal" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2202"><paramref name="principal" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Policy.PolicyException"><span data-ttu-id="62a35-2203">スレッドのプリンシパルが既に設定されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2203">The thread principal has already been set.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2204">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2204">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-2205">プリンシパル オブジェクトを操作する権限です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2205">for ability to manipulate the principal object.</span></span> <span data-ttu-id="62a35-2206"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-2206">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span> <span data-ttu-id="62a35-2207">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.Demand" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2207">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetupInformation">
      <MemberSignature Language="C#" Value="public AppDomainSetup SetupInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomainSetup SetupInformation" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.SetupInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetupInformation As AppDomainSetup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainSetup ^ SetupInformation { AppDomainSetup ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetupInformation : AppDomainSetup" Usage="System.AppDomain.SetupInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainSetup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2208">このインスタンスのアプリケーション ドメイン構成情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2208">Gets the application domain configuration information for this instance.</span></span></summary>
        <value><span data-ttu-id="62a35-2209">アプリケーション ドメインの初期化情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-2209">The application domain initialization information.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2210">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2210">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ShadowCopyFiles">
      <MemberSignature Language="C#" Value="public bool ShadowCopyFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShadowCopyFiles" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ShadowCopyFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShadowCopyFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShadowCopyFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShadowCopyFiles : bool" Usage="System.AppDomain.ShadowCopyFiles" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.ShadowCopyFiles</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2211">アプリケーション ドメインでファイルのシャドウ コピーを実行するよう設定されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2211">Gets an indication whether the application domain is configured to shadow copy files.</span></span></summary>
        <value><span data-ttu-id="62a35-2212">アプリケーション ドメインでファイルのシャドウ コピーを実行するよう設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a35-2212"><see langword="true" /> if the application domain is configured to shadow copy files; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2213">詳細については、次を参照してください。<xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType>と[アセンブリのシャドウ コピー](~/docs/framework/app-domains/shadow-copy-assemblies.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2213">For more information, see <xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2214">アンロードされたアプリケーション ドメインで操作しようとします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2214">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="P:System.AppDomainSetup.ShadowCopyFiles" />
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="62a35-2215">アセンブリのシャドウ コピー</span><span class="sxs-lookup"><span data-stu-id="62a35-2215">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _AppDomain.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _AppDomain.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = _AppDomain::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="62a35-2216">将来使用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2216">Reserved for future use.</span></span> <span data-ttu-id="62a35-2217">IID_NULL にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2217">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="62a35-2218">マッピング対象として渡される名前の配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-2218">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="62a35-2219">マッピングされる名前のカウント。</span><span class="sxs-lookup"><span data-stu-id="62a35-2219">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="62a35-2220">名前を解釈するロケール コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="62a35-2220">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="62a35-2221">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</span><span class="sxs-lookup"><span data-stu-id="62a35-2221">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="62a35-2222">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2222">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2223">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2223">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="62a35-2224">詳細については`IDispatch::GetIDsOfNames`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2224">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="62a35-2225">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2225">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _AppDomain.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _AppDomain.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = _AppDomain::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="62a35-2226">返される型情報。</span><span class="sxs-lookup"><span data-stu-id="62a35-2226">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="62a35-2227">型情報のロケール ID。</span><span class="sxs-lookup"><span data-stu-id="62a35-2227">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="62a35-2228">要求された型情報オブジェクトへのポインターを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2228">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="62a35-2229">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2229">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2230">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2230">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="62a35-2231">詳細については`IDispatch::GetTypeInfo`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2231">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="62a35-2232">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2232">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _AppDomain.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _AppDomain.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = _AppDomain::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="62a35-2233">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2233">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="62a35-2234">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2234">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2235">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2235">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="62a35-2236">詳細については`IDispatch::GetTypeInfoCount`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2236">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="62a35-2237">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2237">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.Invoke">
      <MemberSignature Language="C#" Value="void _AppDomain.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _AppDomain.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = _AppDomain::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="62a35-2238">メンバーを識別します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2238">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="62a35-2239">将来使用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2239">Reserved for future use.</span></span> <span data-ttu-id="62a35-2240">IID_NULL にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2240">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="62a35-2241">引数を解釈する対象のロケール コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="62a35-2241">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="62a35-2242">呼び出しのコンテキストを記述するフラグ。</span><span class="sxs-lookup"><span data-stu-id="62a35-2242">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="62a35-2243">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="62a35-2243">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="62a35-2244">結果が格納される場所へのポインター。</span><span class="sxs-lookup"><span data-stu-id="62a35-2244">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="62a35-2245">例外情報を格納する構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="62a35-2245">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="62a35-2246">エラーが存在する最初の引数のインデックス。</span><span class="sxs-lookup"><span data-stu-id="62a35-2246">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="62a35-2247">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2247">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2248">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2248">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="62a35-2249">詳細については`IDispatch::Invoke`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2249">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="62a35-2250">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2250">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="appDomain.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a35-2251">アプリケーション ドメインの表示名とコンテキスト ポリシーを含む文字列形式を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2251">Obtains a string representation that includes the friendly name of the application domain and any context policies.</span></span></summary>
        <returns><span data-ttu-id="62a35-2252">アプリケーション ドメインの表示名であるリテラル文字列 "Name:" と、コンテキスト ポリシーの文字列形式または "There are no context policies." という文字列のどちらかを連結した文字列。</span><span class="sxs-lookup"><span data-stu-id="62a35-2252">A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies."</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a35-2253">次のコード例の戻り値の表示、<xref:System.AppDomain.ToString%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a35-2253">The following code example displays the return value of the <xref:System.AppDomain.ToString%2A> method.</span></span>  
  
 [!code-cpp[ADToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADToString/CPP/adtostring.cpp#1)]
 [!code-csharp[ADToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADToString/CS/adtostring.cs#1)]
 [!code-vb[ADToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADToString/VB/adtostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="62a35-2254">現在の <see cref="T:System.AppDomain" /> によって表されるアプリケーション ドメインは既にアンロードされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2254">The application domain represented by the current <see cref="T:System.AppDomain" /> has been unloaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler TypeResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler TypeResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.TypeResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ TypeResolve;" />
      <MemberSignature Language="F#" Value="member this.TypeResolve : ResolveEventHandler " Usage="member this.TypeResolve : System.ResolveEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.TypeResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2255">型の解決が失敗したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2255">Occurs when the resolution of a type fails.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2256"><xref:System.AppDomain.TypeResolve>イベントは、共通言語ランタイムが要求された型を作成できるアセンブリを特定できない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2256">The <xref:System.AppDomain.TypeResolve> event occurs when the common language runtime is unable to determine the assembly that can create the requested type.</span></span> <span data-ttu-id="62a35-2257">これは、動的アセンブリで型が定義されているまたは型が動的アセンブリで定義されていないが、ランタイムには、型がで定義されているアセンブリがわからない場合に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2257">This can occur if the type is defined in a dynamic assembly, or the type is not defined in a dynamic assembly but the runtime does not know which assembly the type is defined in.</span></span> <span data-ttu-id="62a35-2258">後者の状況が発生することがとき<xref:System.Type.GetType%2A?displayProperty=nameWithType>アセンブリ名で修飾されていない型名と呼びます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2258">The latter situation can occur when <xref:System.Type.GetType%2A?displayProperty=nameWithType> is called with a type name that is not qualified with the assembly name.</span></span>  
  
 <span data-ttu-id="62a35-2259"><xref:System.ResolveEventHandler>のこのイベントは、検索し、型の作成を試むことができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2259">The <xref:System.ResolveEventHandler> for this event can attempt to locate and create the type.</span></span>  
  
 <span data-ttu-id="62a35-2260">ただし、<xref:System.AppDomain.TypeResolve>ランタイムは、特定のアセンブリの種類を検索することはできませんを把握している場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2260">However, the <xref:System.AppDomain.TypeResolve> event does not occur if the runtime knows it is not possible to find a type in certain assemblies.</span></span> <span data-ttu-id="62a35-2261">たとえば、静的アセンブリでは、ランタイムの型は、静的アセンブリに動的に追加することはできませんが知っているため、型が存在しない場合、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2261">For example, this event does not occur if the type is not found in a static assembly because the runtime knows types cannot be added dynamically to static assemblies.</span></span>  
  
 <span data-ttu-id="62a35-2262">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>プロパティには、型を要求したアセンブリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2262">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property contains the assembly that requested the type.</span></span> <span data-ttu-id="62a35-2263">詳細については、「<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2263">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="62a35-2264">このイベントのイベント ハンドラーを登録するには、必要なアクセス許可が必要または<xref:System.Security.SecurityException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2264">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="62a35-2265">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2265">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2266">次のサンプルでは、<xref:System.AppDomain.TypeResolve>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-2266">The following sample demonstrates the <xref:System.AppDomain.TypeResolve> event.</span></span>  
  
 <span data-ttu-id="62a35-2267">このコード例を実行するには、完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2267">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="62a35-2268">完全修飾アセンブリ名を取得する方法については、次を参照してください。[アセンブリ名](~/docs/framework/app-domains/assembly-names.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2268">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_TypeResolve#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_TypeResolve/CPP/typeresolve.cpp#1)]
 [!code-csharp[AppDomain_TypeResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_TypeResolve/CS/typeresolve.cs#1)]
 [!code-vb[AppDomain_TypeResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_TypeResolve/VB/typeresolve.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2269">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2269">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2270">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2270">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : UnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.UnhandledException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a35-2271">例外がキャッチされない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2271">Occurs when an exception is not caught.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2272">このイベントは、キャッチされない例外の通知を提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2272">This event provides notification of uncaught exceptions.</span></span> <span data-ttu-id="62a35-2273">システムの既定のハンドラーがユーザーに例外を報告、およびアプリケーションの終了前に、例外に関する情報を記録するアプリケーションをできるようにします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2273">It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application.</span></span> <span data-ttu-id="62a35-2274">アプリケーションの状態に関する十分な情報がある場合、使用可能なその他の操作可能性があります実行 - 後の復旧のプログラムのデータを保存するなど。</span><span class="sxs-lookup"><span data-stu-id="62a35-2274">If sufficient information about the state of the application is available, other actions may be undertaken - such as saving program data for later recovery.</span></span> <span data-ttu-id="62a35-2275">例外が処理されない場合は、プログラムのデータが破壊されることがあるため、警告が表示されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2275">Caution is advised, because program data can become corrupted when exceptions are not handled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-2276">.NET Framework バージョン 1.0 および 1.1 では、アプリケーションの終了とデバッグ オプションが報告ユーザーではなくより後の前に、このイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2276">In the .NET Framework versions 1.0 and 1.1, application termination and debugging options are reported to the user before this event is raised, rather than after.</span></span>  
  
 <span data-ttu-id="62a35-2277">このイベントは、任意のアプリケーション ドメインで処理することができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2277">This event can be handled in any application domain.</span></span> <span data-ttu-id="62a35-2278">ただし、イベントは必ずしも発生しませんが、例外が発生したアプリケーション ドメインで。</span><span class="sxs-lookup"><span data-stu-id="62a35-2278">However, the event is not necessarily raised in the application domain where the exception occurred.</span></span> <span data-ttu-id="62a35-2279">スレッドのスタック全体が解除されたアンワインドため、まずイベントを発生させることができますが、スレッドが作成されたアプリケーション ドメインでは、該当する例外ハンドラーを検索せず場合にのみ、例外が処理されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2279">An exception is unhandled only if the entire stack for the thread has been unwound without finding an applicable exception handler, so the first place the event can be raised is in the application domain where the thread originated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-2280">.NET Framework バージョン 1.0 および 1.1 では、このイベントは、アプリケーションを開始するときに、システムによって作成される既定のアプリケーション ドメインに対してのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2280">In the .NET Framework versions 1.0 and 1.1, this event occurs only for the default application domain that is created by the system when an application is started.</span></span> <span data-ttu-id="62a35-2281">アプリケーションでは、追加のアプリケーション ドメインを作成する場合は、これらのアプリケーション ドメインでこのイベントのデリゲートを指定しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2281">If an application creates additional application domains, specifying a delegate for this event in those applications domains has no effect.</span></span>  
  
 <span data-ttu-id="62a35-2282">場合、<xref:System.AppDomain.UnhandledException>イベントは既定のアプリケーション ドメインで処理のいずれかのハンドルされない例外では、どのようなアプリケーション ドメインに関係なく、任意のスレッド開始されたスレッドにある発生しました。</span><span class="sxs-lookup"><span data-stu-id="62a35-2282">If the <xref:System.AppDomain.UnhandledException> event is handled in the default application domain, it is raised there for any unhandled exception in any thread, no matter what application domain the thread started in.</span></span> <span data-ttu-id="62a35-2283">イベント ハンドラーにあるアプリケーション ドメインでスレッドが開始したかどうかは<xref:System.AppDomain.UnhandledException>、そのアプリケーション ドメインで、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2283">If the thread started in an application domain that has an event handler for <xref:System.AppDomain.UnhandledException>, the event is raised in that application domain.</span></span> <span data-ttu-id="62a35-2284">そのアプリケーション ドメインが既定のアプリケーション ドメインと既定のアプリケーション ドメインで、イベント ハンドラーはまた、両方のアプリケーション ドメインで、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2284">If that application domain is not the default application domain, and there is also an event handler in the default application domain, the event is raised in both application domains.</span></span>  
  
 <span data-ttu-id="62a35-2285">たとえば、スレッドの起動時あるとします"AD1"のアプリケーション ドメイン"AD2"のアプリケーション ドメインでメソッドを呼び出しし、そこからメソッドを呼び出し、"AD3"のアプリケーション ドメインで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2285">For example, suppose a thread starts in application domain "AD1", calls a method in application domain "AD2", and from there calls a method in application domain "AD3", where it throws an exception.</span></span> <span data-ttu-id="62a35-2286">最初のアプリケーション ドメインを<xref:System.AppDomain.UnhandledException>イベントを発生させることができます"AD1"です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2286">The first application domain in which the <xref:System.AppDomain.UnhandledException> event can be raised is "AD1".</span></span> <span data-ttu-id="62a35-2287">そのアプリケーション ドメインが既定のアプリケーション ドメインでない場合は、イベントは既定のアプリケーション ドメインにも発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2287">If that application domain is not the default application domain, the event can also be raised in the default application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-2288">共通言語ランタイムの中断イベント ハンドラーの中にスレッドの中止、<xref:System.AppDomain.UnhandledException>イベントを実行します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2288">The common language runtime suspends thread aborts while event handlers for the <xref:System.AppDomain.UnhandledException> event are executing.</span></span>  
  
 <span data-ttu-id="62a35-2289">イベント ハンドラーがある場合、<xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute>属性、適切なフラグでは、イベント ハンドラーは制約された実行領域として扱われます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2289">If the event handler has a <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute with the appropriate flags, the event handler is treated as a constrained execution region.</span></span>  
  
 <span data-ttu-id="62a35-2290">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このイベントはスタック オーバーフローなど、プロセスの状態が破損またはイベント ハンドラーがセキュリティ クリティカルであり、違反にアクセスする例外の発生しませんが、<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="62a35-2290">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], this event is not raised for exceptions that corrupt the state of the process, such as stack overflows or access violations, unless the event handler is security-critical and has the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute.</span></span>  
  
 <span data-ttu-id="62a35-2291">.NET Framework バージョン 1.0 および 1.1 では、メイン アプリケーション スレッド以外のスレッドで発生した未処理の例外はランタイムによってが検出され、アプリケーションが終了するを発生しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2291">In the .NET Framework versions 1.0 and 1.1, an unhandled exception that occurs in a thread other than the main application thread is caught by the runtime and therefore does not cause the application to terminate.</span></span> <span data-ttu-id="62a35-2292">したがって、ことができる、<xref:System.AppDomain.UnhandledException>イベントが、アプリケーションを終了せずに発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2292">Thus, it is possible for the <xref:System.AppDomain.UnhandledException> event to be raised without the application terminating.</span></span> <span data-ttu-id="62a35-2293">以降、.NET Framework version 2.0 では、この安全策子スレッドのハンドルされない例外のため、削除されましたサイレントこのような障害の影響が累積には、パフォーマンスの低下には、破損したデータにはすべての困難がハングアップが含まれていますデバッグします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2293">Starting with the .NET Framework version 2.0, this backstop for unhandled exceptions in child threads was removed, because the cumulative effect of such silent failures included performance degradation, corrupted data, and lockups, all of which were difficult to debug.</span></span> <span data-ttu-id="62a35-2294">これで、ランタイムが終了しないケースの一覧を含む詳細については、次を参照してください。[マネージ スレッドにおける例外](~/docs/standard/threading/exceptions-in-managed-threads.md)します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2294">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="62a35-2295">このイベントのイベント ハンドラーを登録するには、必要なアクセス許可が必要または<xref:System.Security.SecurityException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2295">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="62a35-2296">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="62a35-2296">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
## <a name="other-events-for-unhandled-exceptions"></a><span data-ttu-id="62a35-2297">未処理の例外の他のイベント</span><span class="sxs-lookup"><span data-stu-id="62a35-2297">Other Events for Unhandled Exceptions</span></span>  
 <span data-ttu-id="62a35-2298">特定のアプリケーション モデル、<xref:System.AppDomain.UnhandledException>イベントはメイン アプリケーション スレッドでハンドルされない例外が発生した場合、その他のイベントによって割り込まれることができます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2298">For certain application models, the <xref:System.AppDomain.UnhandledException> event can be preempted by other events if the unhandled exception occurs in the main application thread.</span></span>  
  
 <span data-ttu-id="62a35-2299">Windows フォームを使用するアプリケーションで未処理の例外、メイン アプリケーション スレッドが発生、<xref:System.Windows.Forms.Application.ThreadException?displayProperty=nameWithType>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2299">In applications that use Windows Forms, unhandled exceptions in the main application thread cause the <xref:System.Windows.Forms.Application.ThreadException?displayProperty=nameWithType> event to be raised.</span></span> <span data-ttu-id="62a35-2300">このイベントが処理される場合、既定の動作は、未処理の例外が、アプリケーションを終了していないこと、アプリケーションが不明な状態のままですが。</span><span class="sxs-lookup"><span data-stu-id="62a35-2300">If this event is handled, the default behavior is that the unhandled exception does not terminate the application, although the application is left in an unknown state.</span></span> <span data-ttu-id="62a35-2301">その場合は、<xref:System.AppDomain.UnhandledException>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2301">In that case, the <xref:System.AppDomain.UnhandledException> event is not raised.</span></span> <span data-ttu-id="62a35-2302">アプリケーション構成ファイルを使用して、またはを使用して、この動作を変更できます、<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=nameWithType>するモードを変更するメソッドを<xref:System.Windows.Forms.UnhandledExceptionMode.ThrowException?displayProperty=nameWithType>する前に、<xref:System.Windows.Forms.Application.ThreadException>イベント ハンドラーをフックします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2302">This behavior can be changed by using the application configuration file, or by using the <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=nameWithType> method to change the mode to <xref:System.Windows.Forms.UnhandledExceptionMode.ThrowException?displayProperty=nameWithType> before the <xref:System.Windows.Forms.Application.ThreadException> event handler is hooked up.</span></span> <span data-ttu-id="62a35-2303">これは、メイン アプリケーション スレッドにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2303">This applies only to the main application thread.</span></span> <span data-ttu-id="62a35-2304"><xref:System.AppDomain.UnhandledException>の他のスレッドでスローされた未処理の例外イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2304">The <xref:System.AppDomain.UnhandledException> event is raised for unhandled exceptions thrown in other threads.</span></span>  
  
 <span data-ttu-id="62a35-2305">Microsoft Visual Studio 2005 以降では、Visual Basic のアプリケーション フレームワークは、メイン アプリケーション スレッドでハンドルされない例外の別のイベントを提供します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2305">Starting with Microsoft Visual Studio 2005, the Visual Basic application framework provides another event for unhandled exceptions in the main application thread.</span></span> <span data-ttu-id="62a35-2306">参照してください、<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-2306">See the <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="62a35-2307">このイベントがイベント引数オブジェクトによって使用されるイベント引数オブジェクトと同じ名前で<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>がさまざまなプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2307">This event has an event arguments object with the same name as the event arguments object used by <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>, but with different properties.</span></span> <span data-ttu-id="62a35-2308">特に、このイベント引数オブジェクトは、<xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A>プロパティにより、実行、未処理の例外は無視されます (および、アプリケーションが不明な状態のままになります) を継続するアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="62a35-2308">In particular, this event arguments object has an <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> property that allows the application to continue running, ignoring the unhandled exception (and leaving the application in an unknown state).</span></span> <span data-ttu-id="62a35-2309">その場合は、<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2309">In that case, the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event is not raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2310">次の例で示します、<xref:System.AppDomain.UnhandledException>イベント。</span><span class="sxs-lookup"><span data-stu-id="62a35-2310">The followingexample demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="62a35-2311">イベント ハンドラーを定義します`MyHandler`既定のアプリケーション ドメインでハンドルされない例外がスローされたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2311">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="62a35-2312">2 つの例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2312">It then throws two exceptions.</span></span> <span data-ttu-id="62a35-2313">最初はによって処理される、 **try ~ catch**ブロックします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2313">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="62a35-2314">2 つ目が処理されないと起動、`MyHandle`ルーチン、アプリケーションが終了する前にします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2314">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="62a35-2315">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2315">requires full trust for the immediate caller.</span></span> <span data-ttu-id="62a35-2316">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2316">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public static void Unload (AppDomain domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unload(class System.AppDomain domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Unload(System.AppDomain)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unload (domain As AppDomain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unload(AppDomain ^ domain);" />
      <MemberSignature Language="F#" Value="static member Unload : AppDomain -&gt; unit" Usage="System.AppDomain.Unload domain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="62a35-2317">アンロードするアプリケーション ドメイン。</span><span class="sxs-lookup"><span data-stu-id="62a35-2317">An application domain to unload.</span></span></param>
        <summary><span data-ttu-id="62a35-2318">指定したアプリケーション ドメインをアンロードします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2318">Unloads the specified application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a35-2319">.NET Framework version 2.0 では、スレッドがアプリケーション ドメインのアンロードに専用です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2319">In the .NET Framework version 2.0 there is a thread dedicated to unloading application domains.</span></span> <span data-ttu-id="62a35-2320">これにより、.NET Framework がホストされている場合は特に、信頼性が向上します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2320">This improves reliability, especially when the .NET Framework is hosted.</span></span> <span data-ttu-id="62a35-2321">スレッドを呼び出すと<xref:System.AppDomain.Unload%2A>、ターゲット ドメインがアンロードするためにマークされています。</span><span class="sxs-lookup"><span data-stu-id="62a35-2321">When a thread calls <xref:System.AppDomain.Unload%2A>, the target domain is marked for unloading.</span></span> <span data-ttu-id="62a35-2322">専用のスレッドが、ドメインをアンロードしようとした場合、ドメイン内のすべてのスレッドは中止されます。</span><span class="sxs-lookup"><span data-stu-id="62a35-2322">The dedicated thread attempts to unload the domain, and all threads in the domain are aborted.</span></span> <span data-ttu-id="62a35-2323">スレッドは中止されない、たとえば、アンマネージ コードを実行している場合、または実行されているため、`finally`を一定期間後のブロックを<xref:System.CannotUnloadAppDomainException>と呼ばれる最初のスレッドでスローされる<xref:System.AppDomain.Unload%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2323">If a thread does not abort, for example because it is executing unmanaged code, or because it is executing a `finally` block, then after a period of time a <xref:System.CannotUnloadAppDomainException> is thrown in the thread that originally called <xref:System.AppDomain.Unload%2A>.</span></span> <span data-ttu-id="62a35-2324">最終的に中止できませんでしたが、スレッドが終了した場合、ターゲット ドメインはアンロードされません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2324">If the thread that could not be aborted eventually ends, the target domain is not unloaded.</span></span> <span data-ttu-id="62a35-2325">したがって、.NET Framework version 2.0 で`domain`実行中のスレッドを終了できない可能性がありますので、アンロードは保証されません。</span><span class="sxs-lookup"><span data-stu-id="62a35-2325">Thus, in the .NET Framework version 2.0 `domain` is not guaranteed to unload, because it might not be possible to terminate executing threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a35-2326">いくつかの場合は、呼び出し<xref:System.AppDomain.Unload%2A>、すぐ<xref:System.CannotUnloadAppDomainException>、たとえば、ファイナライザーで呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="62a35-2326">In some cases, calling <xref:System.AppDomain.Unload%2A> causes an immediate <xref:System.CannotUnloadAppDomainException>, for example if it is called in a finalizer.</span></span>  
  
 <span data-ttu-id="62a35-2327">内のスレッド`domain`が終了を使用して、<xref:System.Threading.Thread.Abort%2A>メソッドがスローされます、<xref:System.Threading.ThreadAbortException>スレッドでします。</span><span class="sxs-lookup"><span data-stu-id="62a35-2327">The threads in `domain` are terminated using the <xref:System.Threading.Thread.Abort%2A> method, which throws a <xref:System.Threading.ThreadAbortException> in the thread.</span></span> <span data-ttu-id="62a35-2328">時間量が予測できないため実行が続行できますが、スレッドがすぐに終了する必要があります、`finally`句。</span><span class="sxs-lookup"><span data-stu-id="62a35-2328">Although the thread should terminate promptly, it can continue executing for an unpredictable amount of time in a `finally` clause.</span></span>  
  
## <a name="version-compatibility"></a><span data-ttu-id="62a35-2329">バージョンの互換性</span><span class="sxs-lookup"><span data-stu-id="62a35-2329">Version Compatibility</span></span>  
 <span data-ttu-id="62a35-2330">.NET framework version 1.0 および 1.1 の場合は、スレッドを呼び出す<xref:System.AppDomain.Unload%2A>で実行されている`domain`、アンロード操作を実行する別のスレッドが開始します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2330">In the .NET Framework version 1.0 and 1.1 if the thread that calls <xref:System.AppDomain.Unload%2A> is running in `domain`, another thread is started to perform the unload operation.</span></span> <span data-ttu-id="62a35-2331">場合`domain`、アンロードすることはできません、<xref:System.CannotUnloadAppDomainException>と呼ばれる元のスレッドではなく、そのスレッドでスローされる<xref:System.AppDomain.Unload%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2331">If `domain` cannot be unloaded, a <xref:System.CannotUnloadAppDomainException> is thrown in that thread, not in the original thread that called <xref:System.AppDomain.Unload%2A>.</span></span> <span data-ttu-id="62a35-2332">ただしかどうか、スレッドを呼び出す<xref:System.AppDomain.Unload%2A>外部で実行中`domain`スレッドが例外を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="62a35-2332">However, if the thread that calls <xref:System.AppDomain.Unload%2A> is running outside `domain`, that thread receives the exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a35-2333">次のコード例では、アプリケーション ドメインをアンロードする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2333">The following code example shows how to unload an application domain.</span></span>  
  
 [!code-cpp[ADUnload#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADUnload/CPP/adunload.cpp#1)]
 [!code-csharp[ADUnload#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADUnload/CS/adunload.cs#1)]
 [!code-vb[ADUnload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADUnload/VB/adunload.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a35-2334"><paramref name="domain" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="62a35-2334"><paramref name="domain" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.CannotUnloadAppDomainException"><span data-ttu-id="62a35-2335"><paramref name="domain" /> をアンロードできませんでした。</span><span class="sxs-lookup"><span data-stu-id="62a35-2335"><paramref name="domain" /> could not be unloaded.</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="62a35-2336">アンロード処理中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="62a35-2336">An error occurred during the unload process.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="62a35-2337">このイベントのイベント ハンドラーを追加します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2337">to add an event handler for this event.</span></span> <span data-ttu-id="62a35-2338"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="62a35-2338">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</span></span> <span data-ttu-id="62a35-2339">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.Demand" />します。</span><span class="sxs-lookup"><span data-stu-id="62a35-2339">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>