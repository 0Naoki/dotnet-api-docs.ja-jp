<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IObservable`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c2589d1e6912470385b77aa8afee4b096c72c259.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2589d1e6912470385b77aa8afee4b096c72c259</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The object that provides notification information.</source>
          <target state="translated">通知情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IObservable`1">
          <source>Defines a provider for push-based notification.</source>
          <target state="translated">プッシュ ベースの通知用プロバイダーを定義します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> and <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> interfaces provide a generalized mechanism for push-based notification, also known as the observer design pattern.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph>と<ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph>インターフェイスが汎用化されたプッシュ ベースの通知、オブザーバー デザイン パターンとも呼ばれるメカニズムを提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> interface represents the class that sends notifications (the provider); the <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> interface represents the class that receives them (the observer).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph>インターフェイスを表します (プロバイダー); の通知を送信するクラス、<ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph>インターフェイスが (observer) 受信するクラスを表します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source><ph id="ph1">`T`</ph> represents the class that provides the notification information.</source>
          <target state="translated"><ph id="ph1">`T`</ph> 通知情報を提供するクラスを表します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>In some push-based notifications, the <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> implementation and <ph id="ph2">`T`</ph> can represent the same type.</source>
          <target state="translated">一部のプッシュ ベースの通知で、<ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph>実装と<ph id="ph2">`T`</ph>同じ型を表すことができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider must implement a single method, <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph>, that indicates that an observer wants to receive push-based notifications.</source>
          <target state="translated">プロバイダーは 1 つのメソッドを実装する必要があります<ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph>オブザーバーがプッシュ ベースの通知を受信することを示すです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Callers to the method pass an instance of the observer.</source>
          <target state="translated">呼び出し元メソッドには、オブザーバーのインスタンスを渡します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> implementation that enables observers to cancel notifications at any time before the provider has stopped sending them.</source>
          <target state="translated">このメソッドを返します、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>により、プロバイダーが送信を停止する前にいつでも通知をキャンセルするオブザーバーを実装します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>At any given time, a given provider may have zero, one, or multiple observers.</source>
          <target state="translated">任意の時点で、指定されたプロバイダーは、0、1、または複数のオブザーバーがあります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider is responsible for storing references to observers and ensuring that they are valid before it sends notifications.</source>
          <target state="translated">プロバイダーは、オブザーバーへの参照を格納すると、利用できるように有効な通知を送信する前にします。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> interface does not make any assumptions about the number of observers or the order in which notifications are sent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph>インターフェイスはオブザーバーまたは通知が送信される注文の数に関するどのような想定を行いません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider sends the following three kinds of notifications to the observer by calling <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> methods:</source>
          <target state="translated">プロバイダーがオブザーバーに呼び出すことによって、次の 3 種類の通知を送信<ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The current data.</source>
          <target state="translated">現在のデータ。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider can call the <ph id="ph1">&lt;xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType&gt;</ph> method to pass the observer a <ph id="ph2">`T`</ph> object that has current data, changed data, or fresh data.</source>
          <target state="translated">プロバイダーが呼び出すことができます、<ph id="ph1">&lt;xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType&gt;</ph>オブザーバーを渡す方法、<ph id="ph2">`T`</ph>を現在のデータ、変更されたデータ、または新しいデータを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>An error condition.</source>
          <target state="translated">エラーが発生します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider can call the <ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType&gt;</ph> method to notify the observer that some error condition has occurred.</source>
          <target state="translated">プロバイダーが呼び出すことができます、<ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType&gt;</ph>何らかのエラー条件が発生したこと、オブザーバーに通知します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>No further data.</source>
          <target state="translated">さらにデータがありません。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider can call the <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType&gt;</ph> method to notify the observer that it has finished sending notifications.</source>
          <target state="translated">プロバイダーが呼び出すことができます、<ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType&gt;</ph>通知の送信が完了したことをオブザーバーに通知するメソッド。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The following example illustrates the observer design pattern.</source>
          <target state="translated">次の例では、オブザーバー デザイン パターンを示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>It defines a <ph id="ph1">`Location`</ph> class that contains latitude and longitude information.</source>
          <target state="translated">定義する、<ph id="ph1">`Location`</ph>緯度と経度の情報を含むクラスです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">`LocationTracker`</ph> class provides the <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">`LocationTracker`</ph>クラスを提供、<ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Its <ph id="ph1">`TrackLocation`</ph> method is passed a nullable <ph id="ph2">`Location`</ph> object that contains the latitude and longitude data.</source>
          <target state="translated">その<ph id="ph1">`TrackLocation`</ph>メソッドは null 許容型に渡されます<ph id="ph2">`Location`</ph>緯度と経度のデータを格納しているオブジェクト。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>If the <ph id="ph1">`Location`</ph> value is not <ph id="ph2">`null`</ph>, the <ph id="ph3">`TrackLocation`</ph> method calls the <ph id="ph4">&lt;xref:System.IObserver%601.OnNext%2A&gt;</ph> method of each observer.</source>
          <target state="translated">場合、<ph id="ph1">`Location`</ph>値がない<ph id="ph2">`null`</ph>、<ph id="ph3">`TrackLocation`</ph>メソッドの呼び出し、<ph id="ph4">&lt;xref:System.IObserver%601.OnNext%2A&gt;</ph>各オブザーバーのメソッドです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>If the <ph id="ph1">`Location`</ph> value is <ph id="ph2">`null`</ph>, the <ph id="ph3">`TrackLocation`</ph> method instantiates a <ph id="ph4">`LocationUnknownException`</ph> object, which is shown in the following example.</source>
          <target state="translated">場合、<ph id="ph1">`Location`</ph>値は<ph id="ph2">`null`</ph>、<ph id="ph3">`TrackLocation`</ph>メソッドがインスタンス化、<ph id="ph4">`LocationUnknownException`</ph>次の例に示されているオブジェクト。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>It then calls each observer's <ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph> method and passes it the <ph id="ph2">`LocationUnknownException`</ph> object.</source>
          <target state="translated">各オブザーバーの順に呼び出して<ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph>メソッドに渡すと、<ph id="ph2">`LocationUnknownException`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Note that <ph id="ph1">`LocationUnknownException`</ph> derives from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>, but does not add any new members.</source>
          <target state="translated">なお<ph id="ph1">`LocationUnknownException`</ph>から派生した<ph id="ph2">&lt;xref:System.Exception&gt;</ph>は、新しいメンバーを追加しません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Observers register to receive notifications from a <ph id="ph1">`TrackLocation`</ph> object by calling its <ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph> method, which assigns a reference to the observer object to a private generic <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">通知を受信するオブザーバーを登録、<ph id="ph1">`TrackLocation`</ph>オブジェクトを呼び出してその<ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph>メソッドで、プライベート ジェネリックにオブザーバー オブジェクトへの参照を割り当てます<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The method returns an <ph id="ph1">`Unsubscriber`</ph> object, which is an <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> implementation that enables observers to stop receiving notifications.</source>
          <target state="translated">このメソッドを返します、<ph id="ph1">`Unsubscriber`</ph>オブジェクトは、<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>により、通知の受信を停止するオブザーバーを実装します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">`LocationTracker`</ph> class also includes an <ph id="ph2">`EndTransmission`</ph> method.</source>
          <target state="translated"><ph id="ph1">`LocationTracker`</ph>クラスも含まれます、<ph id="ph2">`EndTransmission`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>When no further location data is available, the method calls each observer's <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> method and then clears the internal list of observers.</source>
          <target state="translated">さらに場所データを使用できない場合、メソッドの各オブザーバーの<ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph>メソッドおよびオブザーバーの内部リストをクリアします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>In this example, the <ph id="ph1">`LocationReporter`</ph> class provides the <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> implementation.</source>
          <target state="translated">この例では、<ph id="ph1">`LocationReporter`</ph>クラスを提供、<ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>It displays information about the current location to the console.</source>
          <target state="translated">コンソールに、現在の場所に関する情報を表示します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Its constructor includes a <ph id="ph1">`name`</ph> parameter, which enables the <ph id="ph2">`LocationReporter`</ph> instance to identify itself in its string output.</source>
          <target state="translated">コンス トラクターが含まれています、<ph id="ph1">`name`</ph>パラメーターは、これにより、<ph id="ph2">`LocationReporter`</ph>の文字列の出力で自身を識別するインスタンス。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>It also includes a <ph id="ph1">`Subscribe`</ph> method, which wraps a call to the provider's <ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method.</source>
          <target state="translated">含まれています、<ph id="ph1">`Subscribe`</ph>をプロバイダーの呼び出しをラップするメソッド<ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>This allows the method to assign the returned <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> reference to a private variable.</source>
          <target state="translated">これにより、返されたを割り当てる方法<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>プライベート変数への参照。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">`LocationReporter`</ph> class also includes an <ph id="ph2">`Unsubscribe`</ph> method, which calls the <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> method of the object that is returned by the <ph id="ph4">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`LocationReporter`</ph>クラスも含まれます、<ph id="ph2">`Unsubscribe`</ph>メソッドを呼び出して、<ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>によって返されるオブジェクトのメソッド、<ph id="ph4">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The following code defines the <ph id="ph1">`LocationReporter`</ph> class.</source>
          <target state="translated">次のコード定義、<ph id="ph1">`LocationReporter`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The following code then instantiates the provider and the observer.</source>
          <target state="translated">次のコードは、プロバイダーとオブザーバーにし、インスタンス化します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>The object that is to receive notifications.</source>
          <target state="translated">通知を受け取るオブジェクト。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>Notifies the provider that an observer is to receive notifications.</source>
          <target state="translated">オブザーバーが通知を受け取ることをプロバイダーに通知します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</source>
          <target state="translated">プロバイダーが通知の送信を完了する前に、オブザーバーが通知の受信を停止できるインターフェイスへの参照。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>The <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method must be called to register an observer for push-based notifications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph>プッシュ ベースの通知のオブザーバーを登録するメソッドを呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>A typical implementation of the <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method does the following:</source>
          <target state="translated">一般的な実装、<ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph>メソッドは、次を実行します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>It stores a reference to the observer in a collection object, such as a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">格納、オブザーバーへの参照をコレクション オブジェクト内など、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>It returns a reference to an <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">参照を返します、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>This enables observers to unsubscribe (that is, to stop receiving notifications) before the provider has finished sending them and called the subscriber's <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> method.</source>
          <target state="translated">これにより、オブザーバーをアンサブスク ライブする (つまり、通知の受信を停止する) プロバイダーが送信を完了し、サブスクライバーのと呼ばれる前に<ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>At any given time, a particular instance of an <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> implementation is responsible for handling all subscriptions and notifying all subscribers.</source>
          <target state="translated">ある一定期間の特定のインスタンス、<ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph>実装はすべてのサブスクリプションを処理して、すべてのサブスクライバーに通知します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>Unless the documentation for a particular <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> implementation indicates otherwise, observers should make no assumptions about the <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> implementation, such as the order of notifications that multiple observers will receive.</source>
          <target state="translated">しない限り、特定のドキュメント<ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph>実装がそれ以外の場合を示しますオブザーバーを作成してはならない前提条件に関する、<ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph>など複数のオブザーバーを受信する通知の順番の実装です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method for an application that reports latitude and longitude information.</source>
          <target state="translated">次の例を示しています、<ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph>緯度と経度の情報を報告するアプリケーションのメソッドです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>It defines an <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection object that stores references to all observers.</source>
          <target state="translated">定義する、<ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>すべてオブザーバーへの参照を格納するコレクション オブジェクト。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>It also returns a private class named <ph id="ph1">`Unsubscriber`</ph> that implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface and enables subscribers to stop receiving event notifications.</source>
          <target state="translated">という名前のプライベート クラスも返します<ph id="ph1">`Unsubscriber`</ph>を実装する、<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>インターフェイスし、イベント通知を受け取らないようにするためのサブスクライバーを有効にします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>See the Example section of the <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> topic for the complete example.</source>
          <target state="translated">使用例を参照してください、<ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph>コード例全体についてのトピックです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>