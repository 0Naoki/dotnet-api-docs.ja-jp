<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ValueType.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53b756fc1621dab1597966503a0af93b3c8478663.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b756fc1621dab1597966503a0af93b3c8478663</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ValueType">
          <source>Provides the base class for value types.</source>
          <target state="translated">値の型の基本クラスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source><ph id="ph1">&lt;xref:System.ValueType&gt;</ph> overrides the virtual methods from <ph id="ph2">&lt;xref:System.Object&gt;</ph> with more appropriate implementations for value types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType&gt;</ph> 仮想メソッドをオーバーライド<ph id="ph2">&lt;xref:System.Object&gt;</ph>値の型の適切な実装とします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>See also <ph id="ph1">&lt;xref:System.Enum&gt;</ph>, which inherits from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</source>
          <target state="translated">関連項目<ph id="ph1">&lt;xref:System.Enum&gt;</ph>から継承される<ph id="ph2">&lt;xref:System.ValueType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Data types are separated into value types and reference types.</source>
          <target state="translated">データ型は、値型と参照型に区切られます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Value types are either stack-allocated or allocated inline in a structure.</source>
          <target state="translated">値の型はスタックに割り当てられたか、またはインライン構造体で割り当てられます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Reference types are heap-allocated.</source>
          <target state="translated">参照型は、ヒープに割り当てられたです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Both reference and value types are derived from the ultimate base class <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">参照と値の両方の型は、最終的な基底クラスから派生<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</source>
          <target state="translated">値の型のオブジェクトと同様に動作するために必要な場合、ラッパーようにする、ヒープの参照オブジェクトが割り当てられているし、値型の値がそれにコピーように見えます。 値の型。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The wrapper is marked so the system knows that it contains a value type.</source>
          <target state="translated">値の型が含まれているシステムにわかるように、ラッパーがマークされます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>This process is known as boxing, and the reverse process is known as unboxing.</source>
          <target state="translated">このプロセスは、ボックス化と呼ばれ、逆のプロセスはボックス化解除と呼ばれます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Boxing and unboxing allow any type to be treated as an object.</source>
          <target state="translated">ボックス化とボックス化解除には、任意の型をオブジェクトとして扱うことができるようにします。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Although <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> is the implicit base class for value types, you cannot create a class that inherits from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph> directly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType&gt;</ph>暗黙的な基底クラスは、値型から継承するクラスを作成することはできません<ph id="ph2">&lt;xref:System.ValueType&gt;</ph>直接です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Instead, individual compilers provide a language keyword or construct (such as <ph id="ph1">`struct`</ph> in C# and <ph id="ph2">`Structure`</ph>…<ph id="ph3">`End Structure`</ph></source>
          <target state="translated">代わりに、個々 のコンパイラの言語のキーワードを提供または構築 (など<ph id="ph1">`struct`</ph>C# の場合と<ph id="ph2">`Structure`</ph>.<ph id="ph3">`End Structure`</ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>in Visual Basic) to support the creation of value types.</source>
          <target state="translated">Visual Basic) 値の型の作成をサポートします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Aside from serving as the base class for value types in the .NET Framework, the <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> structure is generally not used directly in code.</source>
          <target state="translated">.NET Framework における値の型の基底クラスとして機能している場合を除いて、<ph id="ph1">&lt;xref:System.ValueType&gt;</ph>構造がコードで直接使用されません一般にします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</source>
          <target state="translated">ただし、そのことができますとして使用するメソッドの呼び出しでパラメーターまたはいくつかの別の値の型を処理するメソッドを許可するように、すべてのオブジェクトではなく値の型に使用可能な引数を制限します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The following example illustrates how <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> prevents reference types from being passed to methods.</source>
          <target state="translated">次の例を示して 方法<ph id="ph1">&lt;xref:System.ValueType&gt;</ph>参照型がメソッドに渡されることを防止します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>It defines a class named <ph id="ph1">`Utility`</ph> that contains four methods: <ph id="ph2">`IsNumeric`</ph>, which indicates whether its argument is a number; <ph id="ph3">`IsInteger`</ph>, which indicates whether its argument is an integer; <ph id="ph4">`IsFloat`</ph>, which indicates whether its argument is a floating-point number; and <ph id="ph5">`Compare`</ph>, which indicates the relationship between two numeric values.</source>
          <target state="translated">という名前のクラスが定義<ph id="ph1">`Utility`</ph>4 つのメソッドを格納している: <ph id="ph2">`IsNumeric`</ph>、その引数の数値; があるかどうかを示します<ph id="ph3">`IsInteger`</ph>、その引数は、整数かどうかを示します<ph id="ph4">`IsFloat`</ph>を示します。 かどうかの引数。 浮動小数点数と<ph id="ph5">`Compare`</ph>、2 つの数値間の関係を示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>In each case, the method parameters are of type <ph id="ph1">&lt;xref:System.ValueType&gt;</ph>, and reference types are prevented from being passed to the methods.</source>
          <target state="translated">各ケースで、このメソッドのパラメーターは型の<ph id="ph1">&lt;xref:System.ValueType&gt;</ph>とは、参照型をメソッドに渡される阻止します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The following example illustrates calls to the methods of the <ph id="ph1">`Utility`</ph> class.</source>
          <target state="translated">次の例では、各メソッドを呼び出し、<ph id="ph1">`Utility`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ValueType.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ValueType" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ValueType" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source>The object to compare with the current instance.</source>
          <target state="translated">現在のインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source>Indicates whether this instance and a specified object are equal.</source>
          <target state="translated">このインスタンスと指定したオブジェクトが等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> and this instance are the same type and represent the same value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> とこのインスタンスが同じ型で、同じ値を表している場合は <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overrides <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> and provides the default implementation of value equality for all value types in the .NET Framework.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドのオーバーライド<ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>し、.NET Framework におけるすべての値の型の値の等価性の既定の実装を提供します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>If none of the fields of the current instance and <ph id="ph1">`obj`</ph> are reference types, the <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method performs a byte-by-byte comparison of the two objects in memory.</source>
          <target state="translated">現在のインスタンスのフィールドの存在しない場合および<ph id="ph1">`obj`</ph>参照型の場合は、<ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph>メソッドは、メモリに 2 つのオブジェクトのバイトで比較を実行します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Otherwise, it uses reflection to compare the corresponding fields of <ph id="ph1">`obj`</ph> and this instance.</source>
          <target state="translated">対応するフィールドを比較する、リフレクションを使用して、それ以外の場合、<ph id="ph1">`obj`</ph>とこのインスタンス。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Particularly if your value type contains fields that are reference types, you should override the <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">オーバーライドする必要があります、値型、参照型のフィールドが含まれている場合は特に、<ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>This can improve performance and enable you to more closely represent the meaning of equality for the type.</source>
          <target state="translated">これはパフォーマンスが向上し、使用するより厳密に型の等値の意味を表します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Notes for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></source>
          <target state="translated">は、 <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.Equals%2A&gt;</ph>.</source>
          <target state="translated">呼び出すと、<ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph>メソッドを<ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>構造体、オーバーライドしなければする値型の既定の動作を提供、<ph id="ph3">&lt;xref:System.ValueType.Equals%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">これは、.NET Framework 提供するサポートの一部、 <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (を参照してください<bpt id="p1">[</bpt>フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> 構造体をオーバーライドできません<ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph>メソッドすることはできませんので c# または Visual Basic で記述している場合でも、します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(また、構造体に、<ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>自体を継承しない<ph id="ph2">&lt;xref:System.ValueType&gt;</ph>)。ただし、それらがように見えます<ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>メソッド、c# または Visual Basic コードで使用すると、.NET Framework では、これらのメソッドの既定の動作です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method can be overridden by a derived value type.</source>
          <target state="translated">次の例でどのように<ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph>派生値型でメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ValueType.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">このインスタンスのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ValueType.GetHashCode">
          <source>A 32-bit signed integer that is the hash code for this instance.</source>
          <target state="translated">このインスタンスのハッシュ コードである 32 ビット符号付き整数。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method applies to types derived from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>メソッドから派生した型に適用<ph id="ph2">&lt;xref:System.ValueType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>One or more fields of the derived type is used to calculate the return value.</source>
          <target state="translated">派生型の 1 つ以上のフィールドは戻り値の計算に使用します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>If you call the derived type's <ph id="ph1">`GetHashCode`</ph> method, the return value is not likely to be suitable for use as a key in a hash table.</source>
          <target state="translated">派生型を呼び出す場合<ph id="ph1">`GetHashCode`</ph>メソッド、戻り値は、ハッシュ テーブル内のキーとして使用するのに適したする可能性があります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</source>
          <target state="translated">さらに、これらのフィールドの 1 つ以上の値が変更された場合は、戻り値がハッシュ テーブル内のキーとして使用するには適さないなる可能性があります。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>In either case, consider writing your own implementation of the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method that more closely represents the concept of a hash code for the type.</source>
          <target state="translated">どちらの場合も、独自の実装の作成を検討、<ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>をより厳密に型のハッシュ コードの概念を表すメソッド。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph2">&lt;xref:System.Collections.Hashtable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>」および「<ph id="ph2">&lt;xref:System.Collections.Hashtable?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>Notes for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></source>
          <target state="translated">は、 <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>.</source>
          <target state="translated">呼び出すと、<ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>メソッドを<ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>構造体、オーバーライドしなければする値型の既定の動作を提供、<ph id="ph3">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">これは、.NET Framework 提供するサポートの一部、 <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (を参照してください<bpt id="p1">[</bpt>フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> 構造体をオーバーライドできません<ph id="ph2">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>メソッドすることはできませんので c# または Visual Basic で記述している場合でも、します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(また、構造体に、<ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>自体を継承しない<ph id="ph2">&lt;xref:System.ValueType&gt;</ph>)。ただし、それらがように見えます<ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>メソッド、c# または Visual Basic コードで使用すると、.NET Framework では、これらのメソッドの既定の動作です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method can be overridden by a derived value type.</source>
          <target state="translated">次の例でどのように<ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>派生値型でメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ValueType.ToString">
          <source>Returns the fully qualified type name of this instance.</source>
          <target state="translated">このインスタンスの完全修飾型名を返します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ValueType.ToString">
          <source>The fully qualified type name.</source>
          <target state="translated">完全修飾型名。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method overrides the <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method and provides the default implementation of the <ph id="ph3">`ToString`</ph> method for value types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドのオーバーライド、<ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドの既定の実装を提供し、<ph id="ph3">`ToString`</ph>値型のメソッドです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>(Value types are types defined by the <ph id="ph1">`struct`</ph> keyword in C#, and by the <ph id="ph2">`Structure`</ph>...<ph id="ph3">`End Structure`</ph> construct in Visual Basic.) Functionally, however, the implementation is that same as that of <ph id="ph4">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>: the method returns the fully qualified type name.</source>
          <target state="translated">(値の型によって定義された型は、<ph id="ph1">`struct`</ph>キーワード (C#)、および、 <ph id="ph2">`Structure`</ph>.<ph id="ph3">`End Structure`</ph> Visual Basic で作成します)。機能的は、実装がのと同じ<ph id="ph4">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>: 完全修飾型名を返します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Value types defined by the <ph id="ph1">`struct`</ph> keyword in C# and the <ph id="ph2">`Structure`</ph>...<ph id="ph3">`End Structure`</ph> construct in Visual Basic typically override the <ph id="ph4">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method to provide a more meaningful string representation of the value type.</source>
          <target state="translated">によって定義された型の値、<ph id="ph1">`struct`</ph>キーワード (C#) および<ph id="ph2">`Structure`</ph>しています.<ph id="ph3">`End Structure`</ph> Visual Basic でコンス トラクターは通常オーバーライド、<ph id="ph4">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>値の型のわかりやすい文字列形式を指定するメソッド。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The following example illustrates the difference.</source>
          <target state="translated">この違いを次の例に示します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>It defines two value types, <ph id="ph1">`EmployeeA`</ph> and <ph id="ph2">`EmployeeB`</ph>, creates an instance of each, and calls its <ph id="ph3">`ToString`</ph> method.</source>
          <target state="translated">2 つの値の型を定義<ph id="ph1">`EmployeeA`</ph>と<ph id="ph2">`EmployeeB`</ph>、それぞれのインスタンスを作成しを呼び出して、その<ph id="ph3">`ToString`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Because the <ph id="ph1">`EmployeeA`</ph> structure does not override the <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method, it displays only the fully qualified type name.</source>
          <target state="translated"><ph id="ph1">`EmployeeA`</ph>構造体をオーバーライドしません、<ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッド、完全修飾型名のみが表示されます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The <ph id="ph1">`EmployeeB.ToString`</ph> method, on the other hand, provides meaningful information about the object.</source>
          <target state="translated"><ph id="ph1">`EmployeeB.ToString`</ph>メソッド、その一方で、オブジェクトに関する有益情報を提供します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Note that, although enumeration types are also value types, they derive from the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class, which overrides  <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">列挙型は、値型ではまた、派生元に注意してください、<ph id="ph1">&lt;xref:System.Enum&gt;</ph>クラスが優先<ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Notes for the Windows Runtime</source>
          <target state="translated">Windows ランタイムのメモ</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.ToString%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>.</source>
          <target state="translated">呼び出すと、<ph id="ph1">&lt;xref:System.ValueType.ToString%2A&gt;</ph>メソッドを<ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>構造体、オーバーライドしなければする値型の既定の動作を提供、<ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">これは、.NET Framework 提供するサポートの一部、 <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (を参照してください<bpt id="p1">[</bpt>フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> 構造体をオーバーライドできません<ph id="ph2">&lt;xref:System.ValueType.ToString%2A&gt;</ph>メソッドすることはできませんので c# または Visual Basic で記述している場合でも、します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(また、構造体に、<ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>自体を継承しない<ph id="ph2">&lt;xref:System.ValueType&gt;</ph>)。ただし、それらがように見えます<ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>メソッド、c# または Visual Basic コードで使用すると、.NET Framework では、これらのメソッドの既定の動作です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>