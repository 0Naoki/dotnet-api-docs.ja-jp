<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7961a45dd5c909be4d66d64972923c01c6ef84f" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52589167" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>値の型の基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> 仮想メソッドをオーバーライド<xref:System.Object>値型のより適切な実装。 参照してください<xref:System.Enum>から継承される<xref:System.ValueType>します。  
  
 データ型は、値型と参照型に分かれています。 値の型は、スタックに割り当てられたか、またはインライン構造体で割り当てられます。 参照型は、ヒープに割り当てられたです。 参照と値の両方の型は最終的な基底クラスから派生<xref:System.Object>します。 値型オブジェクトと同様に動作する必要がある場合、ラッパーにより、値の型参照オブジェクトが、ヒープに割り当てられるし、値型の値がそれにコピーするように見えます。 システムが認識し、値型が含まれているように、ラッパーがマークされます。 このプロセスは、ボックス化と呼ばれます、逆のプロセスはボックス化解除と呼ばれます。 ボックス化とボックス化解除は、任意の型をオブジェクトとして扱うことを許可します。  
  
 <xref:System.ValueType>暗黙的な基底クラスは、値の型から継承するクラスを作成することはできません<xref:System.ValueType>直接します。 代わりに、コンパイラが個々 の言語キーワードを指定または構築 (など`struct`(C#) と`Structure`.`End Structure` Visual Basic) 値の型の作成をサポートします。  
  
 別に、.NET Framework における値の型の基本クラスとして機能、<xref:System.ValueType>構造がコードで直接使用されません一般的にします。 ただし、そのできますメソッドの呼び出しでパラメーターとして使用可能な引数をすべてのオブジェクトではなく値の型に制限したり、多数の異なる値型を処理するメソッドを許可するように。 次の例を示して 方法<xref:System.ValueType>参照型がメソッドに渡されることを防ぎます。 という名前のクラスが定義`Utility`4 つのメソッドを格納している: `IsNumeric`、その引数の数値; があるかどうかを示します`IsInteger`の引数は整数であるかどうかを示します`IsFloat`、その引数の浮動小数点数値; がかどうかを示しますと`Compare`、2 つの数値間のリレーションシップを示します。 各ケースで、メソッドのパラメーターは型の<xref:System.ValueType>参照型はからメソッドに渡されることはありません。  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 次の例のメソッドの呼び出しを示しています、`Utility`クラス。  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ValueType" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスと指定したオブジェクトが等しいかどうかを示します。</summary>
        <returns><see langword="true" /> とこのインスタンスが同じ型で、同じ値を表している場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>メソッドのオーバーライド<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>し、.NET Framework 内のすべての値型の値の等価性の既定の実装を提供します。  
  
 場合、現在のインスタンス フィールドの中と`obj`参照型の場合は、<xref:System.ValueType.Equals%2A>メソッドは、メモリ内で 2 つのオブジェクトのバイトで比較を実行します。 対応するフィールドを比較する、リフレクションを使用して、それ以外の場合、`obj`とこのインスタンス。  
  
> [!TIP]
>  オーバーライドする必要がありますが、値型に参照型であるフィールドが含まれている場合は特に、<xref:System.ValueType.Equals%28System.Object%29>メソッド。 これはパフォーマンスが向上し、使用すると、型の等価性の意味をより正確に表します。  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>ノートには、 [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 呼び出すと、<xref:System.ValueType.Equals%2A>メソッドを[!INCLUDE[wrt](~/includes/wrt-md.md)]構造をオーバーライドしない値の型の既定の動作を提供、<xref:System.ValueType.Equals%2A>します。 これは、.NET Framework では、サポートの一部、 [!INCLUDE[wrt](~/includes/wrt-md.md)] (を参照してください[フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 構造体をオーバーライドできません<xref:System.ValueType.Equals%2A>で書かれている場合でも、C#または Visual Basic の場合は、メソッドを含めることはできませんので。 (さらに、内の構造体、[!INCLUDE[wrt](~/includes/wrt-md.md)]自体を継承しない<xref:System.ValueType>)。ただし、あるように見えます<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>と<xref:System.ValueType.GetHashCode%2A>メソッド、c# または Visual Basic のコードで使用すると、.NET Framework は、これらのメソッドの既定の動作を提供します。  
  
   
  
## Examples  
 次の例で、<xref:System.ValueType.Equals%2A>派生値型でメソッドをオーバーライドすることができます。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>このインスタンスのハッシュ コードである 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.GetHashCode%2A>メソッドから派生した型に適用されます<xref:System.ValueType>します。 派生型の 1 つまたは複数のフィールドは、戻り値の計算に使用されます。 派生型を呼び出す場合`GetHashCode`メソッド、戻り値は、ハッシュ テーブル内のキーとして使用するために適切である可能性はします。 さらに、これらのフィールドの 1 つ以上の値が変更された場合、戻り値は、ハッシュ テーブル内のキーとして使用するため不適切になった可能性があります。 いずれの場合も、独自の実装を書き込むことを検討します、<xref:System.ValueType.GetHashCode%2A>より厳密に型のハッシュ コードの概念を表すメソッド。  
  
 詳細については、「<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>」および「<xref:System.Collections.Hashtable?displayProperty=nameWithType>」を参照してください。  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>ノートには、 [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 呼び出すと、<xref:System.ValueType.GetHashCode%2A>メソッドを[!INCLUDE[wrt](~/includes/wrt-md.md)]構造をオーバーライドしない値の型の既定の動作を提供、<xref:System.ValueType.GetHashCode%2A>します。 これは、.NET Framework では、サポートの一部、 [!INCLUDE[wrt](~/includes/wrt-md.md)] (を参照してください[フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 構造体をオーバーライドできません<xref:System.ValueType.GetHashCode%2A>で書かれている場合でも、C#または Visual Basic の場合は、メソッドを含めることはできませんので。 (さらに、内の構造体、[!INCLUDE[wrt](~/includes/wrt-md.md)]自体を継承しない<xref:System.ValueType>)。ただし、あるように見えます<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>と<xref:System.ValueType.GetHashCode%2A>メソッド、c# または Visual Basic のコードで使用すると、.NET Framework は、これらのメソッドの既定の動作を提供します。  
  
   
  
## Examples  
 次の例で、<xref:System.ValueType.GetHashCode%2A>派生値型でメソッドをオーバーライドすることができます。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの完全修飾型名を返します。</summary>
        <returns>完全修飾型名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>メソッドのオーバーライド、<xref:System.Object.ToString%2A?displayProperty=nameWithType>メソッドの既定の実装を提供し、`ToString`値型のメソッド。 (値型によって定義された型では、`struct`と c# のキーワード、 `Structure`.`End Structure` Visual Basic で作成します)。実装はのそれと同じただし、機能的には、 <xref:System.Object.ToString%2A?displayProperty=nameWithType>: 完全修飾型名を返します。  
  
 によって定義された型の値、`struct`キーワード (C#) および`Structure`.`End Structure`通常 Visual Basic でコンス トラクターをオーバーライド、<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>意味のある値型の文字列表現を提供するメソッド。 この違いを次の例に示します。 2 つの値型を定義`EmployeeA`と`EmployeeB`、それぞれのインスタンスを作成し、呼び出し、その`ToString`メソッド。 `EmployeeA`構造を上書きしません、<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>メソッドでは、完全修飾型名のみが表示されます。 `EmployeeB.ToString`メソッド、その一方で、意味のあるオブジェクトの情報を提供します。  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 列挙型が値型ではまたから派生する注意してください、<xref:System.Enum>クラスでオーバーライドされます<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>します。  
  
## <a name="notes-for-the-windows-runtime"></a>Windows ランタイムのノート  
 呼び出すと、<xref:System.ValueType.ToString%2A>メソッドを[!INCLUDE[wrt](~/includes/wrt-md.md)]構造をオーバーライドしない値の型の既定の動作を提供、<xref:System.ValueType.ToString%2A>します。 これは、.NET Framework では、サポートの一部、 [!INCLUDE[wrt](~/includes/wrt-md.md)] (を参照してください[フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 構造体をオーバーライドできません<xref:System.ValueType.ToString%2A>で書かれている場合でも、C#または Visual Basic の場合は、メソッドを含めることはできませんので。 (さらに、内の構造体、[!INCLUDE[wrt](~/includes/wrt-md.md)]自体を継承しない<xref:System.ValueType>)。ただし、あるように見えます<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>と<xref:System.ValueType.GetHashCode%2A>メソッド、c# または Visual Basic のコードで使用すると、.NET Framework は、これらのメソッドの既定の動作を提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>