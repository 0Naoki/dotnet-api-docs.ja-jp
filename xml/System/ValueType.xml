<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="07f36e99c14614c3bbc719b3a07d3507a98db967" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58742732" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="91eb2-101">値型の基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-101">Provides the base class for value types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91eb2-102"><xref:System.ValueType> 仮想メソッドをオーバーライド<xref:System.Object>値型のより適切な実装。</span><span class="sxs-lookup"><span data-stu-id="91eb2-102"><xref:System.ValueType> overrides the virtual methods from <xref:System.Object> with more appropriate implementations for value types.</span></span> <span data-ttu-id="91eb2-103">参照してください<xref:System.Enum>から継承される<xref:System.ValueType>します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-103">See also <xref:System.Enum>, which inherits from <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="91eb2-104">データ型は、値型と参照型に分かれています。</span><span class="sxs-lookup"><span data-stu-id="91eb2-104">Data types are separated into value types and reference types.</span></span> <span data-ttu-id="91eb2-105">値の型は、スタックに割り当てられたか、またはインライン構造体で割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-105">Value types are either stack-allocated or allocated inline in a structure.</span></span> <span data-ttu-id="91eb2-106">参照型は、ヒープに割り当てられたです。</span><span class="sxs-lookup"><span data-stu-id="91eb2-106">Reference types are heap-allocated.</span></span> <span data-ttu-id="91eb2-107">参照と値の両方の型は最終的な基底クラスから派生<xref:System.Object>します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-107">Both reference and value types are derived from the ultimate base class <xref:System.Object>.</span></span> <span data-ttu-id="91eb2-108">値型オブジェクトと同様に動作する必要がある場合、ラッパーにより、値の型参照オブジェクトが、ヒープに割り当てられるし、値型の値がそれにコピーするように見えます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-108">In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</span></span> <span data-ttu-id="91eb2-109">システムが認識し、値型が含まれているように、ラッパーがマークされます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-109">The wrapper is marked so the system knows that it contains a value type.</span></span> <span data-ttu-id="91eb2-110">このプロセスは、ボックス化と呼ばれます、逆のプロセスはボックス化解除と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-110">This process is known as boxing, and the reverse process is known as unboxing.</span></span> <span data-ttu-id="91eb2-111">ボックス化とボックス化解除は、任意の型をオブジェクトとして扱うことを許可します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-111">Boxing and unboxing allow any type to be treated as an object.</span></span>  
  
 <span data-ttu-id="91eb2-112"><xref:System.ValueType>暗黙的な基底クラスは、値の型から継承するクラスを作成することはできません<xref:System.ValueType>直接します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-112">Although <xref:System.ValueType> is the implicit base class for value types, you cannot create a class that inherits from <xref:System.ValueType> directly.</span></span> <span data-ttu-id="91eb2-113">代わりに、コンパイラが個々 の言語キーワードを指定または構築 (など`struct`(C#) と`Structure`.`End Structure`</span><span class="sxs-lookup"><span data-stu-id="91eb2-113">Instead, individual compilers provide a language keyword or construct (such as `struct` in C# and `Structure`…`End Structure`</span></span> <span data-ttu-id="91eb2-114">Visual Basic) 値の型の作成をサポートします。</span><span class="sxs-lookup"><span data-stu-id="91eb2-114">in Visual Basic) to support the creation of value types.</span></span>  
  
 <span data-ttu-id="91eb2-115">別に、.NET Framework における値の型の基本クラスとして機能、<xref:System.ValueType>構造がコードで直接使用されません一般的にします。</span><span class="sxs-lookup"><span data-stu-id="91eb2-115">Aside from serving as the base class for value types in the .NET Framework, the <xref:System.ValueType> structure is generally not used directly in code.</span></span> <span data-ttu-id="91eb2-116">ただし、そのできますメソッドの呼び出しでパラメーターとして使用可能な引数をすべてのオブジェクトではなく値の型に制限したり、多数の異なる値型を処理するメソッドを許可するように。</span><span class="sxs-lookup"><span data-stu-id="91eb2-116">However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</span></span> <span data-ttu-id="91eb2-117">次の例を示して 方法<xref:System.ValueType>参照型がメソッドに渡されることを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-117">The following example illustrates how <xref:System.ValueType> prevents reference types from being passed to methods.</span></span> <span data-ttu-id="91eb2-118">という名前のクラスが定義`Utility`4 つのメソッドを格納している: `IsNumeric`、その引数の数値; があるかどうかを示します`IsInteger`の引数は整数であるかどうかを示します`IsFloat`、その引数の浮動小数点数値; がかどうかを示しますと`Compare`、2 つの数値間のリレーションシップを示します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-118">It defines a class named `Utility` that contains four methods: `IsNumeric`, which indicates whether its argument is a number; `IsInteger`, which indicates whether its argument is an integer; `IsFloat`, which indicates whether its argument is a floating-point number; and `Compare`, which indicates the relationship between two numeric values.</span></span> <span data-ttu-id="91eb2-119">各ケースで、メソッドのパラメーターは型の<xref:System.ValueType>参照型はからメソッドに渡されることはありません。</span><span class="sxs-lookup"><span data-stu-id="91eb2-119">In each case, the method parameters are of type <xref:System.ValueType>, and reference types are prevented from being passed to the methods.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 <span data-ttu-id="91eb2-120">次の例のメソッドの呼び出しを示しています、`Utility`クラス。</span><span class="sxs-lookup"><span data-stu-id="91eb2-120">The following example illustrates calls to the methods of the `Utility` class.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91eb2-121"><see cref="T:System.ValueType" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-121">Initializes a new instance of the <see cref="T:System.ValueType" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="91eb2-122">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="91eb2-122">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="91eb2-123">このインスタンスと指定したオブジェクトが等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-123">Indicates whether this instance and a specified object are equal.</span></span></summary>
        <returns><span data-ttu-id="91eb2-124"><see langword="true" /> とこのインスタンスが同じ型で、同じ値を表している場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="91eb2-124"><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91eb2-125"><xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>メソッドのオーバーライド<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>し、.NET Framework 内のすべての値型の値の等価性の既定の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-125">The <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> and provides the default implementation of value equality for all value types in the .NET Framework.</span></span>  
  
 <span data-ttu-id="91eb2-126">場合、現在のインスタンス フィールドの中と`obj`参照型の場合は、<xref:System.ValueType.Equals%2A>メソッドは、メモリ内で 2 つのオブジェクトのバイトで比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-126">If none of the fields of the current instance and `obj` are reference types, the <xref:System.ValueType.Equals%2A> method performs a byte-by-byte comparison of the two objects in memory.</span></span> <span data-ttu-id="91eb2-127">対応するフィールドを比較する、リフレクションを使用して、それ以外の場合、`obj`とこのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="91eb2-127">Otherwise, it uses reflection to compare the corresponding fields of `obj` and this instance.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="91eb2-128">オーバーライドする必要がありますが、値型に参照型であるフィールドが含まれている場合は特に、<xref:System.ValueType.Equals%28System.Object%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="91eb2-128">Particularly if your value type contains fields that are reference types, you should override the <xref:System.ValueType.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="91eb2-129">これはパフォーマンスが向上し、使用すると、型の等価性の意味をより正確に表します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-129">This can improve performance and enable you to more closely represent the meaning of equality for the type.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="91eb2-130">ノートには、 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="91eb2-130">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="91eb2-131">呼び出すと、<xref:System.ValueType.Equals%2A>メソッドを[!INCLUDE[wrt](~/includes/wrt-md.md)]構造をオーバーライドしない値の型の既定の動作を提供、<xref:System.ValueType.Equals%2A>します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-131">When you call the <xref:System.ValueType.Equals%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.Equals%2A>.</span></span> <span data-ttu-id="91eb2-132">これは、.NET Framework では、サポートの一部、 [!INCLUDE[wrt](~/includes/wrt-md.md)] (を参照してください[フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="91eb2-132">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="91eb2-133">構造体をオーバーライドできません<xref:System.ValueType.Equals%2A>で書かれている場合でも、C#または Visual Basic の場合は、メソッドを含めることはできませんので。</span><span class="sxs-lookup"><span data-stu-id="91eb2-133">structures can't override <xref:System.ValueType.Equals%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="91eb2-134">(さらに、内の構造体、[!INCLUDE[wrt](~/includes/wrt-md.md)]自体を継承しない<xref:System.ValueType>)。ただし、あるように見えます<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>と<xref:System.ValueType.GetHashCode%2A>メソッド、c# または Visual Basic のコードで使用すると、.NET Framework は、これらのメソッドの既定の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-134">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91eb2-135">次の例で、<xref:System.ValueType.Equals%2A>派生値型でメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-135">The following example demonstrates how the <xref:System.ValueType.Equals%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91eb2-136">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-136">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="91eb2-137">このインスタンスのハッシュ コードである 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="91eb2-137">A 32-bit signed integer that is the hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91eb2-138"><xref:System.ValueType.GetHashCode%2A>メソッドから派生した型に適用されます<xref:System.ValueType>します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-138">The <xref:System.ValueType.GetHashCode%2A> method applies to types derived from <xref:System.ValueType>.</span></span> <span data-ttu-id="91eb2-139">派生型の 1 つまたは複数のフィールドは、戻り値の計算に使用されます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-139">One or more fields of the derived type is used to calculate the return value.</span></span> <span data-ttu-id="91eb2-140">派生型を呼び出す場合`GetHashCode`メソッド、戻り値は、ハッシュ テーブル内のキーとして使用するために適切である可能性はします。</span><span class="sxs-lookup"><span data-stu-id="91eb2-140">If you call the derived type's `GetHashCode` method, the return value is not likely to be suitable for use as a key in a hash table.</span></span> <span data-ttu-id="91eb2-141">さらに、これらのフィールドの 1 つ以上の値が変更された場合、戻り値は、ハッシュ テーブル内のキーとして使用するため不適切になった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="91eb2-141">Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</span></span> <span data-ttu-id="91eb2-142">いずれの場合も、独自の実装を書き込むことを検討します、<xref:System.ValueType.GetHashCode%2A>より厳密に型のハッシュ コードの概念を表すメソッド。</span><span class="sxs-lookup"><span data-stu-id="91eb2-142">In either case, consider writing your own implementation of the <xref:System.ValueType.GetHashCode%2A> method that more closely represents the concept of a hash code for the type.</span></span>  
  
 <span data-ttu-id="91eb2-143">詳細については、「<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>」および「<xref:System.Collections.Hashtable?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="91eb2-143">For more information, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, and <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="91eb2-144">ノートには、 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="91eb2-144">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="91eb2-145">呼び出すと、<xref:System.ValueType.GetHashCode%2A>メソッドを[!INCLUDE[wrt](~/includes/wrt-md.md)]構造をオーバーライドしない値の型の既定の動作を提供、<xref:System.ValueType.GetHashCode%2A>します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-145">When you call the <xref:System.ValueType.GetHashCode%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.GetHashCode%2A>.</span></span> <span data-ttu-id="91eb2-146">これは、.NET Framework では、サポートの一部、 [!INCLUDE[wrt](~/includes/wrt-md.md)] (を参照してください[フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="91eb2-146">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="91eb2-147">構造体をオーバーライドできません<xref:System.ValueType.GetHashCode%2A>で書かれている場合でも、C#または Visual Basic の場合は、メソッドを含めることはできませんので。</span><span class="sxs-lookup"><span data-stu-id="91eb2-147">structures can't override <xref:System.ValueType.GetHashCode%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="91eb2-148">(さらに、内の構造体、[!INCLUDE[wrt](~/includes/wrt-md.md)]自体を継承しない<xref:System.ValueType>)。ただし、あるように見えます<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>と<xref:System.ValueType.GetHashCode%2A>メソッド、c# または Visual Basic のコードで使用すると、.NET Framework は、これらのメソッドの既定の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-148">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91eb2-149">次の例で、<xref:System.ValueType.GetHashCode%2A>派生値型でメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-149">The following example demonstrates how the <xref:System.ValueType.GetHashCode%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91eb2-150">このインスタンスの完全修飾型名を返します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-150">Returns the fully qualified type name of this instance.</span></span></summary>
        <returns><span data-ttu-id="91eb2-151">完全修飾型名。</span><span class="sxs-lookup"><span data-stu-id="91eb2-151">The fully qualified type name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91eb2-152"><xref:System.ValueType.ToString%2A?displayProperty=nameWithType>メソッドのオーバーライド、<xref:System.Object.ToString%2A?displayProperty=nameWithType>メソッドの既定の実装を提供し、`ToString`値型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="91eb2-152">The <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method and provides the default implementation of the `ToString` method for value types.</span></span> <span data-ttu-id="91eb2-153">(値型によって定義された型では、`struct`と c# のキーワード、 `Structure`.`End Structure` Visual Basic で作成します)。実装はのそれと同じただし、機能的には、 <xref:System.Object.ToString%2A?displayProperty=nameWithType>: 完全修飾型名を返します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-153">(Value types are types defined by the `struct` keyword in C#, and by the `Structure`...`End Structure` construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref:System.Object.ToString%2A?displayProperty=nameWithType>: the method returns the fully qualified type name.</span></span>  
  
 <span data-ttu-id="91eb2-154">によって定義された型の値、`struct`キーワード (C#) および`Structure`.`End Structure`通常 Visual Basic でコンス トラクターをオーバーライド、<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>意味のある値型の文字列表現を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="91eb2-154">Value types defined by the `struct` keyword in C# and the `Structure`...`End Structure` construct in Visual Basic typically override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method to provide a more meaningful string representation of the value type.</span></span> <span data-ttu-id="91eb2-155">この違いを次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-155">The following example illustrates the difference.</span></span> <span data-ttu-id="91eb2-156">2 つの値型を定義`EmployeeA`と`EmployeeB`、それぞれのインスタンスを作成し、呼び出し、その`ToString`メソッド。</span><span class="sxs-lookup"><span data-stu-id="91eb2-156">It defines two value types, `EmployeeA` and `EmployeeB`, creates an instance of each, and calls its `ToString` method.</span></span> <span data-ttu-id="91eb2-157">`EmployeeA`構造を上書きしません、<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>メソッドでは、完全修飾型名のみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="91eb2-157">Because the `EmployeeA` structure does not override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method, it displays only the fully qualified type name.</span></span> <span data-ttu-id="91eb2-158">`EmployeeB.ToString`メソッド、その一方で、意味のあるオブジェクトの情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-158">The `EmployeeB.ToString` method, on the other hand, provides meaningful information about the object.</span></span>  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 <span data-ttu-id="91eb2-159">列挙型が値型ではまたから派生する注意してください、<xref:System.Enum>クラスでオーバーライドされます<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-159">Note that, although enumeration types are also value types, they derive from the <xref:System.Enum> class, which overrides  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-windows-runtime"></a><span data-ttu-id="91eb2-160">Windows ランタイムのノート</span><span class="sxs-lookup"><span data-stu-id="91eb2-160">Notes for the Windows Runtime</span></span>  
 <span data-ttu-id="91eb2-161">呼び出すと、<xref:System.ValueType.ToString%2A>メソッドを[!INCLUDE[wrt](~/includes/wrt-md.md)]構造をオーバーライドしない値の型の既定の動作を提供、<xref:System.ValueType.ToString%2A>します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-161">When you call the <xref:System.ValueType.ToString%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.ToString%2A>.</span></span> <span data-ttu-id="91eb2-162">これは、.NET Framework では、サポートの一部、 [!INCLUDE[wrt](~/includes/wrt-md.md)] (を参照してください[フレームワークをサポートして Windows ストア アプリ用 .NET と Windows ランタイム](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="91eb2-162">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="91eb2-163">構造体をオーバーライドできません<xref:System.ValueType.ToString%2A>で書かれている場合でも、C#または Visual Basic の場合は、メソッドを含めることはできませんので。</span><span class="sxs-lookup"><span data-stu-id="91eb2-163">structures can't override <xref:System.ValueType.ToString%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="91eb2-164">(さらに、内の構造体、[!INCLUDE[wrt](~/includes/wrt-md.md)]自体を継承しない<xref:System.ValueType>)。ただし、あるように見えます<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>と<xref:System.ValueType.GetHashCode%2A>メソッド、c# または Visual Basic のコードで使用すると、.NET Framework は、これらのメソッドの既定の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="91eb2-164">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>