<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f683bb0c7fae8662dc3756422fe73cbdcfa28c55" /><Meta Name="ms.sourcegitcommit" Value="71cd9c2de2cd52bd5b71424de92feb029aa2818b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/09/2019" /><Meta Name="ms.locfileid" Value="72186175" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>値の型の基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> は、@no__t からの仮想メソッドを、値型のより適切な実装でオーバーライドします。 @No__t-1 から継承する <xref:System.Enum> も参照してください。  
  
 データ型は、値型と参照型に分けられます。 値型は、構造体にスタック割り当てまたはインラインで割り当てられます。 参照型はヒープに割り当てられます。 参照型と値型はどちらも、最終的な基本クラス <xref:System.Object> から派生します。 値型をオブジェクトのように動作させる必要がある場合は、値型を作成するラッパーが参照オブジェクトと同様にヒープに割り当てられ、値型の値がコピーされます。 ラッパーは、値の型が含まれていることをシステムが認識するようにマークされています。 このプロセスはボックス化と呼ばれ、逆のプロセスはボックス化解除と呼ばれます。 ボックス化とボックス化解除を使用すると、任意の型をオブジェクトとして扱うことができます。  
  
 @No__t-0 は値型の暗黙的な基底クラスですが、<xref:System.ValueType> から継承するクラスを直接作成することはできません。 代わりに、個々のコンパイラは、言語のキーワードまたはコンストラクトを提供しますC# (の `struct`、`Structure`... `End Structure` Visual Basic) で、値型の作成をサポートします。  
  
 .NET Framework の値型の基底クラスとして機能するのではなく、通常、@no__t 0 の構造はコードで直接使用されません。 ただし、メソッドの呼び出しでパラメーターとして使用して、すべてのオブジェクトではなく値型に対して可能な引数を制限したり、メソッドがさまざまな値型を処理できるようにしたりすることができます。 次の例は、<xref:System.ValueType> が参照型をメソッドに渡さないようにする方法を示しています。 このクラスは、4つのメソッドを含む `Utility` という名前のクラスを定義します。これは、引数が数値であるかどうかを示す `IsNumeric` です。`IsInteger`。引数が整数であるかどうかを示します。`IsFloat`。引数が浮動小数点数であるかどうかを示します。と @no__t 2 つの数値の間の関係を示す-4 です。 どちらの場合も、メソッドパラメーターの型は <xref:System.ValueType> であり、参照型はメソッドに渡されません。  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 次の例は、`Utility` クラスのメソッドの呼び出しを示しています。  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ValueType" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスと指定したオブジェクトが等しいかどうかを示します。</summary>
        <returns><see langword="true" /> とこのインスタンスが同じ型で、同じ値を表している場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 @No__t-0 メソッドは <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> をオーバーライドし、.NET Framework 内のすべての値型について、値が等しいかどうかの既定の実装を提供します。  
  
 既定の実装では、現在の @no__t インスタンスの各フィールドで <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> が呼び出され、すべてのフィールドが等しい場合は `true` が返されます。
  
> [!TIP]
>  特に、値型に参照型のフィールドが含まれている場合は、<xref:System.ValueType.Equals%28System.Object%29> メソッドをオーバーライドする必要があります。 これにより、パフォーマンスが向上し、型の等価性の意味をより正確に表すことができます。  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>@No__t のメモ-0  
 @No__t-1 の構造体で <xref:System.ValueType.Equals%2A> メソッドを呼び出すと、<xref:System.ValueType.Equals%2A> をオーバーライドしない値型の既定の動作が提供されます。 これは、.NET Framework が @no__t 0 に対して提供するサポートの一部です (「 [Windows ストアアプリと Windows ランタイムの .NET Framework サポート](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)」を参照してください)。 @no__t 0 の構造体は、メソッドを持つことができないため、 C#または Visual Basic で記述されている場合でも、@no__t をオーバーライドすることはできません。 (さらに、@no__t 0 の構造体は <xref:System.ValueType> を継承しません)。ただし、これらのメソッドをC#または Visual Basic コードで使用すると、<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>、<xref:System.ValueType.GetHashCode%2A> の各メソッドがあるように見えます。また、.NET Framework には、これらのメソッドの既定の動作が用意されています。  
  
   
  
## Examples  
 次の例は、<xref:System.ValueType.Equals%2A> メソッドを派生値型でオーバーライドする方法を示しています。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>このインスタンスのハッシュ コードである 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 @No__t-0 メソッドは、<xref:System.ValueType> から派生した型に適用されます。 派生型の1つ以上のフィールドを使用して、戻り値を計算します。 派生型の @no__t 0 メソッドを呼び出すと、戻り値は、ハッシュテーブルのキーとして使用するのに適していない可能性があります。 また、これらのフィールドの1つ以上の値が変更された場合、その戻り値は、ハッシュテーブルのキーとして使用するのに適していない可能性があります。 どちらの場合も、型のハッシュコードの概念をより厳密に表す <xref:System.ValueType.GetHashCode%2A> メソッドの独自の実装を記述することを検討してください。  
  
 詳細については、「<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>」および「<xref:System.Collections.Hashtable?displayProperty=nameWithType>」を参照してください。  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>@No__t のメモ-0  
 @No__t-1 の構造体で <xref:System.ValueType.GetHashCode%2A> メソッドを呼び出すと、<xref:System.ValueType.GetHashCode%2A> をオーバーライドしない値型の既定の動作が提供されます。 これは、.NET Framework が @no__t 0 に対して提供するサポートの一部です (「 [Windows ストアアプリと Windows ランタイムの .NET Framework サポート](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)」を参照してください)。 @no__t 0 の構造体は、メソッドを持つことができないため、 C#または Visual Basic で記述されている場合でも、@no__t をオーバーライドすることはできません。 (さらに、@no__t 0 の構造体は <xref:System.ValueType> を継承しません)。ただし、これらのメソッドをC#または Visual Basic コードで使用すると、<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>、<xref:System.ValueType.GetHashCode%2A> の各メソッドがあるように見えます。また、.NET Framework には、これらのメソッドの既定の動作が用意されています。  
  
   
  
## Examples  
 次の例は、<xref:System.ValueType.GetHashCode%2A> メソッドを派生値型でオーバーライドする方法を示しています。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの完全修飾型名を返します。</summary>
        <returns>完全修飾型名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 @No__t-0 メソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType> メソッドをオーバーライドし、値型に対して `ToString` メソッドの既定の実装を提供します。 (値型は、のC#@no__t 0 キーワードで定義された型であり、Visual Basic で `Structure`... `End Structure` コンストラクトによって定義されています)。ただし、機能的には、実装は <xref:System.Object.ToString%2A?displayProperty=nameWithType> の実装と同じです。メソッドは完全修飾型名を返します。  
  
 のC# `struct` キーワードによって定義される値型と、Visual Basic 内の `Structure`... `End Structure` コンストラクトは、通常、<xref:System.ValueType.ToString%2A?displayProperty=nameWithType> メソッドをオーバーライドして、より意味のある値型の文字列表現を提供します。 この違いを次の例に示します。 この例では、2つの値型 (`EmployeeA` と `EmployeeB`) を定義し、それぞれのインスタンスを作成し、その `ToString` メソッドを呼び出します。 @No__t 0 構造体は <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> メソッドをオーバーライドしないため、完全修飾型名のみが表示されます。 一方、@no__t 0 のメソッドでは、オブジェクトに関する意味のある情報が提供されます。  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 列挙型も値型であることに注意してくださいが、<xref:System.ValueType.ToString%2A?displayProperty=nameWithType> をオーバーライドする @no__t 0 クラスから派生することに注意してください。  
  
## <a name="notes-for-the-windows-runtime"></a>Windows ランタイムのメモ  
 @No__t-1 の構造体で <xref:System.ValueType.ToString%2A> メソッドを呼び出すと、<xref:System.ValueType.ToString%2A> をオーバーライドしない値型の既定の動作が提供されます。 これは、.NET Framework が @no__t 0 に対して提供するサポートの一部です (「 [Windows ストアアプリと Windows ランタイムの .NET Framework サポート](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)」を参照してください)。 @no__t 0 の構造体は、メソッドを持つことができないため、 C#または Visual Basic で記述されている場合でも、@no__t をオーバーライドすることはできません。 (さらに、@no__t 0 の構造体は <xref:System.ValueType> を継承しません)。ただし、これらのメソッドをC#または Visual Basic コードで使用すると、<xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>、<xref:System.ValueType.GetHashCode%2A> の各メソッドがあるように見えます。また、.NET Framework には、これらのメソッドの既定の動作が用意されています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
