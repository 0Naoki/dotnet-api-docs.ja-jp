<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="00bc57fe4b751be39835f14d9bafaaef66b41c8d" />
    <Meta Name="ms.sourcegitcommit" Value="6f3d3181d9ca22a1ab46a7f61f3ee152f2b844ea" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/27/2018" />
    <Meta Name="ms.locfileid" Value="50172960" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>列挙体をビット フィールド、つまりフラグのセットとして扱えることを示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ビット フィールドは、相互に排他的な要素の一覧の列挙定数が使用される一般に対しを組み合わせて、要素の一覧については通常使用されます。 そのため、ビット フィールドは、列挙定数でないが、名前のない値を生成するビットごとの OR 演算と組み合わせるに設計されています。 言語は、列挙定数と比較して、ビット フィールドの使用によって異なります。  
  
## <a name="attributes-of-the-flagsattribute"></a>FlagsAttribute 属性  
 <xref:System.AttributeUsageAttribute> このクラスに適用し、その<xref:System.AttributeUsageAttribute.Inherited%2A>プロパティを指定します`false`します。 この属性は、列挙型にのみ適用できます。  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>FlagsAttribute 列挙型のガイドライン  
  
-   使用して、<xref:System.FlagsAttribute>列挙体はビットごとの演算 (AND、OR の排他的 OR) は、数値に対して実行する場合にのみカスタム属性。  
  
-   つまり、1、2、4、8、および具合 2 の累乗で、列挙定数を定義します。 これは、結合された列挙定数の個々 のフラグが重複しないことを意味します。  
  
-   一般的に使用されるフラグの組み合わせの列挙型の定数を作成することを検討してください。 たとえば、ファイル I/O 操作のための列挙体がある場合を含む列挙型定数`Read = 1`と`Write = 2`、列挙型の定数を作成すること検討`ReadWrite = Read OR Write`を組み合わせる、`Read`と`Write`フラグ。 さらに、フラグの組み合わせに使用されるビットごとの OR 演算に単純なタスクに必要なすべきいくつかの状況での高度な概念を考慮することがあります。  
  
-   多くのフラグの位置は 1 では、コードに混乱する可能性がありますし、コーディング エラーに設定する可能性がありますので、フラグ列挙型定数として負の数を定義する場合は、注意を使用します。  
  
-   数値の値で、フラグが設定されているかどうかをテストする便利な方法は、数値の値と、フラグに対応していないゼロを数値にすべてのビットを設定するフラグの列挙型定数のビットごとの AND 演算を実行するには、し、その操作の結果がフラグ列挙型定数と等しいかどうかをテストします。  
  
-   使用`None`フラグの名前は列挙定数の値が 0 として。 使用することはできません、`None`のため、結果は常に 0 フラグをテストするビットごとの AND 演算の列挙型定数。 ただし、行うことができます、論理、数値の間で、ビットごとの比較しないと、`None`数値の値のビットが設定されているかどうかを決定する列挙型定数。  
  
     作成するには有用ですフラグ列挙体ではなく値の列挙体を作成する場合、`None`列挙型定数。 理由は、既定では、列挙に使用されるメモリは 0 に初期化は、共通言語ランタイムによって。 そのため、値が 0 の定数を定義していない場合、作成時に、列挙体は値が無効含まれます。  
  
     アプリケーションを表す必要がある、明確な既定のケースがある場合は、値がゼロを既定値を表す列挙定数の使用を検討してください。 既定のケースがない場合、他の列挙定数のいずれかで表されないケースの値は 0 です。 列挙型の定数を使用することを意味を検討してください。  
  
-   列挙型自体の状態を反映するためだけにする列挙値を定義しません。 たとえば、単なる列挙体の末尾を示す列挙型の定数を定義してください。 列挙体の最後の値を決定する必要がある場合は、その値を明示的にチェックします。 さらに、範囲内のすべての値が有効な場合は、最初と最後の列挙型定数の範囲チェックを実行できます。  
  
-   将来使用するために予約されている列挙型定数は指定しません。  
  
-   メソッドまたは列挙型定数の値を受け取るプロパティを定義するときに、値の検証を検討してください。 理由は、その数値の値が列挙体で定義されていない場合でも、数値の値を列挙型にキャストすることです。  
  
   
  
## Examples  
 使用例を次に示します、`FlagsAttribute`属性し、に対する効果を示します、<xref:System.Enum.ToString%2A>メソッドを使用しての`FlagsAttribute`上、<xref:System.Enum>宣言します。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 次の例は、2 つの色関連の列挙を定義します。`SingleHue`と`MultiHue`します。 後者の場合は、`FlagsAttribute`属性。 前者はありません。 列挙型の基になる値ではない整数を含む整数の範囲は、列挙型、および表示文字列表現にキャストするときは、動作の違いを示します。   たとえば、3 として表すことができないことに注意してください、 `SingleHue` 3 は、いずれかの基になる値ではないため、その値`SingleHue`メンバー、一方、`FlagsAttribute`属性では、3 として表すことが、`MultiHue`の値`Black, Red`。  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.FlagsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、定義、`PhoneService`電話会社によって提供される通信のフォームを表す列挙体。 次の 3 つの異なる家庭に提供されるサービスを表す 3 つの変数を初期化し、し、どの家庭には、どの家庭、携帯電話サービスのみがありどの家庭携帯電話と land の両方の行のサービスのサービスがないことを示します。 最後に、暗黙的に呼び出す、<xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType>各世帯に提供されるサービスの種類を表示するメソッド。  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 使用例を次に示します、`FlagsAttribute`属性し、に対する効果を示します、<xref:System.Enum.ToString%2A>メソッドを使用しての`FlagsAttribute`上、<xref:System.Enum>宣言します。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>