<Type Name="DateTime" FullName="System.DateTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa3f7d4eee2778992089a62f7eef6c3dd4191614" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52599839" /></Metadata><TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>通常、日付や時刻として表現される瞬間を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>コード例へのクイック リンク

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

この記事には、使用するいくつかの例が含まれています、`DateTime`型。

**初期化の例**      
- [コンス トラクターを呼び出す](#initialization-01)
- [暗黙の既定のコンス トラクターを呼び出す](#initialization-02)
- [戻り値の割り当て](#initialization-03)
- [日付と時刻を表す文字列の解析](#initialization-04)
- [日付と時刻に初期化するために Visual Basic 構文](#initialization-05)

**書式設定`DateTime`オブジェクトを文字列として**  
- [既定の日付時刻形式を使用して、](#formatting-01)
- [日付と時刻を特定のカルチャを使用して書式設定します。](#formatting-02)
- [標準またはカスタム書式指定文字列を使用して日付時刻を書式設定します。](#formatting-03)
- [書式指定文字列と、特定のカルチャの両方を指定します。](#formatting-04)
- [Web サービスの ISO 8601 標準を使用して日付時刻を書式設定します。](#formatting-05)

**として文字列の解析`DateTime`オブジェクト**  
- [使用`Parse`または`TryParse`日付と時刻を文字列に変換するには](#parsing-01)
- [使用`ParseExact`または`TryParseExact`既知の形式の文字列に変換するには](#parsing-02)
- [ISO 8601 文字列から日付と時刻に変換します。](#parsing-03)

**`DateTime` 解決方法**  
- [日付と時刻の値の解像度を調べる](#resolution-01)
- [等しいかどうか、許容範囲内で比較します。](#comparison-01)

**カルチャと予定表**  
- [カルチャ固有のカレンダーを使用して日付と時刻の値を表示します。](#calendars-01)
- [カルチャ固有のカレンダーに従って文字列を解析します。](#calendars-02)
- [日付と時刻特定のカルチャのカレンダーからを初期化します。](#calendars-03)
- [特定のカルチャの暦を使用して日付と時刻のプロパティへのアクセス](#calendars-04)
- [カルチャ固有のカレンダーを使用して年の通算週を取得します。](#calendars-05)

**永続性**  
- [ローカル タイム ゾーン文字列として日付と時刻の値を保持します。](#persistence-01)
- [インバリアント カルチャの日時形式で文字列として日付と時刻の値を保持します。](#persistence-02)
- [整数値として日付と時刻の値を保持します。](#persistence-03)
- [永続化する日付と時刻の値を使用して、 `XmlSerializer`](#persistence-04)
- [永続化する日付と時刻の値を使用して、 `BinaryFormatter`](#persistence-05)
- [タイム ゾーン データ永続化する日付と時刻の値](#persistence-06)

## <a name="quick-links-to-remarks-topics"></a>「解説」トピックへのクイック リンク。

このセクションには多くの一般的な使用法に関するトピックが含まれています、`DateTime`構造体。
  
- [初期化を`DateTime`オブジェクト](#initializing-a-datetime-object)
- [DateTime 値とその文字列表現](#datetime-values-and-their-string-representations)
- [文字列から DateTime 値の解析](#parsing-datetime-values-from-strings)
- [DateTime 値](#datetime-values)
- [DateTime 操作](#datetime-operations)
- [DateTime の解決](#datetime-resolution)
- [DateTime 値との予定表](#datetime-values-and-calendars)
- [DateTime 値の永続化](#persisting-datetime-values)
- [DateTime とします。timeSpan](#datetime-vs-timespan)
- [許容範囲内で等しいかどうかを比較します。](#comparing-for-equality-within-tolerance)
- [COM 相互運用機能に関する考慮事項](#com-interop-considerations)
   
<xref:System.DateTime>値の型の日付を表すし、西暦 9999 年 12 月 31 日までの値で 00時 00分: 00 (午前 0 時)、1 月 1 日から 0001 西暦紀元 11時 59分: 59 PM、使用時間 (西暦)構成のグレゴリオ暦カレンダーです。  
  
時刻の値は、タイマー刻み 100 ナノ秒単位で測定されます。 特定の日付では、タイマー刻みの数を西暦 0001 年 1 月 1 日午前 12時 00分時以降 (西暦)<xref:System.Globalization.GregorianCalendar>カレンダーです。 数は、うるう秒によって追加されるタイマー刻みを除外します。 たとえば、31241376000000000l のタイマー刻みの値は、午前 12時 00分: 00 0100 年 1 月 01日金曜日の日付表します。 A<xref:System.DateTime>値が常に明確なコンテキストまたは既定の暦で表されます。  
  
> [!NOTE]
>  分または秒などの他の時間間隔に変換することは、使用する必要があります、タイマー刻みの値を使用している場合、 <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>、または<xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType>変換を実行する定数。 たとえば、秒数を追加するによって表されるをタイマー刻み数が指定された、<xref:System.DateTime.Second%2A>のコンポーネントである、<xref:System.DateTime>値、式を使用することができます`dateValue.Second + nTicks/Timespan.TicksPerSecond`。  

この記事の例のセット全体のソースを表示するにはいずれかで[Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/)または[c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) GitHub の docs リポジトリから。

> [!NOTE]
>  代わりに、<xref:System.DateTime>は具体的にはタイム ゾーンの日付と時刻の値を操作の構造体、<xref:System.DateTimeOffset>構造体。 <xref:System.DateTimeOffset>構造体をプライベートの日付と時刻の情報を格納する<xref:System.DateTime>フィールドと、これによって、日付し、時刻の分の数、プライベートで UTC と異なる<xref:System.Int16>フィールド。 できるようになります、<xref:System.DateTimeOffset>値は、特定のタイム ゾーンの時間を反映するように、<xref:System.DateTime>値は、明確にのみ UTC とローカル タイム ゾーンの時刻を反映できます。 使用する場合について、<xref:System.DateTime>構造体、または<xref:System.DateTimeOffset>日付と時刻の値を使用する場合に構造体は、「[選択の間で DateTime DateTimeOffset TimeSpan、および TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md)します。  
  
### <a name="initializing-a-datetime-object"></a>DateTime オブジェクトの初期化  

新しいパスワードに、初期値を割り当てることができます`DateTime`さまざまな方法で値。

- いずれかの値については、引数を指定するコンス トラクターの呼び出しまたは暗黙的な既定のコンス トラクターを使用します。
- 割り当てを`DateTime`プロパティまたはメソッドの戻り値にします。
- 解析、`DateTime`文字列表現からの値。
- インスタンス化する Visual Basic 固有の言語機能を使用して、`DateTime`します。 

次のコード スニペットでは、それぞれの例を示します。

#### <a name="invoke-constructors"></a>コンス トラクターを呼び出す

オーバー ロードを呼び出す、 <xref:System.DateTime> (年、月、および日、またはタイマー刻みの数) などの日付と時刻の値の要素を指定するコンス トラクター。 次のコードを使用して、特定の日付、<xref:System.DateTime>年、月、日、時間、分、および秒を指定するコンス トラクター。  

<a name="initialization-01"></a>  
[!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

呼び出す、`DateTime`するときに構造体の暗黙的な既定のコンス トラクター、`DateTime`その既定値に初期化します。 (詳細については、値型の暗黙的な既定のコンス トラクターは、次を参照してください[値型](~/docs/csharp/language-reference/keywords/value-types.md)。)。一部のコンパイラが宣言をサポートしても、<xref:System.DateTime>明示的に値を割り当てずの値。 既定値で結果もせず、明示的な初期化の値を作成します。 次の例を示しています、 <xref:System.DateTime> c# および Visual Basic では、暗黙の既定のコンス トラクターと同様に、 <xref:System.DateTime> Visual Basic での割り当てなしの宣言。  

<a name="initialization-02"></a>  
[!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>計算値を割り当てる

割り当てることができます、<xref:System.DateTime>オブジェクトのプロパティまたはメソッドによって返される日付と時刻の値。 次の例では、割り当て、現在の日付と時刻、世界協定時刻 (UTC) の現在の日付と時刻と現在の日付に 3 つの新しい<xref:System.DateTime>変数。  

<a name="initialization-03"></a>  
[!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>DateTime を表す文字列の解析

<xref:System.DateTime.Parse%2A>、 <xref:System.DateTime.ParseExact%2A>、 <xref:System.DateTime.TryParse%2A>、および<xref:System.DateTime.TryParseExact%2A>メソッドはすべて、文字列を等価の日付と時刻の値に変換します。 次の例を使用して、<xref:System.DateTime.Parse%2A>と<xref:System.DateTime.ParseExact%2A>文字列を解析およびに変換するメソッドを<xref:System.DateTime>値。 2 番目の形式でサポートされている形式を使用して、 [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)標準を表す日付と時刻文字列の形式です。 この標準的な表現は、web サービスの日付情報を転送によく使用します。

<a name="initialization-04"></a>  
[!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

<xref:System.DateTime.TryParse%2A>と<xref:System.DateTime.TryParseExact%2A>メソッドは、文字列の有効な表現であるかどうかを示す、<xref:System.DateTime>と、値の場合は、変換を実行します。  

#### <a name="language-specific-syntax-for-visual-basic"></a>Visual basic の言語固有の構文

次の Visual Basic ステートメントは、新しい初期化<xref:System.DateTime>値。  

<a name="initialization-05"></a>  
[!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>DateTime 値とその文字列表現  

内部的には、すべて<xref:System.DateTime>値は 0001 年 1 月 1 日の午前 12時 00分: 00 から経過したタイマー刻み (100 ナノ秒間隔の数) の数として表されます。 実際、<xref:System.DateTime>値は表示されるときに、その値の表示方法に依存しません。 外観を<xref:System.DateTime>値が値を文字列表現に変換する書式設定操作の結果。  
  
日付と時刻の値の外観では、カルチャ、国際標準、アプリケーションの要件、および個人の好みによります。 <xref:System.DateTime>構造体のオーバー ロードによって、日付と時刻の値の書式設定の柔軟性を提供する<xref:System.DateTime.ToString%2A>します。 既定の<xref:System.DateTime.ToString?displayProperty=nameWithType>メソッドは、現在のカルチャの短い形式の日付および時間の長い時刻パターンを使用して日付と時刻の値の文字列表現を返します。 次のコードの例では、既定値<xref:System.DateTime.ToString?displayProperty=nameWithType>メソッド。 現在のカルチャの短い日付と長い時刻パターンを使用して日時を表示します。 EN-US カルチャは、例が実行されたコンピューターの現在のカルチャです。  
  
<a name="formatting-01"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

クライアントから別のカルチャで、サーバー可能性がある web シナリオをサポートするために、特定のカルチャの日付の書式設定する必要があります。 使用して、カルチャを指定する、<xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>特定のカルチャの短い日付と長い時刻形式を作成します。 次の例では、<xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>日付し、時刻の FR-FR カルチャの短い日付と長い時刻パターンを使用するメソッド。  
  
<a name="formatting-02"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 その他のアプリケーションには、日付の別の文字列表現が必要です。 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>メソッドは、現在のカルチャの書式指定規則を使用して、標準またはカスタム書式指定子によって定義された文字列表現を返します。 次の例では、 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> en-us で時刻のパターンと完全な日付を表示する方法をカルチャ、例が実行されたコンピューターの現在のカルチャ。  
  
<a name="formatting-03"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 最後に、カルチャと形式を使用して、両方を指定、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッド。 次の例では、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>完全な日付と時刻のパターン、FR-FR カルチャを表示するメソッド。  

<a name="formatting-04"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>他の形式を指定するカスタム書式指定文字列でオーバー ロードが使用もできます。 次の例を使用して文字列を書式設定する方法を示しています、 [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) web サービスに使用される多くの場合、標準の形式。 Iso 8601 形式には、対応する標準書式指定文字列はありません。

<a name="formatting-05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

書式設定の詳細については<xref:System.DateTime>値を参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  

### <a name="parsing-datetime-values-from-strings"></a>文字列から DateTime 値の解析

日付と時刻を文字列形式を変換する解析を<xref:System.DateTime>値。 通常、日付と時刻の文字列では、アプリケーションに 2 つのさまざまな使用法があります。  
  
-   日付と時刻は、さまざまなフォームを受け取り、現在のカルチャまたは特定のカルチャのいずれかの規則を反映します。 たとえば、アプリケーションでは、現在のカルチャが「12/15/2013」または「2013 年 12 月 15 日」と日付の値を入力するには、EN-US ユーザーが使用できます。 これにより、ユーザーが現在のカルチャが「2013/15/12」または「15 年 12 月の 2013」として、日付の値を入力するには、en-gb  
  
-   日付と時刻は、定義済みの形式で表されます。 たとえば、アプリケーションでは、アプリが実行されているカルチャとは無関係に「20130103」としての日付をシリアル化します。 アプリケーションが必要があります、現在のカルチャの短い日付形式で日付を入力します。
  
使用する、<xref:System.DateTime.Parse%2A>または<xref:System.DateTime.TryParse%2A>カルチャで使用される一般的な日付と時刻の形式のいずれかから文字列に変換するメソッド、<xref:System.DateTime>値。 次の例は、使用する方法を示しています。<xref:System.DateTime.TryParse%2A>を異なるカルチャに固有の形式で日付文字列に変換する、<xref:System.DateTime>値。 英語 (英国) を呼び出し、現在のカルチャを変更、<xref:System.DateTime.GetDateTimeFormats>日付と時刻の文字列の配列を生成します。 これは、後、配列内の各要素を渡します、<xref:System.DateTime.TryParse%2A>メソッド。 例の出力は、解析メソッドが正常に各カルチャに固有の日付と時刻の文字列を変換することを示しています。  
  
<a name="parsing-01"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

使用する、<xref:System.DateTime.ParseExact%2A>と<xref:System.DateTime.TryParseExact%2A>を特定の形式または形式に一致する必要がある文字列を変換するメソッド、<xref:System.DateTime>値。 解析メソッドのパラメーターとしては、日付と時刻の書式指定文字列を 1 つまたは複数を指定します。 次の例では、 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> "yyyyMMdd"形式または"HHmmss"形式のいずれかにする必要がある文字列に変換するメソッド<xref:System.DateTime>値。  
  
<a name="parsing-02"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

1 つの一般的な用途<xref:System.DateTime.ParseExact%2A>では、通常、web サービスからの文字列形式に変換するには[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)標準書式指定します。 次のコードは、使用する正しい形式の文字列を示しています。

<a name="parsing-03"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

文字列を解析できない場合、<xref:System.DateTime.Parse%2A>と<xref:System.DateTime.ParseExact%2A>メソッドが例外をスローします。 <xref:System.DateTime.TryParse%2A>と<xref:System.DateTime.TryParseExact%2A>メソッドを返す、<xref:System.Boolean>変換が成功したか、失敗したかどうかを示す値。 使用する必要があります、<xref:System.DateTime.TryParse%2A>または<xref:System.DateTime.TryParseExact%2A>パフォーマンスが重要なシナリオでのメソッド。 日付と時刻文字列の解析操作は、高い失敗率がある傾向があり、例外処理は高価なのです。 ユーザーが入力文字列の場合は、これらのメソッドを使用または不明なソースから取得します。 
  
日付と時刻の値を解析の詳細については、次を参照してください。[解析の日付と時刻文字列](~/docs/standard/base-types/parsing-datetime.md)します。  

### <a name="datetime-values"></a>DateTime 値

時刻の値の説明については、<xref:System.DateTime>型は、世界協定時刻 (UTC) 標準を使用して表されます。 世界協定時刻は、国際的に認められた名前グリニッジ標準時 (GMT) です。 世界協定時刻は、0 度経度、UTC の起点で測定される時間です。 夏時間では、UTC を適用されません。  
  
現地時刻では、特定のタイム ゾーンを基準とします。 タイム ゾーンは、タイム ゾーン オフセットに関連付けられます。 タイム ゾーン オフセットは、タイム ゾーンを UTC の原点からの時間単位の距離です。 さらに、ローカル時刻は夏時間、加算または減算する時間間隔を調整するによって影響を受ける必要に応じて。 現地時刻は、UTC と必要な場合の夏時間の調整にタイム ゾーン オフセットを加算して計算されます。 UTC の原点にあるタイム ゾーン オフセットには 0 です。  
  
UTC 時刻は、ファイル内の計算、比較、および格納の日付と時刻に適しています。 現地時刻では、デスクトップ アプリケーションのユーザー インターフェイスでの表示に適しています。 (多くの Web アプリケーション) などのタイム ゾーン対応のアプリケーションも、さまざまな他のタイム ゾーンを使用する必要があります。  
  
場合、<xref:System.DateTime.Kind%2A>のプロパティを<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>、表される時刻は、現地時刻、UTC 時刻、またはその他のいくつかのタイム ゾーンの時刻かどうか明らかではありません。  

### <a name="datetime-resolution"></a>DateTime の解決
  
> [!NOTE]
>  日付と時刻の算術演算を実行するための代替として<xref:System.DateTime>、経過時間を測定する値を使用することができます、<xref:System.Diagnostics.Stopwatch>クラス。  
  
<xref:System.DateTime.Ticks%2A>プロパティは 1 つ 10 分の 1 秒の単位での日付と時刻の値を表します。 <xref:System.DateTime.Millisecond%2A>プロパティは、日付と時刻の値の秒部分の 1/1000 を返します。 繰り返しの呼び出しを使用して、<xref:System.DateTime.Now%2A?displayProperty=nameWithType>経過時間を測定するプロパティは、システム クロックに依存します。 Windows 7 および Windows 8 システムのシステム クロックは、解像度は約 15 ミリ秒です。 この解像度は 100 ミリ秒未満の小規模の時間間隔に影響します。 
  
次の例では、システム時計の解像度に現在の日付と時刻の値の依存関係を示します。 例では、外側のループが 20 回繰り返され、内側のループが、外側のループを遅延するために使用します。 かどうか、外側のループ カウンターの値は 10 への呼び出し、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドには 5 ミリ秒の遅延が導入されています。 次の例では、によって返されたミリ秒数、`DateTime.Now.Milliseconds`プロパティの変更を呼び出した後だけ<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>です。  

<a name="resolution-01"></a>  
[!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>DateTime 操作  

使用して、計算、<xref:System.DateTime>構造体など<xref:System.DateTime.Add%2A>または<xref:System.DateTime.Subtract%2A>、構造体の値を変更しません。 代わりに、計算は、新しい返します<xref:System.DateTime>値が計算の結果。  
  
タイム ゾーン (たとえば、UTC と現地時刻、または 1 つのタイム ゾーン間で) 間で変換操作を夏時間を考慮するが、算術演算や比較操作はありません。  
  
<xref:System.DateTime>構造体自体を変換する 1 つのタイム ゾーンの制限付きサポートを提供しています。 使用することができます、 <xref:System.DateTime.ToLocalTime%2A> UTC を現地時刻、または変換する方法を使用することができます、<xref:System.DateTime.ToUniversalTime%2A>現地時刻から UTC に変換するメソッド。 ただし、タイム ゾーン変換メソッドの完全なセットがで使用できる、<xref:System.TimeZoneInfo>クラス。 これらのメソッドを使用して他の任意のタイム ゾーンの時刻には、世界のタイム ゾーンのいずれかで時刻を変換します。  
  
計算および比較<xref:System.DateTime>オブジェクトは、オブジェクトが同じタイム ゾーンの時刻を表す場合にのみ意味を持ちます。 使用することができます、<xref:System.TimeZoneInfo>を表すオブジェクトを<xref:System.DateTime>値のタイム ゾーンの 2 つは疎結合が。 A<xref:System.DateTime>オブジェクトに日付と時刻値のタイム ゾーンを表すオブジェクトを返すプロパティがありません。 <xref:System.DateTime.Kind%2A>プロパティを示す場合、 `DateTime` UTC、現地時刻を表すまたはが指定されていません。 タイム ゾーン対応のアプリケーションでは、するタイム ゾーンを判断するいくつかの外部メカニズムに依存する必要があります、<xref:System.DateTime>オブジェクトが作成されました。 両方をラップする構造体を使用する可能性があります、<xref:System.DateTime>値と<xref:System.TimeZoneInfo>を表すオブジェクトを<xref:System.DateTime>値のタイム ゾーン。 UTC を計算および使用する比較の使用の詳細について<xref:System.DateTime>値を参照してください[日付と時刻の算術演算の実行](~/docs/standard/datetime/performing-arithmetic-operations.md)します。  
  
各<xref:System.DateTime>メンバーがその操作を実行する構成のグレゴリオ暦カレンダーを暗黙的に使用します。 例外は、カレンダーを暗黙的に指定するメソッドです。 カレンダーを指定するコンス トラクターが含まれますから派生したメソッド パラメーターを持つ<xref:System.IFormatProvider>など<xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>します。  
  
操作のメンバーによって、<xref:System.DateTime>型がうるう年や 1 か月の日数などのアカウントの詳細を考慮します。  

## <a name="datetime-values-and-calendars"></a>DateTime 値との予定表  

.NET Framework クラス ライブラリにはから派生するすべての calendar クラスの数値が含まれています、<xref:System.Globalization.Calendar>クラス。  それらは次のとおりです。  
  
-   <xref:System.Globalization.ChineseLunisolarCalendar> クラス  
-   <xref:System.Globalization.EastAsianLunisolarCalendar> クラス  
-   <xref:System.Globalization.GregorianCalendar> クラス  
-   <xref:System.Globalization.HebrewCalendar> クラス  
-   <xref:System.Globalization.HijriCalendar> クラス  
-   <xref:System.Globalization.JapaneseCalendar> クラス  
-   <xref:System.Globalization.JapaneseLunisolarCalendar> クラス  
-   <xref:System.Globalization.JulianCalendar> クラス  
-   <xref:System.Globalization.KoreanCalendar> クラス  
-   <xref:System.Globalization.KoreanLunisolarCalendar> クラス  
-   <xref:System.Globalization.PersianCalendar> クラス  
-   <xref:System.Globalization.TaiwanCalendar> クラス  
-   <xref:System.Globalization.TaiwanLunisolarCalendar> クラス  
-   <xref:System.Globalization.ThaiBuddhistCalendar> クラス  
-   <xref:System.Globalization.UmAlQuraCalendar> クラス  
  
各カルチャの読み取り専用で定義された既定の暦を使用して<xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType>プロパティ。 各カルチャがその読み取り専用で定義された 1 つ以上の暦をサポート可能性があります<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>プロパティ。 現在、特定で使用する暦<xref:System.Globalization.CultureInfo>オブジェクトによって定義されますその<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>プロパティ。 ある予定表のいずれかを指定する必要がありますが、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>配列。  
  
カルチャの現在の暦は、そのカルチャのすべての書式設定操作で使用されます。 タイ仏暦のカルチャの既定の暦があるタイ仏暦時代 (年号) の予定表で表されるなど、<xref:System.Globalization.ThaiBuddhistCalendar>クラス。  ときに、<xref:System.Globalization.CultureInfo>タイ仏暦のカルチャを表すオブジェクトが日付と時刻の書式設定操作で使用される、時代 (年号) がタイ仏暦カレンダーを既定で使用されます。 場合にのみ、構成のグレゴリオ暦カレンダーが使用されるカルチャの<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>プロパティが変更された、次の例を示します。  

<a name="calendars-01"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

カルチャの現在の暦は、次の例のように、そのカルチャのすべての解析操作でも使用されます。  
  
<a name="calendars-02"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

インスタンス化する、<xref:System.DateTime>呼び出すことによって、特定のカレンダーの日付と時刻要素 (年、月、日の数) を使用して値を[DateTime コンス トラクター](xref:System.DateTime.%23ctor%2A)を含む、`calendar`パラメーターを渡す、 <xref:System.Globalization.CultureInfo.Calendar%2A>その暦を表すオブジェクト。 次の例からの日付と時刻の要素を使用して、<xref:System.Globalization.ThaiBuddhistCalendar>カレンダーです。  
  
<a name="calendars-03"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> コンス トラクターを含まない、`calendar`パラメーターは、日付と時刻の要素は、グレゴリオ暦でのユニットとして表されることを想定しています。  
  
他のすべての<xref:System.DateTime>プロパティとメソッドは、構成のグレゴリオ暦カレンダーを使用します。 たとえば、<xref:System.DateTime.Year%2A?displayProperty=nameWithType>プロパティは、グレゴリオ暦のカレンダーの年を返します、<xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType>メソッドを前提としている`year`パラメーターは、構成のグレゴリオ暦カレンダーにおける年。  各<xref:System.DateTime>構成のグレゴリオ暦カレンダーを使用するメンバーの対応するメンバーがある、<xref:System.Globalization.CultureInfo.Calendar%2A>固有のカレンダーを使用するクラス。 たとえば、<xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType>メソッドは、特定のカレンダーの年を返します、<xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType>メソッドは解釈、`year`パラメーターとして特定のカレンダーにおける年の数。 次の例では、両方は使用して、<xref:System.DateTime>との対応するメンバー、<xref:System.Globalization.ThaiBuddhistCalendar>クラス。  
  
<a name="calendars-04"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

<xref:System.DateTime>構造が含まれています、<xref:System.DateTime.DayOfWeek%2A>グレゴリオ暦カレンダーにおける週の曜日を返します。 年の週数を取得できるようにするメンバーは含まれません。 年の通算週を取得する呼び出し、カレンダーの<xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType>メソッド。 具体的な例を次に示します。  
  
<a name="calendars-05"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

日付と暦の詳細については、次を参照してください。[カレンダーの使用](~/docs/standard/datetime/working-with-calendars.md)します。  
  
### <a name="persisting-datetime-values"></a>DateTime 値の永続化  

永続化することができます<xref:System.DateTime>4 つの方法で値。  
  
-   [文字列への乗り換え](#persisting-values-as-strings)し、文字列を保持します。  
-   [64 ビット整数値への乗り換え](#persisting-values-as-integers)(の値、<xref:System.DateTime.Ticks%2A>プロパティ) の整数を保持します。  
-   [DateTime 値をシリアル化](#serializing-dateTime-values)します。  
-   [タイム ゾーン情報と共に DateTime 値をシリアル化](#serializing-datetime-and-time-zone-data)します。  
  
復元するルーチンをようにする必要があります、<xref:System.DateTime>値のデータが失われるまたは選択したどの手法に関係なく、例外をスローしません。 <xref:System.DateTime> 値には、ラウンド トリップの必要があります。 つまり、元の値と、復元された値があります同じ。 場合に、元の<xref:System.DateTime>値が 1 つの時刻の時点を表す、復元した場合の同じ時点を識別する必要があります。  
  
#### <a name="persisting-values-as-strings"></a>値を文字列として永続化します。  

正常に復元する<xref:System.DateTime>文字列として保持されている値がこれらの規則に従ってください。  
  
-   に関するカルチャ固有の書式指定文字列として保存されるときに復元するときに同じ前提条件を確認します。 文字列は、現在のカルチャに保存されたシステムのカルチャから別のシステムで復元できることを確認するを呼び出して、<xref:System.DateTime.ToString%2A>インバリアント カルチャの規則を使用して文字列を保存するオーバー ロードします。 呼び出す、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>または<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>インバリアント カルチャの規則を使用して、文字列を復元するオーバー ロードします。 使用しないでください、 <xref:System.DateTime.ToString>、 <xref:System.DateTime.Parse%28System.String%29>、または<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29>オーバー ロードは、現在のスレッド カルチャの規則を使用します。  
  
-   日付は、1 つの時点を表している場合、同じ時間と復元、異なるタイム ゾーンであっても表すことを確認します。 変換、<xref:System.DateTime>保存する前に値を世界協定時刻 (UTC)。 タイム ゾーン情報と共に値シリアル化することもできます。 この方法の詳細については、次を参照してください。 [DateTime のシリアル化とタイム ゾーン データ](#serializing-datetime-and-time-zone-data)します。  
  
 永続化時に行われる最も一般的なエラー<xref:System.DateTime>値を文字列としては、既定値または現在のカルチャの書式指定規則に依存します。 現在のカルチャが異なる場合、保存と復元、文字列の場合、問題が発生します。 次の例は、これらの問題を示しています。 英語 (米国) をここでは、現在のカルチャの書式指定規則を使用して 5 つの日付を保存します。 ここでは英語 (英国) 別のカルチャの書式指定規則を使用して日付が復元されます。 2 つのカルチャの書式指定規則が異なるため、2 つの日付を復元できないし、残りの 3 つの日付が正しく解釈されません。 また、元の日付と時刻の値が 1 つに、復元された瞬間を表す場合は、時刻が正しくないタイム ゾーン情報が失われるためです。  
  
<a name="persistence-01"></a>  
[!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

ラウンドト リップさせる<xref:System.DateTime>値には、次の手順が正常に従ってください。  
  
1.  値が時間の 1 つの瞬間を表す場合にからローカル時刻を UTC に変換を呼び出して、<xref:System.DateTime.ToUniversalTime%2A>メソッド。  
1.  呼び出すことによって、日付を文字列表現に変換、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>または<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>オーバー ロードします。 インバリアント カルチャの書式指定規則を使用して指定することによって<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>として、`provider`引数。 "O"または"R"標準書式指定文字列を使用して、値のラウンドト リップはことを指定します。  
  
復元、永続化する<xref:System.DateTime>データ損失なし、値が次の手順に従います。  
  
1.  呼び出すことによって、データの解析、<xref:System.DateTime.ParseExact%2A>または<xref:System.DateTime.TryParseExact%2A>オーバー ロードします。 指定<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>として、`provider`引数と同じ標準書式指定文字列を使用した使用、`format`変換中に引数。 含める、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>値、`styles`引数。  
1.  場合、<xref:System.DateTime>値が 1 つの瞬間に、呼び出しを表す、<xref:System.DateTime.ToLocalTime%2A>解析した日付を UTC から現地時刻に変換するメソッド。  
  
次の例では、インバリアント カルチャと、"O"標準書式指定文字列を使用していることを確認<xref:System.DateTime>保存し、復元の値は、システム、カルチャ、またはソースとターゲット システムのタイム ゾーンに関係なくの同じ時点を表します。  
  
<a name="persistence-02"></a>  
[!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>永続化する値が整数  

日付と時刻として永続化することができます、<xref:System.Int64>タイマー刻みの数を表す値です。 この場合、システムのカルチャを考慮していない、<xref:System.DateTime>値が永続化され、上に復元します。  
  
永続化する、<xref:System.DateTime>を整数としての値。  
  
-   場合、<xref:System.DateTime>値の 1 つの瞬間を表す、呼び出して UTC に変換、<xref:System.DateTime.ToUniversalTime%2A>メソッド。  
-   によって表されたタイマー刻みの数を取得、<xref:System.DateTime>値からその<xref:System.DateTime.Ticks%2A>プロパティ。  
  
復元する、<xref:System.DateTime>を整数として永続化された値。  
  
1.  新しいインスタンスを作成<xref:System.DateTime>オブジェクトを渡すことによって、<xref:System.Int64>値を<xref:System.DateTime.%23ctor%28System.Int64%29>コンス トラクター。  
1.  場合、<xref:System.DateTime>値は、特定の時点を表す、変換、UTC から現地時刻に呼び出すことによって、<xref:System.DateTime.ToLocalTime%2A>メソッド。  
  
次の例の配列を保持する<xref:System.DateTime>値が、米国のシステム上での整数表示します。 UTC ゾーンのシステム上で、それを復元します。 整数を含むファイルが含まれています、<xref:System.Int32>の合計数を示す値<xref:System.Int64>直後にその値。  
  
<a name="persistence-03"></a>  
[!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>DateTime 値をシリアル化します。  

永続化することができます<xref:System.DateTime>値ストリームまたはファイルと、復元にシリアル化を通じてそれらを逆シリアル化します。 <xref:System.DateTime> データは、いくつかの指定したオブジェクトの形式でシリアル化します。 逆シリアル化されたときに、オブジェクトが復元されます。 フォーマッタまたはシリアライザーなど<xref:System.Xml.Serialization.XmlSerializer>または<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>、シリアル化および逆シリアル化のプロセスを処理します。 シリアル化と、.NET Framework でサポートされているシリアル化の種類の詳細については、次を参照してください。[シリアル化](~/docs/standard/serialization/index.md)します。
  
次の例では、<xref:System.Xml.Serialization.XmlSerializer>クラスをシリアル化および逆シリアル化<xref:System.DateTime>値。 値は、21 世紀のすべての閏年日を表します。 出力は、例では、現在のカルチャが英語 (英国) システムで実行している場合、結果を表します。 した逆シリアル化するため、<xref:System.DateTime>オブジェクト自体のコードは、日付と時刻の形式のカルチャの違いを処理する必要はありません。  
  
<a name="persistence-04"></a>  
[!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

前の例では、時刻情報は含まれません。 場合、 <xref:System.DateTime> 、現地時刻から UTC に変換を呼び出すことによってシリアル化する前に、値が特定の時点を表しは、現地時刻で表されます、<xref:System.DateTime.ToUniversalTime%2A>メソッド。 この逆シリアル化する変換 UTC から現地時刻に呼び出すことによって、<xref:System.DateTime.ToLocalTime%2A>メソッド。 次の例では、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>クラスをシリアル化する<xref:System.DateTime>米国内のシステム上のデータ太平洋標準時ゾーン、米国内のシステムで逆シリアル化するにはサーバーの全体の標準のゾーンです。  
  
<a name="persistence-05"></a>  
[!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>DateTime とタイム ゾーンのデータをシリアル化します。  

すべての前の例のように仮定<xref:System.DateTime>の値がローカル時刻として表現されます。 コードは、ソースとターゲット システムで、同じ時間を反映するために UTC と現地時刻までの値を変換します。 <xref:System.DateTime> 値は、local 以外のタイム ゾーンと UTC 時間で時間を反映も可能性があります。 <xref:System.DateTime>構造はタイム ゾーンに対応していない、両方のシリアル化する必要は、<xref:System.DateTime>値と<xref:System.TimeZoneInfo>そのタイム ゾーンを表すオブジェクト。 フィールドには、両方の種類を作成、<xref:System.DateTime>値とそのタイム ゾーン。 次の例では、定義、`DateWithTimeZone`構造体。  
  
<a name="persistence-06"></a>  
[!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  `DateWithTimeZone`構造が配列の逆シリアル化およびシリアル化する次の 2 つの例についてで使用される`DateWithTimeZone`オブジェクト。 この記事の例のセット全体のソースを表示するにはいずれかで[Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/)または[c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) GitHub の docs リポジトリから。
  
使用して、`DateWithTimeZone`構造、日付と時刻のタイム ゾーン情報と共に保存できます。 次の例では、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>の配列をシリアル化するクラス`DateWithTimeZone`オブジェクト。  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

次の例を呼び出して、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>メソッドを逆シリアル化します。  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime とします。TimeSpan  

<xref:System.DateTime>と<xref:System.TimeSpan>を異なる値型、<xref:System.DateTime>時間の瞬間を表すのに対して、<xref:System.TimeSpan>時間間隔を表します。 1 つのインスタンスを減算する<xref:System.DateTime>を取得する別の<xref:System.TimeSpan>時間間隔を表すオブジェクト。 正の値を追加または<xref:System.TimeSpan>現在<xref:System.DateTime>を取得する、<xref:System.DateTime>将来の日付を表す値です。  
  
追加またはからの時間間隔を減算することができます、<xref:System.DateTime>オブジェクト。 時間間隔が負または正の値を指定できなど、タイマー刻み単位で表現することができます (秒単位) として、または、<xref:System.TimeSpan>オブジェクト。  

### <a name="comparing-for-equality-within-tolerance"></a>許容範囲内で等しいかどうかを比較します。

等価比較の<xref:System.DateTime>値は、正確です。 つまり、2 つの値は、同じ数の等しいと見なされるタイマー刻みとして表す必要があります。 有効桁数が、多くの場合、不要なことかも多くのアプリケーションが正しくありません。 場合をテストする多くの場合、<xref:System.DateTime>オブジェクトが**ほぼ同じ**します。 

次の例では、ほぼを比較する方法と同じ<xref:System.DateTime>値。 宣言と等しい場合は、小さな違いの余白を受け入れます。  
  
<a name="comparison-01"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>COM 相互運用機能に関する考慮事項  

A<xref:System.DateTime>ラウンドト リップさせるには、COM アプリケーションに転送し、管理対象のアプリケーションに転送される値といいます。 ただし、<xref:System.DateTime>時刻のみを指定する値は予想どおりにラウンドト リップさせる。  
  
ラウンドト リップする午後 3 時、最後の日付と時刻など、時刻のみが西暦 1899 年 12 月 30 日の場合 午後 3 時、年 1 月 1 日ではなく紀元 0001 午後 3時 00分 .NET Framework および COM は、既定の日付、時刻のみが指定されている場合を想定しています。 ただし、COM システムでは、.NET Framework には、西暦 0001 年 1 月 1 日の基準日が前提としています中に、西暦、1899 年 12 月 30 日の基本の日が想定しています  
  
COM に .NET Framework から時刻のみが渡されると、特別な処理は実行時間を COM で使用される形式に変換します。 .NET Framework に時刻のみが COM から渡されるが破損する可能性が正当な日付と時刻、1899 年 12 月 30 日までにするために特別な処理が実行されません。 日付は、COM からそのラウンドト リップを起動する場合、.NET Framework および COM、日付を保持します。  
  
.NET Framework および COM の動作がいる場合、アプリケーションのラウンドト リップをことを意味、<xref:System.DateTime>のみ、時間を指定する、変更または最後から誤った日付を無視する、アプリケーションを忘れないでください<xref:System.DateTime>オブジェクト。  
     
 ]]></format>
    </remarks>
    <threadsafe>この種類のすべてのメンバーは、スレッド セーフです。 インスタンスの状態を変更する表示されるメンバーは、実際に新しい値で初期化された新しいインスタンスを返します。 として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによって。</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">DateTime、DateTimeOffset、TimeSpan、および TimeZoneInfo の使い分け</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">カレンダーの使用</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">サンプル: .NET Framework 4 の書式設定ユーティリティ</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">日時をグレゴリオ暦の 0001 年 1 月 1 日の 00:00:00.000 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定したタイマー刻み数に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 日付と時刻のデータまたはある程度までのタイム ゾーンの移植性の認識が重要なアプリケーションでは、対応するを使用できる<xref:System.DateTimeOffset>コンス トラクター。  
  
   
  
## Examples  
 次の例での 1 つ、<xref:System.DateTime>コンス トラクター。  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか <see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">日時をグレゴリオ暦の 0001 年 1 月 1 日の 00:00:00.000 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
        <param name="kind"><paramref name="ticks" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、どれを指定するかを示す列挙値の 1 つ。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定したタイマー刻み数と世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日付と時刻のデータまたはある程度までのタイム ゾーンの移植性の認識が重要なアプリケーションでは、対応するを使用できる<xref:System.DateTimeOffset>コンス トラクター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか <see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、および日に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンス化する、<xref:System.DateTime>呼び出し、別の暦の年、月、日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>コンス トラクター。  
  
 時刻を生成される<xref:System.DateTime>は午前 0 時 (00: 00:00)。 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> に初期化されます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29>インスタンスを作成するコンス トラクター、<xref:System.DateTime>値。 このオーバー ロードを作成することも例、<xref:System.DateTime>の時刻部分が午前 0 時と等しい値 (0:00)。  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から <paramref name="calendar" /> の年数)。</param>
        <param name="month">月 (1 から <paramref name="calendar" /> の月数)。</param>
        <param name="day">日付 (1 から <paramref name="month" /> の日数)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、および日に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時刻を生成される<xref:System.DateTime>は午前 0 時 (00: 00:00)。 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 使用できる値`year`、 `month`、および`day`に依存して`calendar`します。 使用して、指定した日付と時刻を表現できない場合、例外がスローされます`calendar`します。  
  
 <xref:System.Globalization>名前空間にはいくつかの予定表を含む<xref:System.Globalization.GregorianCalendar>と<xref:System.Globalization.JulianCalendar>します。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 2 つのインスタンスを作成するには、2 回コンス トラクター<xref:System.DateTime>値。 最初の呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.PersianCalendar>オブジェクト。 ペルシャ暦で日付を表示する個々 の呼び出しが必要ですペルシャ暦をカルチャの既定の暦として指定することはできません、ため、その<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>メソッド。 2 番目のコンス トラクター呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.HijriCalendar>オブジェクト。 例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦を回教暦に変更します。 イスラム暦が、現在のカルチャの既定の暦であるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドは、日付の書式設定を使用します。 (これは、英語 (米国) をここでは) 前の現在のカルチャが復元されると、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドでは、現在のカルチャの既定のグレゴリオ暦を使用して日付の書式設定します。  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> は <paramref name="calendar" /> でサポートされる範囲にありません。  
  
- または - 
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、および秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 このコンス トラクターは解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンス化する、<xref:System.DateTime>呼び出し、別の暦の年、月、日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>コンス トラクター。  
  
 日付と時刻のデータまたはある程度までのタイム ゾーンの移植性の認識が重要なアプリケーションでは、対応するを使用できる<xref:System.DateTimeOffset>コンス トラクター。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%2A>インスタンスを作成するコンス トラクター、<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="kind"><paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、および <paramref name="second" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、どれを指定するかを示す列挙値の 1 つ。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンス化する、<xref:System.DateTime>呼び出し、別の暦の年、月、日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>コンス トラクター。  
  
 日付と時刻のデータまたはある程度までのタイム ゾーンの移植性の認識が重要なアプリケーションでは、対応するを使用できる<xref:System.DateTimeOffset>コンス トラクター。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29>インスタンスを作成するコンス トラクター、<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から <paramref name="calendar" /> の年数)。</param>
        <param name="month">月 (1 から <paramref name="calendar" /> の月数)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、および秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 使用できる値`year`、 `month`、および`day`に依存して`calendar`します。 使用して、指定した日付と時刻を表現できない場合、例外がスローされます`calendar`します。  
  
 <xref:System.Globalization>名前空間にはいくつかの予定表を含む<xref:System.Globalization.GregorianCalendar>と<xref:System.Globalization.JulianCalendar>します。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 2 つのインスタンスを作成するには、2 回コンス トラクター<xref:System.DateTime>値。 最初の呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.PersianCalendar>オブジェクト。 ペルシャ暦で日付を表示する個々 の呼び出しが必要ですペルシャ暦をカルチャの既定の暦として指定することはできません、ため、その<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>メソッド。 2 番目のコンス トラクター呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.HijriCalendar>オブジェクト。 例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦を回教暦に変更します。 イスラム暦が、現在のカルチャの既定の暦であるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドは、日付の書式設定を使用します。 (これは、英語 (米国) をここでは) 前の現在のカルチャが復元されると、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドでは、現在のカルチャの既定のグレゴリオ暦を使用して日付の書式設定します。  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> は <paramref name="calendar" /> でサポートされる範囲にありません。  
  
- または - 
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。 
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、およびミリ秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンス化する、<xref:System.DateTime>呼び出し、別の暦の年、月、日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>コンス トラクター。  
  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 日付と時刻のデータまたはある程度までのタイム ゾーンの移植性の認識が重要なアプリケーションでは、対応するを使用できる<xref:System.DateTimeOffset>コンス トラクター。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>インスタンスを作成するコンス トラクター、<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="kind"><paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、および <paramref name="millisecond" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、どれを指定するかを示す列挙値の 1 つ。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、ミリ秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンス化する、<xref:System.DateTime>呼び出し、別の暦の年、月、日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>コンス トラクター。  
  
 日付と時刻のデータまたはある程度までのタイム ゾーンの移植性の認識が重要なアプリケーションでは、対応するを使用できる<xref:System.DateTimeOffset>コンス トラクター。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29>インスタンスを作成するコンス トラクター、<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から <paramref name="calendar" /> の年数)。</param>
        <param name="month">月 (1 から <paramref name="calendar" /> の月数)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、秒、およびミリ秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 使用できる値`year`、 `month`、および`day`に依存して`calendar`します。 使用して、指定した日付と時刻を表現できない場合、例外がスローされます`calendar`します。  
  
 日付と時刻のデータまたはある程度までのタイム ゾーンの移植性の認識が重要なアプリケーションでは、対応するを使用できる<xref:System.DateTimeOffset>コンス トラクター。  
  
 <xref:System.Globalization>名前空間にはいくつかの予定表を含む<xref:System.Globalization.GregorianCalendar>と<xref:System.Globalization.JulianCalendar>します。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 2 つのインスタンスを作成するには、2 回コンス トラクター<xref:System.DateTime>値。 最初の呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.PersianCalendar>オブジェクト。 ペルシャ暦で日付を表示する個々 の呼び出しが必要ですペルシャ暦をカルチャの既定の暦として指定することはできません、ため、その<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>メソッド。 2 番目のコンス トラクター呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.HijriCalendar>オブジェクト。 例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦を回教暦に変更します。 イスラム暦が、現在のカルチャの既定の暦であるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドは、日付の書式設定を使用します。 (これは、英語 (米国) をここでは) 前の現在のカルチャが復元されると、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドでは、現在のカルチャの既定のグレゴリオ暦を使用して日付の書式設定します。  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> は <paramref name="calendar" /> でサポートされる範囲にありません。  
  
- または - 
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から <paramref name="calendar" /> の年数)。</param>
        <param name="month">月 (1 から <paramref name="calendar" /> の月数)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <param name="kind"><paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、および <paramref name="millisecond" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、どれを指定するかを示す列挙値の 1 つ。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、秒、ミリ秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用できる値`year`、 `month`、および`day`パラメーターによって異なります、`calendar`パラメーター。 使用して、指定した日付と時刻を表現できない場合、例外がスローされます`calendar`します。  
  
 日付と時刻のデータまたはある程度までのタイム ゾーンの移植性の認識が重要なアプリケーションでは、対応するを使用できる<xref:System.DateTimeOffset>コンス トラクター。  
  
 <xref:System.Globalization>名前空間にはいくつかの予定表を含む<xref:System.Globalization.GregorianCalendar>と<xref:System.Globalization.JulianCalendar>します。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> 2 つのインスタンスを作成するには、2 回コンス トラクター<xref:System.DateTime>値。 最初の呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.PersianCalendar>オブジェクト。 ペルシャ暦で日付を表示する個々 の呼び出しが必要ですペルシャ暦をカルチャの既定の暦として指定することはできません、ため、その<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>メソッド。 2 番目のコンス トラクター呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.HijriCalendar>オブジェクト。 例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦を回教暦に変更します。 イスラム暦が、現在のカルチャの既定の暦であるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドは、日付の書式設定を使用します。 (これは、英語 (米国) をここでは) 前の現在のカルチャが復元されると、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドでは、現在のカルチャの既定のグレゴリオ暦を使用して日付の書式設定します。  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> は <paramref name="calendar" /> でサポートされる範囲にありません。  
  
- または - 
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">正または負の時間間隔。</param>
        <summary>このインスタンスの値に、指定された <see cref="T:System.TimeSpan" /> の値を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間間隔を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.DateTime.Add%2A>メソッドを 1 回の操作で時間間隔 (日、時、分、秒またはミリ秒単位) の 1 つ以上の種類を追加します。 このメソッドの動作は、加算演算子のと同じです。 <xref:System.DateTime>構造体には、追加の特殊なメソッドもサポートしています (など<xref:System.DateTime.AddDays%2A>、 <xref:System.DateTime.AddHours%2A>、および<xref:System.DateTime.AddMinutes%2A>) 時間間隔。  
  
 <xref:System.DateTime.Add%2A>アカウントうるう年と算術演算のときに日付を実行する月内の日数の数を受け取ります。  
  
 このメソッドには、この値は変わりません。<xref:System.DateTime>します。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果。 <xref:System.DateTime.Kind%2A>プロパティの新しい<xref:System.DateTime>インスタンスが現在のインスタンスと同じです。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Add%2A>メソッド。 この時点から 36 日 (864 時間) である週の曜日を計算します。  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る日数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された日数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された日数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、この値は変わりません。<xref:System.DateTime>します。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果。  
  
 小数部`value`は 1 日の小数部の一部です。 たとえば、4.5 は 4 日、12 時間、0 分 0 秒、0 (ミリ秒単位)、および 0 タイマー刻みと同じです。  
  
 `value`パラメーターはミリ秒単位に丸められます。  
  
 <xref:System.DateTime.AddDays%2A>アカウントうるう年と算術演算のときに日付を実行する月内の日数の数を受け取ります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddDays%2A>曜日、週、現在の日付から 36 の日数を調べます。  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る時間数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された時間数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、この値は変わりません。<xref:System.DateTime>します。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果。 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトがの場合と同じ`value`します。  
  
 小数部`value`は 1 時間の小数部の一部です。 たとえば、4.5 は 4 時間、30 分、0 秒、0 (ミリ秒単位)、および 0 タイマー刻みと同じです。  
  
 `value`パラメーターはミリ秒単位に丸められます。  
  
 1 時間未満の時間間隔を小数に変換すると、結果が終了しない繰り返し 10 進数である場合に有効桁数の損失を伴うことができます。 (たとえば、1 分は 0.016667 時間) です。問題がある場合は、使用できます、<xref:System.DateTime.Add%2A>メソッドでは、1 つのメソッドの呼び出しで複数の時間間隔の種類を指定することができ、時間間隔を 1 時間の部分の小数部に変換する必要がなくなります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddHours%2A>日付と時刻に、数の整数部と小数部の値を追加します。 また、小数部を含む値をメソッドに渡すことによる精度の損失を示しています。  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成るミリ秒数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。 この値は、近似値の整数に丸められます。</param>
        <summary>このインスタンスの値に、指定されたミリ秒数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表されたミリ秒数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、この値は変わりません。<xref:System.DateTime>します。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果。  
  
 小数部`value`は 1 ミリ秒の小数部の一部です。 たとえば、4.5 が 4 ミリ秒と 5000 ティック単位に相当ミリ秒 = 10000 タイマー刻み。  
  
 `value`パラメーターは、最も近い整数に丸められます。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.AddMilliseconds%2A> 1 ミリ秒、および 1.5 時間 (ミリ秒) を追加する方法、<xref:System.DateTime>値。 それぞれの新しい値が表示され、元の値との間の差異が表示されます。 違いには、時間間隔とタイマー刻みの数の両方が表示されます。 例を使用して、ミリ秒 equals 10,000 ティックそのいずれかをオフになります。 小数ミリ秒に加算; を実行する前に丸められることも示しています<xref:System.DateTime> 1.5 (ミリ秒) を元の日付に追加した結果値は 2 ミリ秒、元の日付よりも大きい。  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る分数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された分数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された分数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、この値は変わりません。<xref:System.DateTime>します。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果。  
  
 小数部`value`は 1 分間の小数部の一部です。 たとえば、4.5 は 4 分 30 秒、0 (ミリ秒単位)、および 0 タイマー刻みと同じです。  
  
 `value`パラメーターはミリ秒単位に丸められます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddMinutes%2A>日付と時刻に、数の整数部と小数部の値を追加します。  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">月数。 <paramref name="months" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された月数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻と <paramref name="months" /> の合計を値とするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、この値は変わりません。<xref:System.DateTime>オブジェクト。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果オブジェクト。  
  
 <xref:System.DateTime.AddMonths%2A>メソッドは、計算結果の月と年、閏年のアカウントと、1 か月の日数を考慮して、結果の日の部分を調整する<xref:System.DateTime>オブジェクト。 結果として得られる日が結果として得られる 1 か月間有効な日付でない場合は、その月の最終有効日が使用されます。 例では、3 月 31 日 + 1 か月 = 年 4 月 30 日と 3 月 31 日に 1 か月 = 2 月 28 日 leap 以外の年の閏年の 2 月 29 日。  
  
 結果の時刻の部分<xref:System.DateTime>オブジェクトがこのインスタンスと同じです。  
  
   
  
## Examples  
 次の例では、2015 年 12 月の最終日に 0 との間、15 か月を追加します。 ここでは、AddMonths メソッドは、毎月の最終日の日付を返し、うるう年を正常に処理します。  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。  
  
- または - 
 <paramref name="months" /> が -120,000 未満であるか、120,000 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る秒数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された秒数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された秒数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、この値は変わりません。<xref:System.DateTime>します。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果。  
  
 小数部`value`は秒の小数部。 たとえば、4.5 は 4 秒、500 ミリ秒、および 0 タイマー刻みと同じです。  
  
 `value`パラメーターはミリ秒単位に丸められます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddSeconds%2A>を 1 日に 30 秒と秒数を追加する方法、<xref:System.DateTime>値。 それぞれの新しい値が表示され、元の値との間の差異が表示されます。 違いには、時間間隔とタイマー刻みの数の両方が表示されます。  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">100 ナノ秒タイマー刻み数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定されたタイマー刻みの数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表される日付と時刻に <paramref name="value" /> で表された時間を加算した値を持つオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、この値は変わりません。<xref:System.DateTime>します。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">年数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された年数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された年数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには、この値は変わりません。<xref:System.DateTime>オブジェクト。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果オブジェクト。  
  
 <xref:System.DateTime.AddYears%2A>メソッドは、うるう年を考慮して、結果の年を計算します。 結果の月と時刻の部分は、<xref:System.DateTime>オブジェクトがこのインスタンスと同じです。  
  
 現在のインスタンスが閏年で閏日である場合は、戻り値は、対象の日付に依存します。  
  
-   場合`value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType>閏年、戻り値はその年の閏日になります。 たとえば、4 年が 2012 年 2 月 29 日に追加された場合返される日付が 2016 年 2 月 29 日です。  
  
-   場合`value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType>が閏年で戻り値がその年の閏日の前日を表します。 たとえば、1 年が 2012 年 2 月 29 日に追加された場合返される日付は 2013 年 2 月 28 日です。  
  
 次の例を使用して、<xref:System.DateTime.AddYears%2A>メソッドを<xref:System.DateTime>閏年日を表す値です。 15 年より前のバージョンと後に続く 15 年の日付を表示しますが、2000 年 2 月 29 日。  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> または結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、<see cref="F:System.DateTime.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つのインスタンスを比較し、第 1 のインスタンスが第 2 のインスタンスよりも前か、同じか、それとも後かを示す整数を返します。</summary>
        <returns><paramref name="t1" /> と <paramref name="t2" /> の相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term> 値型 
 </term><description> 条件 
 </description></listheader><item><term> 0 より小さい値 
 </term><description><paramref name="t1" /> が <paramref name="t2" /> よりも前の日時です。  
  
 </description></item><item><term> 0 
 </term><description><paramref name="t1" /> は <paramref name="t2" /> と同じです。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="t1" /> が <paramref name="t2" /> より後の日時です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 関係を判断する`t1`に`t2`、<xref:System.DateTime.Compare%2A>メソッドの比較、<xref:System.DateTime.Ticks%2A>プロパティの`t1`と`t2`は無視されますが、その<xref:System.DateTime.Kind%2A>プロパティ。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Compare%2A>メソッド。  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つのオーバー ロード、<xref:System.DateTime.CompareTo%2A>メソッドは、このインスタンスの相対値を示す符号付き数値を返す、`value`引数は、次の表に示すようにします。  
  
|[値]|説明|  
|-----------|-----------------|  
|0 より小さい値|このインスタンスは、`value` よりも前の日時です。|  
|0|このインスタンスは `value` と同じです。|  
|0 より大きい値|このインスタンスは、`value` よりも後の日時です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">現在のインスタンスと比較する対象のオブジェクト。</param>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> パラメーターの相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description> このインスタンスは、<paramref name="value" /> よりも前の日時です。  
  
 </description></item><item><term> 0 
 </term><description> このインスタンスは <paramref name="value" /> と同じです。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description> このインスタンスは、<paramref name="value" /> よりも後の日時です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスの関係を判断する`value`、<xref:System.DateTime.CompareTo%2A>メソッドの比較、<xref:System.DateTime.Ticks%2A>現在のインスタンスのプロパティと`value`は無視されますが、その<xref:System.DateTime.Kind%2A>プロパティ。  比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 値を比較することでこれを行う、<xref:System.DateTime.Kind%2A>プロパティ。  
  
 このメソッドを実装、<xref:System.IComparable%601?displayProperty=nameWithType>インターフェイスを実行よりも若干優れています、<xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType>メソッド オーバー ロードを変換することはありませんので、`value`オブジェクトに対するパラメーター。  
  
   
  
## Examples  
 次の例では、3 つのインスタンス化します<xref:System.DateTime>今日を表す 1 つの日付、1 年前の日付を表す、1 年間、将来の日付を表すオブジェクトします。 呼び出して、<xref:System.DateTime.CompareTo%28System.DateTime%29>メソッド、比較の結果を表示します。  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のボックス化されたオブジェクト、または <see langword="null" />。</param>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を含む指定したオブジェクトを比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term> 値 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description> このインスタンスは、<paramref name="value" /> よりも前の日時です。  
  
 </description></item><item><term> 0 
 </term><description> このインスタンスは <paramref name="value" /> と同じです。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description> このインスタンスは <paramref name="value" /> より後の時刻を表しているか、または <paramref name="value" /> が <see langword="null" /> です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスの関係を判断する`value`、<xref:System.DateTime.CompareTo%2A>メソッドの比較、<xref:System.DateTime.Ticks%2A>現在のインスタンスのプロパティと`value`は無視されますが、その<xref:System.DateTime.Kind%2A>プロパティ。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 値を比較することでこれを行う、<xref:System.DateTime.Kind%2A>プロパティ。  
  
 任意のインスタンスの<xref:System.DateTime>、その値に関係なくと見なされますより大きい`null`します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.CompareTo%2A>メソッド。  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> が <see cref="T:System.DateTime" /> ではありません。</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの日付の部分を取得します。</summary>
        <value>このインスタンスと日付が同じで、時刻値が深夜の 12 時 (00:00:00) に設定された新しいオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は、現在のインスタンスの場合と同じです。  
  
 <xref:System.DateTime>型は、両方の日付を表すし、時間に 1 つの型が重要ですから返される日付の解釈を回避するために、<xref:System.DateTime.Date%2A>プロパティとして、日付と時刻。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Date%2A>の日付部分を抽出するプロパティを<xref:System.DateTime>を 0 に設定の時間コンポーネントを持つ値 (0: 00時 00分または午前 0 時)。 表示するときに使用される書式指定文字列によっても、説明、<xref:System.DateTime>値、書式設定された出力に表示される、時刻部分を続行できます。  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される月の日付を取得します。</summary>
        <value>DateTime の日付部分 (1 ～ 31)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Day%2A>プロパティは常にグレゴリオ暦のカレンダーで月の日を返す場合でも、現在<xref:System.DateTime>値が他のカレンダーを使用してインスタンス化されたまたは現在のスレッドのカルチャの既定の暦の場合は、グレゴリオ暦ではありません。 他のカレンダーを使用して、特定の日付の月の日を取得する呼び出しの暦の<xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType>メソッド。 次の例では、両方は使用して、<xref:System.DateTime.Day%2A>プロパティおよび<xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>の月の日を取得するメソッドを<xref:System.DateTime>イスラム暦カレンダーを使用してインスタンス化される値。  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 同様に、次の例では両方とも、<xref:System.DateTime.Day%2A>プロパティおよび<xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>AR-SA は、その既定の暦としてイスラム暦を使用するが、現在のスレッド カルチャの場合、その月の日を取得します。  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Day%2A>プロパティ。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される曜日を取得します。</summary>
        <value>この <see cref="T:System.DateTime" /> 値の曜日を示す列挙型定数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定数の値、<xref:System.DayOfWeek>列挙型の範囲から<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>に<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>します。 かどうか整数にキャストすると、その値の範囲は 0 から (を示す<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) から 6 まで (を示す<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>)。  
  
 <xref:System.DateTime.DayOfWeek%2A>プロパティが列挙型の定数を返します。 システムの地域と言語の設定は反映されません。 特定の日付のローカライズされた曜日名を表す文字列を取得する呼び出しのオーバー ロードの 1 つ、<xref:System.DateTime.ToString%2A>メソッドが含まれる、`format`パラメーターを渡しますか、`ddd`または`dddd`カスタム書式指定文字列。 詳細については、次を参照してください。[方法: 特定の日付から日と、特定の曜日を抽出](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md)します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.DayOfWeek%2A>プロパティおよび<xref:System.DayOfWeek?displayProperty=nameWithType>列挙体。  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される年間積算日を取得します。</summary>
        <value>1 から 366 までの間の積算日。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DayOfYear%2A>プロパティでは、年の通算日を計算する場合にうるう年を考慮します。 プロパティの値は、常に現在のスレッド カルチャの現在の暦に関係なく、グレゴリオ暦の年の通算日を反映します。 さまざまなカレンダーにおける年の通算日を取得する、<xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType>そのカレンダーのメソッド。  
  
   
  
## Examples  
 次の例では、構成のグレゴリオ暦カレンダーにおける 2010 2020 年の 12 月 31 日の年の通算日を表示します。 12 月 31 日がうるう年の年の 366 日の例に示すことに注意してください。  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月 (1 から 12 までの範囲の数)。</param>
        <summary>指定した月および年の日数を返します。</summary>
        <returns>指定した <paramref name="year" /> の <paramref name="month" /> の日数。  
  
たとえば、<paramref name="month" /> が 2 月を表す 2 に等しい場合、戻り値には、<paramref name="year" /> が閏年かどうかによって 28 または 29 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DaysInMonth%2A>メソッドは常に解釈`month`と`year`と月と年はグレゴリオ暦のカレンダーの場合でも、構成のグレゴリオ暦カレンダーは、現在のカルチャの現在の暦ではありません。 特定の暦の指定した月の日数の値を取得する呼び出しの暦の<xref:System.Globalization.Calendar.GetDaysInMonth%2A>メソッド。  
  
   
  
## Examples  
 次の例では、使用する方法、 <xref:System.DateTime.DaysInMonth%2A> 2001 年 7 月、年 2 月の日数を 1998 (、うるう年以外)、および 1996 年 2 月 (閏年)。  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 次の例では、整数の配列で指定された年の各月の日数が表示されます。  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの <see cref="T:System.DateTime" /> オブジェクトの値が等しいかどうか、または、特定の <see cref="T:System.DateTime" /> インスタンスと別のオブジェクト (<see cref="T:System.DateTime" />) の値が等しいかどうかを表す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスの値が、指定した <see cref="T:System.DateTime" /> インスタンスの値と等しいかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターがこのインスタンスの値と等しい場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスと`value`が等しい場合、<xref:System.DateTime.Ticks%2A>プロパティの値が等しい。 その<xref:System.DateTime.Kind%2A>プロパティの値の等価性のテストでは考慮されません。  
  
 このメソッドは、<xref:System.IEquatable%601?displayProperty=nameWithType>インターフェイス、および実行よりも若干優れています、<xref:System.DateTime.Equals%2A>メソッドのため、`value`パラメーターは、オブジェクトに変換する必要はありません。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Equals%2A>メソッド。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns><paramref name="value" /> が <see cref="T:System.DateTime" /> のインスタンスで、このインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスと`value`が等しい場合、<xref:System.DateTime.Ticks%2A>プロパティの値が等しい。 その<xref:System.DateTime.Kind%2A>プロパティの値の等価性のテストでは考慮されません。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Equals%2A>メソッド。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つのインスタンスが同じ日付/時刻値を持っているかどうかを示す値を返します。</summary>
        <returns>2 つの値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` `t2`が等しい場合、<xref:System.DateTime.Ticks%2A>プロパティの値が等しい。 その<xref:System.DateTime.Kind%2A>プロパティの値の等価性のテストでは考慮されません。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Equals%2A>メソッド。  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">2 ビット フィールドの <see cref="P:System.DateTime.Kind" /> プロパティおよび 62 ビット フィールドの <see cref="P:System.DateTime.Ticks" /> プロパティをエンコードする 64 ビット符号付き整数。</param>
        <summary>64 ビットのバイナリ値を逆シリアル化し、元のシリアル化 <see cref="T:System.DateTime" /> オブジェクトを再構築します。</summary>
        <returns><see cref="M:System.DateTime.ToBinary" /> メソッドによってシリアル化された <see cref="T:System.DateTime" /> オブジェクトと等価なオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.DateTime.ToBinary%2A>メソッドは、現在の値に変換する<xref:System.DateTime>オブジェクト バイナリ値から。 バイナリ値を使用して、その後、および<xref:System.DateTime.FromBinary%2A>メソッドを元の再作成する<xref:System.DateTime>オブジェクト。  
  
> [!IMPORTANT]
>  場合によってで、<xref:System.DateTime>によって返される値、<xref:System.DateTime.FromBinary%2A>メソッドが元と同じでない<xref:System.DateTime>に指定された値、<xref:System.DateTime.ToBinary%2A>メソッド。 詳細については、次のセクションでは、「ローカル タイムの調整」を参照してください。  
  
## <a name="local-time-adjustment"></a>現地時刻の調整  
 ローカル タイム ゾーンに調整: Coordinated Universal Time には、現地時刻がによって表される、<xref:System.DateTime>持つ<xref:System.DateTime.Kind%2A>プロパティの値を<xref:System.DateTimeKind.Local>します。 ローカルの復元時に<xref:System.DateTime>によって生成されるバイナリ表現からの値、<xref:System.DateTime.ToBinary%2A>メソッド、<xref:System.DateTime.FromBinary%2A>元の値と等しくないように、メソッドが再作成された値を調整する場合があります。 これは、次のような条件で発生します。  
  
-   ローカル<xref:System.DateTime>オブジェクトは、1 つのタイム ゾーンでシリアル化、<xref:System.DateTime.ToBinary%2A>メソッドをおよび逆シリアル化し、別のタイム ゾーンで、<xref:System.DateTime.FromBinary%2A>メソッドは、結果で表されるローカル時間<xref:System.DateTime>オブジェクトが自動的に調整2 番目のタイム ゾーン。  
  
     たとえば、<xref:System.DateTime>現地時刻の午後 3 時を表すオブジェクトを 米国で実行されているアプリケーション太平洋標準時タイム ゾーンを使用して、<xref:System.DateTime.ToBinary%2A>を変換するメソッド<xref:System.DateTime>オブジェクト バイナリ値から。 米国で実行されている別のアプリケーション東部標準時ゾーンを使用し、<xref:System.DateTime.FromBinary%2A>を新しいバイナリ値に変換するメソッド<xref:System.DateTime>オブジェクト。 新しい値<xref:System.DateTime>オブジェクトが元の午後 3 時間の同じ時点を表している午後 6 ただし、東部標準時ゾーンでのローカル時刻に調整されます。  
  
-   場合、ローカルのバイナリ表現<xref:System.DateTime>値は、システムのローカル タイム ゾーンで無効な時刻を表します<xref:System.DateTime.FromBinary%2A>が呼び出されると、時間の調整が無効です。  
  
     たとえば、標準時間から夏時間への移行、米国の太平洋標準時ゾーンで発生、2010 年 3 月 14 日、午前 2時 00分に時間が午前 3 時に、1 時間進み この時間の間隔とは、無効な時間、つまり、このタイム ゾーンに存在しません時間間隔です。 次の例を時間内にあるときにこの範囲が、バイナリ値に変換されます、<xref:System.DateTime.ToBinary%2A>メソッドで復元が、<xref:System.DateTime.FromBinary%2A>メソッド、元の値が有効な時刻に調整します。 特定の日付と時刻の値に渡すことでの変更対象とする可能性があるかどうかを確認することができます、<xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>メソッドの例として示します。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>バージョンの考慮事項  
 .NET Framework バージョン 2.0 以降、<xref:System.DateTime>を示すかどうか、指定した時間が現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない、連結されたタイマー刻みのプライベート フィールドに、プライベートなフィールドから成る構造が日付と時刻を指定する 100 ナノ秒タイマー刻みの数が含まれています。 タイマー刻みの数をアクセスするのには、<xref:System.DateTime.Ticks%2A>プロパティと theKind フィールドをアクセスするのには、<xref:System.DateTime.Kind%2A>プロパティ。  
  
 シリアル化する場合は、.NET Framework 2.0 の前に、<xref:System.DateTime>などのシリアル化インターフェイスを使用してではなく、手動でオブジェクト<xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>、内のタイマー刻みデータのみをシリアル化に必要な<xref:System.DateTime>。 以降、.NET Framework 2.0 では、種類のデータをシリアルする必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateData" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか <see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の現地時刻に変換します。</summary>
        <returns><paramref name="fileTime" /> パラメーターによって表された日時に相当する現地時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻の西暦 1601 年 1 月 1 日午前 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値は、します。 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 `fileTime`パラメーターを 100 ナノ秒タイマー刻み単位で表したファイルの時刻を指定します。  
  
 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.FromFileTime%2A>メソッド。  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> が 0 未満か、<see cref="F:System.DateTime.MaxValue" /> を超える時刻を表しています。</exception>
        <block subset="none" type="usage"><para>通常、<see cref="M:System.DateTime.FromFileTime(System.Int64)" />メソッドの復元、<see cref="T:System.DateTime" />によって保存された値、<see cref="M:System.DateTime.ToFileTime" />メソッド。 ただし、2 つの値は、次の条件下で異なる場合があります。 
If の逆シリアル化とシリアル化、<see cref="T:System.DateTime" />値が異なるタイム ゾーンで発生します。 たとえば場合、<see cref="T:System.DateTime" />時間が午後 12 時 30 分の値 米国の東部標準時ゾーンのシリアル化し、逆シリアル化し、米国の太平洋標準時タイム ゾーン、午後 12 時 30 分の元の値 午前 9 時 30 分に調整されます。 2 つのタイム ゾーンの違いを反映します。  
  
If、<see cref="T:System.DateTime" />シリアル化された値がローカル タイム ゾーンで無効な時刻を表します。 ここで、<see cref="M:System.DateTime.ToFileTime" />メソッドは、調整、復元された<see cref="T:System.DateTime" />をローカル タイム ゾーンで有効な時刻を表すように値します。  
  
たとえば、標準時間から夏時間への移行は、米国内に発生します。太平洋標準時タイム ゾーン、2010 年 3 月 14 日、午前 2時 00分に時間が午前 3 時に、1 時間進み この時間の間隔とは、無効な時間、つまり、このタイム ゾーンに存在しません時間間隔です。 次の例を時間内にあるときにこの範囲が、長整数値に変換されます、<see cref="M:System.DateTime.ToFileTime" />メソッドで復元が、<see cref="M:System.DateTime.FromFileTime(System.Int64)" />メソッド、元の値が有効な時刻に調整します。 特定の日付と時刻の値に渡すことでの変更対象とする可能性があるかどうかを確認することができます、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />メソッドの例として示します。  
  
[! コード csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! コード vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の UTC 時刻に変換します。</summary>
        <returns><paramref name="fileTime" /> パラメーターによって表された日時に相当する UTC 時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻の西暦 1601 年 1 月 1 日午前 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値は、します。 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 `fileTime`パラメーターを 100 ナノ秒タイマー刻み単位で表したファイルの時刻を指定します。  
  
 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> が 0 未満か、<see cref="F:System.DateTime.MaxValue" /> を超える時刻を表しています。</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">OLE オートメーション日付値。</param>
        <summary>指定した OLE オートメーション日付と等しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns><paramref name="d" /> と同じ日付と時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `d`パラメーターは、前後の基本の日、午前 0 時、1899 年 12 月の 30 日間の数値として日付を表す倍精度浮動小数点数。 符号と整数部`d`から 1899 年 12 月 30日正または負の値の 1 日の移動距離と値の小数部分の絶対値として日付をエンコード`d`日午前 0 時から 1 日の移動距離の割合としての時間をエンコードします。 `d` 正 2958465.99999999 までの間で値を指定する必要があります。  
  
 日付をエンコードする方法、によりが 30 1899 年 12 月 1 日の時刻を表す 2 つの方法に注意してください。 たとえば、-0.5 と 0.5 は 1899 年 12 月の 30 正午を意味またはプラスの基本の日から 0 日を差し引いた日変位が基本の日、午前 0 時から半日間の移動距離は正午。  
  
 参照してください<xref:System.DateTime.ToOADate%2A>OLE オートメーションの詳細についてはします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">日付が有効な OLE オートメーション日付の値ではありません。</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値を、標準の日時形式指定子によってサポートされるすべての文字列形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  複数回の呼び出しを想定しないでください、<xref:System.DateTime.GetDateTimeFormats%2A>オーバー ロードには、同じデータが返されます。 このメソッドによって返されるデータには、特定のオーバー ロードに応じて、現在のカルチャの変更、ユーザーが個々 のカルチャ設定をオーバーライドまたはシステムのカルチャのデータに更新が発生する場合を変更できます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値を、標準の日時形式指定子によってサポートされるすべての文字列形式に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたこのインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって返される文字列配列、<xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>メソッドは、別の呼び出しによって返された文字列配列に結合する、<xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType>メソッドを"d"、"D"、"f"、"F"、"g"、"G"、"m"、"o"、"r"、"s"、"t"、"T"、"u"、"U"および"y"標準書式指定文字列。 標準書式指定子の詳細については、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)します。  
  
 現在のカルチャから情報を使用して、戻り値の各要素が書式設定されます。 現在のカルチャのカルチャに固有の書式設定情報の詳細については、次を参照してください。<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>します。  
  
> [!IMPORTANT]
>  このメソッドは、カルチャに依存するデータを使用するためしないメソッドを複数回呼び出すのと同じデータが返されると想定する必要があります。 現在のカルチャの変更、ユーザーが個々 のカルチャ設定をオーバーライドまたはシステムのカルチャのデータに更新が発生する場合、このメソッドによって返されるデータを変更できます。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>メソッド。 これには、EN-US をここでは、コンピューターの現在カルチャですべての可能な標準の日付と時刻の形式を使用して日付の文字列表現が表示されます。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 この例では、次の出力が表示されます。  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">標準の日時書式指定文字列。</param>
        <summary>このインスタンスの値を、指定した標準の日時形式指定子によってサポートされるすべての文字列表記に変換します。</summary>
        <returns>各要素が <paramref name="format" /> 標準日時形式指定子で書式指定されたこのインスタンスの値を表す文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`パラメーターには、標準の日付と時刻の書式指定子のいずれかを指定できます。 D、D、f、F、g、G、M (または、m) O (または、o) R (r)、s、t、T、u、U、および Y (または y) が含まれます。 詳細については、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)します。  
  
 現在のカルチャから情報を使用して、戻り値の各要素が書式設定されます。 現在のカルチャのカルチャに固有の書式設定情報の詳細については、次を参照してください。<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>します。  
  
> [!IMPORTANT]
>  このメソッドは、カルチャに依存するデータを使用するためしないメソッドを複数回呼び出すのと同じデータが返されると想定する必要があります。 現在のカルチャの変更、ユーザーが個々 のカルチャ設定をオーバーライドまたはシステムのカルチャのデータに更新が発生する場合、このメソッドによって返されるデータを変更できます。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.GetDateTimeFormats%28System.Char%29>メソッド。 現在のカルチャの長い日付の書式指定子 ("D") を使用して日付の文字列表現が表示されます。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> は有効な標準日時形式指定子の文字ではありません。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの値を、標準日時形式指定子および指定したカルチャ固有の書式情報によってサポートされる、すべての文字列形式に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたこのインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって返される文字列配列、<xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドは、別の呼び出しによって返された文字列配列に結合する、<xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドを"d"、"D"、"f"、"F"、"g"、"G"、"m"、"o"、"r"、"s"、"t"、"T"、"u"、"U"および"y"標準書式指定文字列。 標準書式指定子の詳細については、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)します。  
  
 によって指定されたカルチャに固有の情報を使用して、戻り値の各要素が書式設定`provider`します。  
  
> [!IMPORTANT]
>  しない限り、メソッドに複数の呼び出しが同一のデータを返すことを想定しないでくださいこのメソッドは、カルチャに依存するデータを使用しているため`provider`は、<xref:System.Globalization.CultureInfo>インバリアント カルチャを表すオブジェクト。 ユーザーの個々 のカルチャ設定をオーバーライドする場合、このメソッドによって返されるデータは変更できます`provider`をシステムのカルチャのデータの更新が発生した場合または`provider`します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>メソッド。 すべての可能な標準の日付と時刻の形式を使用して、FR-FR カルチャの日付の文字列表現が表示されます。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 この例では、次の出力が表示されます。  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">日時書式指定文字列。</param>
        <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの値を、指定した標準日時形式指定子およびカルチャ固有の書式情報によってサポートされる、すべての文字列表記に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたこのインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Format パラメーターには、標準の日付と時刻の書式指定子のいずれかを指定できます。 D、D、f、F、g、G、M (または、m) O (または、o) R (r)、s、t、T、u、U、および Y (または y) が含まれます。 詳細については、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)します。  
  
 によって指定されたカルチャに固有の情報を使用して、戻り値の各要素が書式設定`provider`します。  
  
> [!IMPORTANT]
>  しない限り、メソッドに複数の呼び出しが同一のデータを返すことを想定しないでくださいこのメソッドは、カルチャに依存するデータを使用しているため`provider`は、<xref:System.Globalization.CultureInfo>インバリアント カルチャを表すオブジェクト。 ユーザーの個々 のカルチャ設定をオーバーライドする場合、このメソッドによって返されるデータは変更できます`provider`をシステムのカルチャのデータの更新が発生した場合または`provider`します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29>メソッド。 FR-FR カルチャの短い形式の日付の書式指定子 ("d") を使用して日付の文字列表現が表示されます。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> は有効な標準日時形式指定子の文字ではありません。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.TypeCode" /> 値型の <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>列挙型定数 <see cref="F:System.TypeCode.DateTime" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の時間の部分を取得します。</summary>
        <value>DateTime の時間部分 (0 ～ 23)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、 <xref:System.DateTime.Hour%2A> 24 時間制を使用してプロパティが常に表現します。 日付と時刻を 12 時間制を使用して時間を表す文字列を取得する、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>または<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>"h"カスタム書式指定子を持つメソッド。 例:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Hour%2A>プロパティ。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.DateTime" /> のインスタンスが、現在のタイム ゾーンの夏時間の期間内であるかどうかを示します。</summary>
        <returns><see langword="true" /> プロパティの値が <see cref="P:System.DateTime.Kind" /> または <see cref="F:System.DateTimeKind.Local" /> で、この <see cref="F:System.DateTimeKind.Unspecified" /> インスタンスの値がローカル タイム ゾーンの夏時間の期間内にある場合は <see cref="T:System.DateTime" />。<see langword="false" /> が <see cref="P:System.DateTime.Kind" /> の場合は <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを判断するかどうか、現在<xref:System.DateTime>値がによって返される、ローカル タイム ゾーンの夏時間の範囲に収まる、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>プロパティ。 値を取得することによって、タイム ゾーンが夏時間をサポートするかどうかを判断することができます、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType>プロパティ。 夏時間タイム ゾーンを取得することによって夏時間からの移行のタイミングを決定できます、<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>タイム ゾーンのによって返される配列<xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType>プロパティ。  
  
 場合、現在<xref:System.DateTime>値は、ローカル タイム ゾーンで、あいまいであるか、無効な時間のいずれかを表す、メソッドを返します`false`します。  
  
 [!INCLUDE[winxp](~/includes/winxp-md.md)] 、システム、<xref:System.DateTime.IsDaylightSavingTime%2A>メソッドは、現在のインスタンスに、夏時間があるかどうかを決定するときに、現在の調整規則のみを認識します。 結果として、メソッド可能性がありますいない正確に報告、現在のインスタンスが、現在の調整規則を有効にされる前に、の期間が夏時間をかどうか。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">4 桁の年。</param>
        <summary>指定された年が閏年かどうかを示す値を返します。</summary>
        <returns><see langword="true" /> が閏年である場合は <paramref name="year" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` 4 桁の 10 進; として指定されます。たとえば、1996 です。  
  
 `year` 常に、構成のグレゴリオ暦カレンダーにおける年として解釈されます。 他のカレンダーで特定の年が閏年をしたかどうかを判断する呼び出し、暦オブジェクトの`IsLeapYear`メソッド。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.IsLeapYear%2A>メソッドをどの 1994 と 2014 年が閏年であるかを確認します。 結果も示すときに、<xref:System.DateTime.AddYears%2A>閏日に年を追加するメソッドを使用します。  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスが表す時刻の種類 (現地時刻、世界協定時刻 (UTC)、または、そのどちらでもない) を示す値を取得します。</summary>
        <value>現在の時刻が表すものを示す列挙値の 1 つ。 既定値は、<see cref="F:System.DateTimeKind.Unspecified" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 明示的に設定することができます、<xref:System.DateTime.Kind%2A>プロパティの新しい<xref:System.DateTime>を特定の値<xref:System.DateTimeKind>値を呼び出すことによって、<xref:System.DateTime.SpecifyKind%2A>メソッド。  
  
 <xref:System.DateTime.Kind%2A>プロパティにより、<xref:System.DateTime>世界協定時刻 (UTC) または現地時刻のいずれかを明確に反映するように値。 これに対し、<xref:System.DateTimeOffset>構造体は時間で 1 つのポイントとして任意のタイム ゾーンでいつでもを明確に反映できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、どのように<xref:System.DateTime.Kind%2A>プロパティの影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" /> の最大有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値と同じです 23:59:59.9999999 (UTC) 12 月 31 日 9999 グレゴリオ暦の 00時 00分: 00 UTC、10000 1 月 1 日の前に 1 つの 100 ナノ秒タイマー刻みで。  
  
 などの一部の暦、<xref:System.Globalization.ThaiBuddhistCalendar>より前である日付範囲をサポートして<xref:System.DateTime.MaxValue>します。 このような場合にアクセスしようとして<xref:System.DateTime.MaxValue>変数の代入、または書式設定と解析操作ではスロー、<xref:System.ArgumentOutOfRangeException>します。 値を取得するのではなく<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、最新の有効な日付値を指定したカルチャの値を取得することができます、<xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType>プロパティ。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.DateTime>コンス トラクターに渡して、オブジェクト、<xref:System.Int64>タイマー刻みの数を表す値です。 この値より大きいまたは等しいが例では、コンス トラクターを呼び出す前ににより`DateTime.MinValue.Ticks`以下と等しい、`DateTime.MaxValue.Ticks`します。 そうでないをスローした場合、<xref:System.ArgumentOutOfRangeException>します。  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付のミリ秒の部分を取得します。</summary>
        <value>DateTime のミリ秒部分 (0 ～ 999)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列表現を表示することができます、 <xref:System.DateTime.Millisecond%2A> "fff"書式指定子を使用してプロパティ。 たとえば、次のコードでは、日付と時刻のコンソールでのミリ秒数を含む文字列が表示されます。  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 "O"標準書式指定子を使用して日付と時刻の値の他のコンポーネントと共にミリ秒の部分を表示することもできます。 例:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 ただし、"o"書式指定子のラウンド トリップまたは格納するよりも表示するために小さいものが、<xref:System.DateTime>値。 として次の例は、カスタム書式指定文字列を使用して、その他の日付と時刻のコンポーネントと共にミリ秒を表示することもできます。  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Millisecond%2A>プロパティ。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の分の部分を取得します。</summary>
        <value>DateTime の分の部分 (0 ～ 59)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.DateTime.Minute%2A>プロパティ。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" /> の最小有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値はグレゴリオ暦の 0001 年 1 月 1日 00:00:00.0000000 (UTC) に相当します。  
  
 <xref:System.DateTime.MinValue> 割り当てられている日時を定義する、初期化されていない<xref:System.DateTime>変数。 次に例を示します。  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 <xref:System.DateTime.MinValue>と<xref:System.DateTime.MaxValue>プロパティを使用して、値に渡す前に、サポートされている範囲内にあることを確認、<xref:System.DateTime>コンス トラクター。 例のセクションのコードでは、この使用方法を示します。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.DateTime>コンス トラクターに渡して、オブジェクト、<xref:System.Int64>タイマー刻みの数を表す値です。 この値より大きいまたは等しいが例では、コンス トラクターを呼び出す前ににより`DateTime.MinValue.Ticks`以下と等しい、`DateTime.MaxValue.Ticks`します。 そうでないをスローした場合、<xref:System.ArgumentOutOfRangeException>します。  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の月の部分を取得します。</summary>
        <value>DateTime の月部分 (1 ～ 12)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.DateTime.Month%2A>プロパティ。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンピューター上の現在の日時を現地時刻で表した <see cref="T:System.DateTime" /> オブジェクトを取得します。</summary>
        <value>現在の現地日時を値として保持するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Now%2A>プロパティが返す、<xref:System.DateTime>現在の日付とローカル コンピューターの時刻を表す値です。 間に相違があることに注意してください、<xref:System.DateTime>を 0001 年 1 月 1 日午前 0 時から経過したタイマー刻みの数を表す値の文字列表現と<xref:System.DateTime>表現で日付と時刻の値の値を特定のカルチャ固有の形式です。 日付と時刻の値を書式設定については、次を参照してください。、<xref:System.DateTime.ToString%2A>メソッド。 次の例では、さまざまなカルチャ固有の形式で、短い形式の日付と時刻の文字列が表示されます。  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 このプロパティの解像度は、基になるオペレーティング システムに依存するシステム タイマーに依存します。 0.5 と 15 ミリ秒の間にする傾向にあります。 その結果への呼び出しを繰り返し、<xref:System.DateTime.Now%2A>ループのようにこのような短い形式の時刻の間隔でプロパティが同じ値を返す可能性があります。  
  
 <xref:System.DateTime.Now%2A>プロパティは、パフォーマンスの測定に頻繁に使用します。 ただし、ため、低解像度、ベンチマーク ツールとしての使用に適したはありません。 優れた代替を使用して、<xref:System.Diagnostics.Stopwatch>クラス。  
  
 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティが返す<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。  
  
> [!NOTE]
>  使用することも、<xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType>プロパティを現在の日付と時刻を取得します。 現地時刻を時刻で、さらに、その時刻の値の移植性のコンピューター間でのシングル ポイントとして明確に表現できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Now%2A>と<xref:System.DateTime.UtcNow%2A>現在のローカルの日付と時刻と現在のユニバーサルを取得するプロパティ (UTC) の日付と時刻を調整します。 値を持つと共に、文字列を表示する次のカルチャの数値の書式指定規則を使用して、その<xref:System.DateTime.Kind%2A>プロパティ。  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">追加する日付と時刻の値。</param>
        <param name="t">加算する時間間隔。</param>
        <summary>指定した日付と時刻に指定した時間間隔を加算して、新しい日付と時刻を作成します。</summary>
        <returns><paramref name="d" /> に <paramref name="t" /> を加算した値であるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[この演算子を同等のメソッドは、します。 <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 次の例では、加算演算子を示します。  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">比較する最初のオブジェクト。</param>
        <param name="d2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つの指定したインスタンスが等しいかどうかを判断します。</summary>
        <returns><see langword="true" /> と <paramref name="d1" /> が同じ日付と時刻を表す場合は <paramref name="d2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Equality%2A>演算子は、2 つかどうかを決定します。<xref:System.DateTime>タイマー刻みの数を比較することによって値が等しい。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 次の例では、等値演算子を示します。  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した <see cref="T:System.DateTime" /> が、指定したもう 1 つの <see cref="T:System.DateTime" /> より後の時刻かどうかを判断します。</summary>
        <returns><see langword="true" /> が <paramref name="t1" /> より遅い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThan%2A>演算子は、2 つの間のリレーションシップを決定します。<xref:System.DateTime>タイマー刻みの数を比較することによっての値。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 1 つの <see cref="T:System.DateTime" /> が、指定した別の <see cref="T:System.DateTime" /> と同じ日時またはそれより後の日時を表しているかどうかを判断します。</summary>
        <returns><paramref name="t1" /> が <paramref name="t2" /> と同じかそれより遅い場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThanOrEqual%2A>演算子は、2 つの間のリレーションシップを決定します。<xref:System.DateTime>タイマー刻みの数を比較することによっての値。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">比較する最初のオブジェクト。</param>
        <param name="d2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つの指定したインスタンスが等しいかどうかを判断します。</summary>
        <returns><see langword="true" /> と <paramref name="d1" /> が同じ日付と時刻を表していない場合は <paramref name="d2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Inequality%2A>演算子は、2 つかどうかを決定します。<xref:System.DateTime>タイマー刻みの数を比較することによって値が等しくないです。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した <see cref="T:System.DateTime" /> が、指定したもう 1 つの <see cref="T:System.DateTime" /> より前の時刻かどうかを判断します。</summary>
        <returns><see langword="true" /> が <paramref name="t1" /> より早い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThan%2A>演算子は、2 つの間のリレーションシップを決定します。<xref:System.DateTime>タイマー刻みの数を比較することによっての値。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 1 つの <see cref="T:System.DateTime" /> が、指定した別の <see cref="T:System.DateTime" /> と同じ日時またはそれより前の日時を表しているかどうかを判断します。</summary>
        <returns><paramref name="t1" /> が <paramref name="t2" /> と同じかそれより早い場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThanOrEqual%2A>演算子は、2 つの間のリレーションシップを決定します。<xref:System.DateTime>タイマー刻みの数を比較することによっての値。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.DateTime" /> から指定した <see cref="T:System.DateTime" /> または <see cref="T:System.TimeSpan" /> を減算します。</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">減算対象の日付および時刻の値 (被減数)。</param>
        <param name="d2">減算する日付および時刻の値 (減数)。</param>
        <summary>指定した日付と時刻から指定したもう 1 つの日付と時刻を減算して、時間間隔を返します。</summary>
        <returns><paramref name="d1" /> と <paramref name="d2" /> の間の時間間隔、つまり <paramref name="d1" /> から <paramref name="d2" /> を引いた値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29>メソッドがの値を考慮していない、 <xref:System.DateTime.Kind%2A> 、2 つのプロパティ<xref:System.DateTime>減算を実行するときの値します。 減算する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 それ以外の場合、結果は、タイム ゾーン間の差が含まれます。  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>メソッドは、減算を実行するときに、タイム ゾーン間で相違点を考慮します。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 次の例で、<xref:System.DateTime.Subtract%2A>メソッドと減算演算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">減算される日時の値。</param>
        <param name="t">減算する時間間隔。</param>
        <summary>指定した日付と時刻から指定した時間間隔を減算して、新しい日付と時刻を返します。</summary>
        <returns><paramref name="d" /> の値から <paramref name="t" /> の値を減算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドのタイマー刻みの値を減算する`t`のタイマー刻みの値から`d`します。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 次の例で、<xref:System.DateTime.Subtract%2A>メソッドと減算演算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このセクションの内容:  
  
- [どのメソッドが呼び出しですか。](#Tasks)
- [解析する文字列](#StringToParse)
- [解析およびカルチャの規則](#Culture)
- [解析とスタイルの要素](#Styles)
- [戻り値と DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>どのメソッドが呼び出しですか。  
  
|終了|Call|  
|--------|----------|  
|現在のカルチャの規則を使用して日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%29> オーバーロード|  
|特定のカルチャの規則を使用して日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> オーバー ロード (を参照してください[解析と文化的](#Culture))|  
|(空白文字や空白) などの特殊なスタイル要素を含む日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> オーバーロード|  
|日付と時刻の文字列で、特定の形式である必要がありますを解析します。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> または <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|日付と時刻の文字列を解析し、UTC と現地時間への変換を実行します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> オーバーロード|  
|例外を処理せずには、日付と時刻の文字列を解析します。|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> メソッド|  
|書式設定操作によって作成された日付と時刻の値 (ラウンド トリップ) を復元します。|"O"または"r"標準書式指定文字列を渡す、<xref:System.DateTime.ToString%28System.String%29>メソッド、および呼び出し、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>オーバー ロード <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|コンピューター (と可能性があるカルチャ) の境界を越えて固定形式で日付と時刻の文字列を解析します。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> または<xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>メソッド|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>解析する文字列  
 <xref:System.DateTime.Parse%2A>メソッドに日付と時刻の値の文字列形式に変換しようとしました。 その<xref:System.DateTime>と同じです。 スローされることがなく完全に入力文字列を解析しようとする<xref:System.FormatException>例外。  
  
> [!IMPORTANT]
>  認識されない文字列形式では、ため、解析操作が失敗した場合、<xref:System.DateTime.Parse%2A>メソッドがスローされます、<xref:System.FormatException>であるのに対し、<xref:System.DateTime.TryParse%2A>メソッドを返します。`false`します。 使用する必要がある例外処理な高価なので、<xref:System.DateTime.Parse%2A>解析操作の入力ソースが信頼されているために、成功が必要です。 <xref:System.DateTime.TryParse%2A> 解析エラーが高いときに、入力ソースが信頼されている、または正常に解析できない文字列の代わりに適切な既定値があるため、特にが適しています。   

 解析対象の文字列形式は次のいずれかのことができます。  
  
-   日付と時刻の部分を含む文字列。  
  
-   日付がない時刻の部分を含む文字列。 時刻部分がない場合、メソッドは深夜 12時 00分を想定しています。 基づき年に変換されます、日付部分が 2 桁の年の場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>の現在のカルチャの現在の暦または特定のカルチャの現在の暦 (null 以外でオーバー ロードを使用する場合`provider`引数)。  
  
- 月と年が含まれる日付部分がない日付部分を含む文字列。 メソッドは、月の最初の曜日を想定しています。

- 月と日を含む日付部分が年コンポーネントがありません。 を含む文字列。 メソッドは、現在の年を想定しています。

-   時間がない日付部分を含む文字列。 メソッドを呼び出さない限りの現在の日付を想定しています、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>オーバー ロードして、含める<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>で、`styles`でいる場合は、メソッドが想定年 1 月 1 日 0001 引数。  

- 1 時間のみとない日付部分と、AM/PM 指定子が含まれる時コンポーネントを含む文字列。 メソッドでは、現在の日付と分と秒なしの時間が前提としていません。 この動作を変更するには呼び出すことによって、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>オーバー ロードし、は、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>で、`styles`でいる場合は、メソッドが想定年 1 月 1 日 0001 引数。

-   タイム ゾーン情報が含まれています、ISO 8601 に準拠している文字列。 次の例で最初の文字列が世界協定時刻 (UTC) を指定し、2 つ目は 7 時間であるタイム ゾーンの時刻を指定 UTC より前。  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   GMT 指定子が含まれていますし、RFC 1123 時刻形式に準拠している文字列例えば：  
  
     "Sat、01 2008年 11 月 19時 35分: 00 GMT"  
  
-   日付と時刻とタイム ゾーン オフセットの情報; を含む文字列例えば：  
  
     "03/01/2009 05:42:00 -5:00"  

次の例では、EN-US カルチャをここでは、現在のカルチャの書式設定規則を使用してこれらの形式の各文字列を解析します。

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 入力文字列が解析メソッドで使用されるカレンダーで、閏年の leap 日を表すかどうか (を参照してください[解析およびカルチャの規則](#Culture))、<xref:System.DateTime.Parse%2A>メソッドは、文字列を正常に解析します。 入力文字列が閏日非 leap 年でを表している場合、メソッドがスローされます、<xref:System.FormatException>します。  
  
 <xref:System.DateTime.Parse%2A>日付の文字列表現を解析しようとするメソッドと、現在または複数の異なるカルチャで文字列を解析しようとして、指定したカルチャの書式設定規則を使用して時間に失敗することができます。 さまざまなロケール間で特定の日付と時刻の形式を解析するいずれかのオーバー ロードを使用して、<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>メソッドと書式指定子を提供します。  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>解析およびカルチャの規則  
 すべてのオーバー ロード、<xref:System.DateTime.Parse%2A>メソッドはカルチャに依存しない限り、解析対象の文字列 (で表される`s`次の表に)、ISO 8601 のパターンに準拠しています。 解析操作が、書式設定情報を使用して、<xref:System.Globalization.DateTimeFormatInfo>次のように派生したオブジェクト。  
  
|呼び出す場合|`provider`は|書式設定情報はからを派生します。|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|現在のスレッド カルチャ (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>プロパティ)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|A<xref:System.Globalization.DateTimeFormatInfo>オブジェクト|指定した<xref:System.Globalization.DateTimeFormatInfo>オブジェクト|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|現在のスレッド カルチャ (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>プロパティ)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|A<xref:System.Globalization.CultureInfo>オブジェクト|<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティ|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|カスタム<xref:System.IFormatProvider>実装|<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> メソッド|  
  
 書式設定情報を派生すると、<xref:System.Globalization.DateTimeFormatInfo>オブジェクト、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>プロパティは、解析操作で使用する暦を定義します。  
  
 使用して日付と時刻の文字列を解析する場合、<xref:System.Globalization.DateTimeFormatInfo>でオブジェクトが標準的なカルチャの異なる設定をカスタマイズするを使用して、<xref:System.DateTime.ParseExact%2A>メソッドの代わりに、<xref:System.DateTime.Parse%2A>変換に成功した可能性を向上させるためにメソッド。 非標準の日付と時刻の文字列は、複雑で困難を解析するを指定できます。 <xref:System.DateTime.Parse%2A>メソッドが失敗するすべてのいくつかの暗黙的な解析パターンを使用した文字列の解析を試みます。 これに対し、<xref:System.DateTime.ParseExact%2A>メソッドでは、成功する可能性のある 1 つまたは複数の正確な解析パターンを明示的に指定する必要があります。 詳細については、「DateTimeFormatInfo と動的データ」のセクションを参照してください、<xref:System.Globalization.DateTimeFormatInfo>トピック。  
  
> [!IMPORTANT]
>  特定のカルチャの書式指定規則は動的であり変更できることに注意してください。 (現在) の既定のカルチャまたは書式指定規則に依存する解析操作を指定することを意味する<xref:System.IFormatProvider>インバリアント カルチャ以外のカルチャを表すオブジェクトが予期せず失敗する場合、次のいずれかが発生します。  
>   
> -   カルチャに固有のデータが .NET Framework または .NET Framework の既存のバージョンに更新プログラムの結果としてメジャーまたはマイナー バージョン間で変更されました。  
> -   カルチャに固有のデータには、コンピューターまたはセッションごとに異なることがあるユーザー設定が反映されます。  
> -   カルチャに固有のデータは、標準的なカルチャまたはカスタムのカルチャの設定をオーバーライドする置換カルチャを表します。  
>   
>  カルチャのデータの変更に関連付けられているデータと時刻の文字列を解析中に問題を防ぐためには、日付と時刻の文字列を解析するには、インバリアント カルチャを使用して、または呼び出すことができます、<xref:System.DateTime.ParseExact%2A>または<xref:System.DateTime.TryParseExact%2A>メソッドと正確な形式を指定します。解析する文字列。 シリアル化する、日付と時刻のデータを逆シリアル化を使用するか、インバリアント カルチャの書式指定規則、またはシリアル化し逆シリアル化することができる場合、<xref:System.DateTime>バイナリ形式の値。  
>   
>  詳細については「動的なカルチャ データ」のセクションを参照してください、<xref:System.Globalization.CultureInfo>トピックと「保持 DateTime 値」のセクションで、<xref:System.DateTime>トピック。  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>解析とスタイルの要素  
 すべて<xref:System.DateTime.Parse%2A>オーバー ロードは、入力文字列の先頭で、内部、または末尾の空白文字を無視 (で表される`s`次の表に)。 日付と時刻の先頭と末尾の番号記号 (「#」、U + 0023)、ペアで囲むことができ、いずれかで最後できます。 または以上の NULL 文字 (u+0000) です。  
  
 さらに、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>オーバー ロードは、`styles`パラメーターの 1 つまたは複数のメンバーで構成される、<xref:System.Globalization.DateTimeStyles>列挙体。 このパラメーターを定義する方法`s`を解釈して、解析操作をどのように変換する必要があります`s`日付と時刻にします。 次の表に、それぞれの効果<xref:System.Globalization.DateTimeStyles>解析操作でのメンバー。  
  
|DateTimeStyles メンバー|変換への影響|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、それを UTC に変換、次のようにします。<br /><br /> If `s` 、タイム ゾーン オフセットが含まれて 場合`s`タイム ゾーン情報が含まれていないが`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeLocal>フラグ、メソッドの呼び出し、文字列を解析します<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値です。(UTC) とセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。<br />If `s` UTC で表すことを示す場合、または`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeUniversal>フラグは、メソッド、文字列を解析して、返されたのタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。<br />その他のすべてのケースでは、フラグには影響はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|この値は無視されます。 内部の空白文字が常に日付と時刻の要素で許可されて`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|この値は無視されます。 先頭の空白文字が常に日付と時刻の要素で許可されて`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|この値は無視されます。 末尾の空白文字が日付と時刻の要素で許可されている常に`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定します`s`先頭、内部、および末尾の空白文字を含めることができます。 これが既定の動作です。 制限を指定して、オーバーライドできません<xref:System.Globalization.DateTimeStyles>などの列挙値<xref:System.Globalization.DateTimeStyles.None>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定された場合`s`がありませんが、現地時刻、タイム ゾーン情報が使用されます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>フラグが存在する、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値に設定されて<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`と見なされます、UTC タイム ゾーン情報がありません。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>フラグが存在する、メソッドは、返された変換<xref:System.DateTime>値を UTC から現地時刻とセットにその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効では、この値は無視されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報を含む文字列、日付と時刻文字列の変換を防止しようと、<xref:System.DateTime>を現地時刻を表す値の<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 呼び出すことによってこのような文字列を作成する通常、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>メソッドと、"o"、"r"または"u"標準書式指定子を使用しています。|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>戻り値と DateTime.Kind

`DateTime.Parse`戻り値のオーバー ロードを<xref:System.DateTime>値<xref:System.DateTime.Kind>プロパティには、タイム ゾーン情報が含まれています。 時間があることを示す、ことができます。

- 協定世界時 (<xref:System.DateTimeKind.Utc?displayProperty=fullName>)。
- ローカル タイム ゾーンの時刻 (<xref:System.DateTimeKind.Local?displayProperty=fullName>)。
- 不明なタイムゾーンで時刻 (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >)。
 
 一般に、<xref:System.DateTime.Parse%2A>メソッドを返します。 を<xref:System.DateTime>オブジェクト<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 ただし、<xref:System.DateTime.Parse%2A>メソッドは、タイム ゾーンの変換を実行し、値を設定可能性がありますも、<xref:System.DateTime.Kind%2A>プロパティの値に応じて異なる方法で、`s`と`styles`パラメーター。  
  
|If|タイム ゾーンの変換|Kind プロパティ|  
|--------|--------------------------|-------------------|  
|`s` タイム ゾーン情報が含まれています。|日付と時刻は、ローカル タイム ゾーンの時刻に変換されます。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` タイム ゾーンの情報を格納および`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>フラグ。|日付と時刻が世界協定時刻 (UTC) に変換されます。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` Z または GMT タイム ゾーン指定子が含まれていますと`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.RoundtripKind>フラグ。|日付と時刻は UTC として解釈されます。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 次の例では、ローカル タイム ゾーンの時刻にタイム ゾーン情報を含む日付の文字列に変換します。  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  日付と時刻の値を維持することもできます。<xref:System.DateTime.Kind%2A>プロパティ、書式設定とを使用して操作を解析中に、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>フラグ。 次の例を示しています、<xref:System.Globalization.DateTimeStyles.RoundtripKind>フラグで解析操作に影響<xref:System.DateTime>は、"o"、"r"または"u"書式指定子を使用して文字列に変換する値。  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

呼び出すさまざまな例として、`DateTime.Parse`メソッド内に点在、[解説](#remarks)、個々 のドキュメントで、この記事のセクション`DateTime.Parse`オーバー ロードします。

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

完全なセットをダウンロードすることもできます`DateTime.Parse`例については、に含まれている、 [(C#) または .NET Core 2.0 プロジェクト](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip)と[Visual basic .NET Core 2.0 プロジェクト](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip)、から、 [dotnet/。サンプルの GitHub リポジトリ](https://github.com/dotnet/samples)します。

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。 詳細については、「[解析する文字列](#StringToParse)」をご覧ください。</param>
        <summary>現在のスレッド カルチャの書式規則を使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
場合`s`このメソッドが戻る、タイム ゾーン情報を含む、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>した日付と時刻に変換します`s`を現地時刻。 それ以外の場合、タイム ゾーンの変換を行わずを返します、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。

このオーバー ロードは、解析を試みます`s`現在のカルチャの書式設定規則を使用しています。 現在のカルチャがで示される、<xref:System.Globalization.CultureInfo.CurrentCulture>プロパティ。 特定のカルチャの書式指定規則を使用して文字列を解析するには、呼び出し、<xref:System.DateTime.Parse(System.String,System.IFormatProvider)>または<xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)>オーバー ロードします。

このオーバー ロードは、解析を試みます`s`を使用して<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>スタイル。

## <a name="example"></a>例

次の例では、によって、いくつかの日付と時刻の値の文字列表現を解析します。

- 例の出力を生成するために使用されるコンピューターの現在のスレッド カルチャの書式指定規則を提供する既定の書式プロバイダーを使用します。 この例の出力には、EN-US カルチャの書式指定規則が反映されます。

- これは既定のスタイル値を使用して<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>します。 

処理、<xref:System.FormatException>メソッドが、いくつかその他のカルチャを使用して、日付と時刻の文字列表現を解析しようとしています。 ときにスローされる例外の書式設定規則。 現在のスレッド カルチャの書式指定規則を使用しない日付と時刻の値を正常に解析する方法も示します。  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> に日付と時刻の有効な文字列形式が含まれていません。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。 詳細については、「[解析する文字列](#StringToParse)」をご覧ください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。  「[解析およびカルチャの規則](#Culture)」をご覧ください。</param>
        <summary>カルチャ固有の書式情報を使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> で指定された書式に従って表記された、<paramref name="provider" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
場合`s`このメソッドが戻る、タイム ゾーン情報を含む、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>した日付と時刻に変換します`s`を現地時刻。 それ以外の場合、タイム ゾーンの変換を行わずを返します、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。

このオーバー ロードは、解析を試みます`s`を使用して、<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>スタイル。

## <a name="example"></a>例

次の例では、EN-US、FR-FR、DE-DE カルチャの規則を使用して日付文字列の配列を解析します。 別のカルチャに関係なく 1 つの日付の文字列表現を異なって解釈されることを示します。  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> に日付と時刻の有効な文字列形式が含まれていません。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。 詳細については、「[解析する文字列](#StringToParse)」をご覧ください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。  「[解析およびカルチャの規則](#Culture)」をご覧ください。</param>
        <param name="styles">解析操作を成功させるために <paramref name="s" /> で使用できるスタイル要素を示し、現在のタイム ゾーンまたは現在の日付に関連して解析した日付を解釈する方法を定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>カルチャ固有の書式情報と書式スタイルを使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="styles" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

このメソッドのオーバー ロードは、日付と時刻に変換します。`s`設定と、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値を次のようにします。

|If |タイム ゾーンの変換|Kind プロパティ|   
|-----|-----|-----|  
|`s` タイム ゾーン情報は含まれません。|なし。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` タイム ゾーン情報が含まれています。|ローカル タイム ゾーンの時刻に|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` タイム ゾーンの情報を格納し、' スタイルが含まれています、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグ。|調整された形式の時刻 (UTC) に|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` Z または GMT タイム ゾーン指定子が含まれていますと`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>します。|なし。|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>例

次の例で、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>メソッドの値を表示し、<xref:System.DateTime.Kind%2A>結果のプロパティ<xref:System.DateTime>値。  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> に日付と時刻の有効な文字列形式が含まれていません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています。 たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方です。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">方法 : 日付と時刻の値をラウンドトリップさせる</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTime" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="format"><paramref name="s" /> の必要な形式を定義する形式指定子。 詳細については、「解説」を参照してください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns><paramref name="s" /> および <paramref name="format" /> で指定された書式に従って表記された <paramref name="provider" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドで定義された書式である必要があります日付の文字列表現を解析し、`format`パラメーター。 必要、\<日付 > と\<時間 > で指定された順序で表示される日付と時刻の文字列形式の要素`format`、および`s`で許可されている以外の空白があるないです`format`。 場合`format`日付を定義します。 時刻要素がないと、解析操作が成功した結果<xref:System.DateTime>値が午前 0 時 (00: 00:00)。 場合`format`、時間を定義する日付要素がないと、解析操作が成功すると、結果<xref:System.DateTime>値が日付`DateTime.Now.Date`します。  
  
 場合`s`が成功すると、特定のタイム ゾーンと、解析操作の時刻を表していない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 場合`s`わけでは、特定のタイム ゾーンの時刻と`format`存在するタイム ゾーン情報は、(場合など、 `format` "o"、"r"または"u"標準書式指定子は、"z"、"zz"または"zzz"が含まれている場合、またはカスタム書式指定子の場合)、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。  
  
 `format`パラメーターは、1 つの標準書式指定子、または必要な書式を定義する 1 つまたは複数のカスタム書式指定子を含む文字列`s`します。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)または[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。  
  
> [!NOTE]
>  場合`format`されません ("yyyyMMddHHmm") などの日付または時刻の区切り記号を含めるのインバリアント カルチャを使用するカスタム書式パターンには、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、書式パターンに時間を指定する場合は、"H"狭義の形式ではなくより多くのフォーム"HH"を指定します。  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義されます、`provider`パラメーターの正確な形式は`s`場合`format`は標準的な形式です。指定子の文字列。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクトを`s`します。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>シンボルとに書式設定プロパティを定義します`s`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、いずれかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ParseExact%2A>メソッド。  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> または <paramref name="format" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> または <paramref name="format" /> が空の文字列です。  
  
- または - 
 <paramref name="s" /> に、<paramref name="format" /> で指定されているパターンに対応する日付と時刻が含まれていません。  
  
- または - 
<paramref name="s" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="format"><paramref name="s" /> の必要な形式を定義する形式指定子。 詳細については、「解説」を参照してください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> について、また <paramref name="s" /> に指定できるスタイル要素について、または <paramref name="s" /> から <see cref="T:System.DateTime" /> 値への変換についての追加情報を提供する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <returns><paramref name="s" />、<paramref name="format" />、および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="style" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドで定義された書式である必要があります日付の文字列表現を解析し、`format`パラメーター。 必要で、日付と時刻の要素`s`で指定された順序で表示される`format`します。 場合`s`のパターンに一致しない、`format`によって定義されたすべてのバリエーションのパラメーター、`style`パラメーター、メソッドはスロー、<xref:System.FormatException>します。 これに対し、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドは、書式プロバイダーのによって認識される形式のいずれかの日付の文字列表現を解析し<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドで日付と時刻要素こともできます`s`を任意の順序で表示します。  
  
 場合、`s`パラメーターに時刻のみが含まれ、日なししない限り、現在の日付が使用される、`style`パラメーターが含まれる、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>フラグ場合、既定の日付 (`DateTime.Date.MinValue`) 使用されます。 場合、`s`パラメーターが含まれるは、日付のみといいえ時、午前 0 時 (00: 00:00) が使用されます。 `style`パラメーターも決定するかどうか、`s`パラメーターは、先頭、内部、または末尾の空白文字を含めることができます。  
  
 場合`s`タイム ゾーンの情報が含まれていない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグ、返された、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、またはを使用して、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>と<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグ、返された、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 場合`s`、タイム ゾーン情報を含む、時刻は、必要に応じて、現地時刻に変換されます、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>フラグを設定して、現地時刻を世界協定時刻 (UTC) の変換を行わない、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。  
  
 `format`の必要なパターンを定義するパラメーター、`s`パラメーター。 1 つまたは複数のいずれかのカスタム書式指定子で構成されていることができます、[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブル、またはから定義済みのパターンを識別する 1 つの標準書式指定子、[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)テーブル。  
  
 カスタム書式パターンでは日付または時刻の区切り記号を使用しない場合は、インバリアント カルチャを使用して、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、パターンに時間を指定する場合は、"H"狭義の形式ではなくより多くのフォーム"HH"を指定します。  
  
> [!NOTE]
>  必要とするのではなく`s`解析操作が成功するための 1 つの形式に準拠して、呼び出すことができます、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドと、許可されている複数の形式を指定します。 これにより、解析操作が成功する可能性が高くなります。  
  
 `styles`パラメーターには 1 つまたは複数のメンバーが含まれています、<xref:System.Globalization.DateTimeStyles>かどうかと、空白文字で定義されていないかを決定する列挙体`format`に表示できる`s`解析操作の正確な動作を制御します。 次の表をそれぞれどのように説明のメンバー、<xref:System.Globalization.DateTimeStyles>列挙型の運用に与える影響、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>メソッド。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれて 場合`s`タイム ゾーン情報が含まれていないが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグは、メソッド呼び出し、文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を UTC にを設定し、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 場合`s`UTC で表すことを示す場合、または`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>フラグは、メソッド、文字列を解析して、返されたのタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 その他のすべてのケースでは、フラグには影響はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|定義されていない、空白文字を指定します`format`任意の個々 の日付または時刻の要素の間に表示できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|定義されていない、空白文字を指定します`format`の先頭に表示できる`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|定義されていない、空白文字を指定します`format`の末尾に記述できる`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定します`s`先頭、内部、および末尾の空白で定義されていない場合があります`format`します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合を指定します`s`のタイム ゾーン情報がない、現地時刻を表すと見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値に設定されて<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`任意のタイム ゾーン情報が不足しています utc と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、メソッドは、返された変換<xref:System.DateTime>値を UTC から現地時刻とセットにその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|場合`s`の時刻に設定されている戻り値の日付の日付の情報がない`DateTime.MinValue.Date`します。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`パラメーターは、既定値を使用して解析されます。 空白以外に含まれている`format`は許可されています。 場合`s`、返された日付、日付部分がない<xref:System.DateTime>値は 1/1/0001 を設定します。 場合`s`タイム ゾーンの情報が含まれていない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 タイム ゾーン情報が存在する場合`s`、時刻は現地時刻に変換し、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|のタイム ゾーン情報を含む文字列への変換を防止しようとする<xref:System.DateTime>値の日付と時刻の使用その<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 主に、このフラグには、ローカル時刻を UTC 時刻の変換ができないようにします。|  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義されます、`provider`パラメーターの正確な形式は`s`場合`format`は標準的な形式です。指定子の文字列。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクトを`s`します。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>シンボルとに書式設定プロパティを定義します`s`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、いずれかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>メソッド。 なお、文字列"5/01/2009 8時 30分 AM"ことはできませんが正常に解析されたときに、`styles`パラメーターと等しい<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>では、先頭のスペースは許可されていないため、`format`します。 文字列ではさらに、"5/01/2009 09時 00分"を正常に解析されたことはできません、`format`の"MM dd/yyyyhh:mm"日付文字列としての先頭をゼロ、1 か月の数の前はため`format`が必要です。  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> または <paramref name="format" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> または <paramref name="format" /> が空の文字列です。  
  
- または - 
 <paramref name="s" /> に、<paramref name="format" /> で指定されているパターンに対応する日付と時刻が含まれていません。  
  
- または - 
<paramref name="s" /> の時間の部分と AM/PM 指定子が調和していません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています。 たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="formats"><paramref name="s" /> の許可された形式の配列。 詳細については、「解説」を参照してください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <returns><paramref name="s" />、<paramref name="formats" />、および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="style" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドに割り当てられているパターンのいずれかに一致する日付の文字列表現を解析し、`formats`パラメーター。 場合、文字列`s`によって定義されたバリエーションのいずれかでこれらのパターンのいずれかと一致しません、`styles`パラメーター、メソッドはスロー、<xref:System.FormatException>します。 別に比較する`s`複数の書式設定パターンになく単一の書式設定パターンでは、このオーバー ロードの動作、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッド。  
  
 `s`パラメーターには、解析するには、日付と時刻が含まれています。 場合、`s`パラメーターに時刻のみが含まれ、日なししない限り、現在の日付が使用される、`style`パラメーターが含まれる、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>フラグ場合、既定の日付 (`DateTime.Date.MinValue`) 使用されます。 場合、`s`パラメーターが含まれるは、日付のみといいえ時、午前 0 時 (00: 00:00) が使用されます。 `style`パラメーターも決定かどうか、`s`パラメーターは、先頭を含めることができます、内部、または末尾の空白文字で書式指定文字列のいずれかで許可されているもの以外の`formats`します。  
  
 場合`s`タイム ゾーンの情報が含まれていない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグ、返された、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、またはを使用して、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>と<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグ、返された、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 場合`s`、タイム ゾーン情報を含む、時刻は、必要に応じて、現地時刻に変換されます、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>せず、現地時刻を世界協定時刻 (UTC) に変換を設定するフラグ、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。  
  
 `formats`パラメーターには、パターンの配列が含まれています。 その 1 つ`s`解析操作が成功する場合に正確に一致する必要があります。 内のパターン、`formats`パラメーターは、1 つまたは複数のカスタム書式指定子から、[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブル、またはから定義済みのパターンを識別する 1 つの標準書式指定子、[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)テーブル。  
  
 カスタム書式パターンでは日付または時刻の区切り記号を使用しない場合は、インバリアント カルチャを使用して、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、パターンに時間を指定する場合は、"H"狭義の形式ではなくより多くのフォーム"HH"を指定します。  
  
 `styles`パラメーターには 1 つまたは複数のメンバーが含まれています、<xref:System.Globalization.DateTimeStyles>かどうかと、空白文字で定義されていないかを決定する列挙体`format`に表示できる`s`解析操作の正確な動作を制御します。 次の表をそれぞれどのように説明のメンバー、<xref:System.Globalization.DateTimeStyles>列挙型の運用に与える影響、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>メソッド。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれて 場合`s`タイム ゾーン情報が含まれていないが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグは、メソッド呼び出し、文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を UTC にを設定し、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 場合`s`UTC で表すことを示す場合、または`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>フラグは、メソッド、文字列を解析して、返されたのタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 その他のすべてのケースでは、フラグには影響はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|定義されていない、空白文字を指定します`format`任意の個々 の日付または時刻の要素の間に表示できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|定義されていない、空白文字を指定します`format`の先頭に表示できる`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|定義されていない、空白文字を指定します`format`の末尾に記述できる`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定します`s`先頭、内部、および末尾の空白で定義されていない場合があります`format`します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合を指定します`s`のタイム ゾーン情報がない、現地時刻を表すと見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値に設定されて<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`任意のタイム ゾーン情報が不足しています utc と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、メソッドは、返された変換<xref:System.DateTime>値を UTC から現地時刻とセットにその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|場合`s`の時刻に設定されている戻り値の日付の日付の情報がない`DateTime.MinValue.Date`します。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`パラメーターは、既定値を使用して解析されます。 空白以外に含まれている`format`は許可されています。 場合`s`、返された日付、日付部分がない<xref:System.DateTime>値は 1/1/0001 を設定します。 場合`s`タイム ゾーンの情報が含まれていない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 タイム ゾーン情報が存在する場合`s`、時刻は現地時刻に変換し、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報が含まれている文字列の場合は、日付に変換できないし、時刻の使用を試みますその<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 主に、このフラグには、ローカル時刻を UTC 時刻の変換ができないようにします。|  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義されます、`provider`パラメーターの正確な形式は`s`場合`format`は標準的な形式です。指定子の文字列。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクトを`s`します。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>シンボルとに書式設定プロパティを定義します`s`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、いずれかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドを使用できる形式の数値の文字列を正常に解析できることを確認します。  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> または <paramref name="formats" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> が空の文字列です。  
  
- または - 
<paramref name="formats" /> の要素は空の文字列です。  
  
- または - 
 <paramref name="s" /> には、<paramref name="formats" /> のどの要素に対応する日時も含まれていません。  
  
- または - 
<paramref name="s" /> の時間の部分と AM/PM 指定子が調和していません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています。 たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の秒の部分を取得します。</summary>
        <value>DateTime の秒の部分 (0 ～ 59)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.DateTime.Second%2A>プロパティ。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">日付と時刻。</param>
        <param name="kind">新しいオブジェクトが現地時刻であるか、世界協定時刻 (UTC) であるか、またはそのどちらでもないかを示す列挙値の 1 つ。</param>
        <summary>指定された <see cref="T:System.DateTime" /> と同じタイマー刻みの数を持つ新しい <see cref="T:System.DateTime" /> オブジェクトを、指定された <see cref="T:System.DateTimeKind" /> 値 (現地時刻、世界協定時刻 (UTC)、または、そのいずれでもないことを示す) に基づいて作成します。</summary>
        <returns><paramref name="value" /> パラメーターが表すオブジェクトと同じティック数、および <see cref="T:System.DateTimeKind" /> パラメーターで指定された <paramref name="kind" /> 値を持つ、新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.DateTime>オブジェクトは、時刻の値が現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない、に基づいてし、100 ナノ秒タイマー刻み単位は時間の値を含むタイマー刻みフィールドかどうかを示す種類のフィールドで構成されています。 <xref:System.DateTime.SpecifyKind%2A>メソッドを作成する新しい<xref:System.DateTime>オブジェクトを使用して、指定`kind`パラメーターと元の時刻の値。  
  
> [!IMPORTANT]
>  返された<xref:System.DateTime>値は表しません同じインスタントとして、`value`パラメーター、および<xref:System.DateTime.SpecifyKind%2A>タイム ゾーン変換の方法ではありません。 指定された時間外に出て、代わりに、`value`パラメーターを変更せず、およびセット、<xref:System.DateTime.Kind%2A>プロパティを`kind`します。 タイム ゾーン変換については、次を参照してください。[タイム ゾーン間で時間を変換する](~/docs/standard/datetime/converting-between-time-zones.md)します。  
  
 <xref:System.DateTime.SpecifyKind%2A>メソッドが表示される相互運用性シナリオで役に立ちます、<xref:System.DateTime>が、指定されていない種類フィールドを持つオブジェクトを確認する独立したタイマー刻みフィールドが現地時刻と utc のどちらを表していることを意味します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、どのように<xref:System.DateTime.Kind%2A>プロパティの影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">.NET Framework アプリケーションにおける COM 相互運用性 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスから指定した時刻または存続時間を減算します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">減算する日付と時刻の値。</param>
        <summary>このインスタンスから指定した日付と時刻を減算します。</summary>
        <returns>このインスタンスで表された日付と時刻から <paramref name="value" /> で表された日付と時刻を減算した値と等しい時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.DateTime%29>メソッドは、2 つの日付間の差を求めます。 現在のインスタンスからの時間間隔を減算する呼び出し、<xref:System.DateTime.Subtract%28System.TimeSpan%29>メソッド。 現在のインスタンスから特定の時間間隔を減算するには、その時間間隔を現在の日付に追加するメソッドを呼び出し、メソッドの引数として負の値を指定します。 たとえば、現在の日付から 2 か月間、減算を呼び出す、 <xref:System.DateTime.AddMonths%28System.Int32%29> -2 の値を持つメソッド。  
  
 かどうか、現在のインスタンスの日時により前は`value`、メソッドを返します、<xref:System.TimeSpan>負の時間範囲を表すオブジェクト。 すべての 0 以外のプロパティの値である、(など<xref:System.TimeSpan.Days%2A>または<xref:System.TimeSpan.Ticks%2A>) が負の値。  
  
 <xref:System.DateTime.Subtract%28System.DateTime%29>メソッドがの値を考慮していない、 <xref:System.DateTime.Kind%2A> 、2 つのプロパティ<xref:System.DateTime>減算を実行するときの値します。 減算する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンで時刻を表すことを確認します。 それ以外の場合、結果は、タイム ゾーン間の差が含まれます。  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>メソッドは、減算を実行するときに、タイム ゾーン間で相違点を考慮します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Subtract%2A>メソッドと減算演算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">減算する時間間隔。</param>
        <summary>このインスタンスから指定した期間を減算します。</summary>
        <returns>このインスタンスで表された日付と時刻から <paramref name="value" /> で表された時間間隔を減算した値と等しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29>メソッドは、現在のインスタンスから指定した時間間隔の違いは、日付を返します。 2 つの日付間の時間間隔を確認するのには、呼び出し、<xref:System.DateTime.Subtract%28System.DateTime%29>メソッド。 現在のインスタンスから特定の時間間隔を減算するには、その時間間隔を現在の日付に追加するメソッドを呼び出し、メソッドの引数として負の値を指定します。 たとえば、現在の日付から 2 か月間、減算を呼び出す、 <xref:System.DateTime.AddMonths%28System.Int32%29> -2 の値を持つメソッド。  
  
 このメソッドには、この値は変わりません。<xref:System.DateTime>します。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果。  
  
 通常、<xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>メソッドは減算、<xref:System.TimeSpan>オブジェクトを表す正の時間間隔を返す、<xref:System.DateTime>が現在のインスタンスの日時より前の値。 ただし場合、<xref:System.TimeSpan>オブジェクトは、負の時間範囲を表します、<xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>メソッドを返します。 を<xref:System.DateTime>値が現在のインスタンスの日時より後です。  
  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>メソッドでは、時間 (時間の指定した数) と指定された数 (分) などの 1 つ以上の単位で構成される時間間隔を減算できます。 1 つの単位 (年、月、日など) の時間を減算する、<xref:System.DateTime>インスタンス、渡せる負の数値の値をパラメーターとして、次のメソッドのいずれかに。  
  
-   <xref:System.DateTime.AddYears%2A>、特定の年現在の日付と時刻のインスタンスから数を減算します。  
  
-   <xref:System.DateTime.AddMonths%2A>、特定の数か月間、現在の日付と時刻のインスタンスからの減算をします。  
  
-   <xref:System.DateTime.AddDays%2A>、特定の数、現在の日付と時刻のインスタンスからの日数を減算します。  
  
-   <xref:System.DateTime.AddHours%2A>、特定の現在の日付と時刻のインスタンスからの時間数を減算します。  
  
-   <xref:System.DateTime.AddMinutes%2A>、特定の数の現在の日付と時刻のインスタンスから分を減算します。  
  
-   <xref:System.DateTime.AddSeconds%2A>、特定の現在の日付と時刻のインスタンスからの秒数を減算します。  
  
-   <xref:System.DateTime.AddMilliseconds%2A>、特定の現在の日付と時刻のインスタンスからのミリ秒数を減算します。  
  
-   <xref:System.DateTime.AddTicks%2A>、特定の現在の日付と時刻のインスタンスからのティック数を減算します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Subtract%2A>メソッドと減算演算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを返します。</summary>
        <returns>現在のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">必要な型。</param>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを、指定された型のオブジェクトに変換します。</summary>
        <returns>値が現在の <paramref name="type" /> オブジェクトに等価である、<see cref="T:System.DateTime" /> パラメーターによって指定された型のオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidCastException">この変換は、<see cref="T:System.DateTime" /> 型ではサポートされていません。</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先のオブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.DateTime" /> オブジェクトをシリアル化するために必要なすべてのデータを格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッド、`info`パラメーター、<xref:System.DateTime.Ticks%2A>と<xref:System.DateTime.Kind%2A>プロパティの値。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの日付と時刻を表すタイマー刻み数を取得します。</summary>
        <value>このインスタンスの日付と時刻を表すタイマー刻み数。 値は <see langword="DateTime.MinValue.Ticks" /> から <see langword="DateTime.MaxValue.Ticks" /> までの間にあります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 単一のティックは 100 ナノ秒または 1 つ 10 分の 1 秒を表します。 10,000 ティックをミリ秒単位でまたは 1 秒あたり 10,000, 000 個のタイマー刻みがあります。  
  
 このプロパティの値が 0001 年 1 月 1 日午前 12時 00分: 00 以降の経過時間を 100 ナノ秒間隔の数を表します (0: 00:00 年 1 月 1 日 UTC 0001、グレゴリオ暦で) を表す<xref:System.DateTime.MinValue?displayProperty=nameWithType>します。 秒数を大きく前進に起因するタイマー刻みの数は含まれません。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Ticks%2A>プロパティは、21 世紀の開始以降に経過したタイマー刻みの数が表示され、インスタンス化する、<xref:System.TimeSpan>オブジェクト。 <xref:System.TimeSpan>他のいくつかの時間間隔を使用した経過時間を表示するオブジェクトを使用しています。  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの時刻を取得します。</summary>
        <value>深夜の 12 時から経過した 1 日の端数部分を表す時間間隔。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 異なり、<xref:System.DateTime.Date%2A>プロパティ。 返された、 <xref:System.DateTime> 、時刻部分なしの日付を表す値、<xref:System.DateTime.TimeOfDay%2A>プロパティから返さ、<xref:System.TimeSpan>を表す値を<xref:System.DateTime>値の時間コンポーネント。  
  
 1 日の時間を表示または日の時刻の文字列表現を取得するかどうか、<xref:System.DateTime>値、オーバー ロードの代わりに呼び出すことができます、<xref:System.DateTime.ToString%2A>メソッドを持つ、`format`パラメーターまたは使用して、[複合書式指定](~/docs/standard/base-types/composite-formatting.md) "t"または"T"標準書式指定文字列で機能します。  
  
   
  
## Examples  
 次の例の値を表示する、<xref:System.DateTime.TimeOfDay%2A>プロパティの配列を<xref:System.DateTime>値。 複合書式設定操作で"t"標準書式指定文字列によって返される文字列の戻り値も対照的です。  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを 64 ビットのバイナリ値にシリアル化します。後で、この値を使って、<see cref="T:System.DateTime" /> オブジェクトを再構築できます。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティおよび <see cref="P:System.DateTime.Ticks" /> プロパティをエンコードする 64 ビットの符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.DateTime.ToBinary%2A>メソッドは、現在の値に変換する<xref:System.DateTime>オブジェクト バイナリ値から。 バイナリ値を使用して、その後、および<xref:System.DateTime.FromBinary%2A>メソッドを元の再作成する<xref:System.DateTime>オブジェクト。  
  
> [!IMPORTANT]
>  場合によってで、<xref:System.DateTime>によって返される値、<xref:System.DateTime.FromBinary%2A>メソッドが元と同じでない<xref:System.DateTime>に指定された値、<xref:System.DateTime.ToBinary%2A>メソッド。 詳細については、次のセクションでは、「ローカル タイムの調整」を参照してください。  
  
## <a name="local-time-adjustment"></a>現地時刻の調整  
 ローカル タイム ゾーンに調整: Coordinated Universal Time には、現地時刻がによって表される、<xref:System.DateTime>持つ<xref:System.DateTime.Kind%2A>プロパティの値を<xref:System.DateTimeKind.Local>します。 ローカルの復元時に<xref:System.DateTime>によって生成されるバイナリ表現からの値、<xref:System.DateTime.ToBinary%2A>メソッド、<xref:System.DateTime.FromBinary%2A>元の値と等しくないように、メソッドが再作成された値を調整する場合があります。 これは、次のような条件で発生します。  
  
-   ローカル<xref:System.DateTime>オブジェクトは、1 つのタイム ゾーンでシリアル化、<xref:System.DateTime.ToBinary%2A>メソッドをおよび逆シリアル化し、別のタイム ゾーンで、<xref:System.DateTime.FromBinary%2A>メソッドは、結果で表されるローカル時間<xref:System.DateTime>オブジェクトが自動的に調整2 番目のタイム ゾーン。  
  
     たとえば、<xref:System.DateTime>現地時刻の午後 3 時を表すオブジェクトを 米国で実行されているアプリケーション太平洋標準時タイム ゾーンを使用して、<xref:System.DateTime.ToBinary%2A>を変換するメソッド<xref:System.DateTime>オブジェクト バイナリ値から。 米国で実行されている別のアプリケーション東部標準時ゾーンを使用して、<xref:System.DateTime.FromBinary%2A>を新しいバイナリ値に変換するメソッド<xref:System.DateTime>オブジェクト。 新しい値<xref:System.DateTime>オブジェクトが元の午後 3 時間の同じ時点を表している午後 6 ただし、東部標準時ゾーンでのローカル時刻に調整されます。  
  
-   場合、ローカルのバイナリ表現<xref:System.DateTime>値は、システムのローカル タイム ゾーンで無効な時刻を表します<xref:System.DateTime.FromBinary%2A>が呼び出されると、時間の調整が無効です。  
  
     たとえば、標準時間から夏時間への移行は、米国内に発生します。太平洋標準時タイム ゾーン、2010 年 3 月 14 日、午前 2時 00分に時間が午前 3 時に、1 時間進み この時間の間隔とは、無効な時間、つまり、このタイム ゾーンに存在しません時間間隔です。 次の例を時間内にあるときにこの範囲が、バイナリ値に変換されます、<xref:System.DateTime.ToBinary%2A>メソッドで復元が、<xref:System.DateTime.FromBinary%2A>メソッド、元の値が有効な時刻に調整します。 特定の日付と時刻の値に渡すことでの変更対象とする可能性があるかどうかを確認することができます、<xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>メソッドの例として示します。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>バージョンの考慮事項  
 .NET Framework バージョン 2.0 以降、<xref:System.DateTime>構造体を指定した時刻の値を現地時刻、世界協定時刻 (UTC)、またはそのどちらでもないに基づくかどうかを示す、プライベートなフィールドと、タイマー刻みのプライベート フィールドで構成されますが日付と時刻を指定する 100 ナノ秒タイマー刻みの数が含まれています。 タイマー刻みのフィールドをアクセスするのには、<xref:System.DateTime.Ticks%2A>プロパティと種類のフィールドにアクセスできる、<xref:System.DateTime.Kind%2A>プロパティ。  
  
 シリアル化する場合は、.NET Framework 2.0 より前、<xref:System.DateTime>などのシリアル化インターフェイスを使用してではなく、手動でオブジェクト<xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>、タイマー刻みのデータをシリアル化するだけに必要な<xref:System.DateTime>構造体。 バージョン 2.0 以降、種類のデータをシリアルする必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の日付を取得します。</summary>
        <value>今日の日付を表すオブジェクト (ただし、時刻部分は 00:00:00)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティが返す<xref:System.DateTimeKind.Local>します。  
  
 現在の時刻のない現在の日付を返すため、<xref:System.DateTime.Today%2A>プロパティは日付のみを操作するアプリケーションでの使用に適しています。 詳細については、次を参照してください。[選択の間で DateTime、DateTimeOffset、TimeSpan、および TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md)します。 これに対し、<xref:System.DateTime.TimeOfDay%2A>プロパティは、現在の日付を使用せず、現在の時刻を返します、<xref:System.DateTime.Now%2A>プロパティは、現在の日付と現在の時刻の両方を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Date%2A>プロパティを現在の日付を取得します。 示されている方法、<xref:System.DateTime>値は、標準の日付と時刻の書式指定文字列の一部を使用して書式設定できます。 3 番目の呼び出しによって、出力が生成されることに注意してください、<xref:System.DateTime.ToString%28System.String%29>メソッドでは、g 書式指定子を使用して、時刻部分には、0 が含まれます。  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻の西暦 1601 年 1 月 1 日午前 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値は、します。 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 <xref:System.DateTime.ToFileTime%2A>メソッドは、<xref:System.DateTime.Kind%2A>プロパティを確認するかどうか、現在<xref:System.DateTime>オブジェクトが現地時刻、UTC 時刻、または未指定の種類、現地時刻として扱われる時間の。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToFileTime%2A>メソッド。  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻が、 西暦 1601 年 1 月 1 日深夜 12:00 時 (UTC) よりも前の日時を表すことがあります。</exception>
        <block subset="none" type="usage"><para>通常、<see cref="M:System.DateTime.FromFileTime(System.Int64)" />メソッドの復元、<see cref="T:System.DateTime" />によって保存された値、<see cref="M:System.DateTime.ToFileTime" />メソッド。 ただし、2 つの値は、次の条件下で異なる場合があります。 
If の逆シリアル化とシリアル化、<see cref="T:System.DateTime" />値が異なるタイム ゾーンで発生します。 たとえば場合、<see cref="T:System.DateTime" />時間が午後 12 時 30 分の値 米国の東部標準時ゾーンのシリアル化し、逆シリアル化し、米国の太平洋標準時タイム ゾーン、午後 12 時 30 分の元の値 午前 9 時 30 分に調整されます。 2 つのタイム ゾーンの違いを反映します。  
  
If、<see cref="T:System.DateTime" />シリアル化された値がローカル タイム ゾーンで無効な時刻を表します。 ここで、<see cref="M:System.DateTime.ToFileTime" />メソッドは、調整、復元された<see cref="T:System.DateTime" />をローカル タイム ゾーンで有効な時刻を表すように値します。  
  
たとえば、標準時間から夏時間への移行は、米国内に発生します。太平洋標準時タイム ゾーン、2010 年 3 月 14 日、午前 2時 00分に時間が午前 3 時に、1 時間進み この時間の間隔とは、無効な時間、つまり、このタイム ゾーンに存在しません時間間隔です。 次の例を時間内にあるときにこの範囲が、長整数値に変換されます、<see cref="M:System.DateTime.ToFileTime" />メソッドで復元が、<see cref="M:System.DateTime.FromFileTime(System.Int64)" />メソッド、元の値が有効な時刻に調整します。 特定の日付と時刻の値に渡すことでの変更対象とする可能性があるかどうかを確認することができます、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />メソッドの例として示します。  
  
[! コード csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! コード vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻の西暦 1601 年 1 月 1 日午前 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値は、します。 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 <xref:System.DateTime.ToFileTimeUtc%2A>メソッドは、<xref:System.DateTime.Kind%2A>プロパティを確認するかどうか、現在<xref:System.DateTime>オブジェクトが現地時刻、UTC 時刻、または時刻が UTC 時刻として扱われる種が指定されていません。 現地時刻である場合、時刻を UTC に変換を Windows ファイル時刻への変換を実行する前にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻が、 西暦 1601 年 1 月 1 日深夜 12:00 時 (UTC) よりも前の日時を表すことがあります。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToFileTimeUtc" />メソッドが、現地時刻を UTC に変換して、その後に呼び出すことによって復元するため、<see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />メソッドに続けて、<see cref="M:System.DateTime.ToLocalTime" />メソッド。 ただし、ローカル タイム ゾーンを元の時刻が無効な時刻を表している場合、2 つのローカル時刻の値はいないと等しいします。 詳細については、次を参照してください。、<see cref="M:System.DateTime.ToLocalTime" />メソッド。</para></block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を現地時刻に変換します。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Local" /> であるオブジェクト。通常は、現在の <see cref="T:System.DateTime" /> オブジェクトと等価な現地時刻が値として格納されます。ただし、変換後の値が <see cref="F:System.DateTime.MaxValue" /> オブジェクトで表現可能な範囲を超えている場合は <see cref="T:System.DateTime" /> の値が格納され、逆に変換跡の値が <see cref="F:System.DateTime.MinValue" /> オブジェクトで表現可能な範囲を下回る場合は <see cref="T:System.DateTime" /> が格納されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ローカル時刻は世界協定時刻 (UTC) 時刻と UTC オフセットです。 UTC オフセットの詳細については、次を参照してください。<xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>します。 変換も考慮現在によって表される時刻に適用される夏時間規則<xref:System.DateTime>オブジェクト。  
  
> [!IMPORTANT]
>  [!INCLUDE[winxp](~/includes/winxp-md.md)] 、システム、<xref:System.DateTime.ToLocalTime%2A>メソッドは、UTC から現地時刻に変換するときに、現在の調整規則のみを認識します。 その結果、現在の調整規則を有効にされる前に、の期間を変換すると、UTC と現地時刻の差が正確には反映されない可能性があります。  
  
 .NET Framework version 2.0 では、によって返される値で始まる、<xref:System.DateTime.ToLocalTime%2A>メソッドはによって決定されます、<xref:System.DateTime.Kind%2A>プロパティ、現在の<xref:System.DateTime>オブジェクト。 次の表では、考えられる結果について説明します。  
  
|種類|結果|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|このインスタンスの<xref:System.DateTime>現地時刻に変換されます。|  
|<xref:System.DateTimeKind.Local>|変換は行われません。|  
|<xref:System.DateTimeKind.Unspecified>|このインスタンス<xref:System.DateTime>、UTC 時刻と見なされます、変換を実行して場合と<xref:System.DateTime.Kind%2A>された<xref:System.DateTimeKind.Utc>します。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToLocalTime%2A>メソッドに変換する<xref:System.DateTime>値を UTC から現地時刻にします。 指定されたタイム ゾーンの時間を現地時刻に変換するを使用して、<xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType>メソッド。  
  
 変換によって返される値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティは常に返します<xref:System.DateTimeKind.Local>します。 その結果、有効な結果が返される場合でも<xref:System.DateTime.ToLocalTime%2A>は同じに繰り返し適用<xref:System.DateTime>します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToLocalTime%2A>メソッド。 正確な出力が現在のカルチャおよび実行するシステムのローカル タイム ゾーンに依存しているに注意してください。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 次の例では、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、どのように<xref:System.DateTime.Kind%2A>プロパティの影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>使用することができます、<see cref="M:System.DateTime.ToLocalTime" />ローカルの日時を UTC に変換された値を復元する方法、<see cref="M:System.DateTime.ToUniversalTime" />または<see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />メソッド。 ただし、ローカル タイム ゾーンを元の時刻が無効な時刻を表している場合に一致しません、復元された値。 ときに、<see cref="M:System.DateTime.ToLocalTime" />メソッドは、時刻を UTC からローカル タイム ゾーンに変換、ローカル タイム ゾーンができるので有効な時間を調整します。  
  
たとえば、標準時間から夏時間への移行は、米国内に発生します。太平洋標準時タイム ゾーン、2010 年 3 月 14 日、午前 2時 00分に時間が午前 3 時に、1 時間進み この時間の間隔とは、無効な時間、つまり、このタイム ゾーンに存在しません時間間隔です。 次の例は、時間内にあるときにこの範囲は、UTC に変換を示しています、<see cref="M:System.DateTime.ToUniversalTime" />メソッドによって復元は、<see cref="M:System.DateTime.ToLocalTime" />メソッド、元の値が有効な時刻に調整します。 特定の日付と時刻の値に渡すことでの変更対象とする可能性があるかどうかを確認することができます、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />メソッドの例として示します。  
  
[! コード csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! コード vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para></block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な長い形式の日付の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを長い形式の日付で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>によって定義されたパターンを使用してオブジェクトの書式が、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>現在のスレッド カルチャに関連付けられているプロパティ。 戻り値は"D"を指定することによって返される値と同じ[標準日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)で、<xref:System.DateTime.ToString%28System.String%29>メソッド。  
  
> [!IMPORTANT]
>  によって返される文字列、<xref:System.DateTime.ToLongDateString%2A>メソッドはカルチャに依存します。 現在のカルチャによって定義されたパターンが反映されている<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 たとえば、EN-US カルチャの標準の長い日付パターンは、"dddd, MMMMdd、yyyy"です。DE-DE カルチャは"dddd, d です。 MMMMyyyy";JA-JP カルチャで、これが"yyyy'? 'M'? 'd'? '"です。 特定のコンピューター上の特定の書式指定文字列は、標準の長い日付形式の文字列とは異なるようにもカスタマイズできます。  
  
 現在のスレッド カルチャの詳細については、次を参照してください。、<xref:System.Threading.Thread.CurrentCulture%2A>プロパティ。 によって生成される書式指定文字、書式パターン、および出力の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピック。 書式指定文字に関連付けられている形式パターンを変更する方法についての詳細については、次を参照してください。、<xref:System.Globalization.DateTimeFormatInfo>クラス。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToLongDateString%2A>メソッド。  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な長い形式の時刻の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを長い形式の時刻で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>によって定義されたパターンを使用してオブジェクトの書式が、<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType>現在のスレッド カルチャに関連付けられているプロパティ。 戻り値は"T"を指定することによって返される値と同じ[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)で、<xref:System.DateTime.ToString%28System.String%29>メソッド。  
  
> [!IMPORTANT]
>  によって返される文字列、<xref:System.DateTime.ToLongTimeString%2A>メソッドはカルチャに依存します。 によって定義されたパターンが反映されている、<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>プロパティの現在のカルチャの<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 たとえば、EN-US カルチャの標準の長い時刻パターンは、"h:mm:ss tt";DE-DE カルチャは"HH:mm:ss"です。JA-JP カルチャでは、"H:mm:ss"です。 特定のコンピューター上の特定の書式指定文字列は、標準の長い時刻形式の文字列とは異なるようにもカスタマイズできます。  
  
 現在のスレッド カルチャの詳細については、次を参照してください。、<xref:System.Threading.Thread.CurrentCulture%2A>プロパティ。 によって生成される書式指定文字、書式パターン、および出力の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピック。 書式指定文字に関連付けられている形式パターンを変更する方法についての詳細については、次を参照してください。、<xref:System.Globalization.DateTimeFormatInfo>クラス。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToLongTimeString%2A>メソッド。  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値をそれと等価な OLE オートメーション日付に変換します。</summary>
        <returns>このインスタンスの値と等価の OLE オートメーション日付を格納している倍精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OLE オートメーション日付は、不可欠なコンポーネントは 1899 年 12 月 30日午前 0 時の前後に日数との小数部が 24 で割った値、その日の時刻を表す浮動小数点数として実装されます。 たとえば、午前 0 時、1899 年 12 月の 31 で表される 1.0 です。午前 6 時、1900 年 1 月 1日は 2.25; によって表されます。午前 0 時 29 1899 年 12 月は、-1.0; で表される午前 6 時 29 1899 年 12 月が-1.25 で表されます。  
  
 基本 OLE オートメーション日付は、午前 0 時、1899 年 12 月の 30 です。 OLE オートメーション日付の最小値は、午前 0 時、1 年 0100年 1 月です。 最大 OLE オートメーション日付が同じ<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、12 月 31 日の最後の瞬間 9999 です。  
  
 <xref:System.DateTime.ToOADate%2A>メソッドがスローされます、<xref:System.OverflowException>現在のインスタンスがよりも後の日付を表すかどうか<xref:System.DateTime.MinValue>の午前 0 時、January1 0100 より以前のバージョン。 ただし、現在のインスタンスの値が場合<xref:System.DateTime.MinValue>0 が返されます。  
  
 OLE オートメーションの詳細については、次を参照してください。、 [MSDN ライブラリ](https://go.microsoft.com/fwlink/?linkid=37118)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">このインスタンスの値を OLE オートメーション日付として表すことはできません。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な短い形式の日付の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを短い形式の日付で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>によって定義されたパターンを使用してオブジェクトの書式が、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType>現在のスレッド カルチャに関連付けられているプロパティ。 戻り値は"d"を指定することによって返される値と同じ[標準日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)で、<xref:System.DateTime.ToString%28System.String%29>メソッド。  
  
> [!IMPORTANT]
>  によって返される文字列、<xref:System.DateTime.ToShortDateString%2A>メソッドはカルチャに依存します。 現在のカルチャによって定義されたパターンが反映されている<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 たとえば、EN-US カルチャの標準の短い日付パターンは、"m/d/yyyy";DE-DE カルチャで、これが"dd. です。MM.yyyy";JA-JP カルチャでは、"yyyy/M/d"です。 特定のコンピューター上の特定の書式指定文字列は、標準の短い日付形式の文字列とは異なるようにもカスタマイズできます。  
  
 現在のスレッド カルチャの詳細については、次を参照してください。、<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>プロパティ。 によって生成される書式指定文字、書式パターン、および出力の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピック。 書式指定文字に関連付けられている形式パターンを変更する方法についての詳細については、次を参照してください。、<xref:System.Globalization.DateTimeFormatInfo>クラス。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToShortDateString%2A>メソッド。 表示される呼び出しの結果、<xref:System.DateTime.ToShortDateString%2A>メソッドを呼び出すことと同じ、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>形式のパラメーターとして"d"を持つメソッド。  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な短い形式の時刻の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを短い形式の時刻で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>によって定義されたパターンを使用してオブジェクトの書式が、<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType>現在のスレッド カルチャに関連付けられているプロパティ。 戻り値は"t"を指定することによって返される値と同じ[標準日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)で、<xref:System.DateTime.ToString%28System.String%29>メソッド。  
  
> [!IMPORTANT]
>  によって返される文字列、<xref:System.DateTime.ToShortTimeString%2A>メソッドはカルチャに依存します。 現在のカルチャによって定義されたパターンが反映されている<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 たとえば、EN-US カルチャの標準の短い時刻パターンは、"h:mm tt";DE-DE カルチャは"HH:mm"です。JA-JP カルチャでは、"H:mm"です。 特定のコンピューター上の特定の書式指定文字列は、標準の短い時刻形式の文字列とは異なるようにもカスタマイズできます。  
  
 現在のスレッド カルチャの詳細については、次を参照してください。、<xref:System.Threading.Thread.CurrentCulture%2A>プロパティ。 によって生成される書式指定文字、書式パターン、および出力の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピック。 書式指定文字に関連付けられている形式パターンを変更する方法についての詳細については、次を参照してください。、<xref:System.Globalization.DateTimeFormatInfo>クラス。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToShortTimeString%2A>メソッド。  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のカルチャの書式指定規則を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>オブジェクトは、一般の日付と時刻の書式指定子 ("G") を使用して書式設定します。 特定の日付と時刻の書式指定子を使用して、書式設定を呼び出す、<xref:System.DateTime.ToString%28System.String%29>メソッド。 一般の日付と時刻の書式指定子 ("G") を使用して、特定のカルチャの書式を設定する呼び出し、<xref:System.DateTime.ToString%28System.IFormatProvider%29>メソッド。 特定の日付と時刻の書式指定子と、特定のカルチャの規則を使用して、書式設定を呼び出す、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>メソッド。  
  
 このメソッドは、基に、現在のカルチャの書式情報を使用します。 具体的には、によって返されるカスタム書式指定文字列を組み合わせて、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>と<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>のプロパティ、<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、`Thread.CurrentThread.CurrentCulture.DateTimeFormat`プロパティ。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。 他のオーバー ロード、<xref:System.DateTime.ToString%2A>メソッドを使用するカルチャを指定を使用しての出力のパターンを定義する書式、<xref:System.DateTime>値。  
  
   
  
## Examples  
 次の例を示して 方法の文字列表現を<xref:System.DateTime>によって返される値、<xref:System.DateTime.ToString>メソッドは、現在のスレッド カルチャによって異なります。 JA-JP を FR-FR に、現在のスレッド カルチャを en-us (英語) から変更します。 各呼び出しの場合、<xref:System.DateTime.ToString>そのカルチャを使用して日付と時刻の値の文字列表現を取得するメソッド。  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString" />メソッドは、現在のカルチャで使用される暦で日付と時刻の文字列表現を返します。 場合、現在の値<see cref="T:System.DateTime" />インスタンスがよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />します。 具体的な例を次に示します。 範囲外にある日付の書式設定しようと、<see cref="T:System.Globalization.HijriCalendar" />クラスの現在のカルチャがアラビア語 (シリア)。  
  
[! コード csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)] [! コード vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTime" /> により指定された、現在の <paramref name="provider" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>オブジェクトは、一般の日付と時刻書式指定子 ("G") が短い日付パターンと長い時刻のパターンを使用して出力を書式設定を使用して書式設定します。  
  
 短い形式の日付と長い時刻パターンの書式を定義して、`provider`パラメーター。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>書式指定規則が返される文字列に反映するのには、カルチャを表すオブジェクト。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイス。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します。 を<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次の例は、日付と時刻を使用しての文字列形式を表示<xref:System.Globalization.CultureInfo>5 つの異なるカルチャを表すオブジェクト。  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="provider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.IFormatProvider)" />メソッドは、によって表されるカルチャで使用される暦で日付と時刻の文字列表現を返します、<paramref name="provider" />パラメーター。 そのカレンダーがによって定義されている、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />プロパティ。 場合、現在の値<see cref="T:System.DateTime" />インスタンスがよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />します。 具体的な例を次に示します。 範囲外にある日付の書式設定しようと、<see cref="T:System.Globalization.JapaneseCalendar" />クラス。  
  
[! コード csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)] [! コード vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの日時書式指定文字列。</param>
        <summary>指定した形式および現在のカルチャの書式指定規則を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTime" /> により指定された、現在の <paramref name="format" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ToString%28System.String%29>メソッドは、詳細については、現在のカルチャの書式指定規則を使用して、特定の形式で日付と時刻の値の文字列表現を返しますを参照してください<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>します。  
  
 `format`パラメーターは、単一の書式指定子の文字を含める必要があります (を参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) またはカスタム書式パターン (を参照してください[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md))、返される文字列の書式を定義します。 場合`format`は`null`または空の文字列、一般書式指定子、'G' を使用します。  
  
 このメソッドのいくつかの使用は次のとおりです。  
  
-   文字列を取得すると、現在のカルチャの短い形式の日付と時刻の形式で日付と時刻が表示されます。 これを行うには、"G"書式指定子を使用します。  
  
-   文字列を取得するには、月と年が含まれています。 これを行うには、「年/日」の書式指定文字列を使用します。 書式指定文字列は、現在のカルチャの日付の区切り記号を使用します。  
  
-   文字列を取得するには、特定の形式で日時が含まれています。 たとえば、"MM dd/yyyyHH:mm"書式指定文字列の日付と時刻の文字列から固定形式でのなど表示"19//03//2013 18時 06分"。 書式指定文字列を使用してカルチャに固有の設定に関係なく、固定の日付の区切り記号として「/」。  
  
-   日付文字列をシリアル化するための縮約された形式で日付を取得するを使用できます。 たとえば、"yyyyMMdd"形式の文字列には、日付の区切り記号なし 2 桁の月と 2 桁の日がそれに続く 4 桁の年が表示されます。  
  
 次の例では、これら 3 つの書式指定文字列を使用して、EN-US および FR-FR カルチャの規則を使用して日付と時刻の値を表示します。  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 次の例の文字列表現を表示する標準の日付と時刻の書式指定文字列のカスタム日時書式指定文字列の選択範囲を使用して、<xref:System.DateTime>値。 例では、現在のスレッド カルチャは EN-US です。  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> の長さは 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている書式指定子の 1 つではありません。  
  
- または - 
 <paramref name="format" /> には有効なカスタム書式パターンが含まれません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.String)" />メソッドは、現在のカルチャで使用される暦で日付と時刻の文字列表現を返します。 場合、現在の値<see cref="T:System.DateTime" />インスタンスがよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />します。 具体的な例を次に示します。 範囲外にある日付の書式設定しようと、<see cref="T:System.Globalization.HebrewCalendar" />クラスの現在のカルチャがヘブライ語 (イスラエル)。  
  
[! コード csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)] [! コード vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの日時書式指定文字列。</param>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTime" /> および <paramref name="format" /> により指定された、現在の <paramref name="provider" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`パラメーターは、単一の書式指定子の文字を含めることができます (を参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) またはカスタム書式パターン (を参照してください[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md))。 場合`format`は`null`または空の文字列 ("")、"G"("標準書式指定子を使用します。  
  
 `provider`パラメーターでは、対応するパターンを定義する標準書式指定子だけでなく、記号、および日付と時刻のコンポーネントの名前。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>書式指定規則が返される文字列に反映するのには、カルチャを表すオブジェクト。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイス。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します。 を<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>に現在関連付けられているカルチャが使用されます。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次の例は、標準の日時書式指定文字列の各関数を使用して、日付と時刻の 4 つの異なるカルチャの文字列形式を表示します。  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 次の例では、さまざまな書式設定方法、<xref:System.DateTime>値の不変性を使用して<xref:System.Globalization.DateTimeFormatInfo>します。  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> の長さは 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている書式指定子の 1 つではありません。  
  
- または - 
 <paramref name="format" /> には有効なカスタム書式パターンがありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="provider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />メソッドで使用する暦で日付と時刻の文字列表現を返します、<paramref name="provider" />パラメーター。 そのカレンダーがによって定義されている、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />プロパティ。 場合、現在の値<see cref="T:System.DateTime" />インスタンスがよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />します。 具体的な例を次に示します。 範囲外にある日付の書式設定しようと、<see cref="T:System.Globalization.UmAlQuraCalendar" />クラス。  
  
[! コード csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)] [! コード vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">サンプル: .NET Framework 4 の書式設定ユーティリティ</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を世界協定時刻 (UTC) に変換します。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Utc" /> であるオブジェクト。通常は、現在の <see cref="T:System.DateTime" /> オブジェクトと等価な UTC が値として格納されます。ただし、変換後の値が <see cref="F:System.DateTime.MaxValue" /> オブジェクトで表現可能な範囲を超えている場合は <see cref="T:System.DateTime" /> の値が格納され、逆に変換後の値が <see cref="F:System.DateTime.MinValue" /> オブジェクトで表現可能な範囲を下回る場合は <see cref="T:System.DateTime" /> が格納されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 世界協定時刻 (UTC) は、UTC オフセットを引いたのローカル時刻です。 UTC オフセットの詳細については、次を参照してください。<xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>します。 変換も考慮現在によって表される時刻に適用される夏時間規則<xref:System.DateTime>オブジェクト。  
  
> [!IMPORTANT]
>  [!INCLUDE[winxp](~/includes/winxp-md.md)] 、システム、<xref:System.DateTime.ToUniversalTime%2A>メソッドは、現地時刻から UTC に変換するときに、現在の調整規則のみを認識します。 その結果、現在の調整規則を有効にされる前に、の期間を変換すると、ローカル時刻と UTC の間の差が正確には反映されない可能性があります。  
  
 .NET Framework version 2.0 では、によって返される値で始まる、<xref:System.DateTime.ToUniversalTime%2A>メソッドはによって決定されます、<xref:System.DateTime.Kind%2A>プロパティ、現在の<xref:System.DateTime>オブジェクト。 次の表では、考えられる結果について説明します。  
  
|種類|結果|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|変換は行われません。|  
|<xref:System.DateTimeKind.Local>|現在<xref:System.DateTime>オブジェクトは UTC に変換します。|  
|<xref:System.DateTimeKind.Unspecified>|現在<xref:System.DateTime>オブジェクトは、現地時刻と見なされ、変換を実行まるで<xref:System.DateTime.Kind%2A>された<xref:System.DateTimeKind.Local>します。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToUniversalTime%2A>メソッドに変換する<xref:System.DateTime>値を現地時刻から UTC にします。 UTC にローカル以外のタイム ゾーンの時刻に変換する、<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>メソッド。 UTC からオフセットが呼ばれる時刻に変換する、<xref:System.DateTimeOffset.ToUniversalTime%2A>メソッド。  
  
 インスタンスの日付と時刻の値があいまいな時刻の場合は、このメソッドは、標準時であると仮定します。 (あいまいな時刻は、標準時またはローカル タイム ゾーンの夏時間のいずれかにマップできる)インスタンスの日付と時刻の値が無効な時刻の場合は、このメソッドは単に返す UTC オフセットのローカル タイム ゾーンの UTC から現地時刻を減算します。 (無効な時刻は夏時間調整規則の適用のために存在しません。)  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToUniversalTime%2A>メソッド。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 次の例では、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、どのように<xref:System.DateTime.Kind%2A>プロパティの影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToUniversalTime" />現地時刻を UTC に変換するメソッドが使用される場合があります。 <see cref="M:System.DateTime.ToLocalTime" />復元元のローカル時間にはメソッドが呼び出されます。 ただし、ローカル タイム ゾーンを元の時刻が無効な時刻を表している場合、2 つのローカル時刻の値はいないと等しいします。 追加情報と例では、次を参照してください。、<see cref="M:System.DateTime.ToLocalTime" />メソッド。  
  
[!INCLUDE[winxp](~/includes/winxp-md.md)]システムでは、<see cref="M:System.DateTime.ToUniversalTime" />メソッドは、下位レベルの日付 (つまり、日付は現在の調整の開始日より前のなどのすべての日付に適用するローカル タイム ゾーンの現在の調整規則のみを認識します。ルールの場合)。 アプリケーションで実行されている[!INCLUDE[winxp](~/includes/winxp-md.md)]を必要とする正確なローカルの日付と時刻の計算を使用してこの問題を回避する必要があります、<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />を取得するメソッド、<see cref="T:System.TimeZoneInfo" />ローカル タイム ゾーンに対応するオブジェクトし、呼び出しその<see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />メソッド。  
  
次の例では、違いを示しています、<see cref="M:System.DateTime.ToUniversalTime" />と<see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />メソッド、[!INCLUDE[winxp](~/includes/winxp-md.md)]米国内のシステム表示します。 最初の 2 つのメソッド呼び出しでは、2006 年の日付に (2007 年には、有効に問題が発生しました) を現在のタイム ゾーン調整規則が適用されます。 現在の調整規則; 3 月の第 2 日曜日夏時間に移行しています2006 年 4 月の最初の日曜日に発生する夏時間への移行に対して提供に有効であった前ルール。 この古代の日付と時刻の変換を正確に 3 つ目のメソッドの呼び出しのみ実行します。  
  
[! コード csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! コード vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTime" /> 表現に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="result">このメソッドから制御が戻った時点で、変換に成功した場合は、<paramref name="s" /> に格納された日時と等しい <see cref="T:System.DateTime" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが <see langword="null" /> の場合、空の文字列 ("") の場合、または日付と時刻を表す有効な文字列形式が含まれていない場合は、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTime" /> 表現に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドは、<xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType>点を除いて、メソッド、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29>メソッドは、変換が失敗した場合に例外をスローしません。  
  
 文字列`s`の書式情報を使用して、現在の解析は<xref:System.Globalization.DateTimeFormatInfo>オブジェクトで、現在のスレッド カルチャによって暗黙的に提供されます。  
  
 このメソッド、認識できないデータを無視しようとしています。 可能であれば、および月、日、年の情報、現在の日付に不足している格納します。 場合`s`日付のみを含み、すぐこのメソッドは、時刻は午前 12時 00分前提としています。 場合`s`日付コンポーネントを含む 2 桁の年の値に基づいて、現在のカルチャの現在の暦で年に変換されます、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティ。 先頭、内部、または末尾の空白文字で`s`は無視されます。 日付と時刻の先頭と末尾のシャープ記号文字 ('#'、U + 0023)、ペアで囲むことができ、いずれかで最後できます。 または以上の NULL 文字 (u+0000) です。  
  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドは、日付の文字列表現を解析しようとしています。 また、別のカルチャに関係なく、特定の文字列を解析しようとしています。 現在のカルチャの書式設定規則を使用して時間できます失敗か異なる結果を返します。 使用して、特定の日付と時刻の形式は、さまざまなロケール間で解析は場合、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドまたはいずれかのオーバー ロード、<xref:System.DateTime.TryParseExact%2A>メソッドと書式指定子を提供します。  
  
 場合`s`で現在の暦では、メソッドの解析、閏年の閏日の文字列表現です`s`正常にします。 場合`s`閏日 leap 以外の年の現在のカルチャの現在の暦での文字列表現です、解析操作は失敗し、メソッドを返します`false`します。  
  
 場合`s`タイム ゾーンの情報が含まれていない`result`が含まれています、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>メソッドが返されます。 解析対象の文字列には、タイム ゾーンの情報が含まれている場合`result`が含まれています、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>メソッドが返されます。  
  
   
  
## Examples  
 次の例では、パスに日付と時刻の文字列が、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッド。  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>現在のプロパティを書式設定が影響を受ける<see cref="T:System.Globalization.DateTimeFormatInfo" />既定ではから派生するオブジェクト、**地域と言語のオプション**コントロール パネル項目。 <see cref="Overload:System.DateTime.TryParse" />メソッドの失敗を返すことが予期せず<see langword="False" />場合、現在<see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />と<see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />プロパティと同じ値に設定されます。</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">サンプル: .NET Framework 4 の書式設定ユーティリティ</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">現在のタイム ゾーンまたは現在の日付と関連させて、解析された日付をどのように解釈するかを定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが <see langword="null" /> の場合、空の文字列 ("") の場合、または日付と時刻を表す有効な文字列形式が含まれていない場合は、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した文字列形式の日付と時刻をそれと等価の <see cref="T:System.DateTime" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドは、日付、時刻、タイム ゾーンの情報を含むことのできる文字列を解析します。 似ています、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>点を除いて、メソッド、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドは、変換が失敗した場合に例外をスローしません。  
  
 このメソッドが認識できないデータと解析を無視しよう`s`完全にします。 場合`s`時刻が日がない、既定の代替、現在の日付でメソッドが含まれていますか、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>フラグを置き換える`DateTime.Date.MinValue`します。 場合`s`日付がありません時間、12:00、時刻は午前 0 時が使用されるが含まれています。 日付が存在する場合は、その年の部分から成る 2 桁のみの年に変換されます、`provider`パラメーターの現在の暦がの値に基づいて、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティ。 先頭、内部、または末尾の空白文字`s`は無視されます。 日付と時刻の先頭と末尾のシャープ記号文字 ('#'、U + 0023)、ペアで囲むことができ、いずれかで最後できます。 または以上の NULL 文字 (u+0000) です。  
  
 特定の有効な形式の日付と時刻要素の場合は、名前と、日付と時刻で使用される記号が定義されている、`provider`パラメーターで、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>で使用される書式はカルチャを表すオブジェクトを`s`パラメーター。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ定義で使用される書式`s`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>オブジェクトで使用される書式を定義する`s`します。  
  
-   カスタムの <xref:System.IFormatProvider> 実装。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッドを返します。 を<xref:System.Globalization.DateTimeFormatInfo>オブジェクトで使用される書式を定義する`s`します。  
  
 `provider` が `null` の場合は、現在のカルチャが使用されます。  
  
 場合`s`で現在の暦では、メソッドの解析、閏年の閏日の文字列表現です`s`正常にします。 場合`s`閏日非 leap 年での現在の暦での文字列表現です`provider`解析操作が失敗し、メソッドが返されます、`false`します。  
  
 `styles`パラメーターが解析された文字列と、解析操作が処理する方法の正確な解釈を定義します。 1 つ以上のメンバーであることができます、<xref:System.Globalization.DateTimeStyles>列挙型で、次の表で説明します。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれて 場合`s`タイム ゾーン情報が含まれていないが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグは、メソッド呼び出し、文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を UTC にを設定し、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 場合`s`UTC で表すことを示す場合、または`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>フラグは、メソッド、文字列を解析して、返されたのタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 その他のすべてのケースでは、フラグには影響はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効では、この値は無視されます。 日付と時刻の要素の内側の空白が許可されている`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効では、この値は無視されます。 先頭の空白文字が日付と時刻の要素で許可されている`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効では、この値は無視されます。 日付と時刻の要素の末尾の空白文字が許可されている`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定します`s`先頭、内部、および末尾の空白文字を含めることができます。 これが既定の動作です。 制限を指定して、オーバーライドできません<xref:System.Globalization.DateTimeStyles>などの列挙値<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合を指定します`s`のタイム ゾーン情報がない、現地時刻を表すと見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値に設定されて<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`任意のタイム ゾーン情報が不足しています utc と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、メソッドは、返された変換<xref:System.DateTime>値を UTC から現地時刻とセットにその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効では、この値は無視されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報を含む文字列、日付と時刻文字列の変換を防止しようとする<xref:System.DateTime>値をその<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 呼び出すことによってこのような文字列を作成する通常の<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>"o"、"r"または"u"標準書式指定子を使用してメソッド。|  
  
 場合`s`タイム ゾーンの情報が含まれていない、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドを返します。 を<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>しない限り、`styles`フラグを示します。 それ以外の場合。 場合`s`タイム ゾーンまたはタイム ゾーン オフセットの情報が含まれています、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッド、必要な時間変換を実行し、次のいずれかを返します。  
  
-   A<xref:System.DateTime>値が日付と時刻が現地時刻と持つを反映<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。  
  
-   または、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>フラグを<xref:System.DateTime>値が日付と時刻が UTC と持つを反映<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。  
  
 使用してこの動作をオーバーライドすることができます、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>フラグ。  
  
## <a name="parsing-custom-cultures"></a>カスタム カルチャの解析  
 カスタム カルチャに対して生成された日付と時刻の文字列を解析する場合、<xref:System.DateTime.TryParseExact%2A>メソッドの代わりに、<xref:System.DateTime.TryParse%2A>解析操作が成功する確率を改善する方法。 カスタム カルチャの日付と時刻の文字列は、複雑で困難を解析できます。 <xref:System.DateTime.TryParse%2A>メソッドは、これらはすべてが失敗するいくつかの暗黙的な解析パターンを使用した文字列の解析を試みます。 これに対し、<xref:System.DateTime.TryParseExact%2A>メソッドでは、成功する可能性のある 1 つまたは複数の正確な解析パターンを明示的に指定する必要があります。  
  
 カスタムのカルチャの詳細については、次を参照してください。、<xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType>クラス。  
  
   
  
## Examples  
 次の例を示しています、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッド。  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
- または - 
 <paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています (たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方などです)。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="provider" /> はニュートラル カルチャであり、解析操作で使用することはできません。</exception>
        <block subset="none" type="usage"><para>現在のプロパティを書式設定が影響を受ける<see cref="T:System.Globalization.DateTimeFormatInfo" />によって提供される、オブジェクト、<paramref name="provider" />パラメーター。 <see cref="Overload:System.DateTime.TryParse" />メソッドの失敗を返すことが予期せず<see langword="False" />場合、現在<see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />と<see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />プロパティと同じ値に設定されます。</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTime" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="format"><paramref name="s" /> に必要な書式。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> の許可された書式を示す 1 つまたは複数の列挙値のビットごとの組み合わせ。</param>
        <param name="result">変換に成功した場合は、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターまたは <paramref name="format" /> パラメーターが <see langword="null" /> の場合、空の文字列の場合、あるいは <paramref name="format" /> に指定されたパターンに一致する日時が含まれていない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドで定義された書式である必要があります日付の文字列表現を解析し、`format`パラメーター。 似ています、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>点を除いて、メソッド、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>メソッドは、変換が失敗した場合に例外をスローしません。  
  
 `s`パラメーターを解析するには、日付と時刻が含まれていますで定義された書式である必要があります、`format`パラメーター。 日付、時刻、タイム ゾーン要素が存在する場合`s`で指定された順序で現れる必要がありますも`format`します。 場合`format`日付を定義します。 時刻要素がないと、解析操作が成功した結果<xref:System.DateTime>値が午前 0 時 (00: 00:00)。 場合`format`、時間を定義する日付要素がないと、解析操作が成功すると、結果<xref:System.DateTime>既定値が日付`DateTime.Now.Date`の日が設定または`DateTime.MinValue.Date`場合`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>フラグ。 `style`パラメーターを指定するかどうか、`s`パラメーターは、先頭、内部、または末尾の空白文字を含めることができます。  
  
 場合`s`タイム ゾーンの情報が含まれていない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグ、返された、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、またはを使用して、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>と<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグ、返された、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 S にタイム ゾーン情報が含まれている場合、時刻が現地時刻に変換されます、必要に応じて、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>せず、現地時刻を世界協定時刻 (UTC) に変換を設定するフラグ、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。  
  
 `format`パラメーターには想定される形式に対応するパターンが含まれています、`s`パラメーター。 パターン、`format`パラメーターは、1 つまたは複数のカスタム書式指定子から、[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブル、またはから定義済みのパターンを識別する 1 つの標準書式指定子、[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)テーブル。  
  
 カスタム書式パターンでは日付または時刻の区切り記号を使用しない場合は、インバリアント カルチャを使用して、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、パターンに時間を指定する場合は、"H"狭義の形式ではなくより多くのフォーム"HH"を指定します。  
  
> [!NOTE]
>  必要とするのではなく`s`解析操作が成功するための 1 つの形式に準拠して、呼び出すことができます、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドと、許可されている複数の形式を指定します。 これにより、解析操作が成功する可能性が高くなります。  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義されます、`provider`パラメーターの正確な形式は`s`場合`format`は標準的な形式です。指定子の文字列。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクトを`s`します。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>シンボルとに書式設定プロパティを定義します`s`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、いずれかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターには 1 つまたは複数のメンバーが含まれています、<xref:System.Globalization.DateTimeStyles>かどうかと、空白文字で定義されていないかを決定する列挙体`format`に表示できる`s`解析操作の正確な動作を制御します。 次の表をそれぞれどのように説明のメンバー、<xref:System.Globalization.DateTimeStyles>列挙型の運用に与える影響、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>メソッド。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれて 場合`s`タイム ゾーン情報が含まれていないが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグは、メソッド呼び出し、文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を UTC にを設定し、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 場合`s`UTC で表すことを示す場合、または`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>フラグは、メソッド、文字列を解析して、返されたのタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 その他のすべてのケースでは、フラグには影響はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|定義されていない、空白文字を指定します`format`任意の個々 の日付または時刻の要素の間に表示できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|定義されていない、空白文字を指定します`format`の先頭に表示できる`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|定義されていない、空白文字を指定します`format`の末尾に記述できる`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定します`s`先頭、内部、および末尾の空白で定義されていない場合があります`format`します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合を指定します`s`のタイム ゾーン情報がない、現地時刻を表すと見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値に設定されて<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`任意のタイム ゾーン情報が不足しています utc と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、メソッドは、返された変換<xref:System.DateTime>値を UTC から現地時刻とセットにその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|場合`s`の時刻に設定されている戻り値の日付の日付の情報がない`DateTime.MinValue.Date`します。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`パラメーターは、既定値を使用して解析されます。 空白以外に含まれている`format`は許可されています。 場合`s`、返された日付、日付部分がない<xref:System.DateTime>値は 1/1/0001 を設定します。 場合`s`タイム ゾーンの情報が含まれていない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 タイム ゾーン情報が存在する場合`s`、時刻は現地時刻に変換し、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|のタイム ゾーン情報を含む文字列への変換を防止しようとする<xref:System.DateTime>値をその<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 主に、このフラグには、ローカル時刻を UTC 時刻の変換ができないようにします。|  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッド。 なお、文字列"5/01/2009 8時 30分 AM"ことはできませんが正常に解析されたときに、`styles`パラメーターと等しい<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>では、先頭のスペースは許可されていないため、`format`します。 文字列ではさらに、"5/01/2009 09時 00分"を正常に解析されたことはできません、`format`の"MM dd/yyyyhh:mm"日付文字列としての先頭をゼロ、1 か月の数の前はため`format`が必要です。  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
- または - 
 <paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています (たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方などです)。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.TryParseExact" />メソッドを返します。<see langword="false" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含む場合。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="formats"><paramref name="s" /> の許可された形式の配列。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">変換に成功した場合は、<paramref name="s" /> に格納された日時と等しい <see cref="T:System.DateTime" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> または <paramref name="formats" /> が <see langword="null" /> の場合、<paramref name="s" /> または <paramref name="formats" /> の要素が空の文字列の場合、あるいは、<paramref name="s" /> の書式が <paramref name="formats" /> に指定されたいずれの書式パターンとも一致しない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドに割り当てられているパターンのいずれかに一致する日付の文字列表現を解析し、`formats`パラメーター。 ようになります、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドを除く、<xref:System.DateTime.TryParseExact%2A>メソッドは、変換が失敗した場合に例外をスローしません。  
  
 `s`パラメーターには、解析するには、日付と時刻が含まれています。 場合、`s`パラメーターに時刻のみが含まれ、日なししない限り、現在の日付が使用される、`style`パラメーターが含まれる、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>フラグ場合、既定の日付 (`DateTime.Date.MinValue`) 使用されます。 場合、`s`パラメーターが含まれるは、日付のみといいえ時、午前 0 時 (00: 00:00) が使用されます。 `style`パラメーターも決定かどうか、`s`パラメーターは、先頭を含めることができます、内部、または末尾の空白文字で書式指定文字列のいずれかで許可されているもの以外の`formats`します。  
  
 場合`s`タイム ゾーンの情報が含まれていない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグ、返された、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、またはを使用して、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>と<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグ、返された、<xref:System.DateTime>値<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 S にタイム ゾーン情報が含まれている場合、時刻が現地時刻に変換されます、必要に応じて、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>せず、現地時刻を世界協定時刻 (UTC) に変換を設定するフラグ、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。  
  
 `formats`パラメーターには、パターンの配列が含まれています。 その 1 つ`s`解析操作が成功する場合に正確に一致する必要があります。 内のパターン、`formats`から 1 つまたは複数のカスタム書式指定子で構成されているパラメーター、[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブル、またはから定義済みのパターンを識別する 1 つの標準書式指定子、[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)テーブル。  
  
 カスタム書式パターンでは日付または時刻の区切り記号を使用しない場合は、インバリアント カルチャを使用して、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、パターンに時間を指定する場合は、"H"狭義の形式ではなくより多くのフォーム"HH"を指定します。  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義されます、`provider`パラメーターの正確な形式は`s`場合`format`は標準的な形式です。指定子の文字列。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクトを`s`します。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>シンボルとに書式設定プロパティを定義します`s`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、いずれかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターには 1 つまたは複数のメンバーが含まれています、<xref:System.Globalization.DateTimeStyles>かどうかと、空白文字で定義されていないかを決定する列挙体`format`に表示できる`s`解析操作の正確な動作を制御します。 次の表をそれぞれどのように説明のメンバー、<xref:System.Globalization.DateTimeStyles>列挙型の運用に与える影響、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>メソッド。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれて 場合`s`タイム ゾーン情報が含まれていないが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>フラグは、メソッド呼び出し、文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を UTC にを設定し、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 場合`s`UTC で表すことを示す場合、または`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>フラグは、メソッド、文字列を解析して、返されたのタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。 その他のすべてのケースでは、フラグには影響はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|定義されていない、空白文字を指定します`format`任意の個々 の日付または時刻の要素の間に表示できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|定義されていない、空白文字を指定します`format`の先頭に表示できる`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|定義されていない、空白文字を指定します`format`の末尾に記述できる`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定します`s`先頭、内部、および末尾の空白で定義されていない場合があります`format`します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合を指定します`s`のタイム ゾーン情報がない、現地時刻を表すと見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値に設定されて<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`任意のタイム ゾーン情報が不足しています utc と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>フラグが存在する、メソッドは、返された変換<xref:System.DateTime>値を UTC から現地時刻とセットにその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|場合`s`の時刻に設定されている戻り値の日付の日付の情報がない`DateTime.MinValue.Date`します。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`パラメーターは、既定値を使用して解析されます。 空白以外に含まれている`format`は許可されています。 場合`s`、返された日付、日付部分がない<xref:System.DateTime>値は 1/1/0001 を設定します。 場合`s`タイム ゾーンの情報が含まれていない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 タイム ゾーン情報が存在する場合`s`、時刻は現地時刻に変換し、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|のタイム ゾーン情報を含む文字列への変換を防止しようとする<xref:System.DateTime>値をその<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。 主に、このフラグには、ローカル時刻を UTC 時刻の変換ができないようにします。|  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドを使用できる形式の数値の文字列を正常に解析できることを確認します。  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
- または - 
 <paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています (たとえば、<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> の両方などです)。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.TryParseExact" />メソッドを返します。<see langword="false" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含む場合。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンピューター上の現在の日時を世界協定時刻 (UTC) で表した <see cref="T:System.DateTime" /> オブジェクトを取得します。</summary>
        <value>現在の UTC 日時を値として保持するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの解像度は、基になるオペレーティング システムに依存するシステム タイマーに依存します。 0.5 と 15 ミリ秒の間にする傾向にあります。

 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティが返す<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。

 使用する代わりに<xref:System.DateTime.UtcNow%2A>は<xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>します。 前者は、世界協定時刻 (UTC) の日付と時刻の値は割り当てることを示します<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>にその<xref:System.DateTime.Kind%2A>プロパティ、後者の場合は、日付を割り当てますおよび時刻の値の UTC 時刻のオフセット (に等しい<xref:System.TimeSpan.Zero?displayProperty=nameWithType>)。
  
## Examples  
 次の例では、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、どのように<xref:System.DateTime.Kind%2A>プロパティの影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の年の部分を取得します。</summary>
        <value>1 から 9999 までの間の年。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Year%2A>プロパティは、構成のグレゴリオ暦カレンダーの現在のインスタンスの年を返します。 現在のカルチャの既定の暦を使用して、年は返されません。 特定の暦を使用して、年を取得するには、カレンダーでを呼び出すことができます`GetYear`メソッドは、次のコードに示すよう。  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Year%2A>プロパティ。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>