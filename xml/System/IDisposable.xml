<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDisposable.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50f129b9e6cc6b4ce4a818f23df9a72208cdccc21.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f129b9e6cc6b4ce4a818f23df9a72208cdccc21</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IDisposable">
          <source>Provides a mechanism for releasing unmanaged resources.</source>
          <target state="translated">アンマネージ リソースを解放するためのメカニズムを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The primary use of this interface is to release unmanaged resources.</source>
          <target state="translated">このインターフェイスの主な用途では、アンマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</source>
          <target state="translated">ガベージ コレクターは、自動的にそのオブジェクトを使用できなくする場合は、マネージ オブジェクトに割り当てられたメモリを解放します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>However, it is not possible to predict when garbage collection will occur.</source>
          <target state="translated">ただし、ガベージ コレクションが行われるタイミングを予想することはできません。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</source>
          <target state="translated">さらに、ガベージ コレクターは、ウィンドウ ハンドルなどのアンマネージ リソースの知識がないか、ファイルおよびストリームを開きます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>ガベージ コレクターにアンマネージ リソースを明示的に解放するには、このインターフェイスのメソッドです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The consumer of an object can call this method when the object is no longer needed.</source>
          <target state="translated">オブジェクトのコンシューマーは、オブジェクトが不要になったとき、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It is a breaking change to add the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface to an existing class.</source>
          <target state="translated">重大な変更を追加するのには、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>既存のクラスへのインターフェイスです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Because pre-existing consumers of your type cannot call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, you cannot be certain that unmanaged resources held by your type will be released.</source>
          <target state="translated">型の既存のコンシューマーが呼び出すことはできませんので<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>、特定の種類によって保持されているアンマネージ リソースを解放することをすることはできません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Because the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> (the recommended alternative), or you should override <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> to free unmanaged resources in the event that the consumer forgets to call <ph id="ph4">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>インスタンスによって所有されているリソースは不要になったときに、型のコンシューマーによって実装が呼び出されるで管理されているオブジェクトをラップする必要がありますか、 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> (、推奨される代替手段)、またはオーバーライドする必要があります<ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>イベントで呼び出しを忘れた場合は、コンシューマーは、アンマネージ リソースを解放する<ph id="ph4">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">.NET Framework で、C++ コンパイラがリソースの確定的な破棄をサポートしの直接の実装はできません、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For a detailed discussion about how this interface and the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method are used, see the <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept> topics.</source>
          <target state="translated">方法の詳細についてはこのインターフェイスと<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>メソッドを使用するを参照してください、<bpt id="p1">[</bpt>ガベージ コレクション<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Using an object that implements IDisposable</source>
          <target state="translated">IDisposable を実装するオブジェクトを使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your app simply uses an object that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, you should call the object's <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation when you are finished using it.</source>
          <target state="translated">アプリは単に実装するオブジェクトを使用する場合、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイス、オブジェクトを呼び出す必要があります<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>その使用が終了した場合に実装します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Depending on your programming language, you can do this in one of two ways:</source>
          <target state="translated">プログラミング言語によっては、2 つの方法のいずれかでこれを行うことができます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>By using a language construct such as the <ph id="ph1">`using`</ph> statement in C# and Visual Basic.</source>
          <target state="translated">言語を使用して構築など、 <ph id="ph1">`using`</ph> c# および Visual Basic でのステートメント。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>By wrapping the call to the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`finally`</ph> block.</source>
          <target state="translated">呼び出しをラップすることによって、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>での実装、 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`finally`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Documentation for types that implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> note that fact and include a reminder to call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation.</source>
          <target state="translated">ドキュメント型を実装する<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>そのことに注意してくださいし、アラームを呼び出してその<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The C# and Visual Basic Using statement</source>
          <target state="translated">C# および Visual Basic を使用してステートメント</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your language supports a construct such as the <bpt id="p1">[</bpt>using<ept id="p1">](~/docs/csharp/language-reference/keywords/using.md)</ept> statement in C# and the <bpt id="p2">[</bpt>Using<ept id="p2">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> statement in Visual Basic, you can use it instead of explicitly calling <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> yourself.</source>
          <target state="translated">など、言語にコンストラクトがサポートしている場合、<bpt id="p1">[</bpt>を使用して<ept id="p1">](~/docs/csharp/language-reference/keywords/using.md)</ept>(C#) ステートメントと<bpt id="p2">[</bpt>Using<ept id="p2">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> Visual Basic でのステートメントを使用する明示的に呼び出す代わりに<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>自分でします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example uses this approach in defining a <ph id="ph1">`WordCount`</ph> class that preserves information about a file and the number of words in it.</source>
          <target state="translated">次の例では、この方法を定義する、<ph id="ph1">`WordCount`</ph>ファイルとその中の単語の数に関する情報を保持するクラス。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The <ph id="ph1">`using`</ph> statement is actually a syntactic convenience.</source>
          <target state="translated"><ph id="ph1">`using`</ph>ステートメントは構文上の便利な実際にします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>At compile time, the language compiler implements the intermediate language (IL) for a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> block.</source>
          <target state="translated">コンパイル時に、言語コンパイラを実装する中間言語 (IL) の<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For more information about the <ph id="ph1">`using`</ph> statement, see the <bpt id="p1">[</bpt>Using Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> or <bpt id="p2">[</bpt>using Statement<ept id="p2">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept> topics.</source>
          <target state="translated">詳細については、<ph id="ph1">`using`</ph>ステートメントを参照してください、 <bpt id="p1">[</bpt>Using ステートメント<ept id="p1">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept>または<bpt id="p2">[</bpt>ステートメントを使用して<ept id="p2">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The Try/Finally block</source>
          <target state="translated">Try/finally ブロック</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your programming language does not support a construct like the <ph id="ph1">`using`</ph> statement in C# or Visual Basic, or if you prefer not to use it, you can call the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation from the <ph id="ph3">`finally`</ph> block of a <ph id="ph4">`try`</ph><ph id="ph5">/</ph><ph id="ph6">`finally`</ph> statement.</source>
          <target state="translated">使用するプログラミング言語がのようなコンストラクトをサポートしないかどうか、 <ph id="ph1">`using`</ph> c# または Visual Basic では、ステートメントで呼び出すか、またはそれを使用しないようにする場合、<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>実装から、<ph id="ph3">`finally`</ph>のブロック、 <ph id="ph4">`try`</ph> <ph id="ph5">/</ph> <ph id="ph6">`finally`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example replaces the <ph id="ph1">`using`</ph> block in the previous example with a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`finally`</ph> block.</source>
          <target state="translated">次の例が置き換えられます、<ph id="ph1">`using`</ph>と前の例ではブロック、 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`finally`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For more information about the <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> pattern, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>, <bpt id="p2">[</bpt>try-finally<ept id="p2">](~/docs/csharp/language-reference/keywords/try-finally.md)</ept>, or <bpt id="p3">[</bpt>try-finally Statement<ept id="p3">](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)</ept>.</source>
          <target state="translated">詳細については、 <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph>パターンは、「<bpt id="p1">[</bpt>を再試行してください.キャッチしてください.Finally ステートメント<ept id="p1">](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>、 <bpt id="p2">[</bpt>、try-finally<ept id="p2">](~/docs/csharp/language-reference/keywords/try-finally.md)</ept>、または<bpt id="p3">[</bpt>try-finally ステートメント<ept id="p3">](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Implementing IDisposable</source>
          <target state="translated">IDisposable の実装</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>You should implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> only if your type uses unmanaged resources directly.</source>
          <target state="translated">実装する必要があります<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>の種類のアンマネージ リソースを直接使用する場合にのみです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The consumers of your type can call your <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation to free resources when the instance is no longer needed.</source>
          <target state="translated">型のコンシューマーが呼び出すことができます、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>実装のインスタンスが不要になったときにリソースを解放します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>To handle cases in which they fail to call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, you should either use a class derived from <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> to wrap the unmanaged resources, or you should override the <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method for a reference type.</source>
          <target state="translated">呼び出しに失敗した場合を処理するために<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>、いずれかから派生したクラスを使用する必要があります<ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>するか、アンマネージ リソースをラップする必要がありますオーバーライド、<ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>参照型のメソッドです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>In either case, you use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</source>
          <target state="translated">使用するいずれの場合、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>解放、リリース、またはアンマネージ リソースをリセットするなど、アンマネージ リソースを使用した後、必要なクリーンアップ処理をすべてを実行するメソッド。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> method and provide a second overload of <ph id="ph2">`Dispose`</ph>, as discussed in the next section.</source>
          <target state="translated">基本クラスを定義する場合はアンマネージ リソースを使用する、またはのいずれかが傾向があります、サブクラスは破棄されなければなりません、実装する必要があります、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>メソッドの 2 番目のオーバー ロードを提供および<ph id="ph2">`Dispose`</ph>、次のセクションで説明したようにします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>IDisposable and the inheritance hierarchy</source>
          <target state="translated">IDisposable および継承階層</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>A base class with subclasses that should be disposable must implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> as follows.</source>
          <target state="translated">破棄可能にする必要のあるサブクラスを持つ基本クラスを実装する必要があります<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>次のようにします。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>You should use this pattern whenever you implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> on any type that isn't <ph id="ph2">`sealed`</ph> (<ph id="ph3">`NotInheritable`</ph> in Visual Basic).</source>
          <target state="translated">実装するときに、このパターンを使用する必要があります<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>任意の型にはない<ph id="ph2">`sealed`</ph>(<ph id="ph3">`NotInheritable`</ph> Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It should provide one public, non-virtual <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> method and a protected virtual <ph id="ph2">`Dispose(Boolean disposing)`</ph> method.</source>
          <target state="translated">1 つのパブリック非仮想を指定しなければなりません<ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph>メソッドとプロテクト仮想<ph id="ph2">`Dispose(Boolean disposing)`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> method must call <ph id="ph2">`Dispose(true)`</ph> and should suppress finalization for performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph>メソッドを呼び出す必要があります<ph id="ph2">`Dispose(true)`</ph>パフォーマンスの終了処理を抑制する必要があります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The base type should not include any finalizers.</source>
          <target state="translated">基本型はファイナライザーを含めることはできません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following code fragment reflects the dispose pattern for base classes.</source>
          <target state="translated">次のコード フラグメントでは、基本クラスで dispose パターンを反映しています。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It assumes that your type does not override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">種類をオーバーライドしないことを想定しています、<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If you do override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method, your class should implement the following pattern.</source>
          <target state="translated">オーバーライドする場合、<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>メソッド、クラスは、次のパターンを実装する必要があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Subclasses should implement the disposable pattern as follows:</source>
          <target state="translated">サブクラスは破棄可能なパターンを次のように実装する必要があります。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They must override <ph id="ph1">`Dispose(Boolean)`</ph> and call the base class <ph id="ph2">`Dispose(Boolean)`</ph> implementation.</source>
          <target state="translated">これらは <ph id="ph1">`Dispose(Boolean)`</ph> をオーバーライドし、基底クラスの <ph id="ph2">`Dispose(Boolean)`</ph> の実装を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They can provide a finalizer if needed.</source>
          <target state="translated">必要な場合にはファイナライザーを提供します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The finalizer must call <ph id="ph1">`Dispose(false)`</ph>.</source>
          <target state="translated">ファイナライザーは <ph id="ph1">`Dispose(false)`</ph> を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Note that derived classes do not themselves implement the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface and do not include a parameterless <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">派生クラスは実装しないこと自体に注意してください、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスし、パラメーターなしを含めないでください<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They only override the base class <ph id="ph1">`Dispose(Boolean)`</ph> method.</source>
          <target state="translated">のみ、基本クラスをオーバーライドする<ph id="ph1">`Dispose(Boolean)`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following code fragment reflects the dispose pattern for derived classes.</source>
          <target state="translated">次のコード フラグメントでは、派生クラスで dispose パターンを反映しています。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It assumes that your type does not override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">種類をオーバーライドしないことを想定しています、<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example demonstrates how to create a resource class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">次の例は、リソースを実装するクラスを作成する方法を示します、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IDisposable.Dispose">
          <source>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</source>
          <target state="translated">アンマネージ リソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</source>
          <target state="translated">このメソッドを使用して、閉じるか、ファイル、ストリームは、このインターフェイスを実装するクラスのインスタンスによって保持されているハンドルなどのアンマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</source>
          <target state="translated">規則では、このメソッドは、オブジェクトによって保持されているリソースの解放に関連するすべてのタスクの使用や再利用するため、オブジェクトを準備します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>If you are using a class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, you should call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation when you are finished using the class.</source>
          <target state="translated">実装するクラスを使用している場合、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスを呼び出す必要があります、<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>クラスの使用が終了した場合に実装します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information, see the "Using an object that implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> topic.</source>
          <target state="translated">詳細については、「IDisposable を実装するオブジェクトを使用して」のセクションを参照して、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>トピックです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</source>
          <target state="translated">このメソッドを実装する場合は、すべて保持しているリソースは、包含階層からの呼び出しに適用して解放を確認します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For example, if an object A allocates an object B, and object B allocates an object C, then A's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation must call <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on B, which must in turn call <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on C.</source>
          <target state="translated">たとえば、オブジェクト A がオブジェクト B を割り当て、オブジェクト B オブジェクトを割り当てます、C、A からの<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>実装を呼び出す必要があります<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>B を呼び出す必要がありますに<ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>C 上</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">C++ コンパイラがリソースの確定的な破棄をサポートしているし、直接実装を許可しない、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>An object must also call the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of its base class if the base class implements <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>.</source>
          <target state="translated">オブジェクトを呼び出す必要がありますも、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>基底クラスを実装する場合、基底クラスのメソッド<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information about implementing <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> topic.</source>
          <target state="translated">実装の詳細については<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>基底クラスとそのサブクラスでは、「IDisposable と継承の階層構造」のセクションを参照してください、<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>トピックです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>If an object's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is called more than once, the object must ignore all calls after the first one.</source>
          <target state="translated">オブジェクトの<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドが複数回呼び出されると、オブジェクトは、最初の 1 つ後のすべての呼び出しを無視する必要があります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The object must not throw an exception if its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is called multiple times.</source>
          <target state="translated">場合、オブジェクトが例外をスローする必要があります、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドには複数回は呼び出されます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Instance methods other than <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> can throw an <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> when resources are already disposed.</source>
          <target state="translated">インスタンス メソッド以外の<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>スローすることができます、<ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph>リソースは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</source>
          <target state="translated">ユーザーは、解放されている状態と割り当てられた状態を示すために特別な規則を使用するリソースの種類と思ったかもしれません。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>An example of this is stream classes, which are traditionally thought of as open or closed.</source>
          <target state="translated">この例は、従来から開くと考えるまたは終了するストリーム クラスです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as <ph id="ph1">`Close`</ph>, that calls the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">など、カスタマイズされた名前のパブリック メソッドを実装するこのような規則を持つクラスの実装側こともできます<ph id="ph1">`Close`</ph>、その呼び出し、<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Because the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドを明示的に呼び出す必要があります、常にアンマネージ リソースに含まれない危険性があるオブジェクトのコンシューマーが呼び出しに失敗したため、解放、<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>There are two ways to avoid this:</source>
          <target state="translated">これにはこれを回避する 2 つの方法があります。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Wrap the managed resource in an object derived from <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">派生したオブジェクトでマネージ リソースをラップ<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Your <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation then calls the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph> instances.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>実装し、<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>のメソッド、<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information, see "The SafeHandle alternative" section in the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> topic.</source>
          <target state="translated">詳細については、「SafeHandle 代わりに、」セクションを参照して、<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>トピックです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Implement a finalizer to free resources when <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> is not called.</source>
          <target state="translated">リソースを解放するファイナライザーを実装するときに<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>は呼び出されません。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</source>
          <target state="translated">既定では、ガベージ コレクターによって、そのメモリを解放する前に、オブジェクトのファイナライザーが自動的に呼び出します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>However, if the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</source>
          <target state="translated">ただし場合、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドがされた呼び出されると、その必要はありません通常ガベージ コレクターが破棄されたオブジェクトのファイナライザーを呼び出します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>To prevent automatic finalization, <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementations can call the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">自動終了処理を防ぐために<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>実装を呼び出すことができます、<ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>When you use an object that accesses unmanaged resources, such as a <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, a good practice is to create the instance with a <ph id="ph2">`using`</ph> statement.</source>
          <target state="translated">など、アンマネージ リソースにアクセスできるオブジェクトを使用すると、<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>を使用して、インスタンスを作成することをお勧めは、<ph id="ph2">`using`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The <ph id="ph1">`using`</ph> statement automatically closes the stream and calls <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on the object when the code that is using it has completed.</source>
          <target state="translated"><ph id="ph1">`using`</ph>ステートメントは、ストリームと呼び出しに自動的に閉じる<ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>オブジェクトによって使用されているコードが完了したときにします。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> class.</source>
          <target state="translated">例については、次を参照してください。、<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The following example shows how you can implement the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">次の例は、実装する方法を示しています、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>