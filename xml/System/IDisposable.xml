<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a86a39d23ff33ea43e699c68a046a3058b4a37d9" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70568753" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="885e1-101">アンマネージ リソースを解放するためのメカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="885e1-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="885e1-102">このインターフェイスの主な用途は、アンマネージリソースを解放することです。</span><span class="sxs-lookup"><span data-stu-id="885e1-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="885e1-103">ガベージコレクターは、そのオブジェクトが使用されなくなったときに、マネージオブジェクトに割り当てられたメモリを自動的に解放します。</span><span class="sxs-lookup"><span data-stu-id="885e1-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="885e1-104">ただし、ガベージコレクションがいつ発生するかを予測することはできません。</span><span class="sxs-lookup"><span data-stu-id="885e1-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="885e1-105">さらに、ガベージコレクターは、ウィンドウハンドルや開いているファイルやストリームなどのアンマネージリソースに関する情報を持っていません。</span><span class="sxs-lookup"><span data-stu-id="885e1-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="885e1-106">このインターフェイスのメソッドを使用して、ガベージコレクターと共にアンマネージリソースを明示的に解放します。 <xref:System.IDisposable.Dispose%2A></span><span class="sxs-lookup"><span data-stu-id="885e1-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="885e1-107">オブジェクトのコンシューマーは、オブジェクトが不要になったときにこのメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="885e1-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="885e1-108">これは、既存のクラスに<xref:System.IDisposable>インターフェイスを追加するための互換性に影響する変更です。</span><span class="sxs-lookup"><span data-stu-id="885e1-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="885e1-109">型の既存のコンシューマーはを呼び出す<xref:System.IDisposable.Dispose%2A>ことができないため、型によって保持されているアンマネージリソースが解放されることは確実ではありません。</span><span class="sxs-lookup"><span data-stu-id="885e1-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="885e1-110">インスタンスによって所有されているリソースが不要になったときに、型のコンシューマーによって<xref:System.Runtime.InteropServices.SafeHandle> 実装が呼び出されるため、でマネージオブジェクトをラップするか (推奨される方法)、をオーバーライドする必要があります。 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>   <xref:System.Object.Finalize%2A?displayProperty=nameWithType>コンシューマーが呼び出し<xref:System.IDisposable.Dispose%2A>を忘れたイベントでアンマネージリソースを解放する場合は。</span><span class="sxs-lookup"><span data-stu-id="885e1-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="885e1-111">.NET Framework では、コンパイラC++はリソースの決定的な破棄をサポートしており、 <xref:System.IDisposable.Dispose%2A>メソッドを直接実装することはできません。</span><span class="sxs-lookup"><span data-stu-id="885e1-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="885e1-112">このインターフェイスと<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッドの使用方法の詳細については、「[ガベージコレクション](~/docs/standard/garbage-collection/index.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="885e1-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="885e1-113">IDisposable を実装するオブジェクトの使用</span><span class="sxs-lookup"><span data-stu-id="885e1-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="885e1-114">アプリケーションで<xref:System.IDisposable>インターフェイスを実装するオブジェクトのみを使用する場合は、オブジェクトの実装が<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>終了したら、そのオブジェクトの実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="885e1-115">プログラミング言語によっては、次の2つの方法のいずれかでこれを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="885e1-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="885e1-116">言語を使用して構築など、 `using` C# および Visual Basic でのステートメント。</span><span class="sxs-lookup"><span data-stu-id="885e1-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="885e1-117"><xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>実装への呼び出しを`try` / ブロック `finally` にラップする。</span><span class="sxs-lookup"><span data-stu-id="885e1-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="885e1-118">を実装<xref:System.IDisposable>する型のドキュメントでは、その<xref:System.IDisposable.Dispose%2A>実装を呼び出すための通知が含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="885e1-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="885e1-119">C#および Visual Basic using ステートメント</span><span class="sxs-lookup"><span data-stu-id="885e1-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="885e1-120">など、言語にコンストラクトがサポートしている場合、[using](~/docs/csharp/language-reference/keywords/using.md)(C#) ステートメント、 [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) Visual Basic でステートメントを使用できますを明示的に呼び出すのではなく<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>自分で。</span><span class="sxs-lookup"><span data-stu-id="885e1-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="885e1-121">次のコードの例では、この方法を定義する、`WordCount`ファイルとその中の単語の数に関する情報を保持するクラス。</span><span class="sxs-lookup"><span data-stu-id="885e1-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="885e1-122">`using`ステートメントは、実際には構文的に便利です。</span><span class="sxs-lookup"><span data-stu-id="885e1-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="885e1-123">コンパイル時に、言語コンパイラは`try` `finally`ブロックの/中間言語 (IL) を実装します。</span><span class="sxs-lookup"><span data-stu-id="885e1-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="885e1-124">詳細については、`using`ステートメントを参照してください、 [Using ステートメント](~/docs/visual-basic/language-reference/statements/using-statement.md)または[using ステートメント](~/docs/csharp/language-reference/keywords/using-statement.md)トピック。</span><span class="sxs-lookup"><span data-stu-id="885e1-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="885e1-125">Try/Finally ブロック</span><span class="sxs-lookup"><span data-stu-id="885e1-125">The Try/Finally block</span></span>  
 <span data-ttu-id="885e1-126">使用するプログラミング言語がのようなコンストラクトをサポートしないかどうか、 `using` C# または Visual Basic では、ステートメントでそれを使用していない場合を呼び出すことができます、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>から実装、`finally`のブロックを`try`/`finally`ステートメント。</span><span class="sxs-lookup"><span data-stu-id="885e1-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="885e1-127">次の例は、`using`ブロックの前の例では、 `try`/`finally`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="885e1-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="885e1-128">`try` / `finally`パターンの詳細については、[Try...Catch...Finally ステートメント](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)、 [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)、または[try-finally ステートメント](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="885e1-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="885e1-129">IDisposable の実装</span><span class="sxs-lookup"><span data-stu-id="885e1-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="885e1-130">型でアン<xref:System.IDisposable>マネージリソースを直接使用する場合にのみ、を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="885e1-131">インスタンスが不要になった場合は<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 、型のコンシューマーが実装を呼び出してリソースを解放できます。</span><span class="sxs-lookup"><span data-stu-id="885e1-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="885e1-132">を呼び出す<xref:System.IDisposable.Dispose%2A>ことができないケースを処理するには、から<xref:System.Runtime.InteropServices.SafeHandle>派生したクラスを使用してアンマネージリソースをラップする<xref:System.Object.Finalize%2A?displayProperty=nameWithType>か、参照型に対してメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="885e1-133">どちらの場合も、アンマネージ<xref:System.IDisposable.Dispose%2A>リソースの解放、解放、またはリセットなど、アンマネージリソースを使用した後に必要なクリーンアップを実行するには、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="885e1-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="885e1-134">アンマネージリソースを使用する基底クラスを定義していて、そのサブクラスを破棄する必要があるか、または存在する可能性が<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>ある場合は、次の説明`Dispose`に従って、メソッドを実装し、の2番目のオーバーロードを指定する必要があります。下.</span><span class="sxs-lookup"><span data-stu-id="885e1-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="885e1-135">IDisposable および継承階層</span><span class="sxs-lookup"><span data-stu-id="885e1-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="885e1-136">破棄可能である必要があるサブクラスを持つ<xref:System.IDisposable>基底クラスは、次のようにを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="885e1-137">( `sealed` <xref:System.IDisposable>  Visual Basic `NotInheritable`  ) ではない任意の型にを実装する場合は常に、このパターンを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="885e1-138">1つのパブリック、非仮想<xref:System.IDisposable.Dispose>メソッド、および保護された仮想`Dispose(Boolean disposing)`メソッドを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="885e1-139">メソッド<xref:System.IDisposable.Dispose>はを呼び`Dispose(true)`出す必要があり、パフォーマンスのために終了処理を抑制する必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="885e1-140">基本型はファイナライザーを含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="885e1-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="885e1-141">次のコード片は、基底クラスの dispose パターンを反映しています。</span><span class="sxs-lookup"><span data-stu-id="885e1-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="885e1-142">型がメソッドを<xref:System.Object.Finalize%2A?displayProperty=nameWithType>オーバーライドしないことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="885e1-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="885e1-143"><xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッドをオーバーライドする場合、クラスは次のパターンを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="885e1-144">サブクラスは破棄可能なパターンを次のように実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="885e1-145">これらは `Dispose(Boolean)` をオーバーライドし、基底クラスの `Dispose(Boolean)` の実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="885e1-146">必要な場合にはファイナライザーを提供します。</span><span class="sxs-lookup"><span data-stu-id="885e1-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="885e1-147">ファイナライザーは `Dispose(false)` を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="885e1-148">派生クラスは、それ自体がインターフェイスを<xref:System.IDisposable>実装しておらず、パラメーター <xref:System.IDisposable.Dispose%2A>なしのメソッドを含んでいないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="885e1-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="885e1-149">基底クラス`Dispose(Boolean)`のメソッドをオーバーライドするだけです。</span><span class="sxs-lookup"><span data-stu-id="885e1-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="885e1-150">次のコード片は、派生クラスの dispose パターンを反映しています。</span><span class="sxs-lookup"><span data-stu-id="885e1-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="885e1-151">型がメソッドを<xref:System.Object.Finalize%2A?displayProperty=nameWithType>オーバーライドしないことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="885e1-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="885e1-152">次の例は、 <xref:System.IDisposable>インターフェイスを実装するリソースクラスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="885e1-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="885e1-153">Dispose メソッドの実装</span><span class="sxs-lookup"><span data-stu-id="885e1-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="885e1-154">アンマネージ リソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="885e1-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="885e1-155">このメソッドを使用して、このインターフェイスを実装するクラスのインスタンスによって保持されているファイル、ストリーム、ハンドルなどのアンマネージリソースを閉じたり解放したりします。</span><span class="sxs-lookup"><span data-stu-id="885e1-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="885e1-156">慣例により、このメソッドは、オブジェクトが保持するリソースの解放に関連するすべてのタスク、またはオブジェクトを再利用するための準備に使用されます。</span><span class="sxs-lookup"><span data-stu-id="885e1-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="885e1-157"><xref:System.IDisposable>インターフェイスを実装するクラスを使用している場合は、クラスの<xref:System.IDisposable.Dispose%2A>使用が終了したら、その実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="885e1-158">詳細については、「」の「IDisposable を実装するオブジェクトの使用<xref:System.IDisposable> 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="885e1-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="885e1-159">このメソッドを実装する場合は、包含階層を介して呼び出しを伝達することによって、保持されているすべてのリソースが解放されるようにします。</span><span class="sxs-lookup"><span data-stu-id="885e1-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="885e1-160">たとえば、オブジェクト a がオブジェクト b を割り当て、オブジェクト b がオブジェクト C を割り当てる場合、の<xref:System.IDisposable.Dispose%2A>実装は b に対してを呼び出す<xref:System.IDisposable.Dispose%2A>必要があります。 <xref:System.IDisposable.Dispose%2A>この場合、c でを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="885e1-161">コンパイラC++はリソースの決定的な破棄をサポートし、 <xref:System.IDisposable.Dispose%2A>メソッドを直接実装することはできません。</span><span class="sxs-lookup"><span data-stu-id="885e1-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="885e1-162">基底クラスがを実装<xref:System.IDisposable.Dispose%2A> <xref:System.IDisposable>している場合、オブジェクトはその基底クラスのメソッドも呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="885e1-163">基底クラスとそのサブ<xref:System.IDisposable>クラスにを実装する方法の詳細については、「」の「IDisposable および継承<xref:System.IDisposable>階層」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="885e1-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="885e1-164">オブジェクトの<xref:System.IDisposable.Dispose%2A>メソッドが2回以上呼び出された場合、オブジェクトは、最初の呼び出しの後にあるすべての呼び出しを無視する必要があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="885e1-165"><xref:System.IDisposable.Dispose%2A>メソッドが複数回呼び出された場合、オブジェクトは例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="885e1-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="885e1-166">リソースが既に<xref:System.IDisposable.Dispose%2A>破棄され<xref:System.ObjectDisposedException>ている場合、以外のインスタンスメソッドはをスローできます。</span><span class="sxs-lookup"><span data-stu-id="885e1-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="885e1-167">ユーザーは、割り当てられた状態と解放された状態を示すために、リソースの種類が特定の規則を使用することを期待できます。</span><span class="sxs-lookup"><span data-stu-id="885e1-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="885e1-168">この例としては、従来は open または closed と考えられるストリームクラスがあります。</span><span class="sxs-lookup"><span data-stu-id="885e1-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="885e1-169">このような規則を持つクラスの実装者は、 `Close` <xref:System.IDisposable.Dispose%2A>メソッドを呼び出すなど、カスタマイズされた名前を持つパブリックメソッドを実装することができます。</span><span class="sxs-lookup"><span data-stu-id="885e1-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="885e1-170">メソッドは<xref:System.IDisposable.Dispose%2A>明示的に呼び出す必要があるため、アンマネージリソースが解放されないという危険性は常にあります。これは、オブジェクト<xref:System.IDisposable.Dispose%2A>のコンシューマーがそのメソッドを呼び出すことができないためです。</span><span class="sxs-lookup"><span data-stu-id="885e1-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="885e1-171">これを回避するには、次の2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="885e1-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="885e1-172">マネージリソースをから<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>派生したオブジェクトにラップします。</span><span class="sxs-lookup"><span data-stu-id="885e1-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="885e1-173">次に、の<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> <xref:System.IDisposable.Dispose%2A> <xref:System.IDisposable.Dispose%2A>実装は、インスタンスのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="885e1-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="885e1-174">詳細については、「」の<xref:System.Object.Finalize%2A?displayProperty=nameWithType> 「SafeHandle 代替」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="885e1-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="885e1-175">が呼び出されない場合<xref:System.IDisposable.Dispose%2A>にリソースを解放するには、ファイナライザーを実装します。</span><span class="sxs-lookup"><span data-stu-id="885e1-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="885e1-176">既定では、ガベージコレクターは、メモリを再利用する前に、オブジェクトのファイナライザーを自動的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="885e1-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="885e1-177">ただし、 <xref:System.IDisposable.Dispose%2A>メソッドが呼び出された場合は、通常、ガベージコレクターが破棄されたオブジェクトのファイナライザーを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="885e1-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="885e1-178">自動終了処理を回避<xref:System.IDisposable.Dispose%2A>するために、 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>実装ではメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="885e1-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="885e1-179">などのアンマネージリソース<xref:System.IO.StreamWriter>にアクセスするオブジェクトを使用する場合は、 `using`ステートメントを使用してインスタンスを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="885e1-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="885e1-180">ステートメント`using`は、ストリームを自動的に閉じ<xref:System.IDisposable.Dispose%2A> 、それを使用しているコードが完了すると、そのオブジェクトに対してを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="885e1-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="885e1-181">例については、 <xref:System.IO.StreamWriter>クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="885e1-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="885e1-182">次の例は、 <xref:System.IDisposable.Dispose%2A>メソッドを実装する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="885e1-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="885e1-183">Dispose メソッドの実装</span><span class="sxs-lookup"><span data-stu-id="885e1-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
