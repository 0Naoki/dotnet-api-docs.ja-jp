<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c6b175378e418ab8a3b3684b09b4e8b63efa17c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39827799" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アンマネージ リソースを解放するためのメカニズムを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このインターフェイスの主な用途は、アンマネージ リソースを解放することです。 ガベージ コレクターは、自動的にそのオブジェクトを使用できなくする場合は、マネージ オブジェクトに割り当てられたメモリを解放します。 ただし、ガベージ コレクションが行われるタイミングを予測することはできません。 さらに、ガベージ コレクターは、ウィンドウのハンドルなどのアンマネージ リソースの知識がないか、ファイルおよびストリームを開きます。  
  
 使用して、<xref:System.IDisposable.Dispose%2A>ガベージ コレクターにアンマネージ リソースを明示的に解放するには、このインターフェイスのメソッド。 オブジェクトのコンシューマーは、オブジェクトが不要になったとき、このメソッドを呼び出すことができます。  
  
> [!WARNING]
>  重大な変更を追加するのには、<xref:System.IDisposable>既存のクラスにインターフェイス。 型の既存のコンシューマーが呼び出すことはできませんので<xref:System.IDisposable.Dispose%2A>、型で保持されているアンマネージ リソースがリリースされることは確信できません。  
  
 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>インスタンスによって所有されているリソースが不要になったときの実装は、型のコンシューマーによって呼び出されますで管理オブジェクトをラップする必要がありますか、 <xref:System.Runtime.InteropServices.SafeHandle> (推奨される代替)をオーバーライドする必要がありますまたは<xref:System.Object.Finalize%2A?displayProperty=nameWithType>を呼び出すコンシューマーを忘れた場合、アンマネージ リソースを解放する<xref:System.IDisposable.Dispose%2A>します。  
  
> [!IMPORTANT]
>  C++ コンパイラ、.NET Framework でリソースの確定的な破棄をサポートしているし、の直接の実装ではできません、<xref:System.IDisposable.Dispose%2A>メソッド。  
  
 方法の詳細についてはこのインターフェイスと<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッドを使用してを参照してください、[ガベージ コレクション](~/docs/standard/garbage-collection/index.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)トピック。  
  
## <a name="using-an-object-that-implements-idisposable"></a>IDisposable を実装するオブジェクトを使用します。  
 アプリが単純に実装するオブジェクトを使用する場合、<xref:System.IDisposable>インターフェイス、オブジェクトを呼び出す必要があります<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>使用が終了したら、実装します。 に応じて、プログラミング言語には、これには 2 つの方法のいずれかの操作を行います。  
  
-   言語を使用して構築など、 `using` c# および Visual Basic でのステートメント。  
  
-   呼び出しをラップすることによって、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>での実装を`try` / `finally`ブロックします。  
  
> [!NOTE]
>  ドキュメント型を実装<xref:System.IDisposable>事実に注意してくださいし、アラームを呼び出してその<xref:System.IDisposable.Dispose%2A>実装します。  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C# および Visual Basic の Using ステートメント  
 など、言語にコンストラクトがサポートしている場合、[を使用して](~/docs/csharp/language-reference/keywords/using.md)(C#) ステートメント、 [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) Visual Basic でステートメントを使用できますを明示的に呼び出すのではなく<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>自分で。 次のコードの例では、この方法を定義する、`WordCount`ファイルとその中の単語の数に関する情報を保持するクラス。  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using`ステートメントは実際に構文上便利な。 言語コンパイラは、コンパイル時の中間言語 (IL) を実装して、 `try` / `finally`ブロックします。  
  
 詳細については、`using`ステートメントを参照してください、 [Using ステートメント](~/docs/visual-basic/language-reference/statements/using-statement.md)または[ステートメントを使用して](~/docs/csharp/language-reference/keywords/using-statement.md)トピック。  
  
### <a name="the-tryfinally-block"></a>Try/finally ブロック  
 使用するプログラミング言語がのようなコンストラクトをサポートしないかどうか、 `using` c# または Visual Basic では、ステートメントでそれを使用していない場合を呼び出すことができます、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>から実装、`finally`のブロックを`try` / `finally`ステートメント。 次の例は、`using`ブロックの前の例では、 `try` / `finally`ブロックします。  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 詳細については、 `try` / `finally`パターンは、「[お試しください.キャッチしてください.Finally ステートメント](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)、 [、try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)、または[try-finally ステートメント](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)します。  
  
## <a name="implementing-idisposable"></a>IDisposable の実装  
 実装する必要があります<xref:System.IDisposable>型が直接アンマネージ リソースを使用している場合のみです。 型のコンシューマーが呼び出すことができます、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>実装のインスタンスが不要になったときにリソースを解放します。 呼び出しに失敗するケースを処理する<xref:System.IDisposable.Dispose%2A>、いずれかから派生したクラスを使用する必要があります<xref:System.Runtime.InteropServices.SafeHandle>オーバーライドする必要があるか、アンマネージ リソースをラップする、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>参照型のメソッド。 使用するいずれの場合も、<xref:System.IDisposable.Dispose%2A>解放、リリース、またはアンマネージ リソースをリセットするなど、アンマネージ リソースを使用した後、必要なクリーンアップ処理をすべてを実行するメソッド。  
  
> [!IMPORTANT]
>  アンマネージ リソースを使用してするとき、またはを破棄する必要がありますサブクラスを与える可能性が、実装する必要があります基底クラスを定義する場合、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>メソッドの 2 番目のオーバー ロードを提供および`Dispose`次で説明したように、セクション。  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable と継承の階層  
 破棄可能なサブクラスを持つ基本クラスを実装する必要があります<xref:System.IDisposable>次のようにします。 実装するときに、このパターンを使用する必要があります<xref:System.IDisposable>はない任意の型で`sealed`(`NotInheritable` Visual Basic で)。  
  
-   1 つのパブリック非仮想を指定する必要があります<xref:System.IDisposable.Dispose>メソッドと、保護された仮想`Dispose(Boolean disposing)`メソッド。  
  
-   <xref:System.IDisposable.Dispose>メソッドを呼び出す必要があります`Dispose(true)`パフォーマンスの最終処理を抑制する必要があります。  
  
-   基本型はファイナライザーを含めることはできません。  
  
 次のコード フラグメントでは、基底クラスで dispose パターンを反映しています。 種類をオーバーライドしないことを前提としていますが、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッド。  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 オーバーライドする場合、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッド、クラスは、次のパターンを実装する必要があります。  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 サブクラスは破棄可能なパターンを次のように実装する必要があります。  
  
-   これらは `Dispose(Boolean)` をオーバーライドし、基底クラスの `Dispose(Boolean)` の実装を呼び出す必要があります。  
  
-   必要な場合にはファイナライザーを提供します。 ファイナライザーは `Dispose(false)` を呼び出す必要があります。  
  
 派生クラスは実装しないこと自体に注意してください、<xref:System.IDisposable>インターフェイスし、パラメーターなしに含めないでください<xref:System.IDisposable.Dispose%2A>メソッド。 基底クラスのみをオーバーライドする`Dispose(Boolean)`メソッド。  
  
 次のコード フラグメントでは、派生クラスで dispose パターンを反映しています。 種類をオーバーライドしないことを前提としていますが、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッド。  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 次の例では、実装するリソース クラスを作成する方法、<xref:System.IDisposable>インターフェイス。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アンマネージ リソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 閉じるか、ファイル、ストリーム、およびこのインターフェイスを実装するクラスのインスタンスによって保持されているハンドルなどのアンマネージ リソースを解放するには、このメソッドを使用します。 慣例により、このメソッドはオブジェクトによって保持されているリソースを解放することに関連付けられているすべてのタスクの使用や、再利用するためのオブジェクトを準備します。  
  
> [!WARNING]
>  実装するクラスを使用している場合、<xref:System.IDisposable>インターフェイスを呼び出す必要があります、<xref:System.IDisposable.Dispose%2A>実装クラスの使用が終了するときにします。 詳細については、「IDisposable を実装するオブジェクトを使用して」」セクションを参照してください、<xref:System.IDisposable>トピック。  
  
 このメソッドを実装する場合は、リソースが解放呼び出し包含階層を伝達することで保持されているすべてを確認します。 たとえば、オブジェクト B オブジェクト C、A、の割り当てし、オブジェクト A がオブジェクト B を割り当て<xref:System.IDisposable.Dispose%2A>実装を呼び出す必要があります<xref:System.IDisposable.Dispose%2A>b でを呼び出す必要があります順番<xref:System.IDisposable.Dispose%2A>c  
  
> [!IMPORTANT]
>  C++ コンパイラは、リソースの確定的な破棄をサポートし、直接実装ではできません、<xref:System.IDisposable.Dispose%2A>メソッド。  
  
 オブジェクトが呼び出す必要がありますも、<xref:System.IDisposable.Dispose%2A>基底クラスを実装する場合は、基底クラスのメソッド<xref:System.IDisposable>します。 実装の詳細については<xref:System.IDisposable>基底クラスとそのサブクラスでは、「IDisposable と継承階層」セクションを参照して、<xref:System.IDisposable>トピック。  
  
 オブジェクトの場合、<xref:System.IDisposable.Dispose%2A>メソッドを複数回呼び出すと、オブジェクトは、1 つ目の後のすべての呼び出しを無視する必要があります。 場合、オブジェクトが例外をスローする必要があります、<xref:System.IDisposable.Dispose%2A>メソッドは複数回呼び出されました。 インスタンス メソッド以外の<xref:System.IDisposable.Dispose%2A>スローすることができます、<xref:System.ObjectDisposedException>リソースは既に破棄されています。  
  
 ユーザーが期待を割り当て済みの状態と解放された状態を示すために、特定の規則を使用するリソースの種類。 この例では、従来から開くと考えるまたは閉じられたストリーム クラスです。 など、カスタマイズされた名前のパブリック メソッドを実装するために、このような規則を持つクラスの実装者を選択`Close`、その呼び出し、<xref:System.IDisposable.Dispose%2A>メソッド。  
  
 <xref:System.IDisposable.Dispose%2A>メソッドを明示的に呼び出す必要があります、常に、アンマネージ リソースを許可しない危険性があるオブジェクトのコンシューマーは、呼び出しが失敗したため、解放、<xref:System.IDisposable.Dispose%2A>メソッド。 これを回避する 2 つの方法はあります。  
  
-   派生したオブジェクトでマネージ リソースをラップ<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>します。 <xref:System.IDisposable.Dispose%2A>実装し、<xref:System.IDisposable.Dispose%2A>のメソッド、<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>インスタンス。 詳細については、「SafeHandle 代わりに、」セクションを参照して、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>トピック。  
  
-   リソースを解放するファイナライザーを実装するときに<xref:System.IDisposable.Dispose%2A>は呼び出されません。 既定では、ガベージ コレクターによって、そのメモリを解放する前に、オブジェクトのファイナライザーが自動的に呼び出します。 ただし場合、<xref:System.IDisposable.Dispose%2A>メソッドがされた呼び出されると、必要はありません通常のガベージ コレクターが破棄されたオブジェクトのファイナライザーを呼び出します。 自動終了処理を防ぐために<xref:System.IDisposable.Dispose%2A>実装を呼び出すことができます、<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>メソッド。  
  
 などの非管理対象のリソースにアクセスするオブジェクトを使用すると、<xref:System.IO.StreamWriter>を使用して、インスタンスを作成するをお勧め、`using`ステートメント。 `using`ストリームと呼び出しステートメントを自動的に閉じます<xref:System.IDisposable.Dispose%2A>それを使用するコードが完了したときのオブジェクト。 例については、次を参照してください。、<xref:System.IO.StreamWriter>クラス。  
  
   
  
## Examples  
 次の例は、実装する方法を示しています、<xref:System.IDisposable.Dispose%2A>メソッド。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>