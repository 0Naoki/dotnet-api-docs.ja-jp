<Type Name="Array" FullName="System.Array">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc46739bb42952592fb5e622be24ed66f5c36af5" /><Meta Name="ms.sourcegitcommit" Value="3efce15f3841385ee3ba24bd71ff0c0cf9a47815" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/03/2019" /><Meta Name="ms.locfileid" Value="58875542" /></Metadata><TypeSignature Language="C#" Value="public abstract class Array : ICloneable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Array extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Array" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Array&#xA;Implements ICloneable, IList, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Array abstract : ICloneable, System::Collections::IList, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Array = class&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface IEnumerable&#xA;    interface IStructuralComparable&#xA;    interface IStructuralEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="81add-101">配列の作成、操作、検索、および並べ替えを行うメソッドを提供します。これにより、共通言語ランタイムのすべての配列の基本クラスとして機能します。</span><span class="sxs-lookup"><span data-stu-id="81add-101">Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-102"><xref:System.Array>クラスの一部、<xref:System.Collections>名前空間。</span><span class="sxs-lookup"><span data-stu-id="81add-102">The <xref:System.Array> class is not part of the <xref:System.Collections> namespaces.</span></span> <span data-ttu-id="81add-103">ただし、まだと見なされます、コレクションに基づいているため、<xref:System.Collections.IList>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-103">However, it is still considered a collection because it is based on the <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="81add-104"><xref:System.Array>クラスは配列をサポートする言語の実装の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="81add-104">The <xref:System.Array> class is the base class for language implementations that support arrays.</span></span> <span data-ttu-id="81add-105">ただし、システムとコンパイラから派生できる明示的に、<xref:System.Array>クラス。</span><span class="sxs-lookup"><span data-stu-id="81add-105">However, only the system and compilers can derive explicitly from the <xref:System.Array> class.</span></span> <span data-ttu-id="81add-106">ユーザーは、言語によって提供される配列構造を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-106">Users should employ the array constructs provided by the language.</span></span>  
  
 <span data-ttu-id="81add-107">値の要素が、<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-107">An element is a value in an <xref:System.Array>.</span></span> <span data-ttu-id="81add-108">長さ、<xref:System.Array>は含めることができる要素の合計数です。</span><span class="sxs-lookup"><span data-stu-id="81add-108">The length of an <xref:System.Array> is the total number of elements it can contain.</span></span> <span data-ttu-id="81add-109">下限、<xref:System.Array>は、最初の要素のインデックスです。</span><span class="sxs-lookup"><span data-stu-id="81add-109">The lower bound of an <xref:System.Array> is the index of its first element.</span></span> <span data-ttu-id="81add-110"><xref:System.Array>の下限を持つことができますが、既定でゼロの下限の境界があります。</span><span class="sxs-lookup"><span data-stu-id="81add-110">An <xref:System.Array> can have any lower bound, but it has a lower bound of zero by default.</span></span> <span data-ttu-id="81add-111">インスタンスを作成するときに、別の下限を定義することができます、<xref:System.Array>クラスを使用して<xref:System.Array.CreateInstance%2A>します。多次元<xref:System.Array>各次元のさまざまな境界があることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-111">A different lower bound can be defined when creating an instance of the <xref:System.Array> class using <xref:System.Array.CreateInstance%2A>.A multidimensional <xref:System.Array> can have different bounds for each dimension.</span></span> <span data-ttu-id="81add-112">配列には、最大 32 次元を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="81add-112">An array can have a maximum of 32 dimensions.</span></span>  
  
 <span data-ttu-id="81add-113">内のクラスとは異なり、<xref:System.Collections>名前空間、<xref:System.Array>容量は固定です。</span><span class="sxs-lookup"><span data-stu-id="81add-113">Unlike the classes in the <xref:System.Collections> namespaces, <xref:System.Array> has a fixed capacity.</span></span> <span data-ttu-id="81add-114">容量を増やす必要があります新規に作成する<xref:System.Array>オブジェクト、必要な容量を要素のコピー元から<xref:System.Array>を新しいオブジェクトし、古い<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-114">To increase the capacity, you must create a new <xref:System.Array> object with the required capacity, copy the elements from the old <xref:System.Array> object to the new one, and delete the old <xref:System.Array>.</span></span>  

 <span data-ttu-id="81add-115">配列のサイズ、40億要素の合計に 0X7FEFFFFF の特定のディメンション (0X7FFFFFC7 バイト配列および 1 バイト構造体の配列) で最大のインデックスに制限されています。</span><span class="sxs-lookup"><span data-stu-id="81add-115">The array size is limited to a total of 4 billion elements, and to a maximum index of 0X7FEFFFFF in any given dimension (0X7FFFFFC7 for byte arrays and arrays of single-byte structures).</span></span>
  
 <span data-ttu-id="81add-116">**.NET framework のみ:** 既定の最大サイズ、 <xref:System.Array> 2 ギガバイト (GB)。</span><span class="sxs-lookup"><span data-stu-id="81add-116">**.NET Framework only:** By default, the maximum size of an <xref:System.Array> is 2 gigabytes (GB).</span></span> <span data-ttu-id="81add-117">64 ビット環境では、設定でサイズの制限を回避できます、`enabled`の属性、 [gcAllowVeryLargeObjects](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)構成要素を`true`実行時環境でします。</span><span class="sxs-lookup"><span data-stu-id="81add-117">In a 64-bit environment, you can avoid the size restriction by setting the `enabled` attribute of the [gcAllowVeryLargeObjects](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment.</span></span>
  
 <span data-ttu-id="81add-118">1 次元配列の実装、 <xref:System.Collections.Generic.IList%601?displayProperty=nameWithType>、 <xref:System.Collections.Generic.ICollection%601?displayProperty=nameWithType>、 <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>、<xref:System.Collections.Generic.IReadOnlyList%601?displayProperty=nameWithType>と<xref:System.Collections.Generic.IReadOnlyCollection%601?displayProperty=nameWithType>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-118">Single-dimensional arrays implement the <xref:System.Collections.Generic.IList%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.ICollection%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.IReadOnlyList%601?displayProperty=nameWithType> and <xref:System.Collections.Generic.IReadOnlyCollection%601?displayProperty=nameWithType> generic interfaces.</span></span> <span data-ttu-id="81add-119">実装は、実行時に配列に提供され、その結果、ジェネリック インターフェイスに表示されないの宣言の構文、<xref:System.Array>クラス。</span><span class="sxs-lookup"><span data-stu-id="81add-119">The implementations are provided to arrays at run time, and as a result, the generic interfaces do not appear in the declaration syntax for the <xref:System.Array> class.</span></span> <span data-ttu-id="81add-120">さらに、ジェネリック インターフェイスの種類 (明示的なインターフェイスの実装) の配列をキャストすることによってのみアクセスできるインターフェイスのメンバーの参照トピックではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-120">In addition,  there are no reference topics for interface members that are accessible only by casting an array to the generic interface type (explicit interface implementations).</span></span> <span data-ttu-id="81add-121">これらのインターフェイスの 1 つの配列をキャストするときの注意すべき重要な点は、追加のメンバーが挿入、または、throw の要素を削除<xref:System.NotSupportedException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-121">The key thing to be aware of when you cast an array to one of these interfaces is that members which add, insert, or remove elements throw <xref:System.NotSupportedException>.</span></span>  
  
 <xref:System.Type> <span data-ttu-id="81add-122">オブジェクトは、配列型の宣言に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="81add-122">objects provide information about array type declarations.</span></span> <xref:System.Array> <span data-ttu-id="81add-123">同じ配列の型を持つオブジェクトでは、同じ共有<xref:System.Type>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-123">objects with the same array type share the same <xref:System.Type> object.</span></span>  
  
 <xref:System.Type.IsArray%2A?displayProperty=nameWithType> <span data-ttu-id="81add-124"><xref:System.Type.GetElementType%2A?displayProperty=nameWithType>で期待どおりの結果を返さない可能性があります<xref:System.Array>ため場合、配列は、型にキャスト<xref:System.Array>結果は、オブジェクト、配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-124">and <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> might not return the expected results with <xref:System.Array> because if an array is cast to the type <xref:System.Array>, the result is an object, not an array.</span></span> <span data-ttu-id="81add-125">つまり、`typeof(System.Array).IsArray`返します`false`と`typeof(System.Array).GetElementType`返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-125">That is, `typeof(System.Array).IsArray` returns `false`, and `typeof(System.Array).GetElementType` returns `null`.</span></span>  
  
 <span data-ttu-id="81add-126"><xref:System.Array.Copy%2A?displayProperty=nameWithType>メソッドだけでなく、同じ型の配列との間にもさまざまな種類の標準的な配列間の要素のコピーは、型キャストを自動的に処理します。</span><span class="sxs-lookup"><span data-stu-id="81add-126">The <xref:System.Array.Copy%2A?displayProperty=nameWithType> method copies elements not only between arrays of the same type but also between standard arrays of different types; it handles type casting automatically.</span></span>  
  
 <span data-ttu-id="81add-127">いくつかのメソッドなど<xref:System.Array.CreateInstance%2A>、 <xref:System.Array.Copy%2A>、 <xref:System.Array.CopyTo%2A>、<xref:System.Array.GetValue%2A>と<xref:System.Array.SetValue%2A>、大量の処理能力の配列の対応するためにパラメーターとして 64 ビット整数値を受け入れるオーバー ロードを提供します。</span><span class="sxs-lookup"><span data-stu-id="81add-127">Some methods, such as <xref:System.Array.CreateInstance%2A>, <xref:System.Array.Copy%2A>, <xref:System.Array.CopyTo%2A>, <xref:System.Array.GetValue%2A>, and <xref:System.Array.SetValue%2A>, provide overloads that accept 64-bit integers as parameters to accommodate large capacity arrays.</span></span> <xref:System.Array.LongLength%2A> <span data-ttu-id="81add-128"><xref:System.Array.GetLongLength%2A>配列の長さを示す、64 ビット整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-128">and <xref:System.Array.GetLongLength%2A> return 64-bit integers indicating the length of the array.</span></span>  
  
 <span data-ttu-id="81add-129"><xref:System.Array>並べ替えの基準とは限りません。</span><span class="sxs-lookup"><span data-stu-id="81add-129">The <xref:System.Array> is not guaranteed to be sorted.</span></span>  <span data-ttu-id="81add-130">並べ替える必要があります、<xref:System.Array>操作を実行する前に (など<xref:System.Array.BinarySearch%2A>) を必要とする、<xref:System.Array>並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="81add-130">You must sort the <xref:System.Array> prior to performing operations (such as <xref:System.Array.BinarySearch%2A>) that require the <xref:System.Array> to be sorted.</span></span>  
  
 <span data-ttu-id="81add-131">使用して、<xref:System.Array>ネイティブ コードでのポインター オブジェクトがサポートされておらずがスローされます、<xref:System.NotSupportedException>のいくつかの方法です。</span><span class="sxs-lookup"><span data-stu-id="81add-131">Using an <xref:System.Array> object of pointers in native code is not supported and will throw a <xref:System.NotSupportedException> for several methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-132">次のコード例に示す方法<xref:System.Array.Copy%2A?displayProperty=nameWithType>整数型の配列と型の配列の要素をコピー<xref:System.Object>します。</span><span class="sxs-lookup"><span data-stu-id="81add-132">The following code example shows how <xref:System.Array.Copy%2A?displayProperty=nameWithType> copies elements between an array of type integer and an array of type <xref:System.Object>.</span></span>  
  
 [!code-cpp[Classic Array Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array Example/CS/source.cs#1)]
 [!code-vb[Classic Array Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array Example/VB/source.vb#1)]  
  
 <span data-ttu-id="81add-133">次のコード例は、作成し、初期化、<xref:System.Array>プロパティとその要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-133">The following code example creates and initializes an <xref:System.Array> and displays its properties and its elements.</span></span>  
  
 [!code-cpp[Classic Array Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array Example/CPP/source3.cpp#2)]
 [!code-csharp[Classic Array Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array Example/CS/source3.cs#2)]
 [!code-vb[Classic Array Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array Example/VB/source3.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="81add-134">パブリック静的 (<see langword="Shared" /> Visual Basic で) この型のメンバーはスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="81add-134">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="81add-135">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="81add-135">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="81add-136">この実装は同期を行わない (スレッド セーフな) ラッパーを<see cref="T:System.Array" />。 ただし、.NET Framework クラスに基づいた<see cref="T:System.Array" />のコレクションを使用して、独自の同期バージョンの提供、<see cref="P:System.Array.SyncRoot" />プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-136">This implementation does not provide a synchronized (thread safe) wrapper for an <see cref="T:System.Array" />; however, .NET Framework classes based on <see cref="T:System.Array" /> provide their own synchronized version of the collection using the <see cref="P:System.Array.SyncRoot" /> property.</span></span>  
  
<span data-ttu-id="81add-137">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-137">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="81add-138">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="81add-138">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="81add-139">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="81add-139">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Type" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-140">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-140">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/arrays/index.md"><span data-ttu-id="81add-141">配列 (C# プログラミング ガイド)</span><span class="sxs-lookup"><span data-stu-id="81add-141">Arrays (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md"><span data-ttu-id="81add-142">Visual Basic における配列</span><span class="sxs-lookup"><span data-stu-id="81add-142">Arrays in Visual Basic</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AsReadOnly&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; AsReadOnly&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.AsReadOnly``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsReadOnly(Of T) (array As T()) As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member AsReadOnly : 'T[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="System.Array.AsReadOnly array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-143">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-143">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-144">読み取り専用の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> ラッパーでラップする、インデックス番号が 0 から始まる 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-144">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper.</span></span></param>
        <summary><span data-ttu-id="81add-145">指定した配列をラップする読み取り専用のラッパーを作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-145">Returns a read-only wrapper for the specified array.</span></span></summary>
        <returns><span data-ttu-id="81add-146">指定した配列をラップする読み取り専用の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> ラッパー。</span><span class="sxs-lookup"><span data-stu-id="81add-146">A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-147">配列への変更を防ぐためには、このラッパーを介してのみの配列を公開します。</span><span class="sxs-lookup"><span data-stu-id="81add-147">To prevent any modifications to the array, expose the array only through this wrapper.</span></span>  
  
 <span data-ttu-id="81add-148">読み取り専用のコレクション、コレクションの変更を防止するラッパー コレクションそのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="81add-148">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="81add-149">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-149">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-150">次の例では、読み取り専用配列をラップする<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-150">The following example wraps an array in a read-only <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>  
  
 [!code-cpp[System.Array.AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.AsReadOnly/CPP/arrayasreadonly.cpp#1)]
 [!code-csharp[System.Array.AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.AsReadOnly/CS/arrayasreadonly.cs#1)]
 [!code-vb[System.Array.AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.AsReadOnly/VB/arrayasreadonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-151"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-151">is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-152">バイナリ サーチ アルゴリズムを使用して、並べ替え済みの 1 次元の <see cref="T:System.Array" /> 内で値を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-152">Searches a one-dimensional sorted <see cref="T:System.Array" /> for a value, using a binary search algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public static int BinarySearch (Array array, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch(class System.Array array, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch(System.Array,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int BinarySearch(Array ^ array, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Array * obj -&gt; int" Usage="System.Array.BinarySearch (array, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-153">検索対象となる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-153">The sorted one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-154">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-154">The object to search for.</span></span></param>
        <summary><span data-ttu-id="81add-155">配列の各要素および指定したオブジェクトによって実装されている <see cref="T:System.IComparable" /> インターフェイスを使用して、1 次元の並べ替え済み配列全体の中から特定の要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-155">Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified object.</span></span></summary>
        <returns><span data-ttu-id="81add-156"><paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> における指定した <paramref name="value" /> のインデックス。それ以外の場合は負の数値。</span><span class="sxs-lookup"><span data-stu-id="81add-156">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="81add-157"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合、返される負の数値は <paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-157">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="81add-158"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、返される負の数値は最後の要素のインデックス +1 のビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-158">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="81add-159">並べ替えられていない <paramref name="array" /> に対してこのメソッドを呼び出すと、<paramref name="value" /> が <paramref name="array" /> に存在していても、戻り値が間違っている場合や、負の数値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="81add-159">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-160">このメソッドは、負のインデックスを含んだ配列の検索をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="81add-160">This method does not support searching arrays that contain negative indexes.</span></span> `array` <span data-ttu-id="81add-161">このメソッドを呼び出す前に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-161">must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="81add-162">場合、<xref:System.Array>に指定した値が含まれていないメソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-162">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="81add-163">ビットごとの補数演算子を適用することができます (~、c# で`Not`Visual Basic で) にインデックスを生成するためには、負の結果。</span><span class="sxs-lookup"><span data-stu-id="81add-163">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="81add-164">このインデックスが 1 つである場合、配列の上限よりも大きい要素がないよりも大きい`value`配列にします。</span><span class="sxs-lookup"><span data-stu-id="81add-164">If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="81add-165">それ以外の場合より大きい最初の要素のインデックス`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-165">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="81add-166">いずれか`value`のすべての要素または`array`実装する必要があります、<xref:System.IComparable>の比較に使用するインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-166">Either `value` or every element of `array` must implement the <xref:System.IComparable> interface, which is used for comparisons.</span></span> <span data-ttu-id="81add-167">要素`array`既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります、<xref:System.IComparable>実装。 それ以外の場合、結果正しく可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="81add-167">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-168">場合`value`実装していない、<xref:System.IComparable>インターフェイスの要素`array`テストされて<xref:System.IComparable>検索を開始する前にします。</span><span class="sxs-lookup"><span data-stu-id="81add-168">If`value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins.</span></span> <span data-ttu-id="81add-169">検索が実装していない要素が発生した場合に例外がスローされます<xref:System.IComparable>します。</span><span class="sxs-lookup"><span data-stu-id="81add-169">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.</span></span>  
  
 <span data-ttu-id="81add-170">重複する要素が許可されます。</span><span class="sxs-lookup"><span data-stu-id="81add-170">Duplicate elements are allowed.</span></span> <span data-ttu-id="81add-171">場合、<xref:System.Array>に等しい 1 つ以上の要素を含む`value`メソッドは、1 つだけの出現回数、および必ずしも 1 つ目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-171">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 `null` <span data-ttu-id="81add-172">参照型; と常に比較できます。そのため、使用する比較`null`例外は生成されません。</span><span class="sxs-lookup"><span data-stu-id="81add-172">can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-173">テストするには、すべての要素に対して`value`、適切なに渡される<xref:System.IComparable>場合でも、実装`value`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-173">For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="81add-174">つまり、<xref:System.IComparable>実装を指定された要素を比較する方法を決定する`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-174">That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="81add-175">このメソッドは O (log `n`) 操作、場所`n`は、<xref:System.Array.Length%2A>の`array`。</span><span class="sxs-lookup"><span data-stu-id="81add-175">This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-176">次のコード例は、使用する方法を示しています。<xref:System.Array.BinarySearch%2A>の特定のオブジェクトを検索する、<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-176">The following code example shows how to use <xref:System.Array.BinarySearch%2A> to locate a specific object in an <xref:System.Array>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-177">配列は、その要素を昇順に並べ替え順序で作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-177">The array is created with its elements in ascending sort order.</span></span> <span data-ttu-id="81add-178"><xref:System.Array.BinarySearch%2A>メソッドが、配列を昇順で並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-178">The <xref:System.Array.BinarySearch%2A> method requires the array to be sorted in ascending order.</span></span>  
  
 [!code-cpp[Classic Array.BinarySearch Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.BinarySearch Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/CS/source.cs#1)]
 [!code-vb[Classic Array.BinarySearch Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-179"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-179">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-180"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-180">is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> <span data-ttu-id="81add-181"> の型に <paramref name="array" /> の要素との互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-181">is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="value" /> <span data-ttu-id="81add-182"> によって <see cref="T:System.IComparable" /> インターフェイスが実装されておらず、<see cref="T:System.IComparable" /> インターフェイスを実装していない要素が検索により検出されました。</span><span class="sxs-lookup"><span data-stu-id="81add-182">does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.Sort" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-183">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-183">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public static int BinarySearch (Array array, object value, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch(class System.Array array, object value, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int BinarySearch(Array ^ array, System::Object ^ value, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Array * obj * System.Collections.IComparer -&gt; int" Usage="System.Array.BinarySearch (array, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-184">検索対象となる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-184">The sorted one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-185">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-185">The object to search for.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-186">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="81add-186">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="81add-187">または</span><span class="sxs-lookup"><span data-stu-id="81add-187">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-188">各要素の <see cref="T:System.IComparable" /> 実装を使用する 。</span><span class="sxs-lookup"><span data-stu-id="81add-188">to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-189">指定した <see cref="T:System.Collections.IComparer" /> インターフェイスを使用して、1 次元の並べ替え済み配列全体の中から値を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-189">Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <returns><span data-ttu-id="81add-190"><paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> における指定した <paramref name="value" /> のインデックス。それ以外の場合は負の数値。</span><span class="sxs-lookup"><span data-stu-id="81add-190">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="81add-191"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合、返される負の数値は <paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-191">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="81add-192"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、返される負の数値は最後の要素のインデックス +1 のビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-192">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="81add-193">並べ替えられていない <paramref name="array" /> に対してこのメソッドを呼び出すと、<paramref name="value" /> が <paramref name="array" /> に存在していても、戻り値が間違っている場合や、負の数値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="81add-193">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-194">このメソッドは、負のインデックスを含んだ配列の検索をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="81add-194">This method does not support searching arrays that contain negative indexes.</span></span> `array` <span data-ttu-id="81add-195">このメソッドを呼び出す前に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-195">must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="81add-196">場合、<xref:System.Array>に指定した値が含まれていないメソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-196">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="81add-197">ビットごとの補数演算子を適用することができます (~、c# で`Not`Visual Basic で) にインデックスを生成するためには、負の結果。</span><span class="sxs-lookup"><span data-stu-id="81add-197">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="81add-198">このインデックスが 1 つである場合、配列の上限よりも大きい要素がないよりも大きい`value`配列にします。</span><span class="sxs-lookup"><span data-stu-id="81add-198">If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="81add-199">それ以外の場合より大きい最初の要素のインデックス`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-199">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="81add-200">比較演算子は、要素の比較方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="81add-200">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="81add-201">たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>として大文字の文字列検索を実行する比較子。</span><span class="sxs-lookup"><span data-stu-id="81add-201">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="81add-202">場合`comparer`ない`null`、要素の`array`指定して、指定した値と比較されます<xref:System.Collections.IComparer>実装します。</span><span class="sxs-lookup"><span data-stu-id="81add-202">If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="81add-203">要素`array`によって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります既に`comparer`、それ以外の結果が正しくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-203">The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="81add-204">場合`comparer`は`null`、比較を使用して、<xref:System.IComparable>指定した値または要素自体によって提供される実装。</span><span class="sxs-lookup"><span data-stu-id="81add-204">If`comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value.</span></span> <span data-ttu-id="81add-205">要素`array`既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります、<xref:System.IComparable>実装。 それ以外の場合、結果正しく可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="81add-205">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-206">場合`comparer`は`null`と`value`実装していない、<xref:System.IComparable>インターフェイスの要素`array`テストされて<xref:System.IComparable>検索を開始する前にします。</span><span class="sxs-lookup"><span data-stu-id="81add-206">If `comparer` is `null` and `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins.</span></span> <span data-ttu-id="81add-207">検索が実装していない要素が発生した場合に例外がスローされます<xref:System.IComparable>します。</span><span class="sxs-lookup"><span data-stu-id="81add-207">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.</span></span>  
  
 <span data-ttu-id="81add-208">重複する要素が許可されます。</span><span class="sxs-lookup"><span data-stu-id="81add-208">Duplicate elements are allowed.</span></span> <span data-ttu-id="81add-209">場合、<xref:System.Array>に等しい 1 つ以上の要素を含む`value`メソッドは、1 つだけの出現回数、および必ずしも 1 つ目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-209">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 `null` <span data-ttu-id="81add-210">参照型; と常に比較できます。そのため、使用する比較`null`例外は生成されません。</span><span class="sxs-lookup"><span data-stu-id="81add-210">can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-211">テストするには、すべての要素に対して`value`、適切なに渡される<xref:System.IComparable>場合でも、実装`value`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-211">For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="81add-212">つまり、<xref:System.IComparable>実装を指定された要素を比較する方法を決定する`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-212">That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="81add-213">このメソッドは O (log `n`) 操作、場所`n`は、<xref:System.Array.Length%2A>の`array`。</span><span class="sxs-lookup"><span data-stu-id="81add-213">This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-214"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-214">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-215"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-215">is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="comparer" /> <span data-ttu-id="81add-216"> が <see langword="null" /> で、<paramref name="value" /> は <paramref name="array" /> の要素と互換性がない型です。</span><span class="sxs-lookup"><span data-stu-id="81add-216">is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-217"> が <see langword="null" /> で、<paramref name="value" /> は <see cref="T:System.IComparable" /> インターフェイスを実装しておらず、<see cref="T:System.IComparable" /> インターフェイスを実装していない要素が検索により検出されました。</span><span class="sxs-lookup"><span data-stu-id="81add-217">is <see langword="null" />, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.Sort" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-218">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-218">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public static int BinarySearch (Array array, int index, int length, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch(class System.Array array, int32 index, int32 length, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int BinarySearch(Array ^ array, int index, int length, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Array * int * int * obj -&gt; int" Usage="System.Array.BinarySearch (array, index, length, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-219">検索対象となる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-219">The sorted one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="index"><span data-ttu-id="81add-220">検索範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-220">The starting index of the range to search.</span></span></param>
        <param name="length"><span data-ttu-id="81add-221">検索する範囲の長さ。</span><span class="sxs-lookup"><span data-stu-id="81add-221">The length of the range to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-222">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-222">The object to search for.</span></span></param>
        <summary><span data-ttu-id="81add-223">配列の各要素および指定した値によって実装されている <see cref="T:System.IComparable" /> インターフェイスを使用して、1 次元の並べ替え済み配列の要素範囲の中から値を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-223">Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified value.</span></span></summary>
        <returns><span data-ttu-id="81add-224"><paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> における指定した <paramref name="value" /> のインデックス。それ以外の場合は負の数値。</span><span class="sxs-lookup"><span data-stu-id="81add-224">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="81add-225"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合、返される負の数値は <paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-225">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="81add-226"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、返される負の数値は最後の要素のインデックス +1 のビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-226">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="81add-227">並べ替えられていない <paramref name="array" /> に対してこのメソッドを呼び出すと、<paramref name="value" /> が <paramref name="array" /> に存在していても、戻り値が間違っている場合や、負の数値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="81add-227">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-228">このメソッドは、負のインデックスを含んだ配列の検索をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="81add-228">This method does not support searching arrays that contain negative indexes.</span></span> `array` <span data-ttu-id="81add-229">このメソッドを呼び出す前に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-229">must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="81add-230">場合、<xref:System.Array>に指定した値が含まれていないメソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-230">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="81add-231">ビットごとの補数演算子を適用することができます (~、c# で`Not`Visual Basic で) にインデックスを生成するためには、負の結果。</span><span class="sxs-lookup"><span data-stu-id="81add-231">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result to produce an index.</span></span> <span data-ttu-id="81add-232">このインデックスが 1 つである場合、配列の上限よりも大きい要素がないよりも大きい`value`配列にします。</span><span class="sxs-lookup"><span data-stu-id="81add-232">If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="81add-233">それ以外の場合より大きい最初の要素のインデックス`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-233">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="81add-234">いずれか`value`のすべての要素または`array`実装する必要があります、<xref:System.IComparable>の比較に使用するインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-234">Either `value` or every element of `array` must implement the <xref:System.IComparable> interface, which is used for comparisons.</span></span> <span data-ttu-id="81add-235">要素`array`既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります、<xref:System.IComparable>実装。 それ以外の場合、結果正しく可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="81add-235">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-236">場合`value`実装していない、<xref:System.IComparable>インターフェイスの要素`array`テストされて<xref:System.IComparable>検索を開始する前にします。</span><span class="sxs-lookup"><span data-stu-id="81add-236">If `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins.</span></span> <span data-ttu-id="81add-237">検索が実装していない要素が発生した場合に例外がスローされます<xref:System.IComparable>します。</span><span class="sxs-lookup"><span data-stu-id="81add-237">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.</span></span>  
  
 <span data-ttu-id="81add-238">重複する要素が許可されます。</span><span class="sxs-lookup"><span data-stu-id="81add-238">Duplicate elements are allowed.</span></span> <span data-ttu-id="81add-239">場合、<xref:System.Array>に等しい 1 つ以上の要素を含む`value`メソッドは、1 つだけの出現回数、および必ずしも 1 つ目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-239">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 `null` <span data-ttu-id="81add-240">参照型; と常に比較できます。そのため、使用する比較`null`例外は生成されません。</span><span class="sxs-lookup"><span data-stu-id="81add-240">can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-241">テストするには、すべての要素に対して`value`、適切なに渡される<xref:System.IComparable>場合でも、実装`value`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-241">For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="81add-242">つまり、<xref:System.IComparable>実装を指定された要素を比較する方法を決定する`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-242">That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="81add-243">このメソッドは O (log `n`) 操作、場所`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-243">This method is an O(log `n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-244"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-244">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-245"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-245">is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-246"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-246">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-247">または</span><span class="sxs-lookup"><span data-stu-id="81add-247">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-248"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-248">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-249"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-249">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-250">または</span><span class="sxs-lookup"><span data-stu-id="81add-250">-or-</span></span> 
 <paramref name="value" /> <span data-ttu-id="81add-251"> の型に <paramref name="array" /> の要素との互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-251">is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="value" /> <span data-ttu-id="81add-252"> によって <see cref="T:System.IComparable" /> インターフェイスが実装されておらず、<see cref="T:System.IComparable" /> インターフェイスを実装していない要素が検索により検出されました。</span><span class="sxs-lookup"><span data-stu-id="81add-252">does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.Sort" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-253">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-253">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public static int BinarySearch (Array array, int index, int length, object value, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch(class System.Array array, int32 index, int32 length, object value, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int BinarySearch(Array ^ array, int index, int length, System::Object ^ value, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Array * int * int * obj * System.Collections.IComparer -&gt; int" Usage="System.Array.BinarySearch (array, index, length, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-254">検索対象となる並べ替え済みの 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-254">The sorted one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="index"><span data-ttu-id="81add-255">検索範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-255">The starting index of the range to search.</span></span></param>
        <param name="length"><span data-ttu-id="81add-256">検索する範囲の長さ。</span><span class="sxs-lookup"><span data-stu-id="81add-256">The length of the range to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-257">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-257">The object to search for.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-258">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="81add-258">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="81add-259">または</span><span class="sxs-lookup"><span data-stu-id="81add-259">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-260">各要素の <see cref="T:System.IComparable" /> 実装を使用する 。</span><span class="sxs-lookup"><span data-stu-id="81add-260">to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-261">指定した <see cref="T:System.Collections.IComparer" /> インターフェイスを使用して、1 次元の並べ替え済み配列の要素範囲の中から値を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-261">Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <returns><span data-ttu-id="81add-262"><paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> における指定した <paramref name="value" /> のインデックス。それ以外の場合は負の数値。</span><span class="sxs-lookup"><span data-stu-id="81add-262">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="81add-263"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合、返される負の数値は <paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-263">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="81add-264"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、返される負の数値は最後の要素のインデックス +1 のビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-264">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="81add-265">並べ替えられていない <paramref name="array" /> に対してこのメソッドを呼び出すと、<paramref name="value" /> が <paramref name="array" /> に存在していても、戻り値が間違っている場合や、負の数値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="81add-265">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-266">このメソッドは、負のインデックスを含んだ配列の検索をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="81add-266">This method does not support searching arrays that contain negative indexes.</span></span> `array` <span data-ttu-id="81add-267">このメソッドを呼び出す前に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-267">must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="81add-268">場合、<xref:System.Array>に指定した値が含まれていないメソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-268">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="81add-269">ビットごとの補数演算子を適用することができます (~、c# で`Not`Visual Basic で) にインデックスを生成するためには、負の結果。</span><span class="sxs-lookup"><span data-stu-id="81add-269">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="81add-270">このインデックスが 1 つである場合、配列の上限よりも大きい要素がないよりも大きい`value`配列にします。</span><span class="sxs-lookup"><span data-stu-id="81add-270">If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="81add-271">それ以外の場合より大きい最初の要素のインデックス`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-271">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="81add-272">比較演算子は、要素の比較方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="81add-272">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="81add-273">たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>として大文字の文字列検索を実行する比較子。</span><span class="sxs-lookup"><span data-stu-id="81add-273">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="81add-274">場合`comparer`ない`null`、要素の`array`指定して、指定した値と比較されます<xref:System.Collections.IComparer>実装します。</span><span class="sxs-lookup"><span data-stu-id="81add-274">If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="81add-275">要素`array`によって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります既に`comparer`、それ以外の結果が正しくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-275">The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="81add-276">場合`comparer`は`null`、比較を使用して、<xref:System.IComparable>指定した値または要素自体によって提供される実装。</span><span class="sxs-lookup"><span data-stu-id="81add-276">If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value.</span></span> <span data-ttu-id="81add-277">要素`array`既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります、<xref:System.IComparable>実装。 それ以外の場合、結果正しく可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="81add-277">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-278">場合`comparer`は`null`と`value`実装していない、<xref:System.IComparable>インターフェイスの要素`array`テストされて<xref:System.IComparable>検索を開始する前にします。</span><span class="sxs-lookup"><span data-stu-id="81add-278">If `comparer` is `null` and `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins.</span></span> <span data-ttu-id="81add-279">検索が実装していない要素が発生した場合に例外がスローされます<xref:System.IComparable>します。</span><span class="sxs-lookup"><span data-stu-id="81add-279">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.</span></span>  
  
 <span data-ttu-id="81add-280">重複する要素が許可されます。</span><span class="sxs-lookup"><span data-stu-id="81add-280">Duplicate elements are allowed.</span></span> <span data-ttu-id="81add-281">場合、<xref:System.Array>に等しい 1 つ以上の要素を含む`value`メソッドは、1 つだけの出現回数、および必ずしも 1 つ目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-281">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 `null` <span data-ttu-id="81add-282">参照型; と常に比較できます。そのため、使用する比較`null`を使用する場合に例外を生成しない<xref:System.IComparable>します。</span><span class="sxs-lookup"><span data-stu-id="81add-282">can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception when using <xref:System.IComparable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-283">テストするには、すべての要素に対して`value`、適切なに渡される<xref:System.IComparable>場合でも、実装`value`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-283">For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="81add-284">つまり、<xref:System.IComparable>実装を指定された要素を比較する方法を決定する`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-284">That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="81add-285">このメソッドは O (log `n`) 操作、場所`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-285">This method is an O(log `n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-286"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-286">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-287"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-287">is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-288"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-288">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-289">または</span><span class="sxs-lookup"><span data-stu-id="81add-289">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-290"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-290">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-291"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-291">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-292">または</span><span class="sxs-lookup"><span data-stu-id="81add-292">-or-</span></span> 
 <paramref name="comparer" /> <span data-ttu-id="81add-293"> が <see langword="null" /> で、<paramref name="value" /> は <paramref name="array" /> の要素と互換性がない型です。</span><span class="sxs-lookup"><span data-stu-id="81add-293">is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-294"> が <see langword="null" /> で、<paramref name="value" /> は <see cref="T:System.IComparable" /> インターフェイスを実装しておらず、<see cref="T:System.IComparable" /> インターフェイスを実装していない要素が検索により検出されました。</span><span class="sxs-lookup"><span data-stu-id="81add-294">is <see langword="null" />, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.Sort" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-295">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-295">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (T[] array, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(!!T[] array, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinarySearch(Of T) (array As T(), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int BinarySearch(cli::array &lt;T&gt; ^ array, T value);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : 'T[] * 'T -&gt; int" Usage="System.Array.BinarySearch (array, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-296">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-296">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-297">検索する並べ替え済みの 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-297">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-298">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-298">The object to search for.</span></span></param>
        <summary><span data-ttu-id="81add-299"><see cref="T:System.Array" /> の各要素および指定したオブジェクトによって実装されている <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して、1 次元の並べ替え済み配列全体の中から特定の要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-299">Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</span></span></summary>
        <returns><span data-ttu-id="81add-300"><paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> における指定した <paramref name="value" /> のインデックス。それ以外の場合は負の数値。</span><span class="sxs-lookup"><span data-stu-id="81add-300">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="81add-301"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合、返される負の数値は <paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-301">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="81add-302"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、返される負の数値は最後の要素のインデックス +1 のビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-302">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="81add-303">並べ替えられていない <paramref name="array" /> に対してこのメソッドを呼び出すと、<paramref name="value" /> が <paramref name="array" /> に存在していても、戻り値が間違っている場合や、負の数値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="81add-303">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-304">このメソッドは、負のインデックスを含んだ配列の検索をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="81add-304">This method does not support searching arrays that contain negative indexes.</span></span> `array` <span data-ttu-id="81add-305">このメソッドを呼び出す前に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-305">must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="81add-306">場合`array`に指定した値が含まれていないメソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-306">If `array` does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="81add-307">ビットごとの補数演算子を適用することができます (~、c# で`Not`Visual Basic で) にインデックスを生成するためには、負の結果。</span><span class="sxs-lookup"><span data-stu-id="81add-307">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="81add-308">このインデックスが配列のサイズに等しい場合は、要素がないよりも大きい`value`配列にします。</span><span class="sxs-lookup"><span data-stu-id="81add-308">If this index is equal to the size of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="81add-309">それ以外の場合より大きい最初の要素のインデックス`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-309">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 `T` <span data-ttu-id="81add-310">実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスは、比較のために使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-310">must implement the <xref:System.IComparable%601> generic interface, which is used for comparisons.</span></span> <span data-ttu-id="81add-311">要素`array`既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります、<xref:System.IComparable%601>実装。 それ以外の場合、結果正しく可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="81add-311">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="81add-312">重複する要素が許可されます。</span><span class="sxs-lookup"><span data-stu-id="81add-312">Duplicate elements are allowed.</span></span> <span data-ttu-id="81add-313">場合、<xref:System.Array>に等しい 1 つ以上の要素を含む`value`メソッドは、1 つだけの出現回数、および必ずしも 1 つ目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-313">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 `null` <span data-ttu-id="81add-314">参照型; と常に比較できます。そのため、使用する比較`null`例外は生成されません。</span><span class="sxs-lookup"><span data-stu-id="81add-314">can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-315">テストするには、すべての要素に対して`value`、適切なに渡される<xref:System.IComparable%601>場合でも、実装`value`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-315">For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="81add-316">つまり、<xref:System.IComparable%601>実装を指定された要素を比較する方法を決定する`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-316">That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="81add-317">このメソッドは O (log `n`) 操作、場所`n`は、<xref:System.Array.Length%2A>の`array`。</span><span class="sxs-lookup"><span data-stu-id="81add-317">This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-318">次のコード例に示します、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%29>ジェネリック メソッドのオーバー ロードと<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29>ジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-318">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload.</span></span> <span data-ttu-id="81add-319">文字列の配列は、任意の順序に作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-319">An array of strings is created, in no particular order.</span></span>  
  
 <span data-ttu-id="81add-320">配列が表示され、並べ替え、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-320">The array is displayed, sorted, and displayed again.</span></span> <span data-ttu-id="81add-321">使用するには、配列を並べ替える必要があります、<xref:System.Array.BinarySearch%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-321">Arrays must be sorted in order to use the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-322">呼び出し、<xref:System.Array.Sort%2A>と<xref:System.Array.BinarySearch%2A>Visual Basic、c#、および C++ は、最初の引数の型とジェネリック型パラメーターの型を推論するため、ジェネリック メソッドの呼び出しを非ジェネリックの対応する間に違い探さないです。</span><span class="sxs-lookup"><span data-stu-id="81add-322">The calls to the <xref:System.Array.Sort%2A> and <xref:System.Array.BinarySearch%2A> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="81add-323">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-323">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 <span data-ttu-id="81add-324"><xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29>ジェネリック メソッドのオーバー ロードが 2 つの文字列を検索するために使用しではない配列および 1 つを 1 つです。</span><span class="sxs-lookup"><span data-stu-id="81add-324">The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload is then used to search for two strings, one that is not in the array and one that is.</span></span> <span data-ttu-id="81add-325">配列との戻り値、<xref:System.Array.BinarySearch%2A>メソッドに渡される、`ShowWhere`ジェネリック メソッドは、それ以外の場合、要素検索文字列が間に、配列を使用した場合、文字列が見つかった場合は、インデックス値を表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-325">The array and the return value of the <xref:System.Array.BinarySearch%2A> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array.</span></span> <span data-ttu-id="81add-326">インデックスが負の値、配列内の文字列でない場合ため、`ShowWhere`メソッドは、ビットごとの補数 (、~ 演算子が c# および Visual C は、 `Xor`Visual Basic で-1) 検索よりも大きい一覧の最初の要素のインデックスを取得する string します。</span><span class="sxs-lookup"><span data-stu-id="81add-326">The index is negative if the string is not in the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor`-1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</span></span>  
  
 [!code-cpp[Array_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[Array_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearch/cs/source.cs#1)]
 [!code-vb[Array_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-327"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-327">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="T" /> <span data-ttu-id="81add-328"> によって、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-328">does not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.Sort" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-329">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-329">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (T[] array, T value, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(!!T[] array, !!T value, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinarySearch(Of T) (array As T(), value As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int BinarySearch(cli::array &lt;T&gt; ^ array, T value, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : 'T[] * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="System.Array.BinarySearch (array, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-330">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-330">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-331">検索する並べ替え済みの 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-331">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-332">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-332">The object to search for.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-333">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="81add-333">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="81add-334">または</span><span class="sxs-lookup"><span data-stu-id="81add-334">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-335">各要素の <see cref="T:System.IComparable`1" /> 実装を使用する 。</span><span class="sxs-lookup"><span data-stu-id="81add-335">to use the <see cref="T:System.IComparable`1" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-336">指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して、1 次元の並べ替え済み配列全体の中から値を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-336">Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <returns><span data-ttu-id="81add-337"><paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> における指定した <paramref name="value" /> のインデックス。それ以外の場合は負の数値。</span><span class="sxs-lookup"><span data-stu-id="81add-337">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="81add-338"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合、返される負の数値は <paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-338">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="81add-339"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、返される負の数値は最後の要素のインデックス +1 のビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-339">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="81add-340">並べ替えられていない <paramref name="array" /> に対してこのメソッドを呼び出すと、<paramref name="value" /> が <paramref name="array" /> に存在していても、戻り値が間違っている場合や、負の数値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="81add-340">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-341">このメソッドは、負のインデックスを含んだ配列の検索をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="81add-341">This method does not support searching arrays that contain negative indexes.</span></span> `array` <span data-ttu-id="81add-342">このメソッドを呼び出す前に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-342">must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="81add-343">場合、<xref:System.Array>に指定した値が含まれていないメソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-343">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="81add-344">ビットごとの補数演算子を適用することができます (~、c# で`Not`Visual Basic で) にインデックスを生成するためには、負の結果。</span><span class="sxs-lookup"><span data-stu-id="81add-344">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result to produce an index.</span></span> <span data-ttu-id="81add-345">このインデックスが配列のサイズに等しい場合は、要素がないよりも大きい`value`配列にします。</span><span class="sxs-lookup"><span data-stu-id="81add-345">If this index is equal to the size of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="81add-346">それ以外の場合より大きい最初の要素のインデックス`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-346">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="81add-347">比較演算子は、要素の比較方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="81add-347">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="81add-348">たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>として大文字の文字列検索を実行する比較子。</span><span class="sxs-lookup"><span data-stu-id="81add-348">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="81add-349">場合`comparer`ない`null`、要素の`array`指定して、指定した値と比較されます<xref:System.Collections.Generic.IComparer%601>ジェネリック インターフェイスの実装。</span><span class="sxs-lookup"><span data-stu-id="81add-349">If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> generic interface implementation.</span></span> <span data-ttu-id="81add-350">要素`array`によって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります既に`comparer`、それ以外の結果が正しくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-350">The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="81add-351">場合`comparer`は`null`、比較を使用して、<xref:System.IComparable%601>ジェネリック インターフェイスの実装によって提供される`T`します。</span><span class="sxs-lookup"><span data-stu-id="81add-351">If `comparer` is `null`, the comparison is done using the <xref:System.IComparable%601> generic interface implementation provided by `T`.</span></span> <span data-ttu-id="81add-352">要素`array`既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります、<xref:System.IComparable%601>実装。 それ以外の場合、結果正しく可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="81add-352">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-353">場合`comparer`は`null`と`value`を実装しません、<xref:System.IComparable%601>ジェネリック インターフェイス、要素の`array`テストされて<xref:System.IComparable%601>検索を開始する前にします。</span><span class="sxs-lookup"><span data-stu-id="81add-353">If `comparer` is `null` and `value` does not implement the <xref:System.IComparable%601> generic interface, the elements of `array` are not tested for <xref:System.IComparable%601> before the search begins.</span></span> <span data-ttu-id="81add-354">検索が実装していない要素が発生した場合に例外がスローされます<xref:System.IComparable%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-354">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable%601>.</span></span>  
  
 <span data-ttu-id="81add-355">重複する要素が許可されます。</span><span class="sxs-lookup"><span data-stu-id="81add-355">Duplicate elements are allowed.</span></span> <span data-ttu-id="81add-356">場合、<xref:System.Array>に等しい 1 つ以上の要素を含む`value`メソッドは、1 つだけの出現回数、および必ずしも 1 つ目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-356">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 `null` <span data-ttu-id="81add-357">参照型; と常に比較できます。そのため、使用する比較`null`例外は生成されません。</span><span class="sxs-lookup"><span data-stu-id="81add-357">can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-358">テストするには、すべての要素に対して`value`、適切なに渡される<xref:System.IComparable%601>場合でも、実装`value`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-358">For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="81add-359">つまり、<xref:System.IComparable%601>実装を指定された要素を比較する方法を決定する`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-359">That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="81add-360">このメソッドは O (log `n`) 操作、場所`n`は、<xref:System.Array.Length%2A>の`array`。</span><span class="sxs-lookup"><span data-stu-id="81add-360">This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-361">次の例で、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロードと<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-361">The following example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload.</span></span>  
  
 <span data-ttu-id="81add-362">コード例では、という名前の文字列の代替の比較子を定義します。 `ReverseCompare`、実装、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual c で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-362">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="81add-363">比較演算子の呼び出し、<xref:System.String.CompareTo%28System.String%29>メソッドは、文字列は、低-高のではなく高から低を並べ替えられるように、比較対照値の順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-363">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="81add-364">配列が表示され、並べ替え、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-364">The array is displayed, sorted, and displayed again.</span></span> <span data-ttu-id="81add-365">使用するには、配列を並べ替える必要があります、<xref:System.Array.BinarySearch%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-365">Arrays must be sorted in order to use the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-366">呼び出し、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>と<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>Visual Basic、c#、および C++ は、最初の引数の型とジェネリック型パラメーターの型を推論するため、ジェネリック メソッドの呼び出しを非ジェネリックの対応する間に違い探さないです。</span><span class="sxs-lookup"><span data-stu-id="81add-366">The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="81add-367">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-367">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 <span data-ttu-id="81add-368"><xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロードが 2 つの文字列を検索するために使用しではない配列および 1 つを 1 つです。</span><span class="sxs-lookup"><span data-stu-id="81add-368">The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is then used to search for two strings, one that is not in the array and one that is.</span></span> <span data-ttu-id="81add-369">配列との戻り値、<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>メソッドに渡される、`ShowWhere`ジェネリック メソッドは、それ以外の場合、要素検索文字列が間に、配列を使用した場合、文字列が見つかった場合は、インデックス値を表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-369">The array and the return value of the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array.</span></span> <span data-ttu-id="81add-370">インデックスが負の値、文字列は、n がない場合、配列のため、`ShowWhere`メソッドは、ビットごとの補数 (、~ c# および Visual C は、演算子`Xor`Visual Basic で-1) 検索からよりも大きい一覧の最初の要素のインデックスを取得するにはng です。</span><span class="sxs-lookup"><span data-stu-id="81add-370">The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</span></span>  
  
 [!code-cpp[Array_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[Array_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-371"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-371">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="comparer" /> <span data-ttu-id="81add-372"> が <see langword="null" /> で、<paramref name="value" /> は <paramref name="array" /> の要素と互換性がない型です。</span><span class="sxs-lookup"><span data-stu-id="81add-372">is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-373"> が <see langword="null" /> であり、<paramref name="T" /> によって <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-373">is <see langword="null" />, and <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.Sort" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-374">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-374">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (T[] array, int index, int length, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(!!T[] array, int32 index, int32 length, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinarySearch(Of T) (array As T(), index As Integer, length As Integer, value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int BinarySearch(cli::array &lt;T&gt; ^ array, int index, int length, T value);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : 'T[] * int * int * 'T -&gt; int" Usage="System.Array.BinarySearch (array, index, length, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-375">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-375">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-376">検索する並べ替え済みの 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-376">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="index"><span data-ttu-id="81add-377">検索範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-377">The starting index of the range to search.</span></span></param>
        <param name="length"><span data-ttu-id="81add-378">検索する範囲の長さ。</span><span class="sxs-lookup"><span data-stu-id="81add-378">The length of the range to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-379">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-379">The object to search for.</span></span></param>
        <summary><span data-ttu-id="81add-380"><see cref="T:System.Array" /> の各要素および指定した値によって実装されている <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して、1 次元の並べ替え済み配列の要素範囲の中から値を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-380">Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.</span></span></summary>
        <returns><span data-ttu-id="81add-381"><paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> における指定した <paramref name="value" /> のインデックス。それ以外の場合は負の数値。</span><span class="sxs-lookup"><span data-stu-id="81add-381">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="81add-382"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合、返される負の数値は <paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-382">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="81add-383"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、返される負の数値は最後の要素のインデックス +1 のビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-383">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="81add-384">並べ替えられていない <paramref name="array" /> に対してこのメソッドを呼び出すと、<paramref name="value" /> が <paramref name="array" /> に存在していても、戻り値が間違っている場合や、負の数値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="81add-384">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-385">このメソッドは、負のインデックスを含んだ配列の検索をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="81add-385">This method does not support searching arrays that contain negative indexes.</span></span> `array` <span data-ttu-id="81add-386">このメソッドを呼び出す前に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-386">must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="81add-387">配列に指定した値が含まれていない場合は、負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-387">If the array does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="81add-388">ビットごとの補数演算子を適用することができます (~、c# で`Not`Visual Basic で) にインデックスを生成するためには、負の結果。</span><span class="sxs-lookup"><span data-stu-id="81add-388">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="81add-389">このインデックスが配列のサイズに等しい場合は、要素がないよりも大きい`value`配列にします。</span><span class="sxs-lookup"><span data-stu-id="81add-389">If this index is equal to the size of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="81add-390">それ以外の場合より大きい最初の要素のインデックス`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-390">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 `T` <span data-ttu-id="81add-391">実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスは、比較のために使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-391">must implement the <xref:System.IComparable%601> generic interface, which is used for comparisons.</span></span> <span data-ttu-id="81add-392">要素`array`既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります、<xref:System.IComparable%601>実装。 それ以外の場合、結果正しく可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="81add-392">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="81add-393">重複する要素が許可されます。</span><span class="sxs-lookup"><span data-stu-id="81add-393">Duplicate elements are allowed.</span></span> <span data-ttu-id="81add-394">場合、<xref:System.Array>に等しい 1 つ以上の要素を含む`value`メソッドは、1 つだけの出現回数、および必ずしも 1 つ目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-394">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 `null` <span data-ttu-id="81add-395">参照型; と常に比較できます。そのため、使用する比較`null`例外は生成されません。</span><span class="sxs-lookup"><span data-stu-id="81add-395">can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-396">テストするには、すべての要素に対して`value`、適切なに渡される<xref:System.IComparable%601>場合でも、実装`value`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-396">For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="81add-397">つまり、<xref:System.IComparable%601>実装を指定された要素を比較する方法を決定する`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-397">That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="81add-398">このメソッドは O (log `n`) 操作、場所`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-398">This method is an O(log `n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-399"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-399">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-400"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-400">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-401">または</span><span class="sxs-lookup"><span data-stu-id="81add-401">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-402"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-402">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-403"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-403">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-404">または</span><span class="sxs-lookup"><span data-stu-id="81add-404">-or-</span></span> 
 <paramref name="value" /> <span data-ttu-id="81add-405"> の型に <paramref name="array" /> の要素との互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-405">is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="T" /> <span data-ttu-id="81add-406"> によって、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-406">does not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.Sort" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-407">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-407">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (T[] array, int index, int length, T value, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(!!T[] array, int32 index, int32 length, !!T value, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinarySearch(Of T) (array As T(), index As Integer, length As Integer, value As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int BinarySearch(cli::array &lt;T&gt; ^ array, int index, int length, T value, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : 'T[] * int * int * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="System.Array.BinarySearch (array, index, length, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-408">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-408">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-409">検索する並べ替え済みの 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-409">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="index"><span data-ttu-id="81add-410">検索範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-410">The starting index of the range to search.</span></span></param>
        <param name="length"><span data-ttu-id="81add-411">検索する範囲の長さ。</span><span class="sxs-lookup"><span data-stu-id="81add-411">The length of the range to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-412">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-412">The object to search for.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-413">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="81add-413">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="81add-414">または</span><span class="sxs-lookup"><span data-stu-id="81add-414">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-415">各要素の <see cref="T:System.IComparable`1" /> 実装を使用する 。</span><span class="sxs-lookup"><span data-stu-id="81add-415">to use the <see cref="T:System.IComparable`1" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-416">指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して、1 次元の並べ替え済み配列の要素範囲の中から値を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-416">Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <returns><span data-ttu-id="81add-417"><paramref name="value" /> が存在する場合は、指定した <paramref name="array" /> における指定した <paramref name="value" /> のインデックス。それ以外の場合は負の数値。</span><span class="sxs-lookup"><span data-stu-id="81add-417">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="81add-418"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内の 1 つ以上の要素よりも小さい場合、返される負の数値は <paramref name="value" /> より大きい最初の要素のインデックスのビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-418">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="81add-419"><paramref name="value" /> が見つからず、<paramref name="value" /> が <paramref name="array" /> 内のどの要素よりも大きい場合は、返される負の数値は最後の要素のインデックス +1 のビットごとの補数となります。</span><span class="sxs-lookup"><span data-stu-id="81add-419">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="81add-420">並べ替えられていない <paramref name="array" /> に対してこのメソッドを呼び出すと、<paramref name="value" /> が <paramref name="array" /> に存在していても、戻り値が間違っている場合や、負の数値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="81add-420">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-421">このメソッドは、負のインデックスを含んだ配列の検索をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="81add-421">This method does not support searching arrays that contain negative indexes.</span></span> `array` <span data-ttu-id="81add-422">このメソッドを呼び出す前に並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-422">must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="81add-423">配列に指定した値が含まれていない場合は、負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-423">If the array does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="81add-424">ビットごとの補数演算子を適用することができます (~、c# で`Not`Visual Basic で) にインデックスを生成するためには、負の結果。</span><span class="sxs-lookup"><span data-stu-id="81add-424">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="81add-425">このインデックスが配列のサイズに等しい場合は、要素がないよりも大きい`value`配列にします。</span><span class="sxs-lookup"><span data-stu-id="81add-425">If this index is equal to the size of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="81add-426">それ以外の場合より大きい最初の要素のインデックス`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-426">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="81add-427">比較演算子は、要素の比較方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="81add-427">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="81add-428">たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>として大文字の文字列検索を実行する比較子。</span><span class="sxs-lookup"><span data-stu-id="81add-428">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="81add-429">場合`comparer`ない`null`、要素の`array`指定して、指定した値と比較されます<xref:System.Collections.Generic.IComparer%601>ジェネリック インターフェイスの実装。</span><span class="sxs-lookup"><span data-stu-id="81add-429">If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> generic interface implementation.</span></span> <span data-ttu-id="81add-430">要素`array`によって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります既に`comparer`、それ以外の結果が正しくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-430">The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="81add-431">場合`comparer`は`null`、比較を使用して、<xref:System.IComparable%601>ジェネリック インターフェイスの実装の種類に対して指定した`T`します。</span><span class="sxs-lookup"><span data-stu-id="81add-431">If `comparer` is `null`, the comparison is done using the <xref:System.IComparable%601> generic interface implementation provided for type `T`.</span></span> <span data-ttu-id="81add-432">要素`array`既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります、<xref:System.IComparable%601>実装。 それ以外の場合、結果正しく可能性がありますされません。</span><span class="sxs-lookup"><span data-stu-id="81add-432">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="81add-433">重複する要素が許可されます。</span><span class="sxs-lookup"><span data-stu-id="81add-433">Duplicate elements are allowed.</span></span> <span data-ttu-id="81add-434">場合、<xref:System.Array>に等しい 1 つ以上の要素を含む`value`メソッドは、1 つだけの出現回数、および必ずしも 1 つ目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-434">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 `null` <span data-ttu-id="81add-435">参照型; と常に比較できます。そのため、使用する比較`null`を使用する場合に例外を生成しない<xref:System.IComparable%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-435">can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception when using <xref:System.IComparable%601>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-436">テストするには、すべての要素に対して`value`、適切なに渡される<xref:System.IComparable%601>場合でも、実装`value`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-436">For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="81add-437">つまり、<xref:System.IComparable%601>実装を指定された要素を比較する方法を決定する`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-437">That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="81add-438">このメソッドは O (log `n`) 操作、場所`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-438">This method is an O(log `n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-439"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-439">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-440"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-440">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-441">または</span><span class="sxs-lookup"><span data-stu-id="81add-441">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-442"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-442">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-443"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-443">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-444">または</span><span class="sxs-lookup"><span data-stu-id="81add-444">-or-</span></span> 
 <paramref name="comparer" /> <span data-ttu-id="81add-445"> が <see langword="null" /> で、<paramref name="value" /> は <paramref name="array" /> の要素と互換性がない型です。</span><span class="sxs-lookup"><span data-stu-id="81add-445">is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-446"> が <see langword="null" /> であり、<paramref name="T" /> によって <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-446">is <see langword="null" />, and <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.Sort" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-447">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-447">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear (Array array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear(class System.Array array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Clear(System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear(Array ^ array, int index, int length);" />
      <MemberSignature Language="F#" Value="static member Clear : Array * int * int -&gt; unit" Usage="System.Array.Clear (array, index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-448">要素を削除する必要がある配列。</span><span class="sxs-lookup"><span data-stu-id="81add-448">The array whose elements need to be cleared.</span></span></param>
        <param name="index"><span data-ttu-id="81add-449">削除する要素の範囲の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-449">The starting index of the range of elements to clear.</span></span></param>
        <param name="length"><span data-ttu-id="81add-450">削除する要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-450">The number of elements to clear.</span></span></param>
        <summary><span data-ttu-id="81add-451">配列内にある要素の範囲を、各要素の型の既定値に設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-451">Sets a range of elements in an array to the default value of each element type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-452">このメソッドは、配列内の各要素を要素型の既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="81add-452">This method resets each element in an array to the element type's default value.</span></span> <span data-ttu-id="81add-453">参照型の要素を設定 (を含む<xref:System.String>要素) を`null`、および値型の要素を次の表に示すように既定値に設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-453">It sets elements of reference types (including <xref:System.String> elements) to `null`, and sets elements of value types to the default values shown in the following table.</span></span>  
  
|<span data-ttu-id="81add-454">型</span><span class="sxs-lookup"><span data-stu-id="81add-454">Type</span></span>|<span data-ttu-id="81add-455">[値]</span><span class="sxs-lookup"><span data-stu-id="81add-455">Value</span></span>|  
|----------|-----------|  
|<xref:System.Boolean>|`false`|  
|<span data-ttu-id="81add-456">すべての整数と浮動小数点数値型</span><span class="sxs-lookup"><span data-stu-id="81add-456">All integral and floating point numeric types</span></span>|<span data-ttu-id="81add-457">0 (ゼロ)</span><span class="sxs-lookup"><span data-stu-id="81add-457">0 (zero)</span></span>|  
|<xref:System.DateTime>|<xref:System.DateTime.MinValue?displayProperty=nameWithType>|  
|<span data-ttu-id="81add-458">他の値型</span><span class="sxs-lookup"><span data-stu-id="81add-458">Other value types</span></span>|<span data-ttu-id="81add-459">型のフィールドの既定値</span><span class="sxs-lookup"><span data-stu-id="81add-459">Default value of the type's fields</span></span>|  
  
 <span data-ttu-id="81add-460">範囲では、多次元配列で要素のラップ行から行をクリアします。</span><span class="sxs-lookup"><span data-stu-id="81add-460">The range of cleared elements wrap from row to row in a multi-dimensional array.</span></span>  
  
 <span data-ttu-id="81add-461">このメソッドはのみ、要素の値をクリアします要素自体は削除されません。</span><span class="sxs-lookup"><span data-stu-id="81add-461">This method only clears the values of the elements; it does not delete the elements themselves.</span></span> <span data-ttu-id="81add-462">配列が固定サイズです。そのため、要素を追加または削除することはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-462">An array has a fixed size; therefore, elements cannot be added or removed.</span></span>  
  
 <span data-ttu-id="81add-463">このメソッドは O (`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-463">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-464">次の例では、<xref:System.Array.Clear%2A>メソッドを 1 次元、2 次元、および 3 次元の配列内の整数値をリセットします。</span><span class="sxs-lookup"><span data-stu-id="81add-464">The following example uses the <xref:System.Array.Clear%2A> method to reset integer values in a one-dimensional, two-dimensional, and three-dimensional array.</span></span>  
  
 [!code-csharp[System.Array.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clear/cs/example.cs#1)]
 [!code-vb[System.Array.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clear/vb/example.vb#1)]  
  
 <span data-ttu-id="81add-465">次の例では、定義、`TimeZoneTime`を含む構造を<xref:System.TimeZoneInfo>フィールドと<xref:System.DateTimeOffset>フィールド。</span><span class="sxs-lookup"><span data-stu-id="81add-465">The following example defines a `TimeZoneTime` structure that includes a <xref:System.TimeZoneInfo> field and a <xref:System.DateTimeOffset> field.</span></span> <span data-ttu-id="81add-466">呼び出して、<xref:System.Array.Clear%2A>メソッドの 2 つの要素の配列内の 1 つの要素を消去する`TimeZoneTime`値。</span><span class="sxs-lookup"><span data-stu-id="81add-466">It then calls the <xref:System.Array.Clear%2A> method to clear one element in a two-element array of `TimeZoneTime` values.</span></span> <span data-ttu-id="81add-467">メソッドの既定値に消去された要素の値を設定する、<xref:System.TimeZoneInfo>となるオブジェクト`null`との既定値、<xref:System.DateTimeOffset>となるオブジェクト<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="81add-467">The method sets the value of the cleared element to the default value of a <xref:System.TimeZoneInfo> object, which is `null`, and the default value of a <xref:System.DateTimeOffset> object, which is <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Array.Clear#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clear/cs/clearstruct1.cs#2)]
 [!code-vb[System.Array.Clear#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clear/vb/clearstruct1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-468"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-468">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-469"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-469">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-470">または</span><span class="sxs-lookup"><span data-stu-id="81add-470">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-471"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-471">is less than zero.</span></span>  
  
<span data-ttu-id="81add-472">または</span><span class="sxs-lookup"><span data-stu-id="81add-472">-or-</span></span> 
<span data-ttu-id="81add-473"><paramref name="index" /> と <paramref name="length" /> の合計が <paramref name="array" /> のサイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-473">The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="array.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81add-474"><see cref="T:System.Array" /> の簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-474">Creates a shallow copy of the <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-475"><see cref="T:System.Array" /> の簡易コピー。</span><span class="sxs-lookup"><span data-stu-id="81add-475">A shallow copy of the <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-476">簡易コピーを<xref:System.Array>の要素のみをコピー、<xref:System.Array>参照型または値型ですが、参照先のオブジェクトはコピーしないかどうか。</span><span class="sxs-lookup"><span data-stu-id="81add-476">A shallow copy of an <xref:System.Array> copies only the elements of the <xref:System.Array>, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="81add-477">新しい参照<xref:System.Array>同じオブジェクトを参照元を<xref:System.Array> をポイントします。</span><span class="sxs-lookup"><span data-stu-id="81add-477">The references in the new <xref:System.Array> point to the same objects that the references in the original <xref:System.Array> point to.</span></span>  
  
 <span data-ttu-id="81add-478">詳細がこれに対し、コピー、<xref:System.Array>要素と要素が参照する直接的または間接的にすべてコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-478">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="81add-479">クローンは、同じ<xref:System.Type>元として<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-479">The clone is of the same <xref:System.Type> as the original <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-480">このメソッドは O (`n`) 操作、`n`は<xref:System.Array.Length%2A>します。</span><span class="sxs-lookup"><span data-stu-id="81add-480">This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-481">次のコード例のクローンを<xref:System.Globalization.CultureInfo?displayProperty=nameWithType>配列し、は簡易コピーの動作を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-481">The following code example clones a <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> array and demonstrates the behavior of a shallow copy.</span></span>  
  
 [!code-cpp[System.Array.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Clone/CPP/arrayclone.cpp#1)]
 [!code-csharp[System.Array.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clone/CS/arrayclone.cs#1)]
 [!code-vb[System.Array.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clone/VB/arrayclone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Array.Copy" />
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ConstrainedCopy">
      <MemberSignature Language="C#" Value="public static void ConstrainedCopy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConstrainedCopy(class System.Array sourceArray, int32 sourceIndex, class System.Array destinationArray, int32 destinationIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConstrainedCopy (sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConstrainedCopy(Array ^ sourceArray, int sourceIndex, Array ^ destinationArray, int destinationIndex, int length);" />
      <MemberSignature Language="F#" Value="static member ConstrainedCopy : Array * int * Array * int * int -&gt; unit" Usage="System.Array.ConstrainedCopy (sourceArray, sourceIndex, destinationArray, destinationIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationArray" Type="System.Array" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationIndex" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="81add-482">コピーするデータを格納している <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-482">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="sourceIndex"><span data-ttu-id="81add-483">コピー操作の開始位置となる <paramref name="sourceArray" /> 内のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-483">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="81add-484">データを受け取る <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-484">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="81add-485">格納を開始する <paramref name="destinationArray" /> のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-485">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</span></span></param>
        <param name="length"><span data-ttu-id="81add-486">コピーする要素の数を表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-486">A 32-bit integer that represents the number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="81add-487">指定したコピー元インデックスを開始位置として <see cref="T:System.Array" /> から要素の範囲をコピーし、指定したコピー先インデックスを開始位置として他の <see cref="T:System.Array" /> にそれらの要素を貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="81add-487">Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.</span></span>  <span data-ttu-id="81add-488">コピーが完全に成功しない限り、変更は一切適用されません。</span><span class="sxs-lookup"><span data-stu-id="81add-488">Guarantees that all changes are undone if the copy does not succeed completely.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-489">`sourceArray`と`destinationArray`パラメーターは、同じ次元数をいる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-489">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span>  <span data-ttu-id="81add-490">`sourceArray`型と同じである必要がありますまたはから派生した、`destinationArray`種類です。 それ以外の場合、<xref:System.ArrayTypeMismatchException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-490">The `sourceArray` type must be the same as or derived from the `destinationArray` type; otherwise, an <xref:System.ArrayTypeMismatchException> is thrown.</span></span>  <span data-ttu-id="81add-491">異なり<xref:System.Array.Copy%2A>、<xref:System.Array.ConstrainedCopy%2A>いずれかの操作を実行する前に、配列型の互換性を確認します。</span><span class="sxs-lookup"><span data-stu-id="81add-491">Unlike <xref:System.Array.Copy%2A>, <xref:System.Array.ConstrainedCopy%2A> verifies the compatibility of the array types before performing any operation.</span></span>  
  
 <span data-ttu-id="81add-492">多次元配列間でコピーする場合、配列のように動作長い 1 次元配列では、場所の行 (または列) が概念的にレイアウトされるエンド ツー エンドです。</span><span class="sxs-lookup"><span data-stu-id="81add-492">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end.</span></span> <span data-ttu-id="81add-493">たとえば、配列を持つ 3 つの行 (または列) 4 つの要素の配列の先頭から、各コピーの 6 つの要素の場合は最初の行 (または列) の 4 つすべての要素の最初の 2 つの要素、2 番目の行 (または列) がコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-493">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span> <span data-ttu-id="81add-494">3 番目の行 (または列) の 2 番目の要素からコピーを開始する`sourceIndex`さらに 2 つの 2 番目の行 (または列) の長さを加算結果の最初の行 (または列) の上限があります。</span><span class="sxs-lookup"><span data-stu-id="81add-494">To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</span></span>  
  
 <span data-ttu-id="81add-495">場合`sourceArray`と`destinationArray`重なっているため、のこのメソッドの動作はまるでの元の値`sourceArray`する前に一時的な場所に保持された`destinationArray`が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="81add-495">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="81add-496">[C++]</span><span class="sxs-lookup"><span data-stu-id="81add-496">[C++]</span></span>  
  
 <span data-ttu-id="81add-497">このメソッドは、標準の C/C++ 関数`memmove`ではなく、`memcpy`します。</span><span class="sxs-lookup"><span data-stu-id="81add-497">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="81add-498">配列には、参照型の配列または値型の配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="81add-498">The arrays can be reference-type arrays or value-type arrays.</span></span>  <span data-ttu-id="81add-499">場合`sourceArray`と`destinationArray`両方の参照型の配列または型の両方の配列である<xref:System.Object>、シャロー コピーを実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-499">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="81add-500">簡易コピーを<xref:System.Array>は、新しい<xref:System.Array>元と同じ要素への参照を格納している<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-500">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="81add-501">要素自体または要素が参照はコピーされません。</span><span class="sxs-lookup"><span data-stu-id="81add-501">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="81add-502">詳細がこれに対し、コピー、<xref:System.Array>要素と要素が参照する直接的または間接的にすべてコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-502">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="81add-503">このメソッドが、コピー中に例外をスローした場合、`destinationArray`変わりません。 そのため、<xref:System.Array.ConstrainedCopy%2A>制約された実行領域内で使用できます (<xref:System.Runtime.ConstrainedExecution.Cer>)。</span><span class="sxs-lookup"><span data-stu-id="81add-503">If this method throws an exception while copying, the `destinationArray` remains unchanged; therefore, <xref:System.Array.ConstrainedCopy%2A> can be used within a constrained execution region (<xref:System.Runtime.ConstrainedExecution.Cer>).</span></span>  
  
 <span data-ttu-id="81add-504">このメソッドは O (`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-504">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArray" /> <span data-ttu-id="81add-505"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-505">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-506">または</span><span class="sxs-lookup"><span data-stu-id="81add-506">-or-</span></span> 
 <paramref name="destinationArray" /> <span data-ttu-id="81add-507"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-507">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="sourceArray" /> <span data-ttu-id="81add-508"> と <paramref name="destinationArray" /> のランクが異なります。</span><span class="sxs-lookup"><span data-stu-id="81add-508">and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="81add-509"><paramref name="sourceArray" /> はどちらも同じでもなく、<paramref name="destinationArray" /> 型から派生したものでもありません。</span><span class="sxs-lookup"><span data-stu-id="81add-509">The <paramref name="sourceArray" /> type is neither the same as nor derived from the <paramref name="destinationArray" /> type.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="81add-510"><paramref name="sourceArray" /> の少なくとも 1 つの要素が <paramref name="destinationArray" /> の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-510">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex" /> <span data-ttu-id="81add-511"> は <paramref name="sourceArray" /> の最初の次元の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-511">is less than the lower bound of the first dimension of <paramref name="sourceArray" />.</span></span>  
  
<span data-ttu-id="81add-512">または</span><span class="sxs-lookup"><span data-stu-id="81add-512">-or-</span></span> 
 <paramref name="destinationIndex" /> <span data-ttu-id="81add-513"> は <paramref name="destinationArray" /> の最初の次元の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-513">is less than the lower bound of the first dimension of <paramref name="destinationArray" />.</span></span>  
  
<span data-ttu-id="81add-514">または</span><span class="sxs-lookup"><span data-stu-id="81add-514">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-515"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-515">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="length" /> <span data-ttu-id="81add-516"> は <paramref name="sourceIndex" /> から最後の <paramref name="sourceArray" /> までの要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-516">is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.</span></span>  
  
<span data-ttu-id="81add-517">または</span><span class="sxs-lookup"><span data-stu-id="81add-517">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-518"> は <paramref name="destinationIndex" /> から最後の <paramref name="destinationArray" /> までの要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-518">is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="Overload:System.Array.Copy" />
        <altmember cref="M:System.Array.Clone" />
        <altmember cref="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute" />
        <altmember cref="T:System.Runtime.ConstrainedExecution.Cer" />
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput[] ConvertAll&lt;TInput,TOutput&gt; (TInput[] array, Converter&lt;TInput,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput[] ConvertAll&lt;TInput, TOutput&gt;(!!TInput[] array, class System.Converter`2&lt;!!TInput, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertAll(Of TInput, TOutput) (array As TInput(), converter As Converter(Of TInput, TOutput)) As TOutput()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static cli::array &lt;TOutput&gt; ^ ConvertAll(cli::array &lt;TInput&gt; ^ array, Converter&lt;TInput, TOutput&gt; ^ converter);" />
      <MemberSignature Language="F#" Value="static member ConvertAll : 'Input[] * Converter&lt;'Input, 'Output&gt; -&gt; 'Output[]" Usage="System.Array.ConvertAll (array, converter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="TInput[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="converter" Type="System.Converter&lt;TInput,TOutput&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="81add-519">元の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-519">The type of the elements of the source array.</span></span></typeparam>
        <typeparam name="TOutput"><span data-ttu-id="81add-520">変換後の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-520">The type of the elements of the target array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-521">変換元となる、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-521">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</span></span></param>
        <param name="converter"><span data-ttu-id="81add-522">各要素の型を変換するための <see cref="T:System.Converter`2" />。</span><span class="sxs-lookup"><span data-stu-id="81add-522">A <see cref="T:System.Converter`2" /> that converts each element from one type to another type.</span></span></param>
        <summary><span data-ttu-id="81add-523">ある型の配列を別の型の配列に変換します。</span><span class="sxs-lookup"><span data-stu-id="81add-523">Converts an array of one type to an array of another type.</span></span></summary>
        <returns><span data-ttu-id="81add-524">要素の型を変換した後の配列。</span><span class="sxs-lookup"><span data-stu-id="81add-524">An array of the target type containing the converted elements from the source array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-525"><xref:System.Converter%602>オブジェクトを対象の型に変換するメソッドをデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="81add-525">The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.</span></span>  <span data-ttu-id="81add-526">要素`array`に個別に渡される、 <xref:System.Converter%602>、新しい配列に変換された要素が保存されます。</span><span class="sxs-lookup"><span data-stu-id="81add-526">The elements of `array` are individually passed to the <xref:System.Converter%602>, and the converted elements are saved in the new array.</span></span>  
  
 <span data-ttu-id="81add-527">ソース`array`は変更されません。</span><span class="sxs-lookup"><span data-stu-id="81add-527">The source `array` remains unchanged.</span></span>  
  
 <span data-ttu-id="81add-528">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-528">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-529">次のコード例は、という名前のメソッドを定義します。`PointFToPoint`に変換する、<xref:System.Drawing.PointF>構造体を、<xref:System.Drawing.Point>構造体。</span><span class="sxs-lookup"><span data-stu-id="81add-529">The following code example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="81add-530">配列を作成し<xref:System.Drawing.PointF>構造体を作成、`Converter<PointF, Point>`デリゲート (`Converter(Of PointF, Point)` Visual Basic で) を表す、`PointFToPoint`メソッドに、デリゲートを渡します、<xref:System.Array.ConvertAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-530">The example then creates an array of <xref:System.Drawing.PointF> structures, creates a `Converter<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Array.ConvertAll%2A> method.</span></span> <span data-ttu-id="81add-531"><xref:System.Array.ConvertAll%2A>メソッドは、入力リストの各要素に渡します、`PointFToPoint`メソッドは、の新しいリストに変換された要素と<xref:System.Drawing.Point>構造体。</span><span class="sxs-lookup"><span data-stu-id="81add-531">The <xref:System.Array.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="81add-532">両方の一覧が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-532">Both lists are displayed.</span></span>  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-533"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-533">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-534">または</span><span class="sxs-lookup"><span data-stu-id="81add-534">-or-</span></span> 
 <paramref name="converter" /> <span data-ttu-id="81add-535"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-535">is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Copy">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-536">一方の <see cref="T:System.Array" /> の要素範囲を他方の <see cref="T:System.Array" /> にコピーし、必要に応じて型キャストとボックス化を実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-536">Copies a range of elements in one <see cref="T:System.Array" /> to another <see cref="T:System.Array" /> and performs type casting and boxing as required.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (Array sourceArray, Array destinationArray, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(class System.Array sourceArray, class System.Array destinationArray, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Copy(System.Array,System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceArray As Array, destinationArray As Array, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(Array ^ sourceArray, Array ^ destinationArray, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : Array * Array * int -&gt; unit" Usage="System.Array.Copy (sourceArray, destinationArray, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" />
        <Parameter Name="destinationArray" Type="System.Array" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="81add-537">コピーするデータを格納している <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-537">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="81add-538">データを受け取る <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-538">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="length"><span data-ttu-id="81add-539">コピーする要素の数を表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-539">A 32-bit integer that represents the number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="81add-540">最初の要素を開始位置として <see cref="T:System.Array" /> から要素の範囲をコピーし、最初の要素を開始位置として他の <see cref="T:System.Array" /> にそれらの要素を貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="81add-540">Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element.</span></span> <span data-ttu-id="81add-541">長さは 32 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-541">The length is specified as a 32-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-542">`sourceArray`と`destinationArray`パラメーターは、同じ次元数をいる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-542">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span> <span data-ttu-id="81add-543">さらに、`destinationArray`次元されて既にする必要があり、十分な数の要素がコピーされたデータを格納する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-543">In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.</span></span>  
  
 <span data-ttu-id="81add-544">多次元配列間でコピーする場合、配列のように動作長い 1 次元配列では、場所の行 (または列) が概念的にレイアウトされるエンド ツー エンドです。</span><span class="sxs-lookup"><span data-stu-id="81add-544">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end.</span></span> <span data-ttu-id="81add-545">たとえば、配列を持つ 3 つの行 (または列) 4 つの要素の配列の先頭から、各コピーの 6 つの要素の場合は最初の行 (または列) の 4 つすべての要素の最初の 2 つの要素、2 番目の行 (または列) がコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-545">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span>  
  
 <span data-ttu-id="81add-546">場合`sourceArray`と`destinationArray`重なっているため、のこのメソッドの動作はまるでの元の値`sourceArray`する前に一時的な場所に保持された`destinationArray`が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="81add-546">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="81add-547">[C++]</span><span class="sxs-lookup"><span data-stu-id="81add-547">[C++]</span></span>  
  
 <span data-ttu-id="81add-548">このメソッドは、標準の C/C++ 関数`memmove`ではなく、`memcpy`します。</span><span class="sxs-lookup"><span data-stu-id="81add-548">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="81add-549">配列には、参照型の配列または値型の配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="81add-549">The arrays can be reference-type arrays or value-type arrays.</span></span> <span data-ttu-id="81add-550">型のダウン キャストを実行すると、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="81add-550">Type downcasting is performed, as required.</span></span>  
  
-   <span data-ttu-id="81add-551">参照型の配列から値型の配列にコピーするときは、各要素がボックス化解除し、コピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-551">When copying from a reference-type array to a value-type array, each element is unboxed and then copied.</span></span> <span data-ttu-id="81add-552">参照型の配列に値型の配列からコピーする場合は、各要素がボックス化され、コピーされます。</span><span class="sxs-lookup"><span data-stu-id="81add-552">When copying from a value-type array to a reference-type array, each element is boxed and then copied.</span></span>  
  
-   <span data-ttu-id="81add-553">参照型または値型の配列からコピーするとき、 <xref:System.Object> 、配列、<xref:System.Object>がそれぞれの値または参照を保持するために作成され、コピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-553">When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied.</span></span> <span data-ttu-id="81add-554">コピーするとき、<xref:System.Object>可能であれば、参照型または値型の配列と、割り当て先の配列は、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-554">When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
-   <span data-ttu-id="81add-555">場合`sourceArray`と`destinationArray`両方の参照型の配列または型の両方の配列である<xref:System.Object>、シャロー コピーを実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-555">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="81add-556">簡易コピーを<xref:System.Array>は、新しい<xref:System.Array>元と同じ要素への参照を格納している<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-556">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="81add-557">要素自体または要素が参照はコピーされません。</span><span class="sxs-lookup"><span data-stu-id="81add-557">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="81add-558">詳細がこれに対し、コピー、<xref:System.Array>要素と要素が参照する直接的または間接的にすべてコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-558">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="81add-559"><xref:System.ArrayTypeMismatchException>が、互換性のない型が配列である場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-559">An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types.</span></span> <span data-ttu-id="81add-560">型の互換性の定義は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="81add-560">Type compatibility is defined as follows:</span></span>  
  
-   <span data-ttu-id="81add-561">型がそれ自体との互換性です。</span><span class="sxs-lookup"><span data-stu-id="81add-561">A type is compatible with itself.</span></span>  
  
-   <span data-ttu-id="81add-562">値型と互換性が<xref:System.Object>とその値の型によって実装されたインターフェイス型を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-562">A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type.</span></span> <span data-ttu-id="81add-563">値型では、直接そのインターフェイスを実装している場合にのみ、インターフェイスに接続されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="81add-563">A value type is considered connected to an interface only if it implements that interface directly.</span></span> <span data-ttu-id="81add-564">接続されていない型に互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-564">Disconnected types are not compatible.</span></span>  
  
-   <span data-ttu-id="81add-565">2 つの組み込みの (定義済みの) 値の型は互換性のある拡大変換を元の型から変換先の型へのコピーがある場合です。</span><span class="sxs-lookup"><span data-stu-id="81add-565">Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion.</span></span> <span data-ttu-id="81add-566">拡大変換では縮小変換情報が失われることができますが、については、失われます。</span><span class="sxs-lookup"><span data-stu-id="81add-566">A widening conversion never loses information, whereas a narrowing conversion can lose information.</span></span> <span data-ttu-id="81add-567">たとえばは拡大変換は、32 ビット符号付き整数を 64 ビット符号付き整数に変換して、縮小変換は、64 ビット符号付き整数に変換する 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="81add-567">For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion.</span></span> <span data-ttu-id="81add-568">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-568">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
-   <span data-ttu-id="81add-569">非組み込みの (ユーザー定義) の値型は、自分自身とのみ互換性。</span><span class="sxs-lookup"><span data-stu-id="81add-569">A nonintrinsic (user-defined) value type is compatible only with itself.</span></span>  
  
-   <span data-ttu-id="81add-570">列挙型への暗黙的な変換がある<xref:System.Enum>とその基になる型。</span><span class="sxs-lookup"><span data-stu-id="81add-570">Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.</span></span>  
  
 <span data-ttu-id="81add-571">場合のすべての要素`sourceArray`キャスト (たとえば、派生クラスを基底クラスまたはオブジェクトへのインターフェイスから) が必要ですし、1 つまたは複数の要素に対応する型にキャストできない`destinationArray`、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-571">If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
 <span data-ttu-id="81add-572">このメソッドの状態のコピー中に例外をスローする場合`destinationArray`が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-572">If this method throws an exception while copying, the state of `destinationArray` is undefined.</span></span>  
  
 <span data-ttu-id="81add-573">このメソッドは O (`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-573">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArray" /> <span data-ttu-id="81add-574"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-574">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-575">または</span><span class="sxs-lookup"><span data-stu-id="81add-575">-or-</span></span> 
 <paramref name="destinationArray" /> <span data-ttu-id="81add-576"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-576">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="sourceArray" /> <span data-ttu-id="81add-577"> と <paramref name="destinationArray" /> のランクが異なります。</span><span class="sxs-lookup"><span data-stu-id="81add-577">and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray" /> <span data-ttu-id="81add-578"> と <paramref name="destinationArray" /> の型は互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-578">and <paramref name="destinationArray" /> are of incompatible types.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="81add-579"><paramref name="sourceArray" /> の少なくとも 1 つの要素が <paramref name="destinationArray" /> の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-579">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> <span data-ttu-id="81add-580"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-580">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="length" /> <span data-ttu-id="81add-581"> は <paramref name="sourceArray" /> にある要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-581">is greater than the number of elements in <paramref name="sourceArray" />.</span></span>  
  
<span data-ttu-id="81add-582">または</span><span class="sxs-lookup"><span data-stu-id="81add-582">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-583"> は <paramref name="destinationArray" /> にある要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-583">is greater than the number of elements in <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
        <altmember cref="M:System.Array.Clone" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (Array sourceArray, Array destinationArray, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(class System.Array sourceArray, class System.Array destinationArray, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Copy(System.Array,System.Array,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceArray As Array, destinationArray As Array, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(Array ^ sourceArray, Array ^ destinationArray, long length);" />
      <MemberSignature Language="F#" Value="static member Copy : Array * Array * int64 -&gt; unit" Usage="System.Array.Copy (sourceArray, destinationArray, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationArray" Type="System.Array" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="81add-584">コピーするデータを格納している <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-584">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="81add-585">データを受け取る <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-585">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="length"><span data-ttu-id="81add-586">コピーする要素の数を表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-586">A 64-bit integer that represents the number of elements to copy.</span></span> <span data-ttu-id="81add-587">この整数は 0 から <see cref="F:System.Int32.MaxValue" /> (この値を含む) の間である必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-587">The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</span></span></param>
        <summary><span data-ttu-id="81add-588">最初の要素を開始位置として <see cref="T:System.Array" /> から要素の範囲をコピーし、最初の要素を開始位置として他の <see cref="T:System.Array" /> にそれらの要素を貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="81add-588">Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element.</span></span> <span data-ttu-id="81add-589">長さは 64 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-589">The length is specified as a 64-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-590">`sourceArray`と`destinationArray`パラメーターは、同じ次元数をいる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-590">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span> <span data-ttu-id="81add-591">さらに、`destinationArray`次元されて既にする必要があり、十分な数の要素がコピーされたデータを格納する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-591">In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.</span></span>  
  
 <span data-ttu-id="81add-592">多次元配列間でコピーする場合、配列のように動作長い 1 次元配列では、場所の行 (または列) が概念的にレイアウトされるエンド ツー エンドです。</span><span class="sxs-lookup"><span data-stu-id="81add-592">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end.</span></span> <span data-ttu-id="81add-593">たとえば、配列を持つ 3 つの行 (または列) 4 つの要素の配列の先頭から、各コピーの 6 つの要素の場合は最初の行 (または列) の 4 つすべての要素の最初の 2 つの要素、2 番目の行 (または列) がコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-593">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span>  
  
 <span data-ttu-id="81add-594">場合`sourceArray`と`destinationArray`重なっているため、のこのメソッドの動作はまるでの元の値`sourceArray`する前に一時的な場所に保持された`destinationArray`が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="81add-594">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="81add-595">[C++]</span><span class="sxs-lookup"><span data-stu-id="81add-595">[C++]</span></span>  
  
 <span data-ttu-id="81add-596">このメソッドは、標準の C/C++ 関数`memmove`ではなく、`memcpy`します。</span><span class="sxs-lookup"><span data-stu-id="81add-596">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="81add-597">配列には、参照型の配列または値型の配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="81add-597">The arrays can be reference-type arrays or value-type arrays.</span></span> <span data-ttu-id="81add-598">型のダウン キャストを実行すると、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="81add-598">Type downcasting is performed, as required.</span></span>  
  
-   <span data-ttu-id="81add-599">参照型の配列から値型の配列にコピーするときは、各要素がボックス化解除し、コピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-599">When copying from a reference-type array to a value-type array, each element is unboxed and then copied.</span></span> <span data-ttu-id="81add-600">参照型の配列に値型の配列からコピーする場合は、各要素がボックス化され、コピーされます。</span><span class="sxs-lookup"><span data-stu-id="81add-600">When copying from a value-type array to a reference-type array, each element is boxed and then copied.</span></span>  
  
-   <span data-ttu-id="81add-601">参照型または値型の配列からコピーするとき、 <xref:System.Object> 、配列、<xref:System.Object>がそれぞれの値または参照を保持するために作成され、コピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-601">When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied.</span></span> <span data-ttu-id="81add-602">コピーするとき、<xref:System.Object>可能であれば、参照型または値型の配列と、割り当て先の配列は、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-602">When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
-   <span data-ttu-id="81add-603">場合`sourceArray`と`destinationArray`両方の参照型の配列または型の両方の配列である<xref:System.Object>、シャロー コピーを実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-603">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="81add-604">簡易コピーを<xref:System.Array>は、新しい<xref:System.Array>元と同じ要素への参照を格納している<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-604">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="81add-605">要素自体または要素が参照はコピーされません。</span><span class="sxs-lookup"><span data-stu-id="81add-605">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="81add-606">詳細がこれに対し、コピー、<xref:System.Array>要素と要素が参照する直接的または間接的にすべてコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-606">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="81add-607"><xref:System.ArrayTypeMismatchException>が、互換性のない型が配列である場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-607">An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types.</span></span> <span data-ttu-id="81add-608">型の互換性の定義は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="81add-608">Type compatibility is defined as follows:</span></span>  
  
-   <span data-ttu-id="81add-609">型がそれ自体との互換性です。</span><span class="sxs-lookup"><span data-stu-id="81add-609">A type is compatible with itself.</span></span>  
  
-   <span data-ttu-id="81add-610">値型と互換性が<xref:System.Object>とその値の型によって実装されたインターフェイス型を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-610">A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type.</span></span> <span data-ttu-id="81add-611">値型では、直接そのインターフェイスを実装している場合にのみ、インターフェイスに接続されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="81add-611">A value type is considered connected to an interface only if it implements that interface directly.</span></span> <span data-ttu-id="81add-612">接続されていない型に互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-612">Disconnected types are not compatible.</span></span>  
  
-   <span data-ttu-id="81add-613">2 つの組み込みの (定義済みの) 値の型は互換性のある拡大変換を元の型から変換先の型へのコピーがある場合です。</span><span class="sxs-lookup"><span data-stu-id="81add-613">Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion.</span></span> <span data-ttu-id="81add-614">拡大変換では縮小変換情報が失われることができますが、については、失われます。</span><span class="sxs-lookup"><span data-stu-id="81add-614">A widening conversion never loses information, whereas a narrowing conversion can lose information.</span></span> <span data-ttu-id="81add-615">たとえばは拡大変換は、32 ビット符号付き整数を 64 ビット符号付き整数に変換して、縮小変換は、64 ビット符号付き整数に変換する 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="81add-615">For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion.</span></span> <span data-ttu-id="81add-616">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-616">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
-   <span data-ttu-id="81add-617">非組み込みの (ユーザー定義) の値型は、自分自身とのみ互換性。</span><span class="sxs-lookup"><span data-stu-id="81add-617">A nonintrinsic (user-defined) value type is compatible only with itself.</span></span>  
  
-   <span data-ttu-id="81add-618">列挙型への暗黙的な変換がある<xref:System.Enum>とその基になる型。</span><span class="sxs-lookup"><span data-stu-id="81add-618">Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.</span></span>  
  
 <span data-ttu-id="81add-619">場合のすべての要素`sourceArray`キャスト (たとえば、派生クラスを基底クラスまたはオブジェクトへのインターフェイスから) が必要ですし、1 つまたは複数の要素に対応する型にキャストできない`destinationArray`、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-619">If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
 <span data-ttu-id="81add-620">このメソッドの状態のコピー中に例外をスローする場合`destinationArray`が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-620">If this method throws an exception while copying, the state of `destinationArray` is undefined.</span></span>  
  
 <span data-ttu-id="81add-621">このメソッドは O (`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-621">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArray" /> <span data-ttu-id="81add-622"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-622">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-623">または</span><span class="sxs-lookup"><span data-stu-id="81add-623">-or-</span></span> 
 <paramref name="destinationArray" /> <span data-ttu-id="81add-624"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-624">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="sourceArray" /> <span data-ttu-id="81add-625"> と <paramref name="destinationArray" /> のランクが異なります。</span><span class="sxs-lookup"><span data-stu-id="81add-625">and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray" /> <span data-ttu-id="81add-626"> と <paramref name="destinationArray" /> の型は互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-626">and <paramref name="destinationArray" /> are of incompatible types.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="81add-627"><paramref name="sourceArray" /> の少なくとも 1 つの要素が <paramref name="destinationArray" /> の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-627">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> <span data-ttu-id="81add-628"> が 0 未満であるか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-628">is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="length" /> <span data-ttu-id="81add-629"> は <paramref name="sourceArray" /> にある要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-629">is greater than the number of elements in <paramref name="sourceArray" />.</span></span>  
  
<span data-ttu-id="81add-630">または</span><span class="sxs-lookup"><span data-stu-id="81add-630">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-631"> は <paramref name="destinationArray" /> にある要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-631">is greater than the number of elements in <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
        <altmember cref="M:System.Array.Clone" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(class System.Array sourceArray, int32 sourceIndex, class System.Array destinationArray, int32 destinationIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(Array ^ sourceArray, int sourceIndex, Array ^ destinationArray, int destinationIndex, int length);" />
      <MemberSignature Language="F#" Value="static member Copy : Array * int * Array * int * int -&gt; unit" Usage="System.Array.Copy (sourceArray, sourceIndex, destinationArray, destinationIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" />
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destinationArray" Type="System.Array" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="81add-632">コピーするデータを格納している <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-632">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="sourceIndex"><span data-ttu-id="81add-633">コピー操作の開始位置となる <paramref name="sourceArray" /> 内のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-633">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="81add-634">データを受け取る <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-634">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="81add-635">格納を開始する <paramref name="destinationArray" /> のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-635">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</span></span></param>
        <param name="length"><span data-ttu-id="81add-636">コピーする要素の数を表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-636">A 32-bit integer that represents the number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="81add-637">指定したコピー元インデックスを開始位置として <see cref="T:System.Array" /> から要素の範囲をコピーし、指定したコピー先インデックスを開始位置として他の <see cref="T:System.Array" /> にそれらの要素を貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="81add-637">Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.</span></span> <span data-ttu-id="81add-638">長さとインデックスは、32 ビット整数として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-638">The length and the indexes are specified as 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-639">`sourceArray`と`destinationArray`パラメーターは、同じ次元数をいる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-639">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span> <span data-ttu-id="81add-640">さらに、`destinationArray`次元されて既にする必要があり、十分な数の要素から開始する必要があります、`destinationIndex`コピーされたデータに対応する位置。</span><span class="sxs-lookup"><span data-stu-id="81add-640">In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements starting from the `destinationIndex` position to accommodate the copied data.</span></span>  
  
 <span data-ttu-id="81add-641">多次元配列間でコピーする場合、配列のように動作長い 1 次元配列では、場所の行 (または列) が概念的にレイアウトされるエンド ツー エンドです。</span><span class="sxs-lookup"><span data-stu-id="81add-641">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end.</span></span> <span data-ttu-id="81add-642">たとえば、配列を持つ 3 つの行 (または列) 4 つの要素の配列の先頭から、各コピーの 6 つの要素の場合は最初の行 (または列) の 4 つすべての要素の最初の 2 つの要素、2 番目の行 (または列) がコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-642">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span> <span data-ttu-id="81add-643">3 番目の行 (または列) の 2 番目の要素からコピーを開始する`sourceIndex`さらに 2 つの 2 番目の行 (または列) の長さを加算結果の最初の行 (または列) の上限があります。</span><span class="sxs-lookup"><span data-stu-id="81add-643">To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</span></span>  
  
 <span data-ttu-id="81add-644">場合`sourceArray`と`destinationArray`重なっているため、のこのメソッドの動作はまるでの元の値`sourceArray`する前に一時的な場所に保持された`destinationArray`が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="81add-644">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="81add-645">[C++]</span><span class="sxs-lookup"><span data-stu-id="81add-645">[C++]</span></span>  
  
 <span data-ttu-id="81add-646">このメソッドは、標準の C/C++ 関数`memmove`ではなく、`memcpy`します。</span><span class="sxs-lookup"><span data-stu-id="81add-646">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="81add-647">配列には、参照型の配列または値型の配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="81add-647">The arrays can be reference-type arrays or value-type arrays.</span></span> <span data-ttu-id="81add-648">型のダウン キャストを実行すると、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="81add-648">Type downcasting is performed, as required.</span></span>  
  
-   <span data-ttu-id="81add-649">参照型の配列から値型の配列にコピーするときは、各要素がボックス化解除し、コピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-649">When copying from a reference-type array to a value-type array, each element is unboxed and then copied.</span></span> <span data-ttu-id="81add-650">参照型の配列に値型の配列からコピーする場合は、各要素がボックス化され、コピーされます。</span><span class="sxs-lookup"><span data-stu-id="81add-650">When copying from a value-type array to a reference-type array, each element is boxed and then copied.</span></span>  
  
-   <span data-ttu-id="81add-651">参照型または値型の配列からコピーするとき、 <xref:System.Object> 、配列、<xref:System.Object>がそれぞれの値または参照を保持するために作成され、コピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-651">When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied.</span></span> <span data-ttu-id="81add-652">コピーするとき、<xref:System.Object>可能であれば、参照型または値型の配列と、割り当て先の配列は、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-652">When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
-   <span data-ttu-id="81add-653">場合`sourceArray`と`destinationArray`両方の参照型の配列または型の両方の配列である<xref:System.Object>、シャロー コピーを実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-653">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="81add-654">簡易コピーを<xref:System.Array>は、新しい<xref:System.Array>元と同じ要素への参照を格納している<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-654">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="81add-655">要素自体または要素が参照はコピーされません。</span><span class="sxs-lookup"><span data-stu-id="81add-655">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="81add-656">詳細がこれに対し、コピー、<xref:System.Array>要素と要素が参照する直接的または間接的にすべてコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-656">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="81add-657"><xref:System.ArrayTypeMismatchException>が、互換性のない型が配列である場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-657">An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types.</span></span> <span data-ttu-id="81add-658">型の互換性の定義は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="81add-658">Type compatibility is defined as follows:</span></span>  
  
-   <span data-ttu-id="81add-659">型がそれ自体との互換性です。</span><span class="sxs-lookup"><span data-stu-id="81add-659">A type is compatible with itself.</span></span>  
  
-   <span data-ttu-id="81add-660">値型と互換性が<xref:System.Object>とその値の型によって実装されたインターフェイス型を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-660">A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type.</span></span> <span data-ttu-id="81add-661">値型では、直接そのインターフェイスを実装している場合にのみ、インターフェイスに接続されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="81add-661">A value type is considered connected to an interface only if it implements that interface directly.</span></span> <span data-ttu-id="81add-662">接続されていない型に互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-662">Disconnected types are not compatible.</span></span>  
  
-   <span data-ttu-id="81add-663">2 つの組み込みの (定義済みの) 値の型は互換性のある拡大変換を元の型から変換先の型へのコピーがある場合です。</span><span class="sxs-lookup"><span data-stu-id="81add-663">Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion.</span></span> <span data-ttu-id="81add-664">拡大変換では縮小変換情報が失われることができますが、については、失われます。</span><span class="sxs-lookup"><span data-stu-id="81add-664">A widening conversion never loses information, whereas a narrowing conversion can lose information.</span></span> <span data-ttu-id="81add-665">たとえばは拡大変換は、32 ビット符号付き整数を 64 ビット符号付き整数に変換して、縮小変換は、64 ビット符号付き整数に変換する 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="81add-665">For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion.</span></span> <span data-ttu-id="81add-666">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-666">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
-   <span data-ttu-id="81add-667">非組み込みの (ユーザー定義) の値型は、自分自身とのみ互換性。</span><span class="sxs-lookup"><span data-stu-id="81add-667">A nonintrinsic (user-defined) value type is compatible only with itself.</span></span>  
  
-   <span data-ttu-id="81add-668">列挙型への暗黙的な変換がある<xref:System.Enum>とその基になる型。</span><span class="sxs-lookup"><span data-stu-id="81add-668">Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.</span></span>  
  
 <span data-ttu-id="81add-669">場合のすべての要素`sourceArray`キャスト (たとえば、派生クラスを基底クラスまたはオブジェクトへのインターフェイスから) が必要ですし、1 つまたは複数の要素に対応する型にキャストできない`destinationArray`、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-669">If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
 <span data-ttu-id="81add-670">このメソッドの状態のコピー中に例外をスローする場合`destinationArray`が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-670">If this method throws an exception while copying, the state of `destinationArray` is undefined.</span></span>  
  
 <span data-ttu-id="81add-671">このメソッドは O (`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-671">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-672">次のコード例は、いずれかからコピーする方法を示しています。<xref:System.Array>型の<xref:System.Object>間<xref:System.Array>整数型。</span><span class="sxs-lookup"><span data-stu-id="81add-672">The following code example shows how to copy from one <xref:System.Array> of type <xref:System.Object> to another <xref:System.Array> of type integer.</span></span>  
  
 [!code-cpp[Classic Array.Copy1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.Copy1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.Copy1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArray" /> <span data-ttu-id="81add-673"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-673">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-674">または</span><span class="sxs-lookup"><span data-stu-id="81add-674">-or-</span></span> 
 <paramref name="destinationArray" /> <span data-ttu-id="81add-675"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-675">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="sourceArray" /> <span data-ttu-id="81add-676"> と <paramref name="destinationArray" /> のランクが異なります。</span><span class="sxs-lookup"><span data-stu-id="81add-676">and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray" /> <span data-ttu-id="81add-677"> と <paramref name="destinationArray" /> の型は互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-677">and <paramref name="destinationArray" /> are of incompatible types.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="81add-678"><paramref name="sourceArray" /> の少なくとも 1 つの要素が <paramref name="destinationArray" /> の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-678">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex" /> <span data-ttu-id="81add-679"> は <paramref name="sourceArray" /> の最初の次元の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-679">is less than the lower bound of the first dimension of <paramref name="sourceArray" />.</span></span>  
  
<span data-ttu-id="81add-680">または</span><span class="sxs-lookup"><span data-stu-id="81add-680">-or-</span></span> 
 <paramref name="destinationIndex" /> <span data-ttu-id="81add-681"> は <paramref name="destinationArray" /> の最初の次元の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-681">is less than the lower bound of the first dimension of <paramref name="destinationArray" />.</span></span>  
  
<span data-ttu-id="81add-682">または</span><span class="sxs-lookup"><span data-stu-id="81add-682">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-683"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-683">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="length" /> <span data-ttu-id="81add-684"> は <paramref name="sourceIndex" /> から最後の <paramref name="sourceArray" /> までの要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-684">is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.</span></span>  
  
<span data-ttu-id="81add-685">または</span><span class="sxs-lookup"><span data-stu-id="81add-685">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-686"> は <paramref name="destinationIndex" /> から最後の <paramref name="destinationArray" /> までの要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-686">is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
        <altmember cref="M:System.Array.Clone" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(class System.Array sourceArray, int64 sourceIndex, class System.Array destinationArray, int64 destinationIndex, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceArray As Array, sourceIndex As Long, destinationArray As Array, destinationIndex As Long, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(Array ^ sourceArray, long sourceIndex, Array ^ destinationArray, long destinationIndex, long length);" />
      <MemberSignature Language="F#" Value="static member Copy : Array * int64 * Array * int64 * int64 -&gt; unit" Usage="System.Array.Copy (sourceArray, sourceIndex, destinationArray, destinationIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceIndex" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationArray" Type="System.Array" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationIndex" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length" Type="System.Int64" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="81add-687">コピーするデータを格納している <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-687">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="sourceIndex"><span data-ttu-id="81add-688">コピー操作の開始位置となる <paramref name="sourceArray" /> 内のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-688">A 64-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="81add-689">データを受け取る <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-689">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="81add-690">格納を開始する <paramref name="destinationArray" /> のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-690">A 64-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</span></span></param>
        <param name="length"><span data-ttu-id="81add-691">コピーする要素の数を表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-691">A 64-bit integer that represents the number of elements to copy.</span></span> <span data-ttu-id="81add-692">この整数は 0 から <see cref="F:System.Int32.MaxValue" /> (この値を含む) の間である必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-692">The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</span></span></param>
        <summary><span data-ttu-id="81add-693">指定したコピー元インデックスを開始位置として <see cref="T:System.Array" /> から要素の範囲をコピーし、指定したコピー先インデックスを開始位置として他の <see cref="T:System.Array" /> にそれらの要素を貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="81add-693">Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.</span></span> <span data-ttu-id="81add-694">長さとインデックスは、64 ビット整数として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-694">The length and the indexes are specified as 64-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-695">`sourceArray`と`destinationArray`パラメーターは、同じ次元数をいる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-695">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span> <span data-ttu-id="81add-696">さらに、`destinationArray`次元されて既にする必要があり、十分な数の要素から開始する必要があります、`destinationIndex`コピーされたデータに対応する位置。</span><span class="sxs-lookup"><span data-stu-id="81add-696">In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements starting from the `destinationIndex` position to accommodate the copied data.</span></span>  
  
 <span data-ttu-id="81add-697">多次元配列間でコピーする場合、配列のように動作長い 1 次元配列では、場所の行 (または列) が概念的にレイアウトされるエンド ツー エンドです。</span><span class="sxs-lookup"><span data-stu-id="81add-697">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end.</span></span> <span data-ttu-id="81add-698">たとえば、配列を持つ 3 つの行 (または列) 4 つの要素の配列の先頭から、各コピーの 6 つの要素の場合は最初の行 (または列) の 4 つすべての要素の最初の 2 つの要素、2 番目の行 (または列) がコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-698">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span> <span data-ttu-id="81add-699">3 番目の行 (または列) の 2 番目の要素からコピーを開始する`sourceIndex`さらに 2 つの 2 番目の行 (または列) の長さを加算結果の最初の行 (または列) の上限があります。</span><span class="sxs-lookup"><span data-stu-id="81add-699">To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</span></span>  
  
 <span data-ttu-id="81add-700">場合`sourceArray`と`destinationArray`重なっているため、のこのメソッドの動作はまるでの元の値`sourceArray`する前に一時的な場所に保持された`destinationArray`が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="81add-700">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="81add-701">[C++]</span><span class="sxs-lookup"><span data-stu-id="81add-701">[C++]</span></span>  
  
 <span data-ttu-id="81add-702">このメソッドは、標準の C/C++ 関数`memmove`ではなく、`memcpy`します。</span><span class="sxs-lookup"><span data-stu-id="81add-702">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="81add-703">配列には、参照型の配列または値型の配列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="81add-703">The arrays can be reference-type arrays or value-type arrays.</span></span> <span data-ttu-id="81add-704">型のダウン キャストを実行すると、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="81add-704">Type downcasting is performed, as required.</span></span>  
  
-   <span data-ttu-id="81add-705">参照型の配列から値型の配列にコピーするときは、各要素がボックス化解除し、コピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-705">When copying from a reference-type array to a value-type array, each element is unboxed and then copied.</span></span> <span data-ttu-id="81add-706">参照型の配列に値型の配列からコピーする場合は、各要素がボックス化され、コピーされます。</span><span class="sxs-lookup"><span data-stu-id="81add-706">When copying from a value-type array to a reference-type array, each element is boxed and then copied.</span></span>  
  
-   <span data-ttu-id="81add-707">参照型または値型の配列からコピーするとき、 <xref:System.Object> 、配列、<xref:System.Object>がそれぞれの値または参照を保持するために作成され、コピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-707">When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied.</span></span> <span data-ttu-id="81add-708">コピーするとき、<xref:System.Object>可能であれば、参照型または値型の配列と、割り当て先の配列は、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-708">When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
-   <span data-ttu-id="81add-709">場合`sourceArray`と`destinationArray`両方の参照型の配列または型の両方の配列である<xref:System.Object>、シャロー コピーを実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-709">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="81add-710">簡易コピーを<xref:System.Array>は、新しい<xref:System.Array>元と同じ要素への参照を格納している<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-710">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="81add-711">要素自体または要素が参照はコピーされません。</span><span class="sxs-lookup"><span data-stu-id="81add-711">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="81add-712">詳細がこれに対し、コピー、<xref:System.Array>要素と要素が参照する直接的または間接的にすべてコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-712">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="81add-713"><xref:System.ArrayTypeMismatchException>が、互換性のない型が配列である場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-713">An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types.</span></span> <span data-ttu-id="81add-714">型の互換性の定義は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="81add-714">Type compatibility is defined as follows:</span></span>  
  
-   <span data-ttu-id="81add-715">型がそれ自体との互換性です。</span><span class="sxs-lookup"><span data-stu-id="81add-715">A type is compatible with itself.</span></span>  
  
-   <span data-ttu-id="81add-716">値型と互換性が<xref:System.Object>とその値の型によって実装されたインターフェイス型を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-716">A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type.</span></span> <span data-ttu-id="81add-717">値型では、直接そのインターフェイスを実装している場合にのみ、インターフェイスに接続されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="81add-717">A value type is considered connected to an interface only if it implements that interface directly.</span></span> <span data-ttu-id="81add-718">接続されていない型に互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-718">Disconnected types are not compatible.</span></span>  
  
-   <span data-ttu-id="81add-719">2 つの組み込みの (定義済みの) 値の型は互換性のある拡大変換を元の型から変換先の型へのコピーがある場合です。</span><span class="sxs-lookup"><span data-stu-id="81add-719">Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion.</span></span> <span data-ttu-id="81add-720">拡大変換では縮小変換情報が失われることができますが、については、失われます。</span><span class="sxs-lookup"><span data-stu-id="81add-720">A widening conversion never loses information, whereas a narrowing conversion can lose information.</span></span> <span data-ttu-id="81add-721">たとえばは拡大変換は、32 ビット符号付き整数を 64 ビット符号付き整数に変換して、縮小変換は、64 ビット符号付き整数に変換する 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="81add-721">For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion.</span></span> <span data-ttu-id="81add-722">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-722">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
-   <span data-ttu-id="81add-723">非組み込みの (ユーザー定義) の値型は、自分自身とのみ互換性。</span><span class="sxs-lookup"><span data-stu-id="81add-723">A nonintrinsic (user-defined) value type is compatible only with itself.</span></span>  
  
-   <span data-ttu-id="81add-724">列挙型への暗黙的な変換がある<xref:System.Enum>とその基になる型。</span><span class="sxs-lookup"><span data-stu-id="81add-724">Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.</span></span>  
  
 <span data-ttu-id="81add-725">場合のすべての要素`sourceArray`キャスト (たとえば、派生クラスを基底クラスまたはオブジェクトへのインターフェイスから) が必要ですし、1 つまたは複数の要素に対応する型にキャストできない`destinationArray`、<xref:System.InvalidCastException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-725">If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
 <span data-ttu-id="81add-726">このメソッドの状態のコピー中に例外をスローする場合`destinationArray`が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-726">If this method throws an exception while copying, the state of `destinationArray` is undefined.</span></span>  
  
 <span data-ttu-id="81add-727">このメソッドは O (`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-727">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-728">次のコード例は、いずれかからコピーする方法を示しています。<xref:System.Array>型の<xref:System.Object>間<xref:System.Array>整数型。</span><span class="sxs-lookup"><span data-stu-id="81add-728">The following code example shows how to copy from one <xref:System.Array> of type <xref:System.Object> to another <xref:System.Array> of type integer.</span></span>  
  
 [!code-cpp[Classic Array.Copy1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.Copy1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.Copy1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArray" /> <span data-ttu-id="81add-729"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-729">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-730">または</span><span class="sxs-lookup"><span data-stu-id="81add-730">-or-</span></span> 
 <paramref name="destinationArray" /> <span data-ttu-id="81add-731"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-731">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="sourceArray" /> <span data-ttu-id="81add-732"> と <paramref name="destinationArray" /> のランクが異なります。</span><span class="sxs-lookup"><span data-stu-id="81add-732">and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray" /> <span data-ttu-id="81add-733"> と <paramref name="destinationArray" /> の型は互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="81add-733">and <paramref name="destinationArray" /> are of incompatible types.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="81add-734"><paramref name="sourceArray" /> の少なくとも 1 つの要素が <paramref name="destinationArray" /> の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-734">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex" /> <span data-ttu-id="81add-735"> は <paramref name="sourceArray" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-735">is outside the range of valid indexes for the <paramref name="sourceArray" />.</span></span>  
  
<span data-ttu-id="81add-736">または</span><span class="sxs-lookup"><span data-stu-id="81add-736">-or-</span></span> 
 <paramref name="destinationIndex" /> <span data-ttu-id="81add-737"> は <paramref name="destinationArray" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-737">is outside the range of valid indexes for the <paramref name="destinationArray" />.</span></span>  
  
<span data-ttu-id="81add-738">または</span><span class="sxs-lookup"><span data-stu-id="81add-738">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-739"> が 0 未満であるか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-739">is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="length" /> <span data-ttu-id="81add-740"> は <paramref name="sourceIndex" /> から最後の <paramref name="sourceArray" /> までの要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-740">is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.</span></span>  
  
<span data-ttu-id="81add-741">または</span><span class="sxs-lookup"><span data-stu-id="81add-741">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-742"> は <paramref name="destinationIndex" /> から最後の <paramref name="destinationArray" /> までの要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-742">is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
        <altmember cref="M:System.Array.Clone" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-743">現在の 1 次元配列のすべての要素を、指定した 1 次元配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-743">Copies all the elements of the current one-dimensional array to the specified one-dimensional array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="array.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-744">現在の配列からコピーされる要素のコピー先である 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-744">The one-dimensional array that is the destination of the elements copied from the current array.</span></span></param>
        <param name="index"><span data-ttu-id="81add-745">コピーを開始する <paramref name="array" /> のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-745">A 32-bit integer that represents the index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="81add-746">現在の 1 次元配列のすべての要素を、指定したコピー先配列インデックスで開始する指定の 1 次元配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-746">Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index.</span></span> <span data-ttu-id="81add-747">インデックスは 32 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-747">The index is specified as a 32-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-748">このメソッドは、現在の配列インスタンスのすべての要素をコピー、`array`コピー先の配列、インデックスから始まります`index`します。</span><span class="sxs-lookup"><span data-stu-id="81add-748">This method copies all the elements of the current array instance to the `array` destination array, starting at index `index`.</span></span> <span data-ttu-id="81add-749">`array`コピー先の配列の寸法されて既にする必要がありますや十分な数の要素をコピーした要素に対応する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-749">The `array` destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements.</span></span> <span data-ttu-id="81add-750">そうしないと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-750">Otherwise, the method throws an exception.</span></span>  
  
 <span data-ttu-id="81add-751">このメソッドは、サポート、<xref:System.Collections.ICollection?displayProperty=nameWithType>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-751">This method supports the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="81add-752">実装する場合<xref:System.Collections.ICollection?displayProperty=nameWithType>を使用して、明示的に必要な<xref:System.Array.Copy%2A>余分な間接参照を回避するためにします。</span><span class="sxs-lookup"><span data-stu-id="81add-752">If implementing <xref:System.Collections.ICollection?displayProperty=nameWithType> is not explicitly required, use <xref:System.Array.Copy%2A> to avoid an extra indirection.</span></span>  
  
 <span data-ttu-id="81add-753">このメソッドの状態のコピー中に例外をスローする場合`array`が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-753">If this method throws an exception while copying, the state of `array` is undefined.</span></span>  
  
 <span data-ttu-id="81add-754">このメソッドは O (`n`) 操作、`n`は<xref:System.Array.Length%2A>します。簡易コピーのみを実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-754">This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.It performs a shallow copy only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-755">次のコード例をコピーする方法を示しています、<xref:System.Array>間<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-755">The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#1)]  
  
 <span data-ttu-id="81add-756">次のコード例をコピーする方法を示しています、<xref:System.Array>間<xref:System.Array>で下限が 0 以外の値。</span><span class="sxs-lookup"><span data-stu-id="81add-756">The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array> with a nonzero lower bound.</span></span> <span data-ttu-id="81add-757">なおソース全体<xref:System.Array>コピーすると、ターゲットの既存の要素を上書きする空の要素を含む<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-757">Note that the entire source <xref:System.Array> is copied, including empty elements that overwrite existing elements in the target <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CopyTo Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Array.CopyTo Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#2)]
 [!code-vb[Classic Array.CopyTo Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-758"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-758">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-759"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-759">is less than the lower bound of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> <span data-ttu-id="81add-760"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-760">is multidimensional.</span></span>  
  
<span data-ttu-id="81add-761">または</span><span class="sxs-lookup"><span data-stu-id="81add-761">-or-</span></span> 
<span data-ttu-id="81add-762">コピー元配列の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から末尾までの使用可能な要素数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-762">The number of elements in the source array is greater than the available number of elements from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="81add-763">コピー元の <see cref="T:System.Array" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-763">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="81add-764">ソース配列が多次元配列です。</span><span class="sxs-lookup"><span data-stu-id="81add-764">The source array is multidimensional.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="81add-765">コピー元 <see cref="T:System.Array" /> の中の少なくとも 1 つの要素を、コピー先 <paramref name="array" /> の型にキャストすることができません。</span><span class="sxs-lookup"><span data-stu-id="81add-765">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Array.Copy(System.Array,System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, long index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Array array, int64 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CopyTo(System.Array,System.Int64)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Array ^ array, long index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Array * int64 -&gt; unit" Usage="array.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-766">現在の配列からコピーされる要素のコピー先である 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-766">The one-dimensional array that is the destination of the elements copied from the current array.</span></span></param>
        <param name="index"><span data-ttu-id="81add-767"><paramref name="array" /> 内でコピーが開始するインデックスを表す 64 ビットの整数。</span><span class="sxs-lookup"><span data-stu-id="81add-767">A 64-bit integer that represents the index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="81add-768">現在の 1 次元配列のすべての要素を、指定したコピー先配列インデックスで開始する指定の 1 次元配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="81add-768">Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index.</span></span> <span data-ttu-id="81add-769">インデックスは 64 ビット整数として指定されます。</span><span class="sxs-lookup"><span data-stu-id="81add-769">The index is specified as a 64-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-770">このメソッドは、現在の配列インスタンスのすべての要素をコピー、`array`コピー先の配列、インデックスから始まります`index`します。</span><span class="sxs-lookup"><span data-stu-id="81add-770">This method copies all the elements of the current array instance to the `array` destination array, starting at index `index`.</span></span> <span data-ttu-id="81add-771">`array`コピー先の配列の寸法されて既にする必要がありますや十分な数の要素をコピーした要素に対応する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-771">The `array` destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements.</span></span> <span data-ttu-id="81add-772">そうしないと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-772">Otherwise, the method throws an exception.</span></span>  
  
 <span data-ttu-id="81add-773">このメソッドは、サポート、<xref:System.Collections.ICollection?displayProperty=nameWithType>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-773">This method supports the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="81add-774">実装する場合<xref:System.Collections.ICollection?displayProperty=nameWithType>を使用して、明示的に必要な<xref:System.Array.Copy%2A>余分な間接参照を回避するためにします。</span><span class="sxs-lookup"><span data-stu-id="81add-774">If implementing <xref:System.Collections.ICollection?displayProperty=nameWithType> is not explicitly required, use <xref:System.Array.Copy%2A> to avoid an extra indirection.</span></span>  
  
 <span data-ttu-id="81add-775">このメソッドの状態のコピー中に例外をスローする場合`array`が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-775">If this method throws an exception while copying, the state of `array` is undefined.</span></span>  
  
 <span data-ttu-id="81add-776">このメソッドは O (`n`) 操作、`n`は<xref:System.Array.Length%2A>します。簡易コピーのみを実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-776">This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.It performs a shallow copy only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-777">次のコード例をコピーする方法を示しています、<xref:System.Array>間<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-777">The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#1)]  
  
 <span data-ttu-id="81add-778">次のコード例をコピーする方法を示しています、<xref:System.Array>間<xref:System.Array>で下限が 0 以外の値。</span><span class="sxs-lookup"><span data-stu-id="81add-778">The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array> with a nonzero lower bound.</span></span> <span data-ttu-id="81add-779">なおソース全体<xref:System.Array>コピーすると、ターゲットの既存の要素を上書きする空の要素を含む<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-779">Note that the entire source <xref:System.Array> is copied, including empty elements that overwrite existing elements in the target <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CopyTo Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Array.CopyTo Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#2)]
 [!code-vb[Classic Array.CopyTo Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-780"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-780">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-781"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-781">is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> <span data-ttu-id="81add-782"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-782">is multidimensional.</span></span>  
  
<span data-ttu-id="81add-783">または</span><span class="sxs-lookup"><span data-stu-id="81add-783">-or-</span></span> 
<span data-ttu-id="81add-784">コピー元配列の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から末尾までの使用可能な要素数を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-784">The number of elements in the source array is greater than the available number of elements from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="81add-785">コピー元の <see cref="T:System.Array" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-785">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="81add-786">コピー元の <see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-786">The source <see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="81add-787">コピー元 <see cref="T:System.Array" /> の中の少なくとも 1 つの要素を、コピー先 <paramref name="array" /> の型にキャストすることができません。</span><span class="sxs-lookup"><span data-stu-id="81add-787">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Array.Copy(System.Array,System.Array,System.Int64)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-788"><see cref="T:System.Array" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="81add-788">Initializes a new instance of the <see cref="T:System.Array" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, length As Integer) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, int length);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * int -&gt; Array" Usage="System.Array.CreateInstance (elementType, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="81add-789">作成する <see cref="T:System.Array" /> の <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-789">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length"><span data-ttu-id="81add-790">作成する <see cref="T:System.Array" /> のサイズ。</span><span class="sxs-lookup"><span data-stu-id="81add-790">The size of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="81add-791"><see cref="T:System.Type" /> と長さを指定して、0 から始まるインデックス番号を持つ 1 次元の <see cref="T:System.Array" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-791">Creates a one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and length, with zero-based indexing.</span></span></summary>
        <returns><span data-ttu-id="81add-792">長さを指定した、0 から始まるインデックス番号を使用する指定した <see cref="T:System.Type" /> の新しい 1 次元の <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-792">A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-793">ほとんどのクラスとは異なり<xref:System.Array>提供、<xref:System.Array.CreateInstance%2A>の遅延バインディング アクセスを許可するように、パブリック コンス トラクターではなく、メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-793">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="81add-794">参照型の要素に初期化されます`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-794">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="81add-795">値型の要素がゼロに初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-795">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="81add-796">このメソッドは O (`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-796">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-797">次のコード例は、作成し、1 次元を初期化する方法を示しています。<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-797">The following code example shows how to create and initialize a one-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="elementType" /> <span data-ttu-id="81add-798"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-798">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="elementType" /> <span data-ttu-id="81add-799"> は有効な <see cref="T:System.Type" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-799">is not a valid <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><paramref name="elementType" /> <span data-ttu-id="81add-800"> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-800">is not supported.</span></span> <span data-ttu-id="81add-801">たとえば、<see cref="T:System.Void" /> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-801">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
<span data-ttu-id="81add-802">または</span><span class="sxs-lookup"><span data-stu-id="81add-802">-or-</span></span> 
 <paramref name="elementType" /> <span data-ttu-id="81add-803"> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="81add-803">is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> <span data-ttu-id="81add-804"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-804">is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, params int[] lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32[] lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, ParamArray lengths As Integer()) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, ... cli::array &lt;int&gt; ^ lengths);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * int[] -&gt; Array" Usage="System.Array.CreateInstance (elementType, lengths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="lengths" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="81add-805">作成する <see cref="T:System.Array" /> の <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-805">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="lengths"><span data-ttu-id="81add-806">作成する <see cref="T:System.Array" /> の各次元のサイズを表す 32 ビット整数の配列。</span><span class="sxs-lookup"><span data-stu-id="81add-806">An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="81add-807"><see cref="T:System.Array" /> と次元の長さを指定して、0 から始まるインデックス番号を持つ多次元の <see cref="T:System.Type" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-807">Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</span></span> <span data-ttu-id="81add-808">次元の長さは、32 ビット整数の配列で指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-808">The dimension lengths are specified in an array of 32-bit integers.</span></span></summary>
        <returns><span data-ttu-id="81add-809">各次元が指定した長さで、インデックス番号が 0 から始まる、指定した <see cref="T:System.Array" /> の新しい多次元 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-809">A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-810">ほとんどのクラスとは異なり<xref:System.Array>提供、<xref:System.Array.CreateInstance%2A>の遅延バインディング アクセスを許可するように、パブリック コンス トラクターではなく、メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-810">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="81add-811">要素の数、`lengths`配列は、新しいディメンションの数に一致する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-811">The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>.</span></span> <span data-ttu-id="81add-812">各要素、`lengths`配列は、新しい対応する次元の長さを指定する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-812">Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-813">参照型の要素に初期化されます`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-813">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="81add-814">値型の要素がゼロに初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-814">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="81add-815">このメソッドは O (`n`) 操作、場所`n`のすべての値の積である`lengths`します。</span><span class="sxs-lookup"><span data-stu-id="81add-815">This method is an O(`n`) operation, where `n` is the product of all values in `lengths`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-816">次のコード例は、作成して、多次元を初期化する方法を示しています。<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-816">The following code example shows how to create and initialize a multidimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="elementType" /> <span data-ttu-id="81add-817"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-817">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-818">または</span><span class="sxs-lookup"><span data-stu-id="81add-818">-or-</span></span> 
 <paramref name="lengths" /> <span data-ttu-id="81add-819"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-819">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="elementType" /> <span data-ttu-id="81add-820"> は有効な <see cref="T:System.Type" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-820">is not a valid <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="81add-821">または</span><span class="sxs-lookup"><span data-stu-id="81add-821">-or-</span></span> 
<span data-ttu-id="81add-822"><paramref name="lengths" /> 配列に含まれる要素が 1 つ未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-822">The <paramref name="lengths" /> array contains less than one element.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><paramref name="elementType" /> <span data-ttu-id="81add-823"> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-823">is not supported.</span></span> <span data-ttu-id="81add-824">たとえば、<see cref="T:System.Void" /> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-824">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
<span data-ttu-id="81add-825">または</span><span class="sxs-lookup"><span data-stu-id="81add-825">-or-</span></span> 
 <paramref name="elementType" /> <span data-ttu-id="81add-826"> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="81add-826">is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81add-827"><paramref name="lengths" /> 内の値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-827">Any value in <paramref name="lengths" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, params long[] lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int64[] lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int64[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, ParamArray lengths As Long()) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, ... cli::array &lt;long&gt; ^ lengths);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * int64[] -&gt; Array" Usage="System.Array.CreateInstance (elementType, lengths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="lengths" Type="System.Int64[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="81add-828">作成する <see cref="T:System.Array" /> の <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-828">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="lengths"><span data-ttu-id="81add-829">作成する <see cref="T:System.Array" /> の各次元のサイズを表す 64 ビット整数の配列。</span><span class="sxs-lookup"><span data-stu-id="81add-829">An array of 64-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.</span></span> <span data-ttu-id="81add-830">配列内の各整数はゼロから <see cref="F:System.Int32.MaxValue" /> までの値であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="81add-830">Each integer in the array must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</span></span></param>
        <summary><span data-ttu-id="81add-831"><see cref="T:System.Array" /> と次元の長さを指定して、0 から始まるインデックス番号を持つ多次元の <see cref="T:System.Type" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-831">Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</span></span> <span data-ttu-id="81add-832">次元の長さは、64 ビット整数の配列で指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-832">The dimension lengths are specified in an array of 64-bit integers.</span></span></summary>
        <returns><span data-ttu-id="81add-833">各次元が指定した長さで、インデックス番号が 0 から始まる、指定した <see cref="T:System.Array" /> の新しい多次元 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-833">A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-834">ほとんどのクラスとは異なり<xref:System.Array>提供、<xref:System.Array.CreateInstance%2A>の遅延バインディング アクセスを許可するように、パブリック コンス トラクターではなく、メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-834">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="81add-835">要素の数、`lengths`配列は、新しいディメンションの数に一致する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-835">The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>.</span></span> <span data-ttu-id="81add-836">各要素、`lengths`配列は、新しい対応する次元の長さを指定する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-836">Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-837">参照型の要素に初期化されます`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-837">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="81add-838">値型の要素がゼロに初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-838">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="81add-839">このメソッドは O (`n`) 操作、場所`n`のすべての値の積である`lengths`します。</span><span class="sxs-lookup"><span data-stu-id="81add-839">This method is an O(`n`) operation, where `n` is the product of all values in `lengths`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-840">次のコード例は、作成して、多次元を初期化する方法を示しています。<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-840">The following code example shows how to create and initialize a multidimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="elementType" /> <span data-ttu-id="81add-841"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-841">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-842">または</span><span class="sxs-lookup"><span data-stu-id="81add-842">-or-</span></span> 
 <paramref name="lengths" /> <span data-ttu-id="81add-843"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-843">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="elementType" /> <span data-ttu-id="81add-844"> は有効な <see cref="T:System.Type" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-844">is not a valid <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="81add-845">または</span><span class="sxs-lookup"><span data-stu-id="81add-845">-or-</span></span> 
<span data-ttu-id="81add-846"><paramref name="lengths" /> 配列に含まれる要素が 1 つ未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-846">The <paramref name="lengths" /> array contains less than one element.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><paramref name="elementType" /> <span data-ttu-id="81add-847"> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-847">is not supported.</span></span> <span data-ttu-id="81add-848">たとえば、<see cref="T:System.Void" /> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-848">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
<span data-ttu-id="81add-849">または</span><span class="sxs-lookup"><span data-stu-id="81add-849">-or-</span></span> 
 <paramref name="elementType" /> <span data-ttu-id="81add-850"> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="81add-850">is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81add-851"><paramref name="lengths" /> 内のいずれかの値が 0 未満の値か、<see cref="F:System.Int32.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="81add-851">Any value in <paramref name="lengths" /> is less than zero or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, int length1, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32 length1, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, length1 As Integer, length2 As Integer) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, int length1, int length2);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * int * int -&gt; Array" Usage="System.Array.CreateInstance (elementType, length1, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length1" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length2" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="81add-852">作成する <see cref="T:System.Array" /> の <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-852">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length1"><span data-ttu-id="81add-853">作成する <see cref="T:System.Array" /> の最初の次元のサイズ。</span><span class="sxs-lookup"><span data-stu-id="81add-853">The size of the first dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length2"><span data-ttu-id="81add-854">作成する <see cref="T:System.Array" /> の 2 番目の次元のサイズ。</span><span class="sxs-lookup"><span data-stu-id="81add-854">The size of the second dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="81add-855"><see cref="T:System.Type" /> と次元の長さを指定して、0 から始まるインデックス番号を持つ 2 次元の <see cref="T:System.Array" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-855">Creates a two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</span></span></summary>
        <returns><span data-ttu-id="81add-856">指定した <see cref="T:System.Type" /> の、次元ごとに指定した長さの、0 から始まるインデックス番号を持つ新しい 2 次元の <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-856">A new two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-857">ほとんどのクラスとは異なり<xref:System.Array>提供、<xref:System.Array.CreateInstance%2A>の遅延バインディング アクセスを許可するように、パブリック コンス トラクターではなく、メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-857">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="81add-858">参照型の要素に初期化されます`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-858">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="81add-859">値型の要素がゼロに初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-859">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="81add-860">このメソッドは O (`n`) 操作、`n`の製品は、`length1`と`length2`します。</span><span class="sxs-lookup"><span data-stu-id="81add-860">This method is an O(`n`) operation, where `n` is the product of `length1` and `length2`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-861">次のコード例は、作成し、2 次元を初期化する方法を示しています。<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-861">The following code example shows how to create and initialize a two-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="elementType" /> <span data-ttu-id="81add-862"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-862">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="elementType" /> <span data-ttu-id="81add-863"> は有効な <see cref="T:System.Type" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-863">is not a valid <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><paramref name="elementType" /> <span data-ttu-id="81add-864"> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-864">is not supported.</span></span> <span data-ttu-id="81add-865">たとえば、<see cref="T:System.Void" /> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-865">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
<span data-ttu-id="81add-866">または</span><span class="sxs-lookup"><span data-stu-id="81add-866">-or-</span></span> 
 <paramref name="elementType" /> <span data-ttu-id="81add-867"> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="81add-867">is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length1" /> <span data-ttu-id="81add-868"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-868">is less than zero.</span></span>  
  
<span data-ttu-id="81add-869">または</span><span class="sxs-lookup"><span data-stu-id="81add-869">-or-</span></span> 
 <paramref name="length2" /> <span data-ttu-id="81add-870"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-870">is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, int[] lengths, int[] lowerBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32[] lengths, int32[] lowerBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, lengths As Integer(), lowerBounds As Integer()) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, cli::array &lt;int&gt; ^ lengths, cli::array &lt;int&gt; ^ lowerBounds);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * int[] * int[] -&gt; Array" Usage="System.Array.CreateInstance (elementType, lengths, lowerBounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="lengths" Type="System.Int32[]" />
        <Parameter Name="lowerBounds" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="81add-871">作成する <see cref="T:System.Array" /> の <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-871">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="lengths"><span data-ttu-id="81add-872">作成する <see cref="T:System.Array" /> の各次元のサイズを格納する 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-872">A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="lowerBounds"><span data-ttu-id="81add-873">作成する <see cref="T:System.Array" /> の各次元の下限 (開始インデックス) を格納する 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-873">A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="81add-874">指定した <see cref="T:System.Type" /> と次元の長さの、指定した下限を持つ多次元の <see cref="T:System.Array" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-874">Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with the specified lower bounds.</span></span></summary>
        <returns><span data-ttu-id="81add-875">次元ごとに指定した長さと下限を持つ、指定した <see cref="T:System.Type" /> の新しい多次元の <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-875">A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length and lower bound for each dimension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-876">ほとんどのクラスとは異なり<xref:System.Array>提供、<xref:System.Array.CreateInstance%2A>の遅延バインディング アクセスを許可するように、パブリック コンス トラクターではなく、メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-876">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="81add-877">`lengths`と`lowerBounds`配列は同じ数の要素をいる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-877">The `lengths` and `lowerBounds` arrays must have the same number of elements.</span></span> <span data-ttu-id="81add-878">要素の数、`lengths`配列は、新しいディメンションの数に一致する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-878">The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-879">各要素、`lengths`配列は、新しい対応する次元の長さを指定する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-879">Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-880">各要素、`lowerBounds`配列は、新しい対応する次元の下限の境界を指定する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-880">Each element of the `lowerBounds` array must specify the lower bound of the corresponding dimension in the new <xref:System.Array>.</span></span> <span data-ttu-id="81add-881">一般に、.NET Framework クラス ライブラリと多くのプログラミング言語は、0 以外の下限を処理しません。</span><span class="sxs-lookup"><span data-stu-id="81add-881">Generally, the .NET Framework class library and many programming languages do not handle nonzero lower bounds.</span></span>  
  
 <span data-ttu-id="81add-882">参照型の要素に初期化されます`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-882">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="81add-883">値型の要素がゼロに初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-883">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="81add-884">このメソッドは O (`n`) 操作、場所`n`のすべての値の積である`lengths`します。</span><span class="sxs-lookup"><span data-stu-id="81add-884">This method is an O(`n`) operation, where `n` is the product of all values in `lengths`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-885">次のコード例は、作成して、多次元を初期化する方法を示しています。<xref:System.Array>下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-885">The following code example shows how to create and initialize a multidimensional <xref:System.Array> with specified lower bounds.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance4 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance4 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="elementType" /> <span data-ttu-id="81add-886"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-886">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-887">または</span><span class="sxs-lookup"><span data-stu-id="81add-887">-or-</span></span> 
 <paramref name="lengths" /> <span data-ttu-id="81add-888"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-888">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-889">または</span><span class="sxs-lookup"><span data-stu-id="81add-889">-or-</span></span> 
 <paramref name="lowerBounds" /> <span data-ttu-id="81add-890"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-890">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="elementType" /> <span data-ttu-id="81add-891"> は有効な <see cref="T:System.Type" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-891">is not a valid <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="81add-892">または</span><span class="sxs-lookup"><span data-stu-id="81add-892">-or-</span></span> 
<span data-ttu-id="81add-893"><paramref name="lengths" /> 配列に含まれる要素が 1 つ未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-893">The <paramref name="lengths" /> array contains less than one element.</span></span>  
  
<span data-ttu-id="81add-894">または</span><span class="sxs-lookup"><span data-stu-id="81add-894">-or-</span></span> 
<span data-ttu-id="81add-895"><paramref name="lengths" /> と <paramref name="lowerBounds" /> の配列に含まれている要素の数が異なります。</span><span class="sxs-lookup"><span data-stu-id="81add-895">The <paramref name="lengths" /> and <paramref name="lowerBounds" /> arrays do not contain the same number of elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><paramref name="elementType" /> <span data-ttu-id="81add-896"> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-896">is not supported.</span></span> <span data-ttu-id="81add-897">たとえば、<see cref="T:System.Void" /> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-897">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
<span data-ttu-id="81add-898">または</span><span class="sxs-lookup"><span data-stu-id="81add-898">-or-</span></span> 
 <paramref name="elementType" /> <span data-ttu-id="81add-899"> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="81add-899">is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81add-900"><paramref name="lengths" /> 内の値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-900">Any value in <paramref name="lengths" /> is less than zero.</span></span>  
  
<span data-ttu-id="81add-901">または</span><span class="sxs-lookup"><span data-stu-id="81add-901">-or-</span></span> 
<span data-ttu-id="81add-902"><paramref name="lowerBounds" /> 内に非常に大きな値があり、ディメンションの下限の境界と長さの合計が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-902">Any value in <paramref name="lowerBounds" /> is very large, such that the sum of a dimension's lower bound and length is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, int length1, int length2, int length3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32 length1, int32 length2, int32 length3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, length1 As Integer, length2 As Integer, length3 As Integer) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, int length1, int length2, int length3);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * int * int * int -&gt; Array" Usage="System.Array.CreateInstance (elementType, length1, length2, length3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length1" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length2" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length3" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="81add-903">作成する <see cref="T:System.Array" /> の <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-903">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length1"><span data-ttu-id="81add-904">作成する <see cref="T:System.Array" /> の最初の次元のサイズ。</span><span class="sxs-lookup"><span data-stu-id="81add-904">The size of the first dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length2"><span data-ttu-id="81add-905">作成する <see cref="T:System.Array" /> の 2 番目の次元のサイズ。</span><span class="sxs-lookup"><span data-stu-id="81add-905">The size of the second dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length3"><span data-ttu-id="81add-906">作成する <see cref="T:System.Array" /> の 3 番目の次元のサイズ。</span><span class="sxs-lookup"><span data-stu-id="81add-906">The size of the third dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="81add-907"><see cref="T:System.Array" /> と次元の長さを指定して、0 から始まるインデックス番号を持つ 3 次元の <see cref="T:System.Type" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-907">Creates a three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</span></span></summary>
        <returns><span data-ttu-id="81add-908">指定した <see cref="T:System.Array" /> の、次元ごとに指定した長さの、0 から始まるインデックス番号を持つ新しい 3 次元の <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="81add-908">A new three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-909">ほとんどのクラスとは異なり<xref:System.Array>提供、<xref:System.Array.CreateInstance%2A>の遅延バインディング アクセスを許可するように、パブリック コンス トラクターではなく、メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-909">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="81add-910">参照型の要素に初期化されます`null`します。</span><span class="sxs-lookup"><span data-stu-id="81add-910">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="81add-911">値型の要素がゼロに初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-911">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="81add-912">このメソッドは O (`n`) 操作、場所`n`の製品は、 `length1`、 `length2`、および`length3`します。</span><span class="sxs-lookup"><span data-stu-id="81add-912">This method is an O(`n`) operation, where `n` is the product of `length1`, `length2`, and `length3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-913">次のコード例は、作成し、3 次元を初期化する方法を示しています。<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-913">The following code example shows how to create and initialize a three-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="elementType" /> <span data-ttu-id="81add-914"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-914">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="elementType" /> <span data-ttu-id="81add-915"> は有効な <see cref="T:System.Type" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-915">is not a valid <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><paramref name="elementType" /> <span data-ttu-id="81add-916"> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-916">is not supported.</span></span> <span data-ttu-id="81add-917">たとえば、<see cref="T:System.Void" /> はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-917">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
<span data-ttu-id="81add-918">または</span><span class="sxs-lookup"><span data-stu-id="81add-918">-or-</span></span> 
 <paramref name="elementType" /> <span data-ttu-id="81add-919"> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="81add-919">is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length1" /> <span data-ttu-id="81add-920"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-920">is less than zero.</span></span>  
  
<span data-ttu-id="81add-921">または</span><span class="sxs-lookup"><span data-stu-id="81add-921">-or-</span></span> 
 <paramref name="length2" /> <span data-ttu-id="81add-922"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-922">is less than zero.</span></span>  
  
<span data-ttu-id="81add-923">または</span><span class="sxs-lookup"><span data-stu-id="81add-923">-or-</span></span> 
 <paramref name="length3" /> <span data-ttu-id="81add-924"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-924">is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] Empty&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] Empty&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty(Of T) () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static cli::array &lt;T&gt; ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; 'T[]" Usage="System.Array.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-925">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-925">The type of the elements of the array.</span></span></typeparam>
        <summary><span data-ttu-id="81add-926">空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-926">Returns an empty array.</span></span></summary>
        <returns><span data-ttu-id="81add-927">空の配列。</span><span class="sxs-lookup"><span data-stu-id="81add-927">An empty array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Exists&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists(Of T) (array As T(), match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool Exists(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member Exists : 'T[] * Predicate&lt;'T&gt; -&gt; bool" Usage="System.Array.Exists (array, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-928">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-928">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-929">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-929">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-930">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-930">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="81add-931">指定された配列に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="81add-931">Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="81add-932">指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<paramref name="array" /> に存在する場合は 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="81add-932">if <paramref name="array" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-933"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-933">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-934">要素`array`に個別に渡される、<xref:System.Predicate%601>との一致が見つかったときに、処理は停止されます。</span><span class="sxs-lookup"><span data-stu-id="81add-934">The elements of `array` are individually passed to the <xref:System.Predicate%601>, and processing is stopped when a match is found.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-935">C# および Visual Basic の場合でない作成に必要な<xref:System.Predicate%601>明示的に委任します。</span><span class="sxs-lookup"><span data-stu-id="81add-935">In C# and Visual Basic, it is not necessary to create the <xref:System.Predicate%601> delegate explicitly.</span></span> <span data-ttu-id="81add-936">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-936">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-937">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-937">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-938">次の例についての一致条件を指定する、<xref:System.Array.Exists%2A>ラムダ式を使用して、地球が特定の文字で始まるかどうか、または指定された配列で、地球が見つかったかどうかをチェックするメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-938">The following example specifies the match conditions for the <xref:System.Array.Exists%2A> method using lambda expressions to check whether a planet starts with a given letter or whether the planet is found on the given array.</span></span>  
  
 [!code-csharp[System.Array.Exists#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists3.cs#3)]
 [!code-vb[System.Array.Exists#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists3.vb#3)]  
  
 <span data-ttu-id="81add-939">次の例では、<xref:System.Array.Exists%2A>メソッドを文字列配列に任意の名前が指定した文字で始まるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="81add-939">The following example uses the <xref:System.Array.Exists%2A> method to indicate whether any names in a string array begin with a specified character.</span></span> <span data-ttu-id="81add-940">例では、インスタンス化、`StringSearcher`そのクラス コンス トラクターを検索する文字列を渡すことによってオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-940">The example instantiates a `StringSearcher` object by passing the string to search for to its class constructor.</span></span> <span data-ttu-id="81add-941">`StringSearcher.StartsWith`メソッドと同じシグネチャを持つ、<xref:System.Predicate%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="81add-941">The `StringSearcher.StartsWith` method has same signature as the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="81add-942">ときに、<xref:System.Array.Exists%2A>メソッドが呼び出されると、返されるまで、配列の各メンバーがデリゲートに渡される`true`または配列内のすべての要素を反復処理します。</span><span class="sxs-lookup"><span data-stu-id="81add-942">When the <xref:System.Array.Exists%2A> method is called, each member of the array is passed to the delegate until it returns `true` or iterates all the elements in the array.</span></span>  
  
 [!code-csharp[System.Array.Exists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists1.cs#1)]
 [!code-vb[System.Array.Exists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists1.vb#1)]  
  
 <span data-ttu-id="81add-943">ことができますもラムダ式を使用ではなく、デリゲートのシグネチャを持つ対応するメソッドを明示的に定義します。</span><span class="sxs-lookup"><span data-stu-id="81add-943">You can also use a lambda expression rather than explicitly define a method whose signature corresponds to that of the delegate.</span></span> <span data-ttu-id="81add-944">次の例は、`StringSearcher`クラスとその`StartsWith`メソッド、ラムダ式を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-944">The following example replaces the `StringSearcher` class and its `StartsWith` method with a lambda expression.</span></span>  
  
 [!code-csharp[System.Array.Exists#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists2.cs#2)]
 [!code-vb[System.Array.Exists#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-945"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-945">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-946">または</span><span class="sxs-lookup"><span data-stu-id="81add-946">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-947"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-947">is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="T:System.Predicate`1" />
        <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="81add-948">ラムダ式 (C# プログラミング ガイド)</span><span class="sxs-lookup"><span data-stu-id="81add-948">Lambda Expressions (C# Programming Guide)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="81add-949">ラムダ式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="81add-949">Lambda Expressions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fill&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Fill&lt;T&gt; (T[] array, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fill&lt;T&gt;(!!T[] array, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Fill``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fill(Of T) (array As T(), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Fill(cli::array &lt;T&gt; ^ array, T value);" />
      <MemberSignature Language="F#" Value="static member Fill : 'T[] * 'T -&gt; unit" Usage="System.Array.Fill (array, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Fill&lt;T&gt; (T[] array, T value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fill&lt;T&gt;(!!T[] array, !!T value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fill(Of T) (array As T(), value As T, startIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Fill(cli::array &lt;T&gt; ^ array, T value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Fill : 'T[] * 'T * int * int -&gt; unit" Usage="System.Array.Fill (array, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <param name="value">To be added.</param>
        <param name="startIndex">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Find&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Find&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Find(Of T) (array As T(), match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Find(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member Find : 'T[] * Predicate&lt;'T&gt; -&gt; 'T" Usage="System.Array.Find (array, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-950">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-950">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-951">検索する 1 次元の配列。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-951">The one-dimensional, zero-based array to search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-952">検索する要素の条件を定義する述語。</span><span class="sxs-lookup"><span data-stu-id="81add-952">The predicate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="81add-953">指定された述語によって定義された条件と一致する要素を検索し、<see cref="T:System.Array" /> 全体の中で最もインデックス番号の小さい要素を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-953">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-954">見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</span><span class="sxs-lookup"><span data-stu-id="81add-954">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-955"><xref:System.Predicate%601> 、メソッドまたはラムダ式を返すデリゲート`true`デリゲートまたはラムダ式で定義された条件に一致することに、オブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-955">The <xref:System.Predicate%601> is a delegate to a method or a lambda expression that returns `true` if the object passed to it matches the conditions defined in the delegate or lambda expression.</span></span>  <span data-ttu-id="81add-956">要素`array`に個別に渡される、<xref:System.Predicate%601>で最初の要素で始まると、最後の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="81add-956">The elements of `array` are individually passed to the <xref:System.Predicate%601>, starting with the first element and ending with the last element.</span></span>  <span data-ttu-id="81add-957">一致が見つかった場合は、処理が停止しました。</span><span class="sxs-lookup"><span data-stu-id="81add-957">Processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="81add-958">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-958">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-959">次の例では、<xref:System.Predicate%601>を持つデリゲート、<xref:System.Array.Find%2A>ジェネリック メソッドの配列を検索する<xref:System.Drawing.Point>構造体。</span><span class="sxs-lookup"><span data-stu-id="81add-959">The following example uses a <xref:System.Predicate%601> delegate with the <xref:System.Array.Find%2A> generic method to search an array of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="81add-960">デリゲートが表すメソッド`ProductGT10`、返します`true`X と Y のフィールドの製品が 100,000 より大きい場合。</span><span class="sxs-lookup"><span data-stu-id="81add-960">The method the delegate represents, `ProductGT10`, returns `true` if the product of the X and Y fields is greater than 100,000.</span></span> <span data-ttu-id="81add-961"><xref:System.Array.Find%2A>メソッドがテスト条件を満たす最初のポイントを返す配列の各要素に対してデリゲートを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="81add-961">The <xref:System.Array.Find%2A> method calls the delegate for each element of the array, returning the first point that meets the test condition.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-962">Visual Basic および C# では、デリゲートを明示的に作成またはジェネリック メソッドの型引数を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="81add-962">Visual Basic and C# users do not have to create the delegate explicitly or specify the type argument of the generic method.</span></span> <span data-ttu-id="81add-963">コンパイラは、指定したメソッドの引数から必要な型を決定します。</span><span class="sxs-lookup"><span data-stu-id="81add-963">The compilers determine the necessary types from the method arguments you supply.</span></span>  
  
 [!code-csharp[System.Array.Find#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.find/cs/source.cs#1)]
 [!code-vb[System.Array.Find#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.find/vb/source.vb#1)]  
  
 <span data-ttu-id="81add-964">必要なシグネチャを持つメソッドを明示的に定義するのではなくをインスタンス化する、<xref:System.Predicate%601>デリゲート、およびデリゲートを渡すこと、<xref:System.Array.Find%2A>メソッド、ラムダ式を使用してよく使用されるは。</span><span class="sxs-lookup"><span data-stu-id="81add-964">Rather than explicitly defining a method with the necessary signature, instantiating a <xref:System.Predicate%601> delegate, and passing the delegate to the <xref:System.Array.Find%2A> method, it is customary to use a lambda expression.</span></span> <span data-ttu-id="81add-965">としてラムダ式を使用する点を除いて、次の例は前のものと同じ、`match`引数。</span><span class="sxs-lookup"><span data-stu-id="81add-965">The following example is identical to the previous one, except that it uses a lambda expression as the `match` argument.</span></span>  
  
 [!code-csharp[System.Array.Find#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.find/cs/lambda.cs#2)]
 [!code-vb[System.Array.Find#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.find/vb/lambda.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-966"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-966">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-967">または</span><span class="sxs-lookup"><span data-stu-id="81add-967">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-968"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-968">is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] FindAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] FindAll&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindAll(Of T) (array As T(), match As Predicate(Of T)) As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static cli::array &lt;T&gt; ^ FindAll(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member FindAll : 'T[] * Predicate&lt;'T&gt; -&gt; 'T[]" Usage="System.Array.FindAll (array, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-969">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-969">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-970">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-970">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-971">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-971">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="81add-972">指定された述語によって定義された条件と一致するすべての要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-972">Retrieves all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="81add-973">見つかった場合は、指定された述語によって定義された条件と一致するすべての要素を格納した <see cref="T:System.Array" />。それ以外の場合は、空の <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-973">An <see cref="T:System.Array" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-974"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-974">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-975">要素`array`に個別に渡される、<xref:System.Predicate%601>条件に一致する要素が返される配列に保存されます。</span><span class="sxs-lookup"><span data-stu-id="81add-975">The elements of `array` are individually passed to the <xref:System.Predicate%601>, and the elements that match the conditions are saved in the returned array.</span></span>  
  
 <span data-ttu-id="81add-976">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-976">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-977">次の例では、0 から 1000 の範囲は値を持つ 50 の乱数の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-977">The following example creates an array of 50 random numbers with values that can range from 0 to 1,000.</span></span> <span data-ttu-id="81add-978">呼び出して、<xref:System.Array.FindAll%2A>を 600 に 300 から値の範囲を返すラムダ式を持つメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-978">It then calls the <xref:System.Array.FindAll%2A> method with a lambda expression that returns the values that range from 300 to 600.</span></span> <span data-ttu-id="81add-979">ラムダ式のという名前のパラメーターが渡されることに注意してください`x`;。 これに渡される個々 の配列のメンバーを表します、<xref:System.Predicate%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-979">Note that the lambda expression is passed a parameter named `x`;  this represents the individual array member that is passed to the <xref:System.Predicate%601>.</span></span> <span data-ttu-id="81add-980">また、ローカル`lBound`と`uBound`変数は、ラムダ式内でアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="81add-980">Also note that the local `lBound` and `uBound` variables are accessible within the lambda expression.</span></span>  
  
 [!code-csharp[System.Array.FindAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.findall/cs/findall.cs#1)]
 [!code-vb[System.Array.FindAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.findall/vb/findall.vb#1)]  
  
 <span data-ttu-id="81add-981">次のコード例に示します、 <xref:System.Array.Find%2A>、 <xref:System.Array.FindLast%2A>、および<xref:System.Array.FindAll%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-981">The following code example demonstrates the <xref:System.Array.Find%2A>, <xref:System.Array.FindLast%2A>, and <xref:System.Array.FindAll%2A> generic methods.</span></span> <span data-ttu-id="81add-982">"Saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含む文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-982">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="81add-983">コード例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。</span><span class="sxs-lookup"><span data-stu-id="81add-983">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="81add-984"><xref:System.Array.Find%2A>ジェネリック メソッドでは、配列を走査の各要素を順番に渡す、最初から、`EndsWithSaurus`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-984">The <xref:System.Array.Find%2A> generic method traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="81add-985">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`true`要素"Amargasaurus"。</span><span class="sxs-lookup"><span data-stu-id="81add-985">The search stops when the `EndsWithSaurus` method returns `true` for the element "Amargasaurus".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-986">C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-986">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-987">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-987">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-988"><xref:System.Array.FindLast%2A>末尾から旧バージョンとの配列を検索するジェネリック メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-988">The <xref:System.Array.FindLast%2A> generic method is used to search the array backward from the end.</span></span> <span data-ttu-id="81add-989">5 番目の位置にある"Dilophosaurus"要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-989">It finds the element "Dilophosaurus" at position 5.</span></span> <span data-ttu-id="81add-990"><xref:System.Array.FindAll%2A>で終わるすべての要素を含む配列を返すジェネリック メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-990">The <xref:System.Array.FindAll%2A> generic method is used to return an array containing all the elements that end in "saurus".</span></span> <span data-ttu-id="81add-991">要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-991">The elements are displayed.</span></span>  
  
 <span data-ttu-id="81add-992">コード例も示しています、<xref:System.Array.Exists%2A>と<xref:System.Array.TrueForAll%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-992">The code example also demonstrates the <xref:System.Array.Exists%2A> and <xref:System.Array.TrueForAll%2A> generic methods.</span></span>  
  
 [!code-cpp[Array_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[Array_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindEtAl/cs/source.cs#1)]
 [!code-vb[Array_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-993"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-993">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-994">または</span><span class="sxs-lookup"><span data-stu-id="81add-994">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-995"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-995">is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-996">指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> またはその一部分を対象に検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-996">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within an <see cref="T:System.Array" /> or a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndex&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindIndex(Of T) (array As T(), match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindIndex(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member FindIndex : 'T[] * Predicate&lt;'T&gt; -&gt; int" Usage="System.Array.FindIndex (array, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-997">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-997">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-998">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-998">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-999">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-999">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="81add-1000"><see cref="T:System.Array" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1000">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-1001"><paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1001">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1002"><xref:System.Array>転送の最初の要素から開始し、最後の要素の終了が検索されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1002">The <xref:System.Array> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="81add-1003"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-1003">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-1004">要素`array`に個別に渡される、<xref:System.Predicate%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1004">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="81add-1005">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1005">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1006">次のコード例は、の 3 つすべてのオーバー ロードを示して、<xref:System.Array.FindIndex%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1006">The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method.</span></span> <span data-ttu-id="81add-1007">"Saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含む文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1007">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="81add-1008">コード例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。</span><span class="sxs-lookup"><span data-stu-id="81add-1008">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="81add-1009"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードは、各要素を順番に渡す、最初から配列を走査、`EndsWithSaurus`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1009">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="81add-1010">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`true`の位置 1 にある要素。</span><span class="sxs-lookup"><span data-stu-id="81add-1010">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1011">C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1011">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-1012">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-1012">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-1013"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 2 から開始し、配列の末尾に継続の配列を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1013">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array.</span></span> <span data-ttu-id="81add-1014">5 番目の位置にある要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1014">It finds the element at position 5.</span></span> <span data-ttu-id="81add-1015">最後に、<xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 2 から 3 つの要素の範囲を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1015">Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2.</span></span> <span data-ttu-id="81add-1016">"Saurus"で終わる範囲に襲わは名前がないために、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1016">It returns -1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]
 [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1017"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1017">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-1018">または</span><span class="sxs-lookup"><span data-stu-id="81add-1018">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-1019"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1019">is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindIndex&lt;T&gt; (T[] array, int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndex&lt;T&gt;(!!T[] array, int32 startIndex, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindIndex(Of T) (array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindIndex(cli::array &lt;T&gt; ^ array, int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member FindIndex : 'T[] * int * Predicate&lt;'T&gt; -&gt; int" Usage="System.Array.FindIndex (array, startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1020">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1020">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1021">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1021">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1022">検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1022">The zero-based starting index of the search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-1023">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1023">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="81add-1024"><see cref="T:System.Array" /> の指定したインデックスから最後の要素までの範囲内で、指定した述語にで定義される条件に一致する要素を検索し、最初に見つかった 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1024">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</span></span></summary>
        <returns><span data-ttu-id="81add-1025"><paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1025">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1026"><xref:System.Array>転送を開始位置として検索`startIndex`と最後の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="81add-1026">The <xref:System.Array> is searched forward starting at `startIndex` and ending at the last element.</span></span>  
  
 <span data-ttu-id="81add-1027"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-1027">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-1028">要素`array`に個別に渡される、<xref:System.Predicate%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1028">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="81add-1029">このメソッドは O (`n`) 操作、`n`から要素の数は、`startIndex`の末尾に`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1029">This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1030">次のコード例は、の 3 つすべてのオーバー ロードを示して、<xref:System.Array.FindIndex%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1030">The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method.</span></span> <span data-ttu-id="81add-1031">"Saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含む文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1031">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="81add-1032">コード例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。</span><span class="sxs-lookup"><span data-stu-id="81add-1032">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="81add-1033"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードは、各要素を順番に渡す、最初から配列を走査、`EndsWithSaurus`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1033">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="81add-1034">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`true`の位置 1 にある要素。</span><span class="sxs-lookup"><span data-stu-id="81add-1034">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1035">C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1035">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-1036">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-1036">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-1037"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 2 から開始し、配列の末尾に継続の配列を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1037">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array.</span></span> <span data-ttu-id="81add-1038">5 番目の位置にある要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1038">It finds the element at position 5.</span></span> <span data-ttu-id="81add-1039">最後に、<xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 2 から 3 つの要素の範囲を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1039">Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2.</span></span> <span data-ttu-id="81add-1040">"Saurus"で終わる範囲に襲わは名前がないために、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1040">It returns -1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]
 [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1041"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1041">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-1042">または</span><span class="sxs-lookup"><span data-stu-id="81add-1042">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-1043"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1043">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1044"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1044">is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindIndex&lt;T&gt; (T[] array, int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndex&lt;T&gt;(!!T[] array, int32 startIndex, int32 count, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindIndex(Of T) (array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindIndex(cli::array &lt;T&gt; ^ array, int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member FindIndex : 'T[] * int * int * Predicate&lt;'T&gt; -&gt; int" Usage="System.Array.FindIndex (array, startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1045">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1045">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1046">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1046">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1047">検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1047">The zero-based starting index of the search.</span></span></param>
        <param name="count"><span data-ttu-id="81add-1048">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1048">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-1049">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1049">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="81add-1050"><see cref="T:System.Array" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1050">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="81add-1051"><paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1051">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1052"><xref:System.Array>転送を開始位置として検索が`startIndex`で終わる`startIndex`plus`count`から 1 を引いた場合`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="81add-1052">The <xref:System.Array> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="81add-1053"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-1053">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-1054">要素`array`に個別に渡される、<xref:System.Predicate%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1054">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="81add-1055">このメソッドは O (`n`) 操作、`n`は`count`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1055">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1056">次のコード例は、の 3 つすべてのオーバー ロードを示して、<xref:System.Array.FindIndex%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1056">The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method.</span></span> <span data-ttu-id="81add-1057">"Saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含む文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1057">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="81add-1058">コード例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。</span><span class="sxs-lookup"><span data-stu-id="81add-1058">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="81add-1059"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードは、各要素を順番に渡す、最初から配列を走査、`EndsWithSaurus`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1059">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="81add-1060">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`true`の位置 1 にある要素。</span><span class="sxs-lookup"><span data-stu-id="81add-1060">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1061">C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1061">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-1062">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-1062">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-1063"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 2 から開始し、配列の末尾に継続の配列を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1063">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array.</span></span> <span data-ttu-id="81add-1064">5 番目の位置にある要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1064">It finds the element at position 5.</span></span> <span data-ttu-id="81add-1065">最後に、<xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 2 から 3 つの要素の範囲を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1065">Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2.</span></span> <span data-ttu-id="81add-1066">"Saurus"で終わる範囲に襲わは名前がないために、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1066">It returns -1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]
 [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1067"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1067">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-1068">または</span><span class="sxs-lookup"><span data-stu-id="81add-1068">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-1069"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1069">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1070"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1070">is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-1071">または</span><span class="sxs-lookup"><span data-stu-id="81add-1071">-or-</span></span> 
 <paramref name="count" /> <span data-ttu-id="81add-1072"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1072">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1073">または</span><span class="sxs-lookup"><span data-stu-id="81add-1073">-or-</span></span> 
 <paramref name="startIndex" /> <span data-ttu-id="81add-1074"> および <paramref name="count" /> によって <paramref name="array" /> 内の有効なセクションが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1074">and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T FindLast&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindLast&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLast(Of T) (array As T(), match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T FindLast(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member FindLast : 'T[] * Predicate&lt;'T&gt; -&gt; 'T" Usage="System.Array.FindLast (array, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1075">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1075">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1076">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1076">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-1077">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1077">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="81add-1078">指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1078">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-1079">見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</span><span class="sxs-lookup"><span data-stu-id="81add-1079">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1080"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-1080">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-1081">要素`array`に個別に渡される、<xref:System.Predicate%601>への移行の旧バージョンと、 <xref:System.Array>、以降の最後の要素では、最初の要素で終わる。</span><span class="sxs-lookup"><span data-stu-id="81add-1081">The elements of `array` are individually passed to the <xref:System.Predicate%601>, moving backward in the <xref:System.Array>, starting with the last element and ending with the first element.</span></span>  <span data-ttu-id="81add-1082">一致が見つかった場合は、処理が停止しました。</span><span class="sxs-lookup"><span data-stu-id="81add-1082">Processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="81add-1083">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1083">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1084">次のコード例に示します、 <xref:System.Array.Find%2A>、 <xref:System.Array.FindLast%2A>、および<xref:System.Array.FindAll%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1084">The following code example demonstrates the <xref:System.Array.Find%2A>, <xref:System.Array.FindLast%2A>, and <xref:System.Array.FindAll%2A> generic methods.</span></span> <span data-ttu-id="81add-1085">"Saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含む文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1085">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="81add-1086">コード例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。</span><span class="sxs-lookup"><span data-stu-id="81add-1086">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="81add-1087"><xref:System.Array.Find%2A>ジェネリック メソッドでは、配列を走査の各要素を順番に渡す、最初から、`EndsWithSaurus`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1087">The <xref:System.Array.Find%2A> generic method traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="81add-1088">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`true`要素"Amargasaurus"。</span><span class="sxs-lookup"><span data-stu-id="81add-1088">The search stops when the `EndsWithSaurus` method returns `true` for the element "Amargasaurus".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1089">C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1089">In C# and Visual Basic, it is not necessary to create the`Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-1090">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-1090">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-1091"><xref:System.Array.FindLast%2A>末尾から旧バージョンとの配列を検索するジェネリック メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1091">The <xref:System.Array.FindLast%2A> generic method is used to search the array backward from the end.</span></span> <span data-ttu-id="81add-1092">5 番目の位置にある"Dilophosaurus"要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1092">It finds the element "Dilophosaurus" at position 5.</span></span> <span data-ttu-id="81add-1093"><xref:System.Array.FindAll%2A>で終わるすべての要素を含む配列を返すジェネリック メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1093">The <xref:System.Array.FindAll%2A> generic method is used to return an array containing all the elements that end in "saurus".</span></span> <span data-ttu-id="81add-1094">要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1094">The elements are displayed.</span></span>  
  
 <span data-ttu-id="81add-1095">コード例も示しています、<xref:System.Array.Exists%2A>と<xref:System.Array.TrueForAll%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1095">The code example also demonstrates the <xref:System.Array.Exists%2A> and <xref:System.Array.TrueForAll%2A> generic methods.</span></span>  
  
 [!code-cpp[Array_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[Array_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindEtAl/cs/source.cs#1)]
 [!code-vb[Array_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1096"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1096">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-1097">または</span><span class="sxs-lookup"><span data-stu-id="81add-1097">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-1098"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1098">is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-1099">指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Array" /> またはその一部分を対象に検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1099">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within an <see cref="T:System.Array" /> or a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindLastIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindLastIndex&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLastIndex(Of T) (array As T(), match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindLastIndex(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member FindLastIndex : 'T[] * Predicate&lt;'T&gt; -&gt; int" Usage="System.Array.FindLastIndex (array, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1100">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1100">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1101">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1101">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-1102">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1102">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="81add-1103"><see cref="T:System.Array" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1103">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-1104"><paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1104">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1105"><xref:System.Array>後方の最後の要素から開始し、最初の要素の終了が検索されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1105">The <xref:System.Array> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="81add-1106"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-1106">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-1107">要素`array`に個別に渡される、<xref:System.Predicate%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1107">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="81add-1108">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1108">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1109">次のコード例は、の 3 つすべてのオーバー ロードを示して、<xref:System.Array.FindLastIndex%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1109">The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method.</span></span> <span data-ttu-id="81add-1110">"Saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含む文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1110">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="81add-1111">コード例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。</span><span class="sxs-lookup"><span data-stu-id="81add-1111">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="81add-1112"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードでは、旧バージョンとの配列を走査最後に、各要素を順番に渡すことから、`EndsWithSaurus`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1112">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="81add-1113">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`true`の 5 番目の位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="81add-1113">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1114">C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1114">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-1115">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-1115">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-1116"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 4 から開始し、配列の先頭に後方継続の配列を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1116">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array.</span></span> <span data-ttu-id="81add-1117">位置 1 である要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1117">It finds the element at position 1.</span></span> <span data-ttu-id="81add-1118">最後に、<xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードは 3 つの要素 4 の位置から開始し、逆方向 (つまり、4、3、および 2) の範囲を検索するために使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1118">Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2).</span></span> <span data-ttu-id="81add-1119">"Saurus"で終わる範囲に襲わは名前がないために、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1119">It returns -1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]
 [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1120"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1120">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-1121">または</span><span class="sxs-lookup"><span data-stu-id="81add-1121">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-1122"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1122">is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindLastIndex&lt;T&gt; (T[] array, int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindLastIndex&lt;T&gt;(!!T[] array, int32 startIndex, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLastIndex(Of T) (array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindLastIndex(cli::array &lt;T&gt; ^ array, int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member FindLastIndex : 'T[] * int * Predicate&lt;'T&gt; -&gt; int" Usage="System.Array.FindLastIndex (array, startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1123">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1123">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1124">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1124">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1125">後方検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1125">The zero-based starting index of the backward search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-1126">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1126">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="81add-1127"><see cref="T:System.Array" /> のうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1127">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="81add-1128"><paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1128">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1129"><xref:System.Array>で検索された旧バージョンと開始`startIndex`と最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="81add-1129">The <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="81add-1130"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-1130">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-1131">要素`array`に個別に渡される、<xref:System.Predicate%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1131">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="81add-1132">このメソッドは O (`n`) 操作、`n`の先頭から要素の数は、`array`に`startIndex`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1132">This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1133">次のコード例は、の 3 つすべてのオーバー ロードを示して、<xref:System.Array.FindLastIndex%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1133">The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method.</span></span> <span data-ttu-id="81add-1134">"Saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含む文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1134">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="81add-1135">コード例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。</span><span class="sxs-lookup"><span data-stu-id="81add-1135">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="81add-1136"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードでは、旧バージョンとの配列を走査最後に、各要素を順番に渡すことから、`EndsWithSaurus`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1136">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="81add-1137">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`true`の 5 番目の位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="81add-1137">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1138">C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1138">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-1139">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-1139">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-1140"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 4 から開始し、配列の先頭に後方継続の配列を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1140">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array.</span></span> <span data-ttu-id="81add-1141">位置 1 である要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1141">It finds the element at position 1.</span></span> <span data-ttu-id="81add-1142">最後に、<xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードは 3 つの要素 4 の位置から開始し、逆方向 (つまり、4、3、および 2) の範囲を検索するために使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1142">Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2).</span></span> <span data-ttu-id="81add-1143">"Saurus"で終わる範囲に襲わは名前がないために、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1143">It returns -1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]
 [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1144"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1144">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-1145">または</span><span class="sxs-lookup"><span data-stu-id="81add-1145">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-1146"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1146">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1147"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1147">is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindLastIndex&lt;T&gt; (T[] array, int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindLastIndex&lt;T&gt;(!!T[] array, int32 startIndex, int32 count, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLastIndex(Of T) (array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindLastIndex(cli::array &lt;T&gt; ^ array, int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member FindLastIndex : 'T[] * int * int * Predicate&lt;'T&gt; -&gt; int" Usage="System.Array.FindLastIndex (array, startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1148">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1148">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1149">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1149">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1150">後方検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1150">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="81add-1151">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1151">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="81add-1152">検索する要素の条件を定義する <see cref="T:System.Predicate`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1152">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="81add-1153"><see cref="T:System.Array" /> の指定したインデックスで終わる指定した要素数の範囲内で、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1153">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="81add-1154"><paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1154">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1155"><xref:System.Array>で検索された旧バージョンと開始`startIndex`で終わる`startIndex`マイナス`count`+ 1 場合、`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="81add-1155">The <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="81add-1156"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-1156">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-1157">要素`array`に個別に渡される、<xref:System.Predicate%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1157">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="81add-1158">このメソッドは O (`n`) 操作、`n`は`count`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1158">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1159">次のコード例は、の 3 つすべてのオーバー ロードを示して、<xref:System.Array.FindLastIndex%2A>ジェネリック メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1159">The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method.</span></span> <span data-ttu-id="81add-1160">"Saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含む文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1160">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="81add-1161">コード例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。</span><span class="sxs-lookup"><span data-stu-id="81add-1161">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="81add-1162"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードでは、旧バージョンとの配列を走査最後に、各要素を順番に渡すことから、`EndsWithSaurus`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1162">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="81add-1163">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`true`の 5 番目の位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="81add-1163">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1164">C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1164">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-1165">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-1165">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="81add-1166"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>位置 4 から開始し、配列の先頭に後方継続の配列を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1166">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array.</span></span> <span data-ttu-id="81add-1167">位置 1 である要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1167">It finds the element at position 1.</span></span> <span data-ttu-id="81add-1168">最後に、<xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29>メソッドのオーバー ロードは 3 つの要素 4 の位置から開始し、逆方向 (つまり、4、3、および 2) の範囲を検索するために使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1168">Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2).</span></span> <span data-ttu-id="81add-1169">"Saurus"で終わる範囲に襲わは名前がないために、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1169">It returns -1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]
 [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1170"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1170">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-1171">または</span><span class="sxs-lookup"><span data-stu-id="81add-1171">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-1172"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1172">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1173"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1173">is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-1174">または</span><span class="sxs-lookup"><span data-stu-id="81add-1174">-or-</span></span> 
 <paramref name="count" /> <span data-ttu-id="81add-1175"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1175">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1176">または</span><span class="sxs-lookup"><span data-stu-id="81add-1176">-or-</span></span> 
 <paramref name="startIndex" /> <span data-ttu-id="81add-1177"> および <paramref name="count" /> によって <paramref name="array" /> 内の有効なセクションが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1177">and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;T&gt; (T[] array, Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;T&gt;(!!T[] array, class System.Action`1&lt;!!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.ForEach``1(``0[],System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of T) (array As T(), action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void ForEach(cli::array &lt;T&gt; ^ array, Action&lt;T&gt; ^ action);" />
      <MemberSignature Language="F#" Value="static member ForEach : 'T[] * Action&lt;'T&gt; -&gt; unit" Usage="System.Array.ForEach (array, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="action" Type="System.Action&lt;T&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1178">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1178">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1179">要素に処理を適用する、インデックス番号が 0 から始まる 1 次元の <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1179">The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.</span></span></param>
        <param name="action"><span data-ttu-id="81add-1180"><paramref name="array" /> の各要素に対して実行する <see cref="T:System.Action`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1180">The <see cref="T:System.Action`1" /> to perform on each element of <paramref name="array" />.</span></span></param>
        <summary><span data-ttu-id="81add-1181">指定された配列内の各要素に対して、指定された処理を実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-1181">Performs the specified action on each element of the specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1182"><xref:System.Action%601>はオブジェクトの操作を実行するメソッドへのデリゲートが渡されました。</span><span class="sxs-lookup"><span data-stu-id="81add-1182">The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.</span></span>  <span data-ttu-id="81add-1183">要素`array`に個別に渡される、<xref:System.Action%601>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1183">The elements of `array` are individually passed to the <xref:System.Action%601>.</span></span>  
  
 <span data-ttu-id="81add-1184">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1184">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1185">次の例は、使用する方法を示します<xref:System.Array.ForEach%2A>整数の配列の各要素の四角形を表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1185">The following example shows how to use <xref:System.Array.ForEach%2A> to display the squares of each element in an integer array.</span></span>  
  
 [!code-cpp[System.Array.ForEach#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.foreach/cpp/source.cpp#1)]
 [!code-csharp[System.Array.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.foreach/cs/source.cs#1)]
 [!code-vb[System.Array.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.foreach/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1186"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1186">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-1187">または</span><span class="sxs-lookup"><span data-stu-id="81add-1187">-or-</span></span> 
 <paramref name="action" /> <span data-ttu-id="81add-1188"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1188">is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="array.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81add-1189"><see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Array" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1189">Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-1190"><see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1190">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1191">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="81add-1191">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="81add-1192">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="81add-1192">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="81add-1193">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="81add-1193">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="81add-1194">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1194">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="81add-1195">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="81add-1195">Initially, the enumerator is positioned before the first element in the collection.</span></span> <xref:System.Collections.IEnumerator.Reset%2A> <span data-ttu-id="81add-1196">この位置には、列挙子が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1196">also brings the enumerator back to this position.</span></span>  <span data-ttu-id="81add-1197">この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-1197">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="81add-1198">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1198">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <xref:System.Collections.IEnumerator.Current%2A> <span data-ttu-id="81add-1199">いずれかまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1199">returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <xref:System.Collections.IEnumerator.MoveNext%2A> <span data-ttu-id="81add-1200">設定<xref:System.Collections.IEnumerator.Current%2A>次の要素にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1200">sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="81add-1201">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1201">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="81add-1202">この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1202">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="81add-1203">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1203">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="81add-1204"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="81add-1204">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="81add-1205">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="81add-1205">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="81add-1206">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="81add-1206">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="81add-1207">列挙子には、コレクションへの排他アクセスがありません。したがって、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1207">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span>  <span data-ttu-id="81add-1208">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="81add-1208">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="81add-1209">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1209">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="81add-1210">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1210">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1211">次のコード例は、使用する方法を示しています。<xref:System.Array.GetEnumerator%2A>を配列の要素を一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1211">The following code example shows how to use <xref:System.Array.GetEnumerator%2A> to list the elements of an array.</span></span>  
  
 [!code-cpp[System.Array_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetEnumerator/CPP/array_getenumerator.cpp#1)]
 [!code-csharp[System.Array_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetEnumerator/CS/array_getenumerator.cs#1)]
 [!code-vb[System.Array_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetEnumerator/VB/array_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLength">
      <MemberSignature Language="C#" Value="public int GetLength (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetLength(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLength (dimension As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetLength(int dimension);" />
      <MemberSignature Language="F#" Value="member this.GetLength : int -&gt; int" Usage="array.GetLength dimension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension"><span data-ttu-id="81add-1212">長さを指定する <see cref="T:System.Array" /> の 0 から始まる次元。</span><span class="sxs-lookup"><span data-stu-id="81add-1212">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</span></span></param>
        <summary><span data-ttu-id="81add-1213"><see cref="T:System.Array" /> の指定した次元にある要素の数を表す 32 ビット整数を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1213">Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-1214">指定した次元にある要素の数を表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1214">A 32-bit integer that represents the number of elements in the specified dimension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1215">例の<xref:System.Array.GetLength%2A>は`GetLength(0)`の最初の次元の要素の数を返します<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1215">An example of <xref:System.Array.GetLength%2A> is `GetLength(0)`, which returns the number of elements in the first dimension of the <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1216">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1216">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1217">次の例は、使用する方法を示します<xref:System.Array.GetLength%2A>ランクが異なる 2 つの配列の寸法を表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1217">The following example shows how to use <xref:System.Array.GetLength%2A> to display the dimensions of two arrays with different ranks.</span></span>  
  
 [!code-cpp[System.Array.GetLength#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getlength/cpp/source.cpp#1)]
 [!code-csharp[System.Array.GetLength#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getlength/cs/source.cs#1)]
 [!code-vb[System.Array.GetLength#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getlength/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="dimension" /> <span data-ttu-id="81add-1218"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1218">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1219">または</span><span class="sxs-lookup"><span data-stu-id="81add-1219">-or-</span></span> 
 <paramref name="dimension" /> <span data-ttu-id="81add-1220"> は、<see cref="P:System.Array.Rank" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="81add-1220">is equal to or greater than <see cref="P:System.Array.Rank" />.</span></span></exception>
        <altmember cref="P:System.Array.Length" />
        <altmember cref="M:System.Array.GetLongLength(System.Int32)" />
        <altmember cref="P:System.Collections.ICollection.Count" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetLongLength">
      <MemberSignature Language="C#" Value="public long GetLongLength (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetLongLength(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetLongLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLongLength (dimension As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetLongLength(int dimension);" />
      <MemberSignature Language="F#" Value="member this.GetLongLength : int -&gt; int64" Usage="array.GetLongLength dimension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dimension"><span data-ttu-id="81add-1221">長さを指定する <see cref="T:System.Array" /> の 0 から始まる次元。</span><span class="sxs-lookup"><span data-stu-id="81add-1221">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</span></span></param>
        <summary><span data-ttu-id="81add-1222"><see cref="T:System.Array" /> の指定した次元にある要素の数を表す 64 ビット整数を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1222">Gets a 64-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-1223">指定した次元にある要素の数を表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1223">A 64-bit integer that represents the number of elements in the specified dimension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1224">例の<xref:System.Array.GetLongLength%2A>は`GetLongLength(0)`の最初の次元の要素の数を返します<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1224">An example of <xref:System.Array.GetLongLength%2A> is `GetLongLength(0)`, which returns the number of elements in the first dimension of the <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1225">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1225">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="dimension" /> <span data-ttu-id="81add-1226"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1226">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1227">または</span><span class="sxs-lookup"><span data-stu-id="81add-1227">-or-</span></span> 
 <paramref name="dimension" /> <span data-ttu-id="81add-1228"> は、<see cref="P:System.Array.Rank" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="81add-1228">is equal to or greater than <see cref="P:System.Array.Rank" />.</span></span></exception>
        <altmember cref="P:System.Array.Length" />
        <altmember cref="M:System.Array.GetLength(System.Int32)" />
        <altmember cref="P:System.Collections.ICollection.Count" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetLowerBound">
      <MemberSignature Language="C#" Value="public int GetLowerBound (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetLowerBound(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetLowerBound(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLowerBound (dimension As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetLowerBound(int dimension);" />
      <MemberSignature Language="F#" Value="member this.GetLowerBound : int -&gt; int" Usage="array.GetLowerBound dimension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension"><span data-ttu-id="81add-1229">開始インデックスを指定する配列の 0 から始まる次元。</span><span class="sxs-lookup"><span data-stu-id="81add-1229">A zero-based dimension of the array whose starting index needs to be determined.</span></span></param>
        <summary><span data-ttu-id="81add-1230">配列内で指定した次元の、最初の要素のインデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1230">Gets the index of the first element of the specified dimension in the array.</span></span></summary>
        <returns><span data-ttu-id="81add-1231">配列内で指定した次元の、最初の要素のインデックスです。</span><span class="sxs-lookup"><span data-stu-id="81add-1231">The index of the first element of the specified dimension in the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetLowerBound(0)` <span data-ttu-id="81add-1232">配列の最初の次元の開始インデックスを返しますと`GetLowerBound(Rank - 1)`配列の最後の次元の開始インデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1232">returns the starting index of the first dimension of the array, and `GetLowerBound(Rank - 1)` returns the starting index of the last dimension of the array.</span></span>  
  
 <span data-ttu-id="81add-1233"><xref:System.Array.GetLowerBound%2A>メソッドは、配列が空の場合でも常に、配列の下限のインデックスを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1233">The <xref:System.Array.GetLowerBound%2A> method always returns a value that indicates the index of the lower bound of the array, even if the array is empty.</span></span>  
  
 <span data-ttu-id="81add-1234">.NET Framework のほとんどの配列は 0 から始まりますが (は、<xref:System.Array.GetLowerBound%2A>配列の各次元のゼロが返される)、.NET Framework では、0 から始まるないアレイをサポートします。</span><span class="sxs-lookup"><span data-stu-id="81add-1234">Note that, although most arrays in the .NET Framework are zero-based (that is, the <xref:System.Array.GetLowerBound%2A> method returns zero for each dimension of an array), the .NET Framework does support arrays that are not zero-based.</span></span> <span data-ttu-id="81add-1235">このような配列を作成できます、<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29>メソッドをおよびアンマネージ コードから返されることもできます。</span><span class="sxs-lookup"><span data-stu-id="81add-1235">Such arrays can be created with the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29> method, and can also be returned from unmanaged code.</span></span>  
  
 <span data-ttu-id="81add-1236">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1236">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1237">次の例では、<xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドを 1 次元、2 次元配列の境界を表示し、配列要素の値を表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1237">The following example uses the <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.</span></span>  
  
 [!code-cpp[System.Array.GetUpperBound#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getupperbound/cpp/source.cpp#1)]
 [!code-csharp[System.Array.GetUpperBound#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getupperbound/cs/source.cs#1)]
 [!code-vb[System.Array.GetUpperBound#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getupperbound/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="dimension" /> <span data-ttu-id="81add-1238"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1238">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1239">または</span><span class="sxs-lookup"><span data-stu-id="81add-1239">-or-</span></span> 
 <paramref name="dimension" /> <span data-ttu-id="81add-1240"> は、<see cref="P:System.Array.Rank" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="81add-1240">is equal to or greater than <see cref="P:System.Array.Rank" />.</span></span></exception>
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetUpperBound">
      <MemberSignature Language="C#" Value="public int GetUpperBound (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetUpperBound(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetUpperBound(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpperBound (dimension As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetUpperBound(int dimension);" />
      <MemberSignature Language="F#" Value="member this.GetUpperBound : int -&gt; int" Usage="array.GetUpperBound dimension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension"><span data-ttu-id="81add-1241">上限を指定する配列の 0 から始まる次元。</span><span class="sxs-lookup"><span data-stu-id="81add-1241">A zero-based dimension of the array whose upper bound needs to be determined.</span></span></param>
        <summary><span data-ttu-id="81add-1242">配列内で指定した次元の、最後の要素のインデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1242">Gets the index of the last element of the specified dimension in the array.</span></span></summary>
        <returns><span data-ttu-id="81add-1243">配列内で指定した次元の最後の要素のインデックス、または指定した次元が空の場合は -1 です。</span><span class="sxs-lookup"><span data-stu-id="81add-1243">The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetUpperBound(0)` <span data-ttu-id="81add-1244">配列の最初の次元の最後のインデックスを返しますと`GetUpperBound(Rank - 1)`配列の最後の次元の最後のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1244">returns the last index in the first dimension of the array, and `GetUpperBound(Rank - 1)` returns the last index of the last dimension of the array.</span></span>  
  
 <span data-ttu-id="81add-1245">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1245">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1246">次の例では、<xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドを 1 次元、2 次元配列の境界を表示し、配列要素の値を表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1246">The following example uses the <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.</span></span>  
  
 [!code-cpp[System.Array.GetUpperBound#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getupperbound/cpp/source.cpp#1)]
 [!code-csharp[System.Array.GetUpperBound#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getupperbound/cs/source.cs#1)]
 [!code-vb[System.Array.GetUpperBound#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getupperbound/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="dimension" /> <span data-ttu-id="81add-1247"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1247">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1248">または</span><span class="sxs-lookup"><span data-stu-id="81add-1248">-or-</span></span> 
 <paramref name="dimension" /> <span data-ttu-id="81add-1249"> は、<see cref="P:System.Array.Rank" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="81add-1249">is equal to or greater than <see cref="P:System.Array.Rank" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-1250">現在の <see cref="T:System.Array" /> 内の指定した要素の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1250">Gets the value of the specified element in the current <see cref="T:System.Array" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(int index);" />
      <MemberSignature Language="F#" Value="member this.GetValue : int -&gt; obj" Usage="array.GetValue index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="81add-1251">取得する <see cref="T:System.Array" /> 要素の位置を表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1251">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="81add-1252">1 次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1252">Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1253">インデックスは 32 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1253">The index is specified as a 32-bit integer.</span></span></summary>
        <returns><span data-ttu-id="81add-1254">1 次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</span><span class="sxs-lookup"><span data-stu-id="81add-1254">The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1255"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドを調べるかどうかの値`index`が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1255">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1256">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1256">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1257">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1257">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1258">現在の <see cref="T:System.Array" /> が完全な 1 次元ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1258">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-1259"> が、現在の <see cref="T:System.Array" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1259">is outside the range of valid indexes for the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (params int[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int32[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (ParamArray indices As Integer()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(... cli::array &lt;int&gt; ^ indices);" />
      <MemberSignature Language="F#" Value="member this.GetValue : int[] -&gt; obj" Usage="array.GetValue indices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indices"><span data-ttu-id="81add-1260">取得する <see cref="T:System.Array" /> 要素の位置を指定するインデックスを表す 32 ビット整数の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-1260">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="81add-1261">多次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1261">Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1262">インデックスは 32 ビット整数値の配列として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1262">The indexes are specified as an array of 32-bit integers.</span></span></summary>
        <returns><span data-ttu-id="81add-1263">多次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</span><span class="sxs-lookup"><span data-stu-id="81add-1263">The value at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1264">要素数`indices`の次元数と同じにする必要があります、<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1264">The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>.</span></span> <span data-ttu-id="81add-1265">すべての要素、`indices`配列が多次元で、目的の要素の位置をまとめて指定する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1265">All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1266"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1266">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1267">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1267">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1268">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1268">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="indices" /> <span data-ttu-id="81add-1269"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1269">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1270">現在の <see cref="T:System.Array" /> の次元数が、<paramref name="indices" /> 内の要素数と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1270">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="81add-1271"><paramref name="indices" /> 内のいずれかの要素が、現在の <see cref="T:System.Array" /> 内の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1271">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (long index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int64 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(long index);" />
      <MemberSignature Language="F#" Value="member this.GetValue : int64 -&gt; obj" Usage="array.GetValue index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="81add-1272">取得する <see cref="T:System.Array" /> 要素の位置を表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1272">A 64-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="81add-1273">1 次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1273">Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1274">インデックスは 64 ビット整数として指定されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1274">The index is specified as a 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="81add-1275">1 次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</span><span class="sxs-lookup"><span data-stu-id="81add-1275">The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1276"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドを調べるかどうかの値`index`が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1276">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1277">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1277">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1278">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1278">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1279">現在の <see cref="T:System.Array" /> が完全な 1 次元ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1279">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-1280"> が、現在の <see cref="T:System.Array" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1280">is outside the range of valid indexes for the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (params long[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int64[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int64[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (ParamArray indices As Long()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(... cli::array &lt;long&gt; ^ indices);" />
      <MemberSignature Language="F#" Value="member this.GetValue : int64[] -&gt; obj" Usage="array.GetValue indices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="System.Int64[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indices"><span data-ttu-id="81add-1281">取得する <see cref="T:System.Array" /> 要素の位置を指定するインデックスを表す 64 ビット整数の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-1281">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="81add-1282">多次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1282">Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1283">インデックスは 64 ビット整数値の配列として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1283">The indexes are specified as an array of 64-bit integers.</span></span></summary>
        <returns><span data-ttu-id="81add-1284">多次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</span><span class="sxs-lookup"><span data-stu-id="81add-1284">The value at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1285">要素数`indices`の次元数と同じにする必要があります、<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1285">The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>.</span></span> <span data-ttu-id="81add-1286">すべての要素、`indices`配列が多次元で、目的の要素の位置をまとめて指定する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1286">All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1287"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1287">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1288">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1288">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1289">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1289">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="indices" /> <span data-ttu-id="81add-1290"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1290">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1291">現在の <see cref="T:System.Array" /> の次元数が、<paramref name="indices" /> 内の要素数と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1291">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81add-1292"><paramref name="indices" /> 内のいずれかの要素が、現在の <see cref="T:System.Array" /> 内の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1292">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (int index1, int index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int32 index1, int32 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index1 As Integer, index2 As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(int index1, int index2);" />
      <MemberSignature Language="F#" Value="member this.GetValue : int * int -&gt; obj" Usage="array.GetValue (index1, index2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index2" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index1"><span data-ttu-id="81add-1293">取得する <see cref="T:System.Array" /> 要素の最初の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1293">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index2"><span data-ttu-id="81add-1294">取得する <see cref="T:System.Array" /> 要素の 2 番目の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1294">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="81add-1295">2 次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1295">Gets the value at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1296">インデックスは 32 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1296">The indexes are specified as 32-bit integers.</span></span></summary>
        <returns><span data-ttu-id="81add-1297">2 次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</span><span class="sxs-lookup"><span data-stu-id="81add-1297">The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1298"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1298">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1299">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1299">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1300">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1300">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1301">現在の <see cref="T:System.Array" /> は正確な 2 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1301">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="81add-1302"><paramref name="index1" /> または <paramref name="index2" /> が、現在の <see cref="T:System.Array" /> の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1302">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (long index1, long index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int64 index1, int64 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index1 As Long, index2 As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(long index1, long index2);" />
      <MemberSignature Language="F#" Value="member this.GetValue : int64 * int64 -&gt; obj" Usage="array.GetValue (index1, index2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index2" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index1"><span data-ttu-id="81add-1303">取得する <see cref="T:System.Array" /> 要素の最初の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1303">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index2"><span data-ttu-id="81add-1304">取得する <see cref="T:System.Array" /> 要素の 2 番目の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1304">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="81add-1305">2 次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1305">Gets the value at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1306">インデックスは 64 ビット整数として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1306">The indexes are specified as 64-bit integers.</span></span></summary>
        <returns><span data-ttu-id="81add-1307">2 次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</span><span class="sxs-lookup"><span data-stu-id="81add-1307">The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1308"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1308">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1309">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1309">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1310">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1310">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1311">現在の <see cref="T:System.Array" /> は正確な 2 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1311">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81add-1312"><paramref name="index1" /> または <paramref name="index2" /> が、現在の <see cref="T:System.Array" /> の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1312">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (int index1, int index2, int index3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int32 index1, int32 index2, int32 index3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index1 As Integer, index2 As Integer, index3 As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(int index1, int index2, int index3);" />
      <MemberSignature Language="F#" Value="member this.GetValue : int * int * int -&gt; obj" Usage="array.GetValue (index1, index2, index3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index2" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index3" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index1"><span data-ttu-id="81add-1313">取得する <see cref="T:System.Array" /> 要素の最初の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1313">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index2"><span data-ttu-id="81add-1314">取得する <see cref="T:System.Array" /> 要素の 2 番目の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1314">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index3"><span data-ttu-id="81add-1315">取得する <see cref="T:System.Array" /> 要素の 3 番目の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1315">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="81add-1316">3 次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1316">Gets the value at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1317">インデックスは 32 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1317">The indexes are specified as 32-bit integers.</span></span></summary>
        <returns><span data-ttu-id="81add-1318">3 次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</span><span class="sxs-lookup"><span data-stu-id="81add-1318">The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1319"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1319">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1320">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1320">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1321">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1321">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1322">現在の <see cref="T:System.Array" /> は正確な 3 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1322">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index1" /> <span data-ttu-id="81add-1323">、<paramref name="index2" />、または <paramref name="index3" /> が、現在の <see cref="T:System.Array" /> の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1323">or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (long index1, long index2, long index3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int64 index1, int64 index2, int64 index3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index1 As Long, index2 As Long, index3 As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(long index1, long index2, long index3);" />
      <MemberSignature Language="F#" Value="member this.GetValue : int64 * int64 * int64 -&gt; obj" Usage="array.GetValue (index1, index2, index3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index2" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index3" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index1"><span data-ttu-id="81add-1324">取得する <see cref="T:System.Array" /> 要素の最初の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1324">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index2"><span data-ttu-id="81add-1325">取得する <see cref="T:System.Array" /> 要素の 2 番目の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1325">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index3"><span data-ttu-id="81add-1326">取得する <see cref="T:System.Array" /> 要素の 3 番目の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1326">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="81add-1327">3 次元 <see cref="T:System.Array" /> 内の指定した位置にある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1327">Gets the value at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1328">インデックスは 64 ビット整数として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1328">The indexes are specified as 64-bit integers.</span></span></summary>
        <returns><span data-ttu-id="81add-1329">3 次元 <see cref="T:System.Array" /> 内の指定した位置にある値。</span><span class="sxs-lookup"><span data-stu-id="81add-1329">The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1330"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1330">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1331">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1331">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1332">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1332">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1333">現在の <see cref="T:System.Array" /> は正確な 3 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1333">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index1" /> <span data-ttu-id="81add-1334">、<paramref name="index2" />、または <paramref name="index3" /> が、現在の <see cref="T:System.Array" /> の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1334">or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-1335">指定されたオブジェクトを 1 次元の配列または配列の要素範囲内で検索し、最初に見つかったオブジェクトのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1335">Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or in a range of elements in the array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (Array array, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(class System.Array array, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf(System.Array,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int IndexOf(Array ^ array, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : Array * obj -&gt; int" Usage="System.Array.IndexOf (array, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1336">検索する 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-1336">The one-dimensional array to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1337"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1337">The object to locate in <paramref name="array" />.</span></span></param>
        <summary><span data-ttu-id="81add-1338">指定したオブジェクトを検索し、1 次元配列でそのオブジェクトが最初に見つかった位置のインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1338">Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</span></span></summary>
        <returns><span data-ttu-id="81add-1339"><paramref name="array" /> で <paramref name="value" /> が見つかった場合は、最初に見つかった位置のインデックス。それ以外の場合は、配列の下限 - 1。</span><span class="sxs-lookup"><span data-stu-id="81add-1339">The index of the first occurrence of <paramref name="value" /> in <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1340">このメソッドの 1 次元配列のすべての要素を検索する`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1340">This method searches all the elements of a one-dimensional array for `value`.</span></span> <span data-ttu-id="81add-1341">確認するかどうか`value`内に存在する`array`、メソッドを呼び出して各要素の等値比較を実行する`Equals`メソッドの一致が見つかるまでです。</span><span class="sxs-lookup"><span data-stu-id="81add-1341">To determine whether `value` exists in `array`, the method performs an equality comparison by calling each element's `Equals` method until it finds a match.</span></span> <span data-ttu-id="81add-1342">つまり、要素をオーバーライドする場合、<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>メソッド、そのオーバーライドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1342">This means that if the element overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, that override is called.</span></span>  
  
 <span data-ttu-id="81add-1343">ほとんどの配列の下限を 0 ため、このメソッドは、-1 返します通常を行う場合`value`が見つからない。</span><span class="sxs-lookup"><span data-stu-id="81add-1343">Because most arrays have a lower bound of zero, this method generally returns -1 if`value` isn't found.</span></span> <span data-ttu-id="81add-1344">配列の下限の境界が等しく、まれなケースで<xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) と`value`が見つからない、このメソッドが戻る<xref:System.Int32.MaxValue?displayProperty=nameWithType>(0x7FFFFFFF)。</span><span class="sxs-lookup"><span data-stu-id="81add-1344">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) and `value` isn't found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span></span>  
  
 <span data-ttu-id="81add-1345">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1345">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1346">例では、次の 3 つオーバー ロードを呼び出し、<xref:System.Array.IndexOf%2A>文字列配列に文字列のインデックスを検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1346">The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29><span data-ttu-id="81add-1347">、、文字列に最初に出現する位置を決定する文字列の配列「、」。</span><span class="sxs-lookup"><span data-stu-id="81add-1347">, to determine the first occurrence of the string "the" in a string array.</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29><span data-ttu-id="81add-1348">、、文字列に最初に出現する位置を決定する文字列配列の最後の要素に 4 つ目で"the"。</span><span class="sxs-lookup"><span data-stu-id="81add-1348">, to determine the first occurrence of the string "the" in the fourth to the last elements of a string array.</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29><span data-ttu-id="81add-1349">、、文字列に最初に出現する位置を決定する文字列で「、」配列の最後の一致、配列の末尾に次の場所からします。</span><span class="sxs-lookup"><span data-stu-id="81add-1349">, to determine the first occurrence of the string "the" in a string array from the element that follows the last successful match to the end of the array.</span></span>  
  
 [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1350"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1350">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1351"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1351">is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (Array array, object value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(class System.Array array, object value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int IndexOf(Array ^ array, System::Object ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member IndexOf : Array * obj * int -&gt; int" Usage="System.Array.IndexOf (array, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1352">検索する 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-1352">The one-dimensional array to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1353"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1353">The object to locate in <paramref name="array" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1354">検索の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1354">The starting index of the search.</span></span> <span data-ttu-id="81add-1355">空の配列の場合 0 (ゼロ) は有効です。</span><span class="sxs-lookup"><span data-stu-id="81add-1355">0 (zero) is valid in an empty array.</span></span></param>
        <summary><span data-ttu-id="81add-1356">指定されたオブジェクトを 1 次元配列の要素範囲内で検索し、最初に見つかったオブジェクトのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1356">Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence.</span></span> <span data-ttu-id="81add-1357">要素範囲は、指定されたインデックスから、配列の最後までの範囲です。</span><span class="sxs-lookup"><span data-stu-id="81add-1357">The range extends from a specified index to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="81add-1358"><paramref name="array" /> の <paramref name="startIndex" /> から最後の要素までの範囲内で <paramref name="value" /> が見つかった場合は、最初に見つかった位置のインデックス。それ以外の場合は、配列の下限 - 1。</span><span class="sxs-lookup"><span data-stu-id="81add-1358">The index of the first occurrence of <paramref name="value" />, if it's found, within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1359">このメソッドは検索インデックスにある要素から 1 次元配列`startIndex`最後の要素。</span><span class="sxs-lookup"><span data-stu-id="81add-1359">This method searches a one-dimensional array from the element at index `startIndex` to the last element.</span></span> <span data-ttu-id="81add-1360">確認するかどうか`value`内に存在する`array`、メソッドを呼び出して、等値比較を実行します、`Equals`一致が見つかるまでのすべての要素のメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1360">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `Equals` method of every element until it finds a match.</span></span> <span data-ttu-id="81add-1361">つまり、要素をオーバーライドする場合、<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>メソッド、そのオーバーライドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1361">This means that if the element overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, that override is called.</span></span>  
  
 <span data-ttu-id="81add-1362">ほとんどの配列の下限を 0 ため、このメソッドは、-1 返します通常を行う場合`value`が見つからない。</span><span class="sxs-lookup"><span data-stu-id="81add-1362">Because most arrays have a lower bound of zero, this method generally returns -1 if `value` isn't found.</span></span> <span data-ttu-id="81add-1363">配列の下限の境界が等しく、まれなケースで<xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) と`value`が見つからない、このメソッドが戻る<xref:System.Int32.MaxValue?displayProperty=nameWithType>(0x7FFFFFFF)。</span><span class="sxs-lookup"><span data-stu-id="81add-1363">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) and `value` isn't found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span></span>  
  
 <span data-ttu-id="81add-1364">場合`startIndex`equals<xref:System.Array.Length%2A?displayProperty=nameWithType>メソッドは-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1364">If `startIndex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>,the method returns -1.</span></span> <span data-ttu-id="81add-1365">場合`startIndex`がより大きい<xref:System.Array.Length%2A?displayProperty=nameWithType>がスローされます、<xref:System.ArgumentOutOfRangeException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1365">If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="81add-1366">このメソッドは O (`n`) 操作、`n`から要素の数は、`startIndex`の末尾に`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1366">This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1367">例では、次の 3 つオーバー ロードを呼び出し、<xref:System.Array.IndexOf%2A>文字列配列に文字列のインデックスを検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1367">The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29><span data-ttu-id="81add-1368">、、文字列に最初に出現する位置を決定する文字列の配列「、」。</span><span class="sxs-lookup"><span data-stu-id="81add-1368">, to determine the first occurrence of the string "the" in a string array.</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29><span data-ttu-id="81add-1369">、、文字列に最初に出現する位置を決定する文字列配列の最後の要素に 4 つ目で"the"。</span><span class="sxs-lookup"><span data-stu-id="81add-1369">, to determine the first occurrence of the string "the" in the fourth to the last elements of a string array.</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29><span data-ttu-id="81add-1370">、、文字列に最初に出現する位置を決定する文字列で「、」配列の最後の一致、配列の末尾に次の場所からします。</span><span class="sxs-lookup"><span data-stu-id="81add-1370">, to determine the first occurrence of the string "the" in a string array from the element that follows the last successful match to the end of the array.</span></span>  
  
 [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1371"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1371">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1372"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1372">is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1373"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1373">is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1374">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1374">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (Array array, object value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(class System.Array array, object value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int IndexOf(Array ^ array, System::Object ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member IndexOf : Array * obj * int * int -&gt; int" Usage="System.Array.IndexOf (array, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1375">検索する 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-1375">The one-dimensional array to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1376"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1376">The object to locate in <paramref name="array" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1377">検索の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1377">The starting index of the search.</span></span> <span data-ttu-id="81add-1378">空の配列の場合 0 (ゼロ) は有効です。</span><span class="sxs-lookup"><span data-stu-id="81add-1378">0 (zero) is valid in an empty array.</span></span></param>
        <param name="count"><span data-ttu-id="81add-1379">検索する要素数。</span><span class="sxs-lookup"><span data-stu-id="81add-1379">The number of elements to search.</span></span></param>
        <summary><span data-ttu-id="81add-1380">指定されたオブジェクトを 1 次元配列の要素範囲内で検索し、最初に見つかったオブジェクトのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1380">Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence.</span></span> <span data-ttu-id="81add-1381">範囲は、指定されたインデックスから始まり、指定された数の要素を含む範囲です。</span><span class="sxs-lookup"><span data-stu-id="81add-1381">The range extends from a specified index for a specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="81add-1382">インデックス <paramref name="startIndex" /> から <paramref name="startIndex" /> + <paramref name="count" /> - 1 までの <paramref name="array" /> 内で <paramref name="value" /> が見つかった場合は、最初に見つかった位置のインデックス。それ以外の場合は、配列の下限 - 1。</span><span class="sxs-lookup"><span data-stu-id="81add-1382">The index of the first occurrence of <paramref name="value" />, if it's found in the <paramref name="array" /> from index <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1383">このメソッドからの 1 次元配列の要素を検索する`startIndex`に`startIndex`plus`count`から 1 を引いた場合`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="81add-1383">This method searches the elements of a one-dimensional array from `startIndex` to `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span> <span data-ttu-id="81add-1384">確認するかどうか`value`内に存在する`array`、メソッドを呼び出して、等値比較を実行します、`Equals`一致が見つかるまでのすべての要素のメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1384">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `Equals` method of every element until it finds a match.</span></span> <span data-ttu-id="81add-1385">つまり、要素をオーバーライドする場合、<xref:System.Object.Equals%2A?displayProperty=nameWithType>メソッド、そのオーバーライドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1385">This means that if the element overrides the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method, that override is called.</span></span>  
  
 <span data-ttu-id="81add-1386">ほとんどの配列の下限を 0 ため、このメソッドは一般に返します-1 の場合に`value`が見つからない。</span><span class="sxs-lookup"><span data-stu-id="81add-1386">Because most arrays have a lower bound of zero, this method generally returns -1 when `value` isn't found.</span></span> <span data-ttu-id="81add-1387">配列の下限の境界が等しく、まれなケースで<xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) と`value`が見つからない、このメソッドが戻る<xref:System.Int32.MaxValue?displayProperty=nameWithType>(0x7FFFFFFF)。</span><span class="sxs-lookup"><span data-stu-id="81add-1387">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType> (0x80000000) and `value` isn't found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span></span>  
  
 <span data-ttu-id="81add-1388">場合`startindex`equals<xref:System.Array.Length%2A?displayProperty=nameWithType>メソッドは-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1388">If `startindex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method returns -1.</span></span> <span data-ttu-id="81add-1389">場合`startIndex`がより大きい<xref:System.Array.Length%2A?displayProperty=nameWithType>がスローされます、<xref:System.ArgumentOutOfRangeException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1389">If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="81add-1390">このメソッドは O (`n`) 操作、`n`は`count`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1390">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1391">例では、次の 3 つオーバー ロードを呼び出し、<xref:System.Array.IndexOf%2A>文字列配列に文字列のインデックスを検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1391">The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29><span data-ttu-id="81add-1392">、、文字列に最初に出現する位置を決定する文字列の配列「、」。</span><span class="sxs-lookup"><span data-stu-id="81add-1392">, to determine the first occurrence of the string "the" in a string array.</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29><span data-ttu-id="81add-1393">、、文字列に最初に出現する位置を決定する文字列配列の最後の要素に 4 つ目で"the"。</span><span class="sxs-lookup"><span data-stu-id="81add-1393">, to determine the first occurrence of the string "the" in the fourth to the last elements of a string array.</span></span>  
  
-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29><span data-ttu-id="81add-1394">、、文字列に最初に出現する位置を決定する文字列で「、」配列の最後の一致、配列の末尾に次の場所からします。</span><span class="sxs-lookup"><span data-stu-id="81add-1394">, to determine the first occurrence of the string "the" in a string array from the element that follows the last successful match to the end of the array.</span></span> <span data-ttu-id="81add-1395">値を決定する、`count`引数、開始インデックスから配列の上限値を減算し、1 つ追加します。</span><span class="sxs-lookup"><span data-stu-id="81add-1395">To determine the value of the `count` argument, it subtracts the upper bound of the array from the starting index and adds one.</span></span>  
  
 [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1396"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1396">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1397"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1397">is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-1398">または</span><span class="sxs-lookup"><span data-stu-id="81add-1398">-or-</span></span> 
 <paramref name="count" /> <span data-ttu-id="81add-1399"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1399">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1400">または</span><span class="sxs-lookup"><span data-stu-id="81add-1400">-or-</span></span> 
 <paramref name="startIndex" /> <span data-ttu-id="81add-1401"> および <paramref name="count" /> によって <paramref name="array" /> 内の有効なセクションが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1401">and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1402"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1402">is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1403">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1403">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (T[] array, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(!!T[] array, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexOf(Of T) (array As T(), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int IndexOf(cli::array &lt;T&gt; ^ array, T value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : 'T[] * 'T -&gt; int" Usage="System.Array.IndexOf (array, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1404">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1404">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1405">検索する 1 次元の配列。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1405">The one-dimensional, zero-based array to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1406"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1406">The object to locate in <paramref name="array" />.</span></span></param>
        <summary><span data-ttu-id="81add-1407">指定したオブジェクトを検索し、1 次元配列でそのオブジェクトが最初に見つかった位置のインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1407">Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</span></span></summary>
        <returns><span data-ttu-id="81add-1408"><paramref name="array" /> 全体を対象とする <paramref name="value" /> の検索で最初に見つかった位置のインデックス (0 から始まる)。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1408">The zero-based index of the first occurrence of <paramref name="value" /> in the entire <paramref name="array" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1409">このメソッドの 1 次元配列のすべての要素を検索する`value`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1409">This method searches all the elements of a one-dimensional array for `value`.</span></span> <span data-ttu-id="81add-1410">確認するかどうか`value`内に存在する`array`、メソッドを呼び出して、等値比較を実行します、`T.Equals`要素ごとにメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1410">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element.</span></span> <span data-ttu-id="81add-1411">つまり、`T`オーバーライド、<xref:System.Object.Equals%2A>メソッド、そのオーバーライドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1411">This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.</span></span>  
  
 <span data-ttu-id="81add-1412">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1412">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1413">次の例では、すべて次の 3 つのジェネリック オーバー ロード、<xref:System.Array.IndexOf%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1413">The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method.</span></span> <span data-ttu-id="81add-1414">インデックス位置 0 と 5 のインデックスの場所に 2 回、表示する 1 つのエントリで、文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1414">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="81add-1415"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29>メソッドのオーバー ロードは、最初から配列を検索し、文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1415">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="81add-1416"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して配列のインデックス位置 3 以降と、配列の最後の検索し、文字列の 2 つ目の項目を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1416">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string.</span></span> <span data-ttu-id="81add-1417">最後に、<xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29>は 2 つのインデックス位置にある先頭の 2 つのエントリの範囲を検索するメソッドのオーバー ロードが使用されます。 その範囲内で検索文字列のインスタンスがないため、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1417">Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]
 [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1418"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1418">is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1419">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1419">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (T[] array, T value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(!!T[] array, !!T value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf``1(``0[],``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexOf(Of T) (array As T(), value As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int IndexOf(cli::array &lt;T&gt; ^ array, T value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member IndexOf : 'T[] * 'T * int -&gt; int" Usage="System.Array.IndexOf (array, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1420">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1420">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1421">検索する 1 次元の配列。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1421">The one-dimensional, zero-based array to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1422"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1422">The object to locate in <paramref name="array" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1423">検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1423">The zero-based starting index of the search.</span></span> <span data-ttu-id="81add-1424">空の配列の場合 0 (ゼロ) は有効です。</span><span class="sxs-lookup"><span data-stu-id="81add-1424">0 (zero) is valid in an empty array.</span></span></param>
        <summary><span data-ttu-id="81add-1425">指定されたオブジェクトを 1 次元配列の要素範囲内で検索し、最初に見つかったオブジェクトのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1425">Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence.</span></span> <span data-ttu-id="81add-1426">要素範囲は、指定されたインデックスから、配列の最後までの範囲です。</span><span class="sxs-lookup"><span data-stu-id="81add-1426">The range extends from a specified index to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="81add-1427"><paramref name="value" /> の <paramref name="array" /> から最後の要素までを範囲として <paramref name="startIndex" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1427">The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1428">このメソッドを 1 次元配列にある要素からは検索`startIndex`配列の末尾にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1428">This method searches a one-dimensional array from the element at `startIndex` to the end of the array.</span></span> <span data-ttu-id="81add-1429">確認するかどうか`value`内に存在する`array`、メソッドを呼び出して、等値比較を実行します、`T.Equals`要素ごとにメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1429">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element.</span></span> <span data-ttu-id="81add-1430">つまり、`T`オーバーライド、<xref:System.Object.Equals%2A>メソッド、そのオーバーライドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1430">This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.</span></span>  
  
 <span data-ttu-id="81add-1431">場合`startIndex`equals <xref:System.Array.Length%2A>、メソッドを返します - 1.If`startIndex`がより大きい<xref:System.Array.Length%2A?displayProperty=nameWithType>がスローされます、<xref:System.ArgumentOutOfRangeException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1431">If `startIndex` equals <xref:System.Array.Length%2A>,the method returns -1.If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="81add-1432">このメソッドは O (`n`) 操作、`n`から要素の数は、`startIndex`の末尾に`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1432">This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1433">次の例では、すべて次の 3 つのジェネリック オーバー ロード、<xref:System.Array.IndexOf%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1433">The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method.</span></span> <span data-ttu-id="81add-1434">インデックス位置 0 と 5 のインデックスの場所に 2 回、表示する 1 つのエントリで、文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1434">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="81add-1435"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29>メソッドのオーバー ロードは、最初から配列を検索し、文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1435">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="81add-1436"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して配列のインデックス位置 3 以降と、配列の最後の検索し、文字列の 2 つ目の項目を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1436">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string.</span></span> <span data-ttu-id="81add-1437">最後に、<xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29>は 2 つのインデックス位置にある先頭の 2 つのエントリの範囲を検索するメソッドのオーバー ロードが使用されます。 その範囲内で検索文字列のインスタンスがないため、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1437">Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]
 [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1438"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1438">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1439"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1439">is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1440">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1440">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (T[] array, T value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(!!T[] array, !!T value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexOf(Of T) (array As T(), value As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int IndexOf(cli::array &lt;T&gt; ^ array, T value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member IndexOf : 'T[] * 'T * int * int -&gt; int" Usage="System.Array.IndexOf (array, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1441">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1441">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1442">検索する 1 次元の配列。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1442">The one-dimensional, zero-based array to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1443"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1443">The object to locate in <paramref name="array" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1444">検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1444">The zero-based starting index of the search.</span></span> <span data-ttu-id="81add-1445">空の配列の場合 0 (ゼロ) は有効です。</span><span class="sxs-lookup"><span data-stu-id="81add-1445">0 (zero) is valid in an empty array.</span></span></param>
        <param name="count"><span data-ttu-id="81add-1446">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1446">The number of elements in the section to search.</span></span></param>
        <summary><span data-ttu-id="81add-1447">指定されたオブジェクトを 1 次元配列の要素範囲内で検索し、最初に見つかったオブジェクトのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1447">Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence.</span></span> <span data-ttu-id="81add-1448">範囲は、指定されたインデックスから始まり、指定された数の要素を含む範囲です。</span><span class="sxs-lookup"><span data-stu-id="81add-1448">The range extends from a specified index for a specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="81add-1449"><paramref name="array" /> の <paramref name="startIndex" /> から <paramref name="count" /> 個の要素を範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1449">The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1450">このメソッドからの 1 次元配列の要素を検索する`startIndex`に`startIndex`plus`count`から 1 を引いた場合`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="81add-1450">This method searches the elements of a one-dimensional array from `startIndex` to `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span> <span data-ttu-id="81add-1451">確認するかどうか`value`内に存在する`array`、メソッドを呼び出して、等値比較を実行します、`T.Equals`要素ごとにメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1451">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element.</span></span> <span data-ttu-id="81add-1452">つまり、`T`オーバーライド、<xref:System.Object.Equals%2A>メソッド、そのオーバーライドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1452">This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.</span></span>  
  
 <span data-ttu-id="81add-1453">場合`startIndex`equals<xref:System.Array.Length%2A?displayProperty=nameWithType>メソッドは-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1453">If `startIndex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method returns -1.</span></span>  <span data-ttu-id="81add-1454">場合`startIndex`がより大きい<xref:System.Array.Length%2A?displayProperty=nameWithType>がスローされます、<xref:System.ArgumentOutOfRangeException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1454">If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="81add-1455">このメソッドは O (`n`) 操作、`n`は`count`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1455">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1456">次の例では、すべて次の 3 つのジェネリック オーバー ロード、<xref:System.Array.IndexOf%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1456">The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method.</span></span> <span data-ttu-id="81add-1457">インデックス位置 0 と 5 のインデックスの場所に 2 回、表示する 1 つのエントリで、文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1457">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="81add-1458"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29>メソッドのオーバー ロードは、最初から配列を検索し、文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1458">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="81add-1459"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して配列のインデックス位置 3 以降と、配列の最後の検索し、文字列の 2 つ目の項目を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1459">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string.</span></span> <span data-ttu-id="81add-1460">最後に、<xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29>は 2 つのインデックス位置にある先頭の 2 つのエントリの範囲を検索するメソッドのオーバー ロードが使用されます。 その範囲内で検索文字列のインスタンスがないため、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1460">Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]
 [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1461"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1461">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1462"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1462">is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-1463">または</span><span class="sxs-lookup"><span data-stu-id="81add-1463">-or-</span></span> 
 <paramref name="count" /> <span data-ttu-id="81add-1464"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1464">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1465">または</span><span class="sxs-lookup"><span data-stu-id="81add-1465">-or-</span></span> 
 <paramref name="startIndex" /> <span data-ttu-id="81add-1466"> および <paramref name="count" /> によって <paramref name="array" /> 内の有効なセクションが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1466">and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1467">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1467">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize();" />
      <MemberSignature Language="F#" Value="member this.Initialize : unit -&gt; unit" Usage="array.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81add-1468">値型の既定のコンストラクターを呼び出して、この値型 <see cref="T:System.Array" /> の各要素を初期化します。</span><span class="sxs-lookup"><span data-stu-id="81add-1468">Initializes every element of the value-type <see cref="T:System.Array" /> by calling the default constructor of the value type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1469">このメソッドの目的は、コンパイラが値型の配列をサポートするにはほとんどのユーザーには、このメソッドは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1469">This method is designed to help compilers support value-type arrays; most users do not need this method.</span></span> <span data-ttu-id="81add-1470">参照型の配列でない使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1470">It must not be used on reference-type arrays.</span></span>  
  
 <span data-ttu-id="81add-1471">場合、<xref:System.Array>値型ではない<xref:System.Array>または値の型に既定のコンス トラクターがあるない場合、<xref:System.Array>は変更されません。</span><span class="sxs-lookup"><span data-stu-id="81add-1471">If the <xref:System.Array> is not a value-type <xref:System.Array> or if the value type does not have a default constructor, the <xref:System.Array> is not modified.</span></span>  
  
 <span data-ttu-id="81add-1472">値型<xref:System.Array>の下限の境界とディメンションの任意の数を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1472">The value-type <xref:System.Array> can have any lower bound and any number of dimensions.</span></span>  
  
 <span data-ttu-id="81add-1473">このメソッドは O (`n`) 操作、`n`は<xref:System.Array.Length%2A>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1473">This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="81add-1474">このメソッドはコンス トラクター; がある値型でのみ使用できます。ただし、c# にネイティブな値の型には、コンス トラクターはありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1474">You can use this method only on value types that have constructors; however, value types that are native to C# do not have constructors.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Array.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Array.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-1475"><see cref="T:System.Array" /> が固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1475">Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="81add-1476">このプロパティは、すべての配列に対して常に <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1476">This property is always <see langword="true" /> for all arrays.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Array> <span data-ttu-id="81add-1477">実装して、<xref:System.Array.IsFixedSize%2A>プロパティが必要としているため、<xref:System.Collections.IList?displayProperty=nameWithType>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-1477">implements the <xref:System.Array.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="81add-1478">固定サイズの配列は、追加または削除できません要素の後、配列が作成されますが、既存の要素は変更できます。</span><span class="sxs-lookup"><span data-stu-id="81add-1478">An array with a fixed size does not allow the addition or removal of elements after the array is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="81add-1479">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="81add-1479">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="T:System.Collections.Generic.IList`1" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Array.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Array.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-1480"><see cref="T:System.Array" /> が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1480">Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="81add-1481">このプロパティは、すべての配列に対して常に <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1481">This property is always <see langword="false" /> for all arrays.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Array> <span data-ttu-id="81add-1482">実装して、<xref:System.Array.IsReadOnly%2A>プロパティが必要としているため、<xref:System.Collections.IList?displayProperty=nameWithType>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-1482">implements the <xref:System.Array.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="81add-1483">読み取り専用である配列はできません、追加、削除、または要素の変更、配列を作成した後。</span><span class="sxs-lookup"><span data-stu-id="81add-1483">An array that is read-only does not allow the addition, removal, or modification of elements after the array is created.</span></span>  
  
 <span data-ttu-id="81add-1484">読み取り専用コレクションを必要とする場合、<xref:System.Collections>を実装するクラス、<xref:System.Collections.IList?displayProperty=nameWithType>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-1484">If you require a read-only collection, use a <xref:System.Collections> class that implements the <xref:System.Collections.IList?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="81add-1485">キャストまたは配列に変換する場合、<xref:System.Collections.IList>インターフェイス オブジェクト、<xref:System.Collections.IList.IsReadOnly%2A?displayProperty=nameWithType>プロパティが返す`false`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1485">If you cast or convert an array to an <xref:System.Collections.IList> interface object, the <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=nameWithType> property returns `false`.</span></span> <span data-ttu-id="81add-1486">ただし、キャストまたは配列に変換する場合、<xref:System.Collections.Generic.IList%601>インターフェイス、`IsReadOnly`プロパティが返す`true`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1486">However, if you cast or convert an array to a <xref:System.Collections.Generic.IList%601> interface, the `IsReadOnly` property returns `true`.</span></span>  
  
 <span data-ttu-id="81add-1487">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="81add-1487">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="N:System.Collections" />
        <altmember cref="T:System.Collections.Generic.IList`1" />
        <altmember cref="N:System.Collections.Generic" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Array.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Array.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-1488"><see cref="T:System.Array" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1488">Gets a value indicating whether access to the <see cref="T:System.Array" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="81add-1489">このプロパティは、すべての配列に対して常に <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1489">This property is always <see langword="false" /> for all arrays.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Array> <span data-ttu-id="81add-1490">実装して、<xref:System.Array.IsSynchronized%2A>プロパティが必要としているため、<xref:System.Collections.ICollection?displayProperty=nameWithType>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-1490">implements the <xref:System.Array.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="81add-1491">.NET framework クラスに基づいた<xref:System.Array>のコレクションを使用して、独自の同期バージョンの提供、<xref:System.Array.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-1491">.NET Framework classes based on <xref:System.Array> provide their own synchronized version of the collection using the <xref:System.Array.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="81add-1492">配列を使用するクラスは、独自の同期を使用しても実装できます、<xref:System.Array.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-1492">Classes that use arrays can also implement their own synchronization using the <xref:System.Array.SyncRoot%2A> property.</span></span> <span data-ttu-id="81add-1493">同期されたコードで操作を実行する必要があります、`SyncRoot`コレクションの直接ではなく、コレクションの。</span><span class="sxs-lookup"><span data-stu-id="81add-1493">The synchronizing code must perform operations on the `SyncRoot` of the collection, not directly on the collection.</span></span> <span data-ttu-id="81add-1494">これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。</span><span class="sxs-lookup"><span data-stu-id="81add-1494">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="81add-1495">具体的には、コレクションを同時に変更する可能性があるその他のスレッドと適切な同期を維持します。</span><span class="sxs-lookup"><span data-stu-id="81add-1495">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection.</span></span> <span data-ttu-id="81add-1496">注意の実装によって<xref:System.Array.SyncRoot%2A>返す可能性があります、<xref:System.Array>自体。</span><span class="sxs-lookup"><span data-stu-id="81add-1496">Note that some implementations of <xref:System.Array.SyncRoot%2A> might return the <xref:System.Array> itself.</span></span>  
  
 <span data-ttu-id="81add-1497">コレクションの列挙は、スレッド セーフな方法では本質的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1497">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="81add-1498">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="81add-1498">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="81add-1499">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="81add-1499">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="81add-1500">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="81add-1500">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1501">次のコード例を使用して、すべての列挙中に配列をロックする方法を示しています、<xref:System.Array.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-1501">The following code example shows how to lock an array during the entire enumeration by using the <xref:System.Array.SyncRoot%2A> property.</span></span>  
  
 [!code-cpp[System.Array.SyncRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.SyncRoot/cpp/source.cpp#1)]
 [!code-csharp[System.Array.SyncRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.SyncRoot/cs/source.cs#1)]
 [!code-vb[System.Array.SyncRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.SyncRoot/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Array.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-1502">1 次元 <see cref="T:System.Array" /> 内または <see cref="T:System.Array" /> の範囲内で値が最後に見つかった位置のインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1502">Returns the index of the last occurrence of a value in a one-dimensional <see cref="T:System.Array" /> or in a portion of the <see cref="T:System.Array" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public static int LastIndexOf (Array array, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf(class System.Array array, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf(System.Array,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int LastIndexOf(Array ^ array, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : Array * obj -&gt; int" Usage="System.Array.LastIndexOf (array, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1503">検索対象となる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1503">The one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1504"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1504">The object to locate in <paramref name="array" />.</span></span></param>
        <summary><span data-ttu-id="81add-1505">指定したオブジェクトを検索し、1 次元の <see cref="T:System.Array" /> 全体でそのオブジェクトが最後に見つかった位置のインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1505">Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-1506"><paramref name="value" /> 全体を対象に <paramref name="array" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</span><span class="sxs-lookup"><span data-stu-id="81add-1506">The index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1507">1 次元<xref:System.Array>後方の最後の要素から開始し、最初の要素の終了が検索されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1507">The one-dimensional <xref:System.Array> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="81add-1508">要素は、指定した値を使用して、<xref:System.Object.Equals%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1508">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="81add-1509">要素の型が非組み込みの (ユーザー定義) 型の場合、`Equals`その型の実装が使用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1509">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="81add-1510">ほとんどの配列が下限を 0 であるためこのメソッドは、通常-1 の場合に`value`が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="81add-1510">Since most arrays will have a lower bound of zero, this method would generally return -1 when `value` is not found.</span></span> <span data-ttu-id="81add-1511">配列の下限の境界が等しく、まれなケースで<xref:System.Int32.MinValue?displayProperty=nameWithType>と`value`が検出されなければ、このメソッドが戻る<xref:System.Int32.MaxValue?displayProperty=nameWithType>、これは`System.Int32.MinValue - 1`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1511">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType>, which is `System.Int32.MinValue - 1`.</span></span>  
  
 <span data-ttu-id="81add-1512">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1512">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
 <span data-ttu-id="81add-1513">.NET framework version 2.0 では、このメソッドを使用して、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、<xref:System.Array>を決定するかどうか、<xref:System.Object>で指定された、`value`パラメーターが存在します。</span><span class="sxs-lookup"><span data-stu-id="81add-1513">In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists.</span></span> <span data-ttu-id="81add-1514">以前のバージョンの .NET Framework では、この判断を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`value`<xref:System.Object>自体。</span><span class="sxs-lookup"><span data-stu-id="81add-1514">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself.</span></span>  
  
 <xref:System.IComparable.CompareTo%2A> <span data-ttu-id="81add-1515">メソッド、`item`パラメーター コレクション内のオブジェクトにします。</span><span class="sxs-lookup"><span data-stu-id="81add-1515">methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1516">次のコード例では、配列内の指定した要素の最後に見つかった位置のインデックスを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1516">The following code example shows how to determine the index of the last occurrence of a specified element in an array.</span></span>  
  
 [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1517"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1517">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1518"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1518">is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1519">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1519">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public static int LastIndexOf (Array array, object value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf(class System.Array array, object value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int LastIndexOf(Array ^ array, System::Object ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : Array * obj * int -&gt; int" Usage="System.Array.LastIndexOf (array, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1520">検索対象となる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1520">The one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1521"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1521">The object to locate in <paramref name="array" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1522">逆方向検索の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1522">The starting index of the backward search.</span></span></param>
        <summary><span data-ttu-id="81add-1523">1 次元 <see cref="T:System.Array" /> の先頭の要素から、指定したインデックスまでを対象に指定したオブジェクトを検索し、インデックス番号の最も大きい要素のインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1523">Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="81add-1524"><paramref name="value" /> の先頭の要素から <paramref name="array" /> までを範囲として <paramref name="startIndex" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</span><span class="sxs-lookup"><span data-stu-id="81add-1524">The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1525">1 次元<xref:System.Array>で検索された旧バージョンと開始`startIndex`と最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="81add-1525">The one-dimensional <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="81add-1526">要素は、指定した値を使用して、<xref:System.Object.Equals%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1526">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="81add-1527">要素の型が非組み込みの (ユーザー定義) 型の場合、`Equals`その型の実装が使用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1527">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="81add-1528">ほとんどの配列が下限を 0 であるためこのメソッドは、通常-1 の場合に`value`が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="81add-1528">Since most arrays will have a lower bound of zero, this method would generally return -1 when `value` is not found.</span></span> <span data-ttu-id="81add-1529">配列の下限の境界が等しく、まれなケースで<xref:System.Int32.MinValue?displayProperty=nameWithType>と`value`が検出されなければ、このメソッドが戻る<xref:System.Int32.MaxValue?displayProperty=nameWithType>、これは`System.Int32.MinValue - 1`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1529">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType>, which is `System.Int32.MinValue - 1`.</span></span>  
  
 <span data-ttu-id="81add-1530">このメソッドは O (`n`) 操作、`n`の先頭から要素の数は、`array`に`startIndex`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1530">This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`.</span></span>  
  
 <span data-ttu-id="81add-1531">.NET framework version 2.0 では、このメソッドを使用して、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、<xref:System.Array>を決定するかどうか、<xref:System.Object>で指定された、`value`パラメーターが存在します。</span><span class="sxs-lookup"><span data-stu-id="81add-1531">In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists.</span></span> <span data-ttu-id="81add-1532">以前のバージョンの .NET Framework では、この判断を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`value`<xref:System.Object>自体。</span><span class="sxs-lookup"><span data-stu-id="81add-1532">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1533">次のコード例では、配列内の指定した要素の最後に見つかった位置のインデックスを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1533">The following code example shows how to determine the index of the last occurrence of a specified element in an array.</span></span>  
  
 [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1534"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1534">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1535"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1535">is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1536"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1536">is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1537">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1537">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public static int LastIndexOf (Array array, object value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf(class System.Array array, object value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int LastIndexOf(Array ^ array, System::Object ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : Array * obj * int * int -&gt; int" Usage="System.Array.LastIndexOf (array, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1538">検索対象となる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1538">The one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1539"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1539">The object to locate in <paramref name="array" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1540">逆方向検索の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1540">The starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="81add-1541">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1541">The number of elements in the section to search.</span></span></param>
        <summary><span data-ttu-id="81add-1542">指定したオブジェクトを、1 次元 <see cref="T:System.Array" /> の指定したインデックス位置から、指定した要素数を範囲として検索し、インデックス番号の最も大きい要素のインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1542">Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="81add-1543"><paramref name="value" /> の <paramref name="array" /> から、<paramref name="count" /> で指定された要素数を範囲として <paramref name="startIndex" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素のインデックス番号。それ以外の場合は、配列の下限 - 1。</span><span class="sxs-lookup"><span data-stu-id="81add-1543">The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1544">1 次元<xref:System.Array>で検索された旧バージョンと開始`startIndex`で終わる`startIndex`マイナス`count`+ 1 場合、`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="81add-1544">The one-dimensional <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="81add-1545">要素は、指定した値を使用して、<xref:System.Object.Equals%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1545">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="81add-1546">要素の型が非組み込みの (ユーザー定義) 型の場合、`Equals`その型の実装が使用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1546">If the element type is a nonintrinsic (user-defined) type, the`Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="81add-1547">ほとんどの配列が下限を 0 であるためこのメソッドは、通常-1 の場合に`value`が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="81add-1547">Since most arrays will have a lower bound of zero, this method would generally return -1 when `value` is not found.</span></span> <span data-ttu-id="81add-1548">配列の下限の境界が等しく、まれなケースで<xref:System.Int32.MinValue?displayProperty=nameWithType>と`value`が検出されなければ、このメソッドが戻る<xref:System.Int32.MaxValue?displayProperty=nameWithType>、これは`System.Int32.MinValue - 1`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1548">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType>, which is `System.Int32.MinValue - 1`.</span></span>  
  
 <span data-ttu-id="81add-1549">このメソッドは O (`n`) 操作、`n`は`count`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1549">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
 <span data-ttu-id="81add-1550">.NET framework version 2.0 では、このメソッドを使用して、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、<xref:System.Array>を決定するかどうか、<xref:System.Object>で指定された、`value`パラメーターが存在します。</span><span class="sxs-lookup"><span data-stu-id="81add-1550">In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists.</span></span> <span data-ttu-id="81add-1551">以前のバージョンの .NET Framework では、この判断を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`value`<xref:System.Object>自体。</span><span class="sxs-lookup"><span data-stu-id="81add-1551">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1552">次のコード例では、配列内の指定した要素の最後に見つかった位置のインデックスを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1552">The following code example shows how to determine the index of the last occurrence of a specified element in an array.</span></span> <span data-ttu-id="81add-1553">なお、<xref:System.Array.LastIndexOf%2A>メソッドは、旧バージョンとの検索。 したがって、`count`に等しいまたはそれよりも小さい必要があります (`startIndex`マイナス 1 を足した数、配列の下限の境界)。</span><span class="sxs-lookup"><span data-stu-id="81add-1553">Note that the <xref:System.Array.LastIndexOf%2A> method is a backward search; therefore, `count` must be less than or equal to (`startIndex` minus the lower bound of the array plus 1).</span></span>  
  
 [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1554"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1554">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1555"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1555">is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-1556">または</span><span class="sxs-lookup"><span data-stu-id="81add-1556">-or-</span></span> 
 <paramref name="count" /> <span data-ttu-id="81add-1557"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1557">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1558">または</span><span class="sxs-lookup"><span data-stu-id="81add-1558">-or-</span></span> 
 <paramref name="startIndex" /> <span data-ttu-id="81add-1559"> および <paramref name="count" /> によって <paramref name="array" /> 内の有効なセクションが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1559">and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1560"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1560">is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1561">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1561">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (T[] array, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;T&gt;(!!T[] array, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LastIndexOf(Of T) (array As T(), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int LastIndexOf(cli::array &lt;T&gt; ^ array, T value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : 'T[] * 'T -&gt; int" Usage="System.Array.LastIndexOf (array, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1562">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1562">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1563">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1563">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1564"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1564">The object to locate in <paramref name="array" />.</span></span></param>
        <summary><span data-ttu-id="81add-1565">指定したオブジェクトを <see cref="T:System.Array" /> 全体を対象に検索し、インデックス番号の最も大きい要素のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1565">Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="81add-1566"><paramref name="value" /> が見つかった場合は、<paramref name="array" /> 全体で最後に見つかった位置のインデックス番号 (0 から始まる)。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1566">The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1567"><xref:System.Array>後方の最後の要素から開始し、最初の要素の終了が検索されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1567">The <xref:System.Array> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="81add-1568">要素は、指定した値を使用して、<xref:System.Object.Equals%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1568">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="81add-1569">要素の型が非組み込みの (ユーザー定義) 型の場合、`Equals`その型の実装が使用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1569">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="81add-1570">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1570">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1571">次のコード例は、すべて次の 3 つのジェネリック オーバー ロードを示して、<xref:System.Array.LastIndexOf%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1571">The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method.</span></span> <span data-ttu-id="81add-1572">インデックス位置 0 と 5 のインデックスの場所に 2 回、表示する 1 つのエントリで、文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1572">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="81add-1573"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29>メソッドのオーバー ロードがから最後に、配列全体を検索し、文字列の 2 つ目の項目を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1573">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="81add-1574"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス 3 の場所で旧バージョンと開始位置の配列と、配列の先頭に進むと文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1574">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string.</span></span> <span data-ttu-id="81add-1575">最後に、<xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス位置 4 から、逆方向に拡張して、4 つのエントリの範囲 (つまり、検索 4、3、2、および 1 の場所にある項目) この検索では、検索のインスタンスがないため、-1 が返されます。その範囲内の文字列。</span><span class="sxs-lookup"><span data-stu-id="81add-1575">Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]
 [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1576"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1576">is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1577">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1577">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (T[] array, T value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;T&gt;(!!T[] array, !!T value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LastIndexOf(Of T) (array As T(), value As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int LastIndexOf(cli::array &lt;T&gt; ^ array, T value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : 'T[] * 'T * int -&gt; int" Usage="System.Array.LastIndexOf (array, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1578">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1578">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1579">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1579">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1580"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1580">The object to locate in <paramref name="array" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1581">後方検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1581">The zero-based starting index of the backward search.</span></span></param>
        <summary><span data-ttu-id="81add-1582">指定したオブジェクトを、<see cref="T:System.Array" /> の先頭の要素から、指定されたインデックス位置までを範囲として検索し、インデックス番号の最も大きい要素のインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1582">Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="81add-1583">最初の要素から <paramref name="startIndex" /> までの <paramref name="array" /> 内の要素の範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1583">The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1584"><xref:System.Array>で検索された旧バージョンと開始`startIndex`と最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="81add-1584">The <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="81add-1585">要素は、指定した値を使用して、<xref:System.Object.Equals%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1585">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="81add-1586">要素の型が非組み込みの (ユーザー定義) 型の場合、`Equals`その型の実装が使用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1586">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="81add-1587">このメソッドは O (`n`) 操作、`n`の先頭から要素の数は、`array`に`startIndex`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1587">This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1588">次のコード例は、すべて次の 3 つのジェネリック オーバー ロードを示して、<xref:System.Array.LastIndexOf%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1588">The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method.</span></span> <span data-ttu-id="81add-1589">インデックス位置 0 と 5 のインデックスの場所に 2 回、表示する 1 つのエントリで、文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1589">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="81add-1590"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29>メソッドのオーバー ロードがから最後に、配列全体を検索し、文字列の 2 つ目の項目を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1590">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="81add-1591"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス 3 の場所で旧バージョンと開始位置の配列と、配列の先頭に進むと文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1591">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string.</span></span> <span data-ttu-id="81add-1592">最後に、<xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス位置 4 から、逆方向に拡張して、4 つのエントリの範囲 (つまり、検索 4、3、2、および 1 の場所にある項目) この検索では、検索のインスタンスがないため、-1 が返されます。その範囲内の文字列。</span><span class="sxs-lookup"><span data-stu-id="81add-1592">Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]
 [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1593"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1593">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1594"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1594">is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1595">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1595">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (T[] array, T value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;T&gt;(!!T[] array, !!T value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LastIndexOf(Of T) (array As T(), value As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int LastIndexOf(cli::array &lt;T&gt; ^ array, T value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : 'T[] * 'T * int * int -&gt; int" Usage="System.Array.LastIndexOf (array, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1596">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1596">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1597">検索する 1 次元の <see cref="T:System.Array" />。インデックス番号は 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="81add-1597">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="81add-1598"><paramref name="array" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-1598">The object to locate in <paramref name="array" />.</span></span></param>
        <param name="startIndex"><span data-ttu-id="81add-1599">後方検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1599">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="81add-1600">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1600">The number of elements in the section to search.</span></span></param>
        <summary><span data-ttu-id="81add-1601">指定したオブジェクトを、<see cref="T:System.Array" /> の指定したインデックス位置から、指定した要素数を範囲として検索し、インデックス番号の最も大きい要素のインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="81add-1601">Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="81add-1602"><paramref name="array" /> の <paramref name="count" /> から <paramref name="startIndex" /> 個の要素を範囲として <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も大きい要素の 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-1602">The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1603"><xref:System.Array>で検索された旧バージョンと開始`startIndex`で終わる`startIndex`マイナス`count`+ 1 場合、`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="81add-1603">The <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="81add-1604">要素は、指定した値を使用して、<xref:System.Object.Equals%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1604">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="81add-1605">要素の型が非組み込みの (ユーザー定義) 型の場合、`Equals`その型の実装が使用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1605">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="81add-1606">このメソッドは O (`n`) 操作、`n`は`count`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1606">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1607">次のコード例は、すべて次の 3 つのジェネリック オーバー ロードを示して、<xref:System.Array.LastIndexOf%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1607">The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method.</span></span> <span data-ttu-id="81add-1608">インデックス位置 0 と 5 のインデックスの場所に 2 回、表示する 1 つのエントリで、文字列の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1608">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="81add-1609"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29>メソッドのオーバー ロードがから最後に、配列全体を検索し、文字列の 2 つ目の項目を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1609">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="81add-1610"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス 3 の場所で旧バージョンと開始位置の配列と、配列の先頭に進むと文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="81add-1610">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string.</span></span> <span data-ttu-id="81add-1611">最後に、<xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス位置 4 から、逆方向に拡張して、4 つのエントリの範囲 (つまり、検索 4、3、2、および 1 の場所にある項目) この検索では、検索のインスタンスがないため、-1 が返されます。その範囲内の文字列。</span><span class="sxs-lookup"><span data-stu-id="81add-1611">Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]
 [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1612"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1612">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> <span data-ttu-id="81add-1613"> は <paramref name="array" /> の有効なインデックスの範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="81add-1613">is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-1614">または</span><span class="sxs-lookup"><span data-stu-id="81add-1614">-or-</span></span> 
 <paramref name="count" /> <span data-ttu-id="81add-1615"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1615">is less than zero.</span></span>  
  
<span data-ttu-id="81add-1616">または</span><span class="sxs-lookup"><span data-stu-id="81add-1616">-or-</span></span> 
 <paramref name="startIndex" /> <span data-ttu-id="81add-1617"> および <paramref name="count" /> によって <paramref name="array" /> 内の有効なセクションが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1617">and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1618">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1618">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Array.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Array.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-1619"><see cref="T:System.Array" /> のすべての次元内の要素の総数を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1619">Gets the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="81add-1620"><see cref="T:System.Array" /> のすべての次元内の要素の総数。配列内に要素がない場合はゼロ。</span><span class="sxs-lookup"><span data-stu-id="81add-1620">The total number of elements in all the dimensions of the <see cref="T:System.Array" />; zero if there are no elements in the array.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1621">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="81add-1621">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1622">次の例では、<xref:System.Array.Length%2A>配列の要素の合計数を取得するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-1622">The following example uses the <xref:System.Array.Length%2A> property to get the total number of elements in an array.</span></span> <span data-ttu-id="81add-1623">また、使用、<xref:System.Array.GetUpperBound%2A>多次元配列の各次元内の要素の数を決定するメソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-1623">It also uses the <xref:System.Array.GetUpperBound%2A> method to determine the number of elements in each dimension of a multidimensional array.</span></span>  
  
 [!code-csharp[System.Array.Length#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.length/cs/length1.cs#1)]
 [!code-vb[System.Array.Length#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.length/vb/length1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="81add-1624">配列は多次元配列で、<see cref="F:System.Int32.MaxValue" /> 以上の要素を含みます。</span><span class="sxs-lookup"><span data-stu-id="81add-1624">The array is multidimensional and contains more than <see cref="F:System.Int32.MaxValue" /> elements.</span></span></exception>
        <altmember cref="M:System.Array.GetLength(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="P:System.Array.LongLength" />
        <altmember cref="P:System.Collections.ICollection.Count" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="LongLength">
      <MemberSignature Language="C#" Value="public long LongLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LongLength" />
      <MemberSignature Language="DocId" Value="P:System.Array.LongLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LongLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LongLength { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LongLength : int64" Usage="System.Array.LongLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-1625"><see cref="T:System.Array" /> のすべての次元内の要素の総数を表す 64 ビット整数を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1625">Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="81add-1626"><see cref="T:System.Array" /> のすべての次元内の要素の総数を表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1626">A 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1627">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="81add-1627">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Array.GetLongLength(System.Int32)" />
        <altmember cref="P:System.Array.Length" />
        <altmember cref="P:System.Collections.ICollection.Count" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public int Rank { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rank" />
      <MemberSignature Language="DocId" Value="P:System.Array.Rank" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rank As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rank { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Rank : int" Usage="System.Array.Rank" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-1628"><see cref="T:System.Array" /> のランク (次元数) を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-1628">Gets the rank (number of dimensions) of the <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1629">たとえば、1 次元配列は 1 を返し、2 次元配列は 2 を返すなどです。</span><span class="sxs-lookup"><span data-stu-id="81add-1629">For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on.</span></span></summary>
        <value><span data-ttu-id="81add-1630"><see cref="T:System.Array" /> のランク (次元数)。</span><span class="sxs-lookup"><span data-stu-id="81add-1630">The rank (number of dimensions) of the <see cref="T:System.Array" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1631">たとえば、Visual Basic コード</span><span class="sxs-lookup"><span data-stu-id="81add-1631">For example, the Visual Basic code</span></span>  
  
```vb  
Dim TDArray(0,0,0) As Integer  
```  
  
 <span data-ttu-id="81add-1632">c# コード</span><span class="sxs-lookup"><span data-stu-id="81add-1632">and the C# code</span></span>  
  
```csharp  
int[,,] TDArray = new int[1,1,1];  
```  
  
 <span data-ttu-id="81add-1633">次の 3 つの次元の配列を作成、<xref:System.Array.Rank%2A>プロパティの値は 3 です。</span><span class="sxs-lookup"><span data-stu-id="81add-1633">create an array of three dimensions with a <xref:System.Array.Rank%2A> property whose value is 3.</span></span>  
  
 <span data-ttu-id="81add-1634">ジャグ配列 (配列の配列) が 1 次元の配列です。値、<xref:System.Array.Rank%2A>プロパティが 1 にします。</span><span class="sxs-lookup"><span data-stu-id="81add-1634">A jagged array (an array of arrays) is a one-dimensional array; the value of its <xref:System.Array.Rank%2A> property is 1.</span></span>  
  
 <span data-ttu-id="81add-1635">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="81add-1635">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1636">次の例は、1 次元配列、2 次元の配列およびジャグ配列を初期化し、取得、<xref:System.Array.Rank%2A>の各プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-1636">The following example initializes a one-dimensional array, a two-dimensional array, and a jagged array, and retrieves the <xref:System.Array.Rank%2A> property of each.</span></span>  
  
 [!code-csharp[System.Array.Rank#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.rank/cs/rank1.cs#1)]
 [!code-vb[System.Array.Rank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.rank/vb/rank1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Array.Length" />
        <altmember cref="M:System.Array.GetLength(System.Int32)" />
        <altmember cref="P:System.Array.LongLength" />
        <altmember cref="M:System.Array.GetLongLength(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Resize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Resize&lt;T&gt; (ref T[] array, int newSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Resize&lt;T&gt;(!!T[]&amp; array, int32 newSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Resize``1(``0[]@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Resize(Of T) (ByRef array As T(), newSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Resize(cli::array &lt;T&gt; ^ % array, int newSize);" />
      <MemberSignature Language="F#" Value="static member Resize :  * int -&gt; unit" Usage="System.Array.Resize (array, newSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="ref" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="newSize" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-1637">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-1637">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-1638">サイズ変更の対象となる、インデックス番号が 0 から始まる 1 次元配列。指定したサイズの新しい配列を作成する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1638">The one-dimensional, zero-based array to resize, or <see langword="null" /> to create a new array with the specified size.</span></span></param>
        <param name="newSize"><span data-ttu-id="81add-1639">新しい配列のサイズ。</span><span class="sxs-lookup"><span data-stu-id="81add-1639">The size of the new array.</span></span></param>
        <summary><span data-ttu-id="81add-1640">1 次元配列の要素数を、指定した新しいサイズに変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-1640">Changes the number of elements of a one-dimensional array to the specified new size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1641">このメソッドは、指定したサイズを新しい配列を割り当てますに、元の配列から要素をコピーし、元の配列を新しいものに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1641">This method allocates a new array with the specified size, copies elements from the old array to the new one, and then replaces the old array with the new one.</span></span> `array` <span data-ttu-id="81add-1642">1 次元配列である必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1642">must be a one-dimensional array.</span></span>  
  
 <span data-ttu-id="81add-1643">場合`array`は`null`、このメソッドは、指定したサイズを新しい配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-1643">If `array` is `null`, this method creates a new array with the specified size.</span></span>  
  
 <span data-ttu-id="81add-1644">場合`newSize`がより大きい、<xref:System.Array.Length%2A>元の配列の新しい配列が割り当てられているし、新しいに元の配列からすべての要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="81add-1644">If `newSize` is greater than the <xref:System.Array.Length%2A> of the old array, a new array is allocated and all the elements are copied from the old array to the new one.</span></span>  <span data-ttu-id="81add-1645">場合`newSize`がより小さい<xref:System.Array.Length%2A>元の配列の新しい配列が割り当てられていると要素は、新しいに新しいが塗りつぶされるまでで、元の配列からコピーされます。 古い配列内の要素の残りの部分は無視されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1645">If `newSize` is less than the <xref:System.Array.Length%2A> of the old array, a new array is allocated and elements are copied from the old array to the new one until the new one is filled; the rest of the elements in the old array are ignored.</span></span>  <span data-ttu-id="81add-1646">場合`newSize`と等しい、<xref:System.Array.Length%2A>の元の配列では、このメソッドは何も行いません。</span><span class="sxs-lookup"><span data-stu-id="81add-1646">If `newSize` is equal to the <xref:System.Array.Length%2A> of the old array, this method does nothing.</span></span>  
  
 <span data-ttu-id="81add-1647">このメソッドは O (`n`) 操作、`n`は`newSize`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1647">This method is an O(`n`) operation, where `n` is `newSize`.</span></span>  
  
 <span data-ttu-id="81add-1648"><xref:System.Array.Resize%2A>メソッドのみを 1 次元配列のサイズを変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-1648">The <xref:System.Array.Resize%2A> method resizes a one-dimensional array only.</span></span> <span data-ttu-id="81add-1649"><xref:System.Array>多次元配列のサイズを変更するためのメソッドがクラスに含まれません。</span><span class="sxs-lookup"><span data-stu-id="81add-1649">The <xref:System.Array> class does not include a method for resizing multi-dimensional arrays.</span></span> <span data-ttu-id="81add-1650">これを行うには、独自のコードを提供するか、サード パーティ製ライブラリの特殊なメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1650">To do this, you must either provide your own code or call a special-purpose method in a third-party library.</span></span> <span data-ttu-id="81add-1651">次のコードが配列のサイズを変更する方法の 1 つの考えられる実装を示します*n*ディメンション。</span><span class="sxs-lookup"><span data-stu-id="81add-1651">The following code illustrates one possible implementation for a method that resizes an array of *n* dimensions.</span></span>  
  
 [!code-csharp[System.Array.Resize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Resize/CS/resizexd.cs#2)]
 [!code-vb[System.Array.Resize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Resize/VB/resizexd.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="81add-1652">次の例では、配列のサイズ変更の影響を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1652">The following example shows how resizing affects the array.</span></span>  
  
 [!code-cpp[System.Array.Resize#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Resize/CPP/System.Array.Resize.cpp#1)]
 [!code-csharp[System.Array.Resize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Resize/CS/arrayresize.cs#1)]
 [!code-vb[System.Array.Resize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Resize/VB/arrayresize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newSize" /> <span data-ttu-id="81add-1653"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1653">is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-1654">1 次元 <see cref="T:System.Array" /> 内または <see cref="T:System.Array" /> の範囲内の要素の順序を反転させます。</span><span class="sxs-lookup"><span data-stu-id="81add-1654">Reverses the order of the elements in a one-dimensional <see cref="T:System.Array" /> or in a portion of the <see cref="T:System.Array" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public static void Reverse (Array array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Reverse(System.Array)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reverse(Array ^ array);" />
      <MemberSignature Language="F#" Value="static member Reverse : Array -&gt; unit" Usage="System.Array.Reverse array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1655">反転させる 1 次元の <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1655">The one-dimensional <see cref="T:System.Array" /> to reverse.</span></span></param>
        <summary><span data-ttu-id="81add-1656">1 次元の <see cref="T:System.Array" /> 内全体の要素のシーケンスを反転させます。</span><span class="sxs-lookup"><span data-stu-id="81add-1656">Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1657">呼び出しの後にある要素は、このメソッドに`myArray[i]`ここで、`i`配列内のすべてのインデックスに移動します`myArray[j]`ここで、 `j` equals`(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1657">After a call to this method, the element at `myArray[i]`, where `i` is any index in the array, moves to `myArray[j]`, where `j` equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`.</span></span>  
  
 <span data-ttu-id="81add-1658">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1658">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
 <span data-ttu-id="81add-1659">次の例に示すように、<xref:System.Array.Reverse%2A>ジャグ配列を反転させるメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-1659">As the following example shows, the <xref:System.Array.Reverse%2A> method can be used to reverse a jagged array.</span></span> <span data-ttu-id="81add-1660">現在のカルチャのカレンダーの現在の年の各月の 1 つの要素でのジャグ配列を初期化します。</span><span class="sxs-lookup"><span data-stu-id="81add-1660">It initializes a jagged array with one element for each month of the current year in the current culture's calendar.</span></span> <span data-ttu-id="81add-1661">各要素には、その月の日と同じ数の要素の配列が含まれています。</span><span class="sxs-lookup"><span data-stu-id="81add-1661">Each element contains an array with as many elements as that month has days.</span></span> <span data-ttu-id="81add-1662">例では、呼び出しを配列の内容を表示する、<xref:System.Array.Reverse%2A>メソッド、および、逆順の配列の内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1662">The example displays the contents of the array, calls the <xref:System.Array.Reverse%2A> method, and then displays the contents of the reversed array.</span></span>  
  
 [!code-csharp[System.Array.Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.reverse/cs/reversejagged.cs#1)]
 [!code-vb[System.Array.Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.reverse/vb/reversejagged.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="81add-1663">次のコード例の値の並べ替えを取り消す方法を示しています、<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1663">The following code example shows how to reverse the sort of the values in an <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.Reverse Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Reverse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.Reverse Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Reverse Example/CS/source.cs#1)]
 [!code-vb[Classic Array.Reverse Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Reverse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1664"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1664">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1665"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1665">is multidimensional.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public static void Reverse (Array array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse(class System.Array array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reverse(Array ^ array, int index, int length);" />
      <MemberSignature Language="F#" Value="static member Reverse : Array * int * int -&gt; unit" Usage="System.Array.Reverse (array, index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1666">反転させる 1 次元の <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1666">The one-dimensional <see cref="T:System.Array" /> to reverse.</span></span></param>
        <param name="index"><span data-ttu-id="81add-1667">反転させる範囲の先頭位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1667">The starting index of the section to reverse.</span></span></param>
        <param name="length"><span data-ttu-id="81add-1668">反転対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1668">The number of elements in the section to reverse.</span></span></param>
        <summary><span data-ttu-id="81add-1669">1 次元 <see cref="T:System.Array" /> 内の要素範囲の並び順を反転させます。</span><span class="sxs-lookup"><span data-stu-id="81add-1669">Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1670">呼び出しの後にある要素は、このメソッドに`myArray[i]`ここで、`i`配列内のすべてのインデックスに移動します`myArray[j]`ここで、 `j` equals`(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1670">After a call to this method, the element at `myArray[i]`, where `i` is any index in the array, moves to `myArray[j]`, where `j` equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`.</span></span>  
  
 <span data-ttu-id="81add-1671"><xref:System.Array.Reverse%2A>ジャグ配列を反転させるメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-1671">The <xref:System.Array.Reverse%2A> method can be used to reverse a jagged array.</span></span>  
  
 <span data-ttu-id="81add-1672">このメソッドは O (`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1672">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1673">次のコード例は、内の要素の範囲内の値の並べ替えを取り消す方法を示しています、<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1673">The following code example shows how to reverse the sort of the values in a range of elements in an <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.Reverse1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.Reverse1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.Reverse1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1674"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1674">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1675"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1675">is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-1676"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-1676">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-1677">または</span><span class="sxs-lookup"><span data-stu-id="81add-1677">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-1678"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1678">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-1679"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-1679">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Reverse&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Reverse``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Reverse(Of T) (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Reverse(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member Reverse : 'T[] -&gt; unit" Usage="System.Array.Reverse array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Reverse&lt;T&gt; (T[] array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse&lt;T&gt;(!!T[] array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Reverse``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Reverse(Of T) (array As T(), index As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Reverse(cli::array &lt;T&gt; ^ array, int index, int length);" />
      <MemberSignature Language="F#" Value="static member Reverse : 'T[] * int * int -&gt; unit" Usage="System.Array.Reverse (array, index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <param name="index">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-1680">現在の <see cref="T:System.Array" /> 内の指定した要素を指定した値に設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1680">Sets the specified element in the current <see cref="T:System.Array" /> to the specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, int index);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * int -&gt; unit" Usage="array.SetValue (value, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-1681">指定した要素の新しい値。</span><span class="sxs-lookup"><span data-stu-id="81add-1681">The new value for the specified element.</span></span></param>
        <param name="index"><span data-ttu-id="81add-1682">設定する <see cref="T:System.Array" /> 要素の位置を表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1682">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="81add-1683">1 次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1683">Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1684">インデックスは 32 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1684">The index is specified as a 32-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1685"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドを調べるかどうかの値`index`が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1685">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1686">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1686">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="81add-1687">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1687">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1688">場合<xref:System.Array.SetValue%2A>を割り当てるため`null`値型の配列の要素に、要素のすべてのフィールドが 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1688">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="81add-1689">要素の値は、null 参照ではありませんし、null 参照を検索して見つかったことはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1689">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1690">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1690">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1691">現在の <see cref="T:System.Array" /> が完全な 1 次元ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1691">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><paramref name="value" /> <span data-ttu-id="81add-1692"> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1692">cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-1693"> が、現在の <see cref="T:System.Array" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1693">is outside the range of valid indexes for the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, params int[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int32[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, ParamArray indices As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, ... cli::array &lt;int&gt; ^ indices);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * int[] -&gt; unit" Usage="array.SetValue (value, indices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="indices" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-1694">指定した要素の新しい値。</span><span class="sxs-lookup"><span data-stu-id="81add-1694">The new value for the specified element.</span></span></param>
        <param name="indices"><span data-ttu-id="81add-1695">設定する要素の位置を指定するインデックスを表す 32 ビット整数の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-1695">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</span></span></param>
        <summary><span data-ttu-id="81add-1696">多次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1696">Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1697">インデックスは 32 ビット整数値の配列として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1697">The indexes are specified as an array of 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1698">要素数`indices`の次元数と同じにする必要があります、<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1698">The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>.</span></span> <span data-ttu-id="81add-1699">すべての要素、`indices`配列が多次元で、目的の要素の位置をまとめて指定する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1699">All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1700"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>かどうかの値のいずれかの方法を調べる、`indices`配列が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1700">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the values in the `indices` array is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1701">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1701">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="81add-1702">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1702">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1703">場合<xref:System.Array.SetValue%2A>を割り当てるため`null`値型の配列の要素に、要素のすべてのフィールドが 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1703">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="81add-1704">要素の値は、null 参照ではありませんし、null 参照を検索して見つかったことはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1704">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1705">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1705">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="indices" /> <span data-ttu-id="81add-1706"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1706">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1707">現在の <see cref="T:System.Array" /> の次元数が、<paramref name="indices" /> 内の要素数と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1707">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><paramref name="value" /> <span data-ttu-id="81add-1708"> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1708">cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="81add-1709"><paramref name="indices" /> 内のいずれかの要素が、現在の <see cref="T:System.Array" /> 内の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1709">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, long index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int64 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, long index);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * int64 -&gt; unit" Usage="array.SetValue (value, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-1710">指定した要素の新しい値。</span><span class="sxs-lookup"><span data-stu-id="81add-1710">The new value for the specified element.</span></span></param>
        <param name="index"><span data-ttu-id="81add-1711">設定する <see cref="T:System.Array" /> 要素の位置を表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1711">A 64-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="81add-1712">1 次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1712">Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1713">インデックスは 64 ビット整数として指定されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1713">The index is specified as a 64-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1714"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドを調べるかどうかの値`index`が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1714">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1715">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1715">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="81add-1716">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1716">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1717">場合<xref:System.Array.SetValue%2A>を割り当てるため`null`値型の配列の要素に、要素のすべてのフィールドが 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1717">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="81add-1718">要素の値は、null 参照ではありませんし、null 参照を検索して見つかったことはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1718">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1719">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1719">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1720">現在の <see cref="T:System.Array" /> が完全な 1 次元ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1720">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><paramref name="value" /> <span data-ttu-id="81add-1721"> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1721">cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-1722"> が、現在の <see cref="T:System.Array" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1722">is outside the range of valid indexes for the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, params long[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int64[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int64[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, ParamArray indices As Long())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, ... cli::array &lt;long&gt; ^ indices);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * int64[] -&gt; unit" Usage="array.SetValue (value, indices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="indices" Type="System.Int64[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-1723">指定した要素の新しい値。</span><span class="sxs-lookup"><span data-stu-id="81add-1723">The new value for the specified element.</span></span></param>
        <param name="indices"><span data-ttu-id="81add-1724">設定する要素の位置を指定するインデックスを表す 64 ビット整数の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-1724">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.</span></span></param>
        <summary><span data-ttu-id="81add-1725">多次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1725">Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1726">インデックスは 64 ビット整数値の配列として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1726">The indexes are specified as an array of 64-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1727">要素数`indices`の次元数と同じにする必要があります、<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1727">The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>.</span></span> <span data-ttu-id="81add-1728">すべての要素、`indices`配列が多次元で、目的の要素の位置をまとめて指定する必要があります<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1728">All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1729"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>かどうかの値のいずれかの方法を調べる、`indices`配列が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1729">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the values in the `indices` array is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1730">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1730">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="81add-1731">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1731">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1732">場合<xref:System.Array.SetValue%2A>を割り当てるため`null`値型の配列の要素に、要素のすべてのフィールドが 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1732">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="81add-1733">要素の値は、null 参照ではありませんし、null 参照を検索して見つかったことはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1733">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1734">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1734">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="indices" /> <span data-ttu-id="81add-1735"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1735">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1736">現在の <see cref="T:System.Array" /> の次元数が、<paramref name="indices" /> 内の要素数と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1736">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><paramref name="value" /> <span data-ttu-id="81add-1737"> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1737">cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81add-1738"><paramref name="indices" /> 内のいずれかの要素が、現在の <see cref="T:System.Array" /> 内の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1738">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, int index1, int index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int32 index1, int32 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index1 As Integer, index2 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, int index1, int index2);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * int * int -&gt; unit" Usage="array.SetValue (value, index1, index2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index1" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index2" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-1739">指定した要素の新しい値。</span><span class="sxs-lookup"><span data-stu-id="81add-1739">The new value for the specified element.</span></span></param>
        <param name="index1"><span data-ttu-id="81add-1740">設定する <see cref="T:System.Array" /> 要素の最初の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1740">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index2"><span data-ttu-id="81add-1741">設定する <see cref="T:System.Array" /> 要素の 2 番目の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1741">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="81add-1742">2 次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1742">Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1743">インデックスは 32 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1743">The indexes are specified as 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1744"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1744">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1745">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1745">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="81add-1746">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1746">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1747">場合<xref:System.Array.SetValue%2A>を割り当てるため`null`値型の配列の要素に、要素のすべてのフィールドが 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1747">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="81add-1748">要素の値は、null 参照ではありませんし、null 参照を検索して見つかったことはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1748">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1749">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1749">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1750">現在の <see cref="T:System.Array" /> は正確な 2 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1750">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><paramref name="value" /> <span data-ttu-id="81add-1751"> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1751">cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="81add-1752"><paramref name="index1" /> または <paramref name="index2" /> が、現在の <see cref="T:System.Array" /> の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1752">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, long index1, long index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int64 index1, int64 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index1 As Long, index2 As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, long index1, long index2);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * int64 * int64 -&gt; unit" Usage="array.SetValue (value, index1, index2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index1" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index2" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-1753">指定した要素の新しい値。</span><span class="sxs-lookup"><span data-stu-id="81add-1753">The new value for the specified element.</span></span></param>
        <param name="index1"><span data-ttu-id="81add-1754">設定する <see cref="T:System.Array" /> 要素の最初の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1754">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index2"><span data-ttu-id="81add-1755">設定する <see cref="T:System.Array" /> 要素の 2 番目の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1755">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="81add-1756">2 次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1756">Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1757">インデックスは 64 ビット整数として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1757">The indexes are specified as 64-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1758"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1758">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1759">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1759">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="81add-1760">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1760">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1761">場合<xref:System.Array.SetValue%2A>を割り当てるため`null`値型の配列の要素に、要素のすべてのフィールドが 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1761">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="81add-1762">要素の値は、null 参照ではありませんし、null 参照を検索して見つかったことはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1762">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1763">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1763">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1764">現在の <see cref="T:System.Array" /> は正確な 2 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1764">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><paramref name="value" /> <span data-ttu-id="81add-1765"> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1765">cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81add-1766"><paramref name="index1" /> または <paramref name="index2" /> が、現在の <see cref="T:System.Array" /> の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1766">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, int index1, int index2, int index3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int32 index1, int32 index2, int32 index3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index1 As Integer, index2 As Integer, index3 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, int index1, int index2, int index3);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * int * int * int -&gt; unit" Usage="array.SetValue (value, index1, index2, index3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index1" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index2" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index3" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-1767">指定した要素の新しい値。</span><span class="sxs-lookup"><span data-stu-id="81add-1767">The new value for the specified element.</span></span></param>
        <param name="index1"><span data-ttu-id="81add-1768">設定する <see cref="T:System.Array" /> 要素の最初の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1768">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index2"><span data-ttu-id="81add-1769">設定する <see cref="T:System.Array" /> 要素の 2 番目の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1769">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index3"><span data-ttu-id="81add-1770">設定する <see cref="T:System.Array" /> 要素の 3 番目の次元のインデックスを表す 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1770">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="81add-1771">3 次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1771">Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1772">インデックスは 32 ビット整数値として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1772">The indexes are specified as 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1773"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1773">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1774">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1774">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="81add-1775">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1775">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1776">場合<xref:System.Array.SetValue%2A>を割り当てるため`null`値型の配列の要素に、要素のすべてのフィールドが 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1776">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="81add-1777">要素の値は、null 参照ではありませんし、null 参照を検索して見つかったことはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1777">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1778">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1778">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1779">現在の <see cref="T:System.Array" /> は正確な 3 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1779">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><paramref name="value" /> <span data-ttu-id="81add-1780"> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1780">cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index1" /> <span data-ttu-id="81add-1781">、<paramref name="index2" />、または <paramref name="index3" /> が、現在の <see cref="T:System.Array" /> の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1781">or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, long index1, long index2, long index3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int64 index1, int64 index2, int64 index3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index1 As Long, index2 As Long, index3 As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, long index1, long index2, long index3);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * int64 * int64 * int64 -&gt; unit" Usage="array.SetValue (value, index1, index2, index3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index1" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index2" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index3" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-1782">指定した要素の新しい値。</span><span class="sxs-lookup"><span data-stu-id="81add-1782">The new value for the specified element.</span></span></param>
        <param name="index1"><span data-ttu-id="81add-1783">設定する <see cref="T:System.Array" /> 要素の最初の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1783">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index2"><span data-ttu-id="81add-1784">設定する <see cref="T:System.Array" /> 要素の 2 番目の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1784">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index3"><span data-ttu-id="81add-1785">設定する <see cref="T:System.Array" /> 要素の 3 番目の次元のインデックスを表す 64 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="81add-1785">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="81add-1786">3 次元 <see cref="T:System.Array" /> 内の指定した位置にある要素に値を設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1786">Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="81add-1787">インデックスは 64 ビット整数として指定します。</span><span class="sxs-lookup"><span data-stu-id="81add-1787">The indexes are specified as 64-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1788"><xref:System.Array.GetLowerBound%2A>と<xref:System.Array.GetUpperBound%2A>メソッドが範囲外のインデックスのいずれかがいるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1788">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="81add-1789">変換の詳細については、次を参照してください。<xref:System.Convert>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1789">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="81add-1790">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="81add-1790">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-1791">場合<xref:System.Array.SetValue%2A>を割り当てるため`null`値型の配列の要素に、要素のすべてのフィールドが 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1791">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="81add-1792">要素の値は、null 参照ではありませんし、null 参照を検索して見つかったことはできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1792">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1793">次のコード例では、設定および 1 次元または多次元配列内の特定の値を取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1793">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1794">現在の <see cref="T:System.Array" /> は正確な 3 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-1794">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><paramref name="value" /> <span data-ttu-id="81add-1795"> を現在の <see cref="T:System.Array" /> の要素の型にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1795">cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index1" /> <span data-ttu-id="81add-1796">、<paramref name="index2" />、または <paramref name="index3" /> が、現在の <see cref="T:System.Array" /> の対応する次元の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="81add-1796">or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="81add-1797">1 次元配列の要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1797">Sorts the elements in a one-dimensional array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ array);" />
      <MemberSignature Language="F#" Value="static member Sort : Array -&gt; unit" Usage="System.Array.Sort array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1798">並べ替え対象となる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1798">The one-dimensional <see cref="T:System.Array" /> to sort.</span></span></param>
        <summary><span data-ttu-id="81add-1799"><see cref="T:System.Array" /> の各要素によって実装された <see cref="T:System.IComparable" /> を使用して、1 次元 <see cref="T:System.Array" /> 全体の要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1799">Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1800">各要素`array`実装する必要があります、<xref:System.IComparable>の他のすべての要素との比較ができるようにするインターフェイス`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1800">Each element of `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="81add-1801">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-1801">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-1802">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1802">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-1803">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1803">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1804">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1804">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1805">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1805">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-1806">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1806">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-1807">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1807">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-1808">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1808">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1809">次のコード例の値を並べ替える方法を示しています、<xref:System.Array>既定の比較子と並べ替え順序を反転するカスタム比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1809">The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="81add-1810">結果は、現在によって異なる場合がありますので注意<xref:System.Globalization.CultureInfo>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1810">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]
 [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]
 [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1811"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1811">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1812"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1812">is multidimensional.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81add-1813"><paramref name="array" /> の 1 つ以上の要素が、<see cref="T:System.IComparable" /> インターフェイスを実装していません。</span><span class="sxs-lookup"><span data-stu-id="81add-1813">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1814">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1814">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array keys, Array items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array keys, class System.Array items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Array)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort (keys As Array, items As Array)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ keys, Array ^ items);" />
      <MemberSignature Language="F#" Value="static member Sort : Array * Array -&gt; unit" Usage="System.Array.Sort (keys, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="items" Type="System.Array" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="81add-1815">並べ替え対象となるキーを格納する 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1815">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="81add-1816"><paramref name="keys" /><see cref="T:System.Array" /> 内の各キーに対応する項目を格納する 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1816">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-1817">または</span><span class="sxs-lookup"><span data-stu-id="81add-1817">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-1818"><paramref name="keys" /><see cref="T:System.Array" /> のみを並べ替える場合は 。</span><span class="sxs-lookup"><span data-stu-id="81add-1818">to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</span></span></param>
        <summary><span data-ttu-id="81add-1819">2 つの 1 次元 <see cref="T:System.Array" /> オブジェクト (一方のオブジェクトがキーを格納し、他方のオブジェクトがそれらに対応する項目を格納する) を、最初の <see cref="T:System.Array" /> 内のキーに基づき、各キーによって実装された <see cref="T:System.IComparable" /> を使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1819">Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1820">各キーに、`keys`<xref:System.Array>に対応するアイテムがある、`items`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1820">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="81add-1821">並べ替え、対応する項目の中に、キーが移動したときに、`items`<xref:System.Array>同様の位置を変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-1821">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="81add-1822">そのため、`items`<xref:System.Array>が内の対応するキーの並べ替えに従って並び替え、`keys`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1822">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1823">各キーに、`keys`<xref:System.Array>実装する必要があります、<xref:System.IComparable>他のすべてのキーの比較ができるようにするインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-1823">Each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="81add-1824">キーよりも項目がありますが、対応するキーのない項目が並べ替えられていない場合は並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1824">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="81add-1825">項目よりも多くのキーがある場合に並べ替えることはできません。スローされること、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1825">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="81add-1826">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-1826">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-1827">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1827">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-1828">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1828">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1829">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1829">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1830">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1830">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-1831">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1831">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-1832">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1832">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-1833">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`keys`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1833">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `keys`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1834">次の例では、キーと値を格納する 2 番目の配列の 2 つの関連付けられている配列を並べ替える方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1834">The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values.</span></span> <span data-ttu-id="81add-1835">並べ替えが完了したら、既定の比較子と並べ替え順序を反転するカスタム比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1835">Sorts are done using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="81add-1836">結果は、現在によって異なる場合がありますので注意<xref:System.Globalization.CultureInfo>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1836">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]
 [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]
 [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> <span data-ttu-id="81add-1837"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1837">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="81add-1838"><paramref name="keys" /><see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1838">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="81add-1839">または</span><span class="sxs-lookup"><span data-stu-id="81add-1839">-or-</span></span> 
<span data-ttu-id="81add-1840"><paramref name="items" /><see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1840">The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="items" /> <span data-ttu-id="81add-1841"> が <see langword="null" /> ではなく、<paramref name="keys" /> の長さが <paramref name="items" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-1841">is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81add-1842"><paramref name="keys" /><see cref="T:System.Array" /> 内の 1 つまたは複数の要素に <see cref="T:System.IComparable" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1842">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="T:System.Collections.IDictionary" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1843">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1843">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array array, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array array, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Collections.IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ array, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Sort : Array * System.Collections.IComparer -&gt; unit" Usage="System.Array.Sort (array, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1844">並べ替え対象となる 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="81add-1844">The one-dimensional array to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-1845">要素を比較する場合に使用する実装。</span><span class="sxs-lookup"><span data-stu-id="81add-1845">The implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="81add-1846">または</span><span class="sxs-lookup"><span data-stu-id="81add-1846">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-1847">各要素の <see cref="T:System.IComparable" /> 実装を使用する 。</span><span class="sxs-lookup"><span data-stu-id="81add-1847">to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-1848">1 次元 <see cref="T:System.Array" /> 内の要素を、指定した <see cref="T:System.Collections.IComparer" /> を使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1848">Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1849">場合`comparer`は`null`の各要素`array`実装する必要があります、<xref:System.IComparable>の他のすべての要素との比較ができるようにするインターフェイス`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1849">If `comparer` is `null`, each element of `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="81add-1850">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-1850">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-1851">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1851">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-1852">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1852">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1853">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1853">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1854">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1854">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-1855">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1855">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-1856">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1856">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-1857">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1857">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
 <span data-ttu-id="81add-1858">.NET Framework が含まれています定義済み<xref:System.Collections.IComparer>実装は、次の表に一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1858">The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.</span></span>  
  
|<span data-ttu-id="81add-1859">実装</span><span class="sxs-lookup"><span data-stu-id="81add-1859">Implementation</span></span>|<span data-ttu-id="81add-1860">説明</span><span class="sxs-lookup"><span data-stu-id="81add-1860">Description</span></span>|  
|--------------------|-----------------|  
|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>|<span data-ttu-id="81add-1861">任意の 2 つのオブジェクトを比較しますが、大文字と小文字の文字列を実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-1861">Compares any two objects, but performs a case-insensitive comparison of strings.</span></span>|  
|<xref:System.Collections.Comparer.Default?displayProperty=nameWithType>|<span data-ttu-id="81add-1862">現在のカルチャの並べ替え規則を使用して、2 つのオブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="81add-1862">Compares any two objects by using the sorting conventions of the current culture.</span></span>|  
|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=nameWithType>|<span data-ttu-id="81add-1863">インバリアント カルチャの並べ替え規則を使用して、2 つのオブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="81add-1863">Compares any two objects by using the sorting conventions of the invariant culture.</span></span>|  
|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>|<span data-ttu-id="81add-1864">型の 2 つのオブジェクトを比較`T`型の既定の並べ替え順序を使用しています。</span><span class="sxs-lookup"><span data-stu-id="81add-1864">Compares two objects of type `T` by using the type's default sort order.</span></span>|  
  
 <span data-ttu-id="81add-1865">独自のインスタンスを提供することで、カスタム比較をサポートすることも<xref:System.Collections.IComparer>を実装、`comparer`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="81add-1865">You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter.</span></span> <span data-ttu-id="81add-1866">定義することでこの例では、`ReverseComparer`クラスの既定の並べ替え順序を反転する型のインスタンスと大文字の文字列比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-1866">The example does this by defining a `ReverseComparer` class that reverses the default sort order for instances of a type and performs case-insensitive string comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1867">次の例には、既定の比較子を使用して、文字列配列に値が並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="81add-1867">The following example sorts the values in a string array by using the default comparer.</span></span> <span data-ttu-id="81add-1868">カスタムも定義されています。<xref:System.Collections.IComparer>という名前の実装`ReverseComparer`大文字の文字列比較の実行中に、オブジェクトの既定の並べ替え順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-1868">It also defines a custom <xref:System.Collections.IComparer> implementation named `ReverseComparer` that reverses an object's default sort order while performing a case-insensitive string comparison.</span></span> <span data-ttu-id="81add-1869">出力は、現在のカルチャによって異なる場合がありますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="81add-1869">Note that the output might vary depending on the current culture.</span></span>  
  
 [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]
 [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]
 [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1870"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1870">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1871"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1871">is multidimensional.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-1872"> が <see langword="null" /> で、<paramref name="array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1872">is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-1873"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-1873">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-1874">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1874">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-1875">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1875">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-1876">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-1876">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-1877">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1877">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-1878">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1878">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1879">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1879">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array keys, Array items, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array keys, class System.Array items, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort (keys As Array, items As Array, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ keys, Array ^ items, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Sort : Array * Array * System.Collections.IComparer -&gt; unit" Usage="System.Array.Sort (keys, items, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="items" Type="System.Array" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="81add-1880">並べ替え対象となるキーを格納する 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1880">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="81add-1881"><paramref name="keys" /><see cref="T:System.Array" /> 内の各キーに対応する項目を格納する 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1881">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-1882">または</span><span class="sxs-lookup"><span data-stu-id="81add-1882">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-1883"><paramref name="keys" /><see cref="T:System.Array" /> のみを並べ替える場合は 。</span><span class="sxs-lookup"><span data-stu-id="81add-1883">to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-1884">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="81add-1884">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="81add-1885">または</span><span class="sxs-lookup"><span data-stu-id="81add-1885">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-1886">各要素の <see cref="T:System.IComparable" /> 実装を使用する 。</span><span class="sxs-lookup"><span data-stu-id="81add-1886">to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-1887">2 つの 1 次元 <see cref="T:System.Array" /> オブジェクト (一方のオブジェクトがキーを格納し、他方のオブジェクトがそれらに対応する項目を格納する) を、最初の <see cref="T:System.Array" /> 内のキーに基づき、指定した <see cref="T:System.Collections.IComparer" /> を使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1887">Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1888">各キーに、`keys`<xref:System.Array>に対応するアイテムがある、`items`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1888">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="81add-1889">並べ替え、対応する項目の中に、キーが移動したときに、`items`<xref:System.Array>同様の位置を変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-1889">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="81add-1890">そのため、`items`<xref:System.Array>が内の対応するキーの並べ替えに従って並び替え、`keys`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1890">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1891">場合`comparer`は`null`、それぞれのキー、`keys`<xref:System.Array>実装する必要があります、<xref:System.IComparable>他のすべてのキーの比較ができるようにするインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-1891">If `comparer` is `null`, each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="81add-1892">キーよりも項目がありますが、対応するキーのない項目が並べ替えられていない場合は並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1892">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="81add-1893">項目よりも多くのキーがある場合に並べ替えることはできません。スローされること、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1893">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="81add-1894">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-1894">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-1895">.NET Framework が含まれています定義済み<xref:System.Collections.IComparer>実装は、次の表に一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1895">The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.</span></span>  
  
|<span data-ttu-id="81add-1896">実装</span><span class="sxs-lookup"><span data-stu-id="81add-1896">Implementation</span></span>|<span data-ttu-id="81add-1897">説明</span><span class="sxs-lookup"><span data-stu-id="81add-1897">Description</span></span>|  
|--------------------|-----------------|  
|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>|<span data-ttu-id="81add-1898">任意の 2 つのオブジェクトを比較しますが、大文字と小文字の文字列を実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-1898">Compares any two objects, but performs a case-insensitive comparison of strings.</span></span>|  
|<xref:System.Collections.Comparer.Default?displayProperty=nameWithType>|<span data-ttu-id="81add-1899">現在のカルチャの並べ替え規則を使用して、2 つのオブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="81add-1899">Compares any two objects by using the sorting conventions of the current culture.</span></span>|  
|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=nameWithType>|<span data-ttu-id="81add-1900">インバリアント カルチャの並べ替え規則を使用して、2 つのオブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="81add-1900">Compares any two objects by using the sorting conventions of the invariant culture.</span></span>|  
|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>|<span data-ttu-id="81add-1901">型の 2 つのオブジェクトを比較`T`型の既定の並べ替え順序を使用しています。</span><span class="sxs-lookup"><span data-stu-id="81add-1901">Compares two objects of type `T` by using the type's default sort order.</span></span>|  
  
 <span data-ttu-id="81add-1902">独自のインスタンスを提供することで、カスタム比較をサポートすることも<xref:System.Collections.IComparer>を実装、`comparer`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="81add-1902">You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter.</span></span> <span data-ttu-id="81add-1903">定義することでこの例では、<xref:System.Collections.IComparer>既定の並べ替え順序を反転し、大文字の文字列を比較する実装。</span><span class="sxs-lookup"><span data-stu-id="81add-1903">The example does this by defining an <xref:System.Collections.IComparer> implementation that reverses the default sort order and performs case-insensitive string comparison.</span></span>  
  
 <span data-ttu-id="81add-1904">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1904">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-1905">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1905">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1906">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1906">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1907">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1907">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-1908">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1908">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-1909">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1909">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-1910">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`keys`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1910">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `keys`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1911">次の例では、キーと値を格納する 2 番目の配列の 2 つの関連付けられている配列を並べ替える方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1911">The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values.</span></span> <span data-ttu-id="81add-1912">並べ替えが完了したら、既定の比較子と並べ替え順序を反転するカスタム比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1912">Sorts are done using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="81add-1913">結果は、現在によって異なる場合がありますので注意<xref:System.Globalization.CultureInfo>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1913">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]
 [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]
 [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> <span data-ttu-id="81add-1914"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1914">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="81add-1915"><paramref name="keys" /><see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1915">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="81add-1916">または</span><span class="sxs-lookup"><span data-stu-id="81add-1916">-or-</span></span> 
<span data-ttu-id="81add-1917"><paramref name="items" /><see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1917">The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="items" /> <span data-ttu-id="81add-1918"> が <see langword="null" /> ではなく、<paramref name="keys" /> の長さが <paramref name="items" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-1918">is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-1919">または</span><span class="sxs-lookup"><span data-stu-id="81add-1919">-or-</span></span> 
<span data-ttu-id="81add-1920"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-1920">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-1921">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1921">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-1922"> が <see langword="null" /> であり、<paramref name="keys" /><see cref="T:System.Array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1922">is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-1923">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1923">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-1924">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-1924">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-1925">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-1925">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-1926">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1926">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1927">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1927">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ array, int index, int length);" />
      <MemberSignature Language="F#" Value="static member Sort : Array * int * int -&gt; unit" Usage="System.Array.Sort (array, index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1928">並べ替え対象となる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1928">The one-dimensional <see cref="T:System.Array" /> to sort.</span></span></param>
        <param name="index"><span data-ttu-id="81add-1929">並べ替え対象の範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1929">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="81add-1930">並べ替え対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1930">The number of elements in the range to sort.</span></span></param>
        <summary><span data-ttu-id="81add-1931"><see cref="T:System.Array" /> の各要素によって実装された <see cref="T:System.IComparable" /> を使用して、1 次元 <see cref="T:System.Array" /> の要素範囲を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1931">Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1932">内の要素の指定した範囲内の各要素`array`実装する必要があります、<xref:System.IComparable>の他のすべての要素との比較ができるようにするインターフェイス`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1932">Each element within the specified range of elements in `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="81add-1933">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-1933">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-1934">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1934">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-1935">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1935">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1936">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1936">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1937">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1937">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-1938">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1938">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-1939">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1939">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-1940">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1940">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1941">次のコード例の値を並べ替える方法を示しています、<xref:System.Array>既定の比較子と並べ替え順序を反転するカスタム比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1941">The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="81add-1942">結果は、現在によって異なる場合がありますので注意<xref:System.Globalization.CultureInfo>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1942">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]
 [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]
 [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-1943"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1943">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-1944"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1944">is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-1945"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-1945">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-1946">または</span><span class="sxs-lookup"><span data-stu-id="81add-1946">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-1947"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1947">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-1948"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-1948">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81add-1949"><paramref name="array" /> の 1 つ以上の要素が、<see cref="T:System.IComparable" /> インターフェイスを実装していません。</span><span class="sxs-lookup"><span data-stu-id="81add-1949">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1950">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1950">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array keys, Array items, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array keys, class System.Array items, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort (keys As Array, items As Array, index As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ keys, Array ^ items, int index, int length);" />
      <MemberSignature Language="F#" Value="static member Sort : Array * Array * int * int -&gt; unit" Usage="System.Array.Sort (keys, items, index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="items" Type="System.Array" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="81add-1951">並べ替え対象となるキーを格納する 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1951">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="81add-1952"><paramref name="keys" /><see cref="T:System.Array" /> 内の各キーに対応する項目を格納する 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1952">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-1953">または</span><span class="sxs-lookup"><span data-stu-id="81add-1953">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-1954"><paramref name="keys" /><see cref="T:System.Array" /> のみを並べ替える場合は 。</span><span class="sxs-lookup"><span data-stu-id="81add-1954">to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</span></span></param>
        <param name="index"><span data-ttu-id="81add-1955">並べ替え対象の範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1955">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="81add-1956">並べ替え対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1956">The number of elements in the range to sort.</span></span></param>
        <summary><span data-ttu-id="81add-1957">2 つの 1 次元 <see cref="T:System.Array" /> オブジェクト (一方のオブジェクトがキーを格納し、他方のオブジェクトがそれらに対応する項目を格納する) の要素範囲を、最初の <see cref="T:System.Array" /> 内のキーに基づき、各キーによって実装された <see cref="T:System.IComparable" /> を使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1957">Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1958">各キーに、`keys`<xref:System.Array>に対応するアイテムがある、`items`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1958">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="81add-1959">並べ替え、対応する項目の中に、キーが移動したときに、`items`<xref:System.Array>同様の位置を変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-1959">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="81add-1960">そのため、`items`<xref:System.Array>が内の対応するキーの並べ替えに従って並び替え、`keys`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1960">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-1961">指定した範囲内の要素の各キー、`keys`<xref:System.Array>実装する必要があります、<xref:System.IComparable>他のすべてのキーの比較ができるようにするインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-1961">Each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="81add-1962">キーよりも項目がありますが、対応するキーのない項目が並べ替えられていない場合は並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-1962">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="81add-1963">項目よりも多くのキーがある場合に並べ替えることはできません。スローされること、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1963">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="81add-1964">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-1964">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-1965">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1965">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-1966">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1966">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1967">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1967">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-1968">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-1968">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-1969">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-1969">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-1970">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-1970">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-1971">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1971">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-1972">次のコード例では、キーと値を格納する 2 番目の配列の 2 つの関連付けられている配列を並べ替える方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1972">The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values.</span></span> <span data-ttu-id="81add-1973">並べ替えが完了したら、既定の比較子と並べ替え順序を反転するカスタム比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-1973">Sorts are done using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="81add-1974">結果は、現在によって異なる場合がありますので注意<xref:System.Globalization.CultureInfo>します。</span><span class="sxs-lookup"><span data-stu-id="81add-1974">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]
 [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]
 [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> <span data-ttu-id="81add-1975"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-1975">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="81add-1976"><paramref name="keys" /><see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1976">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="81add-1977">または</span><span class="sxs-lookup"><span data-stu-id="81add-1977">-or-</span></span> 
<span data-ttu-id="81add-1978"><paramref name="items" /><see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-1978">The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-1979"> が <paramref name="keys" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-1979">is less than the lower bound of <paramref name="keys" />.</span></span>  
  
<span data-ttu-id="81add-1980">または</span><span class="sxs-lookup"><span data-stu-id="81add-1980">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-1981"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-1981">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="items" /> <span data-ttu-id="81add-1982"> が <see langword="null" /> ではなく、<paramref name="keys" /> の長さが <paramref name="items" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-1982">is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-1983">または</span><span class="sxs-lookup"><span data-stu-id="81add-1983">-or-</span></span> 
 <paramref name="index" /> <span data-ttu-id="81add-1984"> および <paramref name="length" /> によって <paramref name="keys" /><see cref="T:System.Array" /> 内の有効な範囲が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1984">and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-1985">または</span><span class="sxs-lookup"><span data-stu-id="81add-1985">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-1986"> が <see langword="null" /> ではなく、<paramref name="index" /> および <paramref name="length" /> によって <paramref name="items" /><see cref="T:System.Array" /> 内の有効な範囲が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1986">is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81add-1987"><paramref name="keys" /><see cref="T:System.Array" /> 内の 1 つまたは複数の要素に <see cref="T:System.IComparable" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-1987">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-1988">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-1988">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array array, int index, int length, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array array, int32 index, int32 length, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ array, int index, int length, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Sort : Array * int * int * System.Collections.IComparer -&gt; unit" Usage="System.Array.Sort (array, index, length, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="81add-1989">並べ替え対象となる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-1989">The one-dimensional <see cref="T:System.Array" /> to sort.</span></span></param>
        <param name="index"><span data-ttu-id="81add-1990">並べ替え対象の範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-1990">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="81add-1991">並べ替え対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-1991">The number of elements in the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-1992">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="81add-1992">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="81add-1993">または</span><span class="sxs-lookup"><span data-stu-id="81add-1993">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-1994">各要素の <see cref="T:System.IComparable" /> 実装を使用する 。</span><span class="sxs-lookup"><span data-stu-id="81add-1994">to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-1995">1 次元 <see cref="T:System.Array" /> の範囲内の要素範囲を、指定した <see cref="T:System.Collections.IComparer" /> を使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-1995">Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-1996">場合`comparer`は`null`、内の要素の指定した範囲内の各要素`array`実装する必要があります、<xref:System.IComparable>の他のすべての要素との比較ができるようにするインターフェイス`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-1996">If `comparer` is `null`, each element within the specified range of elements in `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="81add-1997">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-1997">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-1998">.NET Framework が含まれています定義済み<xref:System.Collections.IComparer>実装は、次の表に一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-1998">The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.</span></span>  
  
|<span data-ttu-id="81add-1999">実装</span><span class="sxs-lookup"><span data-stu-id="81add-1999">Implementation</span></span>|<span data-ttu-id="81add-2000">説明</span><span class="sxs-lookup"><span data-stu-id="81add-2000">Description</span></span>|  
|--------------------|-----------------|  
|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>|<span data-ttu-id="81add-2001">任意の 2 つのオブジェクトを比較しますが、大文字と小文字の文字列を実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-2001">Compares any two objects, but performs a case-insensitive comparison of strings.</span></span>|  
|<xref:System.Collections.Comparer.Default?displayProperty=nameWithType>|<span data-ttu-id="81add-2002">現在のカルチャの並べ替え規則を使用して、2 つのオブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="81add-2002">Compares any two objects by using the sorting conventions of the current culture.</span></span>|  
|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=nameWithType>|<span data-ttu-id="81add-2003">インバリアント カルチャの並べ替え規則を使用して、2 つのオブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="81add-2003">Compares any two objects by using the sorting conventions of the invariant culture.</span></span>|  
|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>|<span data-ttu-id="81add-2004">型の 2 つのオブジェクトを比較`T`型の既定の並べ替え順序を使用しています。</span><span class="sxs-lookup"><span data-stu-id="81add-2004">Compares two objects of type `T` by using the type's default sort order.</span></span>|  
  
 <span data-ttu-id="81add-2005">独自のインスタンスを提供することで、カスタム比較をサポートすることも<xref:System.Collections.IComparer>を実装、`comparer`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="81add-2005">You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter.</span></span> <span data-ttu-id="81add-2006">定義することでこの例では、`ReverseComparer`クラスの既定の並べ替え順序を反転する型のインスタンスと大文字の文字列比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-2006">The example does this by defining a `ReverseComparer` class that reverses the default sort order for instances of a type and performs case-insensitive string comparison.</span></span>  
  
 <span data-ttu-id="81add-2007">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2007">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2008">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2008">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2009">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2009">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2010">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2010">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2011">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2011">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2012">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2012">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2013">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2013">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2014">次のコード例の値を並べ替える方法を示しています、<xref:System.Array>既定の比較子と並べ替え順序を反転するカスタム比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2014">The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="81add-2015">結果は、現在によって異なる場合がありますので注意<xref:System.Globalization.CultureInfo>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2015">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]
 [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]
 [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-2016"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2016">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><paramref name="array" /> <span data-ttu-id="81add-2017"> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-2017">is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-2018"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-2018">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-2019">または</span><span class="sxs-lookup"><span data-stu-id="81add-2019">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-2020"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-2020">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-2021"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-2021">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-2022">または</span><span class="sxs-lookup"><span data-stu-id="81add-2022">-or-</span></span> 
<span data-ttu-id="81add-2023"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-2023">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-2024">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2024">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-2025"> が <see langword="null" /> で、<paramref name="array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2025">is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-2026">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2026">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-2027">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-2027">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-2028">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-2028">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-2029">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2029">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2030">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2030">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array keys, Array items, int index, int length, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array keys, class System.Array items, int32 index, int32 length, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort (keys As Array, items As Array, index As Integer, length As Integer, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ keys, Array ^ items, int index, int length, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Sort : Array * Array * int * int * System.Collections.IComparer -&gt; unit" Usage="System.Array.Sort (keys, items, index, length, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="items" Type="System.Array" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="81add-2031">並べ替え対象となるキーを格納する 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2031">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="81add-2032"><paramref name="keys" /><see cref="T:System.Array" /> 内の各キーに対応する項目を格納する 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2032">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-2033">または</span><span class="sxs-lookup"><span data-stu-id="81add-2033">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-2034"><paramref name="keys" /><see cref="T:System.Array" /> のみを並べ替える場合は 。</span><span class="sxs-lookup"><span data-stu-id="81add-2034">to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</span></span></param>
        <param name="index"><span data-ttu-id="81add-2035">並べ替え対象の範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-2035">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="81add-2036">並べ替え対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-2036">The number of elements in the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-2037">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="81add-2037">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="81add-2038">または</span><span class="sxs-lookup"><span data-stu-id="81add-2038">-or-</span></span> 
 <see langword="null" /> <span data-ttu-id="81add-2039">各要素の <see cref="T:System.IComparable" /> 実装を使用する 。</span><span class="sxs-lookup"><span data-stu-id="81add-2039">to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-2040">2 つの 1 次元 <see cref="T:System.Array" /> オブジェクト (一方のオブジェクトがキーを格納し、他方のオブジェクトがそれらに対応する項目を格納する) 内の要素範囲を、最初の <see cref="T:System.Array" /> 内のキーに基づき、指定した <see cref="T:System.Collections.IComparer" /> を使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2040">Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2041">各キーに、`keys`<xref:System.Array>に対応するアイテムがある、`items`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2041">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="81add-2042">並べ替え、対応する項目の中に、キーが移動したときに、`items`<xref:System.Array>同様の位置を変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-2042">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="81add-2043">そのため、`items`<xref:System.Array>が内の対応するキーの並べ替えに従って並び替え、`keys`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2043">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-2044">場合`comparer`は`null`、内の要素の指定された範囲内の各キー、`keys`<xref:System.Array>実装する必要があります、<xref:System.IComparable>他のすべてのキーの比較ができるようにするインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2044">If `comparer` is `null`, each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="81add-2045">キーよりも項目がありますが、対応するキーのない項目が並べ替えられていない場合は並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-2045">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="81add-2046">項目よりも多くのキーがある場合に並べ替えることはできません。スローされること、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2046">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="81add-2047">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2047">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2048">.NET Framework が含まれています定義済み<xref:System.Collections.IComparer>実装は、次の表に一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-2048">The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.</span></span>  
  
|<span data-ttu-id="81add-2049">実装</span><span class="sxs-lookup"><span data-stu-id="81add-2049">Implementation</span></span>|<span data-ttu-id="81add-2050">説明</span><span class="sxs-lookup"><span data-stu-id="81add-2050">Description</span></span>|  
|--------------------|-----------------|  
|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>|<span data-ttu-id="81add-2051">任意の 2 つのオブジェクトを比較しますが、大文字と小文字の文字列を実行します。</span><span class="sxs-lookup"><span data-stu-id="81add-2051">Compares any two objects, but performs a case-insensitive comparison of strings.</span></span>|  
|<xref:System.Collections.Comparer.Default?displayProperty=nameWithType>|<span data-ttu-id="81add-2052">現在のカルチャの並べ替え規則を使用して、2 つのオブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="81add-2052">Compares any two objects by using the sorting conventions of the current culture.</span></span>|  
|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=nameWithType>|<span data-ttu-id="81add-2053">インバリアント カルチャの並べ替え規則を使用して、2 つのオブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="81add-2053">Compares any two objects by using the sorting conventions of the invariant culture.</span></span>|  
|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>|<span data-ttu-id="81add-2054">型の 2 つのオブジェクトを比較`T`型の既定の並べ替え順序を使用しています。</span><span class="sxs-lookup"><span data-stu-id="81add-2054">Compares two objects of type `T` by using the type's default sort order.</span></span>|  
  
 <span data-ttu-id="81add-2055">独自のインスタンスを提供することで、カスタム比較をサポートすることも<xref:System.Collections.IComparer>を実装、`comparer`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="81add-2055">You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter.</span></span> <span data-ttu-id="81add-2056">この例ではこのカスタムを定義することで<xref:System.Collections.IComparer>既定の並べ替え順序を反転し、大文字の文字列を比較する実装。</span><span class="sxs-lookup"><span data-stu-id="81add-2056">The example does this by defining a custom <xref:System.Collections.IComparer> implementation that reverses the default sort order and performs case-insensitive string comparison.</span></span>  
  
 <span data-ttu-id="81add-2057">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2057">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2058">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2058">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2059">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2059">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2060">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2060">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2061">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2061">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2062">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2062">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2063">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2063">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2064">次のコード例では、キーと値を格納する 2 番目の配列の 2 つの関連付けられている配列を並べ替える方法を示します。</span><span class="sxs-lookup"><span data-stu-id="81add-2064">The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values.</span></span> <span data-ttu-id="81add-2065">並べ替えが完了したら、既定の比較子と並べ替え順序を反転するカスタム比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2065">Sorts are done using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="81add-2066">結果は、現在によって異なる場合がありますので注意<xref:System.Globalization.CultureInfo>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2066">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]
 [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]
 [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> <span data-ttu-id="81add-2067"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2067">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="81add-2068"><paramref name="keys" /><see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-2068">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="81add-2069">または</span><span class="sxs-lookup"><span data-stu-id="81add-2069">-or-</span></span> 
<span data-ttu-id="81add-2070"><paramref name="items" /><see cref="T:System.Array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="81add-2070">The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-2071"> が <paramref name="keys" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-2071">is less than the lower bound of <paramref name="keys" />.</span></span>  
  
<span data-ttu-id="81add-2072">または</span><span class="sxs-lookup"><span data-stu-id="81add-2072">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-2073"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-2073">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="items" /> <span data-ttu-id="81add-2074"> が <see langword="null" /> ではなく、<paramref name="keys" /> の下限が <paramref name="items" /> の下限と一致していません。</span><span class="sxs-lookup"><span data-stu-id="81add-2074">is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2075">または</span><span class="sxs-lookup"><span data-stu-id="81add-2075">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-2076"> が <see langword="null" /> ではなく、<paramref name="keys" /> の長さが <paramref name="items" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-2076">is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2077">または</span><span class="sxs-lookup"><span data-stu-id="81add-2077">-or-</span></span> 
 <paramref name="index" /> <span data-ttu-id="81add-2078"> および <paramref name="length" /> によって <paramref name="keys" /><see cref="T:System.Array" /> 内の有効な範囲が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2078">and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-2079">または</span><span class="sxs-lookup"><span data-stu-id="81add-2079">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-2080"> が <see langword="null" /> ではなく、<paramref name="index" /> および <paramref name="length" /> によって <paramref name="items" /><see cref="T:System.Array" /> 内の有効な範囲が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2080">is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-2081">または</span><span class="sxs-lookup"><span data-stu-id="81add-2081">-or-</span></span> 
<span data-ttu-id="81add-2082"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-2082">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-2083">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2083">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-2084"> が <see langword="null" /> であり、<paramref name="keys" /><see cref="T:System.Array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2084">is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-2085">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2085">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-2086">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-2086">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-2087">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-2087">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-2088">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2088">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2089">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2089">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member Sort : 'T[] -&gt; unit" Usage="System.Array.Sort array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-2090">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2090">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-2091">並べ替え対象となる、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2091">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</span></span></param>
        <summary><span data-ttu-id="81add-2092"><see cref="T:System.Array" /> の各要素によって実装された <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して、<see cref="T:System.Array" /> 全体の要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2092">Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2093">各要素`array`実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスの他のすべての要素との比較ができるようにする`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2093">Each element of `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="81add-2094">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2094">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2095">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2095">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2096">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2096">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2097">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2097">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2098">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2098">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2099">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2099">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2100">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2100">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2101">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2101">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2102">次のコード例に示します、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%29>ジェネリック メソッドのオーバー ロードと<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29>ジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-2102">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload.</span></span> <span data-ttu-id="81add-2103">文字列の配列は、任意の順序に作成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2103">An array of strings is created, in no particular order.</span></span>  
  
 <span data-ttu-id="81add-2104">配列が表示され、並べ替え、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2104">The array is displayed, sorted, and displayed again.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2105">呼び出し、<xref:System.Array.Sort%2A>と<xref:System.Array.BinarySearch%2A>Visual Basic、c#、および C++ は、最初の引数の型とジェネリック型パラメーターの型を推論するため、ジェネリック メソッドの呼び出しを非ジェネリックの対応する間に違い探さないです。</span><span class="sxs-lookup"><span data-stu-id="81add-2105">The calls to the <xref:System.Array.Sort%2A> and <xref:System.Array.BinarySearch%2A> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="81add-2106">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2106">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 <span data-ttu-id="81add-2107"><xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29>ジェネリック メソッドのオーバー ロードが 2 つの文字列を検索するために使用しではない配列および 1 つを 1 つです。</span><span class="sxs-lookup"><span data-stu-id="81add-2107">The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload is then used to search for two strings, one that is not in the array and one that is.</span></span> <span data-ttu-id="81add-2108">配列との戻り値、<xref:System.Array.BinarySearch%2A>メソッドに渡される、`ShowWhere`ジェネリック メソッドは、それ以外の場合、要素検索文字列が間に、配列を使用した場合、文字列が見つかった場合は、インデックス値を表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-2108">The array and the return value of the <xref:System.Array.BinarySearch%2A> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array.</span></span> <span data-ttu-id="81add-2109">インデックスが負の値、文字列は、n がない場合、配列のため、`ShowWhere`メソッドは、ビットごとの補数 (、~ c# および Visual C は、演算子`Xor`Visual Basic で-1) 検索からよりも大きい一覧の最初の要素のインデックスを取得するにはng です。</span><span class="sxs-lookup"><span data-stu-id="81add-2109">The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</span></span>  
  
 [!code-cpp[Array_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[Array_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearch/cs/source.cs#1)]
 [!code-vb[Array_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-2110"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2110">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81add-2111"><paramref name="array" /> の 1 つ以上の要素が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装していません。</span><span class="sxs-lookup"><span data-stu-id="81add-2111">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2112">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2112">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T(), comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Sort : 'T[] * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="System.Array.Sort (array, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-2113">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2113">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-2114">並べ替える 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2114">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-2115">要素を比較する際に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装。各要素が実装する <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2115">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-2116"><see cref="T:System.Array" /> 内の要素を、指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2116">Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2117">場合`comparer`は`null`の各要素`array`実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスの他のすべての要素との比較ができるようにする`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2117">If `comparer` is `null`, each element of `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="81add-2118">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2118">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2119">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2119">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2120">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2120">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2121">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2121">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2122">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2122">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2123">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2123">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2124">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2124">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2125">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2125">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2126">次のコード例に示します、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロードと<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-2126">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload.</span></span>  
  
 <span data-ttu-id="81add-2127">コード例では、という名前の文字列の代替の比較子を定義します。 `ReverseCompare`、実装、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual c で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2127">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="81add-2128">比較演算子の呼び出し、<xref:System.String.CompareTo%28System.String%29>メソッドは、文字列は、低-高のではなく高から低を並べ替えられるように、比較対照値の順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-2128">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="81add-2129">配列が表示され、並べ替え、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2129">The array is displayed, sorted, and displayed again.</span></span> <span data-ttu-id="81add-2130">使用するには、配列を並べ替える必要があります、<xref:System.Array.BinarySearch%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-2130">Arrays must be sorted in order to use the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2131">呼び出し、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>と<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>Visual Basic、c#、および C++ は、最初の引数の型とジェネリック型パラメーターの型を推論するため、ジェネリック メソッドの呼び出しを非ジェネリックの対応する間に違い探さないです。</span><span class="sxs-lookup"><span data-stu-id="81add-2131">The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="81add-2132">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2132">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 <span data-ttu-id="81add-2133"><xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロードが 2 つの文字列を検索するために使用しではない配列および 1 つを 1 つです。</span><span class="sxs-lookup"><span data-stu-id="81add-2133">The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is then used to search for two strings, one that is not in the array and one that is.</span></span> <span data-ttu-id="81add-2134">配列との戻り値、<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>メソッドに渡される、`ShowWhere`ジェネリック メソッドは、それ以外の場合、要素検索文字列が間に、配列を使用した場合、文字列が見つかった場合は、インデックス値を表示します。</span><span class="sxs-lookup"><span data-stu-id="81add-2134">The array and the return value of the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array.</span></span> <span data-ttu-id="81add-2135">インデックスが負の値、文字列は、n がない場合、配列のため、`ShowWhere`メソッドは、ビットごとの補数 (、~ c# および Visual C は、演算子`Xor`Visual Basic で-1) 検索からよりも大きい一覧の最初の要素のインデックスを取得するにはng です。</span><span class="sxs-lookup"><span data-stu-id="81add-2135">The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</span></span>  
  
 [!code-cpp[Array_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[Array_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-2136"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2136">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-2137"> が <see langword="null" /> であり、<paramref name="array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2137">is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-2138"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-2138">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-2139">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2139">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-2140">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2140">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-2141">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-2141">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-2142">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-2142">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-2143">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2143">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2144">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2144">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array, Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array, class System.Comparison`1&lt;!!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[],System.Comparison{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T(), comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array, Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Sort : 'T[] * Comparison&lt;'T&gt; -&gt; unit" Usage="System.Array.Sort (array, comparison)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-2145">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2145">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-2146">並べ替える 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2146">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</span></span></param>
        <param name="comparison"><span data-ttu-id="81add-2147">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2147">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span></span></param>
        <summary><span data-ttu-id="81add-2148"><see cref="T:System.Array" /> 内の要素を、指定した <see cref="T:System.Comparison`1" /> を使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2148">Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2149">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2149">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2150">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2150">This method uses introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2151">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2151">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2152">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2152">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2153">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2153">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2154">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2154">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2155">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2155">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2156">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2156">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2157">次のコード例に示します、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-2157">The following code example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="81add-2158">コード例は、という名前の文字列の代替の比較メソッドを定義`CompareDinosByLength`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2158">The code example defines an alternative comparison method for strings, named `CompareDinosByLength`.</span></span> <span data-ttu-id="81add-2159">このメソッドは、次のように機能します。最初にの比較対照値がテストされます`null`、null 参照が null でない未満として扱われます。</span><span class="sxs-lookup"><span data-stu-id="81add-2159">This method works as follows: First, the comparands are tested for`null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="81add-2160">次に、文字列の長さを比較してより長い文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="81add-2160">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="81add-2161">3 番目に、長さが等しい場合は、通常の文字列比較が使用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2161">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="81add-2162">文字列の配列が作成され、任意の順序で、4 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2162">A array of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="81add-2163">一覧には、空の文字列と null 参照も含まれています。</span><span class="sxs-lookup"><span data-stu-id="81add-2163">The list also includes an empty string and a null reference.</span></span> <span data-ttu-id="81add-2164">一覧を表示すると、並べ替えを使用して、<xref:System.Comparison%601>を表すジェネリック デリゲート、`CompareDinosByLength`メソッドを再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2164">The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.</span></span>  
  
 [!code-cpp[Array_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[Array_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortComparison/cs/source.cs#1)]
 [!code-vb[Array_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-2165"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2165">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-2166">または</span><span class="sxs-lookup"><span data-stu-id="81add-2166">-or-</span></span> 
 <paramref name="comparison" /> <span data-ttu-id="81add-2167"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2167">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-2168"><paramref name="comparison" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-2168">The implementation of <paramref name="comparison" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-2169">たとえば、<paramref name="comparison" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2169">For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-2170">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2170">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-2171">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-2171">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-2172">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-2172">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-2173">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2173">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Comparison`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2174">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2174">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T(), index As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array, int index, int length);" />
      <MemberSignature Language="F#" Value="static member Sort : 'T[] * int * int -&gt; unit" Usage="System.Array.Sort (array, index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-2175">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2175">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-2176">並べ替える 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2176">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</span></span></param>
        <param name="index"><span data-ttu-id="81add-2177">並べ替え対象の範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-2177">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="81add-2178">並べ替え対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-2178">The number of elements in the range to sort.</span></span></param>
        <summary><span data-ttu-id="81add-2179"><see cref="T:System.Array" /> の各要素によって実装された <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して、<see cref="T:System.Array" /> の要素範囲を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2179">Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2180">内の要素の指定した範囲内の各要素`array`実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスの他のすべての要素との比較ができるようにする`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2180">Each element within the specified range of elements in `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="81add-2181">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2181">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2182">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2182">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2183">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2183">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2184">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2184">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2185">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2185">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2186">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2186">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2187">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2187">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2188">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2188">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2189">次のコード例に示します、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ジェネリック メソッドのオーバー ロードと<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>配列内の範囲の並べ替えのジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-2189">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload and the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload for sorting a range in an array.</span></span>  
  
 <span data-ttu-id="81add-2190">コード例では、という名前の文字列の代替の比較子を定義します。 `ReverseCompare`、実装、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual c で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2190">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="81add-2191">比較演算子の呼び出し、<xref:System.String.CompareTo%28System.String%29>メソッドは、文字列は、低-高のではなく高から低を並べ替えられるように、比較対照値の順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-2191">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="81add-2192">コード例では、作成し、配列では、正確に) 後に次の 3 つの恐竜から成る、恐竜名が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2192">The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise).</span></span> <span data-ttu-id="81add-2193"><xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ジェネリック メソッドのオーバー ロードが表示されると、配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2193">The <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload is used to sort the last three elements of the array, which is then displayed.</span></span> <span data-ttu-id="81add-2194"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロードが併用`ReverseCompare`最後の 3 つの要素を逆の順序で並べ替える。</span><span class="sxs-lookup"><span data-stu-id="81add-2194">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is used with `ReverseCompare` to sort the last three elements in reverse order.</span></span> <span data-ttu-id="81add-2195">完全に混乱した恐竜が再度表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2195">The thoroughly confused dinosaurs are displayed again.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2196">呼び出し、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>と<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>Visual Basic、c#、および C++ は、最初の引数の型とジェネリック型パラメーターの型を推論するため、ジェネリック メソッドの呼び出しを非ジェネリックの対応する間に違い探さないです。</span><span class="sxs-lookup"><span data-stu-id="81add-2196">The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="81add-2197">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2197">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_SortIntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortIntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_SortIntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortIntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_SortIntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortIntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-2198"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2198">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-2199"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-2199">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-2200">または</span><span class="sxs-lookup"><span data-stu-id="81add-2200">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-2201"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-2201">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-2202"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-2202">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81add-2203"><paramref name="array" /> の 1 つ以上の要素が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを実装していません。</span><span class="sxs-lookup"><span data-stu-id="81add-2203">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2204">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2204">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array, int index, int length, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array, int32 index, int32 length, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T(), index As Integer, length As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array, int index, int length, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Sort : 'T[] * int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="System.Array.Sort (array, index, length, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-2205">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2205">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-2206">並べ替え対象となる、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2206">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</span></span></param>
        <param name="index"><span data-ttu-id="81add-2207">並べ替え対象の範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-2207">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="81add-2208">並べ替え対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-2208">The number of elements in the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-2209">要素を比較する際に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装。各要素が実装する <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2209">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-2210">指定した <see cref="T:System.Array" /> ジェネリック インターフェイスを使用して、<see cref="T:System.Collections.Generic.IComparer`1" /> 内の要素範囲を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2210">Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2211">場合`comparer`は`null`、内の要素の指定した範囲内の各要素`array`実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスの他のすべての要素との比較ができるようにする`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2211">If `comparer` is `null`, each element within the specified range of elements in `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="81add-2212">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2212">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2213">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2213">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2214">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2214">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2215">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2215">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2216">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2216">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2217">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2217">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2218">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2218">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2219">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2219">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2220">次のコード例に示します、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ジェネリック メソッドのオーバー ロードと<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>配列内の範囲の並べ替えのジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-2220">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload and the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload for sorting a range in an array.</span></span>  
  
 <span data-ttu-id="81add-2221">コード例では、という名前の文字列の代替の比較子を定義します。 `ReverseCompare`、実装、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual c で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2221">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="81add-2222">比較演算子の呼び出し、<xref:System.String.CompareTo%28System.String%29>メソッドは、文字列は、低-高のではなく高から低を並べ替えられるように、比較対照値の順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-2222">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="81add-2223">コード例では、作成し、配列では、正確に) 後に次の 3 つの恐竜から成る、恐竜名が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2223">The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise).</span></span> <span data-ttu-id="81add-2224"><xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ジェネリック メソッドのオーバー ロードが表示されると、配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2224">The <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload is used to sort the last three elements of the array, which is then displayed.</span></span> <span data-ttu-id="81add-2225"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロードが併用`ReverseCompare`最後の 3 つの要素を逆の順序で並べ替える。</span><span class="sxs-lookup"><span data-stu-id="81add-2225">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is used with `ReverseCompare` to sort the last three elements in reverse order.</span></span> <span data-ttu-id="81add-2226">完全に混乱した恐竜が再度表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2226">The thoroughly confused dinosaurs are displayed again.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2227">呼び出し、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>と<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>Visual Basic、c#、および C++ は、最初の引数の型とジェネリック型パラメーターの型を推論するため、ジェネリック メソッドの呼び出しを非ジェネリックの対応する間に違い探さないです。</span><span class="sxs-lookup"><span data-stu-id="81add-2227">The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="81add-2228">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2228">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_SortIntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortIntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_SortIntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortIntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_SortIntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortIntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-2229"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2229">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-2230"> は、<paramref name="array" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-2230">is less than the lower bound of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-2231">または</span><span class="sxs-lookup"><span data-stu-id="81add-2231">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-2232"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-2232">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> <span data-ttu-id="81add-2233"> および <paramref name="length" /> では <paramref name="array" /> の有効な範囲は指定されません。</span><span class="sxs-lookup"><span data-stu-id="81add-2233">and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
<span data-ttu-id="81add-2234">または</span><span class="sxs-lookup"><span data-stu-id="81add-2234">-or-</span></span> 
<span data-ttu-id="81add-2235"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-2235">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-2236">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2236">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-2237"> が <see langword="null" /> であり、<paramref name="array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2237">is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-2238">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2238">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-2239">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-2239">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-2240">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-2240">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-2241">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2241">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2242">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2242">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;TKey, TValue&gt;(!!TKey[] keys, !!TValue[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``2(``0[],``1[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of TKey, TValue) (keys As TKey(), items As TValue())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static void Sort(cli::array &lt;TKey&gt; ^ keys, cli::array &lt;TValue&gt; ^ items);" />
      <MemberSignature Language="F#" Value="static member Sort : 'Key[] * 'Value[] -&gt; unit" Usage="System.Array.Sort (keys, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keys" Type="TKey[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="items" Type="TValue[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="81add-2243">キー用の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2243">The type of the elements of the key array.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="81add-2244">項目用の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2244">The type of the elements of the items array.</span></span></typeparam>
        <param name="keys"><span data-ttu-id="81add-2245">並べ替えるキーを格納している 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2245">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="81add-2246"><paramref name="keys" /> 内のキーに対応する項目が格納された、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。<paramref name="keys" /> だけを並べ替える場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2246">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</span></span></param>
        <summary><span data-ttu-id="81add-2247">2 つの <see cref="T:System.Array" /> オブジェクト (一方のオブジェクトがキーを格納し、他方のオブジェクトがそれらに対応する項目を格納する) を、最初の <see cref="T:System.Array" /> 内のキーに基づき、各キーによって実装された <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2247">Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2248">各キーに、`keys`<xref:System.Array>に対応するアイテムがある、`items`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2248">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="81add-2249">並べ替え、対応する項目の中に、キーが移動したときに、`items`<xref:System.Array>同様の位置を変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-2249">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="81add-2250">そのため、`items`<xref:System.Array>が内の対応するキーの並べ替えに従って並び替え、`keys`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2250">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-2251">各キーに、`keys`<xref:System.Array>実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスとその他のすべてのキーの比較ができるようにします。</span><span class="sxs-lookup"><span data-stu-id="81add-2251">Each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="81add-2252">キーよりも項目がありますが、対応するキーのない項目が並べ替えられていない場合は並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-2252">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="81add-2253">項目よりも多くのキーがある場合に並べ替えることはできません。スローされること、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2253">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="81add-2254">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2254">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2255">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2255">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2256">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2256">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2257">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2257">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2258">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2258">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2259">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2259">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2260">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2260">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2261">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2261">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2262">次のコード例に示します、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>、および<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>の並べ替えキーと値を表す配列のペアのジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-2262">The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.</span></span>  
  
 <span data-ttu-id="81add-2263">コード例では、という名前の文字列の代替の比較子を定義します。 `ReverseCompare`、実装、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual c で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2263">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="81add-2264">比較演算子の呼び出し、<xref:System.String.CompareTo%28System.String%29>メソッドは、文字列は、低-高のではなく高から低を並べ替えられるように、比較対照値の順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-2264">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="81add-2265">コード例では、作成し、恐竜の名前 (キー) の配列と各恐竜 (値) のメートル単位の最大長を表す整数の配列が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2265">The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values).</span></span> <span data-ttu-id="81add-2266">アレイは、並べ替えし、複数回表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2266">The arrays are then sorted and displayed several times:</span></span>  
  
-   <span data-ttu-id="81add-2267"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>オーバー ロードは、最初の配列での恐竜名の順序で両方の配列の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2267">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.</span></span>  
  
-   <span data-ttu-id="81add-2268"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>オーバー ロードのインスタンスおよび`ReverseCompare`ペアの配列の並べ替え順序を反転させるために使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2268">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.</span></span>  
  
-   <span data-ttu-id="81add-2269"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>オーバー ロードが両方の配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2269">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.</span></span>  
  
-   <span data-ttu-id="81add-2270"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>オーバー ロードは逆の順序で両方の配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2270">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2271">ジェネリック メソッドの呼び出しを探さない、対応する非への呼び出しから、さまざまな Visual Basic、c#、および C++ 最初の 2 つの引数の型からのジェネリック型パラメーターの型を推論するためです。</span><span class="sxs-lookup"><span data-stu-id="81add-2271">The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments.</span></span> <span data-ttu-id="81add-2272">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2272">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> <span data-ttu-id="81add-2273"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2273">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="items" /> <span data-ttu-id="81add-2274"> が <see langword="null" /> ではなく、<paramref name="keys" /> の下限が <paramref name="items" /> の下限と一致していません。</span><span class="sxs-lookup"><span data-stu-id="81add-2274">is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2275">または</span><span class="sxs-lookup"><span data-stu-id="81add-2275">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-2276"> が <see langword="null" /> ではなく、<paramref name="keys" /> の長さが <paramref name="items" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-2276">is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81add-2277"><paramref name="keys" /><see cref="T:System.Array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2277">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2278">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2278">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;TKey, TValue&gt;(!!TKey[] keys, !!TValue[] items, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of TKey, TValue) (keys As TKey(), items As TValue(), comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static void Sort(cli::array &lt;TKey&gt; ^ keys, cli::array &lt;TValue&gt; ^ items, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Sort : 'Key[] * 'Value[] * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; unit" Usage="System.Array.Sort (keys, items, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keys" Type="TKey[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="items" Type="TValue[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="81add-2279">キー用の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2279">The type of the elements of the key array.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="81add-2280">項目用の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2280">The type of the elements of the items array.</span></span></typeparam>
        <param name="keys"><span data-ttu-id="81add-2281">並べ替えるキーを格納している 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2281">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="81add-2282"><paramref name="keys" /> 内のキーに対応する項目が格納された、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。<paramref name="keys" /> だけを並べ替える場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2282">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-2283">要素を比較する際に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装。各要素が実装する <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2283">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-2284">2 つの <see cref="T:System.Array" /> オブジェクト (一方のオブジェクトがキーを格納し、他方のオブジェクトがそれらに対応する項目を格納する) を、最初の <see cref="T:System.Array" /> 内のキーに基づき、指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2284">Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2285">各キーに、`keys`<xref:System.Array>に対応するアイテムがある、`items`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2285">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="81add-2286">並べ替え、対応する項目の中に、キーが移動したときに、`items`<xref:System.Array>同様の位置を変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-2286">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="81add-2287">そのため、`items`<xref:System.Array>が内の対応するキーの並べ替えに従って並び替え、`keys`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2287">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-2288">場合`comparer`は`null`、それぞれのキー、`keys`<xref:System.Array>実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスとその他のすべてのキーの比較ができるようにします。</span><span class="sxs-lookup"><span data-stu-id="81add-2288">If `comparer` is `null`, each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="81add-2289">キーよりも項目がありますが、対応するキーのない項目が並べ替えられていない場合は並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-2289">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="81add-2290">項目よりも多くのキーがある場合に並べ替えることはできません。スローされること、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2290">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="81add-2291">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2291">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2292">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2292">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2293">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2293">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2294">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2294">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2295">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2295">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2296">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2296">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2297">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2297">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2298">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2298">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2299">次のコード例に示します、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>、[\]、TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29 >、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>の並べ替えキーと値を表す配列のペアのジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-2299">The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>,<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.</span></span>  
  
 <span data-ttu-id="81add-2300">コード例では、という名前の文字列の代替の比較子を定義します。 `ReverseCompare`、実装、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual c で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2300">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="81add-2301">比較演算子の呼び出し、<xref:System.String.CompareTo%28System.String%29>メソッドは、文字列は、低-高のではなく高から低を並べ替えられるように、比較対照値の順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-2301">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="81add-2302">コード例では、作成し、恐竜の名前 (キー) の配列と各恐竜 (値) のメートル単位の最大長を表す整数の配列が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2302">The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values).</span></span> <span data-ttu-id="81add-2303">アレイは、並べ替えし、複数回表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2303">The arrays are then sorted and displayed several times:</span></span>  
  
-   <span data-ttu-id="81add-2304"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>オーバー ロードは、最初の配列での恐竜名の順序で両方の配列の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2304">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.</span></span>  
  
-   <span data-ttu-id="81add-2305">[\]、TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29 > オーバー ロードのインスタンスおよび`ReverseCompare`並べ替え順序を反転させるために使用ペアの配列。</span><span class="sxs-lookup"><span data-stu-id="81add-2305">The [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.</span></span>  
  
-   <span data-ttu-id="81add-2306"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>オーバー ロードが両方の配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2306">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.</span></span>  
  
-   <span data-ttu-id="81add-2307"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>オーバー ロードは逆の順序で両方の配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2307">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2308">ジェネリック メソッドの呼び出しを探さない、対応する非への呼び出しから、さまざまな Visual Basic、c#、および C++ 最初の 2 つの引数の型からのジェネリック型パラメーターの型を推論するためです。</span><span class="sxs-lookup"><span data-stu-id="81add-2308">The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments.</span></span> <span data-ttu-id="81add-2309">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2309">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> <span data-ttu-id="81add-2310"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2310">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="items" /> <span data-ttu-id="81add-2311"> が <see langword="null" /> ではなく、<paramref name="keys" /> の下限が <paramref name="items" /> の下限と一致していません。</span><span class="sxs-lookup"><span data-stu-id="81add-2311">is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2312">または</span><span class="sxs-lookup"><span data-stu-id="81add-2312">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-2313"> が <see langword="null" /> ではなく、<paramref name="keys" /> の長さが <paramref name="items" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-2313">is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2314">または</span><span class="sxs-lookup"><span data-stu-id="81add-2314">-or-</span></span> 
<span data-ttu-id="81add-2315"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-2315">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-2316">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2316">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-2317"> が <see langword="null" /> であり、<paramref name="keys" /><see cref="T:System.Array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2317">is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-2318">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2318">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-2319">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-2319">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-2320">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-2320">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-2321">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2321">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2322">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2322">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;TKey, TValue&gt;(!!TKey[] keys, !!TValue[] items, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of TKey, TValue) (keys As TKey(), items As TValue(), index As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static void Sort(cli::array &lt;TKey&gt; ^ keys, cli::array &lt;TValue&gt; ^ items, int index, int length);" />
      <MemberSignature Language="F#" Value="static member Sort : 'Key[] * 'Value[] * int * int -&gt; unit" Usage="System.Array.Sort (keys, items, index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keys" Type="TKey[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="items" Type="TValue[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="81add-2323">キー用の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2323">The type of the elements of the key array.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="81add-2324">項目用の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2324">The type of the elements of the items array.</span></span></typeparam>
        <param name="keys"><span data-ttu-id="81add-2325">並べ替えるキーを格納している 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2325">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="81add-2326"><paramref name="keys" /> 内のキーに対応する項目が格納された、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。<paramref name="keys" /> だけを並べ替える場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2326">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</span></span></param>
        <param name="index"><span data-ttu-id="81add-2327">並べ替え対象の範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-2327">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="81add-2328">並べ替え対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-2328">The number of elements in the range to sort.</span></span></param>
        <summary><span data-ttu-id="81add-2329">2 つの <see cref="T:System.Array" /> オブジェクト (一方のオブジェクトがキーを格納し、他方のオブジェクトがそれらに対応する項目を格納する) の要素範囲を、最初の <see cref="T:System.Array" /> 内のキーに基づき、各キーによって実装された <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2329">Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2330">各キーに、`keys`<xref:System.Array>に対応するアイテムがある、`items`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2330">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="81add-2331">並べ替え、対応する項目の中に、キーが移動したときに、`items`<xref:System.Array>同様の位置を変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-2331">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="81add-2332">そのため、`items`<xref:System.Array>が内の対応するキーの並べ替えに従って並び替え、`keys`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2332">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-2333">指定した範囲内の要素の各キー、`keys`<xref:System.Array>実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスとその他のすべてのキーの比較ができるようにします。</span><span class="sxs-lookup"><span data-stu-id="81add-2333">Each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="81add-2334">キーよりも項目がありますが、対応するキーのない項目が並べ替えられていない場合は並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-2334">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="81add-2335">項目よりも多くのキーがある場合に並べ替えることはできません。スローされること、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2335">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="81add-2336">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2336">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2337">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2337">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2338">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2338">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2339">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2339">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2340">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2340">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2341">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2341">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2342">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2342">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2343">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2343">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2344">次のコード例に示します、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>、[\]、TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29 >、および<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>ジェネリック メソッドのオーバー ロード、並べ替えキーと値を表す配列のペア。</span><span class="sxs-lookup"><span data-stu-id="81add-2344">The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.</span></span>  
  
 <span data-ttu-id="81add-2345">コード例では、という名前の文字列の代替の比較子を定義します。 `ReverseCompare`、実装、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual c で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2345">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="81add-2346">比較演算子の呼び出し、<xref:System.String.CompareTo%28System.String%29>メソッドは、文字列は、低-高のではなく高から低を並べ替えられるように、比較対照値の順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-2346">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="81add-2347">コード例では、作成し、恐竜の名前 (キー) の配列と各恐竜 (値) のメートル単位の最大長を表す整数の配列が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2347">The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values).</span></span> <span data-ttu-id="81add-2348">アレイは、並べ替えし、複数回表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2348">The arrays are then sorted and displayed several times:</span></span>  
  
-   <span data-ttu-id="81add-2349"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>オーバー ロードは、最初の配列での恐竜名の順序で両方の配列の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2349">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.</span></span>  
  
-   <span data-ttu-id="81add-2350"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>オーバー ロードのインスタンスおよび`ReverseCompare`ペアの配列の並べ替え順序を反転させるために使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2350">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.</span></span>  
  
-   <span data-ttu-id="81add-2351">[\]、TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29 > オーバー ロードが両方の配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2351">The [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.</span></span>  
  
-   <span data-ttu-id="81add-2352"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>オーバー ロードは逆の順序で両方の配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2352">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2353">ジェネリック メソッドの呼び出しを探さない、対応する非への呼び出しから、さまざまな Visual Basic、c#、および C++ 最初の 2 つの引数の型からのジェネリック型パラメーターの型を推論するためです。</span><span class="sxs-lookup"><span data-stu-id="81add-2353">The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments.</span></span> <span data-ttu-id="81add-2354">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2354">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> <span data-ttu-id="81add-2355"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2355">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-2356"> が <paramref name="keys" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-2356">is less than the lower bound of <paramref name="keys" />.</span></span>  
  
<span data-ttu-id="81add-2357">または</span><span class="sxs-lookup"><span data-stu-id="81add-2357">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-2358"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-2358">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="items" /> <span data-ttu-id="81add-2359"> が <see langword="null" /> ではなく、<paramref name="keys" /> の下限が <paramref name="items" /> の下限と一致していません。</span><span class="sxs-lookup"><span data-stu-id="81add-2359">is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2360">または</span><span class="sxs-lookup"><span data-stu-id="81add-2360">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-2361"> が <see langword="null" /> ではなく、<paramref name="keys" /> の長さが <paramref name="items" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-2361">is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2362">または</span><span class="sxs-lookup"><span data-stu-id="81add-2362">-or-</span></span> 
 <paramref name="index" /> <span data-ttu-id="81add-2363"> および <paramref name="length" /> によって <paramref name="keys" /><see cref="T:System.Array" /> 内の有効な範囲が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2363">and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-2364">または</span><span class="sxs-lookup"><span data-stu-id="81add-2364">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-2365"> が <see langword="null" /> ではなく、<paramref name="index" /> および <paramref name="length" /> によって <paramref name="items" /><see cref="T:System.Array" /> 内の有効な範囲が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2365">is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="81add-2366"><paramref name="keys" /><see cref="T:System.Array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2366">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2367">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2367">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;TKey, TValue&gt;(!!TKey[] keys, !!TValue[] items, int32 index, int32 length, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of TKey, TValue) (keys As TKey(), items As TValue(), index As Integer, length As Integer, comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static void Sort(cli::array &lt;TKey&gt; ^ keys, cli::array &lt;TValue&gt; ^ items, int index, int length, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Sort : 'Key[] * 'Value[] * int * int * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; unit" Usage="System.Array.Sort (keys, items, index, length, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keys" Type="TKey[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="items" Type="TValue[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="81add-2368">キー用の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2368">The type of the elements of the key array.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="81add-2369">項目用の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2369">The type of the elements of the items array.</span></span></typeparam>
        <param name="keys"><span data-ttu-id="81add-2370">並べ替えるキーを格納している 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2370">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="81add-2371"><paramref name="keys" /> 内のキーに対応する項目が格納された、インデックス番号が 0 から始まる 1 次元 <see cref="T:System.Array" />。<paramref name="keys" /> だけを並べ替える場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2371">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</span></span></param>
        <param name="index"><span data-ttu-id="81add-2372">並べ替え対象の範囲の開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-2372">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="81add-2373">並べ替え対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-2373">The number of elements in the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-2374">要素を比較する際に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装。各要素が実装する <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2374">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</span></span></param>
        <summary><span data-ttu-id="81add-2375">2 つの <see cref="T:System.Array" /> オブジェクト (一方のオブジェクトがキーを格納し、他方のオブジェクトがそれらに対応する項目を格納する) 内の要素範囲を、最初の <see cref="T:System.Array" /> 内のキーに基づき、指定した <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスを使用して並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="81add-2375">Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2376">各キーに、`keys`<xref:System.Array>に対応するアイテムがある、`items`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2376">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="81add-2377">並べ替え、対応する項目の中に、キーが移動したときに、`items`<xref:System.Array>同様の位置を変更します。</span><span class="sxs-lookup"><span data-stu-id="81add-2377">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="81add-2378">そのため、`items`<xref:System.Array>が内の対応するキーの並べ替えに従って並び替え、`keys`<xref:System.Array>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2378">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="81add-2379">場合`comparer`は`null`、内の要素の指定された範囲内の各キー、`keys`<xref:System.Array>実装する必要があります、<xref:System.IComparable%601>ジェネリック インターフェイスとその他のすべてのキーの比較ができるようにします。</span><span class="sxs-lookup"><span data-stu-id="81add-2379">If `comparer` is `null`, each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="81add-2380">キーよりも項目がありますが、対応するキーのない項目が並べ替えられていない場合は並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="81add-2380">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="81add-2381">項目よりも多くのキーがある場合に並べ替えることはできません。スローされること、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="81add-2381">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="81add-2382">並べ替えが正常に完了していない場合、結果は未定義です。</span><span class="sxs-lookup"><span data-stu-id="81add-2382">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="81add-2383">このメソッドは、とおり内省的で並べ替え (introsort) アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2383">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="81add-2384">パーティションのサイズが 16 個未満の要素の場合は、使用して、[挿入ソート](https://en.wikipedia.org/wiki/Insertion_sort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2384">If the partition size is fewer than 16 elements, it uses an [insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2385">パーティションの数が 2 を超える場合 \* ログ<sup>N</sup>ここで、 *N*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2385">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="81add-2386">それ以外の場合、使用して、[クイック ソート](https://en.wikipedia.org/wiki/Quicksort)アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="81add-2386">Otherwise, it uses a [Quicksort](https://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="81add-2387">この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2387">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="81add-2388">これに対し、安定した並べ替えが等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2388">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="81add-2389">最悪の場合、Heapsort とクイック ソート アルゴリズムを使用して並べ替えた配列の場合は、このメソッドは、O (`n`ログ`n`) 操作、`n`は`length`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2389">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2390">次のコード例に示します、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>、および [\]、TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29 > ペアのキーと値を表す配列を並べ替えるためのジェネリック メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="81add-2390">The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.</span></span>  
  
 <span data-ttu-id="81add-2391">コード例では、という名前の文字列の代替の比較子を定義します。 `ReverseCompare`、実装、 `IComparer<string>`(`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual c で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2391">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>`(`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="81add-2392">比較演算子の呼び出し、<xref:System.String.CompareTo%28System.String%29>メソッドは、文字列は、低-高のではなく高から低を並べ替えられるように、比較対照値の順序を反転します。</span><span class="sxs-lookup"><span data-stu-id="81add-2392">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="81add-2393">コード例では、作成し、恐竜の名前 (キー) の配列と各恐竜 (値) のメートル単位の最大長を表す整数の配列が表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2393">The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values).</span></span> <span data-ttu-id="81add-2394">アレイは、並べ替えし、複数回表示されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2394">The arrays are then sorted and displayed several times:</span></span>  
  
-   <span data-ttu-id="81add-2395"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>オーバー ロードは、最初の配列での恐竜名の順序で両方の配列の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2395">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.</span></span>  
  
-   <span data-ttu-id="81add-2396"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>オーバー ロードのインスタンスおよび`ReverseCompare`ペアの配列の並べ替え順序を反転させるために使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2396">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.</span></span>  
  
-   <span data-ttu-id="81add-2397"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>オーバー ロードが両方の配列の最後の 3 つの要素の並べ替えに使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2397">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.</span></span>  
  
-   <span data-ttu-id="81add-2398">[\]、TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29 > オーバー ロードは最後の 3 つの並べ替えに使用逆の順序で両方の要素を配列します。</span><span class="sxs-lookup"><span data-stu-id="81add-2398">The [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2399">ジェネリック メソッドの呼び出しを探さない、対応する非への呼び出しから、さまざまな Visual Basic、c#、および C++ 最初の 2 つの引数の型からのジェネリック型パラメーターの型を推論するためです。</span><span class="sxs-lookup"><span data-stu-id="81add-2399">The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments.</span></span> <span data-ttu-id="81add-2400">使用する場合、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)を Microsoft intermediate language (MSIL) を確認するには、ジェネリック メソッドが呼び出されることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2400">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> <span data-ttu-id="81add-2401"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2401">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-2402"> が <paramref name="keys" /> の下限を下回っています。</span><span class="sxs-lookup"><span data-stu-id="81add-2402">is less than the lower bound of <paramref name="keys" />.</span></span>  
  
<span data-ttu-id="81add-2403">または</span><span class="sxs-lookup"><span data-stu-id="81add-2403">-or-</span></span> 
 <paramref name="length" /> <span data-ttu-id="81add-2404"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-2404">is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="items" /> <span data-ttu-id="81add-2405"> が <see langword="null" /> ではなく、<paramref name="keys" /> の下限が <paramref name="items" /> の下限と一致していません。</span><span class="sxs-lookup"><span data-stu-id="81add-2405">is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2406">または</span><span class="sxs-lookup"><span data-stu-id="81add-2406">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-2407"> が <see langword="null" /> ではなく、<paramref name="keys" /> の長さが <paramref name="items" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="81add-2407">is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
<span data-ttu-id="81add-2408">または</span><span class="sxs-lookup"><span data-stu-id="81add-2408">-or-</span></span> 
 <paramref name="index" /> <span data-ttu-id="81add-2409"> および <paramref name="length" /> によって <paramref name="keys" /><see cref="T:System.Array" /> 内の有効な範囲が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2409">and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-2410">または</span><span class="sxs-lookup"><span data-stu-id="81add-2410">-or-</span></span> 
 <paramref name="items" /> <span data-ttu-id="81add-2411"> が <see langword="null" /> ではなく、<paramref name="index" /> および <paramref name="length" /> によって <paramref name="items" /><see cref="T:System.Array" /> 内の有効な範囲が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2411">is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</span></span>  
  
<span data-ttu-id="81add-2412">または</span><span class="sxs-lookup"><span data-stu-id="81add-2412">-or-</span></span> 
<span data-ttu-id="81add-2413"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="81add-2413">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="81add-2414">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2414">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="comparer" /> <span data-ttu-id="81add-2415"> が <see langword="null" /> であり、<paramref name="keys" /><see cref="T:System.Array" /> 内の 1 つまたは複数の要素によって <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2415">is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="81add-2416">.NET Framework 4 と以前のバージョンは、クイック ソート アルゴリズムのみを使用します。</span><span class="sxs-lookup"><span data-stu-id="81add-2416">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="81add-2417">クイック ソートは、状況によっては、並べ替え操作がスローされます、無効な比較演算子を識別、 <see cref="T:System.IndexOutOfRangeException" /> 、例外をスローします、<see cref="T:System.ArgumentException" />呼び出し元の例外。</span><span class="sxs-lookup"><span data-stu-id="81add-2417">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="81add-2418">以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、ことがスローした並べ替え操作がいたことができます<see cref="T:System.ArgumentException" />挿入の並べ替えと heapsort アルゴリズムでは、無効な比較子が検出されないため、例外をスローできません。</span><span class="sxs-lookup"><span data-stu-id="81add-2418">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="81add-2419">ほとんどの場合、これよりも少ない 16 個の要素を配列に適用されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2419">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para></block>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-arrays.md"><span data-ttu-id="81add-2420">カルチャを認識しない配列の操作の実行</span><span class="sxs-lookup"><span data-stu-id="81add-2420">Performing Culture-Insensitive String Operations in Arrays</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Array.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Array.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-2421"><see cref="T:System.Array" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-2421">Gets an object that can be used to synchronize access to the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="81add-2422"><see cref="T:System.Array" /> へのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2422">An object that can be used to synchronize access to the <see cref="T:System.Array" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2423">このプロパティを実装して、<xref:System.Collections.ICollection?displayProperty=nameWithType>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="81add-2423">This property implements the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="81add-2424">.NET framework クラスに基づいた<xref:System.Array>のコレクションを使用して、独自の同期バージョンの提供、<xref:System.Array.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-2424">.NET Framework classes based on <xref:System.Array> provide their own synchronized version of the collection using the <xref:System.Array.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="81add-2425">配列を使用するクラスは、独自の同期を使用しても実装できます、<xref:System.Array.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-2425">Classes that use arrays can also implement their own synchronization using the <xref:System.Array.SyncRoot%2A> property.</span></span> <span data-ttu-id="81add-2426">同期されたコードで操作を実行する必要があります、`SyncRoot`コレクションの直接ではなく、コレクションの。</span><span class="sxs-lookup"><span data-stu-id="81add-2426">The synchronizing code must perform operations on the `SyncRoot` of the collection, not directly on the collection.</span></span> <span data-ttu-id="81add-2427">これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。</span><span class="sxs-lookup"><span data-stu-id="81add-2427">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="81add-2428">具体的には、コレクションを同時に変更する可能性があるその他のスレッドと適切な同期を維持します。</span><span class="sxs-lookup"><span data-stu-id="81add-2428">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection.</span></span> <span data-ttu-id="81add-2429">注意の実装によって<xref:System.Array.SyncRoot%2A>返す可能性があります、<xref:System.Array>自体。</span><span class="sxs-lookup"><span data-stu-id="81add-2429">Note that some implementations of <xref:System.Array.SyncRoot%2A> might return the <xref:System.Array> itself.</span></span>  
  
 <span data-ttu-id="81add-2430">コレクションの列挙は、スレッド セーフな方法では本質的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-2430">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="81add-2431">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="81add-2431">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="81add-2432">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="81add-2432">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="81add-2433">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="81add-2433">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2434">次のコード例を使用して、すべての列挙中に配列をロックする方法を示しています、<xref:System.Array.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81add-2434">The following code example shows how to lock an array during the entire enumeration by using the <xref:System.Array.SyncRoot%2A> property.</span></span>  
  
 [!code-cpp[System.Array.SyncRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.SyncRoot/cpp/source.cpp#1)]
 [!code-csharp[System.Array.SyncRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.SyncRoot/cs/source.cs#1)]
 [!code-vb[System.Array.SyncRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.SyncRoot/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Array.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-2435"><see cref="T:System.Array" /> に格納されている要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-2435">Gets the number of elements contained in the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="81add-2436">コレクションに格納されている要素の数。</span><span class="sxs-lookup"><span data-stu-id="81add-2436">The number of elements contained in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2437">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2437">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2438">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2438">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-2439"><see cref="T:System.Array" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-2439">Gets a value that indicates whether access to the <see cref="T:System.Array" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="81add-2440"><see cref="T:System.Array" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="81add-2440">true if access to the <see cref="T:System.Array" /> is synchronized (thread safe); otherwise, false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-2441"><see cref="T:System.Array" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-2441">Gets an object that can be used to synchronize access to the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="81add-2442"><see cref="T:System.Array" /> へのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2442">An object that can be used to synchronize access to the <see cref="T:System.Array" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-2443"><see cref="T:System.Collections.IList" /> に追加するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2443">The object to be added to the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="81add-2444">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81add-2444">Calling this method always throws a <see cref="T:System.NotSupportedException" /> exception.</span></span></summary>
        <returns><span data-ttu-id="81add-2445">配列への値の追加はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="81add-2445">Adding a value to an array is not supported.</span></span> <span data-ttu-id="81add-2446">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="81add-2446">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2447">通常、<xref:System.Collections.IList.Add%2A?displayProperty=nameWithType>実装は、コレクションにメンバーを追加します。</span><span class="sxs-lookup"><span data-stu-id="81add-2447">Ordinarily, an <xref:System.Collections.IList.Add%2A?displayProperty=nameWithType> implementation adds a member to a collection.</span></span> <span data-ttu-id="81add-2448">ただし、配列サイズは固定であるため、(、<xref:System.Array.IsFixedSize%2A>プロパティは常に返します`true`)、このメソッドは常にスロー、<xref:System.NotSupportedException>例外。</span><span class="sxs-lookup"><span data-stu-id="81add-2448">However, because arrays have a fixed size (the <xref:System.Array.IsFixedSize%2A> property always returns `true`), this method always throws a <xref:System.NotSupportedException> exception.</span></span>  
  
 <span data-ttu-id="81add-2449">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2449">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2450">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2450">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81add-2451"><see cref="T:System.Collections.IList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="81add-2451">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81add-2452"><see cref="T:System.Collections.IList" /> からすべての項目を削除します。</span><span class="sxs-lookup"><span data-stu-id="81add-2452">Removes all items from the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2453">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2453">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2454">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2454">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81add-2455"><see cref="T:System.Collections.IList" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="81add-2455">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-2456">現在のリスト内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2456">The object to locate in the current list.</span></span> <span data-ttu-id="81add-2457">参照型の場合は、検索する要素として <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2457">The element to locate can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="81add-2458">ある要素が <see cref="T:System.Collections.IList" /> 内に存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="81add-2458">Determines whether an element is in the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="81add-2459"><paramref name="value" /> が <see cref="T:System.Collections.IList" /> に存在する場合は 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2459">if <paramref name="value" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2460">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2460">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2461">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2461">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-2462">現在のリスト内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2462">The object to locate in the current list.</span></span></param>
        <summary><span data-ttu-id="81add-2463"><see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</span><span class="sxs-lookup"><span data-stu-id="81add-2463">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><span data-ttu-id="81add-2464">値がリストに存在する場合はそのインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="81add-2464">The index of value if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2465">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2465">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2466">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2466">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="81add-2467"><paramref name="value" /> を挿入する位置のインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="81add-2467">The index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="81add-2468">挿入するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2468">The object to insert.</span></span></param>
        <summary><span data-ttu-id="81add-2469">指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</span><span class="sxs-lookup"><span data-stu-id="81add-2469">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2470">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2470">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2471">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2471">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-2472"> が <see cref="T:System.Collections.IList" /> 内の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-2472">is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81add-2473"><see cref="T:System.Collections.IList" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="81add-2473">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
<span data-ttu-id="81add-2474">または</span><span class="sxs-lookup"><span data-stu-id="81add-2474">-or-</span></span> 
<span data-ttu-id="81add-2475"><see cref="T:System.Collections.IList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="81add-2475">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><paramref name="value" /> <span data-ttu-id="81add-2476"> は、<see cref="T:System.Collections.IList" /> 内の null 参照です。</span><span class="sxs-lookup"><span data-stu-id="81add-2476">is null reference in the <see cref="T:System.Collections.IList" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-2477"><see cref="T:System.Array" /> が固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-2477">Gets a value that indicates whether the <see cref="T:System.Array" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="81add-2478">true の場合、<see cref="T:System.Array" />が固定サイズ、それ以外は false。</span><span class="sxs-lookup"><span data-stu-id="81add-2478">true if the <see cref="T:System.Array" /> has a fixed size; otherwise, false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81add-2479"><see cref="T:System.Array" /> が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="81add-2479">Gets a value that indicates whether the <see cref="T:System.Array" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="81add-2480">true の場合、<see cref="T:System.Array" />は読み取り専用である、それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="81add-2480">true if the <see cref="T:System.Array" /> is read-only; otherwise, false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="81add-2481">取得または設定する要素のインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-2481">The index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="81add-2482">指定したインデックスにある要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="81add-2482">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="81add-2483">指定したインデックス位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="81add-2483">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2484">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2484">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2485">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2485">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> <span data-ttu-id="81add-2486"> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="81add-2486">is less than zero.</span></span>  
  
<span data-ttu-id="81add-2487">または</span><span class="sxs-lookup"><span data-stu-id="81add-2487">-or-</span></span> 
 <paramref name="index" /> <span data-ttu-id="81add-2488"> は、<see cref="P:System.Collections.ICollection.Count" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="81add-2488">is equal to or greater than <see cref="P:System.Collections.ICollection.Count" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="81add-2489">現在の <see cref="T:System.Array" /> が完全な 1 次元ではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-2489">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="81add-2490"><see cref="T:System.Collections.IList" /> から削除するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2490">The object to remove from the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="81add-2491">特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</span><span class="sxs-lookup"><span data-stu-id="81add-2491">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2492">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2492">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2493">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2493">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81add-2494"><see cref="T:System.Collections.IList" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="81add-2494">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
<span data-ttu-id="81add-2495">または</span><span class="sxs-lookup"><span data-stu-id="81add-2495">-or-</span></span> 
<span data-ttu-id="81add-2496"><see cref="T:System.Collections.IList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="81add-2496">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="81add-2497">削除する要素のインデックス。</span><span class="sxs-lookup"><span data-stu-id="81add-2497">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="81add-2498">指定したインデックスにある <see cref="T:System.Collections.IList" /> 項目を削除します。</span><span class="sxs-lookup"><span data-stu-id="81add-2498">Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2499">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2499">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2500">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2500">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="81add-2501">index が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="81add-2501">index is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="81add-2502"><see cref="T:System.Collections.IList" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="81add-2502">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
<span data-ttu-id="81add-2503">または</span><span class="sxs-lookup"><span data-stu-id="81add-2503">-or-</span></span> 
<span data-ttu-id="81add-2504"><see cref="T:System.Collections.IList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="81add-2504">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="81add-2505">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2505">The object to compare with the current instance.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-2506">現在のオブジェクトと <paramref name="other" /> とを比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2506">An object that compares the current object and <paramref name="other" />.</span></span></param>
        <summary><span data-ttu-id="81add-2507">現在のコレクション オブジェクトの並べ替え順序での位置が、別のオブジェクトと比べて前か、後か、または同じかを判断します。</span><span class="sxs-lookup"><span data-stu-id="81add-2507">Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</span></span></summary>
        <returns><span data-ttu-id="81add-2508">現在のコレクション オブジェクトと他のオブジェクトとの関係を示す整数。次の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="81add-2508">An integer that indicates the relationship of the current collection object to other, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="81add-2509">戻り値</span><span class="sxs-lookup"><span data-stu-id="81add-2509">Return value</span></span> 
 </term><description> <span data-ttu-id="81add-2510">説明</span><span class="sxs-lookup"><span data-stu-id="81add-2510">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="81add-2511">-1</span><span class="sxs-lookup"><span data-stu-id="81add-2511">-1</span></span> 
 </term><description> <span data-ttu-id="81add-2512">現在のインスタンスが <paramref name="other" /> よりも前。</span><span class="sxs-lookup"><span data-stu-id="81add-2512">The current instance precedes <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="81add-2513">0</span><span class="sxs-lookup"><span data-stu-id="81add-2513">0</span></span> 
 </term><description> <span data-ttu-id="81add-2514">現在のインスタンスと <paramref name="other" /> とが等しい。</span><span class="sxs-lookup"><span data-stu-id="81add-2514">The current instance and <paramref name="other" /> are equal.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="81add-2515">1</span><span class="sxs-lookup"><span data-stu-id="81add-2515">1</span></span> 
 </term><description> <span data-ttu-id="81add-2516">現在のインスタンスが <paramref name="other" /> よりも後。</span><span class="sxs-lookup"><span data-stu-id="81add-2516">The current instance follows <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2517">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2517">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2518">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IStructuralComparable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2518">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="81add-2519">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2519">The object to compare with the current instance.</span></span></param>
        <param name="comparer"><span data-ttu-id="81add-2520">現在のインスタンスと <paramref name="other" /> が等しいかどうかを判断するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2520">An object that determines whether the current instance and <paramref name="other" /> are equal.</span></span></param>
        <summary><span data-ttu-id="81add-2521">オブジェクトが現在のインスタンスと等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="81add-2521">Determines whether an object is equal to the current instance.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="81add-2522">2 つのオブジェクトが等しい場合は 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2522">if the two objects are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2523">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2523">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2524">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2524">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="81add-2525">現在のオブジェクトのハッシュ コードを計算するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="81add-2525">An object that computes the hash code of the current object.</span></span></param>
        <summary><span data-ttu-id="81add-2526">現在のインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="81add-2526">Returns a hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="81add-2527">現在のインスタンスのハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="81add-2527">The hash code for the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2528">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="81add-2528">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="81add-2529">これは、<xref:System.Array> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="81add-2529">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrueForAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TrueForAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TrueForAll&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrueForAll(Of T) (array As T(), match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TrueForAll(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="static member TrueForAll : 'T[] * Predicate&lt;'T&gt; -&gt; bool" Usage="System.Array.TrueForAll (array, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="81add-2530">配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="81add-2530">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="81add-2531">条件が一致するかどうかをチェックする 1 次元の <see cref="T:System.Array" />。インデックス番号が 0 から始まる必要があります。</span><span class="sxs-lookup"><span data-stu-id="81add-2531">The one-dimensional, zero-based <see cref="T:System.Array" /> to check against the conditions.</span></span></param>
        <param name="match"><span data-ttu-id="81add-2532">要素の条件を定義する述語。</span><span class="sxs-lookup"><span data-stu-id="81add-2532">The predicate that defines the conditions to check against the elements.</span></span></param>
        <summary><span data-ttu-id="81add-2533">配列内のすべての要素が、指定された述語によって定義された条件と一致するかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="81add-2533">Determines whether every element in the array matches the conditions defined by the specified predicate.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="81add-2534"><paramref name="array" /> 内のすべての要素が、指定された述語によって定義された条件と一致する場合は 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="81add-2534">if every element in <paramref name="array" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="81add-2535">配列内に要素がない場合、戻り値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2535">If there are no elements in the array, the return value is <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81add-2536"><xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。</span><span class="sxs-lookup"><span data-stu-id="81add-2536">The <xref:System.Predicate%601> is a delegate to a method that returns`true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="81add-2537">要素`array`に個別に渡される、 <xref:System.Predicate%601>、デリゲートが戻るとき、処理が停止していると`false`任意の要素。</span><span class="sxs-lookup"><span data-stu-id="81add-2537">The elements of `array` are individually passed to the <xref:System.Predicate%601>, and processing is stopped when the delegate returns `false` for any element.</span></span>  
  
 <span data-ttu-id="81add-2538">このメソッドは O (`n`) 操作、`n`は、<xref:System.Array.Length%2A>の`array`します。</span><span class="sxs-lookup"><span data-stu-id="81add-2538">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81add-2539">次の例は、文字列配列内の各要素の最後の文字が数字かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="81add-2539">The following example determines whether the last character of each element in a string array is a number.</span></span> <span data-ttu-id="81add-2540">2 つの文字列配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-2540">It creates two string arrays.</span></span> <span data-ttu-id="81add-2541">最初の配列には、アルファベット文字で終わる文字列と数値の文字で終わる文字列の両方が含まれています。2 番目の配列は、数字で終わる文字列ののみで構成されます。</span><span class="sxs-lookup"><span data-stu-id="81add-2541">The first array includes both strings that end with alphabetic characters and strings that end with numeric characters.The second array consists only of strings that end with numeric characters.</span></span> <span data-ttu-id="81add-2542">また、`EndWithANumber`シグネチャと一致するメソッド、<xref:System.Predicate%601>デリゲートします。</span><span class="sxs-lookup"><span data-stu-id="81add-2542">The example also defines an `EndWithANumber` method whose signature matches the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="81add-2543">例には、各配列では、<xref:System.Array.TrueForAll%2A>メソッドを表すデリゲートと、`EndsWithANumber`メソッド。</span><span class="sxs-lookup"><span data-stu-id="81add-2543">The example passes each array to the <xref:System.Array.TrueForAll%2A> method along with a delegate that represents the `EndsWithANumber` method.</span></span>  
  
 [!code-csharp[System.Array.TrueForAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.trueforall/cs/trueforall2.cs#2)]
 [!code-vb[System.Array.TrueForAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.trueforall/vb/trueforall2.vb#2)]  
  
 <span data-ttu-id="81add-2544">次の例は、文字列配列を通過する点を除いて、最初に似ています、<xref:System.Array.TrueForAll%2A>メソッドとラムダ式を特定の配列要素は、数値の文字列形式で終わるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="81add-2544">The following example is similar to the first, except that it passes the string array to the <xref:System.Array.TrueForAll%2A> method along with  a lambda expression that determines whether a particular array element ends with the string representation of a number.</span></span>  
  
 [!code-csharp[System.Array.TrueForAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.trueforall/cs/trueforall1.cs#1)]
 [!code-vb[System.Array.TrueForAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.trueforall/vb/trueforall1.vb#1)]  
  
 <span data-ttu-id="81add-2545">どちらの場合で、<xref:System.Array.TrueForAll%2A>メソッドを返します。`false`が数値で終わらない: 最初の配列要素が発生するとすぐにします。</span><span class="sxs-lookup"><span data-stu-id="81add-2545">In both cases, the <xref:System.Array.TrueForAll%2A> method returns `false` as soon as it encounters the first array element that does not end in a number.</span></span> <span data-ttu-id="81add-2546">返しますそれ以外の場合、`true`後、配列内のすべての要素を反復処理します。</span><span class="sxs-lookup"><span data-stu-id="81add-2546">Otherwise, it returns `true` after iterating all the elements in the array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81add-2547">どちらの例に示すとおり、c# および Visual Basic の場合を作成する必要はありません、`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="81add-2547">As both examples show, in C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="81add-2548">これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="81add-2548">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> <span data-ttu-id="81add-2549"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2549">is <see langword="null" />.</span></span>  
  
<span data-ttu-id="81add-2550">または</span><span class="sxs-lookup"><span data-stu-id="81add-2550">-or-</span></span> 
 <paramref name="match" /> <span data-ttu-id="81add-2551"> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="81add-2551">is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>
