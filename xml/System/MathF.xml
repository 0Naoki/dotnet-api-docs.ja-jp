<Type Name="MathF" FullName="System.MathF">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b72284d390ede7fa9e0265550f568899dce9d8d" /><Meta Name="ms.sourcegitcommit" Value="a9b8eb12d69b131f7c0de74d471798e44e863282" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="06/04/2019" /><Meta Name="ms.locfileid" Value="66501882" /></Metadata><TypeSignature Language="C#" Value="public static class MathF" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MathF extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.MathF" />
  <TypeSignature Language="VB.NET" Value="Public Class MathF" />
  <TypeSignature Language="C++ CLI" Value="public ref class MathF abstract sealed" />
  <TypeSignature Language="F#" Value="type MathF = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>三角関数や対数関数などの一般的な数値関数の定数と静的メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

静的フィールドおよびのメソッド、`MathF`クラスの対応関係の<xref:System.Math>クラス、そのパラメーターの型がある点を除いて<xref:System.Single>なく<xref:System.Double>、返されると<xref:System.Single>なく<xref:System.Double>値。

         ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float x);" />
      <MemberSignature Language="F#" Value="static member Abs : single -&gt; single" Usage="System.MathF.Abs x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><see cref="F:System.Single.MinValue" /> 以上で、<see cref="F:System.Single.MaxValue" /> 以下の数値。</param>
        <summary>単精度浮動小数点数の絶対値を返します。</summary>
        <returns>0 ≤ x ≤ <see cref="F:System.Single.MaxValue" /> の単精度浮動小数点数 x。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 絶対値を<xref:System.Single>は、符号なし数値の値です。 たとえば、両方の 1.2 e の絶対値-03 と 1.2e03 は 1.2e03 します。  
  
 場合`x`と等しい<xref:System.Single.NegativeInfinity>または<xref:System.Single.PositiveInfinity>、戻り値は<xref:System.Single.PositiveInfinity>します。 場合`x`と等しい<xref:System.Single.NaN>、戻り値は<xref:System.Single.NaN>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static float Acos (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Acos(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Acos(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Acos(float x);" />
      <MemberSignature Language="F#" Value="static member Acos : single -&gt; single" Usage="System.MathF.Acos x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">コサインを表す数で、<paramref name="x" /> が -1 以上 1 以下である必要があります。</param>
        <summary>コサインが指定数となる角度を返します。</summary>
        <returns>0 ≤ θ ≤ π の、ラジアンで表した角度 θ。
  
または 
 <paramref name="x" /> &lt; -1 または <paramref name="x" /> &gt; 1、あるいは <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は、<see cref="F:System.Single.NaN" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値を 180 で乗算/<xref:System.MathF.PI?displayProperty=nameWithType>をラジアンから度に変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static float Acosh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Acosh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Acosh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Acosh(float x);" />
      <MemberSignature Language="F#" Value="static member Acosh : single -&gt; single" Usage="System.MathF.Acosh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">ハイパーボリック コサインを表す数で、<paramref name="x" /> が 1 以上 <see cref="F:System.Single.PositiveInfinity" /> 以下である必要があります。</param>
        <summary>ハイパーボリック コサインが指定数となる角度を返します。</summary>
        <returns>0 ≤ θ ≤ ∞ の、ラジアンで表した角度 θ。
  
または 
 <paramref name="x" /> &lt; 1、または <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は、<see cref="F:System.Single.NaN" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値を 180 で乗算/<xref:System.MathF.PI?displayProperty=nameWithType>をラジアンから度に変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static float Asin (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Asin(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Asin(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Asin(float x);" />
      <MemberSignature Language="F#" Value="static member Asin : single -&gt; single" Usage="System.MathF.Asin x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">サインを表す数で、<paramref name="x" /> が -1 以上 1 以下である必要があります。</param>
        <summary>サインが指定数となる角度を返します。</summary>
        <returns>-π/2 ≤ θ ≤ π/2 の、ラジアンで表した角度 θ。
  
または 
 <paramref name="x" /> &lt; -1 または <paramref name="x" /> &gt; 1、あるいは <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は、<see cref="F:System.Single.NaN" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正の戻り値は、x 軸から反時計回りに回転の角度を表します負の値の戻り値は時計回りの角度を表します。  
  
 戻り値を 180 で乗算/<xref:System.MathF.PI?displayProperty=nameWithType>をラジアンから度に変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static float Asinh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Asinh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Asinh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Asinh(float x);" />
      <MemberSignature Language="F#" Value="static member Asinh : single -&gt; single" Usage="System.MathF.Asinh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">ハイパーボリック サインを表す数で、<paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> 以上 <see cref="F:System.Single.PositiveInfinity" /> 以下である必要があります。</param>
        <summary>ハイパーボリック サインが指定数となる角度を返します。</summary>
        <returns>-∞ &lt; θ ≤ -1 または 1 ≤ θ &lt; ∞ の、ラジアンで表した角度 θ。 
  
または 
 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値を 180 で乗算/<xref:System.MathF.PI?displayProperty=nameWithType>をラジアンから度に変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static float Atan (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atan(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atan(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atan(float x);" />
      <MemberSignature Language="F#" Value="static member Atan : single -&gt; single" Usage="System.MathF.Atan x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">タンジェントを表す数。</param>
        <summary>タンジェントが指定数となる角度を返します。</summary>
        <returns>-π/2 ≤ θ ≤ π/2 の、ラジアンで表した角度 θ。  
  
または 
 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> に等しい場合は <see cref="F:System.Single.NaN" />。<paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> に等しい場合は、倍精度に丸めた -π/2 (-1.5707963267949)。<paramref name="x" /> が <see cref="F:System.Single.PositiveInfinity" /> に等しい場合は、倍精度に丸めた π/2 (1.5707963267949)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正の戻り値は、x 軸から反時計回りに回転の角度を表します負の値の戻り値は時計回りの角度を表します。  
  
 戻り値を 180 で乗算/<xref:System.MathF.PI?displayProperty=nameWithType>をラジアンから度に変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static float Atan2 (float y, float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atan2(float32 y, float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atan2(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Single, x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atan2(float y, float x);" />
      <MemberSignature Language="F#" Value="static member Atan2 : single * single -&gt; single" Usage="System.MathF.Atan2 (y, x)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="y">点の y 座標。</param>
        <param name="x">点の x 座標。</param>
        <summary>タンジェントが 2 つの指定された数の商である角度を返します。</summary>
        <returns>-π ≤ θ ≤ π および tan(θ) = <paramref name="y" /> / <paramref name="x" /> の、ラジアンで示した角度 θ。(<paramref name="x" />, <paramref name="y" />) は、デカルト座標の点を示します。 次の点に注意してください。 
-   クワドラント 1 の (<paramref name="x" />, <paramref name="y" />) の場合は、0 &lt; θ &lt; π/2。  
  
-   クワドラント 2 の (<paramref name="x" />, <paramref name="y" />) の場合は、π/2 &lt; θ ≤ π。  
  
-   クワドラント 3 の (<paramref name="x" />, <paramref name="y" />) の場合は、-π &lt; θ &lt; -π/2。  
  
-   クワドラント 4 の (<paramref name="x" />, <paramref name="y" />) の場合は、-π/2 &lt; θ &lt; 0。  
  
クワドラント間の境界上にある点の場合は、次の戻り値になります。 
-   y が 0 で x が負数でない場合は、θ = 0。  
  
-   y が 0 で x が負の場合は、θ = π。  
  
-   y が正で x が 0 の場合は、θ = π/2。  
  
-   y が負数で x が 0 の場合は、θ = -π/2。  
  
-   y が 0 かつ x が 0 の場合は、θ = 0。  
  
<paramref name="x" /> または <paramref name="y" /> が <see cref="F:System.Single.NaN" /> であるか、<paramref name="x" /> または <paramref name="y" /> が <see cref="F:System.Single.PositiveInfinity" /> または <see cref="F:System.Single.NegativeInfinity" /> のいずれである場合、メソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値は、x 軸、およびベクトルは原点 (0, 0) から開始し、ポイント、(x, y) で終了して形成されたデカルト角度です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static float Atanh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atanh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atanh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atanh(float x);" />
      <MemberSignature Language="F#" Value="static member Atanh : single -&gt; single" Usage="System.MathF.Atanh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">ハイパーボリック タンジェントを表す数で、<paramref name="x" /> が -1 以上 1 以下である必要があります。</param>
        <summary>ハイパーボリック タンジェントが指定数となる角度を返します。</summary>
        <returns>-∞ &lt; θ &lt;-1 または 1 &lt; θ &lt; ∞ の、ラジアンで表した角度 θ。  
  
または 
 <paramref name="x" /> &lt; -1 または <paramref name="x" /> &gt; 1、あるいは <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は、<see cref="F:System.Single.NaN" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値を 180 で乗算/<xref:System.MathF.PI?displayProperty=nameWithType>をラジアンから度に変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitDecrement">
      <MemberSignature Language="C#" Value="public static float BitDecrement (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 BitDecrement(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.BitDecrement(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitDecrement (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float BitDecrement(float x);" />
      <MemberSignature Language="F#" Value="static member BitDecrement : single -&gt; single" Usage="System.MathF.BitDecrement x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">デクリメントする値。</param>
        <summary><paramref name="x" /> 未満を比較する、次に小さい値を返します。</summary>
        <returns><paramref name="x" /> 未満を比較する、次に小さい値。
  
または 
 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> と等しい場合は <see cref="F:System.Single.NegativeInfinity" />。
  
または 
 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="BitIncrement">
      <MemberSignature Language="C#" Value="public static float BitIncrement (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 BitIncrement(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.BitIncrement(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitIncrement (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float BitIncrement(float x);" />
      <MemberSignature Language="F#" Value="static member BitIncrement : single -&gt; single" Usage="System.MathF.BitIncrement x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">インクリメントする値。</param>
        <summary><paramref name="x" /> を超える次に大きい値を返します。</summary>
        <returns><paramref name="x" /> を超える次に大きい値。
  
または 
 <paramref name="x" /> が <see cref="F:System.Single.PositiveInfinity" /> と等しい場合は <see cref="F:System.Single.PositiveInfinity" />。
  
または 
 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static float Cbrt (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cbrt(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cbrt(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cbrt(float x);" />
      <MemberSignature Language="F#" Value="static member Cbrt : single -&gt; single" Usage="System.MathF.Cbrt x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">立方根を求める対象の数値。</param>
        <summary>指定された数値の立方根を返します。</summary>
        <returns><paramref name="x" /> の立方根。
  
または 
 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> と等しい場合は <see cref="F:System.Single.NaN" />。</returns>
        <remarks></remarks>
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static float Ceiling (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Ceiling(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Ceiling(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Ceiling(float x);" />
      <MemberSignature Language="F#" Value="static member Ceiling : single -&gt; single" Usage="System.MathF.Ceiling x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">単精度浮動小数点数。</param>
        <summary>指定した単精度浮動小数点数以上の数のうち、最小の整数値を返します。</summary>
        <returns><paramref name="x" /> 以上の最小の整数値。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。 このメソッドは、整数型ではなく <see cref="T:System.Single" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの動作では、IEEE Standard 754、セクション 4 に従います。 この種の丸め処理を行うには、正の無限大に丸めるも呼び出されます。 つまり場合、`x`が正の値の小数部の原因のプレゼンス`x`[次へ] の最大の整数に切り捨てられます。 場合`x`が負の場合、丸め処理によりの小数部`x`破棄されます。 このメソッドの操作とは異なります、<xref:System.MathF.Floor%28System.Single%29>メソッドは、負の無限大方向に丸め処理をサポートしています。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="CopySign">
      <MemberSignature Language="C#" Value="public static float CopySign (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 CopySign(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.CopySign(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CopySign (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float CopySign(float x, float y);" />
      <MemberSignature Language="F#" Value="static member CopySign : single * single -&gt; single" Usage="System.MathF.CopySign (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">結果に絶対値が使用される数値。</param>
        <param name="y">結果に符号が使用される数値。</param>
        <summary><paramref name="x" /> の絶対値と符号 <paramref name="y" /> の値を返します。</summary>
        <returns><paramref name="x" /> の絶対値と符号 <paramref name="y" /> の値。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static float Cos (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cos(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cos(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cos(float x);" />
      <MemberSignature Language="F#" Value="static member Cos : single -&gt; single" Usage="System.MathF.Cos x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">ラジアンで表した角度。</param>
        <summary>指定された角度のコサインを返します。</summary>
        <returns><paramref name="x" /> のコサイン。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角度、 `x`、ラジアン単位である必要があります。 乗算 <xref:System.MathF.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static float Cosh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cosh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cosh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cosh(float x);" />
      <MemberSignature Language="F#" Value="static member Cosh : single -&gt; single" Usage="System.MathF.Cosh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">ラジアンで表した角度。</param>
        <summary>指定された角度のハイパーボリック コサインを返します。</summary>
        <returns><paramref name="x" /> のハイパーボリック コサイン。 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> または <see cref="F:System.Single.PositiveInfinity" /> に等しい場合は、<see cref="F:System.Single.PositiveInfinity" /> が返されます。 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> に等しい場合は、<see cref="F:System.Single.NaN" /> が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角度、 `x`、ラジアン単位である必要があります。 乗算 <xref:System.MathF.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。    
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const float E = 2.718282;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 E = (2.718282)" />
      <MemberSignature Language="DocId" Value="F:System.MathF.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Single  = 2.718282" />
      <MemberSignature Language="C++ CLI" Value="public: float E = 2.718282;" />
      <MemberSignature Language="F#" Value="val mutable E : single" Usage="System.MathF.E" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>2.718282</MemberValue>
      <Docs>
        <summary>定数 <see langword="e" /> によって示される、自然対数の底を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

この定数の値は、2.71828175 です。

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static float Exp (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Exp(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Exp(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Exp(float x);" />
      <MemberSignature Language="F#" Value="static member Exp : single -&gt; single" Usage="System.MathF.Exp x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">累乗を指定する数値。</param>
        <summary>指定した値で <see langword="e" /> を累乗した値を返します。</summary>
        <returns>数値 <see langword="e" /> を <paramref name="x" /> で累乗した値。 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> または <see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> に等しい場合は、0 が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `e` 値が約 2.71828 数学定数です。  
  
 使用して、<xref:System.MathF.Pow%2A>他の底の累乗を計算するメソッド。  
  
 <xref:System.MathF.Exp%2A> 逆です<xref:System.MathF.Log%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.MathF.E" />
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
        <altmember cref="M:System.MathF.Log(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static float Floor (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Floor(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Floor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Floor(float x);" />
      <MemberSignature Language="F#" Value="static member Floor : single -&gt; single" Usage="System.MathF.Floor x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">単精度浮動小数点数。</param>
        <summary>指定した単精度浮動小数点数以下の数のうち、最大の整数値を返します。</summary>
        <returns><paramref name="x" /> 以下の最大の整数値。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの動作では、IEEE Standard 754、セクション 4 に従います。 この種の丸め処理を行うには、負の無限大に丸めるも呼び出されます。 つまり場合、`x`が正の値、小数部が切り捨てられます。 場合`x`が負の場合、小数部が存在すると、その小さな整数に丸められます。 このメソッドの操作とは異なります、<xref:System.MathF.Ceiling%2A>メソッドは、正の無限大方向に丸め処理をサポートしています。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="FusedMultiplyAdd">
      <MemberSignature Language="C#" Value="public static float FusedMultiplyAdd (float x, float y, float z);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 FusedMultiplyAdd(float32 x, float32 y, float32 z) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FusedMultiplyAdd (x As Single, y As Single, z As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float FusedMultiplyAdd(float x, float y, float z);" />
      <MemberSignature Language="F#" Value="static member FusedMultiplyAdd : single * single * single -&gt; single" Usage="System.MathF.FusedMultiplyAdd (x, y, z)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="z" Type="System.Single" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><paramref name="y" /> と乗算する数値。</param>
        <param name="y"><paramref name="x" /> と乗算する数値。</param>
        <param name="z"><paramref name="x" /> に <paramref name="y" /> を乗算した結果に加算される数値。</param>
        <summary>1 つの三項演算として丸められた、(x * y) + z を返します。</summary>
        <returns>1 つの三項演算として丸められた、(x * y) + z。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これを計算`(x * y)`無限の精度に場合は、次のように追加します。`z`に無限の精度を場合と結果をに最後に丸められます、最も近い表現可能な値。
  
 これに対しどのコンピューティングと組み合わされないシーケンス`(x * y)`無限の preicision かのように丸め、結果を最も近い表現可能な値には、無限の精度をかのように丸めた結果の ' z' を追加し、最後に四捨五入する最も近い表現可能な値。
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static float IEEERemainder (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 IEEERemainder(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.IEEERemainder(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float IEEERemainder(float x, float y);" />
      <MemberSignature Language="F#" Value="static member IEEERemainder : single * single -&gt; single" Usage="System.MathF.IEEERemainder (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">被除数。</param>
        <param name="y">除数。</param>
        <summary>指定した数を別の指定数で除算した結果の剰余を返します。</summary>
        <returns><paramref name="x" /> - (<paramref name="y" /> Q) に等しい数値。Q は <paramref name="x" /> / <paramref name="y" /> の商を丸めた近似整数を示します。<paramref name="x" /> / <paramref name="y" /> が 2 つの整数の中間に位置する場合は、偶数の整数が返されます。  
  
<paramref name="x" /> - (<paramref name="y" /> Q) がゼロのとき、<paramref name="x" /> が正である場合は値 +0、<paramref name="x" /> が負である場合は -0 が返されます。  
  
<paramref name="y" /> = 0 の場合は、<see cref="F:System.Single.NaN" /> が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作は、ANSI/IEEE Std 754-1985; のセクション 5.1 で定義されている剰余演算に準拠しています。バイナリ浮動小数点演算; の IEEE 標準Institute of Electrical と Electronics エンジニア, Inc;1985 します。  
  
 <xref:System.MathF.IEEERemainder%2A>メソッドがないと同じ、[剰余演算子](~/docs/csharp/language-reference/operators/remainder-operator.md)します。 除算の後、残りの部分を返す両方が使用する数式は異なります。 数式、<xref:System.MathF.IEEERemainder%2A>メソッドは。  
  
```  
IEEERemainder = dividend - (divisor * MathF.Round(dividend / divisor))  
```  
  
 これに対し、剰余演算子の数式は次のとおりです。  
  
```  
Remainder = (MathF.Abs(dividend) - (MathF.Abs(divisor) *   
            (MathF.Floor(MathF.Abs(dividend) / MathF.Abs(divisor))))) *   
            MathF.Sign(dividend)  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ILogB">
      <MemberSignature Language="C#" Value="public static int ILogB (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ILogB(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.ILogB(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ILogB (x As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ILogB(float x);" />
      <MemberSignature Language="F#" Value="static member ILogB : single -&gt; int" Usage="System.MathF.ILogB x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">対数を求める対象の数値。</param>
        <summary>指定した数の底 2 の整数の対数を返します。</summary>
        <returns>次の表に示した値のいずれか  
  
 <list type="table"><listheader><term><paramref name="x" /> パラメーター 
 </term><description> 戻り値 
 </description></listheader><item><term> 既定値 
 </term><description> <paramref name="x" /> の底 2 の整数の対数。つまり、(int)log2(<paramref name="x" />)。  
  
 </description></item><item><term> 0 
 </term><description> <see cref="F:System.Int32.MinValue" />
  
 </description></item><item><term> <see cref="F:System.Single.NaN" /> または <see cref="F:System.Single.PositiveInfinity" /> または <see cref="F:System.Single.NegativeInfinity" />
  
  と等しい</term><description> <see cref="F:System.Int32.MaxValue" />
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター`x`底 10 の値として指定されます。   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static float Log (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log(float x);" />
      <MemberSignature Language="F#" Value="static member Log : single -&gt; single" Usage="System.MathF.Log x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">対数を求める対象の数値。</param>
        <summary>指定した数の自然 (底 <see langword="e" />) 対数を返します。</summary>
        <returns>次の表に示した値のいずれか  
  
 <list type="table"><listheader><term><paramref name="x" /> パラメーター 
 </term><description> 戻り値 
 </description></listheader><item><term> 正 
 </term><description> <paramref name="x" /> の自然対数。つまり、ln <paramref name="x" /> または log e <paramref name="x" /></description></item><item><term> 0 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> 負 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <see cref="F:System.Single.NaN" /> と等価です。</term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <see cref="F:System.Single.PositiveInfinity" /> と等価です。</term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター`x`底 10 の値として指定されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.MathF.E" />
        <altmember cref="M:System.MathF.Exp(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static float Log (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Log : single * single -&gt; single" Usage="System.MathF.Log (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">対数を求める対象の数値。</param>
        <param name="newBase">対数の底。</param>
        <summary>指定した数値の指定した底での対数を返します。</summary>
        <returns>次の表に示した値のいずれか (+Infinity は <see cref="F:System.Single.PositiveInfinity" />、-Infinity は <see cref="F:System.Single.NegativeInfinity" />、NaN は <see cref="F:System.Single.NaN" /> をそれぞれ示しています。) 
 <list type="table"><listheader><term><paramref name="x" /></term><description><paramref name="newBase" /></description><description> 戻り値 
 </description></listheader><item><term><paramref name="x" />&gt; 0 
 </term><description> (0 &lt;<paramref name="newBase" />&lt; 1) - または -(<paramref name="newBase" />&gt; 1) 
 </description><description> lognewBase(a) 
 </description></item><item><term><paramref name="x" />&lt; 0 
 </term><description> (任意の値) 
 </description><description> NaN 
 </description></item><item><term> (任意の値) 
 </term><description><paramref name="newBase" />&lt; 0 
 </description><description> NaN 
 </description></item><item><term><paramref name="x" /> != 1 
 </term><description><paramref name="newBase" /> = 0 
 </description><description> NaN 
 </description></item><item><term><paramref name="x" /> != 1 
 </term><description><paramref name="newBase" /> = +Infinity 
 </description><description> NaN 
 </description></item><item><term><paramref name="x" /> = NaN 
 </term><description> (任意の値) 
 </description><description> NaN 
 </description></item><item><term> (任意の値) 
 </term><description><paramref name="newBase" /> = NaN 
 </description><description> NaN 
 </description></item><item><term> (任意の値) 
 </term><description><paramref name="newBase" /> = 1 
 </description><description> NaN 
 </description></item><item><term><paramref name="x" /> = 0 
 </term><description> 0 &lt;<paramref name="newBase" />&lt; 1 
 </description><description> +Infinity 
 </description></item><item><term><paramref name="x" /> = 0 
 </term><description><paramref name="newBase" />&gt; 1 
 </description><description> -Infinity 
 </description></item><item><term><paramref name="x" /> =  +無限大 
 </term><description> 0 &lt;<paramref name="newBase" />&lt; 1 
 </description><description> -Infinity 
 </description></item><item><term><paramref name="x" /> =  +無限大 
 </term><description><paramref name="newBase" />&gt; 1 
 </description><description> +Infinity 
 </description></item><item><term><paramref name="x" /> = 1 
 </term><description><paramref name="newBase" /> = 0 
 </description><description> 0 
 </description></item><item><term><paramref name="x" /> = 1 
 </term><description><paramref name="newBase" /> = +Infinity 
 </description><description> 0 
 </description></item></list></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static float Log10 (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log10(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log10(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log10(float x);" />
      <MemberSignature Language="F#" Value="static member Log10 : single -&gt; single" Usage="System.MathF.Log10 x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">対数を検索する対象の数値。</param>
        <summary>指定した数の底 10 の対数を返します。</summary>
        <returns>次の表に示した値のいずれか  
  
 <list type="table"><listheader><term><paramref name="x" /> パラメーター 
 </term><description> 戻り値 
 </description></listheader><item><term> 正 
 </term><description> <paramref name="x" /> の底 10 の log。つまり、log 10<paramref name="x" />。  
  
 </description></item><item><term> 0 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> 負 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <see cref="F:System.Single.NaN" /> と等価です。</term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <see cref="F:System.Single.PositiveInfinity" /> と等価です。</term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター`x`底 10 の値として指定されます。   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public static float Log2 (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log2(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log2(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log2 (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log2(float x);" />
      <MemberSignature Language="F#" Value="static member Log2 : single -&gt; single" Usage="System.MathF.Log2 x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">対数を検索する対象の数値。</param>
        <summary>指定した数の底 2 の対数を返します。</summary>
        <returns>次の表に示した値のいずれか  
  
 <list type="table"><listheader><term><paramref name="x" /> パラメーター 
 </term><description> 戻り値 
 </description></listheader><item><term> 正 
 </term><description> <paramref name="x" /> の底 2 の対数。つまり、log 2<paramref name="x" />。  
  
 </description></item><item><term> 0 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> 負 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <see cref="F:System.Single.NaN" /> と等価です。</term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <see cref="F:System.Single.PositiveInfinity" /> と等価です。</term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター`x`底 10 の値として指定されます。   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Max : single * single -&gt; single" Usage="System.MathF.Max (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">比較する 2 つの単精度浮動小数点数の最初の数。</param>
        <param name="y">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
        <summary>2 つの単精度浮動小数点数のうち、大きい方を返します。</summary>
        <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のいずれか大きい方。 <paramref name="x" />、または <paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxMagnitude">
      <MemberSignature Language="C#" Value="public static float MaxMagnitude (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 MaxMagnitude(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.MaxMagnitude(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaxMagnitude (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float MaxMagnitude(float x, float y);" />
      <MemberSignature Language="F#" Value="static member MaxMagnitude : single * single -&gt; single" Usage="System.MathF.MaxMagnitude (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">比較する 2 つの単精度浮動小数点数の最初の数。</param>
        <param name="y">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
        <summary>2 つの単精度浮動小数点数のうち、大きい絶対値を返します。</summary>
        <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のうち、絶対値が大きい方。 <paramref name="x" />、または <paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Min : single * single -&gt; single" Usage="System.MathF.Min (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">比較する 2 つの単精度浮動小数点数の最初の数。</param>
        <param name="y">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
        <summary>2 つの単精度浮動小数点数のうち、小さい方を返します。</summary>
        <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のいずれか小さい方。 <paramref name="x" />、<paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MinMagnitude">
      <MemberSignature Language="C#" Value="public static float MinMagnitude (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 MinMagnitude(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.MinMagnitude(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MinMagnitude (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float MinMagnitude(float x, float y);" />
      <MemberSignature Language="F#" Value="static member MinMagnitude : single * single -&gt; single" Usage="System.MathF.MinMagnitude (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">比較する 2 つの単精度浮動小数点数の最初の数。</param>
        <param name="y">比較する 2 つの単精度浮動小数点数の 2 番目の数。</param>
        <summary>2 つの単精度浮動小数点数のうち、小さい絶対値を返します。</summary>
        <returns>パラメーター <paramref name="x" /> または <paramref name="y" /> のうち、絶対値が小さい方。 <paramref name="x" />、または <paramref name="y" />、または <paramref name="x" /> と <paramref name="y" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const float PI = 3.141593;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PI = (3.141593)" />
      <MemberSignature Language="DocId" Value="F:System.MathF.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Single  = 3.141593" />
      <MemberSignature Language="C++ CLI" Value="public: float PI = 3.141593;" />
      <MemberSignature Language="F#" Value="val mutable PI : single" Usage="System.MathF.PI" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.141593</MemberValue>
      <Docs>
        <summary>定数 (π) を指定して、円の直径に対する円周の割合を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

このフィールドの値は、3.14159274 です。

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static float Pow (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Pow(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Pow(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Pow(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Pow : single * single -&gt; single" Usage="System.MathF.Pow (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">累乗対象の単精度浮動小数点数。</param>
        <param name="y">累乗を指定する単精度浮動小数点数。</param>
        <summary>指定の数値を指定した値で累乗した値を返します。</summary>
        <returns>数値 <paramref name="x" /> を <paramref name="y" /> で累乗した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 さまざまな値または範囲の値を指定する、次の表は、戻り値を示します、`x`と`y`パラメーター。 詳細については、「<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>「<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>および「<xref:System.Single.NaN?displayProperty=nameWithType>」を参照してください。  
  
|パラメーター|戻り値|  
|----------------|------------------|  
|`x` または`y`  = `NaN`します。|`NaN`|  
|`x` = すべての値を除く`NaN`;`y` = 0。|1|  
|`x` = `NegativeInfinity`; `y` < 0.|0|  
|`x` = `NegativeInfinity`;`y`が奇数の正の整数。|`NegativeInfinity`|  
|`x` = `NegativeInfinity`;`y`は正の値が奇数の整数ではありません。|`PositiveInfinity`|  
|`x` < 0 なく`NegativeInfinity`;`y` 、整数ではない`NegativeInfinity`、または`PositiveInfinity`します。|`NaN`|  
|`x` =-1。`y`  =  `NegativeInfinity`または`PositiveInfinity`します。|`NaN`|  
|-1 < `x` < 1; `y` = `NegativeInfinity`.|`PositiveInfinity`|  
|-1 < `x` < 1; `y` = `PositiveInfinity`.|0|  
|`x` <-1 または`x`> 1 になります;`y` = `NegativeInfinity`.|0|  
|`x` <-1 または`x`> 1 になります;`y` = `PositiveInfinity`.|`PositiveInfinity`|  
|`x` = 0; `y` < 0.|`PositiveInfinity`|  
|`x` = 0; `y` > 0.|0|  
|`x` = 1 になります。`y`以外の値は、`NaN`します。|1|  
|`x` = `PositiveInfinity`; `y` < 0.|0|  
|`x` = `PositiveInfinity`; `y` > 0.|`PositiveInfinity`|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.MathF.Sqrt(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x);" />
      <MemberSignature Language="F#" Value="static member Round : single -&gt; single" Usage="System.MathF.Round x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">丸め対象の単精度浮動小数点数。</param>
        <summary>単精度浮動小数点の値は最も近い整数値に丸められ、中間値は最も近い偶数値に丸められます。</summary>
        <returns><paramref name="x" /> に最も近い整数。 <paramref name="x" /> の小数部が 2 つの整数 (一方が偶数で、もう一方が奇数) の中間にある場合は、偶数が返されます。 このメソッドは、整数型ではなく <see cref="T:System.Single" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

このメソッドは、既定の規約の丸め処理を行う<xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>します。

[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

場合の値、`x`引数が<xref:System.Single.NaN?displayProperty=nameWithType>、メソッドを返します<xref:System.Single.NaN?displayProperty=nameWithType>します。 場合`x`は<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、メソッドを返します<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、それぞれします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>結果を浮動小数点数としての 10 進数の値を表すまたは場合によっては、浮動小数点値に対する算術演算を実行する精度が失われるのため、<see cref="M:System.MathF.Round(System.Single)" />メソッドが、中間の値を丸めるされない可能性があります、近い偶数の整数。</para></block>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, digits As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, int digits);" />
      <MemberSignature Language="F#" Value="static member Round : single * int -&gt; single" Usage="System.MathF.Round (x, digits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">丸め対象の単精度浮動小数点数。</param>
        <param name="digits">戻り値の小数部の桁数。</param>
        <summary>単精度浮動小数点の値は指定した小数部の桁数に丸められ、中間値は最も近い偶数値に丸められます。</summary>
        <returns><paramref name="x" /> に等しい小数部の桁数を格納する <paramref name="digits" /> に最も近い数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
値、`digits`引数は 0 から 6 までです。 サポートされている整数部と小数桁の数字の最大数は、6、<xref:System.Single>型。

このメソッドは、既定の規約の丸め処理を行う<xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>します。 

[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

場合の値、`x`引数が<xref:System.Single.NaN?displayProperty=nameWithType>、メソッドを返します<xref:System.Single.NaN?displayProperty=nameWithType>します。 場合`x`は<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、メソッドを返します<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、それぞれします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits" /> が 0 より小さいか、6 を超えています。</exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, mode As MidpointRounding) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : single * MidpointRounding -&gt; single" Usage="System.MathF.Round (x, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="x">丸め対象の単精度浮動小数点数。</param>
        <param name="mode"><paramref name="x" /> が 2 つの数値の中間にある場合に丸める方法を指定します。</param>
        <summary>単精度浮動小数点の値は最も近い整数に丸められ、中間値には指定した丸め処理が使用されます。</summary>
        <returns><paramref name="x" /> に最も近い整数。 <paramref name="x" /> が 2 つの整数 (一方が偶数でもう一方が奇数) の中間にある場合、<paramref name="mode" /> によって 2 つの数値のどちらが返されるかが決まります。 このメソッドは、整数型ではなく <see cref="T:System.Single" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  


[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

場合の値、`x`引数が<xref:System.Single.NaN?displayProperty=nameWithType>、メソッドを返します<xref:System.Single.NaN?displayProperty=nameWithType>します。 場合`x`は<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、メソッドを返します<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、それぞれします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="mode" /> が <see cref="T:System.MidpointRounding" /> の正しい値ではありません。</exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, digits As Integer, mode As MidpointRounding) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, int digits, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : single * int * MidpointRounding -&gt; single" Usage="System.MathF.Round (x, digits, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="x">丸め対象の単精度浮動小数点数。</param>
        <param name="digits">戻り値の小数部の桁数。</param>
        <param name="mode"><paramref name="x" /> が 2 つの数値の中間にある場合に丸める方法を指定します。</param>
        <summary>単精度浮動小数点の値は指定した小数部の桁数に丸められ、中間値には指定した丸め処理が使用されます。</summary>
        <returns><paramref name="digits" /> に等しい小数部の桁数を格納する <paramref name="x" /> に最も近い数値。 <paramref name="x" /> の小数部の桁数が <paramref name="digits" /> よりも少ない場合、<paramref name="x" /> がそのまま返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

値、`digits`引数は 0 から 6 までです。 サポートされている整数部と小数桁の数字の最大数は、6、<xref:System.Single>型。


[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

場合の値、`x`引数が<xref:System.Single.NaN?displayProperty=nameWithType>、メソッドを返します<xref:System.Single.NaN?displayProperty=nameWithType>します。 場合`x`は<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、メソッドを返します<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、それぞれします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits" /> が 0 より小さいか、6 を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="mode" /> が <see cref="T:System.MidpointRounding" /> の正しい値ではありません。</exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleB">
      <MemberSignature Language="C#" Value="public static float ScaleB (float x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ScaleB(float32 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.ScaleB(System.Single,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ScaleB (x As Single, n As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ScaleB(float x, int n);" />
      <MemberSignature Language="F#" Value="static member ScaleB : single * int -&gt; single" Usage="System.MathF.ScaleB (x, n)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="n" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">基底値を指定する単精度浮動小数点数。</param>
        <param name="n">累乗を指定する単精度浮動小数点数。</param>
        <summary>効率的に計算された x * 2^n を返します。</summary>
        <returns>効率的に計算された x * 2^n。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (x As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float x);" />
      <MemberSignature Language="F#" Value="static member Sign : single -&gt; int" Usage="System.MathF.Sign x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">符号付き数値。</param>
        <summary>単精度浮動小数点数の符号を示す値を返します。</summary>
        <returns><paramref name="x" /> の符号を示す数値 (次の表を参照)。  
  
 <list type="table"><listheader><term> 戻り値 
 </term><description> 説明 
 </description></listheader><item><term> -1 
 </term><description><paramref name="x" /> が 0 未満です。  
  
 </description></item><item><term> 0 
 </term><description><paramref name="x" /> が 0 です。  
  
 </description></item><item><term> 1 
 </term><description><paramref name="x" /> が 0 より大きい値です。  
  
 </description></item></list></returns>
        <remarks></remarks>
        <exception cref="T:System.ArithmeticException"><paramref name="x" /> と <see cref="F:System.Single.NaN" /> が等価です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static float Sin (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sin(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sin(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sin(float x);" />
      <MemberSignature Language="F#" Value="static member Sin : single -&gt; single" Usage="System.MathF.Sin x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">ラジアンで表した角度。</param>
        <summary>指定された角度のサインを返します。</summary>
        <returns><paramref name="x" /> のサイン。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角度、 `x`、ラジアン単位である必要があります。 乗算 <xref:System.MathF.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static float Sinh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sinh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sinh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sinh(float x);" />
      <MemberSignature Language="F#" Value="static member Sinh : single -&gt; single" Usage="System.MathF.Sinh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">ラジアンで表した角度。</param>
        <summary>指定された角度のハイパーボリック サインを返します。</summary>
        <returns><paramref name="x" /> のハイパーボリック サイン。 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NaN" /> のいずれかに等しい場合、このメソッドは <paramref name="x" /> に等しい <see cref="T:System.Single" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角度、 `x`、ラジアン単位である必要があります。 乗算 <xref:System.MathF.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static float Sqrt (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sqrt(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sqrt(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sqrt(float x);" />
      <MemberSignature Language="F#" Value="static member Sqrt : single -&gt; single" Usage="System.MathF.Sqrt x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">平方根を求める対象の数値。</param>
        <summary>指定された数値の平方根を返します。</summary>
        <returns>次の表に示した値のいずれか  
  
 <list type="table"><listheader><term><paramref name="x" /> パラメーター 
 </term><description> 戻り値 
 </description></listheader><item><term> 0 または正 
 </term><description> <paramref name="x" /> の正の平方根。  
  
 </description></item><item><term> 負 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <see cref="F:System.Single.NaN" /> と等しい</term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <see cref="F:System.Single.PositiveInfinity" /> と等しい</term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks></remarks>
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static float Tan (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Tan(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Tan(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Tan(float x);" />
      <MemberSignature Language="F#" Value="static member Tan : single -&gt; single" Usage="System.MathF.Tan x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">ラジアンで表した角度。</param>
        <summary>指定された角度のタンジェントを返します。</summary>
        <returns><paramref name="x" /> のタンジェント。 <paramref name="x" /> が <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" />、<see cref="F:System.Single.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角度、 `x`、ラジアン単位である必要があります。 乗算 <xref:System.MathF.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static float Tanh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Tanh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Tanh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Tanh(float x);" />
      <MemberSignature Language="F#" Value="static member Tanh : single -&gt; single" Usage="System.MathF.Tanh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">ラジアンで表した角度。</param>
        <summary>指定された角度のハイパーボリック タンジェントを返します。</summary>
        <returns><paramref name="x" /> のハイパーボリック タンジェント。 <paramref name="x" /> が <see cref="F:System.Single.NegativeInfinity" /> に等しい場合、このメソッドは -1 を返します。 値が <see cref="F:System.Single.PositiveInfinity" /> に等しい場合、このメソッドは 1 を返します。 <paramref name="x" /> が <see cref="F:System.Single.NaN" /> に等しい場合、このメソッドは <see cref="F:System.Single.NaN" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 角度、 `x`、ラジアン単位である必要があります。 乗算 <xref:System.MathF.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static float Truncate (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Truncate(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Truncate(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Truncate(float x);" />
      <MemberSignature Language="F#" Value="static member Truncate : single -&gt; single" Usage="System.MathF.Truncate x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">切り捨て対象の数値。</param>
        <summary>指定した単精度浮動小数点数の整数部を計算します。</summary>
        <returns><paramref name="x" /> の整数部。つまり、小数部の桁を破棄した後に残る数値 (次の表にリストされている値のいずれか)。  
  
 <list type="table"><listheader><term><paramref name="x" /></term><description> 戻り値 
 </description></listheader><item><term><see cref="F:System.Single.NaN" /></term><description><see cref="F:System.Single.NaN" /></description></item><item><term><see cref="F:System.Single.NegativeInfinity" /></term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term><see cref="F:System.Single.PositiveInfinity" /></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.MathF.Truncate%2A> 丸めます`x`0 方向に最も近い整数にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
  </Members>
</Type>
