<Type Name="Single" FullName="System.Single">
  <TypeSignature Language="C#" Value="public struct Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float32 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float32&gt;, class System.IConvertible, class System.IEquatable`1&lt;float32&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Single" />
  <TypeSignature Language="VB.NET" Value="Public Structure Single&#xA;Implements IComparable, IComparable(Of Single), IConvertible, IEquatable(Of Single), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fc82c-101">単精度浮動小数点数を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-101">Represents a single-precision floating-point number.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-102"><xref:System.Single>値型単精度 32 ビットの数まで値を表します-3.402823e38 から 3.402823 e 38、だけでなく、正または負の値を 0 に<xref:System.Single.PositiveInfinity>、 <xref:System.Single.NegativeInfinity>、および非数 (<xref:System.Single.NaN>)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-102">The <xref:System.Single> value type represents a single-precision 32-bit number with values ranging from negative 3.402823e38 to positive 3.402823e38, as well as positive or negative zero, <xref:System.Single.PositiveInfinity>, <xref:System.Single.NegativeInfinity>, and not a number (<xref:System.Single.NaN>).</span></span> <span data-ttu-id="fc82c-103">値 (惑星または銀河系間の距離) など、非常に大規模なまたは (キロで物質の分子質量) などの非常に小さいとする多くの場合はありません (別の太陽系 earth からの距離) などの正確な値を表すものではします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-103">It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (such as the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system).</span></span> <span data-ttu-id="fc82c-104"><xref:System.Single> IEC 60559: 1989 (IEEE 754) バイナリ浮動小数点算術演算子の標準に準拠している型。</span><span class="sxs-lookup"><span data-stu-id="fc82c-104">The <xref:System.Single> type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="fc82c-105">このトピックは、次のセクションで構成されています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-105">This topic consists of the following sections:</span></span>  
  
-   [<span data-ttu-id="fc82c-106">精度の浮動小数点表現</span><span class="sxs-lookup"><span data-stu-id="fc82c-106">Floating-point representation and precision</span></span>](#Precision)  
  
-   [<span data-ttu-id="fc82c-107">等価性テスト</span><span class="sxs-lookup"><span data-stu-id="fc82c-107">Testing for equality</span></span>](#Equality)  
  
-   [<span data-ttu-id="fc82c-108">浮動小数点値、および例外</span><span class="sxs-lookup"><span data-stu-id="fc82c-108">Floating-point values and exceptions</span></span>](#Exceptions)  
  
-   [<span data-ttu-id="fc82c-109">型変換と 1 つの構造</span><span class="sxs-lookup"><span data-stu-id="fc82c-109">Type conversion and the Single structure</span></span>](#Conversion)  
  
-   [<span data-ttu-id="fc82c-110">浮動小数点の機能</span><span class="sxs-lookup"><span data-stu-id="fc82c-110">Floating-point functionality</span></span>](#Functionality)  
  
 <span data-ttu-id="fc82c-111"><xref:System.Single?displayProperty=nameWithType> インスタンスの値をその文字列形式に変換する数値の文字列形式をこの型のインスタンスに変換して、この型のインスタンスを比較するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-111"><xref:System.Single?displayProperty=nameWithType> provides methods to compare instances of this type, to convert the value of an instance to its string representation, and to convert the string representation of a number to an instance of this type.</span></span> <span data-ttu-id="fc82c-112">書式指定コードが値型の文字列形式を制御する方法については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)、[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)、および[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-112">For information about how format specification codes control the string representation of value types, see [Formatting Types](~/docs/standard/base-types/formatting-types.md), [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md), and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
<a name="Precision"></a>   
## <a name="floating-point-representation-and-precision"></a><span data-ttu-id="fc82c-113">精度の浮動小数点表現</span><span class="sxs-lookup"><span data-stu-id="fc82c-113">Floating-point representation and precision</span></span>  
 <span data-ttu-id="fc82c-114"><xref:System.Single>データ型は、次の表に示すように、32 ビットのバイナリ形式で 1 つの単精度浮動小数点値を格納します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-114">The <xref:System.Single> data type stores single-precision floating-point values in a 32-bit binary format, as shown in the following table:</span></span>  
  
|<span data-ttu-id="fc82c-115">パーツ</span><span class="sxs-lookup"><span data-stu-id="fc82c-115">Part</span></span>|<span data-ttu-id="fc82c-116">ビット</span><span class="sxs-lookup"><span data-stu-id="fc82c-116">Bits</span></span>|  
|----------|----------|  
|<span data-ttu-id="fc82c-117">有効桁または仮数部</span><span class="sxs-lookup"><span data-stu-id="fc82c-117">Significand or mantissa</span></span>|<span data-ttu-id="fc82c-118">0-22</span><span class="sxs-lookup"><span data-stu-id="fc82c-118">0-22</span></span>|  
|<span data-ttu-id="fc82c-119">指数</span><span class="sxs-lookup"><span data-stu-id="fc82c-119">Exponent</span></span>|<span data-ttu-id="fc82c-120">23-30</span><span class="sxs-lookup"><span data-stu-id="fc82c-120">23-30</span></span>|  
|<span data-ttu-id="fc82c-121">記号 (0 1、正の数値を = = 負の値)</span><span class="sxs-lookup"><span data-stu-id="fc82c-121">Sign (0 = positive, 1 = negative)</span></span>|<span data-ttu-id="fc82c-122">31</span><span class="sxs-lookup"><span data-stu-id="fc82c-122">31</span></span>|  
  
 <span data-ttu-id="fc82c-123">小数がいくつかの小数部の値を正確に表すことができないと同様 (1/3 などまたは<xref:System.Math.PI?displayProperty=nameWithType>)、バイナリの小数部がいくつかの小数部の値を表すことができません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-123">Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <xref:System.Math.PI?displayProperty=nameWithType>), binary fractions are unable to represent some fractional values.</span></span> <span data-ttu-id="fc82c-124">たとえば、2、小数として.2 で正確に表される、10 は、無限大パターン「1100」繰り返しでのバイナリの分数として.0011111001001100 で表されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-124">For example, 2/10, which is represented precisely by .2 as a decimal fraction, is represented by .0011111001001100 as a binary fraction, with the pattern "1100" repeating to infinity.</span></span> <span data-ttu-id="fc82c-125">この場合、浮動小数点値は、それが表す数の不正確な表現を提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-125">In this case, the floating-point value provides an imprecise representation of the number that it represents.</span></span> <span data-ttu-id="fc82c-126">多くの場合、元の浮動小数点値で追加の数学演算を実行すると、その有効桁数が不足しているが増加します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-126">Performing additional mathematical operations on the original floating-point value often increases its lack of precision.</span></span> <span data-ttu-id="fc82c-127">たとえば、.3 で 10 を乗算した結果を比較すると、.3 に.3 を 9 回追加すると、その追加が表示されます結果を生成する精度の低い、乗算よりも多くの 8 つの操作が含まれるためです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-127">For example, if you compare the results of multiplying .3 by 10 and adding .3 to .3 nine times, you will see that addition produces the less precise result, because it involves eight more operations than multiplication.</span></span> <span data-ttu-id="fc82c-128">このような違いは、2 つを表示する場合にのみ確認することに注意してください<xref:System.Single>"R"を使用して値[標準数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)であり、必要に応じて、すべての 9 桁の精度でサポートされているが表示されます、<xref:System.Single>型です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-128">Note that this disparity is apparent only if you display the two <xref:System.Single> values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md), which, if necessary, displays all 9 digits of precision supported by the <xref:System.Single> type.</span></span>  
  
 [!code-csharp[System.Single.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation1.cs#3)]
 [!code-vb[System.Single.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation1.vb#3)]  
  
 <span data-ttu-id="fc82c-129">いくつかの数字は、バイナリ値の小数部として正確に表すことはできません、ために、浮動小数点数には、おおよその実数のみことができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-129">Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.</span></span>  
  
 <span data-ttu-id="fc82c-130">すべての浮動小数点数、浮動小数点値が実数を概算するどれだけ正確にも決定する有効桁数の限られています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-130">All floating-point numbers have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number.</span></span> <span data-ttu-id="fc82c-131">A<xref:System.Single>値は最大 7 桁の有効桁数、最大 9 桁が内部的に保持されています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-131">A <xref:System.Single> value has up to 7 decimal digits of precision, although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="fc82c-132">これは、浮動小数点演算の精度浮動小数点値を変更することがありますがないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-132">This means that some floating-point operations may lack the precision to change a floating-point value.</span></span> <span data-ttu-id="fc82c-133">次の例は、大規模な単精度浮動小数点値を定義しの製品を追加<xref:System.Single.Epsilon?displayProperty=nameWithType>と 1,000兆にします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-133">The following example defines a large single-precision floating-point value, and then adds the product of <xref:System.Single.Epsilon?displayProperty=nameWithType> and one quadrillion to it.</span></span> <span data-ttu-id="fc82c-134">ただし、製品は、元の浮動小数点値を変更するのには小さすぎます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-134">However, the product is too small to modify the original floating-point value.</span></span> <span data-ttu-id="fc82c-135">一方、製品の最上位桁は 1、その最下位の桁が 1/10、1/100、1/1000、<sup>-312</sup>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-135">Its least significant digit is thousandths, whereas the most significant digit in the product is 1<sup>-312</sup>.</span></span>  
  
 [!code-csharp[System.Single.Structure#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation2.cs#4)]
 [!code-vb[System.Single.Structure#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation2.vb#4)]  
  
 <span data-ttu-id="fc82c-136">浮動小数点数の制限された有効桁数には、いくつかのような影響があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-136">The limited precision of a floating-point number has several consequences:</span></span>  
  
-   <span data-ttu-id="fc82c-137">有効桁数が異なるためされません比較の特定の有効桁数で等しく見える 2 つの浮動小数点数が等しい場合があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-137">Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different.</span></span> <span data-ttu-id="fc82c-138">次の例で、一連の数値を加算し、その合計が、予想される合計と比較します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-138">In the following example, a series of numbers are added together, and their total is compared with their expected total.</span></span> <span data-ttu-id="fc82c-139">2 つの値は同じであるへの呼び出しに見えますが、`Equals`メソッドであることを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-139">Although the two values appear to be the same, a call to the `Equals` method indicates that they are not.</span></span>  
  
     [!code-csharp[System.Single.Structure#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Single.Structure#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist3.vb#6)]  
  
     <span data-ttu-id="fc82c-140">書式項目を変更する場合、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType>ステートメントから`{0}`と`{1}`に`{0:R}`と`{1:R}`、2 つのすべての有効桁数を表示する<xref:System.Single>値、2 つの値が等しくないこと精度が失われるのため、追加操作中には明らかです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-140">If you change the format items in the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> statement from `{0}` and `{1}` to `{0:R}` and `{1:R}` to display all significant digits of the two <xref:System.Single> values, it is clear that the two values are unequal because of a loss of precision during the addition operations.</span></span> <span data-ttu-id="fc82c-141">呼び出してこの場合、この問題を解決できます、<xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType>を丸めるにメソッド、<xref:System.Single>比較を実行する前に必要な有効桁数の値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-141">In this case, the issue can be resolved by calling the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> method to round the <xref:System.Single> values to the desired precision before performing the comparison.</span></span>  
  
-   <span data-ttu-id="fc82c-142">浮動小数点数を使用する数値演算または比較演算可能性がありますいない場合、結果同じ 10 進数を使用すると、バイナリ浮動小数点数が 10 進数と等しくないためです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-142">A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number.</span></span> <span data-ttu-id="fc82c-143">前の例では、.3 で 10 を乗算し、.3 に.3 9 回を追加することの結果を表示することによってこれを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-143">A previous example illustrated this by displaying the result of multiplying .3 by 10 and adding .3 to .3 nine times.</span></span>  
  
     <span data-ttu-id="fc82c-144">小数部の値を持つ数値演算で精度が重要を使用して、<xref:System.Decimal>型の代わりに、<xref:System.Single>型です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-144">When accuracy in numeric operations with fractional values is important, use the <xref:System.Decimal> type instead of the <xref:System.Single> type.</span></span> <span data-ttu-id="fc82c-145">場合の範囲外の整数の値を持つ数値演算の精度、<xref:System.Int64>または<xref:System.UInt64>使用の種類は重要では、<xref:System.Numerics.BigInteger>型です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-145">When accuracy in numeric operations with integral values beyond the range of the <xref:System.Int64> or <xref:System.UInt64> types is important, use the <xref:System.Numerics.BigInteger> type.</span></span>  
  
-   <span data-ttu-id="fc82c-146">値には、ラウンドト リップしません浮動小数点数が含まれている場合の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-146">A value might not round-trip if a floating-point number is involved.</span></span> <span data-ttu-id="fc82c-147">操作は、元の浮動小数点数を別の形式に変換します、逆の操作が、浮動小数点数に変換後のフォームを変換し、最終的な浮動小数点数が元の浮動小数点数に等しい場合、値はラウンドト リップをいいます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-147">A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is equal to the original floating-point number.</span></span> <span data-ttu-id="fc82c-148">ラウンド トリップは、1 つまたは複数の最下位の桁が失われたまたは変換で変更されるために失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-148">The round trip might fail because one or more least significant digits are lost or changed in a conversion.</span></span> <span data-ttu-id="fc82c-149">次の例では、次の 3 つ<xref:System.Single>値が文字列に変換され、ファイルに保存します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-149">In the following example, three <xref:System.Single> values are converted to strings and saved in a file.</span></span> <span data-ttu-id="fc82c-150">出力が示すように同じ値が表示されますは、復元された値が元の値に等しくありません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-150">As the output shows, although the values appear to be identical, the restored values are not equal to the original values.</span></span>  
  
     [!code-csharp[System.Single.Structure#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist4a.cs#17)]
     [!code-vb[System.Single.Structure#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList4a.vb#17)]  
  
     <span data-ttu-id="fc82c-151">この場合、値を指定できますが正常に往復"G9"を使用して、[標準数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)の完全な精度を保持するために<xref:System.Single>値は、次の例のようにします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-151">In this case, the values can be successfully round-tripped by using the "G9" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to preserve the full precision of <xref:System.Single> values, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/PrecisionList5a.cs#18)]
     [!code-vb[System.Single.Structure#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList5a.vb#18)]  
  
-   <span data-ttu-id="fc82c-152"><xref:System.Single> 値があるよりも精度が低い<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-152"><xref:System.Single> values have less precision than <xref:System.Double> values.</span></span> <span data-ttu-id="fc82c-153">A<xref:System.Single>見かけ上と同じに変換される値<xref:System.Double>多くの場合と等しくない、<xref:System.Double>有効桁数の違いのための値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-153">A <xref:System.Single> value that is converted to a seemingly equivalent <xref:System.Double> often does not equal the <xref:System.Double> value because of differences in precision.</span></span> <span data-ttu-id="fc82c-154">次の例では、同一の除算演算の結果が割り当てられている、<xref:System.Double>値と<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-154">In the following example, the result of identical division operations is assigned to a <xref:System.Double> value and a <xref:System.Single> value.</span></span> <span data-ttu-id="fc82c-155">後に、<xref:System.Single>に値をキャスト、 <xref:System.Double>、2 つの値の比較は、両者が等しくないことを示しています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-155">After the <xref:System.Single> value is cast to a <xref:System.Double>, a comparison of the two values shows that they are unequal.</span></span>  
  
     [!code-csharp[System.Double.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     <span data-ttu-id="fc82c-156">この問題を避けるためには、使用するか、<xref:System.Double>データの型の代わりに、<xref:System.Single>データ型、またはを使用して、<xref:System.Math.Round%2A>メソッド両方の値が同一の有効桁数を含めるようにします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-156">To avoid this problem, either use the <xref:System.Double> data type in place of the <xref:System.Single> data type, or use the <xref:System.Math.Round%2A> method so that both values have the same precision.</span></span>  
  
<a name="Equality"></a>   
## <a name="testing-for-equality"></a><span data-ttu-id="fc82c-157">等価性テスト</span><span class="sxs-lookup"><span data-stu-id="fc82c-157">Testing for equality</span></span>  
 <span data-ttu-id="fc82c-158">等しいと見なされるに 2 つ<xref:System.Single>値が同一の値を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-158">To be considered equal, two <xref:System.Single> values must represent identical values.</span></span> <span data-ttu-id="fc82c-159">ただし、有効桁数の値の間の違いのため、または 1 つまたは両方の値によって精度が失われるのためには、多くの場合は同じである必要な浮動小数点値に有効桁数の違いにより等しくないとします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-159">However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal due to differences in their least significant digits.</span></span> <span data-ttu-id="fc82c-160">その結果、呼び出し、<xref:System.Single.Equals%2A>呼び出しまたは 2 つの値が等しいかどうかを決定するメソッド、 <xref:System.Single.CompareTo%2A> 2 つの間の関係を決定するメソッド<xref:System.Single>値、多くの場合、予期しない結果を生成します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-160">As a result, calls to the <xref:System.Single.Equals%2A> method to determine whether two values are equal, or calls to the <xref:System.Single.CompareTo%2A> method to determine the relationship between two <xref:System.Single> values, often yield unexpected results.</span></span> <span data-ttu-id="fc82c-161">これは、次の例で示した 2 つのことが明らかと等しくという<xref:System.Single>値が等しくないと、最初の値は、2 番目の値は 9 に 7 桁の有効桁数を持つため有効にします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-161">This is evident in the following example, where two apparently equal <xref:System.Single> values turn out to be unequal, because the first value has 7 digits of precision, whereas the second value has 9.</span></span>  
  
 [!code-csharp[System.Single.Structure#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Single.Structure#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison1.vb#9)]  
  
 <span data-ttu-id="fc82c-162">異なるコード パスをたどることと、多くの場合、さまざまな方法で操作する計算値を証明と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-162">Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal.</span></span> <span data-ttu-id="fc82c-163">次の例では、1 つ<xref:System.Single>値は四角形、および元の値を復元する平方根を計算し、します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-163">In the following example, one <xref:System.Single> value is squared, and then the square root is calculated to restore the original value.</span></span> <span data-ttu-id="fc82c-164">1 秒あたり<xref:System.Single>は 3.51 が乗算され、前に、結果の平方根が元の値を復元する 3.51 で割った値を二乗します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-164">A second <xref:System.Single> is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value.</span></span> <span data-ttu-id="fc82c-165">2 つの値が同一に見えますへの呼び出し、<xref:System.Single.Equals%28System.Single%29>メソッドでは、両者が等しくないことを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-165">Although the two values appear to be identical, a call to the <xref:System.Single.Equals%28System.Single%29> method indicates that they are not equal.</span></span> <span data-ttu-id="fc82c-166">"G9"標準書式指定文字列を使用して、それぞれのすべての有効桁数を表示する結果文字列を取得する<xref:System.Single>値では、2 番目の値が.0000000000001 であるかを示しています。 最初よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-166">Using the "G9" standard format string to return a result string that displays all the significant digits of each <xref:System.Single> value shows that the second value is .0000000000001 less than the first.</span></span>  
  
 [!code-csharp[System.Single.Structure#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Single.Structure#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison2.vb#10)]  
  
 <span data-ttu-id="fc82c-167">精度の損失が比較の結果に影響する可能性がある場合、呼び出す代わりに、次の手法を使用することができます、<xref:System.Single.Equals%2A>または<xref:System.Single.CompareTo%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-167">In cases where a loss of precision is likely to affect the result of a comparison, you can use the following techniques instead of calling the <xref:System.Single.Equals%2A> or <xref:System.Single.CompareTo%2A> method:</span></span>  
  
-   <span data-ttu-id="fc82c-168">呼び出す、<xref:System.Math.Round%2A?displayProperty=nameWithType>メソッドを両方の値が同一の有効桁数を含めることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-168">Call the <xref:System.Math.Round%2A?displayProperty=nameWithType> method to ensure that both values have the same precision.</span></span> <span data-ttu-id="fc82c-169">次の例では、このアプローチを使用して、2 つの小数部の値が等しいようにする前の例を変更します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-169">The following example modifies a previous example to use this approach so that two fractional values are equivalent.</span></span>  
  
     [!code-csharp[System.Single.Structure#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Single.Structure#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison3.vb#11)]  
  
     <span data-ttu-id="fc82c-170">精度の問題が引き続き中間値の丸め処理に適用されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-170">Note that the problem of precision still applies to rounding of midpoint values.</span></span> <span data-ttu-id="fc82c-171">詳細については、<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-171">For more information, see the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="fc82c-172">等値ではなく概数に等しいかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-172">Test for approximate equality instead of equality.</span></span> <span data-ttu-id="fc82c-173">この手法は、絶対パスを定義することを必要とする 2 つの値は異なるが、引き続きの量に等しいか、または、小さい方の値が大きい方の値から分岐できます相対的な時間を定義します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-173">This technique requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="fc82c-174"><xref:System.Single.Epsilon?displayProperty=nameWithType> 2 つの間の距離の絶対的な測定値としては使用<xref:System.Single>等しいかどうかをテストするときの値します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-174"><xref:System.Single.Epsilon?displayProperty=nameWithType> is sometimes used as an absolute measure of the distance between two <xref:System.Single> values when testing for equality.</span></span>  <span data-ttu-id="fc82c-175">ただし、<xref:System.Single.Epsilon?displayProperty=nameWithType>追加、またはから減算できる最小有効値を測定、<xref:System.Single>値が 0 です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-175">However, <xref:System.Single.Epsilon?displayProperty=nameWithType> measures the smallest possible value that can be added to, or subtracted from, a <xref:System.Single> whose value is zero.</span></span> <span data-ttu-id="fc82c-176">ほとんどの正の数および負<xref:System.Single>値、値の<xref:System.Single.Epsilon?displayProperty=nameWithType>が小さすぎてを検出します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-176">For most positive and negative <xref:System.Single> values, the value of <xref:System.Single.Epsilon?displayProperty=nameWithType> is too small to be detected.</span></span> <span data-ttu-id="fc82c-177">したがって、ゼロ値、お勧めしませんの等価性テストで使用します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-177">Therefore, except for values that are zero, we do not recommend its use in tests for equality.</span></span>  
  
     <span data-ttu-id="fc82c-178">次の例では、後者のアプローチを使用して、定義、`IsApproximatelyEqual`相対的な 2 つの値の差をテストするメソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-178">The following example uses the latter approach to define an `IsApproximatelyEqual` method that tests the relative difference between two values.</span></span> <span data-ttu-id="fc82c-179">呼び出しの結果を対比させても、`IsApproximatelyEqual`メソッドおよび<xref:System.Single.Equals%28System.Single%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-179">It also contrasts the result of calls to the `IsApproximatelyEqual` method and the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
     [!code-csharp[System.Single.Structure#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Single.Structure#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## <a name="floating-point-values-and-exceptions"></a><span data-ttu-id="fc82c-180">浮動小数点値、および例外</span><span class="sxs-lookup"><span data-stu-id="fc82c-180">Floating-point values and exceptions</span></span>  
 <span data-ttu-id="fc82c-181">浮動小数点値を持つ操作は、整数型の 0 やオーバーフローによって除算などの無効な操作の場合に例外をスローする操作とは異なり、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-181">Operations with floating-point values do not throw exceptions, unlike operations with integral types, which throw exceptions in cases of illegal operations such as division by zero or overflow.</span></span>  <span data-ttu-id="fc82c-182">代わりに、このような場合は、浮動小数点演算の結果は 0、正の無限大、負の無限大、または非数 (NaN)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-182">Instead, in these situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):</span></span>  
  
-   <span data-ttu-id="fc82c-183">浮動小数点演算の結果が小さすぎる場合、変換先形式の結果は 0 です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-183">If the result of a floating-point operation is too small for the destination format, the result is zero.</span></span> <span data-ttu-id="fc82c-184">これは、次の例のように、2 つの非常に小さい浮動小数点数値を乗算するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-184">This can occur when two very small floating-point numbers are multiplied, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Single.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional1.vb#1)]  
  
-   <span data-ttu-id="fc82c-185">浮動小数点演算の結果の大きさが、変換先形式の範囲を超えている場合、操作の結果は<xref:System.Single.PositiveInfinity>または<xref:System.Single.NegativeInfinity>、必要に応じて、結果の符号にします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-185">If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>, as appropriate for the sign of the result.</span></span> <span data-ttu-id="fc82c-186">オーバーフローが発生する操作の結果<xref:System.Single.MaxValue?displayProperty=nameWithType>は<xref:System.Single.PositiveInfinity>、およびオーバーフローが発生する操作の結果<xref:System.Single.MinValue?displayProperty=nameWithType>は<xref:System.Single.NegativeInfinity>次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-186">The result of an operation that overflows <xref:System.Single.MaxValue?displayProperty=nameWithType> is <xref:System.Single.PositiveInfinity>, and the result of an operation that overflows <xref:System.Single.MinValue?displayProperty=nameWithType> is <xref:System.Single.NegativeInfinity>, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Single.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional2.vb#2)]  
  
     <span data-ttu-id="fc82c-187"><xref:System.Single.PositiveInfinity> 正の被除数と 0 による除算の結果もと<xref:System.Single.NegativeInfinity>被除数を負の値に 0 による除算の結果します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-187"><xref:System.Single.PositiveInfinity> also results from a division by zero with a positive dividend, and <xref:System.Single.NegativeInfinity> results from a division by zero with a negative dividend.</span></span>  
  
-   <span data-ttu-id="fc82c-188">浮動小数点演算が有効でない場合、操作の結果は<xref:System.Single.NaN>します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-188">If a floating-point operation is invalid, the result of the operation is <xref:System.Single.NaN>.</span></span> <span data-ttu-id="fc82c-189">たとえば、<xref:System.Single.NaN>次の操作の結果します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-189">For example, <xref:System.Single.NaN> results from the following operations:</span></span>  
  
    -   <span data-ttu-id="fc82c-190">0 による除算、被除数と 0 です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-190">Division by zero with a dividend of zero.</span></span> <span data-ttu-id="fc82c-191">いずれかで結果がゼロで除算の他のケースに注意してください<xref:System.Single.PositiveInfinity>または<xref:System.Single.NegativeInfinity>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-191">Note that other cases of division by zero result in either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>.</span></span>  
  
    -   <span data-ttu-id="fc82c-192">無効な入力を持つ浮動小数点演算には。</span><span class="sxs-lookup"><span data-stu-id="fc82c-192">Any floating-point operation with invalid input.</span></span> <span data-ttu-id="fc82c-193">たとえば、負の値の平方根を返しますを検索しよう<xref:System.Single.NaN>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-193">For example, attempting to find the square root of a negative value returns <xref:System.Single.NaN>.</span></span>  
  
    -   <span data-ttu-id="fc82c-194">値がある引数を持つすべての操作<xref:System.Single.NaN?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-194">Any operation with an argument whose value is <xref:System.Single.NaN?displayProperty=nameWithType>.</span></span>  
  
<a name="Conversion"></a>   
## <a name="type-conversions-and-the-single-structure"></a><span data-ttu-id="fc82c-195">型変換と 1 つの構造</span><span class="sxs-lookup"><span data-stu-id="fc82c-195">Type conversions and the Single structure</span></span>  
 <span data-ttu-id="fc82c-196"><xref:System.Single>構造体は、明示的または暗黙的な変換演算子が定義されていません; 代わりに、変換がコンパイラによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-196">The <xref:System.Single> structure does not define any explicit or implicit conversion operators; instead, conversions are implemented by the compiler.</span></span>  
  
 <span data-ttu-id="fc82c-197">次の表は、他のプリミティブ数値型に値の発生しうる変換、<xref:System.Single>値も記載されているかどうかと、変換を拡大または縮小するかどうか、結果として得られる<xref:System.Single>元の値よりも精度が低い場合があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-197">The following table lists the possible conversions of a value of the other primitive numeric types to a <xref:System.Single> value, It also indicates whether the conversion is widening or narrowing and whether the resulting <xref:System.Single> may have less precision than the original value.</span></span>  
  
|<span data-ttu-id="fc82c-198">変換 (</span><span class="sxs-lookup"><span data-stu-id="fc82c-198">Conversion from</span></span>|<span data-ttu-id="fc82c-199">拡大/縮小</span><span class="sxs-lookup"><span data-stu-id="fc82c-199">Widening/narrowing</span></span>|<span data-ttu-id="fc82c-200">有効桁数が失われる可能性</span><span class="sxs-lookup"><span data-stu-id="fc82c-200">Possible loss of precision</span></span>|  
|---------------------|-------------------------|--------------------------------|  
|<xref:System.Byte>|<span data-ttu-id="fc82c-201">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-201">Widening</span></span>|<span data-ttu-id="fc82c-202">×</span><span class="sxs-lookup"><span data-stu-id="fc82c-202">No</span></span>|  
|<xref:System.Decimal>|<span data-ttu-id="fc82c-203">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-203">Widening</span></span><br /><br /> <span data-ttu-id="fc82c-204">C# を必要とするキャスト演算子に注意してください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-204">Note that C# requires a cast operator.</span></span>|<span data-ttu-id="fc82c-205">はい。</span><span class="sxs-lookup"><span data-stu-id="fc82c-205">Yes.</span></span> <span data-ttu-id="fc82c-206"><xref:System.Decimal> 29 桁の精度をサポートしています<xref:System.Single> 9 をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-206"><xref:System.Decimal> supports 29 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Double>|<span data-ttu-id="fc82c-207">縮小変換です。範囲外の値に変換する<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>または<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-207">Narrowing; out-of-range values are converted to <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> or <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>|<span data-ttu-id="fc82c-208">はい。</span><span class="sxs-lookup"><span data-stu-id="fc82c-208">Yes.</span></span> <span data-ttu-id="fc82c-209"><xref:System.Double> 17 桁の精度をサポートしています<xref:System.Single> 9 をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-209"><xref:System.Double> supports 17 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Int16>|<span data-ttu-id="fc82c-210">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-210">Widening</span></span>|<span data-ttu-id="fc82c-211">×</span><span class="sxs-lookup"><span data-stu-id="fc82c-211">No</span></span>|  
|<xref:System.Int32>|<span data-ttu-id="fc82c-212">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-212">Widening</span></span>|<span data-ttu-id="fc82c-213">はい。</span><span class="sxs-lookup"><span data-stu-id="fc82c-213">Yes.</span></span> <span data-ttu-id="fc82c-214"><xref:System.Int32> 10 桁の精度をサポートしています<xref:System.Single> 9 をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-214"><xref:System.Int32> supports 10 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Int64>|<span data-ttu-id="fc82c-215">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-215">Widening</span></span>|<span data-ttu-id="fc82c-216">はい。</span><span class="sxs-lookup"><span data-stu-id="fc82c-216">Yes.</span></span> <span data-ttu-id="fc82c-217"><xref:System.Int64> 19 桁の精度をサポートしています<xref:System.Single> 9 をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-217"><xref:System.Int64> supports 19 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.SByte>|<span data-ttu-id="fc82c-218">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-218">Widening</span></span>|<span data-ttu-id="fc82c-219">×</span><span class="sxs-lookup"><span data-stu-id="fc82c-219">No</span></span>|  
|<xref:System.UInt16>|<span data-ttu-id="fc82c-220">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-220">Widening</span></span>|<span data-ttu-id="fc82c-221">×</span><span class="sxs-lookup"><span data-stu-id="fc82c-221">No</span></span>|  
|<xref:System.UInt32>|<span data-ttu-id="fc82c-222">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-222">Widening</span></span>|<span data-ttu-id="fc82c-223">はい。</span><span class="sxs-lookup"><span data-stu-id="fc82c-223">Yes.</span></span> <span data-ttu-id="fc82c-224"><xref:System.UInt32> 10 桁の精度をサポートしています<xref:System.Single> 9 をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-224"><xref:System.UInt32> supports 10 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.UInt64>|<span data-ttu-id="fc82c-225">Widening</span><span class="sxs-lookup"><span data-stu-id="fc82c-225">Widening</span></span>|<span data-ttu-id="fc82c-226">はい。</span><span class="sxs-lookup"><span data-stu-id="fc82c-226">Yes.</span></span> <span data-ttu-id="fc82c-227"><xref:System.Int64> 20 桁の精度をサポートしています<xref:System.Single> 9 をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-227"><xref:System.Int64> supports 20 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
  
 <span data-ttu-id="fc82c-228">次の例は、他のプリミティブ数値型に最小値または最大値を変換、<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-228">The following example converts the minimum or maximum value of other primitive numeric types to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Single.Structure#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert1.cs#20)]
 [!code-vb[System.Single.Structure#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert1.vb#20)]  
  
 <span data-ttu-id="fc82c-229">さらに、<xref:System.Double>値<xref:System.Double.NaN?displayProperty=nameWithType>、 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、および<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>を変換<xref:System.Single.NaN?displayProperty=nameWithType>、 <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>、および<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-229">In addition, the <xref:System.Double> values <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> covert to <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="fc82c-230">注意するいくつかの数値型の値の変換、<xref:System.Single>値は、有効桁数の損失を伴うことができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-230">Note that the conversion of the value of some numeric types to a <xref:System.Single> value can involve a loss of precision.</span></span> <span data-ttu-id="fc82c-231">例を示しています、精度の損失を実行できるように変換するときに<xref:System.Decimal>、 <xref:System.Double>、 <xref:System.Int32>、 <xref:System.Int64>、 <xref:System.UInt32>、および<xref:System.UInt64>値<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-231">As the example illustrates, a loss of precision is possible when converting <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt32>, and <xref:System.UInt64> values to <xref:System.Single> values.</span></span>  
  
 <span data-ttu-id="fc82c-232">変換、<xref:System.Single>値を<xref:System.Double>拡大変換されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-232">The conversion of a <xref:System.Single> value to a <xref:System.Double> is a widening conversion.</span></span> <span data-ttu-id="fc82c-233">変換があります精度が失われる場合、<xref:System.Double>型の正確な表現を持たない、<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-233">The conversion may result in a loss of precision if the <xref:System.Double> type does not have a precise representation for the <xref:System.Single> value.</span></span>  
  
 <span data-ttu-id="fc82c-234">変換、<xref:System.Single>以外の任意のプリミティブ数値データ型の値に値を<xref:System.Double>縮小変換は、キャスト演算子 (C# の場合) または (Visual Basic) の変換メソッドが必要です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-234">The conversion of a <xref:System.Single> value to a value of any primitive numeric data type other than a <xref:System.Double> is a narrowing conversion and requires a cast operator (in C#) or a conversion method (in Visual Basic).</span></span> <span data-ttu-id="fc82c-235">対象の種類が定義されている対象のデータ型の範囲外にある値`MinValue`と`MaxValue`プロパティは、次の表に示すようにどおりに動作します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-235">Values that are outside the range of the target data type, which are defined by the target type's `MinValue` and `MaxValue` properties, behave as shown in the following table.</span></span>  
  
|<span data-ttu-id="fc82c-236">変換後の型</span><span class="sxs-lookup"><span data-stu-id="fc82c-236">Target type</span></span>|<span data-ttu-id="fc82c-237">結果</span><span class="sxs-lookup"><span data-stu-id="fc82c-237">Result</span></span>|  
|-----------------|------------|  
|<span data-ttu-id="fc82c-238">任意の整数型</span><span class="sxs-lookup"><span data-stu-id="fc82c-238">Any integral type</span></span>|<span data-ttu-id="fc82c-239"><xref:System.OverflowException> Checked コンテキストでは、変換が発生した場合に例外です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-239">An <xref:System.OverflowException> exception if the conversion occurs in a checked context.</span></span><br /><br /> <span data-ttu-id="fc82c-240">Unchecked コンテキスト (c# では既定値) に変換する場合は、変換操作が成功しますが、値がオーバーフローです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-240">If the conversion occurs in an unchecked context (the default in C#), the conversion operation succeeds but the value overflows.</span></span>|  
|<xref:System.Decimal>|<span data-ttu-id="fc82c-241"><xref:System.OverflowException>例外</span><span class="sxs-lookup"><span data-stu-id="fc82c-241">An <xref:System.OverflowException> exception,</span></span>|  
  
 <span data-ttu-id="fc82c-242">さらに、 <xref:System.Single.NaN?displayProperty=nameWithType>、 <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>、および<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>スロー、<xref:System.OverflowException>は checked コンテキストですがこれらの値のオーバーフロー unchecked コンテキストで整数に変換されるので整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-242">In addition, <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> throw an <xref:System.OverflowException> for conversions to integers in a checked context, but these values overflow when converted to integers in an unchecked context.</span></span> <span data-ttu-id="fc82c-243">変換<xref:System.Decimal>、常にスロー、<xref:System.OverflowException>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-243">For conversions to <xref:System.Decimal>, they always throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="fc82c-244">変換<xref:System.Double>には変換<xref:System.Double.NaN?displayProperty=nameWithType>、 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、および<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-244">For conversions to <xref:System.Double>, they convert to <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="fc82c-245">注への変換から発生する可能性があります精度の損失、<xref:System.Single>を別の数値型の値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-245">Note that a loss of precision may result from converting a <xref:System.Single> value to another numeric type.</span></span> <span data-ttu-id="fc82c-246">整数以外の変換の場合<xref:System.Single>値、例からの出力に示す、小数部が失われます、<xref:System.Single>値が (Visual Basic の場合) のように丸められますか (のように C# の場合) に切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-246">In the case of converting non-integral <xref:System.Single> values, as the output from the example shows, the fractional component is lost when the <xref:System.Single> value is either rounded (as in Visual Basic) or truncated (as in C#).</span></span> <span data-ttu-id="fc82c-247">変換<xref:System.Decimal>と<xref:System.Double>、値、<xref:System.Single>値では、対象のデータ型では、正確に表現はありません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-247">For conversions to <xref:System.Decimal> and <xref:System.Double> values, the <xref:System.Single> value may not have a precise representation in the target data type.</span></span>  
  
 <span data-ttu-id="fc82c-248">次の例の数の変換<xref:System.Single>値を他のいくつかの数値型にします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-248">The following example converts a number of <xref:System.Single> values to several other numeric types.</span></span> <span data-ttu-id="fc82c-249">Visual Basic (既定) と C# の場合は checked コンテキストで発生する、変換 (のため、[チェック](~/docs/csharp/language-reference/keywords/checked.md)キーワード) です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-249">The conversions occur in a checked context in Visual Basic (the default) and in C# (because of the [checked](~/docs/csharp/language-reference/keywords/checked.md) keyword).</span></span> <span data-ttu-id="fc82c-250">例の出力両方チェック変換の結果を示しています unchecked コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-250">The output from the example shows the result for conversions in both a checked an unchecked context.</span></span> <span data-ttu-id="fc82c-251">コンパイルすると Visual Basic で unchecked コンテキストでの変換を行うことができます、`/removeintchecks+`コンパイラ スイッチと c# コメント アウトすることによって、`checked`ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-251">You can perform conversions in an unchecked context in Visual Basic by compiling with the `/removeintchecks+` compiler switch and in C# by commenting out the `checked` statement.</span></span>  
  
 [!code-csharp[System.Single.Structure#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert2.cs#21)]
 [!code-vb[System.Single.Structure#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert2.vb#21)]  
  
 <span data-ttu-id="fc82c-252">数値型の変換の詳細については、次を参照してください。 [.NET Framework における型変換](~/docs/standard/base-types/type-conversion.md)と[型変換の表](~/docs/standard/base-types/conversion-tables.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-252">For more information on the conversion of numeric types, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md) and [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md).</span></span>  
  
<a name="Functionality"></a>   
## <a name="floating-point-functionality"></a><span data-ttu-id="fc82c-253">浮動小数点の機能</span><span class="sxs-lookup"><span data-stu-id="fc82c-253">Floating-point functionality</span></span>  
 <span data-ttu-id="fc82c-254"><xref:System.Single>構造および関連する型は、次のカテゴリの操作を実行するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-254">The <xref:System.Single> structure and related types provide methods to perform the following categories of operations:</span></span>  
  
-   <span data-ttu-id="fc82c-255">**値の比較**です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-255">**Comparison of values**.</span></span> <span data-ttu-id="fc82c-256">呼び出すことができます、<xref:System.Single.Equals%2A>メソッドを 2 つあるかどうかを判断<xref:System.Single>値が等しいか、または<xref:System.Single.CompareTo%2A>メソッドを 2 つの値の間の関係を決定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-256">You can call the <xref:System.Single.Equals%2A> method to determine whether two <xref:System.Single> values are equal, or the <xref:System.Single.CompareTo%2A> method to determine the relationship between two values.</span></span>  
  
     <span data-ttu-id="fc82c-257"><xref:System.Single>構造体には、比較演算子の完全なセットもサポートしています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-257">The <xref:System.Single> structure also supports a complete set of comparison operators.</span></span> <span data-ttu-id="fc82c-258">たとえば、等しいかどうかをテストまたは 1 つの値が別の値以上かどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-258">For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another value.</span></span> <span data-ttu-id="fc82c-259">オペランドの 1 つの場合、 <xref:System.Double>、<xref:System.Single>値を変換する、<xref:System.Double>比較を実行する前にします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-259">If one of the operands is a <xref:System.Double>, the <xref:System.Single> value is converted to a <xref:System.Double> before performing the comparison.</span></span> <span data-ttu-id="fc82c-260">一方のオペランドが整数型の場合に変換されます、<xref:System.Single>比較を実行する前にします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-260">If one of the operands is an integral type, it is converted to a <xref:System.Single> before performing the comparison.</span></span> <span data-ttu-id="fc82c-261">これらは、拡大変換が有効桁数の損失が含まれます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-261">Although these are widening conversions, they may involve a loss of precision.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="fc82c-262">有効桁数が異なるのため 2 つ<xref:System.Single>と等しくなるはずの値にすることがすると、比較の結果に影響します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-262">Because of differences in precision, two <xref:System.Single> values that you expect to be equal may turn out to be unequal, which affects the result of the comparison.</span></span> <span data-ttu-id="fc82c-263">参照してください、[等価性テスト](#Equality)の詳細については、比較する 2 つのセクション<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-263">See the [Testing for equality](#Equality) section for more information about comparing two <xref:System.Single> values.</span></span>  
  
     <span data-ttu-id="fc82c-264">呼び出すことも、 <xref:System.Single.IsNaN%2A>、 <xref:System.Single.IsInfinity%2A>、 <xref:System.Single.IsPositiveInfinity%2A>、および<xref:System.Single.IsNegativeInfinity%2A>これらの特殊な値をテストするメソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-264">You can also call the <xref:System.Single.IsNaN%2A>, <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, and <xref:System.Single.IsNegativeInfinity%2A> methods to test for these special values.</span></span>  
  
-   <span data-ttu-id="fc82c-265">**数値演算**です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-265">**Mathematical operations**.</span></span> <span data-ttu-id="fc82c-266">加算、減算、乗算、および除算などの一般的な算術演算はではなく言語コンパイラと共通中間言語 (CIL) の手順で実装されて<xref:System.Single>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-266">Common arithmetic operations such as addition, subtraction, multiplication, and division are implemented by language compilers and Common Intermediate Language (CIL) instructions rather than by <xref:System.Single> methods.</span></span> <span data-ttu-id="fc82c-267">数学的演算のもう一方のオペランドがある場合、 <xref:System.Double>、<xref:System.Single>に変換されます、<xref:System.Double>もが、操作と操作の結果を実行する前に、<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-267">If the other operand in a mathematical operation is a <xref:System.Double>, the <xref:System.Single> is converted to a <xref:System.Double> before performing the operation, and the result of the operation is also a <xref:System.Double> value.</span></span> <span data-ttu-id="fc82c-268">もう一方のオペランドは整数型に変換されます、<xref:System.Single>もが、操作と操作の結果を実行する前に、<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-268">If the other operand is an integral type, it is converted to a <xref:System.Single> before performing the operation, and the result of the operation is also a <xref:System.Single> value.</span></span>  
  
     <span data-ttu-id="fc82c-269">他の算術演算を実行するには、呼び出す`static`(`Shared` Visual Basic で) 内のメソッド、<xref:System.Math?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-269">You can perform other mathematical operations by calling `static` (`Shared` in Visual Basic) methods in the <xref:System.Math?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="fc82c-270">演算に一般的に使用される追加のメソッドが含まれます (など<xref:System.Math.Abs%2A?displayProperty=nameWithType>、 <xref:System.Math.Sign%2A?displayProperty=nameWithType>、および<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>)、geometry (など<xref:System.Math.Cos%2A?displayProperty=nameWithType>と<xref:System.Math.Sin%2A?displayProperty=nameWithType>)、および微積分 (など<xref:System.Math.Log%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-270">These include additional methods commonly used for arithmetic (such as <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, and <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), geometry (such as <xref:System.Math.Cos%2A?displayProperty=nameWithType> and <xref:System.Math.Sin%2A?displayProperty=nameWithType>), and calculus (such as <xref:System.Math.Log%2A?displayProperty=nameWithType>).</span></span>  <span data-ttu-id="fc82c-271">すべての場合、<xref:System.Single>値を変換する、<xref:System.Double>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-271">In all cases, the <xref:System.Single> value is converted to a <xref:System.Double>.</span></span>  
  
     <span data-ttu-id="fc82c-272">内の個々 のビットを操作することも、<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-272">You can also manipulate the individual bits in a <xref:System.Single> value.</span></span> <span data-ttu-id="fc82c-273"><xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=nameWithType>メソッドは、バイト配列で、ビット パターンを返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-273">The <xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=nameWithType> method returns its bit pattern in a byte array.</span></span>  <span data-ttu-id="fc82c-274">そのバイト配列を渡すことによって、<xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType>メソッドも保持できます、<xref:System.Single>値ビット パターンを 32 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-274">By passing that byte array to the <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> method, you can also preserve the <xref:System.Single> value's bit pattern in a 32-bit integer.</span></span>  
  
-   <span data-ttu-id="fc82c-275">**丸め処理を行う**です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-275">**Rounding**.</span></span> <span data-ttu-id="fc82c-276">丸め処理はよく使用手法として浮動小数点表現と精度の問題によって発生する値の間の相違点の影響を軽減します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-276">Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision.</span></span> <span data-ttu-id="fc82c-277">丸めることができます、<xref:System.Single>値を呼び出して、<xref:System.Math.Round%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-277">You can round a <xref:System.Single> value by calling the <xref:System.Math.Round%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="fc82c-278">しかし、なお、<xref:System.Single>値を変換する、<xref:System.Double>前に、メソッドが呼び出され、変換は、有効桁数の損失を伴うことができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-278">However, note  that the <xref:System.Single> value is converted to a <xref:System.Double> before the method is called, and the conversion can involve a loss of precision.</span></span>  
  
-   <span data-ttu-id="fc82c-279">**書式設定**です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-279">**Formatting**.</span></span> <span data-ttu-id="fc82c-280">変換することができます、<xref:System.Single>を呼び出すことによって、文字列形式の値、<xref:System.Single.ToString%2A>メソッドまたはを使用して、[複合書式指定](~/docs/standard/base-types/composite-formatting.md)機能します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-280">You can convert a <xref:System.Single> value to its string representation by calling the <xref:System.Single.ToString%2A> method or by using the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature.</span></span> <span data-ttu-id="fc82c-281">書式指定文字列で浮動小数点値の文字列形式を制御する方法については、次を参照してください。、[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-281">For information about how format strings control the string representation of floating-point values, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md) topics.</span></span>  
  
-   <span data-ttu-id="fc82c-282">**文字列の解析**です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-282">**Parsing strings**.</span></span> <span data-ttu-id="fc82c-283">浮動小数点値の文字列形式に変換することができます、<xref:System.Single>値を呼び出して、<xref:System.Single.Parse%2A>または<xref:System.Single.TryParse%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-283">You can convert the string representation of a floating-point value to a <xref:System.Single> value by calling the <xref:System.Single.Parse%2A> or <xref:System.Single.TryParse%2A> method.</span></span> <span data-ttu-id="fc82c-284">解析操作が失敗した場合、<xref:System.Single.Parse%2A>メソッドにより、例外がスローされるため、一方、<xref:System.Single.TryParse%2A>メソッドを返します。`false`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-284">If the parse operation fails, the <xref:System.Single.Parse%2A> method throws an exception, whereas the <xref:System.Single.TryParse%2A> method returns `false`.</span></span>  
  
-   <span data-ttu-id="fc82c-285">**変換の入力**です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-285">**Type conversion**.</span></span> <span data-ttu-id="fc82c-286"><xref:System.Single>構造体の明示的なインターフェイス実装を提供する、 <xref:System.IConvertible> 2 つの標準的な .NET Framework データ型間の変換をサポートするインターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-286">The <xref:System.Single> structure provides an explicit interface implementation for the <xref:System.IConvertible> interface, which supports conversion between any two standard .NET Framework data types.</span></span> <span data-ttu-id="fc82c-287">言語コンパイラは、すべての他の標準の数値型の変換以外の値の暗黙的な変換をサポートするも<xref:System.Double>に<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-287">Language compilers also support the implicit conversion of values for all other standard numeric types except for the conversion of <xref:System.Double> to <xref:System.Single> values.</span></span> <span data-ttu-id="fc82c-288">任意の標準的な数値型以外の値への変換、<xref:System.Double>を<xref:System.Single>拡大変換は、キャスト演算子または変換メソッドの使用は不要です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-288">Conversion of a value of any standard numeric type other than a <xref:System.Double> to a <xref:System.Single> is a widening conversion and does not require the use of a casting operator or conversion method.</span></span>  
  
     <span data-ttu-id="fc82c-289">ただし、32 ビットおよび 64 ビットの整数値の変換では、有効桁数の損失を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-289">However, conversion of 32-bit and 64-bit integer values can involve a loss of precision.</span></span> <span data-ttu-id="fc82c-290">次の表に、32 ビット、64 ビットの有効桁数の違いと<xref:System.Double>型。</span><span class="sxs-lookup"><span data-stu-id="fc82c-290">The following table lists the differences in precision for 32-bit, 64-bit, and <xref:System.Double> types:</span></span>  
  
    |<span data-ttu-id="fc82c-291">型</span><span class="sxs-lookup"><span data-stu-id="fc82c-291">Type</span></span>|<span data-ttu-id="fc82c-292">最大有効桁数 (小数点桁の数字で)</span><span class="sxs-lookup"><span data-stu-id="fc82c-292">Maximum precision (in decimal digits)</span></span>|<span data-ttu-id="fc82c-293">内部の精度 (小数桁の数字で)</span><span class="sxs-lookup"><span data-stu-id="fc82c-293">Internal precision (in decimal digits)</span></span>|  
    |----------|---------------------------------------------|----------------------------------------------|  
    |<xref:System.Double>|<span data-ttu-id="fc82c-294">16</span><span class="sxs-lookup"><span data-stu-id="fc82c-294">15</span></span>|<span data-ttu-id="fc82c-295">17</span><span class="sxs-lookup"><span data-stu-id="fc82c-295">17</span></span>|  
    |<span data-ttu-id="fc82c-296"><xref:System.Int32> および <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="fc82c-296"><xref:System.Int32> and <xref:System.UInt32></span></span>|<span data-ttu-id="fc82c-297">10</span><span class="sxs-lookup"><span data-stu-id="fc82c-297">10</span></span>|<span data-ttu-id="fc82c-298">10</span><span class="sxs-lookup"><span data-stu-id="fc82c-298">10</span></span>|  
    |<span data-ttu-id="fc82c-299"><xref:System.Int64> および <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="fc82c-299"><xref:System.Int64> and <xref:System.UInt64></span></span>|<span data-ttu-id="fc82c-300">19</span><span class="sxs-lookup"><span data-stu-id="fc82c-300">19</span></span>|<span data-ttu-id="fc82c-301">19</span><span class="sxs-lookup"><span data-stu-id="fc82c-301">19</span></span>|  
    |<xref:System.Single>|<span data-ttu-id="fc82c-302">7</span><span class="sxs-lookup"><span data-stu-id="fc82c-302">7</span></span>|<span data-ttu-id="fc82c-303">9</span><span class="sxs-lookup"><span data-stu-id="fc82c-303">9</span></span>|  
  
     <span data-ttu-id="fc82c-304">精度の問題は、最もよく影響<xref:System.Single>値に変換される<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-304">The problem of precision most frequently affects <xref:System.Single> values that are converted to <xref:System.Double> values.</span></span> <span data-ttu-id="fc82c-305">次の例では、同一の除算操作によって生成される 2 つの値が等しくない、値の 1 つは、単精度浮動小数点値に変換されるため、<xref:System.Double>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-305">In the following example, two values produced by identical division operations are unequal, because one of the values is a single-precision floating point value that is converted to a <xref:System.Double>.</span></span>  
  
     [!code-csharp[System.Single.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Single.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist1.vb#5)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="fc82c-306">この種類のすべてのメンバーでは、スレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-306">All members of this type are thread safe.</span></span> <span data-ttu-id="fc82c-307">インスタンスの状態を変更する表示されるメンバーは、新しい値で初期化された新しいインスタンスを実際に返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-307">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="fc82c-308">として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによってです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-308">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Double" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc82c-309">このインスタンスと指定したオブジェクトまたは別の <see cref="T:System.Single" /> インスタンスを比較し、このインスタンスの値が指定したオブジェクトの値またはもう一方の <see cref="T:System.Single" /> インスタンスの値よりも小さいか、同じか、それとも大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-309">Compares this instance to a specified object or to another <see cref="T:System.Single" /> instance and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object or the other <see cref="T:System.Single" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fc82c-310">比較対象のオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-310">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="fc82c-311">このインスタンスと指定したオブジェクトを比較し、このインスタンスの値が指定したオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-311">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="fc82c-312">このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-312">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="fc82c-313"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="fc82c-313"><list type="table"><listheader><term> Return Value</span></span>  
  
 <span data-ttu-id="fc82c-314"></term><description>説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-314"></term><description> Description</span></span>  
  
 <span data-ttu-id="fc82c-315"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="fc82c-315"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="fc82c-316"></term><description> このインスタンスは、<paramref name="value" /> よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-316"></term><description> This instance is less than <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="fc82c-317">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-317">-or-</span></span>  
  
 <span data-ttu-id="fc82c-318">このインスタンスは非数 (<see cref="F:System.Single.NaN" />) で、<paramref name="value" /> は数値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-318">This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.</span></span>  
  
 <span data-ttu-id="fc82c-319"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fc82c-319"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="fc82c-320"></term><description> このインスタンスは <paramref name="value" /> と等価です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-320"></term><description> This instance is equal to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="fc82c-321">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-321">-or-</span></span>  
  
 <span data-ttu-id="fc82c-322">このインスタンスと値は、どちらも非数 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NegativeInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-322">This instance and value are both not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</span></span>  
  
 <span data-ttu-id="fc82c-323"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="fc82c-323"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="fc82c-324"></term><description> このインスタンスは <paramref name="value" /> よりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-324"></term><description> This instance is greater than <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="fc82c-325">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-325">-or-</span></span>  
  
 <span data-ttu-id="fc82c-326">このインスタンスは数値で、<paramref name="value" /> は非数 (<see cref="F:System.Single.NaN" />) です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-326">This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).</span></span>  
  
 <span data-ttu-id="fc82c-327">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-327">-or-</span></span>  
  
 <span data-ttu-id="fc82c-328"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-328"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-329">`value`パラメーターでなければなりません`null`またはのインスタンス<xref:System.Single>です。 それ以外の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-329">The `value` parameter must be `null` or an instance of <xref:System.Single>; otherwise, an exception is thrown.</span></span> <span data-ttu-id="fc82c-330">任意のインスタンス<xref:System.Single>、その値に関係なくが大きいと見なされますより`null`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-330">Any instance of <xref:System.Single>, regardless of its value, is considered greater than `null`.</span></span>  
  
 <span data-ttu-id="fc82c-331">値を等価と見なされるのと同じにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-331">Values must be identical to be considered equal.</span></span> <span data-ttu-id="fc82c-332">浮動小数点値は、複数の数値演算に依存しているときに特にの有効桁数が失われると、それらの値、最小有効数字を除くとほぼ同じにするには共通です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-332">Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</span></span> <span data-ttu-id="fc82c-333">このため、戻り値の<xref:System.Single.CompareTo%2A>メソッドかもしれませんことにより意外時点です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-333">Because of this, the return value of the <xref:System.Single.CompareTo%2A> method may seem surprising at times.</span></span> <span data-ttu-id="fc82c-334">たとえば、同じ値で除算の後に特定の値での乗算では、元の値を生成する必要がありますが次の例で計算値は元の値より大きくなければなりません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-334">For example, multiplication by a particular value followed by division by the same value should produce the original value, but in the following example, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="fc82c-335">"R"を使用して、2 つの値のすべての有効桁数を示す[標準数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)計算値が、その有効桁数の元の値と異なることを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-335">Showing all significant digits of the two values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="fc82c-336">このような比較の処理については、の「解説」セクションを参照してください、<xref:System.Single.Equals%28System.Single%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-336">For information about handling such comparisons, see the Remarks section of the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
 [!code-csharp[System.Single.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto3.cs#2)]
 [!code-vb[System.Single.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto3.vb#2)]  
  
 <span data-ttu-id="fc82c-337">このメソッドがサポートするために実装されている、<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-337">This method is implemented to support the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="fc82c-338">なおが、<xref:System.Single.NaN>別に等しいと見なされない<xref:System.Single.NaN>(場合によってはそれ自体)、<xref:System.IComparable>インターフェイスでは、する必要があります`A.CompareTo(A)`は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-338">Note that, although a <xref:System.Single.NaN> is not considered to be equal to another <xref:System.Single.NaN> (even itself), the <xref:System.IComparable> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="fc82c-339">比較では有効桁数</span><span class="sxs-lookup"><span data-stu-id="fc82c-339">Precision in Comparisons</span></span>  
 <span data-ttu-id="fc82c-340">文書化されている有効桁数を超える浮動小数点数の有効桁数は、実装と .NET Framework のバージョンに固有です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-340">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="fc82c-341">その結果、数値の内部表現の有効桁数が変わる可能性があるため、.NET Framework のバージョン間で 2 つの数値の比較が変化します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-341">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-342">次のコード例を示しています、<xref:System.Single.CompareTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-342">The following code example demonstrates the <xref:System.Single.CompareTo%2A> method.</span></span>  
  
 [!code-cpp[System.Single#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#16)]
 [!code-csharp[System.Single#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#16)]
 [!code-vb[System.Single#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fc82c-343"><paramref name="value" /> が <see cref="T:System.Single" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-343"><paramref name="value" /> is not a <see cref="T:System.Single" />.</span></span></exception>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(float value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fc82c-344">比較対象の単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-344">A single-precision floating-point number to compare.</span></span></param>
        <summary><span data-ttu-id="fc82c-345">このインスタンスと指定した単精度浮動小数点数を比較し、このインスタンスの値が指定した単精度浮動小数点数の値よりも小さいか、同じか、それとも大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-345">Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="fc82c-346">このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-346">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="fc82c-347"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="fc82c-347"><list type="table"><listheader><term> Return Value</span></span>  
  
 <span data-ttu-id="fc82c-348"></term><description>説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-348"></term><description> Description</span></span>  
  
 <span data-ttu-id="fc82c-349"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="fc82c-349"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="fc82c-350"></term><description> このインスタンスは、<paramref name="value" /> よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-350"></term><description> This instance is less than <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="fc82c-351">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-351">-or-</span></span>  
  
 <span data-ttu-id="fc82c-352">このインスタンスは非数 (<see cref="F:System.Single.NaN" />) で、<paramref name="value" /> は数値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-352">This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.</span></span>  
  
 <span data-ttu-id="fc82c-353"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fc82c-353"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="fc82c-354"></term><description> このインスタンスは <paramref name="value" /> と等価です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-354"></term><description> This instance is equal to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="fc82c-355">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-355">-or-</span></span>  
  
 <span data-ttu-id="fc82c-356">このインスタンスと <paramref name="value" /> は、どちらも非数 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NegativeInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-356">Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</span></span>  
  
 <span data-ttu-id="fc82c-357"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="fc82c-357"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="fc82c-358"></term><description> このインスタンスは <paramref name="value" /> よりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-358"></term><description> This instance is greater than <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="fc82c-359">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-359">-or-</span></span>  
  
 <span data-ttu-id="fc82c-360">このインスタンスは数値で、<paramref name="value" /> は非数 (<see cref="F:System.Single.NaN" />) です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-360">This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-361">値を等価と見なされるのと同じにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-361">Values must be identical to be considered equal.</span></span> <span data-ttu-id="fc82c-362">浮動小数点値有効桁数が失われると、複数の数値演算で値が依存している場合に特にその最下位の桁を除くとほぼ同じになる一般的なことです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-362">It is common for floating-point values to lose precision and to become nearly identical except for their least significant digits, especially when the values depend on multiple mathematical operations.</span></span> <span data-ttu-id="fc82c-363">このため、戻り値の<xref:System.Single.CompareTo%2A>もメソッドがこのことにより意外見える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-363">Because of this, the return value of the <xref:System.Single.CompareTo%2A> method at times may seem surprising.</span></span> <span data-ttu-id="fc82c-364">で同じ値での任意の値で除算の後の乗算では、元の値を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-364">For example, multiplication by any value followed by division by the same value should produce the original value.</span></span> <span data-ttu-id="fc82c-365">ただし、次の例で計算された値になります、元の値よりも大きくします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-365">However, in the following example, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="fc82c-366">"R"を使用して、2 つの値のすべての有効桁数を示す[標準数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)計算値が、その有効桁数の元の値と異なることを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-366">Showing all significant digits of the two values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="fc82c-367">このような比較の処理については、の「解説」セクションを参照してください、<xref:System.Single.Equals%28System.Single%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-367">For information about handling such comparisons, see the Remarks section of the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
 [!code-csharp[System.Single.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Single.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto2.vb#1)]  
  
 <span data-ttu-id="fc82c-368">このメソッドを実装する、<xref:System.IComparable%601?displayProperty=nameWithType>インターフェイスし、実行よりもわずかに向上、<xref:System.Single.CompareTo%2A?displayProperty=nameWithType>メソッドに変換があるないため、`value`オブジェクトへのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-368">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Single.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="fc82c-369">なお、値があるオブジェクトが<xref:System.Single.NaN>値がある別のオブジェクトと等しくないと見なされます<xref:System.Single.NaN>(場合によってはそれ自体)、<xref:System.IComparable%601>インターフェイスでは、する必要があります`A.CompareTo(A)`は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-369">Note that, although an object whose value is <xref:System.Single.NaN> is not considered equal to another object whose value is <xref:System.Single.NaN> (even itself), the <xref:System.IComparable%601> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="fc82c-370">拡大変換</span><span class="sxs-lookup"><span data-stu-id="fc82c-370">Widening Conversions</span></span>  
 <span data-ttu-id="fc82c-371">プログラミング言語に応じてコードに考えられる場合があります、<xref:System.Single.CompareTo%2A>メソッドのパラメーターの型のビット数が少ないがここではインスタンスの型よりもします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-371">Depending on your programming language, it might be possible to code a <xref:System.Single.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="fc82c-372">これには一部のプログラミング言語は、ビット数のインスタンスと型としてパラメーターを表す暗黙の拡大変換を実行するため。</span><span class="sxs-lookup"><span data-stu-id="fc82c-372">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="fc82c-373">たとえば、インスタンスの型が<xref:System.Single>パラメーターの型と<xref:System.Int32>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-373">For example, suppose the instance type is <xref:System.Single> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="fc82c-374">Microsoft c# コンパイラは、パラメーターの値を表す命令を生成、<xref:System.Single>オブジェクトを生成、<xref:System.Single.CompareTo%28System.Single%29?displayProperty=nameWithType>拡張パラメーターの形式をおよびインスタンスの値を比較するメソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-374">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Single> object, then generates a <xref:System.Single.CompareTo%28System.Single%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="fc82c-375">コンパイラが数値型の暗黙の拡大変換を実行するプログラミング言語のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-375">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="fc82c-376">詳細については、次を参照してください。、[型変換の表](~/docs/standard/base-types/conversion-tables.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-376">For more information, see the [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="fc82c-377">比較では有効桁数</span><span class="sxs-lookup"><span data-stu-id="fc82c-377">Precision in Comparisons</span></span>  
 <span data-ttu-id="fc82c-378">文書化されている有効桁数を超える浮動小数点数の有効桁数は、実装と .NET Framework のバージョンに固有です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-378">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="fc82c-379">その結果、数値の内部表現の有効桁数が変わる可能性があるため、.NET Framework のバージョン間で 2 つの数値の比較が変化します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-379">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-380">次のコード例に示しますジェネリックと非ジェネリック バージョンの<xref:System.Single.CompareTo%2A>いくつかの値と参照型のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-380">The following code example demonstrates generic and nongeneric versions of the <xref:System.Single.CompareTo%2A> method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 Epsilon = float32(1.401298E-45)" />
      <MemberSignature Language="DocId" Value="F:System.Single.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Const Epsilon As Single  = 1.401298E-45" />
      <MemberSignature Language="C++ CLI" Value="public: float Epsilon = 1.401298E-45;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1.401298E-45</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc82c-381">ゼロより大きい最小の <see cref="T:System.Single" /> 値を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-381">Represents the smallest positive <see cref="T:System.Single" /> value that is greater than zero.</span></span> <span data-ttu-id="fc82c-382">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-382">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-383">値、<xref:System.Single.Epsilon>プロパティには、正の最小値が反映されます。<xref:System.Single>値が数値演算または比較の意味を持つときの値、<xref:System.Single>インスタンスは 0 です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-383">The value of the <xref:System.Single.Epsilon> property reflects the smallest positive <xref:System.Single> value that is significant in numeric operations or comparisons when the value of the <xref:System.Single> instance is zero.</span></span> <span data-ttu-id="fc82c-384">などの次のコードに示す 0 と<xref:System.Single.Epsilon>と見なされます、値が等しくない一方の値のゼロおよび半分<xref:System.Single.Epsilon>等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-384">For example, the following code shows that zero and <xref:System.Single.Epsilon> are considered to be unequal values, whereas zero and half the value of <xref:System.Single.Epsilon> are considered to be equal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon.cs#5)]
 [!code-vb[System.Single.Epsilon#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon.vb#5)]  
  
 <span data-ttu-id="fc82c-385">具体的には、単精度浮動小数点の書式を記号、23 ビット仮数部または、仮数と指数の 8 ビットで構成されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-385">More precisely, the single-precision floating-point format consists of a sign, a 23-bit mantissa or significand, and an 8-bit exponent.</span></span> <span data-ttu-id="fc82c-386">次の例に示す、0 は、-126 の指数部を持ち、0 の仮数を示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-386">As the following example shows, zero has an exponent of -126 and a mantissa of 0.</span></span> <span data-ttu-id="fc82c-387"><xref:System.Single.Epsilon> -126 の指数部と 1 の仮数部があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-387"><xref:System.Single.Epsilon> has an exponent of -126 and a mantissa of 1.</span></span> <span data-ttu-id="fc82c-388">つまり、<xref:System.Single.Epsilon?displayProperty=nameWithType>は正の最小<xref:System.Single>値は 0 より大きい値を表し、最小有効値の最小の可能な増分値を<xref:System.Single>が指数部が-126 です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-388">This means that <xref:System.Single.Epsilon?displayProperty=nameWithType> is the smallest positive <xref:System.Single> value that is greater than zero and represents the smallest possible value and the smallest possible increment for a <xref:System.Single> whose exponent is -126.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon1.cs#6)]
 [!code-vb[System.Single.Epsilon#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon1.vb#6)]  
  
 <span data-ttu-id="fc82c-389">ただし、<xref:System.Single.Epsilon>プロパティは有効桁数の一般的なメジャーではありません、 <xref:System.Single> ; 入力のみに適用される<xref:System.Single>をゼロの値を持つインスタンス。</span><span class="sxs-lookup"><span data-stu-id="fc82c-389">However, the <xref:System.Single.Epsilon> property is not a general measure of precision of the <xref:System.Single> type; it applies only to <xref:System.Single> instances that have a value of zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc82c-390">値、<xref:System.Single.Epsilon>プロパティが浮動小数点演算で丸め処理を行うための相対的なエラーの上限を表すマシン epsilon に相当します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-390">The value of the <xref:System.Single.Epsilon> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="fc82c-391">この定数の値が 1.4 e--45。</span><span class="sxs-lookup"><span data-stu-id="fc82c-391">The value of this constant is 1.4e-45.</span></span>  
  
 <span data-ttu-id="fc82c-392">2 つの等しい浮動小数点数可能性がありますいない等しい有効桁数が異なるのためです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-392">Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits.</span></span> <span data-ttu-id="fc82c-393">たとえば、c# の式`(float)1/3 == (float)0.33333`が等しくない左側にある除算操作は、右側にある定数が指定した桁にのみ正確中に、最大有効桁数を必要があるためです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-393">For example, the C# expression, `(float)1/3 == (float)0.33333`, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits.</span></span> <span data-ttu-id="fc82c-394">2 つの浮動小数点数値を等しいと見なすかどうかを決定するカスタム アルゴリズムを作成する場合よりも大きい値を使用する必要があります、<xref:System.Single.Epsilon>等しいと見なされるには、2 つの値の差の絶対値の許容を確立するために定数です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-394">If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, you must use a value that is greater than the <xref:System.Single.Epsilon> constant to establish the acceptable absolute margin of difference for the two values to be considered equal.</span></span> <span data-ttu-id="fc82c-395">(通常は、差分の余白が何回を超える<xref:System.Single.Epsilon>)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-395">(Typically, that margin of difference is many times greater than <xref:System.Single.Epsilon>.)</span></span>  
  
## <a name="platform-notes"></a><span data-ttu-id="fc82c-396">プラットフォームに関する注意事項</span><span class="sxs-lookup"><span data-stu-id="fc82c-396">Platform Notes</span></span>  
 <span data-ttu-id="fc82c-397">ARM システムでの値、<xref:System.Single.Epsilon>定数が小さすぎますを検出するため、これはゼロに相当します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-397">On ARM systems, the value of the <xref:System.Single.Epsilon> constant is too small to be detected, so it equates to zero.</span></span> <span data-ttu-id="fc82c-398">1.175494351E に相当する代替 epsilon 値を定義すること、38 代わりにします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-398">You can define an alternative epsilon value that equals 1.175494351E-38 instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc82c-399"><see cref="T:System.Single" /> の 2 つのインスタンスが同じ値を表しているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-399">Returns a value indicating whether two instances of <see cref="T:System.Single" /> represent the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="fc82c-400">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-400">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="fc82c-401">このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-401">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-402"><paramref name="obj" /> が <see cref="T:System.Single" /> のインスタンスで、このインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-402"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-403"><xref:System.Single.Equals%2A>メソッドは、2 つの等しい値を 2 つの値の有効桁数が異なるため等しくない場合があるため、注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-403">The <xref:System.Single.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</span></span> <span data-ttu-id="fc82c-404">次の例では、レポートを<xref:System.Single>.3333 を値と<xref:System.Single>で割ることによって返される 1 と 3 が等しくないです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-404">The following example reports that the <xref:System.Single> value .3333 and the <xref:System.Single> returned by dividing 1 by 3 are unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#3)]
 [!code-vb[System.Single.Epsilon#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#3)]  
  
 <span data-ttu-id="fc82c-405">等しいかどうか比較するではなくいずれかの推奨される手法では、次の 2 つの値の差の許容の余白を定義する (などです。 値のいずれかの 01%)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-405">Rather than comparing for equality, one recommended technique involves defining an acceptable margin of difference between two values (such as .01% of one of the values).</span></span> <span data-ttu-id="fc82c-406">2 つの値の差の絶対値は、以下が許容範囲は、違いは、有効桁数の違いによりする可能性があります、したがって、値は等しいと考えられます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-406">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="fc82c-407">次の例では、この手法を使用して、等しくと 1/3、2 つの比較<xref:System.Single>に等しくない場合に上記のコード例にある値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-407">The following example uses this technique to compare .33333 and 1/3, the two <xref:System.Single> values that the previous code example found to be unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#4)]
 [!code-vb[System.Single.Epsilon#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#4)]  
  
 <span data-ttu-id="fc82c-408">この場合、値が等しいです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-408">In this case, the values are equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc82c-409"><xref:System.Single.Epsilon>式を定義します最小の範囲は 0 に近いは正の値の差の余白はより大きくなければなりません<xref:System.Single.Epsilon>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-409">Because <xref:System.Single.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="fc82c-410">通常、回数を超えています<xref:System.Single.Epsilon>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-410">Typically, it is many times greater than <xref:System.Single.Epsilon>.</span></span>  
  
 <span data-ttu-id="fc82c-411">文書化されている有効桁数を超える浮動小数点数の有効桁数は、実装と .NET Framework のバージョンに固有です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-411">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="fc82c-412">その結果、数値の内部表現の有効桁数が変わる可能性があるため、.NET Framework のバージョン間で 2 つの数値の比較が変化します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-412">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-413">次のコード例を示しています、<xref:System.Single.Equals%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-413">The following code example demonstrates the <xref:System.Single.Equals%2A> method.</span></span>  
  
 [!code-cpp[System.Single#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#17)]
 [!code-csharp[System.Single#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#17)]
 [!code-vb[System.Single#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#17)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="fc82c-414">コンパイラのオーバー ロードの解決は、2 つの動作の見かけ上の相違点についてアカウント可能性があります<see cref="M:System.Single.Equals(System.Object)" />メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-414">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Single.Equals(System.Object)" /> method overloads.</span></span> <span data-ttu-id="fc82c-415">場合の間の暗黙的な変換、<paramref name="obj" />引数および<see cref="T:System.Single" />が定義されている引数として型指定されていないと、 <see cref="T:System.Object" />、コンパイラが暗黙的な変換と呼び出し実行可能性があります、<see cref="M:System.Single.Equals(System.Single)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-415">If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Single" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Single.Equals(System.Single)" /> method.</span></span> <span data-ttu-id="fc82c-416">それ以外の場合を呼び出すことが、<see cref="M:System.Single.Equals(System.Object)" />メソッドで、常に返します<see langword="false" />場合その<paramref name="obj" />引数ではありません、<see cref="T:System.Single" />値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-416">Otherwise, they call the <see cref="M:System.Single.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Single" /> value.</span></span> <span data-ttu-id="fc82c-417">次の例は、次の 2 つのメソッド オーバー ロード間の動作の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-417">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="fc82c-418">以外のすべてのプリミティブ数値型の場合<see cref="T:System.Double" />Visual Basic と除く<see cref="T:System.Decimal" />と<see cref="T:System.Double" />、c# では、最初に比較を返します<see langword="true" />拡大変換と呼び出し、コンパイラが自動的に実行するため<see cref="M:System.Single.Equals(System.Single)" />メソッド、2 つ目の比較を返しますが<see langword="false" />コンパイラを呼び出すため、<see cref="M:System.Single.Equals(System.Object)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-418">In the case of all primitive numeric types except for <see cref="T:System.Double" /> in Visual Basic and except for <see cref="T:System.Decimal" /> and <see cref="T:System.Double" /> in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Single.Equals(System.Single)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Single.Equals(System.Object)" /> method.</span></span>  
  
 [!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)]
 [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.Single.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (float obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float32 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(float obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="fc82c-419">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-419">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="fc82c-420">このインスタンスと指定した <see cref="T:System.Single" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-420">Returns a value indicating whether this instance and a specified <see cref="T:System.Single" /> object represent the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-421"><paramref name="obj" /> がこのインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-421"><see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-422">このメソッドを実装する、<xref:System.IEquatable%601?displayProperty=nameWithType>インターフェイス、および実行よりもわずかに向上<xref:System.Single.Equals%2A>変換があるないため、`obj`オブジェクトへのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-422">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Single.Equals%2A> because it does not have to convert the `obj` parameter to an object.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="fc82c-423">拡大変換</span><span class="sxs-lookup"><span data-stu-id="fc82c-423">Widening Conversions</span></span>  
 <span data-ttu-id="fc82c-424">プログラミング言語に応じてコードに考えられる場合があります、<xref:System.Single.Equals%2A>メソッドのパラメーターの型のビット数が少ないがここではインスタンスの型よりもします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-424">Depending on your programming language, it might be possible to code an <xref:System.Single.Equals%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="fc82c-425">これには一部のプログラミング言語は、ビット数のインスタンスと型としてパラメーターを表す暗黙の拡大変換を実行するため。</span><span class="sxs-lookup"><span data-stu-id="fc82c-425">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="fc82c-426">たとえば、インスタンスの型が<xref:System.Single>パラメーターの型と<xref:System.Int32>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-426">For example, suppose the instance type is <xref:System.Single> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="fc82c-427">Microsoft c# コンパイラは、パラメーターの値を表す命令を生成、<xref:System.Single>オブジェクト、し、生成、<xref:System.Single.Equals%28System.Single%29?displayProperty=nameWithType>拡張パラメーターの形式をおよびインスタンスの値を比較するメソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-427">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Single> object, and then generates a <xref:System.Single.Equals%28System.Single%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="fc82c-428">コンパイラが数値型の暗黙の拡大変換を実行するプログラミング言語のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-428">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="fc82c-429">詳細については、次を参照してください。、[型変換の表](~/docs/standard/base-types/conversion-tables.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-429">For more information, see the [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="fc82c-430">比較では有効桁数</span><span class="sxs-lookup"><span data-stu-id="fc82c-430">Precision in Comparisons</span></span>  
 <span data-ttu-id="fc82c-431"><xref:System.Single.Equals%2A>メソッドの 2 つの等しい値等しくない場合が 2 つの値の有効桁数が異なるためために、注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-431">The <xref:System.Single.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal because of the differing precision of the two values.</span></span> <span data-ttu-id="fc82c-432">次の例では、レポートを<xref:System.Single>.3333 を値と<xref:System.Single>で割ることによって返される 1 と 3 が等しくないです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-432">The following example reports that the <xref:System.Single> value .3333 and the <xref:System.Single> returned by dividing 1 by 3 are unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#1)]
 [!code-vb[System.Single.Epsilon#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#1)]  
  
 <span data-ttu-id="fc82c-433">等しいかどうかは、次の 2 つの値の差の許容の余白を定義する必要がありますを比較することに関連する問題を回避する手法の 1 つの比較 (などです。 値のいずれかの 01%)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-433">One comparison technique that avoids the problems associated with comparing for equality involves defining an acceptable margin of difference between two values (such as .01% of one of the values).</span></span> <span data-ttu-id="fc82c-434">2 つの値の差の絶対値は、以下が許容範囲は、違いは、有効桁数の違いの結果をする可能性があります、したがって、値は等しいと考えられます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-434">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be an outcome of differences in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="fc82c-435">次の例では、この手法が、等しくと 1/3、2 つを使用して<xref:System.Single>に等しくない場合に上記のコード例にある値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-435">The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Single> values that the previous code example found to be unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#2)]
 [!code-vb[System.Single.Epsilon#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#2)]  
  
 <span data-ttu-id="fc82c-436">この場合、値が等しいです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-436">In this case, the values are equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc82c-437"><xref:System.Single.Epsilon>式を定義します最小の範囲は 0 に近いは正の値の差の余白はより大きくなければなりません<xref:System.Single.Epsilon>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-437">Because <xref:System.Single.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="fc82c-438">通常、回数を超えています<xref:System.Single.Epsilon>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-438">Typically, it is many times greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="fc82c-439">このため、ことをお勧めするを使用しない<xref:System.Double.Epsilon>比較するときに<xref:System.Double>等しいかどうかの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-439">Because of this, we recommend that you do not use <xref:System.Double.Epsilon> when comparing <xref:System.Double> values for equality.</span></span>  
  
 <span data-ttu-id="fc82c-440">等しいかどうか比較することに関連する問題を回避する 2 番目の手法では、絶対値でいくつかの 2 つの浮動小数点数の違いを比較する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-440">A second technique that avoids the problems associated with comparing for equality involves comparing the difference between two floating-point numbers with some absolute value.</span></span> <span data-ttu-id="fc82c-441">違いがその絶対値未満の場合は、数値が等しいです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-441">If the difference is less than or equal to that absolute value, the numbers are equal.</span></span> <span data-ttu-id="fc82c-442">大きい場合は、数値が等しくありません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-442">If it is greater, the numbers are not equal.</span></span> <span data-ttu-id="fc82c-443">これを行う方法の 1 つでは、絶対値を任意に選択します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-443">One way to do this is to arbitrarily select an absolute value.</span></span> <span data-ttu-id="fc82c-444">ただし、この問題が生じる違いの許容の余白の大きさによって異なります、<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-444">However, this is problematic, because an acceptable margin of difference depends on the magnitude of the <xref:System.Single> values.</span></span> <span data-ttu-id="fc82c-445">2 番目の方法が浮動小数点形式のデザイン機能の活用: 浮動小数点値の 2 つの整数表現での仮数部コンポーネント間の違いは、2 つの値を分離する使用可能な浮動小数点値の数を示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-445">A second way takes advantage of a design feature of the floating-point format: The difference between the mantissa components in the integer representations of two floating-point values indicates the number of possible floating-point values that separates the two values.</span></span> <span data-ttu-id="fc82c-446">0.0 の違いなど、および<xref:System.Single.Epsilon>ためには 1、<xref:System.Single.Epsilon>は最小の表現可能な値を扱う場合に、<xref:System.Single>値が 0 です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-446">For example, the difference between 0.0 and <xref:System.Single.Epsilon> is 1, because <xref:System.Single.Epsilon> is the smallest representable value when working with a <xref:System.Single> whose value is zero.</span></span> <span data-ttu-id="fc82c-447">次の例では、この手法が、等しくと 1/3、2 つを使用して<xref:System.Double>値と前のコード例、<xref:System.Single.Equals%28System.Single%29>に等しくない場合にメソッドが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="fc82c-447">The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Double> values that the previous code example with the <xref:System.Single.Equals%28System.Single%29> method found to be unequal.</span></span> <span data-ttu-id="fc82c-448">この例では注意してください、<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType>と<xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType>単精度浮動小数点値を整数形式に変換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-448">Note that the example uses the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> and <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> methods to convert a single-precision floating-point value to its integer representation.</span></span>  
  
 [!code-csharp[System.Single.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsabs1.cs#1)]
 [!code-vb[System.Single.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsabs1.vb#1)]  
  
 <span data-ttu-id="fc82c-449">文書化されている有効桁数を超える浮動小数点数の有効桁数は、実装と .NET Framework のバージョンに固有です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-449">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="fc82c-450">その結果、数値の内部表現の有効桁数が変わる可能性があるために、2 つの数値の比較は、.NET Framework のバージョンによって異なる結果を生じる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-450">Consequently, a comparison of two numbers might produce different results depending on the version of the .NET Framework, because the precision of the numbers' internal representation might change.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="fc82c-451">コンパイラのオーバー ロードの解決は、2 つの動作の見かけ上の相違点についてアカウント可能性があります<see cref="M:System.Single.Equals(System.Object)" />メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-451">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Single.Equals(System.Object)" /> method overloads.</span></span> <span data-ttu-id="fc82c-452">場合の間の暗黙的な変換、<paramref name="obj" />引数および<see cref="T:System.Single" />が定義されている引数として型指定されていないと、 <see cref="T:System.Object" />、コンパイラが暗黙的な変換と呼び出し実行可能性があります、<see cref="M:System.Single.Equals(System.Single)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-452">If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Single" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Single.Equals(System.Single)" /> method.</span></span> <span data-ttu-id="fc82c-453">それ以外の場合を呼び出すことが、<see cref="M:System.Single.Equals(System.Object)" />メソッドで、常に返します<see langword="false" />場合その<paramref name="obj" />引数ではありません、<see cref="T:System.Single" />値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-453">Otherwise, they call the <see cref="M:System.Single.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Single" /> value.</span></span> <span data-ttu-id="fc82c-454">次の例は、次の 2 つのメソッド オーバー ロード間の動作の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-454">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="fc82c-455">以外のすべてのプリミティブ数値型の場合<see cref="T:System.Double" />Visual Basic と除く<see cref="T:System.Decimal" />と<see cref="T:System.Double" />、c# では、最初に比較を返します<see langword="true" />拡大変換と呼び出し、コンパイラが自動的に実行するため<see cref="M:System.Single.Equals(System.Single)" />メソッド、2 つ目の比較を返しますが<see langword="false" />コンパイラを呼び出すため、<see cref="M:System.Single.Equals(System.Object)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-455">In the case of all primitive numeric types except for <see cref="T:System.Double" /> in Visual Basic and except for <see cref="T:System.Decimal" /> and <see cref="T:System.Double" /> in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Single.Equals(System.Single)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Single.Equals(System.Object)" /> method.</span></span>  
  
 [!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)]
 [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.Single.Equals(System.Object)" />
        <altmember cref="Overload:System.Single.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fc82c-456">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-456">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="fc82c-457">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="fc82c-457">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fc82c-458"><see cref="T:System.TypeCode" /> 値型の <see cref="T:System.Single" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-458">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-459">列挙型定数 <see cref="F:System.TypeCode.Single" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-459">The enumerated constant, <see cref="F:System.TypeCode.Single" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsFinite(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="fc82c-460">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-460">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="fc82c-461">指定した数値が負または正の無限大と評価されるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-461">Returns a value indicating whether the specified number evaluates to negative or positive infinity.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-462"><paramref name="f" /> が <see cref="F:System.Single.PositiveInfinity" /> または <see cref="F:System.Single.NegativeInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-462"><see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-463">浮動小数点演算<xref:System.Single.PositiveInfinity>または<xref:System.Single.NegativeInfinity>オーバーフロー状態を通知します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-463">Floating-point operations return <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-464">次のコード例を示しています、<xref:System.Single.IsInfinity%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-464">The following code example demonstrates the <xref:System.Single.IsInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#11)]
 [!code-csharp[System.Single#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#11)]
 [!code-vb[System.Single#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNaN(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="fc82c-465">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-465">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="fc82c-466">指定した値が非数値 (<see cref="F:System.Single.NaN" />) かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-466">Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Single.NaN" />).</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-467"><paramref name="f" /> が非数 (<see cref="F:System.Single.NaN" />) と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-467"><see langword="true" /> if <paramref name="f" /> evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-468">浮動小数点演算<xref:System.Single.NaN>をその操作の結果が定義されていないことを通知します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-468">Floating-point operations return <xref:System.Single.NaN> to signal that that result of the operation is undefined.</span></span> <span data-ttu-id="fc82c-469">たとえば、0.0、0.0 を除算した結果、<xref:System.Single.NaN>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-469">For example, dividing 0.0 by 0.0 results in <xref:System.Single.NaN>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc82c-470"><xref:System.Single.IsNaN%2A> 返します`false`場合、<xref:System.Single>いずれかの値は<xref:System.Single.PositiveInfinity>または<xref:System.Single.NegativeInfinity>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-470"><xref:System.Single.IsNaN%2A> returns `false` if a <xref:System.Single> value is either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>.</span></span> <span data-ttu-id="fc82c-471">これらの値をテストするには、使用、 <xref:System.Single.IsInfinity%2A>、 <xref:System.Single.IsPositiveInfinity%2A>、および<xref:System.Single.IsNegativeInfinity%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-471">To test for these values, use the <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, and <xref:System.Single.IsNegativeInfinity%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-472">次のコード例を示しています、<xref:System.Single.IsNaN%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-472">The following code example demonstrates the <xref:System.Single.IsNaN%2A> method.</span></span>  
  
 [!code-cpp[System.Single#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#8)]
 [!code-csharp[System.Single#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#8)]
 [!code-vb[System.Single#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegative(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegativeInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="fc82c-473">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-473">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="fc82c-474">指定した数値が負の無限大と評価されるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-474">Returns a value indicating whether the specified number evaluates to negative infinity.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-475"><paramref name="f" /> が <see cref="F:System.Single.NegativeInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-475"><see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-476">浮動小数点演算<xref:System.Single.NegativeInfinity>オーバーフロー状態を通知します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-476">Floating-point operations return <xref:System.Single.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-477">次のコード例を示しています、<xref:System.Single.IsNegativeInfinity%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-477">The following code example demonstrates the <xref:System.Single.IsNegativeInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#13)]
 [!code-csharp[System.Single#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#13)]
 [!code-vb[System.Single#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsPositiveInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="fc82c-478">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-478">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="fc82c-479">指定した数値が正の無限大と評価されるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-479">Returns a value indicating whether the specified number evaluates to positive infinity.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-480"><paramref name="f" /> が <see cref="F:System.Single.PositiveInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-480"><see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-481">浮動小数点演算<xref:System.Single.PositiveInfinity>オーバーフロー状態を通知します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-481">Floating-point operations return <xref:System.Single.PositiveInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-482">次のコード例を示しています、<xref:System.Single.IsPositiveInfinity%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-482">The following code example demonstrates the <xref:System.Single.IsPositiveInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#12)]
 [!code-csharp[System.Single#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#12)]
 [!code-vb[System.Single#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsSubnormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MaxValue = float32(3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Single  = 3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MaxValue = 3.402823E+38;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.402823E+38</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc82c-483"><see cref="T:System.Single" /> の最大有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-483">Represents the largest possible value of <see cref="T:System.Single" />.</span></span> <span data-ttu-id="fc82c-484">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-484">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-485">この定数の値は、正の 3.40282347 e + 38 です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-485">The value of this constant is positive 3.40282347E+38.</span></span>  
  
 <span data-ttu-id="fc82c-486">超える演算の結果<xref:System.Single.MaxValue?displayProperty=nameWithType>は<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-486">The result of an operation that exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType> is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fc82c-487">次の例では、<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>結果を超えたときに結果を加算、乗算、および指数演算操作<xref:System.Single.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-487">In the following example, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> results from addition, multiplication, and exponentiation operations when the result exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Single.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.maxvalue/cs/maxvalueex.cs#1)]
 [!code-vb[System.Single.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.maxvalue/vb/maxvalueex.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-488">次のコード例を示しています、<xref:System.Single.MaxValue>定数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-488">The following code example demonstrates the <xref:System.Single.MaxValue> constant.</span></span>  
  
 [!code-cpp[System.Single#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#4)]
 [!code-csharp[System.Single#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#4)]
 [!code-vb[System.Single#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const float MinValue = -3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MinValue = float32(-3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Single  = -3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MinValue = -3.402823E+38;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-3.402823E+38</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc82c-489"><see cref="T:System.Single" /> の最小有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-489">Represents the smallest possible value of <see cref="T:System.Single" />.</span></span> <span data-ttu-id="fc82c-490">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-490">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-491">この定数の値は、負の値 3.402823 e 38 です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-491">The value of this constant is negative 3.402823e38.</span></span>  
  
 <span data-ttu-id="fc82c-492">ある操作の結果より小さい<xref:System.Single.MinValue?displayProperty=nameWithType>は<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-492">The result of an operation that is less than <xref:System.Single.MinValue?displayProperty=nameWithType> is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fc82c-493">次の例では、<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>結果が、減算、乗算の結果より小さい<xref:System.Single.MinValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-493">In the following example, <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> results from subtraction and multiplication operations when the result is less than <xref:System.Single.MinValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Single.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.minvalue/cs/minvalueex.cs#1)]
 [!code-vb[System.Single.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.minvalue/vb/minvalueex.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-494">次のコード例を示しています、<xref:System.Single.MinValue>定数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-494">The following code example demonstrates the <xref:System.Single.MinValue> constant.</span></span>  
  
 [!code-cpp[System.Single#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#5)]
 [!code-csharp[System.Single#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#5)]
 [!code-vb[System.Single#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const float NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NaN = float32(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Const NaN As Single  = NaN" />
      <MemberSignature Language="C++ CLI" Value="public: float NaN = NaN;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc82c-495">非数 (<see langword="NaN" />) を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-495">Represents not a number (<see langword="NaN" />).</span></span> <span data-ttu-id="fc82c-496">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-496">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-497">メソッドまたは演算子を返します<xref:System.Single.NaN>操作の結果が定義されている場合。</span><span class="sxs-lookup"><span data-stu-id="fc82c-497">A method or operator returns <xref:System.Single.NaN> when the result of an operation is undefined.</span></span> <span data-ttu-id="fc82c-498">たとえば、0 を 0 で除算した結果は<xref:System.Single.NaN>次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-498">For example, the result of dividing zero by zero is <xref:System.Single.NaN>, as the following example shows.</span></span> <span data-ttu-id="fc82c-499">(0 0 以外の数値で除算を返すこと、ただし、<xref:System.Single.PositiveInfinity>または<xref:System.Single.NegativeInfinity>除数の符号に応じて、します)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-499">(But note that dividing a non-zero number by zero returns either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>, depending on the sign of the divisor.)</span></span>  
  
 [!code-csharp[System.Single.NaN#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#1)]
 [!code-vb[System.Single.NaN#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#1)]  
  
 <span data-ttu-id="fc82c-500">さらに、メソッドを呼び出すと、<xref:System.Single.NaN>値またはでの操作、<xref:System.Single.NaN>値を返します<xref:System.Single.NaN>次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-500">In addition, a method call with a <xref:System.Single.NaN> value or an operation on a <xref:System.Single.NaN> value returns <xref:System.Single.NaN>, as the following example shows.</span></span>  
  
 [!code-csharp[System.Single.NaN#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#2)]
 [!code-vb[System.Single.NaN#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#2)]  
  
 <span data-ttu-id="fc82c-501">使用して、<xref:System.Single.IsNaN%2A>値が数値ではないかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-501">Use the <xref:System.Single.IsNaN%2A> method to determine whether a value is not a number.</span></span> <span data-ttu-id="fc82c-502">一般に、<xref:System.Single>を比較する演算子を使用することはできません<xref:System.Single.NaN?displayProperty=nameWithType>他<xref:System.Single>ですが、値比較メソッド (など<xref:System.Single.Equals%2A>と<xref:System.Single.CompareTo%2A>) ことができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-502">In general, <xref:System.Single> operators cannot be used to compare <xref:System.Single.NaN?displayProperty=nameWithType> with other <xref:System.Single> values, although comparison methods (such as <xref:System.Single.Equals%2A> and <xref:System.Single.CompareTo%2A>) can.</span></span> <span data-ttu-id="fc82c-503">次の例との間の動作の違いを示しています。<xref:System.Single>比較演算子とメソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-503">The following example illustrates the difference in behavior between <xref:System.Single> comparison operators and methods.</span></span>  
  
 [!code-csharp[System.Single.NaN#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/single.nan4.cs#4)]
 [!code-vb[System.Single.NaN#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/single.nan4.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-504">次の例で、<xref:System.Single.NaN>定数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-504">The following example demonstrates the <xref:System.Single.NaN> constant.</span></span>  
  
 [!code-cpp[System.Single#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#7)]
 [!code-csharp[System.Single#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#7)]
 [!code-vb[System.Single#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNaN(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NegativeInfinity = float32(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const NegativeInfinity As Single  = -Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float NegativeInfinity = -Infinity;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc82c-505">負の無限大を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-505">Represents negative infinity.</span></span> <span data-ttu-id="fc82c-506">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-506">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-507">この定数の値は、負の数を 0 で除算した結果です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-507">The value of this constant is the result of dividing a negative number by zero.</span></span>  
  
 <span data-ttu-id="fc82c-508">この定数は、返される操作の結果はより小さい<xref:System.Single.MinValue>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-508">This constant is returned when the result of an operation is less than <xref:System.Single.MinValue>.</span></span>  
  
 <span data-ttu-id="fc82c-509">使用して<xref:System.Single.IsNegativeInfinity%2A>値が負の無限大と評価されるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-509">Use <xref:System.Single.IsNegativeInfinity%2A> to determine whether a value evaluates to negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-510">次のコード例を示しています、<xref:System.Single.NegativeInfinity>定数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-510">The following code example demonstrates the <xref:System.Single.NegativeInfinity> constant.</span></span>  
  
 [!code-cpp[System.Single#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#9)]
 [!code-csharp[System.Single#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#9)]
 [!code-vb[System.Single#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Equality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="fc82c-511">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-511">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="fc82c-512">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-512">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="fc82c-513">指定した 2 つの <see cref="T:System.Single" /> 値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-513">Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-514"><see langword="true" /> と <paramref name="left" /> が等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-514"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-515"><xref:System.Single.op_Equality%2A>メソッド定義の等値演算子<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-515">The <xref:System.Single.op_Equality%2A> method defines the equality operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="fc82c-516">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-516">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="fc82c-517">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-517">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="fc82c-518">指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-518">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than another specified <see cref="T:System.Single" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-519"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-519"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-520"><xref:System.Single.op_GreaterThan%2A>メソッドは、大きい方の操作を定義-の演算子よりも<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-520">The <xref:System.Single.op_GreaterThan%2A> method defines the operation of the greater-than operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="fc82c-521">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-521">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="fc82c-522">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-522">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="fc82c-523">指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-523">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than or equal to another specified <see cref="T:System.Single" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-524"><paramref name="left" /> が <paramref name="right" /> 以上の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-524"><see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-525"><xref:System.Single.op_GreaterThanOrEqual%2A>メソッドの大きい-よりも-または-等号演算子の動作を定義する<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-525">The <xref:System.Single.op_GreaterThanOrEqual%2A> method defines the operation of the greater-than-or-equal operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Inequality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="fc82c-526">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-526">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="fc82c-527">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-527">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="fc82c-528">指定した 2 つの <see cref="T:System.Single" /> 値が等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-528">Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-529"><paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-529"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-530"><xref:System.Single.op_Inequality%2A>メソッド定義の非等値演算子<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-530">The <xref:System.Single.op_Inequality%2A> method defines the inequality operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="fc82c-531">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-531">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="fc82c-532">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-532">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="fc82c-533">指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-533">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than another specified <see cref="T:System.Single" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-534"><paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-534"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-535"><xref:System.Single.op_LessThan%2A>メソッドは、以下の操作を定義-の演算子よりも<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-535">The <xref:System.Single.op_LessThan%2A> method defines the operation of the less-than operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="fc82c-536">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-536">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="fc82c-537">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-537">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="fc82c-538">指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値以下かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-538">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than or equal to another specified <see cref="T:System.Single" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-539"><paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-539"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-540"><xref:System.Single.op_LessThanOrEqual%2A>メソッドは、小さいよりも-または等号演算子の操作を定義<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-540">The <xref:System.Single.op_LessThanOrEqual%2A> method defines the operation of the less-than-or-equal operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc82c-541">数値の文字列形式を、それと等しい単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-541">Converts the string representation of a number to its single-precision floating-point number equivalent.</span></span></summary>
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="fc82c-542">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-542">A string that contains a number to convert.</span></span></param>
        <summary><span data-ttu-id="fc82c-543">数値の文字列形式を、それと等しい単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-543">Converts the string representation of a number to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="fc82c-544"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-544">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-545">`s`パラメーターは、現在のカルチャを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または形式の文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-545">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="fc82c-546">[*ws*][*sign*] [*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][e[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="fc82c-546">[*ws*][*sign*] [*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][e[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="fc82c-547">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-547">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="fc82c-548">次の表では、各要素について説明します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-548">The following table describes each element.</span></span>  
  
|<span data-ttu-id="fc82c-549">要素</span><span class="sxs-lookup"><span data-stu-id="fc82c-549">Element</span></span>|<span data-ttu-id="fc82c-550">説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-550">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="fc82c-551">*ws*</span><span class="sxs-lookup"><span data-stu-id="fc82c-551">*ws*</span></span>|<span data-ttu-id="fc82c-552">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="fc82c-552">A series of white space characters.</span></span>|  
|<span data-ttu-id="fc82c-553">*sign*</span><span class="sxs-lookup"><span data-stu-id="fc82c-553">*sign*</span></span>|<span data-ttu-id="fc82c-554">負の記号または正の記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-554">A negative sign symbol or a positive sign symbol.</span></span> <span data-ttu-id="fc82c-555">有効な符号文字がによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>現在のカルチャのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-555">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="fc82c-556">先頭の記号のみを使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-556">Only a leading sign can be used.</span></span>|  
|<span data-ttu-id="fc82c-557">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-557">*integral-digits*</span></span>|<span data-ttu-id="fc82c-558">一連の数字の 0 から 9 の数の整数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-558">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="fc82c-559">実行*整数の桁*グループの区切り記号でパーティション分割することができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-559">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="fc82c-560">たとえば、コンマ (,) は、一部のカルチャで、何千ものグループを区切ります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-560">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="fc82c-561">*整数の桁*要素を指定できる場合、文字列が含まれています、*小数部の桁*要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-561">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="fc82c-562">*、*</span><span class="sxs-lookup"><span data-stu-id="fc82c-562">*,*</span></span>|<span data-ttu-id="fc82c-563">カルチャ固有の桁区切り記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-563">A culture-specific thousands separator symbol.</span></span>|  
|<span data-ttu-id="fc82c-564">*.*</span><span class="sxs-lookup"><span data-stu-id="fc82c-564">*.*</span></span>|<span data-ttu-id="fc82c-565">カルチャに固有の小数点記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-565">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="fc82c-566">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-566">*fractional-digits*</span></span>|<span data-ttu-id="fc82c-567">一連の数字の 0 から 9 数の小数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-567">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="fc82c-568">E</span><span class="sxs-lookup"><span data-stu-id="fc82c-568">E</span></span>|<span data-ttu-id="fc82c-569">"E"または"E"文字は、値を指数表記で表されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-569">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="fc82c-570">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-570">*exponential-digits*</span></span>|<span data-ttu-id="fc82c-571">一連の数字の 0 から 9 指数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-571">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="fc82c-572">`s`パラメーターの組み合わせを使用して解釈されます、<xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-572">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="fc82c-573">つまり、空白文字と桁区切り記号が許可されているが、通貨記号は表示されません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-573">This means that white space and thousands separators are allowed but currency symbols are not.</span></span> <span data-ttu-id="fc82c-574">要素を明示的に定義 (などの通貨記号、桁区切り記号、および空白) 内に存在することができます`s`を使用して、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-574">To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method overload.</span></span>  
  
 <span data-ttu-id="fc82c-575">`s`パラメーターは書式設定情報を使用して解析、<xref:System.Globalization.NumberFormatInfo>現在のシステムのカルチャに初期化されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-575">The `s` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="fc82c-576">詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-576">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.</span></span> <span data-ttu-id="fc82c-577">特定のカルチャの書式情報を使用して、文字列を解析するを使用して、<xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29>または<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-577">To parse a string by using the formatting information of a specific culture, use the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> or <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method.</span></span>  
  
 <span data-ttu-id="fc82c-578">通常、渡した場合、<xref:System.Single.Parse%2A>メソッドを呼び出すことによって作成される文字列を<xref:System.Single.ToString%2A>、元のメソッド<xref:System.Single>値が返されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-578">Ordinarily, if you pass the <xref:System.Single.Parse%2A> method a string that is created by calling the <xref:System.Single.ToString%2A> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="fc82c-579">ただし、精度の損失、ため値可能性がありますいないなります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-579">However, because of a loss of precision, the values may not be equal.</span></span>  
  
 <span data-ttu-id="fc82c-580">区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-580">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="fc82c-581">区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-581">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-582">次の例では、<xref:System.Single.Parse%28System.String%29>と等価な文字列の配列に変換します<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-582">The following example uses the <xref:System.Single.Parse%28System.String%29> method to convert an array of strings to equivalent <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Single.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse1.cs#2)]
 [!code-vb[System.Single.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fc82c-583"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-583"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="fc82c-584"><paramref name="s" /> が、有効な書式で数値を表していません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-584"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fc82c-585"><paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-585"><paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="fc82c-586">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-586">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="fc82c-587"><c>s</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-587">A bitwise combination of enumeration values that indicates the style elements that can be present in <c>s</c>.</span></span> <span data-ttu-id="fc82c-588">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-588">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <summary><span data-ttu-id="fc82c-589">指定したスタイルでの数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-589">Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="fc82c-590"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-590">A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-591">`style`パラメーター スタイル要素定義 (空白文字、数千などの区切り記号および通貨記号) で許容される、`s`解析操作が成功するためのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-591">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="fc82c-592">ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-592">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="fc82c-593">次<xref:System.Globalization.NumberStyles>メンバーがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-593">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="fc82c-594">`s`パラメーターは、現在のカルチャを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-594">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>.</span></span> <span data-ttu-id="fc82c-595">値に応じて`style`フォームをかかることができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-595">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="fc82c-596">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="fc82c-596">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="fc82c-597">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-597">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="fc82c-598">次の表では、各要素について説明します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-598">The following table describes each element.</span></span>  
  
 <span data-ttu-id="fc82c-599">*ws*</span><span class="sxs-lookup"><span data-stu-id="fc82c-599">*ws*</span></span>  
 <span data-ttu-id="fc82c-600">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="fc82c-600">A series of white-space characters.</span></span> <span data-ttu-id="fc82c-601">先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-601">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>  
  
 $  
 <span data-ttu-id="fc82c-602">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-602">A culture-specific currency symbol.</span></span> <span data-ttu-id="fc82c-603">文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>現在のカルチャのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-603">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="fc82c-604">現在のカルチャの通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-604">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="fc82c-605">*sign*</span><span class="sxs-lookup"><span data-stu-id="fc82c-605">*sign*</span></span>  
 <span data-ttu-id="fc82c-606">マイナス記号 (-) または、プラス記号 (+) です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-606">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="fc82c-607">先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>フラグ、およびそのがの末尾に置くことができます`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-607">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="fc82c-608">かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-608">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="fc82c-609">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-609">*integral-digits*</span></span>  
 <span data-ttu-id="fc82c-610">一連の数字の 0 から 9 の数の整数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-610">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="fc82c-611">*整数の桁*要素を指定できる場合、文字列が含まれています、*小数部の桁*要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-611">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>  
  
 <span data-ttu-id="fc82c-612">,</span><span class="sxs-lookup"><span data-stu-id="fc82c-612">,</span></span>  
 <span data-ttu-id="fc82c-613">カルチャ固有のグループの区切り記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-613">A culture-specific group separator.</span></span> <span data-ttu-id="fc82c-614">現在のカルチャの桁区切り記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ</span><span class="sxs-lookup"><span data-stu-id="fc82c-614">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>  
  
 <span data-ttu-id="fc82c-615">である必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-615">.</span></span>  
 <span data-ttu-id="fc82c-616">カルチャに固有の小数点記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-616">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="fc82c-617">現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-617">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="fc82c-618">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-618">*fractional-digits*</span></span>  
 <span data-ttu-id="fc82c-619">一連の数字の 0 から 9 数の小数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-619">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="fc82c-620">小数部の桁が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-620">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="fc82c-621">E</span><span class="sxs-lookup"><span data-stu-id="fc82c-621">E</span></span>  
 <span data-ttu-id="fc82c-622">"E"または"E"文字は、値を指数表記で表されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-622">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="fc82c-623">`value`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-623">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="fc82c-624">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-624">*exponential-digits*</span></span>  
 <span data-ttu-id="fc82c-625">一連の数字の 0 から 9 指数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-625">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>  
  
 <span data-ttu-id="fc82c-626">数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>スタイル) が正常に解析します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-626">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="fc82c-627">残りの<xref:System.Globalization.NumberStyles?displayProperty=nameWithType>メンバーが存在する可能性がありますが、入力文字列内に存在する必要がない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-627">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="fc82c-628">次の表に示す個別<xref:System.Globalization.NumberStyles>フラグに存在可能な要素に影響を与える`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-628">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="fc82c-629">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="fc82c-629">NumberStyles value</span></span>|<span data-ttu-id="fc82c-630">使用できる要素`s`数字だけでなく</span><span class="sxs-lookup"><span data-stu-id="fc82c-630">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="fc82c-631">*整数の桁*要素のみです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-631">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="fc82c-632">小数点 (*.*) および*小数部の桁*要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-632">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="fc82c-633">"E"または"E"文字は、指数表記法を示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-633">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="fc82c-634">それ自体では、このフラグは、形式で値をサポートしている*桁の数字*E*桁*以外の場合は追加のフラグが正常に正または負の符号および小数点記号としては、このような要素を含む文字列を解析する必要です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-634">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="fc82c-635">*Ws*の先頭にある要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-635">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="fc82c-636">*Ws*の末尾に要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-636">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="fc82c-637">*記号*の先頭にある要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-637">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="fc82c-638">*記号*の末尾に要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-638">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="fc82c-639">*記号*数値の値を囲むかっこの形式での要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-639">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="fc82c-640">桁区切り記号 (,) 要素です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-640">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="fc82c-641">通貨 ($) の要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-641">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="fc82c-642">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-642">All elements.</span></span> <span data-ttu-id="fc82c-643">ただし、 `s` 16 進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-643">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="fc82c-644">*Ws*先頭または末尾の位置にある要素`s`、*記号*の先頭に`s`、および小数点 (.) のシンボルです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-644">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="fc82c-645">`s`パラメーターは、指数表記も使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-645">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="fc82c-646">`ws`、 `sign`、桁区切り記号 (,) と小数点 (.) の要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-646">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="fc82c-647">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-647">All elements.</span></span> <span data-ttu-id="fc82c-648">ただし、 `s` 16 進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-648">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="fc82c-649">例をいくつか`s`は「100」、「-123,456,789」、「123.45 e + 6」、「+500」、"5e2"、「3.1416」、「600。」、"-。 123" は、と"-無限大"です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-649">Some examples of `s` are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="fc82c-650">`s`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo>現在のシステムのカルチャに初期化されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-650">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="fc82c-651">書式情報を含むが、解析操作で使用されるカルチャを指定するには、呼び出し、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-651">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
 <span data-ttu-id="fc82c-652">通常、渡した場合、<xref:System.Single.Parse%2A>メソッドを呼び出すことによって作成される文字列を<xref:System.Single.ToString%2A>、元のメソッド<xref:System.Single>値が返されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-652">Ordinarily, if you pass the <xref:System.Single.Parse%2A> method a string that is created by calling the <xref:System.Single.ToString%2A> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="fc82c-653">ただし、精度の損失、ため値可能性がありますいないなります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-653">However, because of a loss of precision, the values may not be equal.</span></span>  
  
 <span data-ttu-id="fc82c-654">区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-654">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="fc82c-655">区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-655">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-656">次の例では、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>の文字列形式を解析します<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-656">The following example uses the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method to parse the string representations of <xref:System.Single> values.</span></span> <span data-ttu-id="fc82c-657">例では、EN-US カルチャの書式情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-657">The example uses formatting information for the en-US culture.</span></span>  
  
 [!code-csharp[System.Single.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse2.cs#3)]
 [!code-vb[System.Single.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fc82c-658"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-658"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="fc82c-659"><paramref name="s" /> は有効な形式の数値ではありません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-659"><paramref name="s" /> is not a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fc82c-660"><paramref name="s" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-660"><paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fc82c-661"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-661"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="fc82c-662">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-662">-or-</span></span>  
  
 <span data-ttu-id="fc82c-663"><paramref name="style" /> に <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-663"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="fc82c-664">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-664">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="fc82c-665"><c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-665">An object that supplies culture-specific formatting information about <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="fc82c-666">指定したカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-666">Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="fc82c-667"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-667">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-668">このオーバー ロードでは、さまざまな方法でフォーマットできるテキストに変換するために使用は、通常、<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-668">This overload is typically used to convert text that can be formatted in a variety of ways to a <xref:System.Single> value.</span></span> <span data-ttu-id="fc82c-669">たとえば、数値の値を HTML テキスト ボックスに、ユーザーが入力したテキストに変換する、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-669">For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.</span></span>  
  
 <span data-ttu-id="fc82c-670">`s`パラメーターの組み合わせを使用して解釈されます、<xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-670">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="fc82c-671">`s`パラメーターを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>、または<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>で指定されたカルチャの`provider`、または形式の文字列を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-671">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`, or it can contain a string of the form:</span></span>  
  
 <span data-ttu-id="fc82c-672">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="fc82c-672">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="fc82c-673">省略可能な要素は角かっこで囲まれています ([および])。</span><span class="sxs-lookup"><span data-stu-id="fc82c-673">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="fc82c-674">数字の 0 から 9 までの一連の"digits"という語を含む要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-674">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span>  
  
|<span data-ttu-id="fc82c-675">要素</span><span class="sxs-lookup"><span data-stu-id="fc82c-675">Element</span></span>|<span data-ttu-id="fc82c-676">説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-676">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="fc82c-677">*ws*</span><span class="sxs-lookup"><span data-stu-id="fc82c-677">*ws*</span></span>|<span data-ttu-id="fc82c-678">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="fc82c-678">A series of white-space characters.</span></span>|  
|<span data-ttu-id="fc82c-679">*sign*</span><span class="sxs-lookup"><span data-stu-id="fc82c-679">*sign*</span></span>|<span data-ttu-id="fc82c-680">マイナス記号 (-) または、プラス記号 (+) です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-680">A negative sign symbol (-) or a positive sign symbol (+).</span></span>|  
|<span data-ttu-id="fc82c-681">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-681">*integral-digits*</span></span>|<span data-ttu-id="fc82c-682">一連の数字の 0 から 9 の数の整数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-682">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="fc82c-683">実行*整数の桁*グループの区切り記号でパーティション分割することができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-683">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="fc82c-684">たとえば、コンマ (,) は、一部のカルチャで、何千ものグループを区切ります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-684">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="fc82c-685">*整数の桁*要素を指定できる場合、文字列が含まれています、*小数部の桁*要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-685">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="fc82c-686">である必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-686">.</span></span>|<span data-ttu-id="fc82c-687">カルチャに固有の小数点記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-687">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="fc82c-688">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-688">*fractional-digits*</span></span>|<span data-ttu-id="fc82c-689">一連の数字の 0 から 9 数の小数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-689">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="fc82c-690">E</span><span class="sxs-lookup"><span data-stu-id="fc82c-690">E</span></span>|<span data-ttu-id="fc82c-691">"E"または"E"文字は、値を指数表記で表されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-691">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="fc82c-692">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-692">*exponential-digits*</span></span>|<span data-ttu-id="fc82c-693">一連の数字の 0 から 9 指数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-693">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="fc82c-694">数値形式の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-694">For more information about numeric formats, see the [Formatting Types](~/docs/standard/base-types/formatting-types.md) topic.</span></span>  
  
 <span data-ttu-id="fc82c-695">`provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>カルチャに固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-695">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="fc82c-696">ときに、<xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29>メソッドが呼び出され、呼び出し、`provider`パラメーターの<xref:System.IFormatProvider.GetFormat%2A>メソッド渡します、<xref:System.Type>を表すオブジェクト、<xref:System.Globalization.NumberFormatInfo>型です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-696">When the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="fc82c-697"><xref:System.IFormatProvider.GetFormat%2A>メソッドが戻ります、<xref:System.Globalization.NumberFormatInfo>の形式に関する情報を提供するオブジェクト、`s`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="fc82c-697">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `s` parameter.</span></span> <span data-ttu-id="fc82c-698">3 つの方法を使用する、`provider`パラメーター、解析操作にカスタムの書式情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-698">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="fc82c-699">渡すことができます、<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-699">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="fc82c-700">その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-700">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="fc82c-701">実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-701">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="fc82c-702">(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-702">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="fc82c-703">実装するカスタム オブジェクトを渡すことができます<xref:System.IFormatProvider>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-703">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="fc82c-704">その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化し、返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-704">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="fc82c-705">場合`provider`は`null`または<xref:System.Globalization.NumberFormatInfo>を取得できません、書式設定については、現在のシステム カルチャが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-705">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.</span></span>  
  
 <span data-ttu-id="fc82c-706">区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-706">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="fc82c-707">区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-707">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
 <span data-ttu-id="fc82c-708">例をいくつか`s`は「100」、「-123,456,789」、「123.45 e + 6」、「+500」、"5e2"、「3.1416」、「600。」、"-。 123" は、と"-無限大"です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-708">Some examples of `s` are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-709">次の例は、ボタンは、Web フォームのイベント ハンドラーをクリックします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-709">The following example is the button click event handler of a Web form.</span></span> <span data-ttu-id="fc82c-710">によって返される配列を使用して、<xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType>プロパティをユーザーのロケールを決定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-710">It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> property to determine the user's locale.</span></span> <span data-ttu-id="fc82c-711">インスタンス化し、<xref:System.Globalization.CultureInfo>そのロケールに対応するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-711">It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale.</span></span> <span data-ttu-id="fc82c-712"><xref:System.Globalization.NumberFormatInfo>に属しているオブジェクト<xref:System.Globalization.CultureInfo>にオブジェクトが渡され、<xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29>をユーザーに変換するメソッドの入力、<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-712">The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> method to convert the user's input to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[ParseMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#1)]
 [!code-vb[ParseMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fc82c-713"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-713"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="fc82c-714"><paramref name="s" /> が、有効な書式で数値を表していません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-714"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fc82c-715"><paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-715"><paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As Single" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="fc82c-716">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-716">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="fc82c-717"><c>s</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-717">A bitwise combination of enumeration values that indicates the style elements that can be present in <c>s</c>.</span></span> <span data-ttu-id="fc82c-718">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-718">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="fc82c-719"><c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-719">An object that supplies culture-specific formatting information about <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="fc82c-720">指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-720">Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="fc82c-721"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-721">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-722">`style`パラメーター スタイル要素定義 (空白文字、数千などの区切り記号および通貨記号) で許容される、`s`解析操作が成功するためのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-722">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="fc82c-723">ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-723">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="fc82c-724">次<xref:System.Globalization.NumberStyles>メンバーがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-724">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="fc82c-725">`s`パラメーターを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>、または<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>で指定されたカルチャの`provider`します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-725">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`.</span></span> <span data-ttu-id="fc82c-726">値に応じて`style`フォームをかかることができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-726">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="fc82c-727">[*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="fc82c-727">[*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="fc82c-728">要素は角かっこ ([および]) は省略可能で囲まれています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-728">Elements framed in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="fc82c-729">次の表では、各要素について説明します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-729">The following table describes each element.</span></span>  
  
|<span data-ttu-id="fc82c-730">要素</span><span class="sxs-lookup"><span data-stu-id="fc82c-730">Element</span></span>|<span data-ttu-id="fc82c-731">説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-731">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="fc82c-732">*ws*</span><span class="sxs-lookup"><span data-stu-id="fc82c-732">*ws*</span></span>|<span data-ttu-id="fc82c-733">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="fc82c-733">A series of white-space characters.</span></span> <span data-ttu-id="fc82c-734">先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-734">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|$|<span data-ttu-id="fc82c-735">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-735">A culture-specific currency symbol.</span></span> <span data-ttu-id="fc82c-736">文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>現在のカルチャのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-736">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="fc82c-737">現在のカルチャの通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-737">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-738">*sign*</span><span class="sxs-lookup"><span data-stu-id="fc82c-738">*sign*</span></span>|<span data-ttu-id="fc82c-739">マイナス記号 (-) または、プラス記号 (+) です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-739">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="fc82c-740">先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>フラグ、およびそのがの末尾に置くことができます`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-740">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="fc82c-741">かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-741">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-742">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-742">*integral-digits*</span></span>|<span data-ttu-id="fc82c-743">一連の数字の 0 から 9 の数の整数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-743">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="fc82c-744">*整数の桁*要素を指定できる場合、文字列が含まれています、*小数部の桁*要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-744">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="fc82c-745">,</span><span class="sxs-lookup"><span data-stu-id="fc82c-745">,</span></span>|<span data-ttu-id="fc82c-746">カルチャ固有のグループの区切り記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-746">A culture-specific group separator.</span></span> <span data-ttu-id="fc82c-747">現在のカルチャの桁区切り記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ</span><span class="sxs-lookup"><span data-stu-id="fc82c-747">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>|  
|<span data-ttu-id="fc82c-748">である必要があります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-748">.</span></span>|<span data-ttu-id="fc82c-749">カルチャに固有の小数点記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-749">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="fc82c-750">現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-750">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-751">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-751">*fractional-digits*</span></span>|<span data-ttu-id="fc82c-752">一連の数字の 0 から 9 数の小数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-752">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="fc82c-753">小数部の桁が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-753">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-754">E</span><span class="sxs-lookup"><span data-stu-id="fc82c-754">E</span></span>|<span data-ttu-id="fc82c-755">"E"または"E"文字は、値を指数表記で表されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-755">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="fc82c-756">`s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-756">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-757">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-757">*exponential-digits*</span></span>|<span data-ttu-id="fc82c-758">一連の数字の 0 から 9 指数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-758">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="fc82c-759">数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>スタイル) が正常に解析します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-759">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="fc82c-760">残りの<xref:System.Globalization.NumberStyles?displayProperty=nameWithType>メンバーが存在する可能性がありますが、入力文字列内に存在する必要がない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-760">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="fc82c-761">次の表に示す個別<xref:System.Globalization.NumberStyles>フラグに存在可能な要素に影響を与える`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-761">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="fc82c-762">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="fc82c-762">NumberStyles value</span></span>|<span data-ttu-id="fc82c-763">使用できる要素`s`数字だけでなく</span><span class="sxs-lookup"><span data-stu-id="fc82c-763">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="fc82c-764">*整数の桁*要素のみです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-764">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="fc82c-765">小数点 (*.*) および*小数部の桁*要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-765">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="fc82c-766">"E"または"E"文字は、指数表記法を示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-766">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="fc82c-767">それ自体では、このフラグは、形式で値をサポートしている*桁の数字*E*桁*以外の場合は追加のフラグが正常に正または負の符号および小数点記号としては、このような要素を含む文字列を解析する必要です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-767">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="fc82c-768">*Ws*の先頭にある要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-768">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="fc82c-769">*Ws*の末尾に要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-769">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="fc82c-770">*記号*の先頭にある要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-770">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="fc82c-771">*記号*の末尾に要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-771">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="fc82c-772">*記号*数値の値を囲むかっこの形式での要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-772">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="fc82c-773">桁区切り記号 (,) 要素です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-773">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="fc82c-774">通貨 ($) の要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-774">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="fc82c-775">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-775">All elements.</span></span> <span data-ttu-id="fc82c-776">ただし、 `s` 16 進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-776">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="fc82c-777">*Ws*先頭または末尾の位置にある要素`s`、*記号*の先頭に`s`、および小数点 (.) のシンボルです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-777">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="fc82c-778">`s`パラメーターは、指数表記も使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-778">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="fc82c-779">`ws`、 `sign`、桁区切り記号 (,) と小数点 (.) の要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-779">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="fc82c-780">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-780">All elements.</span></span> <span data-ttu-id="fc82c-781">ただし、 `s` 16 進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-781">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="fc82c-782">`provider`パラメーターは、<xref:System.IFormatProvider>実装します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-782">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="fc82c-783">その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>の書式に関するカルチャ固有の情報を提供するオブジェクト`value`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-783">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="fc82c-784">通常、`provider`次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-784">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="fc82c-785">A<xref:System.Globalization.CultureInfo>数値書式設定情報を提供するカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-785">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="fc82c-786">その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-786">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="fc82c-787">A<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-787">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="fc82c-788">(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-788">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="fc82c-789">実装するカスタム オブジェクト<xref:System.IFormatProvider>を使用して、<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>をインスタンス化して返すメソッド、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-789">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="fc82c-790">場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-790">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
 <span data-ttu-id="fc82c-791">区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-791">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="fc82c-792">区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-792">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-793">次のコード例では、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>の文字列形式を解析します<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-793">The following code example uses the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method to parse the string representations of <xref:System.Single> values.</span></span> <span data-ttu-id="fc82c-794">配列内の各文字列は、EN-US、NL-NL、およびカスタム カルチャの書式指定規則を使用して解析されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-794">Each string in an array is parsed using the formatting conventions of the en-US, nl-NL, and a custom culture.</span></span> <span data-ttu-id="fc82c-795">カスタム カルチャでは、アンダー スコア (「_ _」) とそのグループのサイズとして 2 つの桁区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-795">The custom culture defines its group separator symbol as the underscore ("_") and its group size as two.</span></span>  
  
 [!code-csharp[System.Single.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse3.cs#4)]
 [!code-vb[System.Single.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fc82c-796"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-796"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="fc82c-797"><paramref name="s" /> が数値を表していません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-797"><paramref name="s" /> does not represent a numeric value.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fc82c-798"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-798"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="fc82c-799">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-799">-or-</span></span>  
  
 <span data-ttu-id="fc82c-800"><paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-800"><paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fc82c-801"><paramref name="s" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-801"><paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const float PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PositiveInfinity = float32(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const PositiveInfinity As Single  = Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float PositiveInfinity = Infinity;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fc82c-802">正の無限大を表します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-802">Represents positive infinity.</span></span> <span data-ttu-id="fc82c-803">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-803">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-804">この定数の値は、0 では正の数値を除算した結果です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-804">The value of this constant is the result of dividing a positive number by zero.</span></span>  
  
 <span data-ttu-id="fc82c-805">この定数は操作の結果がよりも大きい場合に返される<xref:System.Single.MaxValue>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-805">This constant is returned when the result of an operation is greater than <xref:System.Single.MaxValue>.</span></span>  
  
 <span data-ttu-id="fc82c-806">使用して<xref:System.Single.IsPositiveInfinity%2A>値が正の無限大と評価されるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-806">Use <xref:System.Single.IsPositiveInfinity%2A> to determine whether a value evaluates to positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-807">次のコード例を示しています、<xref:System.Single.PositiveInfinity>定数。</span><span class="sxs-lookup"><span data-stu-id="fc82c-807">The following code example demonstrates the <xref:System.Single.PositiveInfinity> constant.</span></span>  
  
 [!code-cpp[System.Single#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#10)]
 [!code-csharp[System.Single#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#10)]
 [!code-vb[System.Single#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-808">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-808">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-809">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-809">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-810">現在のインスタンスの値がゼロでない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-810"><see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-811">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-811">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-812">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-812">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-813">推奨される代替手段が呼び出されて、<xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-813">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-814">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-814">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-815">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-815">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-816"><see cref="T:System.Byte" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-816">The value of the current instance, converted to a <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-817">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-817">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-818">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-818">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-819">推奨される代替手段が呼び出されて、<xref:System.Convert.ToByte%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-819">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-820">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-820">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-821">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-821">This conversion is not supported.</span></span> <span data-ttu-id="fc82c-822">このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-822">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-823">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-823">This conversion is not supported.</span></span> <span data-ttu-id="fc82c-824">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-824">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="fc82c-825">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="fc82c-825">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-826">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-826">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-827">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-827">This conversion is not supported.</span></span> <span data-ttu-id="fc82c-828">このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-828">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-829">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-829">This conversion is not supported.</span></span> <span data-ttu-id="fc82c-830">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-830">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="fc82c-831">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="fc82c-831">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-832">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-832">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-833">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-833">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-834"><see cref="T:System.Decimal" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-834">The value of the current instance, converted to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-835">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-835">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-836">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-836">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-837">推奨される代替手段が呼び出されて、<xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-837">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-838">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-838">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-839">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-839">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-840"><see cref="T:System.Double" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-840">The value of the current instance, converted to a <see cref="T:System.Double" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-841">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-841">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-842">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-842">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-843">推奨される代替手段が呼び出されて、<xref:System.Convert.ToDouble%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-843">The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-844">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-844">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-845">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-845">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-846"><see cref="T:System.Int16" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-846">The value of the current instance, converted to an <see cref="T:System.Int16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-847">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-847">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-848">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-848">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-849">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt16%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-849">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-850">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-850">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-851">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-851">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-852"><see cref="T:System.Int32" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-852">The value of the current instance, converted to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-853">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-853">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-854">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-854">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-855">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt32%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-855">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-856">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-856">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-857">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-857">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-858"><see cref="T:System.Int64" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-858">The value of the current instance, converted to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-859">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-859">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-860">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-860">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-861">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt64%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-861">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-862">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-862">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-863">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-863">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-864"><see cref="T:System.SByte" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-864">The value of the current instance, converted to an <see cref="T:System.SByte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-865">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-865">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-866">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-866">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-867">推奨される代替手段が呼び出されて、<xref:System.Convert.ToSByte%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-867">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-868">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-868">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-869">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-869">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-870">変更されていない、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-870">The value of the current instance, unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-871">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-871">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-872">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-872">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="fc82c-873">この <see cref="T:System.Single" /> 値の変換後の型。</span><span class="sxs-lookup"><span data-stu-id="fc82c-873">The type to which to convert this <see cref="T:System.Single" /> value.</span></span></param>
        <param name="provider"><span data-ttu-id="fc82c-874">戻り値の書式に関する情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-874">An object that supplies information about the format of the returned value.</span></span></param>
        <summary><span data-ttu-id="fc82c-875">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-875">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-876"><paramref name="type" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-876">The value of the current instance, converted to <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-877">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-877">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-878">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-878">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-879">推奨される代替手段が呼び出されて、 `static` (`Shared` Visual Basic で)<xref:System.Convert.ChangeType%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-879">The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-880">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-880">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-881">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-881">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-882"><see cref="T:System.UInt16" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-882">The value of the current instance, converted to a <see cref="T:System.UInt16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-883">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-883">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-884">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-884">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-885">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-885">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-886">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-886">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-887">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-887">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-888"><see cref="T:System.UInt32" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-888">The value of the current instance, converted to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-889">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-889">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-890">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-890">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-891">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-891">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-892">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-892">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="fc82c-893">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-893">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="fc82c-894"><see cref="T:System.UInt64" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-894">The value of the current instance, converted to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-895">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-895">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="fc82c-896">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-896">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="fc82c-897">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-897">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc82c-898">このインスタンスの数値を、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-898">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fc82c-899">このインスタンスの数値を、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-899">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="fc82c-900">このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="fc82c-900">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-901"><xref:System.Single.ToString>メソッドの形式、<xref:System.Single>現在のカルチャの形式 ("G"、または [全般]) の既定の値します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-901">The <xref:System.Single.ToString> method formats a <xref:System.Single> value in the default ("G", or general) format of the current culture.</span></span> <span data-ttu-id="fc82c-902">別の形式またはカルチャを指定する場合は、他のオーバー ロードを使用して、<xref:System.Single.ToString%2A>メソッドは、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-902">If you want to specify a different format or culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="fc82c-903">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="fc82c-903">To use format</span></span>|<span data-ttu-id="fc82c-904">カルチャの</span><span class="sxs-lookup"><span data-stu-id="fc82c-904">For culture</span></span>|<span data-ttu-id="fc82c-905">オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-905">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="fc82c-906">既定値 ("G") 書式</span><span class="sxs-lookup"><span data-stu-id="fc82c-906">Default ("G") format</span></span>|<span data-ttu-id="fc82c-907">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-907">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="fc82c-908">特定の形式</span><span class="sxs-lookup"><span data-stu-id="fc82c-908">A specific format</span></span>|<span data-ttu-id="fc82c-909">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-909">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
|<span data-ttu-id="fc82c-910">特定の形式</span><span class="sxs-lookup"><span data-stu-id="fc82c-910">A specific format</span></span>|<span data-ttu-id="fc82c-911">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-911">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="fc82c-912">戻り値は、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または形式の文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-912">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="fc82c-913">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span><span class="sxs-lookup"><span data-stu-id="fc82c-913">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="fc82c-914">省略可能な要素は角かっこで囲まれています ([および])。</span><span class="sxs-lookup"><span data-stu-id="fc82c-914">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="fc82c-915">数字の 0 から 9 までの一連の"digits"という語を含む要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-915">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="fc82c-916">次の表に、各要素を示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-916">The following table lists each element:</span></span>  
  
|<span data-ttu-id="fc82c-917">要素</span><span class="sxs-lookup"><span data-stu-id="fc82c-917">Element</span></span>|<span data-ttu-id="fc82c-918">説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-918">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="fc82c-919">*sign*</span><span class="sxs-lookup"><span data-stu-id="fc82c-919">*sign*</span></span>|<span data-ttu-id="fc82c-920">負の記号または正の記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-920">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="fc82c-921">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-921">*integral-digits*</span></span>|<span data-ttu-id="fc82c-922">一連の数字の数の整数部分を指定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-922">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="fc82c-923">整数の桁がなくてもかまいません桁の小数部がある場合。</span><span class="sxs-lookup"><span data-stu-id="fc82c-923">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="fc82c-924">'.'</span><span class="sxs-lookup"><span data-stu-id="fc82c-924">'.'</span></span>|<span data-ttu-id="fc82c-925">カルチャに固有の小数点記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-925">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="fc82c-926">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-926">*fractional-digits*</span></span>|<span data-ttu-id="fc82c-927">一連の数字の数の小数部を指定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-927">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="fc82c-928">' e'</span><span class="sxs-lookup"><span data-stu-id="fc82c-928">'e'</span></span>|<span data-ttu-id="fc82c-929">小文字"e"を示す文字指数表記。</span><span class="sxs-lookup"><span data-stu-id="fc82c-929">A lowercase character 'e', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="fc82c-930">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-930">*exponential-digits*</span></span>|<span data-ttu-id="fc82c-931">一連の数字の指数部を指定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-931">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="fc82c-932">戻り値の例をいくつかは、「100」、「-123,456,789」、"123.45 e + 6"、「500」、「3.1416」、「600」、「-0.123」と"-Infinity"です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-932">Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="fc82c-933">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-933">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="fc82c-934">数値書式指定子の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-934">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="fc82c-935">書式設定に関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-935">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-936">次の例では、既定値<xref:System.Single.ToString%2A?displayProperty=nameWithType>の数の文字列形式を表示するメソッドを<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-936">The following example uses the default <xref:System.Single.ToString%2A?displayProperty=nameWithType> method to display the string representations of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Single.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#1)]
 [!code-vb[System.Single.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#1)]  
  
 <span data-ttu-id="fc82c-937">次のコード例の使用を示しています、<xref:System.Single.Parse%28System.String%29>メソッドと共に、<xref:System.Single.ToString>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-937">The following code example illustrates the use of the <xref:System.Single.Parse%28System.String%29> method along with the <xref:System.Single.ToString> method.</span></span>  
  
 [!code-cpp[System.Single#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#3)]
 [!code-csharp[System.Single#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#3)]
 [!code-vb[System.Single#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="fc82c-938">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-938">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="fc82c-939">このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-939">Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="fc82c-940"><paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="fc82c-940">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-941"><xref:System.Single.ToString%28System.IFormatProvider%29>メソッドの形式、<xref:System.Single>値の既定値 ("G"、または [全般]) で指定されたカルチャの形式です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-941">The <xref:System.Single.ToString%28System.IFormatProvider%29> method formats a <xref:System.Single> value in the default ("G", or general) format of a specified culture.</span></span> <span data-ttu-id="fc82c-942">別の形式または現在のカルチャを指定する場合は、他のオーバー ロードを使用して、<xref:System.Single.ToString%2A>メソッドは、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-942">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="fc82c-943">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="fc82c-943">To use format</span></span>|<span data-ttu-id="fc82c-944">カルチャの</span><span class="sxs-lookup"><span data-stu-id="fc82c-944">For culture</span></span>|<span data-ttu-id="fc82c-945">オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-945">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="fc82c-946">既定値 ("G") 書式</span><span class="sxs-lookup"><span data-stu-id="fc82c-946">Default ("G") format</span></span>|<span data-ttu-id="fc82c-947">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-947">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="fc82c-948">特定の形式</span><span class="sxs-lookup"><span data-stu-id="fc82c-948">A specific format</span></span>|<span data-ttu-id="fc82c-949">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-949">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
|<span data-ttu-id="fc82c-950">特定の形式</span><span class="sxs-lookup"><span data-stu-id="fc82c-950">A specific format</span></span>|<span data-ttu-id="fc82c-951">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-951">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="fc82c-952">戻り値は、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または形式の文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-952">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="fc82c-953">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span><span class="sxs-lookup"><span data-stu-id="fc82c-953">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="fc82c-954">省略可能な要素は角かっこで囲まれています ([および])。</span><span class="sxs-lookup"><span data-stu-id="fc82c-954">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="fc82c-955">数字の 0 から 9 までの一連の"digits"という語を含む要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-955">Elements containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="fc82c-956">次の表には、各要素が一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-956">The following table lists each element.</span></span>  
  
|<span data-ttu-id="fc82c-957">要素</span><span class="sxs-lookup"><span data-stu-id="fc82c-957">Element</span></span>|<span data-ttu-id="fc82c-958">説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-958">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="fc82c-959">sign</span><span class="sxs-lookup"><span data-stu-id="fc82c-959">sign</span></span>|<span data-ttu-id="fc82c-960">負の記号または正の記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-960">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="fc82c-961">integral-digits</span><span class="sxs-lookup"><span data-stu-id="fc82c-961">integral-digits</span></span>|<span data-ttu-id="fc82c-962">一連の数字の数の整数部分を指定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-962">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="fc82c-963">整数の桁がなくてもかまいません桁の小数部がある場合。</span><span class="sxs-lookup"><span data-stu-id="fc82c-963">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="fc82c-964">'.'</span><span class="sxs-lookup"><span data-stu-id="fc82c-964">'.'</span></span>|<span data-ttu-id="fc82c-965">カルチャに固有の小数点記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-965">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="fc82c-966">fractional-digits</span><span class="sxs-lookup"><span data-stu-id="fc82c-966">fractional-digits</span></span>|<span data-ttu-id="fc82c-967">一連の数字の数の小数部を指定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-967">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="fc82c-968">' e'</span><span class="sxs-lookup"><span data-stu-id="fc82c-968">'e'</span></span>|<span data-ttu-id="fc82c-969">小文字"e"を示す文字指数表記。</span><span class="sxs-lookup"><span data-stu-id="fc82c-969">A lowercase character 'e', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="fc82c-970">exponential-digits</span><span class="sxs-lookup"><span data-stu-id="fc82c-970">exponential-digits</span></span>|<span data-ttu-id="fc82c-971">一連の数字の指数部を指定します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-971">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="fc82c-972">戻り値の例をいくつかは、「100」、「-123,456,789」、"123.45 e + 6"、「500」、「3.1416」、「600」、「-0.123」と"-Infinity"です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-972">Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="fc82c-973">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-973">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="fc82c-974">数値書式指定子の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-974">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="fc82c-975">書式設定に関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-975">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="fc82c-976">`provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-976">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="fc82c-977">通常、`provider`は、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.NumberFormatInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-977">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="fc82c-978">`provider`パラメーターの書式設定に使用されるカルチャに固有の情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-978">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="fc82c-979">場合`provider`は`null`を使用して、戻り値が書式設定、<xref:System.Globalization.NumberFormatInfo>データ、現在のカルチャ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-979">If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> data for the current culture.</span></span>  
  
 <span data-ttu-id="fc82c-980">変換する、<xref:System.Single>を指定したカルチャと特定の形式の文字列では、呼び出しを使用して、文字列形式の値、<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-980">To convert a <xref:System.Single> value to its string representation using a specified culture and a specific format string, call the <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-981">次の例では、2 つの文字列形式を<xref:System.Single>を使用して値<xref:System.Globalization.CultureInfo>を複数の異なるカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-981">The following example displays the string representation of two <xref:System.Single> values using <xref:System.Globalization.CultureInfo> objects that represent several different cultures.</span></span>  
  
 [!code-csharp[System.Single.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#2)]
 [!code-vb[System.Single.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="fc82c-982">数値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-982">A numeric format string.</span></span></param>
        <summary><span data-ttu-id="fc82c-983">指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-983">Converts the numeric value of this instance to its equivalent string representation, using the specified format.</span></span></summary>
        <returns><span data-ttu-id="fc82c-984"><paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="fc82c-984">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-985"><xref:System.Single.ToString%28System.String%29>メソッドの形式、<xref:System.Single>現在のカルチャの規則を使用して、指定した書式の値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-985">The <xref:System.Single.ToString%28System.String%29> method formats a <xref:System.Single> value in a specified format by using the conventions of the current culture.</span></span> <span data-ttu-id="fc82c-986">既定値 ("G"、または [全般]) を使用する場合は、書式を設定または別のカルチャを指定して、他のオーバー ロードを使用して、<xref:System.Single.ToString%2A>メソッドは、次のように。</span><span class="sxs-lookup"><span data-stu-id="fc82c-986">If you want to use the default ("G", or general) format or specify a different culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="fc82c-987">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="fc82c-987">To use format</span></span>|<span data-ttu-id="fc82c-988">カルチャの</span><span class="sxs-lookup"><span data-stu-id="fc82c-988">For culture</span></span>|<span data-ttu-id="fc82c-989">オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-989">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="fc82c-990">既定値 ("G") 書式</span><span class="sxs-lookup"><span data-stu-id="fc82c-990">Default ("G") format</span></span>|<span data-ttu-id="fc82c-991">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-991">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="fc82c-992">既定値 ("G") 書式</span><span class="sxs-lookup"><span data-stu-id="fc82c-992">Default ("G") format</span></span>|<span data-ttu-id="fc82c-993">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-993">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="fc82c-994">特定の形式</span><span class="sxs-lookup"><span data-stu-id="fc82c-994">A specific format</span></span>|<span data-ttu-id="fc82c-995">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-995">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="fc82c-996">戻り値は、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、またはで指定したとおり、現在のインスタンスの値の文字列形式を`format`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-996">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of the value of the current instance, as specified by `format`.</span></span>  
  
 <span data-ttu-id="fc82c-997">`format`パラメーターには、D、X を除く任意の有効な標準の数値書式指定子およびカスタム数値書式指定子の任意の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-997">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="fc82c-998">形式の場合`null`または戻り値、空の文字列が、一般的な数値書式指定子 ("G") でフォーマットされています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-998">If format is `null` or an empty string, the return value is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="fc82c-999">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-999">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="fc82c-1000">数値書式指定子の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1000">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="fc82c-1001">書式設定に関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1001">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="fc82c-1002">既定では、戻り値にはのみが含まれています 7 桁有効桁数には 9 桁の数字の最大数は内部的に保持されています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1002">By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="fc82c-1003">このインスタンスの値は 7 桁の数字より大きい場合<xref:System.Single.ToString%28System.String%29>返します<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>予想された数の代わりにします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1003">If the value of this instance has greater than 7 digits, <xref:System.Single.ToString%28System.String%29> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="fc82c-1004">高い精度を必要とする場合は、指定`format`が常に返します、9 桁の有効桁数、または"R"、"G9"書式指定する場合を返します 7 桁の数字数は、数を表現できる場合は最大有効桁数を持つ場合は、有効桁数または 9 桁で表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1004">If you require more precision, specify `format` with the "G9" format specification, which always returns 9 digits of precision, or "R", which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-1005">次の例では、数値の値を定義し、書式を通貨値として"C"標準の数値書式指定文字列を使用して、小数点以下 3 桁の数値として"N"の標準数値書式指定文字列を使用しています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1005">The following example defines a numeric value and formats it as a currency value by using the "C" standard numeric format string and as a numeric value to three decimal places by using the "N" standard numeric format string.</span></span> <span data-ttu-id="fc82c-1006">結果文字列は EN-US カルチャの規則を使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1006">The result strings are formatted by using the conventions of the en-US culture.</span></span> <span data-ttu-id="fc82c-1007">数値書式指定文字列の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1007">For more information on numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
 [!code-csharp[System.Single.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString7.cs#7)]
 [!code-vb[System.Single.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString7.vb#7)]  
  
 <span data-ttu-id="fc82c-1008">次の例では、いくつかが表示されます<xref:System.Single>を使用して、サポートされている標準数値書式指定子と共に 2 つのカスタム数値書式指定文字列の各値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1008">The following example displays several <xref:System.Single> values using each of the supported standard numeric format specifiers together with two custom numeric format strings.</span></span> <span data-ttu-id="fc82c-1009">余白を埋めるための方法を示しています、カスタム書式指定文字列の 1 つ、<xref:System.Single>先行ゼロを持つ値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1009">One of those custom format strings illustrates how to pad a <xref:System.Single> value with leading zeros.</span></span> <span data-ttu-id="fc82c-1010">数値の値を文字列に変換するのには、EN-US カルチャの書式指定規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1010">In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Single.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#3)]
 [!code-vb[System.Single.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="fc82c-1011"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1011"><paramref name="format" /> is invalid.</span></span></exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="fc82c-1012">数値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1012">A numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="fc82c-1013">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1013">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="fc82c-1014">このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1014">Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="fc82c-1015"><paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1015">The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-1016"><xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドの形式、<xref:System.Single>特定のカルチャの指定した形式の値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1016">The <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Single> value in a specified format of a specified culture.</span></span> <span data-ttu-id="fc82c-1017">既定の形式またはカルチャの設定を使用する場合は、他のオーバー ロードを使用して、<xref:System.Single.ToString%2A>メソッドは、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1017">If you want to use default format or culture settings, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="fc82c-1018">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="fc82c-1018">To use format</span></span>|<span data-ttu-id="fc82c-1019">カルチャの</span><span class="sxs-lookup"><span data-stu-id="fc82c-1019">For culture</span></span>|<span data-ttu-id="fc82c-1020">オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1020">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="fc82c-1021">既定値 ("G") 書式</span><span class="sxs-lookup"><span data-stu-id="fc82c-1021">Default ("G") format</span></span>|<span data-ttu-id="fc82c-1022">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-1022">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="fc82c-1023">既定値 ("G") 書式</span><span class="sxs-lookup"><span data-stu-id="fc82c-1023">Default ("G") format</span></span>|<span data-ttu-id="fc82c-1024">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-1024">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="fc82c-1025">特定の形式</span><span class="sxs-lookup"><span data-stu-id="fc82c-1025">A specific format</span></span>|<span data-ttu-id="fc82c-1026">(現在) の既定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="fc82c-1026">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
  
 <span data-ttu-id="fc82c-1027">戻り値は、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、またはで指定したとおり、現在のインスタンスの値の文字列形式を`format`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1027">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of the value of the current instance, as specified by `format`.</span></span>  
  
 <span data-ttu-id="fc82c-1028">`format`パラメーターには、D、X を除く任意の有効な標準の数値書式指定子およびカスタム数値書式指定子の任意の組み合わせを指定できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1028">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="fc82c-1029">場合`format`は`null`またはこのインスタンスの戻り値、空の文字列が、一般的な数値書式指定子 ("G") でフォーマットされています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1029">If `format` is `null` or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="fc82c-1030">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1030">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="fc82c-1031">数値書式指定子の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1031">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="fc82c-1032">書式設定に関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1032">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="fc82c-1033">`provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1033">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="fc82c-1034">通常、`provider`は、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.NumberFormatInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1034">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="fc82c-1035">`provider`パラメーターの書式設定に使用されるカルチャに固有の情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1035">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="fc82c-1036">場合`provider`は`null`、戻り値の書式で、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1036">If `provider` is `null`, the return value is formatted with the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
 <span data-ttu-id="fc82c-1037">既定では、戻り値にはのみが含まれています 7 桁有効桁数には 9 桁の数字の最大数は内部的に保持されています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1037">By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="fc82c-1038">このインスタンスの値は 7 桁の数字より大きい場合<xref:System.Single.ToString%2A>返します<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>予想された数の代わりにします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1038">If the value of this instance has greater than 7 digits, <xref:System.Single.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="fc82c-1039">高い精度を必要とする場合は、指定`format`が常に返します、9 桁の有効桁数、または"R"、"G9"書式指定する場合を返します 7 桁の数字数は、数を表現できる場合は最大有効桁数を持つ場合は、有効桁数または 9 桁で表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1039">If you require more precision, specify `format` with the "G9" format specification, which always returns 9 digits of precision, or "R", which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-1040">次の例を表示、<xref:System.Single>値のサポートされている標準数値書式指定子のいくつかの異なるカルチャを使用します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1040">The following example displays a <xref:System.Single> value using each of the supported standard numeric format specifiers for several different cultures.</span></span>  
  
 [!code-csharp[System.Single.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#4)]
 [!code-vb[System.Single.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc82c-1041">数値の文字列形式を、それと等しい単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1041">Converts the string representation of a number to its single-precision floating-point number equivalent.</span></span> <span data-ttu-id="fc82c-1042">戻り値は変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1042">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <altmember cref="Overload:System.Single.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] float % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] float % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="fc82c-1043">変換する数値を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1043">A string representing a number to convert.</span></span></param>
        <param name="result"><span data-ttu-id="fc82c-1044">変換が成功した場合、このメソッドから制御が戻った時点で、<c>s</c> に格納された数値または記号に等しい単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1044">When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <c>s</c>, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="fc82c-1045"><c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> であるか、有効な書式の数値ではない、または <see cref="F:System.Single.MinValue" /> より小さいか <see cref="F:System.Single.MaxValue" /> より大きい数値を表している場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1045">The conversion fails if the <c>s</c> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a valid format, or represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span> <span data-ttu-id="fc82c-1046">このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1046">This parameter is passed uninitialized; any value originally supplied in <c>result</c> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="fc82c-1047">数値の文字列形式を、それと等しい単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1047">Converts the string representation of a number to its single-precision floating-point number equivalent.</span></span> <span data-ttu-id="fc82c-1048">戻り値は変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1048">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-1049"><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1049"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-1050">このオーバー ロードとは異なります、<xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType>解析の数値の値を返す代わりに、解析操作が成功したかどうかを示すブール値を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1050">This overload differs from the <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</span></span> <span data-ttu-id="fc82c-1051">テストするため、例外処理を使用する必要がある、<xref:System.FormatException>イベントで`s`無効なため、正常に解析することはできません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1051">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="fc82c-1052">`s`パラメーターを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>文字列比較では、大文字小文字を区別)、または形式の文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1052">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> (the string comparison is case-sensitive), or a string of the form:</span></span>  
  
 <span data-ttu-id="fc82c-1053">[ws][記号][整数の桁]、整数の桁 [です [。小数部の桁] [e [サインイン] 指数の桁] [ws]</span><span class="sxs-lookup"><span data-stu-id="fc82c-1053">[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="fc82c-1054">角かっこ内の要素は省略できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1054">Elements in square brackets are optional.</span></span> <span data-ttu-id="fc82c-1055">次の表では、各要素について説明します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1055">The following table describes each element.</span></span>  
  
|<span data-ttu-id="fc82c-1056">要素</span><span class="sxs-lookup"><span data-stu-id="fc82c-1056">Element</span></span>|<span data-ttu-id="fc82c-1057">説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-1057">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="fc82c-1058">*ws*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1058">*ws*</span></span>|<span data-ttu-id="fc82c-1059">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1059">A series of white-space characters.</span></span>|  
|<span data-ttu-id="fc82c-1060">*sign*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1060">*sign*</span></span>|<span data-ttu-id="fc82c-1061">負の記号または正の記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1061">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="fc82c-1062">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1062">*integral-digits*</span></span>|<span data-ttu-id="fc82c-1063">一連の数字の 0 から 9 の数の整数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1063">A series of numeric characters ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="fc82c-1064">整数の桁がなくてもかまいません桁の小数部がある場合。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1064">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="fc82c-1065">*、*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1065">*,*</span></span>|<span data-ttu-id="fc82c-1066">カルチャ固有のグループの区切り記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1066">A culture-specific group separator symbol.</span></span>|  
|<span data-ttu-id="fc82c-1067">*.*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1067">*.*</span></span>|<span data-ttu-id="fc82c-1068">カルチャに固有の小数点記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1068">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="fc82c-1069">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1069">*fractional-digits*</span></span>|<span data-ttu-id="fc82c-1070">一連の数字の 0 から 9 数の小数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1070">A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="fc82c-1071">*E*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1071">*E*</span></span>|<span data-ttu-id="fc82c-1072">大文字または小文字の文字 'e' を指数表記を示すです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1072">An uppercase or lowercase character 'e', that indicates exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="fc82c-1073">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1073">*exponential-digits*</span></span>|<span data-ttu-id="fc82c-1074">一連の数字の 0 から 9 指数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1074">A series of numeric characters ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="fc82c-1075">`s`パラメーターの組み合わせを使用して解釈されます、<xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1075">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="fc82c-1076">つまり、空白文字と桁区切り記号が許可されているが、通貨記号は表示されません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1076">This means that white space and thousands separators are allowed but currency symbols are not.</span></span> <span data-ttu-id="fc82c-1077">要素を明示的に定義 (などの通貨記号、桁区切り記号、および空白) 内に存在することができます`s`を使用して、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1077">To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method overload.</span></span>  
  
 <span data-ttu-id="fc82c-1078">`s`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo>現在のシステムのカルチャに初期化されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1078">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="fc82c-1079">詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1079">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fc82c-1080">文字列を解析するその他の書式情報を使用して指定されたカルチャを使用して、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1080">To parse a string using the formatting information of some other specified culture, use the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method overload.</span></span>  
  
 <span data-ttu-id="fc82c-1081">通常、渡した場合、<xref:System.Single.TryParse%2A?displayProperty=nameWithType>メソッドを呼び出すことによって作成される文字列を<xref:System.Single.ToString%2A?displayProperty=nameWithType>、元のメソッド<xref:System.Single>値が返されます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1081">Ordinarily, if you pass the <xref:System.Single.TryParse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Single.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="fc82c-1082">ただし、精度の損失、ため値可能性がありますいないなります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1082">However, because of a loss of precision, the values may not be equal.</span></span>  
  
 <span data-ttu-id="fc82c-1083">区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1083">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="fc82c-1084">区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1084">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-1085">次の例では、<xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29>数値の文字列形式を変換する方法の<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1085">The following example uses the <xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29> method to convert the string representations of numeric values to <xref:System.Single> values.</span></span> <span data-ttu-id="fc82c-1086">その EN-US では、現在のカルチャと見なします。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1086">It assumes that en-US is the current culture.</span></span>  
  
 [!code-csharp[System.Single.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Single.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="fc82c-1087">変換する数値を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1087">A string representing a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="fc82c-1088"><c>s</c> に許可されている書式を示す列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1088">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>.</span></span> <span data-ttu-id="fc82c-1089">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1089">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="fc82c-1090"><c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1090">An object that supplies culture-specific formatting information about <c>s</c>.</span></span></param>
        <param name="result"><span data-ttu-id="fc82c-1091">変換が成功した場合、このメソッドから制御が戻った時点で、<c>s</c> に格納された数値または記号に等しい単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1091">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <c>s</c>, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="fc82c-1092"><c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> である、<c>style</c> に準拠した形式ではない、<see cref="F:System.Single.MinValue" /> より小さいか <see cref="F:System.Single.MaxValue" /> より大きい数値を示す、または <c>style</c> が <see cref="T:System.Globalization.NumberStyles" /> 列挙定数の有効な組み合わせではない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1092">The conversion fails if the <c>s</c> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <c>style</c>, represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />, or if <c>style</c> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants.</span></span> <span data-ttu-id="fc82c-1093">このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1093">This parameter is passed uninitialized; any value originally supplied in <c>result</c> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="fc82c-1094">指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1094">Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</span></span> <span data-ttu-id="fc82c-1095">戻り値は変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1095">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns>
          <span data-ttu-id="fc82c-1096"><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1096"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc82c-1097">このオーバー ロードとは異なります、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>解析の数値の値を返す代わりに、解析操作が成功したかどうかを示すブール値を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1097">This overload differs from the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</span></span> <span data-ttu-id="fc82c-1098">テストするため、例外処理を使用する必要がある、<xref:System.FormatException>イベントで`s`無効なため、正常に解析することはできません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1098">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="fc82c-1099">`style`パラメーターの使用可能な形式を定義する、`s`解析操作が成功するためのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1099">The `style` parameter defines the allowable format of the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="fc82c-1100">ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1100">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="fc82c-1101">次<xref:System.Globalization.NumberStyles>メンバーがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1101">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>  
  
 <span data-ttu-id="fc82c-1102">`s`パラメーターを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>によって示されるカルチャ`provider`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1102">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> for the culture indicated by `provider`.</span></span> <span data-ttu-id="fc82c-1103">値に応じてさらに、 `style`、`s`パラメーターは、次の要素を含めることがあります。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1103">In addition, depending on the value of `style`, the `s` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="fc82c-1104">[ws][$][記号][整数の桁]、整数の桁 [.fractional 桁] [e [サインイン] 指数の桁] [ws]</span><span class="sxs-lookup"><span data-stu-id="fc82c-1104">[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="fc82c-1105">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1105">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="fc82c-1106">次の表では、各要素について説明します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1106">The following table describes each element.</span></span>  
  
|<span data-ttu-id="fc82c-1107">要素</span><span class="sxs-lookup"><span data-stu-id="fc82c-1107">Element</span></span>|<span data-ttu-id="fc82c-1108">説明</span><span class="sxs-lookup"><span data-stu-id="fc82c-1108">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="fc82c-1109">*ws*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1109">*ws*</span></span>|<span data-ttu-id="fc82c-1110">省略可能なホワイト スペースです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1110">Optional white space.</span></span> <span data-ttu-id="fc82c-1111">先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1111">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="fc82c-1112">末尾に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1112">It can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="fc82c-1113">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1113">A culture-specific currency symbol.</span></span> <span data-ttu-id="fc82c-1114">文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>または<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>のメソッド、`provider`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1114">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> or <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method of the `provider` parameter.</span></span> <span data-ttu-id="fc82c-1115">通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1115">The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-1116">*sign*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1116">*sign*</span></span>|<span data-ttu-id="fc82c-1117">省略可能な符号の場合。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1117">An optional sign.</span></span> <span data-ttu-id="fc82c-1118">先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>フラグ、およびそのがの末尾に置くことができます`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1118">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="fc82c-1119">かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1119">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-1120">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1120">*integral-digits*</span></span>|<span data-ttu-id="fc82c-1121">一連の数字の 0 から 9 の数の整数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1121">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="fc82c-1122">整数の桁がなくてもかまいません桁の小数部がある場合。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1122">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="fc82c-1123">*、*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1123">*,*</span></span>|<span data-ttu-id="fc82c-1124">カルチャ固有の桁区切り記号。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1124">A culture-specific thousands separator symbol.</span></span> <span data-ttu-id="fc82c-1125">現在のカルチャの数千に区切り記号が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1125">The current culture's thousands separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-1126">*.*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1126">*.*</span></span>|<span data-ttu-id="fc82c-1127">カルチャに固有の小数点記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1127">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="fc82c-1128">現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1128">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-1129">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1129">*fractional-digits*</span></span>|<span data-ttu-id="fc82c-1130">一連の数字の 0 から 9 数の小数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1130">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="fc82c-1131">小数部の桁が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1131">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-1132">*e*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1132">*e*</span></span>|<span data-ttu-id="fc82c-1133">E または E 文字は、あることを示す`s`指数表記を使用して数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1133">The e or E character, which indicates that `s` can represent a number using exponential notation.</span></span> <span data-ttu-id="fc82c-1134">`s`スタイルが含まれている場合、パラメーターは指数表記の数値を表すことができます、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1134">The `s` parameter can represent a number in exponential notation if style includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="fc82c-1135">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1135">*exponential-digits*</span></span>|<span data-ttu-id="fc82c-1136">一連の数字の 0 から 9 指数部を指定するまでです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1136">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="fc82c-1137">数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>スタイル) が正常に解析します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1137">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="fc82c-1138">残りの<xref:System.Globalization.NumberStyles?displayProperty=nameWithType>メンバーを制御する可能性がありますが、入力文字列内に存在する必要はありません要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1138">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be but are not required to be present in the input string.</span></span> <span data-ttu-id="fc82c-1139">次の表に示す個別<xref:System.Globalization.NumberStyles>フラグに存在可能な要素に影響を与える`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1139">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="fc82c-1140">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="fc82c-1140">NumberStyles value</span></span>|<span data-ttu-id="fc82c-1141">数字だけでなく s で許可されている要素</span><span class="sxs-lookup"><span data-stu-id="fc82c-1141">Elements permitted in s in addition to digits</span></span>|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="fc82c-1142">*整数の桁*要素のみです。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1142">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="fc82c-1143">*.*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1143">The *.*</span></span> <span data-ttu-id="fc82c-1144">および*小数部の桁*要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1144">and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="fc82c-1145">`s`パラメーターは、指数表記も使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1145">The `s` parameter can also use exponential notation.</span></span> <span data-ttu-id="fc82c-1146">それ自体では、このフラグは、形式で値をサポートしている*整数の桁*E*指数の桁*以外の場合は追加のフラグが正常に正または負の符号および小数点記号などの要素を含む指数表記で文字列を解析する必要です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1146">This flag by itself supports values in the form *integral-digits*E*exponential-digits*; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="fc82c-1147">*Ws*の先頭にある要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1147">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="fc82c-1148">*Ws*の末尾に要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1148">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="fc82c-1149">*記号*の先頭にある要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1149">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="fc82c-1150">*記号*の末尾に要素`s`です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1150">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="fc82c-1151">*記号*数値の値を囲むかっこの形式での要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1151">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="fc82c-1152">*、* 要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1152">The *,* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="fc82c-1153">* $ *要素。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1153">The *$* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="fc82c-1154">すべて。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1154">All.</span></span> <span data-ttu-id="fc82c-1155">`s`パラメーターには、16 進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1155">The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="fc82c-1156">*Ws*先頭または末尾の位置にある要素`s`、*記号*の先頭に`s`、および*です。*</span><span class="sxs-lookup"><span data-stu-id="fc82c-1156">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the *.*</span></span> <span data-ttu-id="fc82c-1157">記号です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1157">symbol.</span></span> <span data-ttu-id="fc82c-1158">`s`パラメーターは、指数表記も使用できます。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1158">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="fc82c-1159">`ws`、 `sign`、何千もの区切り記号 (*、)、* と小数点 (*.*) 要素です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1159">The `ws`, `sign`, thousands separator (*,),* and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="fc82c-1160">すべてのスタイルを除く`s`16 進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1160">All styles, except `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="fc82c-1161">`provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>カルチャに固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1161">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="fc82c-1162">ときに、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29>メソッドが呼び出され、呼び出し、`provider`パラメーターの<xref:System.IFormatProvider.GetFormat%2A>メソッド渡します、<xref:System.Type>を表すオブジェクト、<xref:System.Globalization.NumberFormatInfo>型です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1162">When the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="fc82c-1163"><xref:System.IFormatProvider.GetFormat%2A>メソッドが戻ります、<xref:System.Globalization.NumberFormatInfo>の形式に関する情報を提供するオブジェクト、`s`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1163">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `s` parameter.</span></span> <span data-ttu-id="fc82c-1164">3 つの方法を使用する、`provider`パラメーター、解析操作にカスタムの書式情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1164">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="fc82c-1165">渡すことができます、<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1165">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="fc82c-1166">その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1166">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="fc82c-1167">実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1167">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="fc82c-1168">(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1168">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="fc82c-1169">実装するカスタム オブジェクトを渡すことができます<xref:System.IFormatProvider>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1169">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="fc82c-1170">その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化し、返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1170">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="fc82c-1171">場合`provider`は`null`の書式設定`s`に基づいて解釈されます、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1171">If `provider` is `null`, the formatting of `s` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="fc82c-1172">区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1172">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="fc82c-1173">区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1173">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc82c-1174">次の例での使用、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=nameWithType>を特定のスタイルがあり、特定のカルチャの規則を使用してフォーマットされている数値の文字列表現を解析します。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1174">The following example demonstrates the use of the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=nameWithType> method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.</span></span>  
  
 [!code-csharp[System.Single.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#2)]
 [!code-vb[System.Single.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fc82c-1175"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1175"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="fc82c-1176">- または -</span><span class="sxs-lookup"><span data-stu-id="fc82c-1176">-or-</span></span>  
  
 <span data-ttu-id="fc82c-1177"><paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="fc82c-1177"><paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>