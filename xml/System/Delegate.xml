<Type Name="Delegate" FullName="System.Delegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c32a7cd3f267f6ad99691a54a7da944b20a5a479" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36432042" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9d184-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9d184-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-102"><xref:System.Delegate>クラスはデリゲート型の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="9d184-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="9d184-103">ただし、システムとコンパイラから派生できる明示的に、<xref:System.Delegate>クラスから、または、<xref:System.MulticastDelegate>クラスです。</span><span class="sxs-lookup"><span data-stu-id="9d184-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="9d184-104">デリゲート型から新しい型を派生させることではないです。</span><span class="sxs-lookup"><span data-stu-id="9d184-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="9d184-105"><xref:System.Delegate>クラス、デリゲート型とは見なされません。 を使用してデリゲート型を派生クラスであります。</span><span class="sxs-lookup"><span data-stu-id="9d184-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="9d184-106">ほとんどの言語の実装、`delegate`キーワード、およびそれらの言語のコンパイラから派生することは、<xref:System.MulticastDelegate>クラスです。 したがって、ユーザーが使用する必要があります、 `delegate` 、言語によって提供されるキーワード。</span><span class="sxs-lookup"><span data-stu-id="9d184-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-107">共通言語ランタイムが提供する`Invoke`デリゲートと同じシグネチャを持つ各デリゲート型のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="9d184-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="9d184-108">ありません c#、Visual Basic または Visual C からこのメソッドを明示的に呼び出すと、コンパイラが自動的に、呼び出すためです。</span><span class="sxs-lookup"><span data-stu-id="9d184-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="9d184-109">`Invoke`メソッドは[リフレクション](~/docs/framework/reflection-and-codedom/reflection.md)デリゲートのシグネチャを検索するときにします。</span><span class="sxs-lookup"><span data-stu-id="9d184-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="9d184-110">共通言語ランタイムの各デリゲート型を提供する`BeginInvoke`と`EndInvoke`メソッドは、デリゲートの非同期呼び出しを有効にします。</span><span class="sxs-lookup"><span data-stu-id="9d184-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="9d184-111">これらのメソッドの詳細については、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="9d184-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="9d184-112">デリゲート型の宣言では、1 つまたは複数のメソッドのシグネチャを指定するコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="9d184-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="9d184-113">参照を持つデリゲート型のインスタンスをデリゲートには。</span><span class="sxs-lookup"><span data-stu-id="9d184-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="9d184-114">型と、その型に割り当てることができるターゲット オブジェクトのインスタンス メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9d184-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="9d184-115">インスタンス メソッド、型を非表示の`this`仮パラメーター リストで公開されているパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="9d184-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="9d184-116">デリゲートは、開いているインスタンス デリゲートと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="9d184-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="9d184-117">静的メソッド。</span><span class="sxs-lookup"><span data-stu-id="9d184-117">A static method.</span></span>  
  
-   <span data-ttu-id="9d184-118">静的メソッドは、メソッドの最初のパラメーターに割り当て可能なターゲット オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9d184-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="9d184-119">デリゲートは、最初の引数を終了すると言います。</span><span class="sxs-lookup"><span data-stu-id="9d184-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="9d184-120">デリゲート バインディングの詳細については、次を参照してください。、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-121">.NET Framework バージョン 1.0 および 1.1 では、デリゲートは、メソッドのシグネチャはデリゲート型で指定されたシグネチャを完全に一致する場合にのみ、メソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="9d184-122">したがって、上記の最初と 3 番目の箇条書きのみがサポートされ、最初の箇条書きには、正確な型の一致が必要です。</span><span class="sxs-lookup"><span data-stu-id="9d184-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="9d184-123">メソッドのエントリ ポイントへの参照とは定義されている型に割り当てることができる型では、ターゲットと呼ばれる、オブジェクトへの参照に、デリゲートを格納、デリゲートは、最初の引数 (最も一般的なケース) 経由で閉じられたインスタンス メソッドを表している場合、メソッド。</span><span class="sxs-lookup"><span data-stu-id="9d184-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="9d184-124">デリゲートは、開いているインスタンス メソッドを表している場合は、メソッドのエントリ ポイントへの参照を格納します。</span><span class="sxs-lookup"><span data-stu-id="9d184-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="9d184-125">デリゲートのシグネチャを非表示に含める必要があります`this`; 仮パラメーター リスト内のパラメーターここでは、デリゲートは、ターゲット オブジェクトへの参照がないと、デリゲートが呼び出されたときに、ターゲット オブジェクトを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="9d184-126">デリゲートは、静的メソッドを表している場合、デリゲートは、メソッドのエントリ ポイントへの参照を格納します。</span><span class="sxs-lookup"><span data-stu-id="9d184-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="9d184-127">デリゲートは、最初の引数を閉じている静的メソッドを表している場合、デリゲートは、メソッドのエントリ ポイントへの参照と、メソッドの最初の引数の型に代入のターゲット オブジェクトへの参照を格納します。</span><span class="sxs-lookup"><span data-stu-id="9d184-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="9d184-128">デリゲートが呼び出されたときに、静的メソッドの最初の引数はターゲット オブジェクトを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="9d184-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="9d184-129">デリゲートの呼び出しリストとは、一覧の各要素が、デリゲートによって表されるメソッドの 1 つだけに呼び出すデリゲートの順序付けされたセットです。</span><span class="sxs-lookup"><span data-stu-id="9d184-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="9d184-130">呼び出しリストには、重複したメソッドを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="9d184-131">呼び出し中には、メソッドは呼び出しリストに表示される順序で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="9d184-132">デリゲートが、呼び出しリスト内のすべてのメソッドを呼び出すしようとしています。重複部分は、呼び出しリストに表示されるたびに、後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="9d184-133">デリゲートは不変です。作成されると、デリゲートの呼び出しリストは変わりません。</span><span class="sxs-lookup"><span data-stu-id="9d184-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="9d184-134">デリゲートをいいます、マルチキャスト、または組み合わせ可能なデリゲートは 1 つまたは複数のメソッドを呼び出すことができ、操作を組み合わせることで使用できるためです。</span><span class="sxs-lookup"><span data-stu-id="9d184-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="9d184-135">など、操作を組み合わせて<xref:System.Delegate.Combine%2A>と<xref:System.Delegate.Remove%2A>、既存のデリゲートを変更しないでください。</span><span class="sxs-lookup"><span data-stu-id="9d184-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="9d184-136">代わりに、このような操作は、変更されていないデリゲートを操作の結果を含む新しいデリゲートを返しますまたは`null`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="9d184-137">結合操作が返されます`null`操作の結果が少なくとも 1 つのメソッドを参照していないするデリゲートの場合。</span><span class="sxs-lookup"><span data-stu-id="9d184-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="9d184-138">結合操作は、要求された操作に影響があるない場合に、変更されていないデリゲートを返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-139">マネージ言語を使用、<xref:System.Delegate.Combine%2A>と<xref:System.Delegate.Remove%2A>デリゲート操作を実装するメソッド。</span><span class="sxs-lookup"><span data-stu-id="9d184-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="9d184-140">例としては、`AddHandler`と`RemoveHandler`Visual Basic におけるステートメントと + = および -= の演算子にデリゲート (C#) の型。</span><span class="sxs-lookup"><span data-stu-id="9d184-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="9d184-141">以降で、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、汎用デリゲート型は、バリアント型パラメーターを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="9d184-142">反変の型パラメーターは、デリゲートのパラメーターの型として使用できるし、共変の型パラメーターは戻り値の型として使用することができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="9d184-143">この機能により、汎用デリゲート型の割り当てと互換性のある場合は、型引数が、継承関係を持つ参照型で説明したように、同じジェネリック型定義から構築される[共変性と反変性](~/docs/standard/generics/covariance-and-contravariance.md)です。</span><span class="sxs-lookup"><span data-stu-id="9d184-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-144">代入互換性のある汎用デリゲートの分散のためには必ずしも combinable できません。</span><span class="sxs-lookup"><span data-stu-id="9d184-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="9d184-145">組み合わせ可能にするのには、種類が正確に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="9d184-146">たとえば、クラスがという名前の`Derived`という名前のクラスから派生した`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="9d184-147">型のデリゲート`Action<Base>`(`Action(Of Base)` Visual Basic で) 型の変数に代入できます`Action<Derived>`種類が正確に一致しないために、2 つのデリゲートを組み合わせることはできませんが、します。</span><span class="sxs-lookup"><span data-stu-id="9d184-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="9d184-148">呼び出されたメソッドは、例外をスローする場合は、メソッドの実行は停止し、デリゲートの呼び出し元に渡された例外呼び出しリスト内の残りのメソッドは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="9d184-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="9d184-149">呼び出し元で例外をキャッチしても、この動作は変更されません。</span><span class="sxs-lookup"><span data-stu-id="9d184-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="9d184-150">デリゲートから呼び出されるメソッドのシグネチャには、戻り値が含まれている場合、デリゲートは、呼び出しリスト内の最後の要素の戻り値を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="9d184-151">シグネチャには、参照によって渡されるパラメーターが含まれている場合、パラメーターの最終値は順番に実行して、パラメーターの値の更新の呼び出しリスト内のすべてのメソッドの結果</span><span class="sxs-lookup"><span data-stu-id="9d184-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="9d184-152">C または C++ でのデリゲートの最も近いは、関数ポインターです。</span><span class="sxs-lookup"><span data-stu-id="9d184-152">The closest equivalent of a delegate in C or C++ is a function pointer.</span></span> <span data-ttu-id="9d184-153">デリゲートには、静的メソッドまたはインスタンス メソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="9d184-154">デリゲートは、インスタンス メソッドを表している場合、デリゲートは、メソッドのエントリ ポイントへの参照だけでなく、クラスのインスタンスへの参照を格納します。</span><span class="sxs-lookup"><span data-stu-id="9d184-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="9d184-155">関数ポインターとは異なり、デリゲートはオブジェクト指向し、タイプ セーフです。</span><span class="sxs-lookup"><span data-stu-id="9d184-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d184-156">次の例は、という名前のデリゲートを定義する方法を示しています。`myMethodDelegate`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="9d184-157">このデリゲートのインスタンスがインスタンス メソッドと、入れ子になったの静的メソッドの作成`mySampleClass`クラスです。</span><span class="sxs-lookup"><span data-stu-id="9d184-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="9d184-158">インスタンス メソッドのデリゲートのインスタンスを必要と`mySampleClass`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="9d184-159">`mySampleClass`インスタンスがという名前の変数に保存`mySC`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9d184-160">Initializes a new delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-160">Initializes a new delegate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="9d184-161">The class instance on which the delegate invokes <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-161">The class instance on which the delegate invokes <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-162">The name of the instance method that the delegate represents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-162">The name of the instance method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-163">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-163">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-164">このコンス トラクターは、アプリケーション コードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="9d184-164">This constructor cannot be used in application code.</span></span> <span data-ttu-id="9d184-165">インスタンス メソッドの名前を指定することによって、デリゲートを作成するには、オーバー ロードを使用して、<xref:System.Delegate.CreateDelegate%2A>がメソッド名とターゲット オブジェクトを指定するメソッド。</span><span class="sxs-lookup"><span data-stu-id="9d184-165">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="9d184-166">たとえば、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29>メソッド オーバー ロードは、指定した名前を持つインスタンス メソッドのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-166">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="9d184-167">このコンス トラクターのデリゲートのインスタンス メソッドだけを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-167">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="9d184-168">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-168">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-169">
            <paramref name="target" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-169">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-170">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-170">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-171">There was an error binding to the target method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-171">There was an error binding to the target method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-172">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-172">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-173">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-173">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="9d184-174">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-174">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-175">The name of the static method that the delegate represents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-175">The name of the static method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-176">Initializes a delegate that invokes the specified static method from the specified class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-176">Initializes a delegate that invokes the specified static method from the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-177">このコンス トラクターは、アプリケーション コードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="9d184-177">This constructor cannot be used in application code.</span></span> <span data-ttu-id="9d184-178">静的メソッドの名前を指定することによって、デリゲートを作成するには、オーバー ロードを使用して、<xref:System.Delegate.CreateDelegate%2A>メソッドをメソッドの名前を指定しますが、ターゲット オブジェクトが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9d184-178">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="9d184-179">たとえば、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29>メソッド オーバー ロードは、指定した名前の静的メソッドのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-179">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="9d184-180">このコンス トラクターでは、静的メソッドのみのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-180">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="9d184-181">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-181">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-182">
            <paramref name="target" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-182">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-183">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-183">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-184">
            <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-184">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-185">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-185">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-186">-or-  <paramref name="target" /> represents an open generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-186">-or-  <paramref name="target" /> represents an open generic type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-187">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-187">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-188">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-188">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9d184-189">Creates a shallow copy of the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-189">Creates a shallow copy of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-190">A shallow copy of the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-190">A shallow copy of the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-191">クローンが同じ<xref:System.Type>ターゲット、メソッド、および呼び出し元のデリゲートとして ボックスの一覧です。</span><span class="sxs-lookup"><span data-stu-id="9d184-191">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="9d184-192">シャロー コピーでは、元のオブジェクトと同じ型の新しいインスタンスを作成し、元のオブジェクトの非静的フィールドをコピーします。</span><span class="sxs-lookup"><span data-stu-id="9d184-192">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="9d184-193">フィールドが値型の場合は、フィールドのビットごとのコピーは実行されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-193">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="9d184-194">フィールドが参照型の場合は、参照がコピーが、参照されるオブジェクトはありません。そのため、元のオブジェクト参照と、複製の参照は、同じオブジェクトをポイントします。</span><span class="sxs-lookup"><span data-stu-id="9d184-194">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="9d184-195">これに対し、オブジェクトのディープ コピーでは、直接または間接的には、オブジェクト内のフィールドが参照されるすべて重複しています。</span><span class="sxs-lookup"><span data-stu-id="9d184-195">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-196">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-196">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-197">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-197">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9d184-198">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-198">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates">
          <span data-ttu-id="9d184-199">The array of delegates to combine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-199">The array of delegates to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-200">Concatenates the invocation lists of an array of delegates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-200">Concatenates the invocation lists of an array of delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-201">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-201">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          </span>
          <span data-ttu-id="9d184-202">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-202">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-203">場合、`delegates`配列にいるエントリが含まれています`null`、これらのエントリは無視されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-203">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="9d184-204">呼び出しリストに重複するエントリを含めることができます。同じオブジェクトの同じメソッドを参照するエントリは、します。</span><span class="sxs-lookup"><span data-stu-id="9d184-204">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-205">代入互換性のある汎用デリゲートの分散のためには必ずしも combinable できません。</span><span class="sxs-lookup"><span data-stu-id="9d184-205">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="9d184-206">組み合わせ可能にするのには、種類が正確に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-206">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="9d184-207">たとえば、クラスがという名前の`Derived`という名前のクラスから派生した`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-207">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="9d184-208">型のデリゲート`Action<Base>`(`Action(Of Base)` Visual Basic で) 型の変数に代入できます`Action<Derived>`」の説明に従って、[共変性と反変性](~/docs/standard/generics/covariance-and-contravariance.md)種類が、2 つのデリゲートを組み合わせることができませんが、完全に一致しません。</span><span class="sxs-lookup"><span data-stu-id="9d184-208">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="9d184-209"><xref:System.Delegate.Combine%2A> 呼び出しを複数のメソッド、イベントの時刻に発生するイベント ハンドラーを作成するために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="9d184-209"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-210">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-210">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-211">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-211">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-212">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-212">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="9d184-213">The delegate whose invocation list comes first.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-213">The delegate whose invocation list comes first.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="9d184-214">The delegate whose invocation list comes last.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-214">The delegate whose invocation list comes last.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-215">Concatenates the invocation lists of two delegates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-215">Concatenates the invocation lists of two delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-216">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-216">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          </span>
          <span data-ttu-id="9d184-217">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-217">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-218">呼び出しリストに重複するエントリを含めることができます。同じオブジェクトの同じメソッドを参照するエントリは、します。</span><span class="sxs-lookup"><span data-stu-id="9d184-218">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-219">代入互換性のある汎用デリゲートの分散のためには必ずしも combinable できません。</span><span class="sxs-lookup"><span data-stu-id="9d184-219">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="9d184-220">組み合わせ可能にするのには、種類が正確に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-220">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="9d184-221">たとえば、クラスがという名前の`Derived`という名前のクラスから派生した`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-221">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="9d184-222">型のデリゲート`Action<Base>`(`Action(Of Base)` Visual Basic で) 型の変数に代入できます`Action<Derived>`」の説明に従って、[共変性と反変性](~/docs/standard/generics/covariance-and-contravariance.md)種類が、2 つのデリゲートを組み合わせることができませんが、完全に一致しません。</span><span class="sxs-lookup"><span data-stu-id="9d184-222">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="9d184-223"><xref:System.Delegate.Combine%2A> 呼び出しを複数のメソッド、イベントの時刻に発生するイベント ハンドラーを作成するために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="9d184-223"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-224">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-224">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-225">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-225">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-226">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-226">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="9d184-227">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-227">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-228">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-228">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-229">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-229">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-230">このメソッドは、現在のデリゲートはマルチキャスト場合にのみ適用されます (組み合わせ可能)。</span><span class="sxs-lookup"><span data-stu-id="9d184-230">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="9d184-231">現在の実装は単にスロー、<xref:System.MulticastNotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="9d184-231">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="9d184-232">呼び出しリストに重複するエントリを含めることができます。同じオブジェクトの同じメソッドを参照するエントリは、します。</span><span class="sxs-lookup"><span data-stu-id="9d184-232">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException">
          <span data-ttu-id="9d184-233">Always thrown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-233">Always thrown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-234">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-234">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-235">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-235">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9d184-236">Creates a delegate of the specified type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-236">Creates a delegate of the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-237">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-237">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-238">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-238">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
          <span data-ttu-id="9d184-239">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-239">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-240">Creates a delegate of the specified type to represent the specified static method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-240">Creates a delegate of the specified type to represent the specified static method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-241">A delegate of the specified type to represent the specified static method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-241">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-242">.NET framework version 1.0 および 1.1 では、このメソッドのオーバー ロードは、静的メソッドのみのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-242">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="9d184-243">.NET framework version 2.0 では、このメソッドのオーバー ロード作成することも開いているインスタンス メソッドのデリゲート。つまり、非表示の最初の引数を明示的に指定するデリゲートはインスタンス メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9d184-243">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="9d184-244">詳細についてより一般的なを参照してください。 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> 、すべてのインスタンスまたは静的メソッドは、オープンかクローズのデリゲートの組み合わせを作成したり、必要に応じて、最初の引数を指定するメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-244">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-245">このメソッドのオーバー ロードする必要があるために、使用、デリゲートは、最初の引数を終了していないときにその場合は多少高速です。</span><span class="sxs-lookup"><span data-stu-id="9d184-245">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="9d184-246">このメソッドはオーバー ロードを呼び出すことと同等、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>メソッドのオーバー ロードを指定して`true`の`throwOnBindFailure`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-246">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-247">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-247">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-248">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-248">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-249">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-249">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="9d184-250">互換性のあるパラメーターの型と戻り値の型</span><span class="sxs-lookup"><span data-stu-id="9d184-250">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="9d184-251">.NET framework version 2.0 では、このメソッドのオーバー ロードを使用して作成されたデリゲートの戻り値の型とパラメーターの型がありますパラメーターの型とデリゲートが表すメソッドの戻り値の型と互換性のあります。型を完全に一致する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-251">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="9d184-252">これには、.NET Framework version 1.0 および 1.1 では、種類が正確に一致する必要があります、内のバインド動作の緩和を表します。</span><span class="sxs-lookup"><span data-stu-id="9d184-252">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="9d184-253">デリゲートのパラメーターにメソッドのパラメーターよりも限定的な型が指定された場合、両者のパラメーター間に型の互換性があると見なされます。これによって、デリゲートに渡された引数が、メソッドに対して安全に渡されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-253">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="9d184-254">同様に、メソッドの戻り値の型の制限がデリゲートの戻り値の型より多いと、メソッドの戻り値がデリゲートの戻り値の型に安全にキャストされることが保証されるため、デリゲートの戻り値の型とメソッドの戻り値の型には互換性があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-254">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="9d184-255">型のパラメーターを持つデリゲートなど、<xref:System.Collections.Hashtable>と戻り値の型<xref:System.Object>型のパラメーターを持つメソッドを表すことができる<xref:System.Object>型の値を返す<xref:System.Collections.Hashtable>です。</span><span class="sxs-lookup"><span data-stu-id="9d184-255">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d184-256">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-256">This section contains two code examples.</span></span> <span data-ttu-id="9d184-257">最初の例では、このメソッドのオーバー ロードを作成するデリゲートの 2 つの種類: インスタンス メソッドで開き、静的メソッドを開きます。</span><span class="sxs-lookup"><span data-stu-id="9d184-257">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="9d184-258">2 番目のコード例では、互換性のあるパラメーターの型について説明し、型を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-258">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="9d184-259">**例 1**</span><span class="sxs-lookup"><span data-stu-id="9d184-259">**Example 1**</span></span>  
  
 <span data-ttu-id="9d184-260">次のコード例は、のこのオーバー ロードを使用してデリゲートを作成する 2 つの方法を示します、<xref:System.Delegate.CreateDelegate%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9d184-260">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-261">2 つのオーバー ロードがあります、<xref:System.Delegate.CreateDelegate%2A>メソッドを指定する、<xref:System.Reflection.MethodInfo>最初の引数されませんが、いずれか、バインドするには、失敗した場合にスローするかどうかを指定することができ、もう一方は常にスローする点を除いて、機能は同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-261">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="9d184-262">このコード例では、両方のオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-262">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="9d184-263">例では、クラスを宣言して`C`静的メソッドを使用して`M2`とインスタンス メソッド`M1`、2 つのデリゲート型と:`D1`のインスタンスを受け取り`C`および文字列、および`D2`文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-263">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="9d184-264">2 番目のクラスを名前付き`Example`デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-264">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="9d184-265">型のデリゲート`D1`、開いているインスタンス メソッドを表す、インスタンス メソッドの作成は`M1`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-265">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="9d184-266">デリゲートが呼び出されたときに、インスタンスを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-266">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="9d184-267">型のデリゲート`D2`、オープンな静的メソッドを表す、静的なメソッドの作成は`M2`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-267">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="9d184-268">**例 2**</span><span class="sxs-lookup"><span data-stu-id="9d184-268">**Example 2**</span></span>  
  
 <span data-ttu-id="9d184-269">次のコード例では、パラメーターの型との互換性について説明し、型を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-269">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="9d184-270">このコード例は、という名前の基本クラスを定義`Base`という名前のクラスと`Derived`から派生した`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-270">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="9d184-271">派生クラスには、 `static` (`Shared` Visual Basic で) という名前のメソッド`MyMethod`型の 1 つのパラメーターを持つ`Base`と戻り値の型`Derived`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-271">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="9d184-272">このコード例もという名前のデリゲートを定義`Example`型の 1 つのパラメーターを持つ`Derived`と戻り値の型`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-272">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="9d184-273">このコード例で、デリゲートがという名前の`Example`、メソッドを表すために使用できる`MyMethod`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-273">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="9d184-274">メソッドは、ために、デリゲートにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="9d184-274">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="9d184-275">デリゲートのパラメーターの型 (`Derived`) のパラメーターの型より限定的な`MyMethod`(`Base`) できるように、安全にデリゲートの引数を渡すには常に、`MyMethod`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-275">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="9d184-276">戻り値の型`MyMethod`(`Derived`) デリゲートのパラメーターの型より限定的な (`Base`) デリゲートの戻り値の型をメソッドの戻り値の型をキャストしても安全では常にするようにします。</span><span class="sxs-lookup"><span data-stu-id="9d184-276">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="9d184-277">コード例は、出力を生成されません。</span><span class="sxs-lookup"><span data-stu-id="9d184-277">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-278">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-278">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-279">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-279">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-280">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-280">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-281">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-281">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-282">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-282">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-283">-or-  <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-283">-or-  <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
          <span data-ttu-id="9d184-284">-or-  <paramref name="method" /> cannot be bound.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-284">-or-  <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="9d184-285">-or-  <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-285">-or-  <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="9d184-286">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-286">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-287">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-287">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-288">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-288">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-289">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-289">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-290">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-290">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-291">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-291">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="9d184-292">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-292">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-293">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-293">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-294">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-294">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-295">A delegate of the specified type that represents the specified static or instance method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-295">A delegate of the specified type that represents the specified static or instance method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-296">呼び出すことと同じではこのメソッドのオーバー ロードを呼び出して、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>メソッドのオーバー ロードを指定して`true`の`throwOnBindFailure`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-296">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="9d184-297">これら 2 つのオーバー ロードは、デリゲートを作成する最も柔軟な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="9d184-297">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="9d184-298">インスタンス メソッド、または静的のデリゲートを作成して、最初の引数を指定するオプションで使用できます。</span><span class="sxs-lookup"><span data-stu-id="9d184-298">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-299">最初の引数を指定しない場合は使用して、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>パフォーマンス向上のためのメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-299">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="9d184-300">デリゲート型と、メソッドには、互換性のある戻り値の型がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-300">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="9d184-301">戻り値の型は、`method`の戻り値の型に割り当てることがあります`type`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-301">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="9d184-302">場合`firstArgument`が指定するに渡される`method`たびに、デリゲートが呼び出されます。`firstArgument`デリゲートにバインドすることと、最初の引数を終了するデリゲートを言います。</span><span class="sxs-lookup"><span data-stu-id="9d184-302">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="9d184-303">場合`method`は`static`(`Shared` Visual Basic で) では、引数のデリゲートを呼び出すときに提供される一覧に場合は、先頭を除くすべてのパラメーターが含まれます`method`し、インスタンス メソッドでは、`firstArgument`非表示のインスタンスに渡されるパラメーター (によって表される`this`C# の場合、または`Me`Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="9d184-303">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9d184-304">場合`firstArgument`が指定されている最初のパラメーターの`method`、参照型である必要がありますと`firstArgument`型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-304">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9d184-305">場合`method`は`static`(`Shared` Visual Basic で) し、その最初のパラメーターの型は<xref:System.Object>または<xref:System.ValueType>、し`firstArgument`値型であることができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-305">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="9d184-306">ここでは`firstArgument`が自動的にボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-306">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="9d184-307">C# または Visual Basic の関数を呼び出す場合は、自動的なボックス化は他の引数がある場合は発生しません。</span><span class="sxs-lookup"><span data-stu-id="9d184-307">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="9d184-308">場合`firstArgument`null 参照と`method`インスタンス メソッドでは、結果は、デリゲート型のシグニチャによって異なります`type`および`method`:。</span><span class="sxs-lookup"><span data-stu-id="9d184-308">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="9d184-309">場合の署名`type`の非表示の最初のパラメーターを明示的に含まれて`method`、開いているインスタンス メソッドを表すため、デリゲートといいます。</span><span class="sxs-lookup"><span data-stu-id="9d184-309">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="9d184-310">デリゲートが呼び出されると、最初の引数、引数リストでは、非表示のインスタンスのパラメーターに渡す`method`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-310">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="9d184-311">場合の署名`method`と`type`と一致 (つまり、すべてのパラメーター型は互換性のある)、デリゲートが null 参照に対して閉じられていると考えられます。</span><span class="sxs-lookup"><span data-stu-id="9d184-311">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="9d184-312">デリゲートを呼び出すことは、インスタンスでは null、特に便利にすることではないインスタンス メソッドを呼び出すことと似ています。</span><span class="sxs-lookup"><span data-stu-id="9d184-312">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="9d184-313">場合`firstArgument`null 参照と`method`は静的、結果は、デリゲート型のシグネチャに依存`type`および`method`:</span><span class="sxs-lookup"><span data-stu-id="9d184-313">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="9d184-314">場合の署名`method`と`type`一致 (つまり、すべてのパラメーター型は互換性のある)、オープンな静的メソッドを表すため、デリゲートといいます。</span><span class="sxs-lookup"><span data-stu-id="9d184-314">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="9d184-315">これは、静的メソッドの最も一般的なケースです。</span><span class="sxs-lookup"><span data-stu-id="9d184-315">This is the most common case for static methods.</span></span> <span data-ttu-id="9d184-316">この例では、わずかですが優れたパフォーマンスを使用して取得できます、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-316">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="9d184-317">場合の署名`type`の 2 番目のパラメーターで始まる`method`し、その他のパラメーター型に互換性が、デリゲートが null 参照に対して閉じられていると考えられます。</span><span class="sxs-lookup"><span data-stu-id="9d184-317">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="9d184-318">最初のパラメーターに null 参照が渡されたデリゲートが呼び出されると、`method`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-318">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-319">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-319">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-320">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-320">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-321">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-321">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="9d184-322">互換性のあるパラメーターの型と戻り値の型</span><span class="sxs-lookup"><span data-stu-id="9d184-322">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="9d184-323">パラメーターの型とデリゲートの戻り値の型はパラメーターの型とデリゲートが表すメソッドの戻り値の型と互換性のあるする必要があります。型を完全に一致する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-323">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-324">.NET Framework version 1.0 および 1.1 では、種類が完全に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-324">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="9d184-325">デリゲートのパラメーターにメソッドのパラメーターよりも限定的な型が指定された場合、両者のパラメーター間に型の互換性があると見なされます。これによって、デリゲートに渡された引数が、メソッドに対して安全に渡されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-325">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="9d184-326">同様に、メソッドの戻り値の型の制限がデリゲートの戻り値の型より多いと、メソッドの戻り値がデリゲートの戻り値の型に安全にキャストされることが保証されるため、デリゲートの戻り値の型とメソッドの戻り値の型には互換性があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-326">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="9d184-327">型のパラメーターを持つデリゲートなど、<xref:System.Collections.Hashtable>と戻り値の型<xref:System.Object>型のパラメーターを持つメソッドを表すことができる<xref:System.Object>型の値を返す<xref:System.Collections.Hashtable>です。</span><span class="sxs-lookup"><span data-stu-id="9d184-327">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="9d184-328">デリゲートを表すことができる方法を決定します。</span><span class="sxs-lookup"><span data-stu-id="9d184-328">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="9d184-329">このオーバー ロードが提供する柔軟性の検討するもう 1 つの便利な方法<xref:System.Delegate.CreateDelegate%2A>は任意の指定されたデリゲートがメソッドのシグネチャとメソッドの種類 (静的インスタンスではなく) の 4 つの異なる組み合わせを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-329">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="9d184-330">デリゲートの型について考えます`D`型の 1 つの引数を持つ`C`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-330">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="9d184-331">メソッドを以下に示します`D`表すことのできるすべての場合に一致する必要がありますので、戻り値の型を無視しています。</span><span class="sxs-lookup"><span data-stu-id="9d184-331">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="9d184-332">`D` 型の 1 つの引数を持つ任意のインスタンス メソッドを表すことができる`C`インスタンス メソッドが属するどのような種類に関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="9d184-332">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="9d184-333">ときに<xref:System.Delegate.CreateDelegate%2A>が呼び出されると、`firstArgument`型のインスタンスは、`method`が属している、得られたデリゲートをそのインスタンスを終了するとします。</span><span class="sxs-lookup"><span data-stu-id="9d184-333">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="9d184-334">(普通、`D`場合に null 参照を終了することも`firstArgument`null 参照です)。</span><span class="sxs-lookup"><span data-stu-id="9d184-334">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="9d184-335">`D` インスタンス メソッドを表すことができる`C`引数を持たない。</span><span class="sxs-lookup"><span data-stu-id="9d184-335">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="9d184-336">ときに<xref:System.Delegate.CreateDelegate%2A>が呼び出されると、 `firstArgument` null 参照です。</span><span class="sxs-lookup"><span data-stu-id="9d184-336">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="9d184-337">そのため、デリゲートを表し、開いているインスタンス メソッドでのインスタンス`C`が呼び出されるたびに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-337">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="9d184-338">`D` 型の 1 つの引数を受け取る静的メソッドを表すことができる`C`、し、メソッドは、任意の型に属することができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-338">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="9d184-339">ときに<xref:System.Delegate.CreateDelegate%2A>が呼び出されると、 `firstArgument` null 参照です。</span><span class="sxs-lookup"><span data-stu-id="9d184-339">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="9d184-340">そのため、デリゲートを表し、オープンな静的メソッドのインスタンス`C`が呼び出されるたびに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-340">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="9d184-341">`D` 型に属している静的メソッドを表すことができる`F`は型の 2 つの引数が`F`および種類`C`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-341">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="9d184-342">ときに<xref:System.Delegate.CreateDelegate%2A>が呼び出されると、`firstArgument`のインスタンスは、`F`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-342">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="9d184-343">得られたデリゲートは、上のインスタンスが閉じられている静的メソッドを表す`F`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-343">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="9d184-344">場合に注意してください。 場所`F`と`C`同じの型は、静的メソッドがその型の 2 つの引数。</span><span class="sxs-lookup"><span data-stu-id="9d184-344">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="9d184-345">(この場合、`D`場合は、null 参照で終了`firstArgument`null 参照です)。</span><span class="sxs-lookup"><span data-stu-id="9d184-345">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d184-346">このセクションには、3 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-346">This section contains three code examples.</span></span> <span data-ttu-id="9d184-347">最初の例では、作成できるデリゲートの 4 つの種類: インスタンス メソッドで静的メソッドよりオープンで開いているインスタンス メソッドを終了して、静的メソッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="9d184-347">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="9d184-348">2 番目のコード例では、互換性のあるパラメーターの型について説明し、型を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-348">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="9d184-349">3 番目のコード例では、単一のデリゲート型を定義し、デリゲート型をすべてのメソッドを表すことを示しています。</span><span class="sxs-lookup"><span data-stu-id="9d184-349">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="9d184-350">**例 1**</span><span class="sxs-lookup"><span data-stu-id="9d184-350">**Example 1**</span></span>  
  
 <span data-ttu-id="9d184-351">次のコード例は、のこのオーバー ロードを使用してデリゲートを作成することができます、4 つの方法を示します、<xref:System.Delegate.CreateDelegate%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9d184-351">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-352">2 つのオーバー ロードがあります、<xref:System.Delegate.CreateDelegate%2A>メソッドを指定する`firstArgument`と<xref:System.Reflection.MethodInfo>; をバインドするには、失敗した場合にスローするかどうかを指定できますいずれかと、もう一方は常にスローする点を除いて、機能は同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-352">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="9d184-353">このコード例では、両方のオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-353">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="9d184-354">例では、クラスを宣言して`C`静的メソッドを持つ`M2`とインスタンス メソッド`M1`、3 つのデリゲート型と:`D1`のインスタンスを受け取り`C`および文字列、`D2`文字列、およびを受け取る`D3`引数がありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-354">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="9d184-355">2 番目のクラスを名前付き`Example`デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-355">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="9d184-356">型のデリゲート`D2`のインスタンスを終了済み`C`、インスタンス メソッドの作成は`M1`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-356">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="9d184-357">呼び出されることのバインドのインスタンスを示すための異なる文字列と`C`は常に使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-357">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="9d184-358">型のデリゲート`D1`、開いているインスタンス メソッドを表す、インスタンス メソッドの作成は`M1`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-358">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="9d184-359">デリゲートが呼び出されたときに、インスタンスを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-359">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="9d184-360">型のデリゲート`D2`、オープンな静的メソッドを表す、静的なメソッドの作成は`M2`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-360">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="9d184-361">型のデリゲートを最後に、 `D3`、文字列を閉じ、静的メソッドの作成は`M2`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-361">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="9d184-362">メソッドは、連結文字列を使用することを表示します。</span><span class="sxs-lookup"><span data-stu-id="9d184-362">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="9d184-363">**例 2**</span><span class="sxs-lookup"><span data-stu-id="9d184-363">**Example 2**</span></span>  
  
 <span data-ttu-id="9d184-364">次のコード例では、パラメーターの型との互換性について説明し、型を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-364">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-365">このコード例では、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-365">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="9d184-366">その他の使用にオーバー ロードを受け取る<xref:System.Reflection.MethodInfo>と似ています。</span><span class="sxs-lookup"><span data-stu-id="9d184-366">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="9d184-367">このコード例は、という名前の基本クラスを定義`Base`という名前のクラスと`Derived`から派生した`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-367">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="9d184-368">派生クラスには、 `static` (`Shared` Visual Basic で) という名前のメソッド`MyMethod`型の 1 つのパラメーターを持つ`Base`と戻り値の型`Derived`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-368">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="9d184-369">このコード例もという名前のデリゲートを定義`Example`型の 1 つのパラメーターを持つ`Derived`と戻り値の型`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-369">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="9d184-370">このコード例で、デリゲートがという名前の`Example`、メソッドを表すために使用できる`MyMethod`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-370">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="9d184-371">メソッドは、ために、デリゲートにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="9d184-371">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="9d184-372">デリゲートのパラメーターの型 (`Derived`) のパラメーターの型より限定的な`MyMethod`(`Base`) できるように、安全にデリゲートの引数を渡すには常に、`MyMethod`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-372">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="9d184-373">戻り値の型`MyMethod`(`Derived`) デリゲートのパラメーターの型より限定的な (`Base`) デリゲートの戻り値の型をメソッドの戻り値の型をキャストしても安全では常にするようにします。</span><span class="sxs-lookup"><span data-stu-id="9d184-373">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="9d184-374">コード例は、出力を生成されません。</span><span class="sxs-lookup"><span data-stu-id="9d184-374">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="9d184-375">**例 3**</span><span class="sxs-lookup"><span data-stu-id="9d184-375">**Example 3**</span></span>  
  
 <span data-ttu-id="9d184-376">次のコード例を示しています、すべてのメソッドを使用して、単一のデリゲート型を表すことができます、<xref:System.Delegate.CreateDelegate%2A>デリゲートを作成するメソッド。</span><span class="sxs-lookup"><span data-stu-id="9d184-376">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-377">2 つのオーバー ロードがあります、<xref:System.Delegate.CreateDelegate%2A>メソッドを指定する`firstArgument`と<xref:System.Reflection.MethodInfo>; をバインドするには、失敗した場合にスローするかどうかを指定できますいずれかと、もう一方は常にスローする点を除いて、機能は同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-377">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="9d184-378">このコード例では、両方のオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-378">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="9d184-379">このコード例は、2 つのクラスを定義`C`と`F`とデリゲート型`D`型の 1 つの引数を持つ`C`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-379">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="9d184-380">クラスには対応する静的メソッドとインスタンス`M1`、 `M3`、および`M4`、およびクラス`C`はインスタンス メソッドもあります`M2`引数を持たない。</span><span class="sxs-lookup"><span data-stu-id="9d184-380">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="9d184-381">3 番目のクラスを名前付き`Example`デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-381">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="9d184-382">デリゲートがインスタンス メソッドで作成された`M1`型の`C`および種類`F`; それぞれの型のインスタンス上の各が閉じられます。</span><span class="sxs-lookup"><span data-stu-id="9d184-382">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="9d184-383">メソッド`M1`型の`C`が表示されます、`ID`引数およびバインドされたインスタンスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9d184-383">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="9d184-384">メソッドのデリゲートを作成`M2`型の`C`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-384">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="9d184-385">これは、デリゲートの引数が非表示の最初の引数でインスタンス メソッドを表しますが、開いているインスタンス デリゲートです。</span><span class="sxs-lookup"><span data-stu-id="9d184-385">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="9d184-386">メソッドには、その他の引数がありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-386">The method has no other arguments.</span></span> <span data-ttu-id="9d184-387">静的メソッドの場合と同様に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-387">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="9d184-388">静的メソッドに対してデリゲートを作成`M3`型の`C`および種類`F`です。 これらは、オープンな静的デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9d184-388">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="9d184-389">静的メソッドのデリゲートを作成する最後に、`M4`型の`C`および種類`F`; 各メソッドには、最初の引数として宣言する型と型のインスタンスが指定されるため、デリゲートは、第 1 引数経由で閉じられます.</span><span class="sxs-lookup"><span data-stu-id="9d184-389">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="9d184-390">メソッド`M4`型の`C`が表示されます、`ID`引数およびバインドされたインスタンスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9d184-390">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-391">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-391">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-392">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-392">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-393">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-393">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-394">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-394">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-395">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-395">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-396">-or-  <paramref name="method" /> cannot be bound.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-396">-or-  <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="9d184-397">-or-  <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-397">-or-  <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="9d184-398">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-398">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-399">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-399">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-400">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-400">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-401">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-401">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-402">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-402">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-403">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-403">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9d184-404">The class instance on which <c>method</c> is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-404">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-405">The name of the instance method that the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-405">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-406">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-406">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-407">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-407">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-408">このメソッドのデリゲートのインスタンス メソッドだけを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-408">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="9d184-409">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-409">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="9d184-410">このメソッドはオーバー ロードを呼び出すことと同等、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>メソッド オーバー ロードを指定する`false`の`ignoreCase`と`true`の`throwOnBindFailure`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-410">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-411">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-411">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-412">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-412">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-413">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-413">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-414">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-414">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-415">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-415">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-416">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-416">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-417">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-417">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-418">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-418">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-419">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-419">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-420">-or-  <paramref name="method" /> is not an instance method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-420">-or-  <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="9d184-421">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-421">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-422">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-422">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-423">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-423">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-424">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-424">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-425">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-425">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-426">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-426">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-427">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-427">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="9d184-428">
            <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-428">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-429">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-429">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-430">A delegate of the specified type to represent the specified static method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-430">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-431">このメソッドのオーバー ロードがオープンの静的メソッドのデリゲートを作成し、インスタンス メソッドのデリゲートを開くことができます、つまり、メソッドのインスタンスの非表示の最初の引数を公開するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="9d184-431">This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="9d184-432">詳細についてより一般的なを参照してください。<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>メソッド オーバー ロードを使用すると、インスタンスのすべてのオープンかクローズ デリゲートの組み合わせを作成または静的メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9d184-432">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-433">このメソッドのオーバー ロードする必要があるために、使用、デリゲートは、最初の引数を終了していないときにその場合は多少高速です。</span><span class="sxs-lookup"><span data-stu-id="9d184-433">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-434">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-434">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-435">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-435">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-436">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-436">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="9d184-437">互換性のあるパラメーターの型と戻り値の型</span><span class="sxs-lookup"><span data-stu-id="9d184-437">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="9d184-438">パラメーターの型とデリゲートの戻り値の型はパラメーターの型とデリゲートが表すメソッドの戻り値の型と互換性のあるする必要があります。型を完全に一致する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-438">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-439">.NET Framework version 1.0 および 1.1 では、種類が完全に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-439">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="9d184-440">デリゲートのパラメーターにメソッドのパラメーターよりも限定的な型が指定された場合、両者のパラメーター間に型の互換性があると見なされます。これによって、デリゲートに渡された引数が、メソッドに対して安全に渡されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-440">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="9d184-441">同様に、メソッドの戻り値の型の制限がデリゲートの戻り値の型より多いと、メソッドの戻り値がデリゲートの戻り値の型に安全にキャストされることが保証されるため、デリゲートの戻り値の型とメソッドの戻り値の型には互換性があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-441">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="9d184-442">型のパラメーターを持つデリゲートなど、<xref:System.Collections.Hashtable>と戻り値の型<xref:System.Object>型のパラメーターを持つメソッドを表すことができる<xref:System.Object>型の値を返す<xref:System.Collections.Hashtable>です。</span><span class="sxs-lookup"><span data-stu-id="9d184-442">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d184-443">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-443">This section contains two code examples.</span></span> <span data-ttu-id="9d184-444">最初の例では、このメソッドのオーバー ロードを作成するデリゲートの 2 つの種類: インスタンス メソッドで開き、静的メソッドを開きます。</span><span class="sxs-lookup"><span data-stu-id="9d184-444">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="9d184-445">2 番目のコード例では、互換性のあるパラメーターの型について説明し、型を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-445">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="9d184-446">**例 1**</span><span class="sxs-lookup"><span data-stu-id="9d184-446">**Example 1**</span></span>  
  
 <span data-ttu-id="9d184-447">次のコード例は、のこのオーバー ロードを使用してデリゲートを作成する 2 つの方法を示します、<xref:System.Delegate.CreateDelegate%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9d184-447">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-448">2 つのオーバー ロードがあります、<xref:System.Delegate.CreateDelegate%2A>メソッドを指定する、<xref:System.Reflection.MethodInfo>最初の引数されませんが、いずれか、バインドするには、失敗した場合にスローするかどうかを指定することができ、もう一方は常にスローする点を除いて、機能は同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-448">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="9d184-449">このコード例では、両方のオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-449">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="9d184-450">例では、クラスを宣言して`C`静的メソッドを使用して`M2`とインスタンス メソッド`M1`、2 つのデリゲート型と:`D1`のインスタンスを受け取り`C`および文字列、および`D2`文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-450">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="9d184-451">2 番目のクラスを名前付き`Example`デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-451">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="9d184-452">型のデリゲート`D1`、開いているインスタンス メソッドを表す、インスタンス メソッドの作成は`M1`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-452">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="9d184-453">デリゲートが呼び出されたときに、インスタンスを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-453">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="9d184-454">型のデリゲート`D2`、オープンな静的メソッドを表す、静的なメソッドの作成は`M2`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-454">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="9d184-455">**例 2**</span><span class="sxs-lookup"><span data-stu-id="9d184-455">**Example 2**</span></span>  
  
 <span data-ttu-id="9d184-456">次のコード例では、パラメーターの型との互換性について説明し、型を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-456">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-457">このコード例では、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-457">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="9d184-458">その他の使用にオーバー ロードを受け取る<xref:System.Reflection.MethodInfo>と似ています。</span><span class="sxs-lookup"><span data-stu-id="9d184-458">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="9d184-459">このコード例は、という名前の基本クラスを定義`Base`という名前のクラスと`Derived`から派生した`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-459">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="9d184-460">派生クラスには、 `static` (`Shared` Visual Basic で) という名前のメソッド`MyMethod`型の 1 つのパラメーターを持つ`Base`と戻り値の型`Derived`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-460">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="9d184-461">このコード例もという名前のデリゲートを定義`Example`型の 1 つのパラメーターを持つ`Derived`と戻り値の型`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-461">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="9d184-462">このコード例で、デリゲートがという名前の`Example`、メソッドを表すために使用できる`MyMethod`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-462">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="9d184-463">メソッドは、ために、デリゲートにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="9d184-463">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="9d184-464">デリゲートのパラメーターの型 (`Derived`) のパラメーターの型より限定的な`MyMethod`(`Base`) できるように、安全にデリゲートの引数を渡すには常に、`MyMethod`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-464">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="9d184-465">戻り値の型`MyMethod`(`Derived`) デリゲートのパラメーターの型より限定的な (`Base`) デリゲートの戻り値の型をメソッドの戻り値の型をキャストしても安全では常にするようにします。</span><span class="sxs-lookup"><span data-stu-id="9d184-465">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="9d184-466">コード例は、出力を生成されません。</span><span class="sxs-lookup"><span data-stu-id="9d184-466">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-467">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-467">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-468">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-468">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-469">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-469">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-470">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-470">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-471">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-471">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-472">-or-  <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-472">-or-  <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="9d184-473">-or-  <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-473">-or-  <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="9d184-474">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-474">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-475">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-475">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-476">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-476">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-477">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-477">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-478">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-478">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-479">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-479">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9d184-480">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-480">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-481">The name of the static method that the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-481">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-482">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-482">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-483">A delegate of the specified type that represents the specified static method of the specified class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-483">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-484">このメソッドは、静的メソッドのみのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-484">This method creates delegates for static methods only.</span></span> <span data-ttu-id="9d184-485">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-485">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="9d184-486">このメソッドはオーバー ロードを呼び出すことと同等、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>メソッド オーバー ロードを指定する`false`の`ignoreCase`と`true`の`throwOnBindFailure`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-486">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-487">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-487">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-488">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-488">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-489">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-489">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-490">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-490">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-491">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-491">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-492">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-492">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-493">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-493">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-494">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-494">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-495">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-495">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-496">-or-  <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-496">-or-  <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-497">-or-  <paramref name="target" /> is an open generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-497">-or-  <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="9d184-498">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-498">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="9d184-499">-or-  <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-499">-or-  <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="9d184-500">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-500">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-501">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-501">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-502">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-502">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-503">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-503">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-504">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-504">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-505">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-505">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="9d184-506">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-506">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          </span>
          <span data-ttu-id="9d184-507">For instance methods, it must be compatible with the instance type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-507">For instance methods, it must be compatible with the instance type.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-508">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-508">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="9d184-509">
            <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-509">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-510">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-510">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-511">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-511">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-512">このメソッドのオーバー ロードおよび<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29>メソッド オーバー ロードを常にバインドするには、失敗した場合にスローすると、デリゲートを作成する最も柔軟な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="9d184-512">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="9d184-513">最初の引数の有無、またはインスタンス メソッドのいずれかの静的デリゲートを作成するのにには、それらを使用できます。</span><span class="sxs-lookup"><span data-stu-id="9d184-513">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-514">最初の引数を指定しない場合は使用して、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>パフォーマンス向上のためのメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-514">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="9d184-515">デリゲート型と、メソッドには、互換性のある戻り値の型がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-515">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="9d184-516">戻り値の型は、`method`の戻り値の型に割り当てることがあります`type`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-516">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="9d184-517">場合`firstArgument`が指定するに渡される`method`たびに、デリゲートが呼び出されます。`firstArgument`デリゲートにバインドすることと、最初の引数を終了するデリゲートを言います。</span><span class="sxs-lookup"><span data-stu-id="9d184-517">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="9d184-518">場合`method`は`static`(`Shared` Visual Basic で) では、引数のデリゲートを呼び出すときに提供される一覧に場合は、先頭を除くすべてのパラメーターが含まれます`method`し、インスタンス メソッドでは、`firstArgument`非表示のインスタンスに渡されるパラメーター (によって表される`this`C# の場合、または`Me`Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="9d184-518">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9d184-519">場合`firstArgument`が指定されている最初のパラメーターの`method`、参照型である必要がありますと`firstArgument`型と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-519">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9d184-520">場合`method`は`static`(`Shared` Visual Basic で) し、その最初のパラメーターの型は<xref:System.Object>または<xref:System.ValueType>、し`firstArgument`値型であることができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-520">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="9d184-521">ここでは`firstArgument`が自動的にボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-521">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="9d184-522">C# または Visual Basic の関数を呼び出す場合は、自動的なボックス化は他の引数がある場合は発生しません。</span><span class="sxs-lookup"><span data-stu-id="9d184-522">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="9d184-523">場合`firstArgument`null 参照と`method`インスタンス メソッドでは、結果は、デリゲート型のシグニチャによって異なります`type`および`method`:。</span><span class="sxs-lookup"><span data-stu-id="9d184-523">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="9d184-524">場合の署名`type`の非表示の最初のパラメーターを明示的に含まれて`method`、開いているインスタンス メソッドを表すため、デリゲートといいます。</span><span class="sxs-lookup"><span data-stu-id="9d184-524">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="9d184-525">デリゲートが呼び出されると、最初の引数、引数リストでは、非表示のインスタンスのパラメーターに渡す`method`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-525">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="9d184-526">場合の署名`method`と`type`と一致 (つまり、すべてのパラメーター型は互換性のある)、デリゲートが null 参照に対して閉じられていると考えられます。</span><span class="sxs-lookup"><span data-stu-id="9d184-526">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="9d184-527">デリゲートを呼び出すことは、インスタンスでは null、特に便利にすることではないインスタンス メソッドを呼び出すことと似ています。</span><span class="sxs-lookup"><span data-stu-id="9d184-527">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="9d184-528">場合`firstArgument`null 参照と`method`は静的、結果は、デリゲート型のシグネチャに依存`type`および`method`:</span><span class="sxs-lookup"><span data-stu-id="9d184-528">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="9d184-529">場合の署名`method`と`type`一致 (つまり、すべてのパラメーター型は互換性のある)、オープンな静的メソッドを表すため、デリゲートといいます。</span><span class="sxs-lookup"><span data-stu-id="9d184-529">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="9d184-530">これは、静的メソッドの最も一般的なケースです。</span><span class="sxs-lookup"><span data-stu-id="9d184-530">This is the most common case for static methods.</span></span> <span data-ttu-id="9d184-531">この例では、わずかですが優れたパフォーマンスを使用して取得できます、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-531">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="9d184-532">場合の署名`type`の 2 番目のパラメーターで始まる`method`し、その他のパラメーター型に互換性が、デリゲートが null 参照に対して閉じられていると考えられます。</span><span class="sxs-lookup"><span data-stu-id="9d184-532">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="9d184-533">最初のパラメーターに null 参照が渡されたデリゲートが呼び出されると、`method`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-533">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-534">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-534">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-535">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-535">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-536">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-536">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="9d184-537">互換性のあるパラメーターの型と戻り値の型</span><span class="sxs-lookup"><span data-stu-id="9d184-537">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="9d184-538">パラメーターの型とデリゲートの戻り値の型はパラメーターの型とデリゲートが表すメソッドの戻り値の型と互換性のあるする必要があります。型を完全に一致する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-538">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-539">.NET Framework version 1.0 および 1.1 での型が正確に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-539">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="9d184-540">デリゲートのパラメーターにメソッドのパラメーターよりも限定的な型が指定された場合、両者のパラメーター間に型の互換性があると見なされます。これによって、デリゲートに渡された引数が、メソッドに対して安全に渡されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-540">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="9d184-541">同様に、メソッドの戻り値の型の制限がデリゲートの戻り値の型より多いと、メソッドの戻り値がデリゲートの戻り値の型に安全にキャストされることが保証されるため、デリゲートの戻り値の型とメソッドの戻り値の型には互換性があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-541">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="9d184-542">型のパラメーターを持つデリゲートなど、<xref:System.Collections.Hashtable>と戻り値の型<xref:System.Object>型のパラメーターを持つメソッドを表すことができる<xref:System.Object>型の値を返す<xref:System.Collections.Hashtable>です。</span><span class="sxs-lookup"><span data-stu-id="9d184-542">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="9d184-543">デリゲートを表すことができる方法を決定します。</span><span class="sxs-lookup"><span data-stu-id="9d184-543">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="9d184-544">このオーバー ロードが提供する柔軟性の検討するもう 1 つの便利な方法<xref:System.Delegate.CreateDelegate%2A>は任意の指定されたデリゲートがメソッドのシグネチャとメソッドの種類 (静的インスタンスではなく) の 4 つの異なる組み合わせを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-544">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="9d184-545">デリゲートの型について考えます`D`型の 1 つの引数を持つ`C`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-545">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="9d184-546">メソッドを以下に示します`D`表すことのできるすべての場合に一致する必要がありますので、戻り値の型を無視しています。</span><span class="sxs-lookup"><span data-stu-id="9d184-546">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="9d184-547">`D` 型の 1 つの引数を持つ任意のインスタンス メソッドを表すことができる`C`インスタンス メソッドが属するどのような種類に関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="9d184-547">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="9d184-548">ときに<xref:System.Delegate.CreateDelegate%2A>が呼び出されると、`firstArgument`型のインスタンスは、`method`が属している、得られたデリゲートをそのインスタンスを終了するとします。</span><span class="sxs-lookup"><span data-stu-id="9d184-548">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="9d184-549">(普通、`D`場合に null 参照を終了することも`firstArgument`は`null`)。</span><span class="sxs-lookup"><span data-stu-id="9d184-549">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="9d184-550">`D` インスタンス メソッドを表すことができる`C`引数を持たない。</span><span class="sxs-lookup"><span data-stu-id="9d184-550">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="9d184-551">ときに<xref:System.Delegate.CreateDelegate%2A>が呼び出されると、 `firstArgument` null 参照です。</span><span class="sxs-lookup"><span data-stu-id="9d184-551">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="9d184-552">そのため、デリゲートを表し、開いているインスタンス メソッドでのインスタンス`C`が呼び出されるたびに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-552">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="9d184-553">`D` 型の 1 つの引数を受け取る静的メソッドを表すことができる`C`、し、メソッドは、任意の型に属することができます。</span><span class="sxs-lookup"><span data-stu-id="9d184-553">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="9d184-554">ときに<xref:System.Delegate.CreateDelegate%2A>が呼び出されると、 `firstArgument` null 参照です。</span><span class="sxs-lookup"><span data-stu-id="9d184-554">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="9d184-555">そのため、デリゲートを表し、オープンな静的メソッドのインスタンス`C`が呼び出されるたびに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-555">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="9d184-556">`D` 型に属している静的メソッドを表すことができる`F`は型の 2 つの引数が`F`および種類`C`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-556">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="9d184-557">ときに<xref:System.Delegate.CreateDelegate%2A>が呼び出されると、`firstArgument`のインスタンスは、`F`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-557">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="9d184-558">得られたデリゲートは、上のインスタンスが閉じられている静的メソッドを表す`F`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-558">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="9d184-559">場合に注意してください。 場所`F`と`C`同じの型は、静的メソッドがその型の 2 つの引数。</span><span class="sxs-lookup"><span data-stu-id="9d184-559">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="9d184-560">(この場合、`D`場合は、null 参照で終了`firstArgument`は`null`)。</span><span class="sxs-lookup"><span data-stu-id="9d184-560">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d184-561">このセクションには、3 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-561">This section contains three code examples.</span></span> <span data-ttu-id="9d184-562">最初の例では、作成できるデリゲートの 4 つの種類: インスタンス メソッドで静的メソッドよりオープンで開いているインスタンス メソッドを終了して、静的メソッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="9d184-562">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="9d184-563">2 番目のコード例では、互換性のあるパラメーターの型について説明し、型を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-563">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="9d184-564">3 番目のコード例では、単一のデリゲート型を定義し、デリゲート型をすべてのメソッドを表すことを示しています。</span><span class="sxs-lookup"><span data-stu-id="9d184-564">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="9d184-565">**例 1**</span><span class="sxs-lookup"><span data-stu-id="9d184-565">**Example 1**</span></span>  
  
 <span data-ttu-id="9d184-566">次のコード例は、のこのオーバー ロードを使用してデリゲートを作成することができます、4 つの方法を示します、<xref:System.Delegate.CreateDelegate%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="9d184-566">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-567">2 つのオーバー ロードがあります、<xref:System.Delegate.CreateDelegate%2A>メソッドを指定する`firstArgument`と<xref:System.Reflection.MethodInfo>; をバインドするには、失敗した場合にスローするかどうかを指定できますいずれかと、もう一方は常にスローする点を除いて、機能は同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-567">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="9d184-568">このコード例では、両方のオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-568">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="9d184-569">例では、クラスを宣言して`C`静的メソッドを持つ`M2`とインスタンス メソッド`M1`、3 つのデリゲート型と:`D1`のインスタンスを受け取り`C`および文字列、`D2`文字列、およびを受け取る`D3`引数がありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-569">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="9d184-570">2 番目のクラスを名前付き`Example`デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-570">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="9d184-571">型のデリゲート`D2`のインスタンスを終了済み`C`、インスタンス メソッドの作成は`M1`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-571">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="9d184-572">呼び出されることのバインドのインスタンスを示すための異なる文字列と`C`は常に使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-572">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="9d184-573">型のデリゲート`D1`、開いているインスタンス メソッドを表す、インスタンス メソッドの作成は`M1`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-573">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="9d184-574">デリゲートが呼び出されたときに、インスタンスを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-574">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="9d184-575">型のデリゲート`D2`、オープンな静的メソッドを表す、静的なメソッドの作成は`M2`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-575">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="9d184-576">型のデリゲートを最後に、 `D3`、文字列を閉じ、静的メソッドの作成は`M2`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-576">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="9d184-577">メソッドは、連結文字列を使用することを表示します。</span><span class="sxs-lookup"><span data-stu-id="9d184-577">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="9d184-578">**例 2**</span><span class="sxs-lookup"><span data-stu-id="9d184-578">**Example 2**</span></span>  
  
 <span data-ttu-id="9d184-579">次のコード例では、パラメーターの型との互換性について説明し、型を返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-579">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-580">このコード例では、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9d184-580">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="9d184-581">その他の使用にオーバー ロードを受け取る<xref:System.Reflection.MethodInfo>と似ています。</span><span class="sxs-lookup"><span data-stu-id="9d184-581">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="9d184-582">このコード例は、という名前の基本クラスを定義`Base`という名前のクラスと`Derived`から派生した`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-582">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="9d184-583">派生クラスには、 `static` (`Shared` Visual Basic で) という名前のメソッド`MyMethod`型の 1 つのパラメーターを持つ`Base`と戻り値の型`Derived`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-583">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="9d184-584">このコード例もという名前のデリゲートを定義`Example`型の 1 つのパラメーターを持つ`Derived`と戻り値の型`Base`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-584">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="9d184-585">このコード例で、デリゲートがという名前の`Example`、メソッドを表すために使用できる`MyMethod`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-585">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="9d184-586">メソッドは、ために、デリゲートにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="9d184-586">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="9d184-587">デリゲートのパラメーターの型 (`Derived`) のパラメーターの型より限定的な`MyMethod`(`Base`) できるように、安全にデリゲートの引数を渡すには常に、`MyMethod`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-587">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="9d184-588">戻り値の型`MyMethod`(`Derived`) デリゲートのパラメーターの型より限定的な (`Base`) デリゲートの戻り値の型をメソッドの戻り値の型をキャストしても安全では常にするようにします。</span><span class="sxs-lookup"><span data-stu-id="9d184-588">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="9d184-589">コード例は、出力を生成されません。</span><span class="sxs-lookup"><span data-stu-id="9d184-589">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="9d184-590">**例 3**</span><span class="sxs-lookup"><span data-stu-id="9d184-590">**Example 3**</span></span>  
  
 <span data-ttu-id="9d184-591">次のコード例では、単一のデリゲート型を表すことができるすべてのメソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="9d184-591">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-592">2 つのオーバー ロードがあります、<xref:System.Delegate.CreateDelegate%2A>メソッドを指定する`firstArgument`と<xref:System.Reflection.MethodInfo>; をバインドするには、失敗した場合にスローするかどうかを指定できますいずれかと、もう一方は常にスローする点を除いて、機能は同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-592">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="9d184-593">このコード例では、両方のオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="9d184-593">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="9d184-594">このコード例は、2 つのクラスを定義`C`と`F`とデリゲート型`D`型の 1 つの引数を持つ`C`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-594">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="9d184-595">クラスには対応する静的メソッドとインスタンス`M1`、 `M3`、および`M4`、およびクラス`C`はインスタンス メソッドもあります`M2`引数を持たない。</span><span class="sxs-lookup"><span data-stu-id="9d184-595">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="9d184-596">3 番目のクラスを名前付き`Example`デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="9d184-596">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="9d184-597">デリゲートがインスタンス メソッドで作成された`M1`型の`C`および種類`F`; それぞれの型のインスタンス上の各が閉じられます。</span><span class="sxs-lookup"><span data-stu-id="9d184-597">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="9d184-598">メソッド`M1`型の`C`が表示されます、`ID`引数およびバインドされたインスタンスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9d184-598">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="9d184-599">メソッドのデリゲートを作成`M2`型の`C`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-599">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="9d184-600">これは、デリゲートの引数が非表示の最初の引数でインスタンス メソッドを表しますが、開いているインスタンス デリゲートです。</span><span class="sxs-lookup"><span data-stu-id="9d184-600">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="9d184-601">メソッドには、その他の引数がありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-601">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="9d184-602">静的メソッドに対してデリゲートを作成`M3`型の`C`および種類`F`です。 これらは、オープンな静的デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9d184-602">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="9d184-603">静的メソッドのデリゲートを作成する最後に、`M4`型の`C`および種類`F`; 各メソッドには、最初の引数として宣言する型と型のインスタンスが指定されるため、デリゲートは、第 1 引数経由で閉じられます.</span><span class="sxs-lookup"><span data-stu-id="9d184-603">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="9d184-604">メソッド`M4`型の`C`が表示されます、`ID`引数およびバインドされたインスタンスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="9d184-604">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-605">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-605">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-606">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-606">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-607">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-607">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-608">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-608">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-609">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-609">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-610">-or-  <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-610">-or-  <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="9d184-611">-or-  <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-611">-or-  <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="9d184-612">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-612">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-613">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-613">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-614">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-614">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-615">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-615">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-616">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-616">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-617">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-617">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9d184-618">The class instance on which <c>method</c> is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-618">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-619">The name of the instance method that the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-619">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="9d184-620">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-620">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-621">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-621">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-622">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-622">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-623">このメソッドのデリゲートのインスタンス メソッドだけを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-623">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="9d184-624">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-624">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="9d184-625">このメソッドはオーバー ロードを呼び出すことと同等、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>メソッド オーバー ロードを指定する`true`の`throwOnBindFailure`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-625">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-626">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-626">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-627">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-627">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-628">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-628">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-629">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-629">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-630">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-630">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-631">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-631">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-632">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-632">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-633">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-633">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-634">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-634">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-635">-or-  <paramref name="method" /> is not an instance method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-635">-or-  <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="9d184-636">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-636">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-637">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-637">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-638">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-638">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-639">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-639">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-640">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-640">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-641">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-641">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9d184-642">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-642">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-643">The name of the static method that the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-643">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="9d184-644">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-644">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-645">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-645">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-646">A delegate of the specified type that represents the specified static method of the specified class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-646">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-647">このメソッドは、静的メソッドのみのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-647">This method creates delegates for static methods only.</span></span> <span data-ttu-id="9d184-648">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-648">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="9d184-649">このメソッドはオーバー ロードを呼び出すことと同等、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>メソッド オーバー ロードを指定する`true`の`throwOnBindFailure`します。</span><span class="sxs-lookup"><span data-stu-id="9d184-649">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-650">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-650">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-651">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-651">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-652">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-652">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-653">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-653">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-654">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-654">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-655">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-655">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-656">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-656">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-657">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-657">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-658">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-658">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-659">-or-  <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-659">-or-  <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-660">-or-  <paramref name="target" /> is an open generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-660">-or-  <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="9d184-661">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-661">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="9d184-662">-or-  <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-662">-or-  <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="9d184-663">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-663">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-664">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-664">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-665">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-665">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-666">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-666">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-667">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-667">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-668">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-668">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9d184-669">The class instance on which <c>method</c> is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-669">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-670">The name of the instance method that the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-670">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="9d184-671">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-671">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="9d184-672">
            <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-672">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-673">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-673">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-674">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-674">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-675">このメソッドのデリゲートのインスタンス メソッドだけを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-675">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="9d184-676">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-676">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-677">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-677">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-678">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-678">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-679">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-679">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-680">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-680">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-681">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-681">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-682">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-682">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-683">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-683">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-684">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-684">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-685">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-685">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-686">-or-  <paramref name="method" /> is not an instance method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-686">-or-  <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="9d184-687">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-687">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-688">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-688">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-689">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-689">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-690">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-690">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-691">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-691">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9d184-692">The <see cref="T:System.Type" /> of delegate to create.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-692">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9d184-693">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-693">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="9d184-694">The name of the static method that the delegate is to represent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-694">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="9d184-695">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-695">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="9d184-696">
            <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-696">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-697">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-697">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-698">A delegate of the specified type that represents the specified static method of the specified class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-698">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-699">このメソッドは、静的メソッドのみのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="9d184-699">This method creates delegates for static methods only.</span></span> <span data-ttu-id="9d184-700">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-700">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9d184-701">以降で、 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]、このメソッドは、非パブリック メソッドを呼び出し元が許可されている場合にアクセスするために使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>フラグし、許可セット、またはサブセットに非パブリック メソッドの許可セットが、呼び出し元に制限されている場合そのします。</span><span class="sxs-lookup"><span data-stu-id="9d184-701">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9d184-702">(を参照してください[リフレクションに関するセキュリティの考慮事項](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md))。</span><span class="sxs-lookup"><span data-stu-id="9d184-702">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9d184-703">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-703">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9d184-704">
            <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-704">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-705">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-705">-or-  <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-706">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-706">-or-  <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-707">
            <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-707">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="9d184-708">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-708">-or-  <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-709">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-709">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="9d184-710">-or-  <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-710">-or-  <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="9d184-711">-or-  <paramref name="target" /> is an open generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-711">-or-  <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="9d184-712">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-712">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="9d184-713">-or-  <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-713">-or-  <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="9d184-714">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-714">-or-  <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9d184-715">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-715">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9d184-716">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-716">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-717">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-717">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-718">関連する列挙値:<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-718">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="9d184-719">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-719">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="9d184-720">-or-  <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-720">-or-  <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-721">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-721">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-722">The object returned by the method represented by the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-722">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-723">このメソッドは、<xref:System.Delegate.DynamicInvokeImpl%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9d184-723">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9d184-724">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-724">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="9d184-725">-or-  The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-725">-or-  The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-726">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-726">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9d184-727">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-727">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-728">-or-  One of the encapsulated methods throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-728">-or-  One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-729">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-729">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-730">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-730">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="9d184-731">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-731">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="9d184-732">-or-  <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-732">-or-  <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-733">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-733">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-734">The object returned by the method represented by the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-734">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-735">このメソッドは、<xref:System.Delegate.DynamicInvoke%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="9d184-735">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9d184-736">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-736">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="9d184-737">-or-  The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-737">-or-  The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-738">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-738">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9d184-739">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-739">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9d184-740">-or-  One of the encapsulated methods throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-740">-or-  One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-741">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-741">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-742">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-742">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="9d184-743">The object to compare with the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-743">The object to compare with the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-744">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-744">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-745">
            <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-745">
              <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-746">同じ型の 2 つのデリゲート場合とは見なされません等しい。</span><span class="sxs-lookup"><span data-stu-id="9d184-746">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9d184-747">.NET framework version 1.0 および 1.1 では、2 つのデリゲートが等しいと見なされる場合は、ターゲット、メソッド、および呼び出しリストが等しいか、異なる型のデリゲート場合でもです。</span><span class="sxs-lookup"><span data-stu-id="9d184-747">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="9d184-748">メソッドとターゲット」は、次のように等しいかどうか比較されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-748">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="9d184-749">比較対象となる 2 つの方法では、どちらも静的で、同じクラス上の同じメソッド場合、メソッドは、等しいと見なされます、ターゲットも等しいと見なさです。</span><span class="sxs-lookup"><span data-stu-id="9d184-749">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="9d184-750">比較対象となる 2 つの方法では、インスタンス メソッドし、同じオブジェクトに対して同じメソッドである場合、メソッドは、等しいと見なされますターゲットも等しいと見なさです。</span><span class="sxs-lookup"><span data-stu-id="9d184-750">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="9d184-751">それ以外の場合、メソッドと同じと見なされないやターゲットもいないと見なされますと同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-751">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="9d184-752">2 つの呼び出しリストは同じ順序が存在し、2 つの一覧から対応する要素が同じメソッドとターゲットを表す場合にのみ、同一と見なされます。</span><span class="sxs-lookup"><span data-stu-id="9d184-752">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9d184-753">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-753">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-754">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-754">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-755">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-755">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9d184-756">Returns a hash code for the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-756">Returns a hash code for the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-757">A hash code for the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-757">A hash code for the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-758">このメソッドの戻り値は、2 つの理由の永続化されません必要があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-758">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="9d184-759">最初に、古いハッシュ関数からの値が役に立ちませんレンダリングより優れた分布を生成するクラスのハッシュ関数を変更する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9d184-759">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="9d184-760">次に、このクラスの既定の実装では、同じ値を別のインスタンスによって返されることは限りません。</span><span class="sxs-lookup"><span data-stu-id="9d184-760">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-761">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-761">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-762">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-762">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9d184-763">Returns the invocation list of the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-763">Returns the invocation list of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-764">An array of delegates representing the invocation list of the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-764">An array of delegates representing the invocation list of the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-765">配列内の各デリゲートは、1 つのメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="9d184-765">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="9d184-766">配列内のデリゲートの順序は、現在のデリゲートがそれらのデリゲートが表すメソッドを呼び出すが、同じ順序です。</span><span class="sxs-lookup"><span data-stu-id="9d184-766">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9d184-767">次の例は、3 つのメソッドをデリゲートに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="9d184-767">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="9d184-768">呼び出して、 <xref:System.Delegate.GetInvocationList%2A> "File"に、デリゲートを逆の順序で実行して、名前の部分文字列を含めないでくださいメソッドを実行する、デリゲートに割り当てられているメソッドの合計数を取得します。</span><span class="sxs-lookup"><span data-stu-id="9d184-768">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-769">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-769">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-770">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-770">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9d184-771">Gets the static method represented by the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-771">Gets the static method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-772">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-772">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-773">このメソッドは、現在のデリゲートは、静的メソッドを表す場合にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-773">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9d184-774">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-774">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-775">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-775">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-776">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-776">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="9d184-777">Not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-777">Not supported.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="9d184-778">Not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-778">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-779">Not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-779">Not supported.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9d184-780">This method is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-780">This method is not supported.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="9d184-781">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-781">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="9d184-782">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-782">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9d184-783">Gets the method represented by the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-783">Gets the method represented by the delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9d184-784">A<see cref="T:System.Reflection.MethodInfo" />デリゲートによって表されるメソッドを記述します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-784">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9d184-785">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-785">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-786">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-786">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-787">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-787">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="9d184-788">The first delegate to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-788">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="9d184-789">The second delegate to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-789">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-790">Determines whether the specified delegates are equal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-790">Determines whether the specified delegates are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-791">
            <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-791">
              <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-792">同じターゲット、メソッド、および呼び出しリストを持つ同じ型の 2 つのデリゲートは、等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="9d184-792">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="9d184-793">同じ型の 2 つのデリゲート場合とは見なされません等しい。</span><span class="sxs-lookup"><span data-stu-id="9d184-793">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9d184-794">.NET framework version 1.0 および 1.1 では、2 つのデリゲートが等しいと見なされる場合は、ターゲット、メソッド、および呼び出しリストが等しいか、異なる型のデリゲート場合でもです。</span><span class="sxs-lookup"><span data-stu-id="9d184-794">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="9d184-795">メソッドとターゲット」は、次のように等しいかどうか比較されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-795">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="9d184-796">比較対象となる 2 つの方法では、どちらも静的で、同じクラス上の同じメソッド場合、メソッドは、等しいと見なされます、ターゲットも等しいと見なさです。</span><span class="sxs-lookup"><span data-stu-id="9d184-796">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="9d184-797">比較対象となる 2 つの方法では、インスタンス メソッドし、同じオブジェクトに対して同じメソッドである場合、メソッドは、等しいと見なされますターゲットも等しいと見なさです。</span><span class="sxs-lookup"><span data-stu-id="9d184-797">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="9d184-798">それ以外の場合、メソッドと同じと見なされないやターゲットもいないと見なされますと同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-798">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="9d184-799">2 つの呼び出しリストは同じ順序が存在し、2 つの一覧から対応する要素が同じメソッドとターゲットを表す場合、同一と見なされます。</span><span class="sxs-lookup"><span data-stu-id="9d184-799">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="9d184-800">この演算子を同等の方法は、します。 <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="9d184-800">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-801">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-801">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-802">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-802">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="9d184-803">The first delegate to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-803">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="9d184-804">The second delegate to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-804">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-805">Determines whether the specified delegates are not equal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-805">Determines whether the specified delegates are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-806">
            <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-806">
              <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-807">2 つのデリゲートが等しくないと見なさ型が異なる、または別の方法、ターゲット、または別の呼び出しリストがある場合。</span><span class="sxs-lookup"><span data-stu-id="9d184-807">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="9d184-808">同じ型の 2 つのデリゲート場合とは見なされません等しい。</span><span class="sxs-lookup"><span data-stu-id="9d184-808">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9d184-809">.NET framework version 1.0 および 1.1 では、2 つのデリゲートが場合に、ターゲット、メソッド、および呼び出しリストが等しいか、異なる型のデリゲート場合でも、等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="9d184-809">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="9d184-810">メソッドとターゲット」は、次のように等しいかどうか比較されます。</span><span class="sxs-lookup"><span data-stu-id="9d184-810">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="9d184-811">比較対象となる 2 つの方法では、どちらも静的で、同じクラス上の同じメソッド場合、メソッドは、等しいと見なされます、ターゲットも等しいと見なさです。</span><span class="sxs-lookup"><span data-stu-id="9d184-811">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="9d184-812">比較対象となる 2 つの方法では、インスタンス メソッドし、同じオブジェクトに対して同じメソッドである場合、メソッドは、等しいと見なされますターゲットも等しいと見なさです。</span><span class="sxs-lookup"><span data-stu-id="9d184-812">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="9d184-813">それ以外の場合、メソッドと同じと見なされないやターゲットもいないと見なされますと同じです。</span><span class="sxs-lookup"><span data-stu-id="9d184-813">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="9d184-814">2 つの呼び出しリストがあれば、サイズが異なる場合は順序が異なる、または 1 つのリストから、少なくとも 1 つの要素は、メソッドまたはその他のリスト内の対応する要素によって表されるとは異なるターゲットを表す場合は等しくありません。</span><span class="sxs-lookup"><span data-stu-id="9d184-814">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="9d184-815">この演算子を同等の方法は、します。 <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="9d184-815">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-816">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-816">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-817">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-817">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="9d184-818">The delegate from which to remove the invocation list of <c>value</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-818">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9d184-819">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-819">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-820">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-820">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-821">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-821">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="9d184-822">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-822">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="9d184-823">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-823">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-824">場合の呼び出しリスト`value`連続した一連の呼び出しリスト内の要素と一致する`source`の呼び出しリストし、`value`の呼び出しリスト内に発生すると言います`source`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-824">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="9d184-825">場合の呼び出しリスト`value`の呼び出しリスト内に 1 回以上発生`source`、最後に見つかった位置を削除します。</span><span class="sxs-lookup"><span data-stu-id="9d184-825">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9d184-826">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-826">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-827">The delegate types do not match.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-827">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-828">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-828">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-829">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-829">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="9d184-830">The delegate from which to remove the invocation list of <c>value</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-830">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9d184-831">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-831">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-832">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-832">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-833">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-833">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="9d184-834">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-834">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="9d184-835">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-835">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-836">場合の呼び出しリスト`value`連続した一連の呼び出しリスト内の要素と一致する`source`の呼び出しリストし、`value`の呼び出しリスト内に発生すると言います`source`です。</span><span class="sxs-lookup"><span data-stu-id="9d184-836">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="9d184-837">場合の呼び出しリスト`value`の呼び出しリスト内に 1 回以上発生`source`をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="9d184-837">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9d184-838">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-838">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9d184-839">The delegate types do not match.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-839">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-840">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-840">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-841">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-841">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="9d184-842">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-842">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9d184-843">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-843">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9d184-844">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-844">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="9d184-845">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-845">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="9d184-846">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-846">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-847">場合の呼び出しリスト`value`連続した現在のデリゲートの呼び出しリストでは、次の呼び出しリスト内の要素のセットと一致する`value`現在のデリゲートの呼び出しリスト内で発生すると言います。</span><span class="sxs-lookup"><span data-stu-id="9d184-847">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="9d184-848">場合の呼び出しリスト`value`が複数回出現現在のデリゲートの呼び出しリストに、最後に見つかった位置を削除します。</span><span class="sxs-lookup"><span data-stu-id="9d184-848">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9d184-849">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-849">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-850">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-850">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-851">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-851">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9d184-852">Gets the class instance on which the current delegate invokes the instance method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-852">Gets the class instance on which the current delegate invokes the instance method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9d184-853">現在のデリゲートが、デリゲートがインスタンス メソッドを表す場合、インスタンス メソッドを呼び出す対象のオブジェクト<see langword="null" />場合は、デリゲートは、静的メソッドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-853">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d184-854">インスタンス メソッドがクラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられている方法です。</span><span class="sxs-lookup"><span data-stu-id="9d184-854">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="9d184-855">デリゲートは 1 つまたは複数のインスタンス メソッドが呼び出される場合、このプロパティは、呼び出しリストにある最後のインスタンス メソッドのターゲットを返します。</span><span class="sxs-lookup"><span data-stu-id="9d184-855">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9d184-856">呼び出されたときに遅延バインディング メカニズムを通じてなど<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-856">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="9d184-857">関連する列挙。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9d184-857">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>