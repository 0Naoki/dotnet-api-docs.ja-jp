<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="StringComparer.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c4526a2be99a0d71cadf77bf33e7a741674b5dea4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4526a2be99a0d71cadf77bf33e7a741674b5dea4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</source>
          <target state="translated">大文字と小文字の区別、およびカルチャ ベースまたは序数ベースの特定の比較規則を使用する文字列比較操作を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>An object derived from the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</source>
          <target state="translated">派生したオブジェクト、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>クラスは、文字列ベースの比較、等しいかどうか、および両方のユース ケース、およびカルチャに固有の比較規則を考慮するハッシュ コードの操作を具体化します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You can use the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class to create a type-specific comparison to sort the elements in a generic collection.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>をジェネリック コレクションに要素を並べ替えるための比較を型固有を作成するクラス。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Classes such as <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> use the <ph id="ph5">&lt;xref:System.StringComparer&gt;</ph> class for sorting purposes.</source>
          <target state="translated">などのクラス<ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>を使用して、<ph id="ph5">&lt;xref:System.StringComparer&gt;</ph>を並べ替える目的でクラスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>A comparison operation that is represented by the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</source>
          <target state="translated">比較演算で表される、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>大文字小文字を区別や大文字と小文字、いずれかの単語 (カルチャ) を使用するクラスが定義されているまたは序数に基づく (カルチャに依存しない) 比較ルールです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>For more information about word and ordinal comparison rules, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Word と序数に基づく比較の規則に関する詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Implemented Properties</source>
          <target state="translated">実装されたプロパティ</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You might be confused about how to use the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class properties because of a seeming contradiction.</source>
          <target state="translated">使用方法に関する混乱を防ぐ必要があります、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>クラス上の矛盾が原因のプロパティです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is declared <ph id="ph2">`abstract`</ph> (<ph id="ph3">`MustInherit`</ph> in Visual Basic), which means its members can be invoked only on an object of a class derived from the <ph id="ph4">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>クラスが宣言されている<ph id="ph2">`abstract`</ph>(<ph id="ph3">`MustInherit`</ph> Visual Basic で)、つまり、そのメンバーがから派生したクラスのオブジェクトでのみ呼び出すことができます、<ph id="ph4">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The contradiction is that each property of the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is declared <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic), which means the property can be invoked without first creating a derived class.</source>
          <target state="translated">否定は、の各プロパティ、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>クラスが宣言されている<ph id="ph2">`static`</ph>(<ph id="ph3">`Shared`</ph> Visual Basic で)、つまり、プロパティが派生クラスを作成しなくても呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You can call a <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> property directly because each property actually returns an instance of an anonymous class that is derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">呼び出すことができます、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>プロパティを直接の各プロパティが実際には、匿名がから派生したクラスのインスタンスを返すため、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Consequently, the type of each property value is <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>, which is the base class of the anonymous class, not the type of the anonymous class itself.</source>
          <target state="translated">そのため、各プロパティ値の型は<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>、匿名のクラスの基底クラスではない、匿名の型クラス自体です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Each <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class property returns a <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> object that supports predefined case and comparison rules.</source>
          <target state="translated">各<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>クラスのプロパティから返される、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>定義済みの場合と比較規則をサポートするオブジェクト。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The following example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">次の例では、プロパティ、および<ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">例に示す別の方法<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>オブジェクト並べ替え 3 つのバージョン、ラテン文字 I。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.StringComparer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>Compares two objects or strings and returns an indication of their relative sort order.</source>
          <target state="translated">2 つのオブジェクトまたは文字列を比較し、相対的な並べ替え順序を表す値を返します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept> と比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept> と比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、2 つのオブジェクトを比較し、相対的な並べ替え順序を表す値を返します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>A signed integer that indicates the relative values of <ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">
          <ph id="ph1">&lt;paramref name="x" /&gt;</ph> と <ph id="ph2">&lt;paramref name="y" /&gt;</ph> の相対値を示す符号付き整数。次の表を参照してください。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 意味</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0 より小さい値</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> precedes  <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>並べ替え順序で、<ph id="ph3">&lt;paramref name="x" /&gt;</ph> は <ph id="ph4">&lt;paramref name="y" /&gt;</ph> の前になります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> で、<ph id="ph3">&lt;paramref name="y" /&gt;</ph> が <ph id="ph4">&lt;see langword="null" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> is equal to <ph id="ph4">&lt;paramref name="y" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> と <ph id="ph4">&lt;paramref name="y" /&gt;</ph> が等価です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph> are both <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> と <ph id="ph2">&lt;paramref name="y" /&gt;</ph> が両方とも <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0 より大きい値</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>並べ替え順序で、<ph id="ph3">&lt;paramref name="x" /&gt;</ph> は <ph id="ph4">&lt;paramref name="y" /&gt;</ph> の後ろになります。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="y" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="x" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="y" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> で、<ph id="ph3">&lt;paramref name="x" /&gt;</ph> が <ph id="ph4">&lt;see langword="null" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method is slightly more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method because no conversion of the <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph> arguments is needed to perform the comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>メソッドはよりも若干効率的、<ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph>メソッドのための変換はありません、<ph id="ph3">`x`</ph>と<ph id="ph4">`y`</ph>比較を実行する引数が必要です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>Neither <ph id="ph1">&lt;paramref name="x" /&gt;</ph> nor <ph id="ph2">&lt;paramref name="y" /&gt;</ph> is a <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph> object, and neither <ph id="ph4">&lt;paramref name="x" /&gt;</ph> nor <ph id="ph5">&lt;paramref name="y" /&gt;</ph> implements the <ph id="ph6">&lt;see cref="T:System.IComparable" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> と <ph id="ph2">&lt;paramref name="y" /&gt;</ph> のどちらも <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph> オブジェクトではありません。また、<ph id="ph4">&lt;paramref name="x" /&gt;</ph> と <ph id="ph5">&lt;paramref name="y" /&gt;</ph> のどちらも <ph id="ph6">&lt;see cref="T:System.IComparable" /&gt;</ph> インターフェイスを実装していません。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept> と比較する文字列。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept> と比較する文字列。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、2 つの文字列を比較し、相対的な並べ替え順序を表す値を返します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A signed integer that indicates the relative values of <ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">
          <ph id="ph1">&lt;paramref name="x" /&gt;</ph> と <ph id="ph2">&lt;paramref name="y" /&gt;</ph> の相対値を示す符号付き整数。次の表を参照してください。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 意味</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0 より小さい値</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> precedes <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>並べ替え順序で、<ph id="ph3">&lt;paramref name="x" /&gt;</ph> は <ph id="ph4">&lt;paramref name="y" /&gt;</ph> の前になります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> で、<ph id="ph3">&lt;paramref name="y" /&gt;</ph> が <ph id="ph4">&lt;see langword="null" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> is equal to <ph id="ph4">&lt;paramref name="y" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> と <ph id="ph4">&lt;paramref name="y" /&gt;</ph> が等価です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph> are both <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> と <ph id="ph2">&lt;paramref name="y" /&gt;</ph> が両方とも <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0 より大きい値</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>並べ替え順序で、<ph id="ph3">&lt;paramref name="x" /&gt;</ph> は <ph id="ph4">&lt;paramref name="y" /&gt;</ph> の後ろになります。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="y" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="x" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="y" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> で、<ph id="ph3">&lt;paramref name="x" /&gt;</ph> が <ph id="ph4">&lt;see langword="null" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method is slightly more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method because no conversion of the <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph> arguments is needed to perform the comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>メソッドはよりも若干効率的、<ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph>メソッドのための変換はありません、<ph id="ph3">`x`</ph>と<ph id="ph4">`y`</ph>比較を実行する引数が必要です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>A culture whose linguistic rules are used to perform a string comparison.</source>
          <target state="translated">文字列比較を実行するための言語的な規則を定義したカルチャ。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that comparison operations be case-insensitive; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to specify that comparison operations be case-sensitive.</source>
          <target state="translated">比較操作で大文字と小文字を区別しない場合は、<ph id="ph1">&lt;see langword="true" /&gt;</ph> を指定します。比較操作で大文字と小文字を区別する場合は、<ph id="ph2">&lt;see langword="false" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that compares strings according to the rules of a specified culture.</source>
          <target state="translated">指定したカルチャの規則に基づいて文字列を比較する <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs string comparisons according to the comparison rules used by the <ph id="ph2">&lt;paramref name="culture" /&gt;</ph> parameter and the case rule specified by the <ph id="ph3">&lt;paramref name="ignoreCase" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> パラメーターで使用する比較規則と <ph id="ph2">&lt;paramref name="culture" /&gt;</ph> パラメーターで指定する大文字と小文字の区別の規則に基づいて文字列を比較する新しい <ph id="ph3">&lt;paramref name="ignoreCase" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">次のコード例は、プロパティを示します、<ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">例に示す別の方法<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>オブジェクト並べ替え 3 つのバージョン、ラテン文字 I。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.StringComparer.CurrentCulture">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</source>
          <target state="translated">現在のカルチャの単語ベースの比較規則を使用して、大文字と小文字を区別して文字列を比較する <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property can be used when strings are linguistically relevant.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>によって返される、<ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph>文字列は、言語的な意味と、プロパティを使用できます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</source>
          <target state="translated">たとえば、文字列が、ユーザーに表示されている場合、または文字列は、ユーザーの操作の結果である場合は、文字列データの並べ替えにカルチャに依存した文字列比較を使用してください。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The current culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object associated with the current thread.</source>
          <target state="translated">現在のカルチャが、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>現在のスレッドに関連付けられているオブジェクト。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph>プロパティが実際には匿名から派生したクラスのインスタンスを返します、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>Each call to the <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property <ph id="ph2">`get`</ph> accessor returns a new <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> object, as the following code shows.</source>
          <target state="translated">呼び出しごとに、<ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph>プロパティ<ph id="ph2">`get`</ph>アクセサーは、新しいを返します<ph id="ph3">&lt;xref:System.StringComparer&gt;</ph>として、次のコードに示すオブジェクト。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>To improve performance, you can store the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> object in a local variable rather than retrieve the value of the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property multiple times.</source>
          <target state="translated">パフォーマンスを向上させるには、保存することができます、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>の値を取得するのではなく、ローカル変数にオブジェクト、<ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph>プロパティ複数回です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">次のコード例は、プロパティを示します、<ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">例に示す別の方法<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>オブジェクト並べ替え 3 つのバージョン、ラテン文字 I。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</source>
          <target state="translated">現在のカルチャの単語ベースの比較規則を使用して、大文字と小文字を区別せずに文字列を比較する <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The current culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object associated with the current thread.</source>
          <target state="translated">現在のカルチャが、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>現在のスレッドに関連付けられているオブジェクト。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property can be used when strings are linguistically relevant but their case is not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>によって返される、<ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph>文字列は、言語的な意味は、大文字小文字の場合、プロパティを使用できます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</source>
          <target state="translated">たとえば、文字列がユーザーに表示されますが、ケースは重要でない、カルチャに依存した場合、文字列データの並べ替えに大文字と小文字の文字列比較を使用する必要があります。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph>プロパティが実際には匿名から派生したクラスのインスタンスを返します、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>Each call to the <ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property <ph id="ph2">`get`</ph> accessor returns a new <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> object, as the following code shows.</source>
          <target state="translated">呼び出しごとに、<ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph>プロパティ<ph id="ph2">`get`</ph>アクセサーは、新しいを返します<ph id="ph3">&lt;xref:System.StringComparer&gt;</ph>として、次のコードに示すオブジェクト。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>To improve performance, you can store the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> object in a local variable rather than retrieve the value of the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property multiple times.</source>
          <target state="translated">パフォーマンスを向上させるには、保存することができます、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>の値を取得するのではなく、ローカル変数にオブジェクト、<ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph>プロパティ複数回です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>When overridden in a derived class, indicates whether two objects or strings are equal.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、2 つのオブジェクトまたは文字列が等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept> と比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept> と比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>When overridden in a derived class, indicates whether two objects are equal.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、2 つのオブジェクトが等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="x" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> refer to the same object, or <ph id="ph4">&lt;paramref name="x" /&gt;</ph> and <ph id="ph5">&lt;paramref name="y" /&gt;</ph> are both the same type of object and those objects are equal, or both <ph id="ph6">&lt;paramref name="x" /&gt;</ph> and <ph id="ph7">&lt;paramref name="y" /&gt;</ph> are <ph id="ph8">&lt;see langword="null" /&gt;</ph>; otherwise, <ph id="ph9">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> と <ph id="ph2">&lt;paramref name="x" /&gt;</ph> が同じオブジェクトを参照している場合、または <ph id="ph3">&lt;paramref name="y" /&gt;</ph> と <ph id="ph4">&lt;paramref name="x" /&gt;</ph> が同じ型のオブジェクトでこれらのオブジェクトが等しい場合、または <ph id="ph5">&lt;paramref name="y" /&gt;</ph> と <ph id="ph6">&lt;paramref name="x" /&gt;</ph> が両方とも <ph id="ph7">&lt;paramref name="y" /&gt;</ph> の場合は <ph id="ph8">&lt;see langword="null" /&gt;</ph>。それ以外の場合は <ph id="ph9">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>Because the runtime does not have to unbox <ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> if they are value types or attempt to downcast <ph id="ph3">`x`</ph> or <ph id="ph4">`y`</ph> to strings if they are reference types, the <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> method may be slightly more efficient than the <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">ランタイムはボックス化を解除する必要はありませんので<ph id="ph1">`x`</ph>または<ph id="ph2">`y`</ph>値型または試行にキャストされる場合<ph id="ph3">`x`</ph>または<ph id="ph4">`y`</ph>文字列参照型では場合に、<ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph>メソッドをよりも若干効率的にすることがあります、<ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept> と比較する文字列。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept> と比較する文字列。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>When overridden in a derived class, indicates whether two strings are equal.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、2 つの文字列が等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="x" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> refer to the same object, or <ph id="ph4">&lt;paramref name="x" /&gt;</ph> and <ph id="ph5">&lt;paramref name="y" /&gt;</ph> are equal, or <ph id="ph6">&lt;paramref name="x" /&gt;</ph> and <ph id="ph7">&lt;paramref name="y" /&gt;</ph> are <ph id="ph8">&lt;see langword="null" /&gt;</ph>; otherwise, <ph id="ph9">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> と <ph id="ph2">&lt;paramref name="x" /&gt;</ph> が同じオブジェクトを参照している場合、または <ph id="ph3">&lt;paramref name="y" /&gt;</ph> と <ph id="ph4">&lt;paramref name="x" /&gt;</ph> が等しい場合、または <ph id="ph5">&lt;paramref name="y" /&gt;</ph> と <ph id="ph6">&lt;paramref name="x" /&gt;</ph> が <ph id="ph7">&lt;paramref name="y" /&gt;</ph> の場合は <ph id="ph8">&lt;see langword="null" /&gt;</ph>。それ以外の場合は <ph id="ph9">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>Because the runtime does not have to unbox <ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> if they are value types or attempt to downcast <ph id="ph3">`x`</ph> or <ph id="ph4">`y`</ph> to strings if they are reference types, the <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> method may be slightly more efficient than the <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">ランタイムはボックス化を解除する必要はありませんので<ph id="ph1">`x`</ph>または<ph id="ph2">`y`</ph>値型または試行にキャストされる場合<ph id="ph3">`x`</ph>または<ph id="ph4">`y`</ph>文字列参照型では場合に、<ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph>メソッドをよりも若干効率的にすることがあります、<ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>When overridden in a derived class, gets the hash code for the current <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、現在の <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクトのハッシュ コードを取得します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>An object.</source>
          <target state="translated">オブジェクト。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>When overridden in a derived class, gets the hash code for the specified object.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、指定したオブジェクトのハッシュ コードを取得します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>A 32-bit signed hash code calculated from the value of the <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> パラメーターの値から計算された 32 ビットの符号付きハッシュ コード。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method is more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%2A&gt;</ph> method because the <ph id="ph3">`obj`</ph> parameter does not have to be unboxed to perform the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph>メソッドより効率的、<ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%2A&gt;</ph>メソッドのため、<ph id="ph3">`obj`</ph>パラメーターは、操作を実行するボックス化解除する必要はありません。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> method allocates an amount of memory that is proportional to the size of <ph id="ph2">`obj`</ph> to calculate the hash code of <ph id="ph3">`obj`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph>メソッドの割り当てのサイズに比例したメモリの量が<ph id="ph2">`obj`</ph>のハッシュ コードを計算する<ph id="ph3">`obj`</ph>です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>In the case of large strings, trying to retrieve the hash code can throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">長い文字列の場合、ハッシュ コードを取得中にスローする可能性が、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</source>
          <target state="translated">代わりに、ハッシュ コードを計算するときに、固定量のメモリを割り当てを行うための代替アルゴリズムを使用することができます。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>To use this algorithm, add the <bpt id="p1">[</bpt>&lt;NetFx45_CultureAwareComparerGetHashCode_LongStrings&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> element to the <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>runtime&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application's configuration file.</source>
          <target state="translated">このアルゴリズムを使用するのには、追加、 <bpt id="p1">[</bpt>&lt; NetFx45_CultureAwareComparerGetHashCode_LongStrings &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept>要素を<bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>ランタイム &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept>アプリケーションの構成ファイルのセクションです。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">ハッシュ コードを計算するために必要なバッファーに十分なメモリを割り当てることができません。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">ハッシュ コードを計算するために必要なバッファーに十分なメモリを割り当てることができません。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>A string.</source>
          <target state="translated">文字列。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>When overridden in a derived class, gets the hash code for the specified string.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、指定した文字列のハッシュ コードを取得します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>A 32-bit signed hash code calculated from the value of the <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> パラメーターの値から計算された 32 ビットの符号付きハッシュ コード。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method is more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> method because the <ph id="ph3">`obj`</ph> parameter does not have to be unboxed to perform the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph>メソッドより効率的、<ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph>メソッドのため、<ph id="ph3">`obj`</ph>パラメーターは、操作を実行するボックス化解除する必要はありません。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method allocates an amount of memory that is proportional to the size of <ph id="ph2">`obj`</ph> to calculate the hash code of <ph id="ph3">`obj`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph>メソッドの割り当てのサイズに比例したメモリの量が<ph id="ph2">`obj`</ph>のハッシュ コードを計算する<ph id="ph3">`obj`</ph>です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>In the case of large strings, trying to retrieve the hash code can throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">長い文字列の場合、ハッシュ コードを取得中にスローする可能性が、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</source>
          <target state="translated">代わりに、ハッシュ コードを計算するときに、固定量のメモリを割り当てを行うための代替アルゴリズムを使用することができます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>To use this algorithm, add the <bpt id="p1">[</bpt>&lt;NetFx45_CultureAwareComparerGetHashCode_LongStrings&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> element to the <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>runtime&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application's configuration file.</source>
          <target state="translated">このアルゴリズムを使用するのには、追加、 <bpt id="p1">[</bpt>&lt; NetFx45_CultureAwareComparerGetHashCode_LongStrings &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept>要素を<bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>ランタイム &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept>アプリケーションの構成ファイルのセクションです。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">ハッシュ コードを計算するために必要なバッファーに十分なメモリを割り当てることができません。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">ハッシュ コードを計算するために必要なバッファーに十分なメモリを割り当てることができません。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.StringComparer.InvariantCulture">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</source>
          <target state="translated">インバリアント カルチャの単語ベースの比較規則を使用して、大文字と小文字を区別して文字列を比較する <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>によって返される、<ph id="ph2">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph>プロパティ、言語的な意味的に文字列を比較しますには、特定のカルチャでの表示に適していません。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>Its major application is to order strings in a way that will be identical across cultures.</source>
          <target state="translated">主要なアプリケーションは、複数のカルチャで同じような方法で順序文字列にです。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The invariant culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property.</source>
          <target state="translated">インバリアント カルチャが、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>によって返されるオブジェクト、<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph>プロパティが実際には匿名から派生したクラスのインスタンスを返します、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">次のコード例は、プロパティを示します、<ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">例に示す別の方法<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>オブジェクト並べ替え 3 つのバージョン、ラテン文字 I。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</source>
          <target state="translated">インバリアント カルチャの単語ベースの比較規則を使用して、大文字と小文字を区別せずに文字列を比較する <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>によって返される、<ph id="ph2">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph>プロパティは、大文字小文字、言語的な意味の方法で文字列を比較するが、特定カルチャでの表示に適したではありません。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>Its major application is to order strings in a way that will be identical across cultures.</source>
          <target state="translated">主要なアプリケーションは、複数のカルチャで同じような方法で順序文字列にです。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The invariant culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property.</source>
          <target state="translated">インバリアント カルチャが、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>によって返されるオブジェクト、<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph>プロパティが実際には匿名から派生したクラスのインスタンスを返します、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.StringComparer.Ordinal">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive ordinal string comparison.</source>
          <target state="translated">大文字と小文字を区別して序数の文字列比較を実行する <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>A <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> property performs a simple byte comparison that is independent of language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>によって返される、<ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph>プロパティが、言語の独立した単純なバイト比較を実行します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</source>
          <target state="translated">これは、機能は、パスワードなどの大文字小文字を区別のリソースを比較する場合やプログラムでは、文字列を比較する生成されたときに最も適しています。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph>プロパティが実際には匿名から派生したクラスのインスタンスを返します、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">次のコード例は、プロパティを示します、<ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">例に示す別の方法<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>オブジェクト並べ替え 3 つのバージョン、ラテン文字 I。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-insensitive ordinal string comparison.</source>
          <target state="translated">大文字と小文字を区別せずに序数の文字列比較を実行する <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>A <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>によって返される、<ph id="ph2">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph>プロパティは、インバリアント カルチャの規則を使用して大文字に変換された場合、比較対象の文字列で文字を扱うし、は独立した単純なバイト比較を実行し、言語。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</source>
          <target state="translated">これは、機能は、パスとファイル名などの大文字と小文字のリソースを比較する場合やプログラムで生成されたは文字列を比較するときに最も適しています。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph>プロパティが実際には匿名から派生したクラスのインスタンスを返します、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">次のコード例は、プロパティを示します、<ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">例に示す別の方法<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>オブジェクト並べ替え 3 つのバージョン、ラテン文字 I。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>