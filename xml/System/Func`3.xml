<Type Name="Func&lt;T1,T2,TResult&gt;" FullName="System.Func&lt;T1,T2,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,out TResult&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`3&lt;- T1, - T2, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, Out TResult)(arg1 As T1, arg2 As T2) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="aa395-101">このデリゲートによってカプセル化されるメソッドの最初のパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="aa395-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="aa395-102">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="aa395-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="aa395-103">このデリゲートによってカプセル化されるメソッドの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="aa395-103">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="aa395-104">このデリゲートによってカプセル化されるメソッドの最初のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="aa395-104">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="aa395-105">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="aa395-105">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="aa395-106">2 つのパラメーターを受け取って <typeparamref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="aa395-106">Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="aa395-107">このデリゲートによってカプセル化されるメソッドの戻り値。</span><span class="sxs-lookup"><span data-stu-id="aa395-107">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aa395-108">このデリゲートを使用して、明示的にカスタム デリゲートを宣言しなくても、パラメーターとして渡すことができるメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="aa395-108">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="aa395-109">カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa395-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="aa395-110">つまり、カプセル化されるメソッドはそれぞれが渡された値によって、2 つのパラメーターである必要があります、値を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="aa395-110">This means that the encapsulated method must have two parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="aa395-111">2 つのパラメーターを返すメソッドを参照する`void`(として宣言されている Visual basic、または、`Sub`ではなく同様、 `Function`)、ジェネリックを使用して<xref:System.Action%602>代わりに委任します。</span><span class="sxs-lookup"><span data-stu-id="aa395-111">To reference a method that has two parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%602> delegate instead.</span></span>  
  
 <span data-ttu-id="aa395-112">使用すると、<xref:System.Func%603>デリゲートの 2 つのパラメーターを持つメソッドをカプセル化するデリゲートを明示的に定義する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="aa395-112">When you use the <xref:System.Func%603> delegate you do not have to explicitly define a delegate that encapsulates a method with two parameters.</span></span> <span data-ttu-id="aa395-113">たとえば、次のコードを明示的に宣言という名前のデリゲート`ExtractMethod`への参照を割り当てると、`ExtractWords`メソッドのデリゲートのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="aa395-113">For example, the following code explicitly declares a delegate named `ExtractMethod` and assigns a reference to the `ExtractWords` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Delegate.cs#1)]
 [!code-vb[System.Func~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="aa395-114">次の例は、インスタンス化してこのコードを簡略化、<xref:System.Func%603>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てるのではなくデリゲート。</span><span class="sxs-lookup"><span data-stu-id="aa395-114">The following example simplifies this code by instantiating a <xref:System.Func%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Func3.cs#2)]
 [!code-vb[System.Func~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Func3.vb#2)]  
  
 <span data-ttu-id="aa395-115">使用することができます、<xref:System.Func%603>次の例に示すように、C# の場合は、匿名メソッドを持つデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="aa395-115">You can use the <xref:System.Func%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="aa395-116">(匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。</span><span class="sxs-lookup"><span data-stu-id="aa395-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="aa395-117">ラムダ式を割り当てることができます、<xref:System.Func%603>デリゲート、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="aa395-117">You can also assign a lambda expression to a <xref:System.Func%603> delegate, as the following example illustrates.</span></span> <span data-ttu-id="aa395-118">(ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)と[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。</span><span class="sxs-lookup"><span data-stu-id="aa395-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Lambda.cs#4)]
 [!code-vb[System.Func~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/lambda.vb#4)]  
  
 <span data-ttu-id="aa395-119">ラムダ式の基になる型がジェネリックのいずれかの`Func`デリゲート。</span><span class="sxs-lookup"><span data-stu-id="aa395-119">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="aa395-120">これによって、デリゲートを明示的に割り当てることがなく、ラムダ式をパラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="aa395-120">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="aa395-121">具体的には、ため内の型の多くのメソッド、<xref:System.Linq>名前空間が<xref:System.Func%603>パラメーターを渡すことができますこれらのメソッド、ラムダ式に明示的にインスタンス化しなくても、<xref:System.Func%603>を委任します。</span><span class="sxs-lookup"><span data-stu-id="aa395-121">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%603> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%603> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aa395-122">次の例では、宣言および使用する方法、<xref:System.Func%603>を委任します。</span><span class="sxs-lookup"><span data-stu-id="aa395-122">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="aa395-123">この例で宣言、<xref:System.Func%603>変数し、それを受け取るラムダ式、<xref:System.String>値と<xref:System.Int32>パラメーターと値。</span><span class="sxs-lookup"><span data-stu-id="aa395-123">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="aa395-124">ラムダ式から返される`true`場合の長さ、<xref:System.String>パラメーターがの値に等しい、<xref:System.Int32>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="aa395-124">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="aa395-125">このメソッドをカプセル化するデリゲートは、クエリ文字列の配列内のフィルター文字列を後で使用されます。</span><span class="sxs-lookup"><span data-stu-id="aa395-125">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>