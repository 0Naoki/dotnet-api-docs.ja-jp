<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b667dcf79e5ae762a2e599fd337d51ceea34b2c7" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37482406" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</typeparam>
    <param name="obj">このデリゲートによってカプセル化されるメソッドのパラメーター。</param>
    <summary>単一のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Action%601>カスタム デリゲートを明示的に宣言することがなく、パラメーターとして、メソッドに渡すデリゲート。 カプセル化されるメソッドは、このデリゲートで定義されているメソッド シグネチャに対応する必要があります。 これは、カプセル化されるメソッドは、値によって渡された 1 つのパラメーターが必要し、値を返す必要がないことを意味します。 (C# のメソッドが返す必要があります`void`します。 Visual basic で定義する必要があります、 `Sub`.`End Sub` 構築します。 これは、ことができますが無視される値を返すメソッド。)通常、このようなメソッドは、操作の実行に使用されます。  
  
> [!NOTE]
>  1 つのパラメーターがあり、値を返しますをメソッドを参照するには、ジェネリックを使用<xref:System.Func%602>代わりにデリゲートします。  
  
 使用すると、<xref:System.Action%601>デリゲートがありませんを明示的に 1 つのパラメーターを持つメソッドをカプセル化するデリゲートを定義します。 たとえば、次のコードで明示的にという名前のデリゲートが宣言`DisplayMessage`への参照を割り当てると、<xref:System.Console.WriteLine%2A>メソッドまたは`ShowWindowsMessage`メソッドのデリゲートのインスタンスにします。  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 次の例では、インスタンス化してこのコードを簡略化、<xref:System.Action%601>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てる代わりにデリゲートします。  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 使用することも、<xref:System.Action%601>次の例に示すように、c# の場合は、匿名メソッドを持つデリゲートします。 (匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 ラムダ式を割り当てることができます、<xref:System.Action%601>次の例に示すように、インスタンスを委任します。 (ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <xref:System.Collections.Generic.List%601.ForEach%2A>と<xref:System.Array.ForEach%2A>各メソッドを<xref:System.Action%601>デリゲートをパラメーターとして。 メソッドのデリゲートによってカプセル化された配列またはリスト内の各要素に対して操作を実行することができます。 この例では、<xref:System.Collections.Generic.List%601.ForEach%2A>図解を提供するメソッド。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.Action%601>の内容を印刷するデリゲートを<xref:System.Collections.Generic.List%601>オブジェクト。 この例で、`Print`一覧の内容をコンソールに表示するメソッドを使用します。 さらに、c# の例では、内容をコンソールに表示する匿名メソッドの使用も示します。 例を明示的に宣言しないメモ、<xref:System.Action%601>変数。 1 つのパラメーターを受け取るし、値を返さないメソッドへの参照を渡す代わりに、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>メソッド、その単一のパラメーターは、<xref:System.Action%601>デリゲートします。 同様に、c# などの<xref:System.Action%601>デリゲートが明示的にインスタンス化されない匿名メソッドのシグネチャのシグネチャに一致するため、<xref:System.Action%601>で想定されるデリゲート、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>メソッド。  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>