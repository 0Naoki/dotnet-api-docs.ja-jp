<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a2282810184f9346dadc33bd241406f3515f9fe" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69422066" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="95ebd-101">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="95ebd-101">The type of the parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="obj"><span data-ttu-id="95ebd-102">このデリゲートによってカプセル化されるメソッドのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="95ebd-102">The parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="95ebd-103">単一のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="95ebd-103">Encapsulates a method that has a single parameter and does not return a value.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="95ebd-104"><xref:System.Action%601>デリゲートを使用すると、カスタムデリゲートを明示的に宣言せずに、メソッドをパラメーターとして渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="95ebd-104">You can use the <xref:System.Action%601> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="95ebd-105">カプセル化されたメソッドは、このデリゲートで定義されているメソッドシグネチャに対応している必要があります。</span><span class="sxs-lookup"><span data-stu-id="95ebd-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="95ebd-106">つまり、カプセル化されたメソッドは、値によって渡される1つのパラメーターを持つ必要があり、値を返さないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="95ebd-106">This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="95ebd-107">(でC#は、メソッドはを`void`返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="95ebd-107">(In C#, the method must return `void`.</span></span> <span data-ttu-id="95ebd-108">Visual Basic では、 `Sub`これを定義する必要があります...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="95ebd-108">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="95ebd-109">構築.</span><span class="sxs-lookup"><span data-stu-id="95ebd-109">construct.</span></span> <span data-ttu-id="95ebd-110">また、無視される値を返すメソッドを指定することもできます)。通常、このようなメソッドは、操作を実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="95ebd-110">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="95ebd-111">1つのパラメーターを持ち、値を返すメソッドを参照するには<xref:System.Func%602> 、代わりに汎用デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="95ebd-111">To reference a method that has one parameter and returns a value, use the generic <xref:System.Func%602> delegate instead.</span></span>  
  
 <span data-ttu-id="95ebd-112"><xref:System.Action%601>デリゲートを使用する場合、1つのパラメーターを持つメソッドをカプセル化するデリゲートを明示的に定義する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="95ebd-112">When you use the <xref:System.Action%601> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="95ebd-113">たとえば、次のコードでは、という名前`DisplayMessage`のデリゲートを明示的に宣言<xref:System.Console.WriteLine%2A>し、メソッド`ShowWindowsMessage`またはメソッドへの参照をそのデリゲートインスタンスに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="95ebd-113">For example, the following code explicitly declares a delegate named `DisplayMessage` and assigns a reference to either the <xref:System.Console.WriteLine%2A> method or the `ShowWindowsMessage` method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="95ebd-114">次の例では、新しいデリゲートを<xref:System.Action%601>明示的に定義し、名前付きメソッドを割り当てるのではなく、デリゲートをインスタンス化することによって、このコードを簡略化します。</span><span class="sxs-lookup"><span data-stu-id="95ebd-114">The following example simplifies this code by instantiating the <xref:System.Action%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 <span data-ttu-id="95ebd-115">次の例に示す<xref:System.Action%601>ようにC#、の匿名メソッドでデリゲートを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="95ebd-115">You can also use the <xref:System.Action%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="95ebd-116">(匿名メソッドの概要については、「[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="95ebd-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="95ebd-117">次の例に示すように、ラムダ<xref:System.Action%601>式をデリゲートインスタンスに割り当てることもできます。</span><span class="sxs-lookup"><span data-stu-id="95ebd-117">You can also assign a lambda expression to an <xref:System.Action%601> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="95ebd-118">(ラムダ式の概要については、「[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="95ebd-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <span data-ttu-id="95ebd-119">メソッド<xref:System.Collections.Generic.List%601.ForEach%2A>と<xref:System.Array.ForEach%2A>メソッドはそれぞれ、 <xref:System.Action%601>パラメーターとしてデリゲートを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="95ebd-119">The <xref:System.Collections.Generic.List%601.ForEach%2A> and <xref:System.Array.ForEach%2A> methods each take an <xref:System.Action%601> delegate as a parameter.</span></span> <span data-ttu-id="95ebd-120">デリゲートによってカプセル化されたメソッドを使用すると、配列またはリストの各要素に対してアクションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="95ebd-120">The method encapsulated by the delegate allows you to perform an action on each element in the array or list.</span></span> <span data-ttu-id="95ebd-121">この例では<xref:System.Collections.Generic.List%601.ForEach%2A> 、メソッドを使用して、図を提供しています。</span><span class="sxs-lookup"><span data-stu-id="95ebd-121">The example uses the <xref:System.Collections.Generic.List%601.ForEach%2A> method to provide an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="95ebd-122">次の例は、 <xref:System.Action%601>デリゲートを使用して<xref:System.Collections.Generic.List%601>オブジェクトの内容を出力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="95ebd-122">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="95ebd-123">この例`Print`では、メソッドを使用して、リストの内容をコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="95ebd-123">In this example, the `Print` method is used to display the contents of the list to the console.</span></span> <span data-ttu-id="95ebd-124">また、このC#例では、匿名メソッドを使用してコンテンツをコンソールに表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="95ebd-124">In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.</span></span> <span data-ttu-id="95ebd-125">この例では、変数が<xref:System.Action%601>明示的に宣言されていないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="95ebd-125">Note that the example does not explicitly declare an <xref:System.Action%601> variable.</span></span> <span data-ttu-id="95ebd-126">代わりに、1つのパラメーターを受け取り、1つのパラメーター <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> <xref:System.Action%601>がデリゲートであるメソッドに値を返さないメソッドへの参照を渡します。</span><span class="sxs-lookup"><span data-stu-id="95ebd-126">Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method, whose single parameter is an <xref:System.Action%601> delegate.</span></span> <span data-ttu-id="95ebd-127">同様に、このC#例<xref:System.Action%601>では、匿名メソッドのシグネチャが、 <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>メソッドによって予期される<xref:System.Action%601>デリゲートのシグネチャと一致するため、デリゲートは明示的にインスタンス化されません。</span><span class="sxs-lookup"><span data-stu-id="95ebd-127">Similarly, in the C# example, an <xref:System.Action%601> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <xref:System.Action%601> delegate that is expected by the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>
