<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a2282810184f9346dadc33bd241406f3515f9fe" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69422066" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</typeparam>
    <param name="obj">このデリゲートによってカプセル化されるメソッドのパラメーター。</param>
    <summary>単一のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Action%601>デリゲートを使用すると、カスタムデリゲートを明示的に宣言せずに、メソッドをパラメーターとして渡すことができます。 カプセル化されたメソッドは、このデリゲートで定義されているメソッドシグネチャに対応している必要があります。 つまり、カプセル化されたメソッドは、値によって渡される1つのパラメーターを持つ必要があり、値を返さないようにする必要があります。 (でC#は、メソッドはを`void`返す必要があります。 Visual Basic では、 `Sub`これを定義する必要があります...`End Sub` 構築. また、無視される値を返すメソッドを指定することもできます)。通常、このようなメソッドは、操作を実行するために使用されます。  
  
> [!NOTE]
>  1つのパラメーターを持ち、値を返すメソッドを参照するには<xref:System.Func%602> 、代わりに汎用デリゲートを使用します。  
  
 <xref:System.Action%601>デリゲートを使用する場合、1つのパラメーターを持つメソッドをカプセル化するデリゲートを明示的に定義する必要はありません。 たとえば、次のコードでは、という名前`DisplayMessage`のデリゲートを明示的に宣言<xref:System.Console.WriteLine%2A>し、メソッド`ShowWindowsMessage`またはメソッドへの参照をそのデリゲートインスタンスに割り当てます。  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 次の例では、新しいデリゲートを<xref:System.Action%601>明示的に定義し、名前付きメソッドを割り当てるのではなく、デリゲートをインスタンス化することによって、このコードを簡略化します。  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 次の例に示す<xref:System.Action%601>ようにC#、の匿名メソッドでデリゲートを使用することもできます。 (匿名メソッドの概要については、「[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)」を参照してください)。  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 次の例に示すように、ラムダ<xref:System.Action%601>式をデリゲートインスタンスに割り当てることもできます。 (ラムダ式の概要については、「[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)」を参照してください)。  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 メソッド<xref:System.Collections.Generic.List%601.ForEach%2A>と<xref:System.Array.ForEach%2A>メソッドはそれぞれ、 <xref:System.Action%601>パラメーターとしてデリゲートを受け取ります。 デリゲートによってカプセル化されたメソッドを使用すると、配列またはリストの各要素に対してアクションを実行できます。 この例では<xref:System.Collections.Generic.List%601.ForEach%2A> 、メソッドを使用して、図を提供しています。  
  
   
  
## Examples  
 次の例は、 <xref:System.Action%601>デリゲートを使用して<xref:System.Collections.Generic.List%601>オブジェクトの内容を出力する方法を示しています。 この例`Print`では、メソッドを使用して、リストの内容をコンソールに表示します。 また、このC#例では、匿名メソッドを使用してコンテンツをコンソールに表示する方法も示しています。 この例では、変数が<xref:System.Action%601>明示的に宣言されていないことに注意してください。 代わりに、1つのパラメーターを受け取り、1つのパラメーター <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> <xref:System.Action%601>がデリゲートであるメソッドに値を返さないメソッドへの参照を渡します。 同様に、このC#例<xref:System.Action%601>では、匿名メソッドのシグネチャが、 <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>メソッドによって予期される<xref:System.Action%601>デリゲートのシグネチャと一致するため、デリゲートは明示的にインスタンス化されません。  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>
