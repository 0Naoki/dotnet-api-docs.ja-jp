<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="8f8b6-101">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-101">The type of the parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="obj"><span data-ttu-id="8f8b6-102">このデリゲートによってカプセル化されるメソッドのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-102">The parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="8f8b6-103">単一のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-103">Encapsulates a method that has a single parameter and does not return a value.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f8b6-104">使用することができます、<xref:System.Action%601>をパラメーターとして明示的にカスタム デリゲートを宣言しなくても、メソッドに渡すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-104">You can use the <xref:System.Action%601> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="8f8b6-105">カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="8f8b6-106">これは、カプセル化されるメソッドは、値によって渡された 1 つのパラメーターが必要し、値を返す必要がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-106">This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="8f8b6-107">(C# の場合、メソッドが返す必要があります`void`です。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-107">(In C#, the method must return `void`.</span></span> <span data-ttu-id="8f8b6-108">Visual Basic で定義する必要があります、`Sub`しています.`End Sub`</span><span class="sxs-lookup"><span data-stu-id="8f8b6-108">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="8f8b6-109">構築します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-109">construct.</span></span> <span data-ttu-id="8f8b6-110">できますが無視される値を返すメソッド。)通常、このようなメソッドは、操作の実行に使用されます。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-110">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f8b6-111">1 つのパラメーターを持ち、値を返すメソッドを参照するには、ジェネリックを使用して<xref:System.Func%602>代わりに委任します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-111">To reference a method that has one parameter and returns a value, use the generic <xref:System.Func%602> delegate instead.</span></span>  
  
 <span data-ttu-id="8f8b6-112">使用すると、<xref:System.Action%601>デリゲートがありませんを明示的に 1 つのパラメーターを持つメソッドをカプセル化するデリゲートを定義します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-112">When you use the <xref:System.Action%601> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="8f8b6-113">たとえば、次のコードを明示的に宣言という名前のデリゲート`DisplayMessage`への参照を割り当てると、<xref:System.Console.WriteLine%2A>メソッドまたは`ShowWindowsMessage`メソッドのデリゲートのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-113">For example, the following code explicitly declares a delegate named `DisplayMessage` and assigns a reference to either the <xref:System.Console.WriteLine%2A> method or the `ShowWindowsMessage` method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="8f8b6-114">次の例は、インスタンス化してこのコードを簡略化、<xref:System.Action%601>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てるのではなくデリゲート。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-114">The following example simplifies this code by instantiating the <xref:System.Action%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 <span data-ttu-id="8f8b6-115">使用することも、<xref:System.Action%601>次の例に示すように、C# の場合は、匿名メソッドを持つデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-115">You can also use the <xref:System.Action%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="8f8b6-116">(匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="8f8b6-117">ラムダ式を割り当てることができます、<xref:System.Action%601>次の例に示すように、インスタンスを委任します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-117">You can also assign a lambda expression to an <xref:System.Action%601> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="8f8b6-118">(ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <span data-ttu-id="8f8b6-119"><xref:System.Collections.Generic.List%601.ForEach%2A>と<xref:System.Array.ForEach%2A>の各メソッドの実行、<xref:System.Action%601>をパラメーターとしてデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-119">The <xref:System.Collections.Generic.List%601.ForEach%2A> and <xref:System.Array.ForEach%2A> methods each take an <xref:System.Action%601> delegate as a parameter.</span></span> <span data-ttu-id="8f8b6-120">デリゲートによってカプセル化されるメソッドでは、配列またはリスト内の各要素に対してアクションを実行することができます。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-120">The method encapsulated by the delegate allows you to perform an action on each element in the array or list.</span></span> <span data-ttu-id="8f8b6-121">この例では、<xref:System.Collections.Generic.List%601.ForEach%2A>具体的なを指定するメソッド。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-121">The example uses the <xref:System.Collections.Generic.List%601.ForEach%2A> method to provide an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f8b6-122">次の例での使用、<xref:System.Action%601>の内容を印刷するデリゲート、<xref:System.Collections.Generic.List%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-122">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="8f8b6-123">この例では、`Print`一覧の内容をコンソールに表示するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-123">In this example, the `Print` method is used to display the contents of the list to the console.</span></span> <span data-ttu-id="8f8b6-124">さらに、c# の例では、内容をコンソールに表示する匿名メソッドの使用も示します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-124">In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.</span></span> <span data-ttu-id="8f8b6-125">この例で明示的に宣言されていないことに注意してください、<xref:System.Action%601>変数。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-125">Note that the example does not explicitly declare an <xref:System.Action%601> variable.</span></span> <span data-ttu-id="8f8b6-126">代わりに、1 つのパラメーターを受け取るし、値を返さないメソッドへの参照を渡す、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>単一パラメーターを持つが、メソッド、<xref:System.Action%601>委任します。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-126">Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method, whose single parameter is an <xref:System.Action%601> delegate.</span></span> <span data-ttu-id="8f8b6-127">同様に、例では、C# の場合、<xref:System.Action%601>デリゲート明示的にインスタンス化されないため、匿名メソッドのシグネチャのシグネチャの一致、<xref:System.Action%601>で想定されるデリゲート、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8f8b6-127">Similarly, in the C# example, an <xref:System.Action%601> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <xref:System.Action%601> delegate that is expected by the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>