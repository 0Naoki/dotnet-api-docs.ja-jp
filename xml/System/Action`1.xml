<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b667dcf79e5ae762a2e599fd337d51ceea34b2c7" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37482406" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="fb418-101">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb418-101">The type of the parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="obj">
      <span data-ttu-id="fb418-102">このデリゲートによってカプセル化されるメソッドのパラメーター。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb418-102">The parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="fb418-103">単一のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb418-103">Encapsulates a method that has a single parameter and does not return a value.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb418-104">使用することができます、<xref:System.Action%601>カスタム デリゲートを明示的に宣言することがなく、パラメーターとして、メソッドに渡すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="fb418-104">You can use the <xref:System.Action%601> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="fb418-105">カプセル化されるメソッドは、このデリゲートで定義されているメソッド シグネチャに対応する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fb418-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="fb418-106">これは、カプセル化されるメソッドは、値によって渡された 1 つのパラメーターが必要し、値を返す必要がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="fb418-106">This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="fb418-107">(C# のメソッドが返す必要があります`void`します。</span><span class="sxs-lookup"><span data-stu-id="fb418-107">(In C#, the method must return `void`.</span></span> <span data-ttu-id="fb418-108">Visual basic で定義する必要があります、 `Sub`.`End Sub`</span><span class="sxs-lookup"><span data-stu-id="fb418-108">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="fb418-109">構築します。</span><span class="sxs-lookup"><span data-stu-id="fb418-109">construct.</span></span> <span data-ttu-id="fb418-110">これは、ことができますが無視される値を返すメソッド。)通常、このようなメソッドは、操作の実行に使用されます。</span><span class="sxs-lookup"><span data-stu-id="fb418-110">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb418-111">1 つのパラメーターがあり、値を返しますをメソッドを参照するには、ジェネリックを使用<xref:System.Func%602>代わりにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="fb418-111">To reference a method that has one parameter and returns a value, use the generic <xref:System.Func%602> delegate instead.</span></span>  
  
 <span data-ttu-id="fb418-112">使用すると、<xref:System.Action%601>デリゲートがありませんを明示的に 1 つのパラメーターを持つメソッドをカプセル化するデリゲートを定義します。</span><span class="sxs-lookup"><span data-stu-id="fb418-112">When you use the <xref:System.Action%601> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="fb418-113">たとえば、次のコードで明示的にという名前のデリゲートが宣言`DisplayMessage`への参照を割り当てると、<xref:System.Console.WriteLine%2A>メソッドまたは`ShowWindowsMessage`メソッドのデリゲートのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="fb418-113">For example, the following code explicitly declares a delegate named `DisplayMessage` and assigns a reference to either the <xref:System.Console.WriteLine%2A> method or the `ShowWindowsMessage` method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="fb418-114">次の例では、インスタンス化してこのコードを簡略化、<xref:System.Action%601>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てる代わりにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="fb418-114">The following example simplifies this code by instantiating the <xref:System.Action%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 <span data-ttu-id="fb418-115">使用することも、<xref:System.Action%601>次の例に示すように、c# の場合は、匿名メソッドを持つデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="fb418-115">You can also use the <xref:System.Action%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="fb418-116">(匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。</span><span class="sxs-lookup"><span data-stu-id="fb418-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="fb418-117">ラムダ式を割り当てることができます、<xref:System.Action%601>次の例に示すように、インスタンスを委任します。</span><span class="sxs-lookup"><span data-stu-id="fb418-117">You can also assign a lambda expression to an <xref:System.Action%601> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="fb418-118">(ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。</span><span class="sxs-lookup"><span data-stu-id="fb418-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <span data-ttu-id="fb418-119"><xref:System.Collections.Generic.List%601.ForEach%2A>と<xref:System.Array.ForEach%2A>各メソッドを<xref:System.Action%601>デリゲートをパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="fb418-119">The <xref:System.Collections.Generic.List%601.ForEach%2A> and <xref:System.Array.ForEach%2A> methods each take an <xref:System.Action%601> delegate as a parameter.</span></span> <span data-ttu-id="fb418-120">メソッドのデリゲートによってカプセル化された配列またはリスト内の各要素に対して操作を実行することができます。</span><span class="sxs-lookup"><span data-stu-id="fb418-120">The method encapsulated by the delegate allows you to perform an action on each element in the array or list.</span></span> <span data-ttu-id="fb418-121">この例では、<xref:System.Collections.Generic.List%601.ForEach%2A>図解を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="fb418-121">The example uses the <xref:System.Collections.Generic.List%601.ForEach%2A> method to provide an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb418-122">次の例では、使用、<xref:System.Action%601>の内容を印刷するデリゲートを<xref:System.Collections.Generic.List%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb418-122">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="fb418-123">この例で、`Print`一覧の内容をコンソールに表示するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="fb418-123">In this example, the `Print` method is used to display the contents of the list to the console.</span></span> <span data-ttu-id="fb418-124">さらに、c# の例では、内容をコンソールに表示する匿名メソッドの使用も示します。</span><span class="sxs-lookup"><span data-stu-id="fb418-124">In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.</span></span> <span data-ttu-id="fb418-125">例を明示的に宣言しないメモ、<xref:System.Action%601>変数。</span><span class="sxs-lookup"><span data-stu-id="fb418-125">Note that the example does not explicitly declare an <xref:System.Action%601> variable.</span></span> <span data-ttu-id="fb418-126">1 つのパラメーターを受け取るし、値を返さないメソッドへの参照を渡す代わりに、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>メソッド、その単一のパラメーターは、<xref:System.Action%601>デリゲートします。</span><span class="sxs-lookup"><span data-stu-id="fb418-126">Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method, whose single parameter is an <xref:System.Action%601> delegate.</span></span> <span data-ttu-id="fb418-127">同様に、c# などの<xref:System.Action%601>デリゲートが明示的にインスタンス化されない匿名メソッドのシグネチャのシグネチャに一致するため、<xref:System.Action%601>で想定されるデリゲート、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb418-127">Similarly, in the C# example, an <xref:System.Action%601> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <xref:System.Action%601> delegate that is expected by the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>