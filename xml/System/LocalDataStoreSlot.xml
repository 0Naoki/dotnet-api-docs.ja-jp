<Type Name="LocalDataStoreSlot" FullName="System.LocalDataStoreSlot">
  <Metadata><Meta Name="ms.openlocfilehash" Value="392b84cbf1314c72e9ffdc5527e6f137f48b35aa" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48589778" /></Metadata><TypeSignature Language="C#" Value="public sealed class LocalDataStoreSlot" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LocalDataStoreSlot extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.LocalDataStoreSlot" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LocalDataStoreSlot" />
  <TypeSignature Language="C++ CLI" Value="public ref class LocalDataStoreSlot sealed" />
  <TypeSignature Language="F#" Value="type LocalDataStoreSlot = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ローカル データを格納するメモリ スロットをカプセル化します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework には、スレッド ローカル ストレージ (TLS) を使用して 2 つのメカニズムが用意されています: スレッド相対静的フィールド、およびデータ スロット。  
  
-   スレッド相対静的フィールドは`static`フィールド (`Shared` Visual Basic でのフィールド) でマークされている、<xref:System.ThreadStaticAttribute>属性。 データ スロットより優れたパフォーマンスを提供し、コンパイル時の型チェックを有効にします。  
  
-   データ スロットは、時間がかかり、スレッド相対静的フィールドよりも使いにくくします。 型としてデータを格納することも、<xref:System.Object>ので、使用する前に、正しい型にキャストする必要があります。 ただし、コンパイル時に静的フィールドを割り当てるが不足している情報がある場合は、データ スロットを使用することができます。  
  
 詳細については、TLS を使用して、次を参照してください。[スレッド ローカル ストレージ: スレッド相対静的フィールドとデータ スロット](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)します。  
  
 同様に、.NET Framework は、コンテキストのローカル ストレージを使用して 2 つのメカニズムを提供します。 コンテキスト相対静的フィールドとデータ スロット。 コンテキスト相対静的フィールドは静的フィールドでマークされている、<xref:System.ContextStaticAttribute>属性。 これら 2 つのメカニズムを使用して間のトレードオフは、スレッド相対静的フィールドとデータ スロット間のトレードオフに似ています。  
  
 <xref:System.LocalDataStoreSlot>構造として、ローカルがスレッドのメモリのメカニズムを格納し、それぞれのスレッドおよびコンテキストに固有のデータを格納するコンテキストを使用できます。 共通言語ランタイムは、作成時に、各プロセスにマルチ スロットのデータ ストア配列を割り当てます。 スレッドまたはコンテキストの呼び出しをさまざまな機能と、データ ストア内のデータ スロットの割り当てを格納およびスロットにデータ値を取得、データ スロットを解放はスレッドまたはコンテキスト オブジェクトの有効期限が切れた後に再利用します。  
  
 データ スロットでは、スレッドまたはコンテキストごとに一意その値はスレッドまたはコンテキストのオブジェクト間で共有されません。 インデックス番号または名前で、データ スロットを割り当てることができます。  
  
 ローカル データの保存に関する詳細については、次を参照してください。<xref:System.Threading.Thread>または<xref:System.Runtime.Remoting.Contexts.Context>します。 <xref:System.LocalDataStoreSlot>クラスがなどのメソッドで使用されます<xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=nameWithType>、 <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=nameWithType>、 <xref:System.Threading.Thread.GetData%2A?displayProperty=nameWithType>、および<xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=nameWithType>; いずれかのことはありませんが、独自のメソッドを使用する必要があります。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Runtime.Remoting.Contexts.Context" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~LocalDataStoreSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.LocalDataStoreSlot.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!LocalDataStoreSlot ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="localDataStoreSlot.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ガベージ コレクターが <see cref="T:System.LocalDataStoreSlot" /> を再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ガベージ コレクター<xref:System.LocalDataStoreSlot.Finalize%2A>と現在のオブジェクトが完了するを準備します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>