<Type Name="AppContext" FullName="System.AppContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c2c4803637c97019a9a061ec4bca736535264ba3" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46621010" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e1bae-101">アプリケーションのコンテキストについてのデータを設定したり取得したりするためのメンバーを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1bae-101">Provides members for setting and retrieving data about an application's context.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1bae-102"><xref:System.AppContext>クラスにより、ライブラリの作成者に、ユーザーの新しい機能についての統一されたオプトアウト メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-102">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="e1bae-103">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-103">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="e1bae-104">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="e1bae-104">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="e1bae-105">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="e1bae-105">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
## <a name="appcontext-for-library-developers"></a><span data-ttu-id="e1bae-106">ライブラリ開発者 AppContext</span><span class="sxs-lookup"><span data-stu-id="e1bae-106">AppContext for library developers</span></span>  
 <span data-ttu-id="e1bae-107">ライブラリを使用して、<xref:System.AppContext>スイッチ、ライブラリのユーザーがそれらのライブラリの動作に影響を与えるスイッチを設定できるクラスを定義し、互換性を公開します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-107">Libraries use  the <xref:System.AppContext> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</span></span> <span data-ttu-id="e1bae-108">ライブラリは、既定では新しい機能を提供し、スイッチが設定されている場合のみそれを変更する (つまり以前の機能を提供する) ことができます。</span><span class="sxs-lookup"><span data-stu-id="e1bae-108">By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</span></span>  <span data-ttu-id="e1bae-109">これにより、以前の動作に依存している呼び出し元をサポートしながら、既存の API の新しい動作を提供するライブラリです。</span><span class="sxs-lookup"><span data-stu-id="e1bae-109">This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</span></span>  
  
### <a name="defining-the-switch-name"></a><span data-ttu-id="e1bae-110">スイッチの名前を定義します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-110">Defining the switch name</span></span>  
 <span data-ttu-id="e1bae-111">動作の変更をオプトアウトするライブラリのコンシューマーを許可する最も一般的な方法では、名前付きのスイッチを定義します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-111">The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</span></span>  <span data-ttu-id="e1bae-112">その`value`要素は、スイッチの名前で構成される名前と値のペアとその<xref:System.Boolean>値。</span><span class="sxs-lookup"><span data-stu-id="e1bae-112">Its `value` element is a name/value pair that consists of the name of a switch and its <xref:System.Boolean> value.</span></span>  <span data-ttu-id="e1bae-113">既定では、スイッチが常に暗黙的に`false`の新しい動作を提供します (および、新しい動作は既定でオプトイン、)。</span><span class="sxs-lookup"><span data-stu-id="e1bae-113">By default, the switch is always implicitly `false`, which provides the new behavior (and makes the new behavior opt-in by default).</span></span> <span data-ttu-id="e1bae-114">スイッチの設定`true`により従来の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-114">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="e1bae-115">スイッチに明示的に設定`false`も、新しい動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-115">Explicitly setting the switch to `false` also provides the new behavior.</span></span>  
  
 <span data-ttu-id="e1bae-116">ライブラリによって公開される正式なコントラクトであるために、スイッチ名に一貫性のある形式を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1bae-116">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="e1bae-117">2 つの明確な形式を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-117">The following are two obvious formats.</span></span>  
  
-   <span data-ttu-id="e1bae-118">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="e1bae-118">*Switch*.*namespace*.*switchname*</span></span>  
  
-   <span data-ttu-id="e1bae-119">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="e1bae-119">*Switch*.*library*.*switchname*</span></span>  
  
 <span data-ttu-id="e1bae-120">定義し、スイッチを文書化すると、使用できる呼び出し元を追加して、レジストリを使用して、 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)要素に、アプリケーション構成ファイル、または呼び出すことによって、 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>メソッド プログラムを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-120">Once you define and document the switch, callers can use it by using the registry, by adding an  [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element to their application configuration file, or by calling the  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method programmatically.</span></span> <span data-ttu-id="e1bae-121">参照してください、 [AppContext ライブラリのコンシューマーの](#ForConsumers)呼び出し元が使用しての値を設定する方法についての詳細については<xref:System.AppContext>スイッチを構成します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-121">See the [AppContext for library consumers](#ForConsumers) section for more information about how callers use and set the value of <xref:System.AppContext> configuration switches.</span></span>  
  
 <span data-ttu-id="e1bae-122">共通言語ランタイムは、アプリケーションを実行するときに自動的に、レジストリの互換性設定を読み取って、アプリケーションを設定するには、アプリケーション構成ファイルを読み込みます<xref:System.AppContext>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="e1bae-122">When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <xref:System.AppContext> instance.</span></span> <span data-ttu-id="e1bae-123"><xref:System.AppContext>プログラムによって、呼び出し元またはランタイムのインスタンスが設定されると、呼び出しなど、任意のアクションを実行する必要はありません、<xref:System.AppContext.SetSwitch%2A>を構成する、メソッド、<xref:System.AppContext>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="e1bae-123">Because the <xref:System.AppContext> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <xref:System.AppContext.SetSwitch%2A> method,  to configure the <xref:System.AppContext> instance.</span></span>  
  
### <a name="checking-the-setting"></a><span data-ttu-id="e1bae-124">設定を確認</span><span class="sxs-lookup"><span data-stu-id="e1bae-124">Checking the setting</span></span>  
 <span data-ttu-id="e1bae-125">コンシューマーがスイッチと適切に呼び出すことによって動作の値を宣言されているかどうかをチェックすることができますし、<xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-125">You can then check if a consumer has declared the value of the switch and act appropriately by calling the <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e1bae-126">メソッドを返します`true`場合、`switchName`引数があるし、メソッドが返す場合、その`isEnabled`引数は、スイッチの値を示します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-126">The method returns `true` if the `switchName` argument is found, and when the method returns, its `isEnabled` argument indicates the value of the switch.</span></span>  <span data-ttu-id="e1bae-127">それ以外の場合、メソッドは `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-127">Otherwise, the method returns `false`.</span></span>  
  
### <a name="an-example"></a><span data-ttu-id="e1bae-128">例</span><span class="sxs-lookup"><span data-stu-id="e1bae-128">An example</span></span>  
 <span data-ttu-id="e1bae-129">次の例では、使用、<xref:System.AppContext>ライブラリ メソッドの元の動作を選択する顧客を許可するクラス。</span><span class="sxs-lookup"><span data-stu-id="e1bae-129">The following example illustrates the use of the <xref:System.AppContext> class to allow the customer to choose the original behavior of a library method.</span></span>   <span data-ttu-id="e1bae-130">次にという名前のライブラリのバージョン 1.0`StringLibrary`します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-130">The following is version 1.0 of a library named `StringLibrary`.</span></span> <span data-ttu-id="e1bae-131">定義、`SubstringStartsAt`より大きな文字列内の部分文字列の開始インデックスを決定する序数に基づく比較を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-131">It defines a `SubstringStartsAt` method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</span></span>  
  
 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]  
  
 <span data-ttu-id="e1bae-132">次の例は、このライブラリを使用して「考古」で"archæ"の部分文字列の開始インデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-132">The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</span></span> <span data-ttu-id="e1bae-133">メソッドは、序数に基づく比較を実行するため、部分文字列が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="e1bae-133">Because the method performs an ordinal comparison, the substring cannot be found.</span></span>  
  
 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]  
  
 <span data-ttu-id="e1bae-134">ただし、変更は、ライブラリのバージョン 2、`SubstringStartsAt`カルチャに依存した比較を使用する方法。</span><span class="sxs-lookup"><span data-stu-id="e1bae-134">Version 2 of the library, however, changes the `SubstringStartsAt` method to use culture-sensitive comparison.</span></span>  
  
 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]  
  
 <span data-ttu-id="e1bae-135">ライブラリの新しいバージョンに対して実行するアプリを再コンパイルするときにインデックス 4「考古」で"archæ"部分文字列が見つかったことを今すぐ報告します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-135">When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</span></span>  
  
 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]  
  
 <span data-ttu-id="e1bae-136">この変更は、定義することで、元の動作に依存するアプリケーション互換性に影響するを防止できる、 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)スイッチします。</span><span class="sxs-lookup"><span data-stu-id="e1bae-136">This change can be prevented from breaking the applications that depend on the original behavior by defining an [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) switch.</span></span> <span data-ttu-id="e1bae-137">この場合、スイッチが名前付き`StringLibrary.DoNotUseCultureSensitiveComparison`します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-137">In this case, the switch is named `StringLibrary.DoNotUseCultureSensitiveComparison`.</span></span> <span data-ttu-id="e1bae-138">既定値、`false`ライブラリでは、バージョン 2.0 のカルチャに依存した比較を実行することを示します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-138">Its default value, `false`, indicates that the library should perform its version 2.0 culture-sensitive comparison.</span></span> <span data-ttu-id="e1bae-139">`true` ライブラリでは、バージョン 1.0 の序数に基づく比較を実行することを示します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-139">`true` indicates that the library should perform its version 1.0 ordinal comparison.</span></span>  <span data-ttu-id="e1bae-140">前のコードをわずかに変更は、ライブラリ コンシューマーは、メソッドが実行する比較の種類を決定するスイッチを設定できます。</span><span class="sxs-lookup"><span data-stu-id="e1bae-140">A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</span></span>  
  
 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]  
  
 <span data-ttu-id="e1bae-141">アプリケーションは、バージョン 1.0 の動作を復元する次の構成ファイルを使用できます。 場合、</span><span class="sxs-lookup"><span data-stu-id="e1bae-141">If application can then use the following configuration file to restore the version 1.0 behavior.</span></span>  
  
```xml  
  
<configuration>  
   <runtime>  
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />   
   </runtime>  
</configuration>  
  
```  
  
 <span data-ttu-id="e1bae-142">アプリケーションが実行される、構成ファイルが存在すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="e1bae-142">When the application is run with the configuration file present, it produces the following output:</span></span>  
  
```  
'archæ' not found in 'The archaeologist'  
```  
  
<a name="ForConsumers"></a>   
## <a name="appcontext-for-library-consumers"></a><span data-ttu-id="e1bae-143">ライブラリのコンシューマーの AppContext</span><span class="sxs-lookup"><span data-stu-id="e1bae-143">AppContext for library consumers</span></span>  
 <span data-ttu-id="e1bae-144">ライブラリのコンシューマーの場合、<xref:System.AppContext>クラスでは、ライブラリの新機能のライブラリのメソッドのオプトアウト メカニズムを利用できます。</span><span class="sxs-lookup"><span data-stu-id="e1bae-144">If you are the consumer of a library, the <xref:System.AppContext> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</span></span>   <span data-ttu-id="e1bae-145">個々 のメソッドを呼び出しているクラス ライブラリのでは、有効にするか、新しい動作を無効にする特定のスイッチを定義します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-145">Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</span></span> <span data-ttu-id="e1bae-146">スイッチの値は、ブール値です。</span><span class="sxs-lookup"><span data-stu-id="e1bae-146">The value of the switch  is a Boolean.</span></span> <span data-ttu-id="e1bae-147">場合は`false`、既定値は通常、新しい動作が有効な場合は`true`、新しい動作を無効にすると、およびメンバーは以前のように動作します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-147">If it is `false`, which is typically the default value, the new behavior is enabled; if it is `true`, the new behavior is disabled, and the member behaves as it did previously.</span></span>  
  
 <span data-ttu-id="e1bae-148">4 つの方法では、スイッチの値を設定できます。</span><span class="sxs-lookup"><span data-stu-id="e1bae-148">You can set the value of a switch in one of four ways:</span></span>  
  
-   <span data-ttu-id="e1bae-149">呼び出すことによって、<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>コード内のメソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-149">By calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method in your code.</span></span>  <span data-ttu-id="e1bae-150">`switchName`引数、スイッチ名を定義して、`isEnabled`プロパティは、スイッチの値を定義します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-150">The `switchName` argument defines the switch name, and the `isEnabled` property defines the value of the switch.</span></span> <span data-ttu-id="e1bae-151"><xref:System.AppContext>静的クラスでは、アプリケーションごとのドメインごとに使用可能になります。</span><span class="sxs-lookup"><span data-stu-id="e1bae-151">Because <xref:System.AppContext> is a static class, it is available on a per-application domain basis.</span></span>  
  
     <span data-ttu-id="e1bae-152">呼び出す、<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>がアプリケーションのスコープは、アプリケーションのみに影響します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-152">Calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> has application scope; that is, it affects only the application.</span></span>  
  
-   <span data-ttu-id="e1bae-153">追加することで、`<AppContextSwitchOverrides>`要素を[\<ランタイム >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) app.config ファイルのセクション。</span><span class="sxs-lookup"><span data-stu-id="e1bae-153">By adding an `<AppContextSwitchOverrides>` element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your app.config file.</span></span> <span data-ttu-id="e1bae-154">スイッチが 1 つの属性を持つ`value`値が、スイッチ名とその値の両方を含むキー/値ペアを表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="e1bae-154">The switch has a single attribute, `value`, whose value is a string that represents a key/value pair containing both the switch name and its value.</span></span>  
  
     <span data-ttu-id="e1bae-155">複数のスイッチを定義する各スイッチのキー/値のペアを区切る、 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)要素の`value`属性をセミコロンで区切ります。</span><span class="sxs-lookup"><span data-stu-id="e1bae-155">To define multiple switches, separate each switch's key/value pair in the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element's `value` attribute with a semicolon.</span></span> <span data-ttu-id="e1bae-156">その場合は、`<AppContextSwitchOverrides>`要素には、次の形式。</span><span class="sxs-lookup"><span data-stu-id="e1bae-156">In that case, the `<AppContextSwitchOverrides>` element has the following format:</span></span>  
  
    ```xml  
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />  
    ```  
  
     <span data-ttu-id="e1bae-157">使用して、`<AppContextSwitchOverrides>`構成設定を定義する要素は、アプリケーションのスコープを持つ; は、アプリケーションのみに影響します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-157">Using the `<AppContextSwitchOverrides>` element to define a configuration setting has application scope; that is, it affects only the application.</span></span>  

    > [!NOTE]    
    > <span data-ttu-id="e1bae-158">.NET Framework で定義されているスイッチについては、次を参照してください。、 [ \<AppContextSwitchOverrides > 要素](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-158">For information on the switches defined by the .NET Framework, see the [\<AppContextSwitchOverrides> element](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).</span></span>

-   <span data-ttu-id="e1bae-159">名前を持つスイッチの名前は、文字列値を追加してに、`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`レジストリのキー。</span><span class="sxs-lookup"><span data-stu-id="e1bae-159">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="e1bae-160">その値の文字列表現をする必要があります、<xref:System.Boolean>で解析できる<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>メソッドは、"False"または"false""True"を"true"である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1bae-160">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span> <span data-ttu-id="e1bae-161">ランタイムは、その他の値を検出すると、スイッチは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e1bae-161">If the runtime encounters any other value, it ignores the switch.</span></span>  
  
     <span data-ttu-id="e1bae-162">レジストリを使用して定義する、<xref:System.AppContext>スイッチは、マシンのスコープを持つ; は、コンピューターで実行されているすべてのアプリケーションに影響します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-162">Using the registry to define an <xref:System.AppContext> switch has machine scope; that is, it affects every application running on the machine.</span></span>  

- <span data-ttu-id="e1bae-163">追加する ASP.NET アプリケーションで、 [\<追加 >](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md)要素を[ \<appSettings >](~/docs/framework/configure-apps/file-schema/appsettings/index.md) web.config ファイルのセクション。</span><span class="sxs-lookup"><span data-stu-id="e1bae-163">For ASP.NET applications, you add an [\<Add>](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md) element to the [\<appSettings>](~/docs/framework/configure-apps/file-schema/appsettings/index.md) section of the web.config file.</span></span> <span data-ttu-id="e1bae-164">例:</span><span class="sxs-lookup"><span data-stu-id="e1bae-164">For example:</span></span>

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```
   
 <span data-ttu-id="e1bae-165">1 つ以上の方法で、同じスイッチを設定する必要のある設定を上書き、他のユーザーを決定するための優先順位の順序は。</span><span class="sxs-lookup"><span data-stu-id="e1bae-165">If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</span></span>  
  
1.  <span data-ttu-id="e1bae-166">プログラムによる設定です。</span><span class="sxs-lookup"><span data-stu-id="e1bae-166">The programmatic setting.</span></span>  
  
2.  <span data-ttu-id="e1bae-167">アプリケーション構成ファイルまたは web.config ファイルで設定します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-167">The setting in the app config file or the web.config file.</span></span>  
  
3.  <span data-ttu-id="e1bae-168">レジストリ設定です。</span><span class="sxs-lookup"><span data-stu-id="e1bae-168">The registry setting.</span></span>  
  
 <span data-ttu-id="e1bae-169">次に、ファイルの URI を渡す単純なアプリケーションを<xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-169">The following is a simple application that passes a file URI to the <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="e1bae-170">.NET Framework 4.6 で実行すると、ときにスロー、<xref:System.ArgumentException>ため`file://`ファイル パスの有効な部分ではなくなりました。</span><span class="sxs-lookup"><span data-stu-id="e1bae-170">When run under the .NET Framework 4.6, it throws an <xref:System.ArgumentException> because `file://` is no longer a valid part of a file path.</span></span>  
  
 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]  
  
 <span data-ttu-id="e1bae-171">メソッドの以前の動作を復元し、例外を防ぐため、追加することができます、`Switch.System.IO.UseLegacyPathHandling`の例では、アプリケーション構成ファイルに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="e1bae-171">To restore the method's previous behavior and prevent the exception, you can add the `Switch.System.IO.UseLegacyPathHandling` switch to the application configuration file for the example:</span></span>  
  
```xml  
<configuration>  
    <runtime>  
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />    
    </runtime>  
</configuration>  
```  
## <a name="see-also"></a><span data-ttu-id="e1bae-172">関連項目</span><span class="sxs-lookup"><span data-stu-id="e1bae-172">See also</span></span>
[<span data-ttu-id="e1bae-173">AppContext スイッチ</span><span class="sxs-lookup"><span data-stu-id="e1bae-173">AppContext switch</span></span>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/1eb2fae3-de4b-45b6-852f-517c39b751bd">
      <span data-ttu-id="e1bae-174">&lt;ランタイム&gt;要素</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1bae-174">&lt;runtime&gt; Element</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/4ce07f47-7ddb-4d91-b067-501bd8b88752">
      <span data-ttu-id="e1bae-175">&lt;AppContextSwitchOverrides&gt;要素</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1bae-175">&lt;AppContextSwitchOverrides&gt; Element</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1bae-176">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリのパス名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-176">Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1bae-177">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリのパス名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-177">the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1bae-178">これは、アプリケーション ドメインのプロパティごと。</span><span class="sxs-lookup"><span data-stu-id="e1bae-178">This is a per application domain property.</span></span> <span data-ttu-id="e1bae-179">その値に対応して、<xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType>現在のアプリケーション ドメインのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="e1bae-179">Its value corresponds to the <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> property of the current application domain.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e1bae-180">データ要素の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-180">The name of the data element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1bae-181">現在のアプリケーション ドメインに割り当てられている名前付きデータ要素の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-181">Returns the value of the named data element assigned to the current application domain.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1bae-182">
            <paramref name="name" /> が名前付きの値を識別する場合は <paramref name="name" /> の値。それ以外の場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-182">The value of <paramref name="name" />, if <paramref name="name" /> identifies a named value; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">
          <span data-ttu-id="e1bae-183">スイッチの名前です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-183">The name of the switch.</span>
          </span>
        </param>
        <param name="isEnabled">
          <span data-ttu-id="e1bae-184">スイッチの値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-184">The value of the switch.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1bae-185">スイッチの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-185">Sets the value of a switch.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1bae-186"><xref:System.AppContext>クラスにより、ライブラリの作成者に、ユーザーの新しい機能についての統一されたオプトアウト メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-186">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="e1bae-187">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-187">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="e1bae-188">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="e1bae-188">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="e1bae-189">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="e1bae-189">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
 <span data-ttu-id="e1bae-190"><xref:System.AppContext.SetSwitch%2A>メソッドは、スイッチの値を宣言するアプリケーション (またはライブラリ) によって呼び出されます (これは常に、<xref:System.Boolean>値)、依存するライブラリを定義します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-190">The <xref:System.AppContext.SetSwitch%2A> method is called by an application (or a library) to declare the value of a switch (which is always a <xref:System.Boolean> value) that a dependent library defines.</span></span> <span data-ttu-id="e1bae-191">スイッチは、常に暗黙的に`false`、新しい動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-191">The switch is always implicitly `false`, which provides the new behavior.</span></span> <span data-ttu-id="e1bae-192">スイッチの設定`true`により従来の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-192">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="e1bae-193">スイッチに明示的に設定`false`も、新しい動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-193">Explicitly setting the switch to `false` also provides the new behavior.</span></span> <span data-ttu-id="e1bae-194">依存するライブラリは、スイッチの値を呼び出して確認できますし、<xref:System.AppContext.TryGetSwitch%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-194">The dependent library can then check the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e1bae-195">ライブラリによって公開される正式なコントラクトであるために、スイッチ名に一貫性のある形式を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1bae-195">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="e1bae-196">2 つの明確な形式を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-196">The following are two obvious formats.</span></span>  
>   
>  -   <span data-ttu-id="e1bae-197">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="e1bae-197">*Switch*.*namespace*.*switchname*</span></span>  
> -   <span data-ttu-id="e1bae-198">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="e1bae-198">*Switch*.*library*.*switchname*</span></span>  
  
 <span data-ttu-id="e1bae-199">プログラムでは、スイッチの値の設定に加えて、.NET Framework で実行されているアプリケーションにも設定できます。</span><span class="sxs-lookup"><span data-stu-id="e1bae-199">For applications running on the .NET Framework, in addition to setting the value of a switch programmatically, it can also be set:</span></span>  
  
-   <span data-ttu-id="e1bae-200">スイッチの名前と値を追加することによって、 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)内の要素、 [\<ランタイム >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)アプリケーション構成ファイルのセクション。</span><span class="sxs-lookup"><span data-stu-id="e1bae-200">By adding the switch name and value to the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element in the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of an application configuration file.</span></span> <span data-ttu-id="e1bae-201">たとえば、次はという名前のスイッチを定義します。`Libraries.FPLibrary.UseExactFloatingPointComparison`値が`False`します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-201">For example, the following defines a switch named `Libraries.FPLibrary.UseExactFloatingPointComparison` whose value is `False`.</span></span>  
  
    ```xml  
  
    <configuration>  
       <runtime>  
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />   
       </runtime>  
    </configuration>  
  
    ```  
  
-   <span data-ttu-id="e1bae-202">名前を持つスイッチの名前は、文字列値を追加してに、`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`レジストリのキー。</span><span class="sxs-lookup"><span data-stu-id="e1bae-202">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="e1bae-203">その値の文字列表現をする必要があります、<xref:System.Boolean>で解析できる<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>メソッドは、"False"または"false""True"を"true"である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1bae-203">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span>  
  
 <span data-ttu-id="e1bae-204">場合`switchName`が既に存在するによっての値が上書きされる、`isEnabled`引数。</span><span class="sxs-lookup"><span data-stu-id="e1bae-204">If `switchName` already exists, its value is overwritten by the `isEnabled` argument.</span></span>  <span data-ttu-id="e1bae-205">最新の呼び出し、<xref:System.AppContext.SetSwitch%2A>メソッドは、アプリ構成ファイル、または前の呼び出しでは、レジストリで定義されている値をオーバーライド、<xref:System.AppContext.SetSwitch%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-205">That is, the most recent call to the <xref:System.AppContext.SetSwitch%2A> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <xref:System.AppContext.SetSwitch%2A> method.</span></span>  
 
 ### <a name="appcontextsetswitch-and-net-core"></a><span data-ttu-id="e1bae-206">AppContext.SetSwitch と .NET Core</span><span class="sxs-lookup"><span data-stu-id="e1bae-206">AppContext.SetSwitch and .NET Core</span></span>

<span data-ttu-id="e1bae-207">.NET core でのプログラムによる呼び出しをサポートしている、<xref:System.AppContext.SetSwitch%2A>メソッドのみです。</span><span class="sxs-lookup"><span data-stu-id="e1bae-207">.NET Core supports programmatic calls with the <xref:System.AppContext.SetSwitch%2A> method only.</span></span> <span data-ttu-id="e1bae-208">次のスイッチがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="e1bae-208">The following switches are supported:</span></span>

|<span data-ttu-id="e1bae-209">切り替え</span><span class="sxs-lookup"><span data-stu-id="e1bae-209">Switch</span></span>|<span data-ttu-id="e1bae-210">値</span><span class="sxs-lookup"><span data-stu-id="e1bae-210">Values</span></span>|<span data-ttu-id="e1bae-211">説明</span><span class="sxs-lookup"><span data-stu-id="e1bae-211">Description</span></span>|
|--|--|--|
|`System.Net.Http.useSocketsHttpHandler` |`true`|`false`|<span data-ttu-id="e1bae-212">高度なのかどうかを判断します。 ネットワーク Api など<xref:System.Net.Http.HttpClient>使用<xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>(`true`) または<xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType>(`false`)。</span><span class="sxs-lookup"><span data-stu-id="e1bae-212">Determines whether high-level networking APIs such as <xref:System.Net.Http.HttpClient> use <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) or <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).</span></span>|   
  
## Examples  
 <span data-ttu-id="e1bae-213">次のコード行という名前のスイッチを設定する`Switch.AmazingLib.ThrowOnException`に`true`、レガシーの動作を有効にします。</span><span class="sxs-lookup"><span data-stu-id="e1bae-213">The following line of code sets a switch named `Switch.AmazingLib.ThrowOnException` to `true`, which enables a legacy behavior.</span></span> <span data-ttu-id="e1bae-214">ライブラリがライブラリのコンシューマーが呼び出すことによって、スイッチの値を設定するかどうかを確認できますし、<xref:System.AppContext.TryGetSwitch%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-214">The library can then check whether a library consumer has set the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>  
  
 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e1bae-215">
            <paramref name="switchName" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-215">
              <paramref name="switchName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e1bae-216">
            <paramref name="switchName" /> は <see cref="F:System.String.Empty" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-216">
              <paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1bae-217">現在のアプリケーションの対象となるフレームワークのバージョンの名前を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-217">Gets the name of the framework version targeted by the current application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1bae-218">現在のアプリケーションの対象となるフレームワークのバージョンの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-218">The name of the framework version targeted by the current application.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1bae-219">値に対応するターゲット フレームワークのバージョンの名前、<xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="e1bae-219">The name of the target framework version corresponds to the value of the <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e1bae-220">.NET Framework のターゲット フレームワーク名の一覧を参照してください、 [ &lt;supportedRuntime&gt;要素](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)要素。</span><span class="sxs-lookup"><span data-stu-id="e1bae-220">For a list of target framework names for the .NET Framework, see the [&lt;supportedRuntime&gt; Element](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) element.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string *  -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">
          <span data-ttu-id="e1bae-221">スイッチの名前です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-221">The name of the switch.</span>
          </span>
        </param>
        <param name="isEnabled">
          <span data-ttu-id="e1bae-222">このメソッドが返されるときに <c>switchName</c> が見つかった場合、<c>switchName</c> の値が含まれます。<c>switchName</c> が見つからなかった場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-222">When this method returns, contains the value of <c>switchName</c> if <c>switchName</c> was found, or <see langword="false" /> if <c>switchName</c> was not found.</span>
          </span>
          <span data-ttu-id="e1bae-223">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-223">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1bae-224">スイッチの値の取得を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-224">Tries to get the value of a switch.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1bae-225">
            <paramref name="switchName" /> が設定され、<paramref name="isEnabled" /> の引数にスイッチの値が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-225">
              <see langword="true" /> if <paramref name="switchName" /> was set and the <paramref name="isEnabled" /> argument contains the value of the switch; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1bae-226"><xref:System.AppContext>クラスにより、ライブラリの作成者に、ユーザーの新しい機能についての統一されたオプトアウト メカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-226">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="e1bae-227">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-227">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="e1bae-228">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="e1bae-228">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="e1bae-229">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="e1bae-229">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
 <span data-ttu-id="e1bae-230">共通言語ランタイムが自動的に割り当てられているスイッチを追加、<xref:System.AppContext>レジストリおよびアプリケーションの構成ファイルを読み取ることで。</span><span class="sxs-lookup"><span data-stu-id="e1bae-230">The common language runtime automatically populates the switches assigned to an <xref:System.AppContext> instance by reading the registry and the application's configuration file.</span></span> <span data-ttu-id="e1bae-231">これらのスイッチの値をオーバーライドし、こと、および呼び出すことによって、新しいスイッチを追加、<xref:System.AppContext.SetSwitch%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-231">The value of these switches can then be overridden, and new switches added, by calling the <xref:System.AppContext.SetSwitch%2A> method.</span></span>  
  
 <span data-ttu-id="e1bae-232">ライブラリを呼び出し、<xref:System.AppContext.TryGetSwitch%2A>そのコンシューマーがスイッチの値が宣言されているし、を適切に動作するかどうかをチェックするメソッド。</span><span class="sxs-lookup"><span data-stu-id="e1bae-232">A library calls the <xref:System.AppContext.TryGetSwitch%2A> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</span></span>  <span data-ttu-id="e1bae-233">既定では、スイッチが定義されていない場合、新しい機能が有効に.</span><span class="sxs-lookup"><span data-stu-id="e1bae-233">By default, if the switch is not defined, the new functionality is enabled..</span></span> <span data-ttu-id="e1bae-234">スイッチが定義され、その値が場合`false`、新しい機能も有効にします。</span><span class="sxs-lookup"><span data-stu-id="e1bae-234">If the switch is defined and its value is `false`, the new functionality is also enabled.</span></span> <span data-ttu-id="e1bae-235">その値が場合`true`、従来の動作が有効になっています。</span><span class="sxs-lookup"><span data-stu-id="e1bae-235">If its value is `true`, the legacy behavior is enabled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1bae-236">次の例は、ライブラリのコンシューマーがという名前のスイッチを設定するかどうかを判断`Switch.AmazingLib.ThrowOnException`します。</span><span class="sxs-lookup"><span data-stu-id="e1bae-236">The following example determines whether a library consumer has set a switch named `Switch.AmazingLib.ThrowOnException`.</span></span>  
  
 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e1bae-237">
            <paramref name="switchName" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-237">
              <paramref name="switchName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e1bae-238">
            <paramref name="switchName" /> は <see cref="F:System.String.Empty" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1bae-238">
              <paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>