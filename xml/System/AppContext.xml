<Type Name="AppContext" FullName="System.AppContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="de2b5eddaaa2bb43dcc7b608c490b41f3a8c1713" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="75d34-101">アプリケーションのコンテキストについてのデータを設定したり取得したりするためのメンバーを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="75d34-101">Provides members for setting and retrieving data about an application's context.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d34-102"><xref:System.AppContext>クラスには、そのユーザーに新機能の uniform オプトアウト メカニズムを提供するライブラリの作成者ができるようにします。</span><span class="sxs-lookup"><span data-stu-id="75d34-102">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="75d34-103">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="75d34-103">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="75d34-104">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="75d34-104">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="75d34-105">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="75d34-105">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
## <a name="appcontext-for-library-developers"></a><span data-ttu-id="75d34-106">ライブラリ開発者 AppContext</span><span class="sxs-lookup"><span data-stu-id="75d34-106">AppContext for library developers</span></span>  
 <span data-ttu-id="75d34-107">ライブラリを使用して、<xref:System.AppContext>ライブラリ ユーザーがライブラリの動作に影響を与えるそれらのスイッチを設定中に、定義し、の互換性を公開するクラスが切り替わります。</span><span class="sxs-lookup"><span data-stu-id="75d34-107">Libraries use  the <xref:System.AppContext> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</span></span> <span data-ttu-id="75d34-108">ライブラリは、既定では新しい機能を提供し、スイッチが設定されている場合のみそれを変更する (つまり以前の機能を提供する) ことができます。</span><span class="sxs-lookup"><span data-stu-id="75d34-108">By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</span></span>  <span data-ttu-id="75d34-109">これにより、以前の動作に依存している呼び出し元をサポートしながら既存の API の新しい動作を提供するライブラリです。</span><span class="sxs-lookup"><span data-stu-id="75d34-109">This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</span></span>  
  
### <a name="defining-the-switch-name"></a><span data-ttu-id="75d34-110">スイッチの名前を定義します。</span><span class="sxs-lookup"><span data-stu-id="75d34-110">Defining the switch name</span></span>  
 <span data-ttu-id="75d34-111">動作の変更から除外するライブラリのコンシューマーを許可する最も一般的な方法では、名前付きのスイッチを定義します。</span><span class="sxs-lookup"><span data-stu-id="75d34-111">The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</span></span>  <span data-ttu-id="75d34-112">その`value`要素は、スイッチの名前で構成される名前と値のペアと、その<xref:System.Boolean>値。</span><span class="sxs-lookup"><span data-stu-id="75d34-112">Its `value` element is a name/value pair that consists of the name of a switch and its <xref:System.Boolean> value.</span></span>  <span data-ttu-id="75d34-113">既定では、スイッチは常に暗黙的に`false`する、新しい動作 (なり、新しい動作オプトイン既定で)。</span><span class="sxs-lookup"><span data-stu-id="75d34-113">By default, the switch is always implicitly `false`, which provides the new behavior (and makes the new behavior opt-in by default).</span></span> <span data-ttu-id="75d34-114">スイッチに設定`true`により従来の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="75d34-114">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="75d34-115">明示的に設定スイッチ`false`も、新しい動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="75d34-115">Explicitly setting the switch to `false` also provides the new behavior.</span></span>  
  
 <span data-ttu-id="75d34-116">ライブラリによって公開される正式なコントラクトであるために、スイッチ名に一貫性のある形式を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="75d34-116">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="75d34-117">2 つの明確な形式を次に示します。</span><span class="sxs-lookup"><span data-stu-id="75d34-117">The following are two obvious formats.</span></span>  
  
-   <span data-ttu-id="75d34-118">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="75d34-118">*Switch*.*namespace*.*switchname*</span></span>  
  
-   <span data-ttu-id="75d34-119">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="75d34-119">*Switch*.*library*.*switchname*</span></span>  
  
 <span data-ttu-id="75d34-120">後定義して、スイッチを文書化して、呼び出し元を使用できますを追加して、レジストリを使用して、 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)要素に、アプリケーション構成ファイルまたは呼び出すことによって、 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>メソッド コードからです。</span><span class="sxs-lookup"><span data-stu-id="75d34-120">Once you define and document the switch, callers can use it by using the registry, by adding an  [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element to their application configuration file, or by calling the  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method programmatically.</span></span> <span data-ttu-id="75d34-121">参照してください、[ライブラリのコンシューマーにとって AppContext](#ForConsumers)呼び出し元の使用方法およびの値の設定方法の詳細については、セクション<xref:System.AppContext>構成スイッチ。</span><span class="sxs-lookup"><span data-stu-id="75d34-121">See the [AppContext for library consumers](#ForConsumers) section for more information about how callers use and set the value of <xref:System.AppContext> configuration switches.</span></span>  
  
 <span data-ttu-id="75d34-122">共通言語ランタイムは、アプリケーションを実行するときに自動的にレジストリの互換性設定を読み取り、アプリケーションを作成するために、アプリケーション構成ファイルを読み込みます<xref:System.AppContext>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="75d34-122">When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <xref:System.AppContext> instance.</span></span> <span data-ttu-id="75d34-123"><xref:System.AppContext> 、呼び出し元のプログラムによって、またはランタイムによって、インスタンスが設定されると、呼び出しなど、任意のアクションを実行する必要はありません、<xref:System.AppContext.SetSwitch%2A>構成する方法、<xref:System.AppContext>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="75d34-123">Because the <xref:System.AppContext> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <xref:System.AppContext.SetSwitch%2A> method,  to configure the <xref:System.AppContext> instance.</span></span>  
  
### <a name="checking-the-setting"></a><span data-ttu-id="75d34-124">設定を確認しています</span><span class="sxs-lookup"><span data-stu-id="75d34-124">Checking the setting</span></span>  
 <span data-ttu-id="75d34-125">チェックして、コンシューマーがスイッチと適切に呼び出して act の値を宣言したかどうか、<xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="75d34-125">You can then check if a consumer has declared the value of the switch and act appropriately by calling the <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="75d34-126">このメソッドを返します`true`場合、`switchName`引数が検出され、メソッドを返す場合、その`isEnabled`引数は、スイッチの値を示します。</span><span class="sxs-lookup"><span data-stu-id="75d34-126">The method returns `true` if the `switchName` argument is found, and when the method returns, its `isEnabled` argument indicates the value of the switch.</span></span>  <span data-ttu-id="75d34-127">それ以外の場合、メソッドは `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="75d34-127">Otherwise, the method returns `false`.</span></span>  
  
### <a name="an-example"></a><span data-ttu-id="75d34-128">例</span><span class="sxs-lookup"><span data-stu-id="75d34-128">An example</span></span>  
 <span data-ttu-id="75d34-129">次の例では、使用、<xref:System.AppContext>顧客がライブラリのメソッドの動作を元の選択を許可するクラス。</span><span class="sxs-lookup"><span data-stu-id="75d34-129">The following example illustrates the use of the <xref:System.AppContext> class to allow the customer to choose the original behavior of a library method.</span></span>   <span data-ttu-id="75d34-130">次は、という名前のライブラリのバージョン 1.0`StringLibrary`です。</span><span class="sxs-lookup"><span data-stu-id="75d34-130">The following is version 1.0 of a library named `StringLibrary`.</span></span> <span data-ttu-id="75d34-131">定義する、`SubstringStartsAt`大きな文字列内の部分文字列の開始インデックスを決定する序数に基づく比較を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="75d34-131">It defines a `SubstringStartsAt` method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</span></span>  
  
 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]  
  
 <span data-ttu-id="75d34-132">次の例は、このライブラリを使用して「考古」で"archæ"の部分文字列の開始インデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="75d34-132">The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</span></span> <span data-ttu-id="75d34-133">メソッドは、序数に基づく比較を実行するための部分文字列が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="75d34-133">Because the method performs an ordinal comparison, the substring cannot be found.</span></span>  
  
 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]  
  
 <span data-ttu-id="75d34-134">ただし、変更は、ライブラリのバージョン 2、`SubstringStartsAt`カルチャに依存した比較を使用する方法です。</span><span class="sxs-lookup"><span data-stu-id="75d34-134">Version 2 of the library, however, changes the `SubstringStartsAt` method to use culture-sensitive comparison.</span></span>  
  
 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]  
  
 <span data-ttu-id="75d34-135">新しいバージョンのライブラリに対して実行する、アプリが再コンパイルすると、インデックス 4「考古」で"archæ"部分文字列が見つかったことを今すぐ報告します。</span><span class="sxs-lookup"><span data-stu-id="75d34-135">When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</span></span>  
  
 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]  
  
 <span data-ttu-id="75d34-136">この変更を定義することによって、元の動作に依存するアプリケーションが破損を防止できる、 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)スイッチします。</span><span class="sxs-lookup"><span data-stu-id="75d34-136">This change can be prevented from breaking the applications that depend on the original behavior by defining an [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) switch.</span></span> <span data-ttu-id="75d34-137">この場合、スイッチが名前付き`StringLibrary.DoNotUseCultureSensitiveComparison`します。</span><span class="sxs-lookup"><span data-stu-id="75d34-137">In this case, the switch is named `StringLibrary.DoNotUseCultureSensitiveComparison`.</span></span> <span data-ttu-id="75d34-138">既定値、`false`ライブラリのバージョン 2.0 のカルチャに依存した比較を実行することを示します。</span><span class="sxs-lookup"><span data-stu-id="75d34-138">Its default value, `false`, indicates that the library should perform its version 2.0 culture-sensitive comparison.</span></span> <span data-ttu-id="75d34-139">`true` ライブラリのバージョン 1.0 の序数に基づく比較を実行することを示します。</span><span class="sxs-lookup"><span data-stu-id="75d34-139">`true` indicates that the library should perform its version 1.0 ordinal comparison.</span></span>  <span data-ttu-id="75d34-140">前のコードのわずかな変更は、ライブラリのコンシューマーがメソッドを実行する比較の種類を決定するスイッチを設定できます。</span><span class="sxs-lookup"><span data-stu-id="75d34-140">A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</span></span>  
  
 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]  
  
 <span data-ttu-id="75d34-141">アプリケーション、次の構成ファイルを使用して、バージョン 1.0 の動作を復元することができます。 場合、</span><span class="sxs-lookup"><span data-stu-id="75d34-141">If application can then use the following configuration file to restore the version 1.0 behavior.</span></span>  
  
```xml  
  
<configuration>  
   <runtime>  
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />   
   </runtime>  
</configuration>  
  
```  
  
 <span data-ttu-id="75d34-142">実行時に、アプリケーションが存在する構成ファイルで、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="75d34-142">When the application is run with the configuration file present, it produces the following output:</span></span>  
  
```  
'archæ' not found in 'The archaeologist'  
```  
  
<a name="ForConsumers"></a>   
## <a name="appcontext-for-library-consumers"></a><span data-ttu-id="75d34-143">ライブラリのコンシューマーにとって AppContext</span><span class="sxs-lookup"><span data-stu-id="75d34-143">AppContext for library consumers</span></span>  
 <span data-ttu-id="75d34-144">ライブラリのコンシューマーをする場合は、<xref:System.AppContext>クラスでは、ライブラリの新機能のライブラリのメソッドのオプトアウト メカニズムを利用することができます。</span><span class="sxs-lookup"><span data-stu-id="75d34-144">If you are the consumer of a library, the <xref:System.AppContext> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</span></span>   <span data-ttu-id="75d34-145">呼び出しにはクラス ライブラリの個々 のメソッドは、有効にするにまたは新しい動作を無効にする特定のスイッチを定義します。</span><span class="sxs-lookup"><span data-stu-id="75d34-145">Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</span></span> <span data-ttu-id="75d34-146">スイッチの値は、ブール値です。</span><span class="sxs-lookup"><span data-stu-id="75d34-146">The value of the switch  is a Boolean.</span></span> <span data-ttu-id="75d34-147">場合は`false`、これは、既定値では通常、新しい動作が有効である場合は`true`、新しい動作を無効にすると、およびメンバーは以前と同じように動作します。</span><span class="sxs-lookup"><span data-stu-id="75d34-147">If it is `false`, which is typically the default value, the new behavior is enabled; if it is `true`, the new behavior is disabled, and the member behaves as it did previously.</span></span>  
  
 <span data-ttu-id="75d34-148">3 つの方法のいずれかでは、スイッチの値を設定できます。</span><span class="sxs-lookup"><span data-stu-id="75d34-148">You can set the value of a switch in one of three ways:</span></span>  
  
-   <span data-ttu-id="75d34-149">呼び出して、<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>コード内のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="75d34-149">By calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method in your code.</span></span>  <span data-ttu-id="75d34-150">`switchName`引数、スイッチ名を定義して、`isEnabled`プロパティは、スイッチの値を定義します。</span><span class="sxs-lookup"><span data-stu-id="75d34-150">The `switchName` argument defines the switch name, and the `isEnabled` property defines the value of the switch.</span></span> <span data-ttu-id="75d34-151"><xref:System.AppContext>静的クラスでは、アプリケーション ドメインごとに使用します。</span><span class="sxs-lookup"><span data-stu-id="75d34-151">Because <xref:System.AppContext> is a static class, it is available on a per-application domain basis.</span></span>  
  
     <span data-ttu-id="75d34-152">呼び出す、<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>がアプリケーションのスコープです。 つまり、その影響を受けるアプリケーションのみです。</span><span class="sxs-lookup"><span data-stu-id="75d34-152">Calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> has application scope; that is, it affects only the application.</span></span>  
  
-   <span data-ttu-id="75d34-153">追加することによって、`<AppContextSwitchOverrides>`要素を[\<ランタイム >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) app.config ファイルのセクションでします。</span><span class="sxs-lookup"><span data-stu-id="75d34-153">By adding an `<AppContextSwitchOverrides>` element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your app.config file.</span></span> <span data-ttu-id="75d34-154">スイッチが 1 つの属性を持つ`value`値があるスイッチの名前とその値の両方を含むキーと値のペアを表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="75d34-154">The switch has a single attribute, `value`, whose value is a string that represents a key/value pair containing both the switch name and its value.</span></span>  
  
     <span data-ttu-id="75d34-155">複数のスイッチを定義するスイッチはそれぞれのキー/値のペアを区切る、 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)要素の`value`属性をセミコロンで区切ります。</span><span class="sxs-lookup"><span data-stu-id="75d34-155">To define multiple switches, separate each switch's key/value pair in the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element's `value` attribute with a semicolon.</span></span> <span data-ttu-id="75d34-156">その場合は、`<AppContextSwitchOverrides>`要素には、次の形式。</span><span class="sxs-lookup"><span data-stu-id="75d34-156">In that case, the `<AppContextSwitchOverrides>` element has the following format:</span></span>  
  
    ```xml  
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />  
    ```  
  
     <span data-ttu-id="75d34-157">使用して、`<AppContextSwitchOverrides>`構成設定を定義する要素がアプリケーションのスコープです。 つまり、その影響を受けるアプリケーションのみです。</span><span class="sxs-lookup"><span data-stu-id="75d34-157">Using the `<AppContextSwitchOverrides>` element to define a configuration setting has application scope; that is, it affects only the application.</span></span>  

    > [!NOTE]    
    > <span data-ttu-id="75d34-158">.NET Framework で定義されているスイッチについては、次を参照してください。、 [ \<AppContextSwitchOverrides > 要素](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)です。</span><span class="sxs-lookup"><span data-stu-id="75d34-158">For information on the switches defined by the .NET Framework, see the [\<AppContextSwitchOverrides> element](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).</span></span>

-   <span data-ttu-id="75d34-159">名前を持つスイッチの名前は、文字列値を追加してに、`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`レジストリのキー。</span><span class="sxs-lookup"><span data-stu-id="75d34-159">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="75d34-160">その値がの文字列形式にする必要があります、<xref:System.Boolean>によって解析される、<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>メソッドです。 つまり、その必要があります"True"、"true"、"False"または"false"です。</span><span class="sxs-lookup"><span data-stu-id="75d34-160">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span> <span data-ttu-id="75d34-161">ランタイムには、その他の値が検出されると、スイッチは無視されます。</span><span class="sxs-lookup"><span data-stu-id="75d34-161">If the runtime encounters any other value, it ignores the switch.</span></span>  
  
     <span data-ttu-id="75d34-162">レジストリを使用して定義する、<xref:System.AppContext>スイッチは必要なコンピューターのスコープです。 つまり、その影響を受けるマシンで実行されているすべてのアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="75d34-162">Using the registry to define an <xref:System.AppContext> switch has machine scope; that is, it affects every application running on the machine.</span></span>  
  
 <span data-ttu-id="75d34-163">どの設定では、他のユーザーを決定するための優先順位の順序は、複数の方法で、同じスイッチを設定する場合。</span><span class="sxs-lookup"><span data-stu-id="75d34-163">If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</span></span>  
  
1.  <span data-ttu-id="75d34-164">プログラムで設定します。</span><span class="sxs-lookup"><span data-stu-id="75d34-164">The programmatic setting.</span></span>  
  
2.  <span data-ttu-id="75d34-165">アプリケーション構成ファイルで設定します。</span><span class="sxs-lookup"><span data-stu-id="75d34-165">The setting in the app config file.</span></span>  
  
3.  <span data-ttu-id="75d34-166">レジストリ設定です。</span><span class="sxs-lookup"><span data-stu-id="75d34-166">The registry setting.</span></span>  
  
 <span data-ttu-id="75d34-167">次に、ファイルの URI を通過する簡単なアプリケーションを<xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="75d34-167">The following is a simple application that passes a file URI to the <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="75d34-168">実行すると、.NET Framework 4.6 の下にあるがスロー、<xref:System.ArgumentException>ため`file://`ファイル パスの有効な部分ではなくなりました。</span><span class="sxs-lookup"><span data-stu-id="75d34-168">When run under the .NET Framework 4.6, it throws an <xref:System.ArgumentException> because `file://` is no longer a valid part of a file path.</span></span>  
  
 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]  
  
 <span data-ttu-id="75d34-169">メソッドの以前の動作を復元して、例外を防ぐためするには追加、`Switch.System.IO.UseLegacyPathHandling`の例では、アプリケーション構成ファイルに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="75d34-169">To restore the method's previous behavior and prevent the exception, you can add the `Switch.System.IO.UseLegacyPathHandling` switch to the application configuration file for the example:</span></span>  
  
```xml  
<configuration>  
    <runtime>  
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />    
    </runtime>  
</configuration>  
```  
## <a name="see-also"></a><span data-ttu-id="75d34-170">関連項目</span><span class="sxs-lookup"><span data-stu-id="75d34-170">See also</span></span>
[<span data-ttu-id="75d34-171">AppContext スイッチ</span><span class="sxs-lookup"><span data-stu-id="75d34-171">AppContext switch</span></span>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d34-172">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリのパス名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-172">Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d34-173">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリのパス名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-173">the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d34-174">これは、アプリケーション ドメイン プロパティごとです。</span><span class="sxs-lookup"><span data-stu-id="75d34-174">This is a per application domain property.</span></span> <span data-ttu-id="75d34-175">その値に対応して、<xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType>現在のアプリケーション ドメインのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="75d34-175">Its value corresponds to the <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> property of the current application domain.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="75d34-176">データ要素の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-176">The name of the data element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75d34-177">現在のアプリケーション ドメインに割り当てられている名前付きデータ要素の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-177">Returns the value of the named data element assigned to the current application domain.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75d34-178">
            <paramref name="name" /> が名前付きの値を識別する場合は <paramref name="name" /> の値。それ以外の場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-178">The value of <paramref name="name" />, if <paramref name="name" /> identifies a named value; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">
          <span data-ttu-id="75d34-179">スイッチの名前です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-179">The name of the switch.</span>
          </span>
        </param>
        <param name="isEnabled">
          <span data-ttu-id="75d34-180">スイッチの値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-180">The value of the switch.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75d34-181">スイッチの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-181">Sets the value of a switch.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d34-182"><xref:System.AppContext>クラスには、そのユーザーに新機能の uniform オプトアウト メカニズムを提供するライブラリの作成者ができるようにします。</span><span class="sxs-lookup"><span data-stu-id="75d34-182">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="75d34-183">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="75d34-183">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="75d34-184">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="75d34-184">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="75d34-185">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="75d34-185">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
 <span data-ttu-id="75d34-186"><xref:System.AppContext.SetSwitch%2A>アプリケーション (またはライブラリ)、スイッチの値を宣言するメソッドを呼び出すとき (これは常に、<xref:System.Boolean>値)、依存するライブラリを定義します。</span><span class="sxs-lookup"><span data-stu-id="75d34-186">The <xref:System.AppContext.SetSwitch%2A> method is called by an application (or a library) to declare the value of a switch (which is always a <xref:System.Boolean> value) that a dependent library defines.</span></span> <span data-ttu-id="75d34-187">スイッチは、常に暗黙的に`false`、新しい動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="75d34-187">The switch is always implicitly `false`, which provides the new behavior.</span></span> <span data-ttu-id="75d34-188">スイッチに設定`true`により従来の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="75d34-188">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="75d34-189">明示的に設定スイッチ`false`も、新しい動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="75d34-189">Explicitly setting the switch to `false` also provides the new behavior.</span></span> <span data-ttu-id="75d34-190">依存するライブラリを呼び出して、スイッチの値を確認できますし、<xref:System.AppContext.TryGetSwitch%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="75d34-190">The dependent library can then check the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="75d34-191">ライブラリによって公開される正式なコントラクトであるために、スイッチ名に一貫性のある形式を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="75d34-191">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="75d34-192">2 つの明確な形式を次に示します。</span><span class="sxs-lookup"><span data-stu-id="75d34-192">The following are two obvious formats.</span></span>  
>   
>  -   <span data-ttu-id="75d34-193">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="75d34-193">*Switch*.*namespace*.*switchname*</span></span>  
> -   <span data-ttu-id="75d34-194">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="75d34-194">*Switch*.*library*.*switchname*</span></span>  
  
 <span data-ttu-id="75d34-195">スイッチの値をプログラムで設定するだけでなくも設定できます。</span><span class="sxs-lookup"><span data-stu-id="75d34-195">In addition to setting the value of a switch programmatically, it can also be set:</span></span>  
  
-   <span data-ttu-id="75d34-196">スイッチの名前と値を追加することによって、 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)内の要素、 [\<ランタイム >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)アプリケーション構成ファイルのセクションです。</span><span class="sxs-lookup"><span data-stu-id="75d34-196">By adding the switch name and value to the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element in the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of an application configuration file.</span></span> <span data-ttu-id="75d34-197">たとえば、次がという名前のスイッチを定義`Libraries.FPLibrary.UseExactFloatingPointComparison`値がある`False`です。</span><span class="sxs-lookup"><span data-stu-id="75d34-197">For example, the following defines a switch named `Libraries.FPLibrary.UseExactFloatingPointComparison` whose value is `False`.</span></span>  
  
    ```xml  
  
    <configuration>  
       <runtime>  
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />   
       </runtime>  
    </configuration>  
  
    ```  
  
-   <span data-ttu-id="75d34-198">名前を持つスイッチの名前は、文字列値を追加してに、`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`レジストリのキー。</span><span class="sxs-lookup"><span data-stu-id="75d34-198">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="75d34-199">その値がの文字列形式にする必要があります、<xref:System.Boolean>によって解析される、<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>メソッドです。 つまり、その必要があります"True"、"true"、"False"または"false"です。</span><span class="sxs-lookup"><span data-stu-id="75d34-199">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span>  
  
 <span data-ttu-id="75d34-200">場合`switchName`が既に存在するによっての値が上書きされる、`isEnabled`引数。</span><span class="sxs-lookup"><span data-stu-id="75d34-200">If `switchName` already exists, its value is overwritten by the `isEnabled` argument.</span></span>  <span data-ttu-id="75d34-201">最新の呼び出し、<xref:System.AppContext.SetSwitch%2A>メソッドは、レジストリで、または以前の呼び出しによって、アプリ構成ファイルで定義されている値をオーバーライド、<xref:System.AppContext.SetSwitch%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="75d34-201">That is, the most recent call to the <xref:System.AppContext.SetSwitch%2A> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <xref:System.AppContext.SetSwitch%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75d34-202">次のコード行は、という名前のスイッチを設定`Switch.AmazingLib.ThrowOnException`に`true`、従来の動作を有効にします。</span><span class="sxs-lookup"><span data-stu-id="75d34-202">The following line of code sets a switch named `Switch.AmazingLib.ThrowOnException` to `true`, which enables a legacy behavior.</span></span> <span data-ttu-id="75d34-203">ライブラリがライブラリ コンシューマーが呼び出すことによりスイッチの値を設定するかどうかを確認できますし、<xref:System.AppContext.TryGetSwitch%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="75d34-203">The library can then check whether a library consumer has set the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>  
  
 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="75d34-204">
            <paramref name="switchName" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-204">
              <paramref name="switchName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="75d34-205">
            <paramref name="switchName" /> は <see cref="F:System.String.Empty" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-205">
              <paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d34-206">現在のアプリケーションの対象となるフレームワークのバージョンの名前を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-206">Gets the name of the framework version targeted by the current application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d34-207">現在のアプリケーションの対象となるフレームワークのバージョンの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-207">The name of the framework version targeted by the current application.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d34-208">ターゲット フレームワークのバージョンの名前の値に対応、<xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="75d34-208">The name of the target framework version corresponds to the value of the <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="75d34-209">.NET Framework のターゲット フレームワーク名の一覧は、次を参照してください。、 [ &lt;supportedRuntime&gt;要素](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)要素。</span><span class="sxs-lookup"><span data-stu-id="75d34-209">For a list of target framework names for the .NET Framework, see the [&lt;supportedRuntime&gt; Element](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) element.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">
          <span data-ttu-id="75d34-210">スイッチの名前です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-210">The name of the switch.</span>
          </span>
        </param>
        <param name="isEnabled">
          <span data-ttu-id="75d34-211">このメソッドが返されるときに <c>switchName</c> が見つかった場合、<c>switchName</c> の値が含まれます。<c>switchName</c> が見つからなかった場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-211">When this method returns, contains the value of <c>switchName</c> if <c>switchName</c> was found, or <see langword="false" /> if <c>switchName</c> was not found.</span>
          </span>
          <span data-ttu-id="75d34-212">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-212">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75d34-213">スイッチの値の取得を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-213">Tries to get the value of a switch.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="75d34-214">
            <paramref name="switchName" /> が設定され、<paramref name="isEnabled" /> の引数にスイッチの値が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-214">
              <see langword="true" /> if <paramref name="switchName" /> was set and the <paramref name="isEnabled" /> argument contains the value of the switch; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d34-215"><xref:System.AppContext>クラスには、そのユーザーに新機能の uniform オプトアウト メカニズムを提供するライブラリの作成者ができるようにします。</span><span class="sxs-lookup"><span data-stu-id="75d34-215">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="75d34-216">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="75d34-216">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="75d34-217">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="75d34-217">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="75d34-218">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="75d34-218">Conversely, there is already an implicit opt-in for new functionality.</span></span>  
  
 <span data-ttu-id="75d34-219">共通言語ランタイムに割り当てられているスイッチを自動的に入力する、<xref:System.AppContext>レジストリおよびアプリケーションの構成ファイルを読み取ることでインスタンス。</span><span class="sxs-lookup"><span data-stu-id="75d34-219">The common language runtime automatically populates the switches assigned to an <xref:System.AppContext> instance by reading the registry and the application's configuration file.</span></span> <span data-ttu-id="75d34-220">これらのスイッチの値をオーバーライドし、こと、および呼び出しによって、新しいスイッチが追加される、<xref:System.AppContext.SetSwitch%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="75d34-220">The value of these switches can then be overridden, and new switches added, by calling the <xref:System.AppContext.SetSwitch%2A> method.</span></span>  
  
 <span data-ttu-id="75d34-221">ライブラリを呼び出す、<xref:System.AppContext.TryGetSwitch%2A>そのコンシューマーがスイッチの値が宣言されているし、それに適切に動作するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="75d34-221">A library calls the <xref:System.AppContext.TryGetSwitch%2A> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</span></span>  <span data-ttu-id="75d34-222">既定では、スイッチが定義されていない場合、新しい機能が有効になっている.</span><span class="sxs-lookup"><span data-stu-id="75d34-222">By default, if the switch is not defined, the new functionality is enabled..</span></span> <span data-ttu-id="75d34-223">スイッチが定義され、その値が場合`false`、新しい機能も有効にします。</span><span class="sxs-lookup"><span data-stu-id="75d34-223">If the switch is defined and its value is `false`, the new functionality is also enabled.</span></span> <span data-ttu-id="75d34-224">値が場合`true`、従来の動作を有効にします。</span><span class="sxs-lookup"><span data-stu-id="75d34-224">If its value is `true`, the legacy behavior is enabled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75d34-225">次の例では、ライブラリのコンシューマーがという名前のスイッチを設定するかどうかを判断`Switch.AmazingLib.ThrowOnException`です。</span><span class="sxs-lookup"><span data-stu-id="75d34-225">The following example determines whether a library consumer has set a switch named `Switch.AmazingLib.ThrowOnException`.</span></span>  
  
 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="75d34-226">
            <paramref name="switchName" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-226">
              <paramref name="switchName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="75d34-227">
            <paramref name="switchName" /> は <see cref="F:System.String.Empty" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d34-227">
              <paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>