<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f71195d360e197411970aa7505cd3ee4ab2282c2" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52344887" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>クラス初期化子によってスローされた例外をラップするラッパーとしてスローされる例外。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス初期化子で型の初期化に失敗すると、<xref:System.TypeInitializationException> が作成され、その型のクラス初期化子でスローされる例外への参照が渡されます。 <xref:System.Exception.InnerException%2A>プロパティの<xref:System.TypeInitializationException>基になる例外を保持します。  
  
 通常、<xref:System.TypeInitializationException>例外には、重大な状態が反映されます (ランタイムは、型をインスタンス化できません)、アプリケーションを続行できません。  ほとんどの場合、<xref:System.TypeInitializationException>アプリケーションの実行中の環境での変更に応答がスローされます。 その結果、以外の可能性があります、コードのデバッグのトラブルシューティングのため、例外処理できないで、 `try` / `catch`ブロックします。 代わりに、例外の原因を調査し、削除する必要があります。  
  
 <xref:System.TypeInitializationException> 値は 0x80131534 HRESULT COR_E_TYPEINITIALIZATION を使用します。  
  
 インスタンスの初期プロパティ値の一覧については<xref:System.TypeInitializationException>を参照してください、<xref:System.TypeInitializationException.%23ctor%2A>コンス トラクター。  
  
 次のセクションでは、いくつかの状況は、について説明します、<xref:System.TypeInitializationException>例外がスローされます。  
  
- [静的コンス トラクターと TypeInitializationException 例外](#Static)   
- [正規表現と一致するタイムアウト値](#Timeout)   
- [予定表とカルチャのデータ](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a>静的コンス トラクターと、TypeInitializationException

 静的コンス トラクターでは、1 つが存在する場合は自動的にランタイムによって呼び出されます、型の新しいインスタンスを作成する前にします。 静的コンス トラクターは、開発者が明示的に定義することができます。 静的コンス トラクターが明示的に定義されていない場合のコンパイラを自動的に作成、初期化するために 1 つ`static`(で C# の場合) または`Shared`(Visual Basic) では、型のメンバー。  静的コンス トラクターの詳細については、次を参照してください。[静的コンス トラクター](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)します。  
  
 ほとんどの場合、<xref:System.TypeInitializationException>静的コンス トラクターは、型をインスタンス化できない場合、例外がスローされます。  <xref:System.Exception.InnerException%2A>プロパティは、静的コンス トラクターが型をインスタンス化できない理由を示します。 一般的な原因の一部を<xref:System.TypeInitializationException>例外です。  
  
- 静的コンス トラクターで未処理の例外  
 
   その例外がラップされた静的コンス トラクターで例外がスローされた場合、<xref:System.TypeInitializationException>例外、および種類をインスタンス化することはできません。  
  
   静的コンス トラクターは常に明示的に定義されていないことで、ソース コードは、どのような多くの場合は、この例外トラブルシューティングが困難です。 場合、型の静的コンス トラクターが存在します。  
  
   -   型のメンバーとして明示的に定義されています。  
  
   -   型を持つ`static`(で C# の場合) または`Shared`(Visual Basic) で宣言され、1 つのステートメントで初期化される変数。 この場合は、言語コンパイラは、型の静的コンス トラクターを生成します。 などのユーティリティを使用して、検査して[IL 逆アセンブラー](~/docs/framework/tools/ildasm-exe-il-disassembler.md)します。 たとえば、c# と VB コンパイラは、次の例をコンパイル、ときに、このような静的コンス トラクターの IL が生成します。  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   次の例は、<xref:System.TypeInitializationException>コンパイラによって生成された静的コンス トラクターによってスローされる例外。 `Example`クラスが含まれています、 `static` (で C# の場合) または`Shared`(Visual Basic) で型のフィールド`TestClass`が 3 の値をそのクラス コンス トラクターに渡すことによってインスタンス化します。  その値、ただしは無効です。0 または 1 の値のみが許可されます。 結果として、`TestClass`クラスのコンス トラクターがスローされます、<xref:System.ArgumentOutOfRangeException>します。 この例外が処理されないためにラップする<xref:System.TypeInitializationException>例外。  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   例外メッセージがに関する情報を表示することに注意してください、<xref:System.Exception.InnerException%2A>プロパティ。  
  
- アセンブリまたはデータ ファイルの欠落  
 
   一般的な原因を<xref:System.TypeInitializationException>例外がアプリケーションの開発およびテスト環境に存在するアセンブリまたはデータ ファイルがそのランタイム環境から不足していることができます。 たとえば、このコマンドラインの構文を使用して Missing1a.dll をという名前のアセンブリには、次の例をコンパイルできます。  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   Missing1a.dll への参照を含めることによって Missing1.exe を名前付き実行可能ファイルに次の例をコンパイルできます。  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   ただし、名前を変更、移動、または削除 Missing1a.dll して例を実行がスローされます、<xref:System.TypeInitializationException>例外および例に示した出力を示します。  例外メッセージがに関する情報を含めることに注意してください、<xref:System.Exception.InnerException%2A>プロパティ。 この例では、内部例外は、<xref:System.IO.FileNotFoundException>ランタイムは、依存アセンブリを検出できないため、スローされました。  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  この例で、<xref:System.TypeInitializationException>アセンブリは、読み込むことができないため、例外がスローされました。 例外は、静的コンス トラクターは、構成ファイル、XML ファイル、または含んでいるファイルが見つからないことを示すには、データをシリアル化など、データ ファイルを開こうとする場合にもスローされます。  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>正規表現と一致するタイムアウト値  
 アプリケーションごとのドメインごとに操作に一致する正規表現パターンの既定のタイムアウト値を設定することができます。 指定することで、タイムアウトが定義されている、<xref:System.TimeSpan>に"REGEX_DEFAULT_MATCH_TIMEOUT"プロパティの値、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>メソッド。 時間間隔を有効にする必要があります<xref:System.TimeSpan>が 0 未満に約 24 日より大きくするオブジェクト。 これらの要件が満たされていない場合、既定のタイムアウト値を設定しようとするがスローされます、<xref:System.ArgumentOutOfRangeException>が順番にラップされて、<xref:System.TypeInitializationException>例外。  
  
 次の例は、 <xref:System.TypeInitializationException> "REGEX_DEFAULT_MATCH_TIMEOUT"プロパティに割り当てられた値が有効でない場合にスローされます。 例外を取り除くに"REGEX_DEFAULT_MATCH_TIMEOUT"プロパティを設定します。、<xref:System.TimeSpan>値が 0 とより小さい約 24 日よりも大きいです。  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>予定表とカルチャのデータ  
 カレンダーをインスタンス化しようとしたが、ランタイムがインスタンス化できない、<xref:System.Globalization.CultureInfo>カレンダーに対応するオブジェクトがスローされます、<xref:System.TypeInitializationException>例外。 次のカレンダー クラス コンス トラクターによって、この例外がスローされます。  
  
-   既定のコンス トラクター、<xref:System.Globalization.JapaneseCalendar>クラス。  
  
-   既定のコンス トラクター、<xref:System.Globalization.KoreanCalendar>クラス。  
  
-   既定のコンス トラクター、<xref:System.Globalization.TaiwanCalendar>クラス。  
  
 これらのカルチャのカルチャのデータは、すべてのシステムで使用可能なである必要があります、ためにがまれには場合、これまで例外が発生するこのします。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">.NET での例外の処理とスロー</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">初期化できなかった型の完全限定名。</param>
        <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
        <summary>既定のエラー メッセージ、指定した型名、この例外の原因である内部例外への参照を使用して、<see cref="T:System.TypeInitializationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前の例外の直接の結果としてスローされる例外は、<xref:System.Exception.InnerException%2A> プロパティに前の例外への参照を含んでいる場合があります。 <xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。`Nothing` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は <xref:System.Exception.InnerException%2A>) を返します。  
  
 <xref:System.TypeInitializationException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部例外の参照。|  
|<xref:System.Exception.Message%2A>|ローカライズされたエラー メッセージ文字列。|  
|<xref:System.TypeInitializationException.TypeName%2A>|型の名前。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">.NET での例外の処理とスロー</related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</param>
        <summary>型名と追加の例外情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトを設定します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>初期化できなかった型の完全限定名を取得します。</summary>
        <value>初期化できなかった型の完全限定名。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>