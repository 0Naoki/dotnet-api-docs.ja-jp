<Type Name="BitConverter" FullName="System.BitConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="31c601651bd1a9d1cf82ccc813f1f099f4eb40ba" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39978315" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class BitConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BitConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.BitConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class BitConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class BitConverter abstract sealed" />
  <TypeSignature Language="F#" Value="type BitConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="34fda-101">基本データ型をバイト配列に、バイト配列を基本データ型に変換します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="34fda-101">Converts base data types to an array of bytes, and an array of bytes to base data types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-102"><xref:System.BitConverter>クラスは、一連のバイトとしての基本的な形式で値型を操作します。</span><span class="sxs-lookup"><span data-stu-id="34fda-102">The <xref:System.BitConverter> class helps manipulate value types in their fundamental form, as a series of bytes.</span></span> <span data-ttu-id="34fda-103">バイトは 8 ビット符号なし整数として定義されます。</span><span class="sxs-lookup"><span data-stu-id="34fda-103">A byte is defined as an 8-bit unsigned integer.</span></span> <span data-ttu-id="34fda-104"><xref:System.BitConverter>クラスに次の表に示すように、バイト配列との間の各プリミティブの種類を変換する静的メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="34fda-104">The <xref:System.BitConverter> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.</span></span>  
  
|<span data-ttu-id="34fda-105">型</span><span class="sxs-lookup"><span data-stu-id="34fda-105">Type</span></span>|<span data-ttu-id="34fda-106">バイトへの変換</span><span class="sxs-lookup"><span data-stu-id="34fda-106">To byte conversion</span></span>|<span data-ttu-id="34fda-107">変換するバイト</span><span class="sxs-lookup"><span data-stu-id="34fda-107">From byte conversion</span></span>|  
|----------|------------------------|--------------------------|  
|<xref:System.Boolean>|<xref:System.BitConverter.GetBytes%28System.Boolean%29>|<xref:System.BitConverter.ToBoolean%2A>|  
|<xref:System.Char>|<xref:System.BitConverter.GetBytes%28System.Char%29>|<xref:System.BitConverter.ToChar%2A>|  
|<xref:System.Double>|<xref:System.BitConverter.GetBytes%28System.Double%29><br /><br /> <span data-ttu-id="34fda-108">- または -</span><span class="sxs-lookup"><span data-stu-id="34fda-108">-or-</span></span><br /><br /> <xref:System.BitConverter.DoubleToInt64Bits%28System.Double%29>|<xref:System.BitConverter.ToDouble%2A><br /><br /> <span data-ttu-id="34fda-109">- または -</span><span class="sxs-lookup"><span data-stu-id="34fda-109">-or-</span></span><br /><br /> <xref:System.BitConverter.Int64BitsToDouble%2A>|  
|<xref:System.Int16>|<xref:System.BitConverter.GetBytes%28System.Int16%29>|<xref:System.BitConverter.ToInt16%2A>|  
|<xref:System.Int32>|<xref:System.BitConverter.GetBytes%28System.Int32%29>|<xref:System.BitConverter.ToInt32%2A>|  
|<xref:System.Int64>|<xref:System.BitConverter.GetBytes%28System.Int64%29>|<xref:System.BitConverter.ToInt64%2A>|  
|<xref:System.Single>|<xref:System.BitConverter.GetBytes%28System.Single%29>|<xref:System.BitConverter.ToSingle%2A>|  
|<xref:System.UInt16>|<xref:System.BitConverter.GetBytes%28System.UInt16%29>|<xref:System.BitConverter.ToUInt16%2A>|  
|<xref:System.UInt32>|<xref:System.BitConverter.GetBytes%28System.UInt32%29>|<xref:System.BitConverter.ToUInt32%2A>|  
|<xref:System.UInt64>|<xref:System.BitConverter.GetBytes%28System.UInt64%29>|<xref:System.BitConverter.ToUInt64%2A>|  
  
 <span data-ttu-id="34fda-110">使用する場合<xref:System.BitConverter>メソッド、データのラウンド トリップをことを確認、<xref:System.BitConverter.GetBytes%2A>オーバー ロードと`To`*型*メソッドは、同じ型を指定します。</span><span class="sxs-lookup"><span data-stu-id="34fda-110">If you use <xref:System.BitConverter> methods to round-trip data, make sure that the <xref:System.BitConverter.GetBytes%2A> overload and the `To`*Type* method specify the same type.</span></span> <span data-ttu-id="34fda-111">次の例に示すように、復元を呼び出すことによって、符号付き整数を表す、<xref:System.BitConverter.ToUInt32%2A>メソッドは、元とは異なる値になることができます。</span><span class="sxs-lookup"><span data-stu-id="34fda-111">As the following example illustrates, restoring an array that represents a signed integer by calling the <xref:System.BitConverter.ToUInt32%2A> method can result in a value that is different from the original.</span></span> <span data-ttu-id="34fda-112">詳細については、エントリを参照してください。[署名のない 10 進とビットごとの値を使用する](http://go.microsoft.com/fwlink/?LinkId=186999)BCL チームのブログにします。</span><span class="sxs-lookup"><span data-stu-id="34fda-112">For more information, see the entry [Working with Signed Non-Decimal and Bitwise Values](http://go.microsoft.com/fwlink/?LinkId=186999) in the BCL Team Blog.</span></span>  
  
 [!code-csharp[System.BitConverter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/example1.cs#3)]
 [!code-vb[System.BitConverter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/example1.vb#3)]  
  
 <span data-ttu-id="34fda-113">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドのオーバー ロード (によって返された整数のビットの順序と、<xref:System.BitConverter.DoubleToInt64Bits%2A>メソッドと、によって返される文字列の 16 進数の順序、<xref:System.BitConverter.ToString%28System.Byte%5B%5D%29>メソッド) かどうかによって異なります、コンピューターのアーキテクチャとは、リトル エンディアンまたはビッグ エンディアンです。</span><span class="sxs-lookup"><span data-stu-id="34fda-113">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method overloads (as well as the order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method and the order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%28System.Byte%5B%5D%29> method) depends on whether the computer architecture is little-endian or big-endian.</span></span> <span data-ttu-id="34fda-114">同様に、配列内のバイトの順序によって返されると、 `To`*値をとります*メソッドと<xref:System.BitConverter.ToChar%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-114">Similarly, the order of bytes in the array and returned by the `To`*IntegerValue* methods and the <xref:System.BitConverter.ToChar%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span> <span data-ttu-id="34fda-115">アーキテクチャのエンディアンがで示される、<xref:System.BitConverter.IsLittleEndian>を返すプロパティ`true`リトル エンディアンのシステムでと`false`ビッグ エンディアン システム。</span><span class="sxs-lookup"><span data-stu-id="34fda-115">The endianness of an architecture is indicated by the <xref:System.BitConverter.IsLittleEndian> property, which returns `true` on little-endian systems and `false` on big-endian systems.</span></span> <span data-ttu-id="34fda-116">リトル エンディアンのシステムでは、下位バイトには、上位バイトが前になります。</span><span class="sxs-lookup"><span data-stu-id="34fda-116">On little-endian systems, lower-order bytes precede higher-order bytes.</span></span> <span data-ttu-id="34fda-117">ビッグ エンディアンのシステムでは、上位バイトには、下位バイトが先頭に置きます。</span><span class="sxs-lookup"><span data-stu-id="34fda-117">On big-endian system, higher-order bytes precede lower-order bytes.</span></span> <span data-ttu-id="34fda-118">次の表に 1,234,567,890 (0x499602D2) の整数を渡すことに起因するバイト配列の違いを示しています、<xref:System.BitConverter.GetBytes%28System.Int32%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-118">The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <xref:System.BitConverter.GetBytes%28System.Int32%29> method.</span></span> <span data-ttu-id="34fda-119">バイト数はインデックス 3 バイトのインデックスは 0 バイトから順に表示されます。</span><span class="sxs-lookup"><span data-stu-id="34fda-119">The bytes are listed in order from the byte at index 0 to the byte at index 3.</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="34fda-120">リトル エンディアン</span><span class="sxs-lookup"><span data-stu-id="34fda-120">Little-endian</span></span>|<span data-ttu-id="34fda-121">D2 02 96 49</span><span class="sxs-lookup"><span data-stu-id="34fda-121">D2-02-96-49</span></span>|  
|<span data-ttu-id="34fda-122">ビッグ エンディアン</span><span class="sxs-lookup"><span data-stu-id="34fda-122">Big-endian</span></span>|<span data-ttu-id="34fda-123">49-96-02-D2</span><span class="sxs-lookup"><span data-stu-id="34fda-123">49-96-02-D2</span></span>|  
  
 <span data-ttu-id="34fda-124">いくつかのメソッドの戻り値は、システム アーキテクチャに依存するためコンピューターの境界を超えるバイト データを送信するときに注意が必要になります。</span><span class="sxs-lookup"><span data-stu-id="34fda-124">Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:</span></span>  
  
-   <span data-ttu-id="34fda-125">同じエンディアンがすべてのシステム データを送受信することが保証され場合、は、データを何も実行が。</span><span class="sxs-lookup"><span data-stu-id="34fda-125">If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.</span></span>  
  
-   <span data-ttu-id="34fda-126">エンディアンの異なるデータを送受信する際にシステムの場合は、常に、特定の順序でデータを転送します。</span><span class="sxs-lookup"><span data-stu-id="34fda-126">If systems sending and receiving data can have different endianness, always transmit data in a particular order.</span></span> <span data-ttu-id="34fda-127">つまり、配列内のバイトの順序は、送信前に、または後を受信する元に戻す必要があります。</span><span class="sxs-lookup"><span data-stu-id="34fda-127">This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them.</span></span> <span data-ttu-id="34fda-128">一般的な規則では、ネットワークのバイト順 (ビッグ エンディアン順) でデータを転送します。</span><span class="sxs-lookup"><span data-stu-id="34fda-128">A common convention is to transmit data in network byte order (big-endian order).</span></span> <span data-ttu-id="34fda-129">次の例は、ネットワークのバイト順で整数値を送信するための実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="34fda-129">The following example provides an implementation for sending an integer value in network byte order.</span></span>  
  
     [!code-csharp[System.BitConverter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/networkorder1.cs#4)]
     [!code-vb[System.BitConverter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/networkorder1.vb#4)]  
  
-   <span data-ttu-id="34fda-130">呼び出すシステム データを送受信することができる場合、別のエンディアンがあり、送信されるデータは、符号付き整数、<xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType>ネットワークのバイト順にデータを変換するメソッドと<xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=nameWithType>必要な順序に変換する方法受信者。</span><span class="sxs-lookup"><span data-stu-id="34fda-130">If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType> method to convert the data to network byte order and the <xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=nameWithType> method to convert it to the order required by the recipient.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-131">次のコード例は、いくつかの使用を示しています。<xref:System.BitConverter>クラス メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-131">The following code example illustrates the use of several <xref:System.BitConverter> class methods.</span></span>  
  
 [!code-cpp[System.BitConverter.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.Class/CPP/bitconv.cpp#1)]
 [!code-csharp[System.BitConverter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/bitconv.cs#1)]
 [!code-vb[System.BitConverter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/bitconv.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Byte" />
  </Docs>
  <Members>
    <Member MemberName="DoubleToInt64Bits">
      <MemberSignature Language="C#" Value="public static long DoubleToInt64Bits (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DoubleToInt64Bits(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.DoubleToInt64Bits(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoubleToInt64Bits (value As Double) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long DoubleToInt64Bits(double value);" />
      <MemberSignature Language="F#" Value="static member DoubleToInt64Bits : double -&gt; int64" Usage="System.BitConverter.DoubleToInt64Bits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-132">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-132">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-133">指定した倍精度浮動小数点数を 64 ビット符号付き整数に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-133">Converts the specified double-precision floating point number to a 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-134">
            <paramref name="value" /> と等価の値を持つ 64 ビット符号付き整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-134">A 64-bit signed integer whose value is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-135">によって返された整数のビットの順序、<xref:System.BitConverter.DoubleToInt64Bits%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-135">The order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-136">次のコード例がいくつかのビット パターンに変換します<xref:System.Double>値<xref:System.Int64>値で、`DoubleToInt64Bits`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-136">The following code example converts the bit patterns of several <xref:System.Double> values to <xref:System.Int64> values with the `DoubleToInt64Bits` method.</span></span>  
  
 [!code-cpp[System.BitConverter.DoubleInt64#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/CPP/dbltobits.cpp#2)]
 [!code-csharp[System.BitConverter.DoubleInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/CS/dbltobits.cs#2)]
 [!code-vb[System.BitConverter.DoubleInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/VB/dbltobits.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.Int64BitsToDouble(System.Int64)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="34fda-137">指定したデータをバイト配列に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-137">Converts the specified data to an array of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As Boolean) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(bool value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : bool -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-138">ブール値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-138">A Boolean value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-139">指定したブール値をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-139">Returns the specified Boolean value as a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-140">長さ 1 のバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-140">A byte array with length 1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-141">バイト配列に変換することができますに戻す、<xref:System.Boolean>値を呼び出すことによって、<xref:System.BitConverter.ToBoolean%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-141">You can convert a byte array back to a <xref:System.Boolean> value by calling the <xref:System.BitConverter.ToBoolean%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-142">次の例のビット パターンの変換<xref:System.Boolean>値<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-142">The following example converts the bit patterns of <xref:System.Boolean> values to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.Others#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CPP/bytesbool.cpp#1)]
 [!code-csharp[System.BitConverter.GetBytes.Others#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CS/bytesbool.cs#1)]
 [!code-vb[System.BitConverter.GetBytes.Others#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/VB/bytesbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As Char) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(char value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : char -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-143">変換する文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-143">A character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-144">指定した Unicode 文字値をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-144">Returns the specified Unicode character value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-145">長さが 2 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-145">An array of bytes with length 2.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-146">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-146">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-147">次のコード例のビット パターンの変換<xref:System.Char>(Unicode 文字) の値を<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-147">The following code example converts the bit patterns of <xref:System.Char> values (Unicode characters) to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.Others#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CPP/byteschar.cpp#2)]
 [!code-csharp[System.BitConverter.GetBytes.Others#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CS/byteschar.cs#2)]
 [!code-vb[System.BitConverter.GetBytes.Others#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/VB/byteschar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToChar(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As Double) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(double value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : double -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-148">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-148">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-149">指定した倍精度浮動小数点値をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-149">Returns the specified double-precision floating point value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-150">長さが 8 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-150">An array of bytes with length 8.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-151">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-151">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-152">次のコード例のビット パターンの変換<xref:System.Double>値<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-152">The following code example converts the bit patterns of <xref:System.Double> values to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.Others#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CPP/bytesdouble.cpp#4)]
 [!code-csharp[System.BitConverter.GetBytes.Others#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CS/bytesdouble.cs#4)]
 [!code-vb[System.BitConverter.GetBytes.Others#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/VB/bytesdouble.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As Short) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(short value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : int16 -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-153">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-153">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-154">指定した 16 ビットの符号なし整数値をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-154">Returns the specified 16-bit signed integer value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-155">長さが 2 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-155">An array of bytes with length 2.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-156">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-156">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-157">次のコード例のビット パターンの変換<xref:System.Int16>値<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-157">The following code example converts the bit patterns of <xref:System.Int16> values to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.SInts#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CPP/bytesint16.cpp#3)]
 [!code-csharp[System.BitConverter.GetBytes.SInts#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CS/bytesint16.cs#3)]
 [!code-vb[System.BitConverter.GetBytes.SInts#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/VB/bytesint16.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(int value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : int -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-158">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-158">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-159">バイト配列として指定した 32 ビット符号付き整数値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-159">Returns the specified 32-bit signed integer value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-160">長さが 4 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-160">An array of bytes with length 4.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-161">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-161">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-162">次のコード例のビット パターンの変換<xref:System.Int32>値<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-162">The following code example converts the bit patterns of <xref:System.Int32> values to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.SInts#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CPP/bytesint32.cpp#2)]
 [!code-csharp[System.BitConverter.GetBytes.SInts#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CS/bytesint32.cs#2)]
 [!code-vb[System.BitConverter.GetBytes.SInts#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/VB/bytesint32.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As Long) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(long value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : int64 -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-163">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-163">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-164">バイト配列として指定した 64 ビット符号付き整数値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-164">Returns the specified 64-bit signed integer value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-165">長さが 8 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-165">An array of bytes with length 8.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-166">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-166">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-167">次の例では、<xref:System.BitConverter.GetBytes%2A>内の各要素に変換するメソッド、<xref:System.Int64>配列を<xref:System.Byte>配列。</span><span class="sxs-lookup"><span data-stu-id="34fda-167">The following example calls the <xref:System.BitConverter.GetBytes%2A> method to convert each element in an <xref:System.Int64> array to a <xref:System.Byte> arrays.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.SInts#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CPP/bytesint64.cpp#1)]
 [!code-csharp[System.BitConverter.GetBytes.SInts#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CS/bytesint64.cs#1)]
 [!code-vb[System.BitConverter.GetBytes.SInts#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/VB/bytesint64.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As Single) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(float value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : single -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-168">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-168">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-169">指定した単精度浮動小数点値をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-169">Returns the specified single-precision floating point value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-170">長さが 4 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-170">An array of bytes with length 4.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-171">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-171">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-172">次のコード例のビット パターンの変換<xref:System.Single>値<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-172">The following code example converts the bit patterns of <xref:System.Single> values to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.Others#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CPP/bytessingle.cpp#3)]
 [!code-csharp[System.BitConverter.GetBytes.Others#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CS/bytessingle.cs#3)]
 [!code-vb[System.BitConverter.GetBytes.Others#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/VB/bytessingle.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As UShort) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : uint16 -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-173">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-173">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-174">指定した 16 ビットの符号なし整数値をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-174">Returns the specified 16-bit unsigned integer value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-175">長さが 2 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-175">An array of bytes with length 2.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-176">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-176">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-177">次のコード例のビット パターンの変換<xref:System.UInt16>値<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-177">The following code example converts the bit patterns of <xref:System.UInt16> values to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.UInts#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CPP/bytesuint16.cpp#3)]
 [!code-csharp[System.BitConverter.GetBytes.UInts#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CS/bytesuint16.cs#3)]
 [!code-vb[System.BitConverter.GetBytes.UInts#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/VB/bytesuint16.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As UInteger) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : uint32 -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-178">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-178">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-179">指定した 32 ビットの符号なし整数値をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-179">Returns the specified 32-bit unsigned integer value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-180">長さが 4 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-180">An array of bytes with length 4.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-181">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-181">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-182">次のコード例のビット パターンの変換<xref:System.UInt32>値<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-182">The following code example converts the bit patterns of <xref:System.UInt32> values to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.UInts#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CPP/bytesuint32.cpp#2)]
 [!code-csharp[System.BitConverter.GetBytes.UInts#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CS/bytesuint32.cs#2)]
 [!code-vb[System.BitConverter.GetBytes.UInts#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/VB/bytesuint32.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.GetBytes(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBytes (value As ULong) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member GetBytes : uint64 -&gt; byte[]" Usage="System.BitConverter.GetBytes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-183">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-183">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-184">指定した 64 ビットの符号なし整数値をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-184">Returns the specified 64-bit unsigned integer value as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-185">長さが 8 バイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-185">An array of bytes with length 8.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-186">によって返される配列内のバイトの順序、<xref:System.BitConverter.GetBytes%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-186">The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-187">次のコード例のビット パターンの変換<xref:System.UInt64>値<xref:System.Byte>で配列、`GetBytes`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-187">The following code example converts the bit patterns of <xref:System.UInt64> values to <xref:System.Byte> arrays with the `GetBytes` method.</span></span>  
  
 [!code-cpp[System.BitConverter.GetBytes.UInts#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CPP/bytesuint64.cpp#1)]
 [!code-csharp[System.BitConverter.GetBytes.UInts#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CS/bytesuint64.cs#1)]
 [!code-vb[System.BitConverter.GetBytes.UInts#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/VB/bytesuint64.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Int32BitsToSingle">
      <MemberSignature Language="C#" Value="public static float Int32BitsToSingle (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Int32BitsToSingle(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.Int32BitsToSingle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Int32BitsToSingle (value As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int32BitsToSingle(int value);" />
      <MemberSignature Language="F#" Value="static member Int32BitsToSingle : int -&gt; single" Usage="System.BitConverter.Int32BitsToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Int64BitsToDouble">
      <MemberSignature Language="C#" Value="public static double Int64BitsToDouble (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Int64BitsToDouble(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.Int64BitsToDouble(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Int64BitsToDouble (value As Long) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int64BitsToDouble(long value);" />
      <MemberSignature Language="F#" Value="static member Int64BitsToDouble : int64 -&gt; double" Usage="System.BitConverter.Int64BitsToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-188">変換する数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-188">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-189">指定した 64 ビット符号付き整数を倍精度浮動小数点数に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-189">Converts the specified 64-bit signed integer to a double-precision floating point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-190">
            <paramref name="value" /> と等価の値を持つ倍精度浮動小数点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-190">A double-precision floating point number whose value is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-191">通常、`value`によって返される整数、<xref:System.BitConverter.DoubleToInt64Bits%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-191">Typically, `value` is an integer that is returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-192">次のコード例がいくつかのビット パターンに変換します<xref:System.Int64>値<xref:System.Double>値で、`Int64BitsToDouble`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-192">The following code example converts the bit patterns of several <xref:System.Int64> values to <xref:System.Double> values with the `Int64BitsToDouble` method.</span></span>  
  
 [!code-cpp[System.BitConverter.DoubleInt64#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/CPP/bitstodbl.cpp#1)]
 [!code-csharp[System.BitConverter.DoubleInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/CS/bitstodbl.cs#1)]
 [!code-vb[System.BitConverter.DoubleInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/VB/bitstodbl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.BitConverter.DoubleToInt64Bits(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="IsLittleEndian">
      <MemberSignature Language="C#" Value="public static readonly bool IsLittleEndian;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsLittleEndian" />
      <MemberSignature Language="DocId" Value="F:System.BitConverter.IsLittleEndian" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsLittleEndian As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsLittleEndian;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsLittleEndian : bool" Usage="System.BitConverter.IsLittleEndian" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="34fda-193">このコンピューターのアーキテクチャにデータを格納するバイト順 ("エンディアン") を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-193">Indicates the byte order ("endianness") in which data is stored in this computer architecture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-194">異なるコンピューター アーキテクチャでは、異なるバイト順を使用してデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="34fda-194">Different computer architectures store data using different byte orders.</span></span> <span data-ttu-id="34fda-195">「ビッグ エンディアン」では、単語の左の端が最上位バイトを意味します。</span><span class="sxs-lookup"><span data-stu-id="34fda-195">"Big-endian" means the most significant byte is on the left end of a word.</span></span> <span data-ttu-id="34fda-196">「リトル エンディアン」では、単語の右端の位置が最上位バイトを意味します。</span><span class="sxs-lookup"><span data-stu-id="34fda-196">"Little-endian" means the most significant byte is on the right end of a word.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="34fda-197">値を取得せず、ホスト コンピューターのバイト順ネットワークのバイト順からを変換できます、<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>フィールドに 16 ビット、32 ビットまたは 64 ビット整数を渡すことによって、<xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-197">You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> field by passing a 16-bit, 32-bit, or 64 bit integer to the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-198">次のコード例の使用を示しています、`IsLittleEndian`フィールド。</span><span class="sxs-lookup"><span data-stu-id="34fda-198">The following code example illustrates the use of the `IsLittleEndian` field.</span></span>  
  
 [!code-cpp[System.BitConverter.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.Class/CPP/littleend.cpp#2)]
 [!code-csharp[System.BitConverter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/littleend.cs#2)]
 [!code-vb[System.BitConverter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/littleend.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleToInt32Bits">
      <MemberSignature Language="C#" Value="public static int SingleToInt32Bits (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SingleToInt32Bits(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.SingleToInt32Bits(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleToInt32Bits (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int SingleToInt32Bits(float value);" />
      <MemberSignature Language="F#" Value="static member SingleToInt32Bits : single -&gt; int" Usage="System.BitConverter.SingleToInt32Bits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="System.BitConverter.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Byte(), startIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : byte[] * int -&gt; bool" Usage="System.BitConverter.ToBoolean (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-199">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-199">A byte array.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-200">
            <c>value</c> 内のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-200">The index of the byte within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-201">バイト配列内の指定位置にあるバイトから変換されたブール値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-201">Returns a Boolean value converted from the byte at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-202">
            <paramref name="startIndex" /> の <paramref name="value" /> にあるバイトが 0 以外の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-202">
              <see langword="true" /> if the byte at <paramref name="startIndex" /> in <paramref name="value" /> is nonzero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-203">変換する、<xref:System.Boolean>を呼び出し、バイト形式の値、<xref:System.BitConverter.ToBoolean%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-203">To convert a <xref:System.Boolean> value to its byte representation, call the <xref:System.BitConverter.ToBoolean%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-204">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.Boolean>値で、`ToBoolean`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-204">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Boolean> values with the `ToBoolean` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.Others#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CPP/batobool.cpp#1)]
 [!code-csharp[System.BitConverter.ToXXX.Others#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CS/batobool.cs#1)]
 [!code-vb[System.BitConverter.ToXXX.Others#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/VB/batobool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-205">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-205">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-206">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-206">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As ReadOnlySpan(Of Byte)) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToChar : ReadOnlySpan&lt;byte&gt; -&gt; char" Usage="System.BitConverter.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToChar(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Byte(), startIndex As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToChar : byte[] * int -&gt; char" Usage="System.BitConverter.ToChar (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-207">配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-207">An array.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-208">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-208">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-209">バイト配列内の指定位置にある 2 バイトから変換された Unicode 文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-209">Returns a Unicode character converted from two bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-210">
            <paramref name="startIndex" /> から始まる 2 バイトで構成される文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-210">A character formed by two bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-211"><xref:System.BitConverter.ToChar%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 1 に、<xref:System.Char>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-211">The <xref:System.BitConverter.ToChar%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.Char> value.</span></span> <span data-ttu-id="34fda-212">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください、<xref:System.BitConverter>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="34fda-212">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-213">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.Char>値 (Unicode 文字) を`ToChar`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-213">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Char> values (Unicode characters) with the `ToChar` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.Others#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CPP/batochar.cpp#2)]
 [!code-csharp[System.BitConverter.ToXXX.Others#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CS/batochar.cs#2)]
 [!code-vb[System.BitConverter.ToXXX.Others#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/VB/batochar.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-214">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 1 を引いた値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-214">
              <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-215">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-215">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-216">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-216">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As ReadOnlySpan(Of Byte)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : ReadOnlySpan&lt;byte&gt; -&gt; double" Usage="System.BitConverter.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Byte(), startIndex As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToDouble : byte[] * int -&gt; double" Usage="System.BitConverter.ToDouble (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-217">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-217">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-218">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-218">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-219">バイト配列内の指定位置にある 8 バイトから変換された倍精度浮動小数点数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-219">Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-220">
            <paramref name="startIndex" /> から始まる 8 バイトで構成される倍精度浮動小数点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-220">A double precision floating point number formed by eight bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-221"><xref:System.BitConverter.ToDouble%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 7 を、<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-221">The <xref:System.BitConverter.ToDouble%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Double> value.</span></span> <span data-ttu-id="34fda-222">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください、<xref:System.BitConverter>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="34fda-222">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-223">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.Double>値で、`ToDouble`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-223">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Double> values with the `ToDouble` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.Others#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CPP/batodouble.cpp#3)]
 [!code-csharp[System.BitConverter.ToXXX.Others#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CS/batodouble.cs#3)]
 [!code-vb[System.BitConverter.ToXXX.Others#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/VB/batodouble.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-224">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 7 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-224">
              <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-225">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-225">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-226">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-226">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As ReadOnlySpan(Of Byte)) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : ReadOnlySpan&lt;byte&gt; -&gt; int16" Usage="System.BitConverter.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Byte(), startIndex As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : byte[] * int -&gt; int16" Usage="System.BitConverter.ToInt16 (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-227">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-227">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-228">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-228">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-229">バイト配列内の指定位置にある 2 バイトから変換された 16 ビット符号付き整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-229">Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-230">
            <paramref name="startIndex" /> から始まる 2 バイトで構成される 16 ビット符号付き整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-230">A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-231"><xref:System.BitConverter.ToInt16%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 1 に、<xref:System.Int16>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-231">The <xref:System.BitConverter.ToInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to an <xref:System.Int16> value.</span></span> <span data-ttu-id="34fda-232">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください、<xref:System.BitConverter>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="34fda-232">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-233">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.Int16>値で、`ToInt16`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-233">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Int16> values with the `ToInt16` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.SInts#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/CPP/batoint16.cpp#1)]
 [!code-csharp[System.BitConverter.ToXXX.SInts#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/CS/batoint16.cs#1)]
 [!code-vb[System.BitConverter.ToXXX.SInts#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/VB/batoint16.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-234">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 1 を引いた値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-234">
              <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-235">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-235">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-236">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-236">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.Int16)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="System.BitConverter.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Byte(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : byte[] * int -&gt; int" Usage="System.BitConverter.ToInt32 (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-237">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-237">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-238">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-238">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-239">バイト配列内の指定位置にある 4 バイトから変換された 32 ビット符号付き整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-239">Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-240">
            <paramref name="startIndex" /> から始まる 4 バイトで構成される 32 ビット符号付き整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-240">A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-241"><xref:System.BitConverter.ToInt32%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 3、<xref:System.Int32>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-241">The <xref:System.BitConverter.ToInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to an <xref:System.Int32> value.</span></span> <span data-ttu-id="34fda-242">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください。<xref:System.BitConverter>します。</span><span class="sxs-lookup"><span data-stu-id="34fda-242">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-243">次の例では、<xref:System.BitConverter.ToInt32%2A>メソッドを作成する<xref:System.Int32>値と、8 バイトの配列の上限の 4 バイト 4 バイトの配列から。</span><span class="sxs-lookup"><span data-stu-id="34fda-243">The following example uses the <xref:System.BitConverter.ToInt32%2A> method to create <xref:System.Int32> values from a four-byte array and from the upper four bytes of an eight-byte array.</span></span> <span data-ttu-id="34fda-244">また、使用、<xref:System.BitConverter.GetBytes%28System.Int32%29>と<xref:System.BitConverter.ToInt32%2A>ラウンドト リップさせる方法、<xref:System.Int32>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-244">It also uses the <xref:System.BitConverter.GetBytes%28System.Int32%29> and <xref:System.BitConverter.ToInt32%2A> methods to round-trip an <xref:System.Int32> value.</span></span>  
  
 [!code-csharp[System.BitConverter.ToInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.bitconverter.toint32/cs/toint32.cs#1)]
 [!code-vb[System.BitConverter.ToInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.bitconverter.toint32/vb/toint32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-245">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 3 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-245">
              <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-246">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-246">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-247">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-247">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As ReadOnlySpan(Of Byte)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : ReadOnlySpan&lt;byte&gt; -&gt; int64" Usage="System.BitConverter.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Byte(), startIndex As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : byte[] * int -&gt; int64" Usage="System.BitConverter.ToInt64 (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-248">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-248">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-249">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-249">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-250">バイト配列内の指定位置にある 8 バイトから変換された 64 ビット符号付き整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-250">Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-251">
            <paramref name="startIndex" /> から始まる 8 バイトで構成される 64 ビット符号付き整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-251">A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-252"><xref:System.BitConverter.ToInt64%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 7 を、<xref:System.Int64>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-252">The <xref:System.BitConverter.ToInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Int64> value.</span></span> <span data-ttu-id="34fda-253">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください、<xref:System.BitConverter>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="34fda-253">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-254">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.Int64>値で、`ToInt64`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-254">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Int64> values with the `ToInt64` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.SInts#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/CPP/batoint64.cpp#3)]
 [!code-csharp[System.BitConverter.ToXXX.SInts#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/CS/batoint64.cs#3)]
 [!code-vb[System.BitConverter.ToXXX.SInts#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/VB/batoint64.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-255">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 7 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-255">
              <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-256">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-256">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-257">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-257">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As ReadOnlySpan(Of Byte)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : ReadOnlySpan&lt;byte&gt; -&gt; single" Usage="System.BitConverter.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Byte(), startIndex As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToSingle : byte[] * int -&gt; single" Usage="System.BitConverter.ToSingle (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-258">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-258">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-259">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-259">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-260">バイト配列内の指定位置にある 4 バイトから変換された単精度浮動小数点数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-260">Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-261">
            <paramref name="startIndex" /> から始まる 4 バイトで構成される単精度浮動小数点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-261">A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-262"><xref:System.BitConverter.ToSingle%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 3、<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-262">The <xref:System.BitConverter.ToSingle%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.Single> value.</span></span> <span data-ttu-id="34fda-263">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください。<xref:System.BitConverter>します。</span><span class="sxs-lookup"><span data-stu-id="34fda-263">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-264">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.Single>値で、`ToSingle`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-264">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Single> values with the `ToSingle` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.Others#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CPP/batosingle.cpp#4)]
 [!code-csharp[System.BitConverter.ToXXX.Others#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CS/batosingle.cs#4)]
 [!code-vb[System.BitConverter.ToXXX.Others#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/VB/batosingle.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-265">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 3 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-265">
              <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-266">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-266">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-267">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-267">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.Single)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="34fda-268">指定されたバイト配列の各要素の数値をそれと等価な 16 進数文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-268">Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToString(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member ToString : byte[] -&gt; string" Usage="System.BitConverter.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-269">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-269">An array of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-270">指定されたバイト配列の各要素の数値をそれと等価な 16 進数文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-270">Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-271">
            <paramref name="value" /> 内の対応する要素を表す 16 進値がハイフンで区切られている文字列 ("7F-2C-4A-00" など)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-271">A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <paramref name="value" />; for example, "7F-2C-4A-00".</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-272">すべての要素`value`変換されます。</span><span class="sxs-lookup"><span data-stu-id="34fda-272">All the elements of `value` are converted.</span></span> <span data-ttu-id="34fda-273">によって返される文字列の 16 進数の順序、<xref:System.BitConverter.ToString%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-273">The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-274">次のコード例に変換します<xref:System.Byte>に配列<xref:System.String>オブジェクトを`ToString`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-274">The following code example converts <xref:System.Byte> arrays to <xref:System.String> objects with the `ToString` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToString/CPP/batostring.cpp#1)]
 [!code-csharp[System.BitConverter.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToString/CS/batostring.cs#1)]
 [!code-vb[System.BitConverter.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToString/VB/batostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-275">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-275">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToString(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte(), startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToString : byte[] * int -&gt; string" Usage="System.BitConverter.ToString (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-276">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-276">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-277">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-277">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-278">指定されたバイト サブ配列の各要素の数値をそれと等価な 16 進数文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-278">Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-279">
            <paramref name="value" /> のサブ配列内の対応する要素を表す 16 進値がハイフンで区切られている文字列 ("7F-2C-4A-00" など)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-279">A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value" />; for example, "7F-2C-4A-00".</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-280">配列の位置から要素`startIndex`配列の末尾に変換されます。</span><span class="sxs-lookup"><span data-stu-id="34fda-280">The elements from array position `startIndex` to the end of the array are converted.</span></span> <span data-ttu-id="34fda-281">によって返される文字列の 16 進数の順序、<xref:System.BitConverter.ToString%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-281">The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-282">次のコード例の一部の変換、 <xref:System.Byte> 、指定した配列`startIndex`を<xref:System.String>で、`ToString`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-282">The following code example converts the part of a <xref:System.Byte> array starting at the specified `startIndex` to a <xref:System.String> with the `ToString` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToString#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToString/CPP/batostringii.cpp#2)]
 [!code-csharp[System.BitConverter.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToString/CS/batostringii.cs#2)]
 [!code-vb[System.BitConverter.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToString/VB/batostringii.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-283">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-283">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-284">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-284">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte[] value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8[] value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte(), startIndex As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(cli::array &lt;System::Byte&gt; ^ value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="static member ToString : byte[] * int * int -&gt; string" Usage="System.BitConverter.ToString (value, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-285">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-285">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-286">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-286">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="34fda-287">変換する <c>value</c> の配列要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-287">The number of array elements in <c>value</c> to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-288">指定されたバイト サブ配列の各要素の数値をそれと等価な 16 進数文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-288">Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-289">
            <paramref name="value" /> のサブ配列内の対応する要素を表す 16 進値がハイフンで区切られている文字列 ("7F-2C-4A-00" など)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-289">A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value" />; for example, "7F-2C-4A-00".</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-290">`length`要素配列位置から`startIndex`変換されます。</span><span class="sxs-lookup"><span data-stu-id="34fda-290">The `length` elements from array position `startIndex` are converted.</span></span> <span data-ttu-id="34fda-291">場合`length`が 0 を返します<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="34fda-291">If `length` equals zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="34fda-292">によって返される文字列の 16 進数の順序、<xref:System.BitConverter.ToString%2A>メソッドは、コンピューターのアーキテクチャがリトル エンディアンまたはビッグ エンディアンがかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="34fda-292">The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-293">次の例では、<xref:System.BitConverter.ToString%2A>に、指定したバイト配列の一部を変換するメソッド`startIndex`と指定した`length`文字列にします。</span><span class="sxs-lookup"><span data-stu-id="34fda-293">The following example uses the <xref:System.BitConverter.ToString%2A> method to convert part of a byte array, starting at the specified `startIndex` and with the specified `length`, to a string.</span></span>  
  
 [!code-cpp[System.BitConverter.ToString#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToString/CPP/batostringii.cpp#2)]
 [!code-csharp[System.BitConverter.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToString/CS/batostringii.cs#2)]
 [!code-vb[System.BitConverter.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToString/VB/batostringii.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-294">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-294">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-295">
            <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-295">
              <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span>
          </span>
          <span data-ttu-id="34fda-296">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-296">-or-</span>
          </span>
          <span data-ttu-id="34fda-297">
            <paramref name="startIndex" /> が 0 より大きく、<paramref name="value" /> の長さ以上になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-297">
              <paramref name="startIndex" /> is greater than zero and is greater than or equal to the length of <paramref name="value" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-298">
            <paramref name="startIndex" /> と <paramref name="length" /> の組み合わせが、<paramref name="value" /> 内の位置を指定していません。つまり、<paramref name="startIndex" /> パラメーターが、<paramref name="value" /> の長さから <paramref name="length" /> パラメーターの値を減算した値より大きくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-298">The combination of <paramref name="startIndex" /> and <paramref name="length" /> does not specify a position within <paramref name="value" />; that is, the <paramref name="startIndex" /> parameter is greater than the length of <paramref name="value" /> minus the <paramref name="length" /> parameter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As ReadOnlySpan(Of Byte)) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : ReadOnlySpan&lt;byte&gt; -&gt; uint16" Usage="System.BitConverter.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Byte(), startIndex As Integer) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : byte[] * int -&gt; uint16" Usage="System.BitConverter.ToUInt16 (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-299">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-299">The array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-300">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-300">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-301">バイト配列内の指定位置にある 2 バイトから変換された 16 ビット符号なし整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-301">Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-302">
            <paramref name="startIndex" /> から始まる 2 バイトで構成される 16 ビット符号なし整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-302">A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-303"><xref:System.BitConverter.ToUInt16%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 1 に、<xref:System.UInt16>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-303">The <xref:System.BitConverter.ToUInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.UInt16> value.</span></span> <span data-ttu-id="34fda-304">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください、<xref:System.BitConverter>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="34fda-304">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-305">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.UInt16>値で、`ToUInt16`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-305">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.UInt16> values with the `ToUInt16` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.UInts#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CPP/batouint16.cpp#1)]
 [!code-csharp[System.BitConverter.ToXXX.UInts#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CS/batouint16.cs#1)]
 [!code-vb[System.BitConverter.ToXXX.UInts#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/VB/batouint16.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-306">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 1 を引いた値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-306">
              <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-307">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-307">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-308">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-308">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.UInt16)" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As ReadOnlySpan(Of Byte)) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : ReadOnlySpan&lt;byte&gt; -&gt; uint32" Usage="System.BitConverter.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Byte(), startIndex As Integer) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : byte[] * int -&gt; uint32" Usage="System.BitConverter.ToUInt32 (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-309">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-309">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-310">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-310">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-311">バイト配列内の指定位置にある 4 バイトから変換された 32 ビット符号なし整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-311">Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-312">
            <paramref name="startIndex" /> から始まる 4 バイトで構成される 32 ビット符号なし整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-312">A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-313"><xref:System.BitConverter.ToUInt32%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 3、<xref:System.UInt32>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-313">The <xref:System.BitConverter.ToUInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.UInt32> value.</span></span> <span data-ttu-id="34fda-314">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください、<xref:System.BitConverter>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="34fda-314">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-315">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.UInt32>値で、`ToUInt32`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-315">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.UInt32> values with the `ToUInt32` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.UInts#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CPP/batouint32.cpp#2)]
 [!code-csharp[System.BitConverter.ToXXX.UInts#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CS/batouint32.cs#2)]
 [!code-vb[System.BitConverter.ToXXX.UInts#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/VB/batouint32.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-316">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 3 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-316">
              <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-317">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-317">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-318">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-318">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.UInt32)" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As ReadOnlySpan(Of Byte)) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : ReadOnlySpan&lt;byte&gt; -&gt; uint64" Usage="System.BitConverter.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (byte[] value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int8[] value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Byte(), startIndex As Integer) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(cli::array &lt;System::Byte&gt; ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : byte[] * int -&gt; uint64" Usage="System.BitConverter.ToUInt64 (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34fda-319">バイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-319">An array of bytes.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="34fda-320">
            <c>value</c> 内の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-320">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34fda-321">バイト配列内の指定位置にある 8 バイトから変換された 64 ビット符号なし整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-321">Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34fda-322">
            <paramref name="startIndex" /> から始まる 8 バイトで構成される 64 ビット符号なし整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-322">A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34fda-323"><xref:System.BitConverter.ToUInt64%2A>メソッドは、インデックスからのバイトを変換します。`startIndex`に`startIndex`+ 7 を、<xref:System.UInt64>値。</span><span class="sxs-lookup"><span data-stu-id="34fda-323">The <xref:System.BitConverter.ToUInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.UInt64> value.</span></span> <span data-ttu-id="34fda-324">配列内のバイトの順序は、コンピューター システムのアーキテクチャのエンディアンを反映する必要があります。詳細については、の「解説」を参照してください、<xref:System.BitConverter>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="34fda-324">The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34fda-325">次のコード例の要素を変換する<xref:System.Byte>に配列<xref:System.UInt64>値で、`ToUInt64`メソッド。</span><span class="sxs-lookup"><span data-stu-id="34fda-325">The following code example converts elements of <xref:System.Byte> arrays to <xref:System.UInt64> values with the `ToUInt64` method.</span></span>  
  
 [!code-cpp[System.BitConverter.ToXXX.UInts#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CPP/batouint64.cpp#3)]
 [!code-csharp[System.BitConverter.ToXXX.UInts#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CS/batouint64.cs#3)]
 [!code-vb[System.BitConverter.ToXXX.UInts#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/VB/batouint64.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34fda-326">
            <paramref name="startIndex" /> が <paramref name="value" /> の長さから 7 を引いた値以上で、<paramref name="value" /> の長さから 1 を引いた値以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-326">
              <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34fda-327">
            <paramref name="value" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-327">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="34fda-328">
            <paramref name="startIndex" /> が 0 未満か、<paramref name="value" /> の長さから 1 を引いた値より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="34fda-328">
              <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.BitConverter.GetBytes(System.UInt64)" />
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, bool value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * bool -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, char value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * char -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, double value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * double -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, short value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * int16 -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, int value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * int -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, long value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * int64 -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, float value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * single -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * uint16 -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * uint32 -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public static bool TryWriteBytes (Span&lt;byte&gt; destination, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteBytes (destination As Span(Of Byte), value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteBytes(Span&lt;System::Byte&gt; destination, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member TryWriteBytes : Span&lt;byte&gt; * uint64 -&gt; bool" Usage="System.BitConverter.TryWriteBytes (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>