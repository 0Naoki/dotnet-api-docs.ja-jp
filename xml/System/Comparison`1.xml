<Type Name="Comparison&lt;T&gt;" FullName="System.Comparison&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1e5143be3534a4856cd6bcb96f9f79eb8322c54d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37485565" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate int Comparison&lt;in T&gt;(T x, T y);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Comparison`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Comparison`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Comparison(Of In T)(x As T, y As T) As Integer " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate int Comparison(T x, T y);" />
  <TypeSignature Language="F#" Value="type Comparison&lt;'T&gt; = delegate of 'T * 'T -&gt; int" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="x" Type="T" />
    <Parameter Name="y" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Int32</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">比較するオブジェクトの型。</typeparam>
    <param name="x">比較する最初のオブジェクト。</param>
    <param name="y">比較する 2 番目のオブジェクト。</param>
    <summary>型が同じ 2 つのオブジェクトを比較するメソッドを表します。</summary>
    <returns>
      <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> 値  </term><description> 意味  </description></listheader><item><term> 0 より小さい  </term><description><paramref name="x" /> は <paramref name="y" /> より小さい値です。</description></item><item><term> 0  </term><description><paramref name="x" /> と <paramref name="y" /> は等しいです。</description></item><item><term> 0 より大きい  </term><description><paramref name="x" /> は <paramref name="y" /> より大きい値です。  </description></item></list></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このデリゲートを使用して、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29>のメソッドのオーバー ロード、<xref:System.Array>クラスと<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>のメソッドのオーバー ロード、<xref:System.Collections.Generic.List%601>クラス、配列またはリストの要素を並べ替えるに。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Comparison%601>を持つデリゲート、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>メソッドのオーバー ロードします。  
  
 コード例は、という名前の文字列の代替の比較メソッドを定義`CompareDinosByLength`します。 このメソッドは次のように機能: 比較対照値があるテスト最初に、 `null`、null 参照が null でない未満として扱われます。 次に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較が使用されます。  
  
 A<xref:System.Collections.Generic.List%601>文字列の任意の順序で、4 つの文字列を設定して作成されます。 一覧には、空の文字列と null 参照も含まれています。 一覧を表示すると、並べ替えを使用して、<xref:System.Comparison%601>を表すジェネリック デリゲート、`CompareDinosByLength`メソッドを再び表示されます。  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 次の例では、<xref:System.Comparison%601>デリゲートのコレクションの要素を並べ替える`CityInfo`オブジェクト。 `CityInfo` 都市とその人口に関する情報を含むアプリケーションで定義されたクラスです。 例では、3 つのメソッドを定義します。 `CompareByName`、 `CompareByPopulation`、および`CompareByNames`、順序付けの 3 つの方法を提供する、`CityInfo`オブジェクト。 割り当てられているそれぞれの方法、`comparison`の引数、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29?displayProperty=nameWithType>メソッド。  
  
 [!code-csharp[System.Comparison\`1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.comparison`1/cs/comparisont1.cs#1)]
 [!code-vb[System.Comparison\`1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.comparison`1/vb/comparisont1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Sort``1(``0[],System.Comparison{``0})" />
    <altmember cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
  </Docs>
</Type>