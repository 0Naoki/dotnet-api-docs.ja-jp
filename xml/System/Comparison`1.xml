<Type Name="Comparison&lt;T&gt;" FullName="System.Comparison&lt;T&gt;">
  <TypeSignature Language="C#" Value="public delegate int Comparison&lt;in T&gt;(T x, T y);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Comparison`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Comparison`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Comparison(Of In T)(x As T, y As T) As Integer " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate int Comparison(T x, T y);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="x" Type="T" />
    <Parameter Name="y" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Int32</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="83fef-101">比較するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="83fef-101">The type of the objects to compare.</span></span></typeparam>
    <param name="x"><span data-ttu-id="83fef-102">比較する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="83fef-102">The first object to compare.</span></span></param>
    <param name="y"><span data-ttu-id="83fef-103">比較する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="83fef-103">The second object to compare.</span></span></param>
    <summary><span data-ttu-id="83fef-104">型が同じ 2 つのオブジェクトを比較するメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="83fef-104">Represents the method that compares two objects of the same type.</span></span></summary>
    <returns><span data-ttu-id="83fef-105">
            <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="83fef-105">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
 
  <span data-ttu-id="83fef-106"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="83fef-106"><list type="table"><listheader><term> Value</span></span>  
 
  <span data-ttu-id="83fef-107"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="83fef-107"></term><description> Meaning</span></span>  
 
  <span data-ttu-id="83fef-108"></description></listheader><item><term> 0 より小さい</span><span class="sxs-lookup"><span data-stu-id="83fef-108"></description></listheader><item><term> Less than 0</span></span>  
 
  <span data-ttu-id="83fef-109"></term><description><paramref name="x" /> が <paramref name="y" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="83fef-109"></term><description><paramref name="x" /> is less than <paramref name="y" />.</span></span>  
 
  <span data-ttu-id="83fef-110"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="83fef-110"></description></item><item><term> 0</span></span>  
 
  <span data-ttu-id="83fef-111"></term><description><paramref name="x" /> と <paramref name="y" /> は等しいです。</span><span class="sxs-lookup"><span data-stu-id="83fef-111"></term><description><paramref name="x" /> equals <paramref name="y" />.</span></span>  
 
  <span data-ttu-id="83fef-112"></description></item><item><term> 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="83fef-112"></description></item><item><term> Greater than 0</span></span>  
 
  <span data-ttu-id="83fef-113"></term><description><paramref name="x" /> は <paramref name="y" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="83fef-113"></term><description><paramref name="x" /> is greater than <paramref name="y" />.</span></span>  
 
</description></item></list></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83fef-114">このデリゲートで使用、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29>のメソッド オーバー ロード、<xref:System.Array>クラスおよび<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>のメソッド オーバー ロード、<xref:System.Collections.Generic.List%601>配列またはリストの要素を並べ替えるクラスです。</span><span class="sxs-lookup"><span data-stu-id="83fef-114">This delegate is used by the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29> method overload of the <xref:System.Array> class and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload of the <xref:System.Collections.Generic.List%601> class to sort the elements of an array or list.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83fef-115">使用を次のコード例に示します、<xref:System.Comparison%601>を持つデリゲート、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="83fef-115">The following code example demonstrates the use of the <xref:System.Comparison%601> delegate with the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="83fef-116">このコード例は、名前付き文字列に対して代替の比較のメソッドを定義`CompareDinosByLength`です。</span><span class="sxs-lookup"><span data-stu-id="83fef-116">The code example defines an alternative comparison method for strings, named `CompareDinosByLength`.</span></span> <span data-ttu-id="83fef-117">この方法は次のように、機能: 比較対照値があるテスト最初に、 `null`、null 参照が null でないより小さいとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="83fef-117">This method works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="83fef-118">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</span><span class="sxs-lookup"><span data-stu-id="83fef-118">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="83fef-119">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</span><span class="sxs-lookup"><span data-stu-id="83fef-119">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="83fef-120">A<xref:System.Collections.Generic.List%601>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="83fef-120">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="83fef-121">一覧は、空の文字列と null 参照にも含まれます。</span><span class="sxs-lookup"><span data-stu-id="83fef-121">The list also includes an empty string and a null reference.</span></span> <span data-ttu-id="83fef-122">使用して並べ替えられて、一覧が表示されます、<xref:System.Comparison%601>を表すジェネリック デリゲート、`CompareDinosByLength`メソッドを再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="83fef-122">The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.</span></span>  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 <span data-ttu-id="83fef-123">次の例では、<xref:System.Comparison%601>デリゲートのコレクションの要素を並べ替える`CityInfo`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="83fef-123">The following example uses the <xref:System.Comparison%601> delegate to sort the elements of a collection of `CityInfo` objects.</span></span> <span data-ttu-id="83fef-124">`CityInfo` 市区町村とその人口に関する情報を含むアプリケーション定義のクラスです。</span><span class="sxs-lookup"><span data-stu-id="83fef-124">`CityInfo` is an application-defined class that contains information about a city and its population.</span></span> <span data-ttu-id="83fef-125">例では、3 つのメソッドを定義する`CompareByName`、 `CompareByPopulation`、および`CompareByNames`、順序付けの 3 つの方法を提供する、`CityInfo`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="83fef-125">The example defines three methods, `CompareByName`, `CompareByPopulation`, and `CompareByNames`, that offer three different ways of ordering the `CityInfo` objects.</span></span> <span data-ttu-id="83fef-126">割り当てられているそれぞれの方法、`comparison`の引数、<xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="83fef-126">Each method is assigned to the `comparison` argument of the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Comparison\`1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.comparison`1/cs/comparisont1.cs#1)]
 [!code-vb[System.Comparison\`1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.comparison`1/vb/comparisont1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Sort``1(``0[],System.Comparison{``0})" />
    <altmember cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
  </Docs>
</Type>