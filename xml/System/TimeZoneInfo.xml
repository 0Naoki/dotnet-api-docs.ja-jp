<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="872717442269db35e359463c2667bb5e56c8a385" /><Meta Name="ms.sourcegitcommit" Value="662f143e6be46d519ff8ab4451d543d91e651478" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/18/2018" /><Meta Name="ms.locfileid" Value="53567044" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>世界中のいずれかのタイム ゾーンを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイム ゾーンは、同じ時刻が使用されている地域です。  
  
 <xref:System.TimeZoneInfo>クラスにはより大幅に強化、<xref:System.TimeZone>クラスで、限られた機能だけを提供します。  
  
 <xref:System.TimeZone>クラスは、ローカル タイム ゾーンのみを認識し、世界協定時刻 (UTC) と現地時刻の間での時刻を変換することができます。 A<xref:System.TimeZoneInfo>オブジェクトは、任意のタイム ゾーンとのメソッドを表すことができます、<xref:System.TimeZoneInfo>を対応する他の任意のタイム ゾーンの時刻に 1 つのタイム ゾーンの時刻を変換するクラスを使用できます。 メンバー、<xref:System.TimeZoneInfo>クラスは、次の操作をサポートします。  
  
-   オペレーティング システムによって既に定義されているタイム ゾーンを取得しています。  
  
-   システムで使用できるタイム ゾーンを列挙しています。  
  
-   別のタイム ゾーン間で時刻の変換。  
  
-   オペレーティング システムによって既に定義されていない新しいタイム ゾーンを作成します。  
  
-   後で取得のタイム ゾーンのシリアル化します。  
  
> [!NOTE]
>  インスタンス、<xref:System.TimeZoneInfo>クラスは不変です。 オブジェクトがインスタンス化されると、その値は変更できません。  
  
 インスタンス化することはできません、<xref:System.TimeZoneInfo>オブジェクトを使用して、`new`キーワード。 代わりに、いずれかの静的メンバーを呼び出す必要があります、<xref:System.TimeZoneInfo>クラスは、次の表に示すようにします。  
  
|静的メンバーの名前|説明|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッド|アプリケーションによって提供されるデータからカスタムのタイム ゾーンを作成します。|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッド|その識別子に基づくタイム ゾーンをインスタンス化します。|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> メソッド|以前にシリアル化を再作成する文字列値を逆シリアル化<xref:System.TimeZoneInfo>オブジェクト。|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> メソッド|列挙型を返します<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>の<xref:System.TimeZoneInfo>ローカル システムで利用できるすべてのタイム ゾーンを表すオブジェクト。|  
|<xref:System.TimeZoneInfo.Local%2A> プロパティ|インスタンスを作成、<xref:System.TimeZoneInfo>ローカル タイム ゾーンを表すオブジェクト。|  
|<xref:System.TimeZoneInfo.Utc%2A> プロパティ|インスタンスを作成、 <xref:System.TimeZoneInfo> UTC ゾーンを表すオブジェクト。|  
  
 使用することができます、 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Windows システムまたはタイム ゾーンのクラスによって、ローカルのシステム レジストリで定義されていないタイム ゾーンを作成する方法、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux または macOS でします。 使用してできます、<xref:System.TimeZoneInfo.ToSerializedString%2A>プロパティをアプリケーションにアクセスできるいくつかの形式で格納できる文字列としてタイム ゾーン オブジェクトの情報を保存します。 使用することができます、<xref:System.TimeZoneInfo.FromSerializedString%2A>にシリアル化された文字列に変換するメソッドが戻る、<xref:System.TimeZoneInfo>オブジェクト。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のタイム ゾーンの標準時と世界協定時刻 (UTC) との差を返します。</summary>
        <value>現在のタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって返される時間間隔、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティの (14 時間の世界協定時刻 (UTC) の前であるタイム ゾーン) の 14 時間の範囲は-14 時間 (UTC の背後にある 14 時間をあるタイム ゾーン) のです。 UTC タイム ゾーンが正のオフセットがあります。utc はタイム ゾーンでは、負のオフセットがあります。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A>値は分単位の整数として表されます。 分数を小数部を含めることはできません。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.BaseUtcOffset%2A>のプロパティである、<xref:System.TimeZoneInfo>オブジェクトではなく、<xref:System.TimeZoneInfo.AdjustmentRule>オブジェクト、<xref:System.TimeZoneInfo>クラスは、すべてのタイム ゾーンの調整に UTC から単一のオフセットを適用します。 タイム ゾーンを UTC からのオフセットが変更を反映するために使用して新しいタイム ゾーンを作成する必要があります、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッド。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティとは異なります、<xref:System.TimeZoneInfo.GetUtcOffset%2A>メソッドは、次の方法で。  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティは、UTC とタイム ゾーンの標準時刻の差を返します、<xref:System.TimeZoneInfo.GetUtcOffset%2A>メソッドは、時間で UTC と、特定の時点のタイム ゾーンの時刻の差を返します。  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A>メソッドに反映されます。 タイム ゾーンに調整ルールのアプリケーション、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティはありません。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>現地時刻と世界協定時刻 (UTC) 間の差を表示するプロパティ。  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キャッシュされたタイム ゾーン データをクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キャッシュされたタイム ゾーン データには、ローカル タイム ゾーンと世界協定時刻 (UTC) ゾーンのデータが含まれています。  
  
 呼び出すことができます、`ClearCachedData`のタイム ゾーン情報またはローカル システムのタイム ゾーンに変更されたという事実を反映するように、アプリケーションのキャッシュにメモリを減らすための方法を占めています。  
  
 ローカル、UTC タイム ゾーンへの参照を格納することは推奨されません。 呼び出した後、`ClearCachedData`メソッドでは、これらのオブジェクト変数は未定義になります<xref:System.TimeZoneInfo>オブジェクトへの参照できなくなった<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>または<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>します。 たとえば、次のコードでは、2 番目の呼び出しで、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>メソッドがスローされます、<xref:System.ArgumentException>ため、`local`変数と等しいと見なされなく<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="destinationTimeZone"><paramref name="dateTime" /> の変換先タイム ゾーン。</param>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29>メソッドには、任意で有効の調整規則が適用されます、`destinationTimeZone`タイム ゾーン。  
  
 このオーバー ロード、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>メソッドの値からソース タイム ゾーンの決定、`dateTime`パラメーターの<xref:System.DateTime.Kind%2A>プロパティとして、次の表に示します。  
  
|Kind プロパティ値|ソースのタイム ゾーン|メソッドの動作|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|時間を現地時刻に変換します`destinationTimeZone`します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|時刻を世界協定時刻 (UTC) に変換します`destinationTimeZone`します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|あると見なされます<xref:System.TimeZoneInfo.Local%2A>します。|時間を現地時刻に変換します`destinationTimeZone`します。|  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は次の表に示すように設定されています。  
  
|条件|Kind プロパティ値が返されました|  
|---------------|----------------------------------|  
|`destinationTimeZone` が <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> です。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` が <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> です。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|すべての他の日付と時刻の値と変換先タイム ゾーンで。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 場合の値、`dateTime`パラメーターは、あいまいな現地時刻、その標準時刻として解釈されます。 場合、`dateTime`パラメーターが無効なローカル時刻で、このメソッドは、<xref:System.ArgumentException>します。  
  
 場合の変換`dateTime`結果の日付と時刻の値よりも前<xref:System.DateTime.MinValue?displayProperty=nameWithType>かそれより遅い<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、このメソッドが戻る<xref:System.DateTime.MinValue?displayProperty=nameWithType>または<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、それぞれします。  
  
 呼び出して、UTC との間を変換することも、<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>と<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>メソッド。  
  
   
  
## Examples  
 次の例では、米国およびカナダ東部標準時ゾーンでの時刻に日付と時刻の値の配列を変換します。 ソースのタイム ゾーンに依存していることを示しています、<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>ソースのプロパティ<xref:System.DateTime>値。 これも示します、<xref:System.TimeZoneInfo.ConvertTime%2A>メソッドはタイム ゾーンの調整がソースと宛先の両方のタイム ゾーンで午前 2 時に発生するためのアカウントにタイム ゾーンの調整を受け取ります 2010 年 11 月 7 日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> パラメーターの値が無効な時刻を表しています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> パラメーターの値が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">変換する日付と時刻。</param>
        <param name="destinationTimeZone"><paramref name="dateTime" /> の変換先タイム ゾーン。</param>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29>メソッドには、任意で有効の調整規則が適用されます、`destinationTimeZone`タイム ゾーン。  
  
 このオーバー ロードの他のオーバー ロード、<xref:System.TimeZoneInfo.ConvertTime%2A>メソッドをそのまま使用して、<xref:System.DateTimeOffset>最初のパラメーターとして値。 特定のタイム ゾーンの日時としてではなく、世界協定時刻 (UTC) からのオフセットとして、日付と時刻を識別します。 結果として、`dateTimeOffset`パラメーターは、あいまいな時刻または無効な時刻を表すことはできません。  
  
 変換で、`dateTimeOffset`変換先のタイム ゾーンで有効な任意の調整規則は考慮の時刻に変換先タイム ゾーンで、このメソッドの値。  
  
 場合の変換`dateTimeOffset`結果の日付と時刻の値よりも前<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>かそれより遅い<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>、このメソッドが戻る<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>または<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>、それぞれします。  
  
   
  
## Examples  
 次の例の配列を変換します<xref:System.DateTimeOffset>の米国およびカナダ東部標準時ゾーンの時刻値。 示しています、<xref:System.TimeZoneInfo.ConvertTime%2A>メソッドはタイム ゾーンの調整がソースと宛先の両方のタイム ゾーンで午前 2 時に発生するためのアカウントにタイム ゾーンの調整を受け取ります 2010 年 11 月 7 日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> パラメーターの値が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZone"><paramref name="dateTime" /> のタイム ゾーン。</param>
        <param name="destinationTimeZone"><paramref name="dateTime" /> の変換先タイム ゾーン。</param>
        <summary>あるタイム ゾーンの時刻を別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換元タイム ゾーンでの <paramref name="dateTime" /> パラメーターに対応する、変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTime%2A>メソッドには、任意で有効の調整規則が適用されます、`destinationTimeZone`タイム ゾーン。  
  
 値、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターに対応する必要があります、`sourceTimeZone`パラメーターとして、次の表に示します。  
  
|DateTime.Kind 値|sourceTimeZone 値|メソッドの動作|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等しい<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>します。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等しくない<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>します。|スローされます、<xref:System.ArgumentException>します。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等しい<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>します。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等しくない<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>します。|スローされます、<xref:System.ArgumentException>します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|任意です。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
  
 呼び出すことによって、世界協定時刻 (UTC) からまたはを変換することも、<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>と<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>メソッド。  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は次の表に示すように設定されています。  
  
|条件|Kind プロパティ値が返されました|  
|---------------|----------------------------------|  
|`destinationTimeZone` 引数が <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> です。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 引数が <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> です。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|すべての他の日付と時刻の値、ソースのタイム ゾーン、および変換先タイム ゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 場合の値、`dateTime`パラメーターは、ソースのタイム ゾーンであいまいな時刻、その標準時刻として解釈されます。 場合、`dateTime`パラメーターが無効な時刻ソース タイム ゾーンで、このメソッドをスローする<xref:System.ArgumentException>します。  
  
 場合の変換`dateTime`結果の日付と時刻の値よりも前<xref:System.DateTime.MinValue?displayProperty=nameWithType>かそれより遅い<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、このメソッドが戻る<xref:System.DateTime.MinValue?displayProperty=nameWithType>または<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、それぞれします。  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29>メソッドがスローされます、<xref:System.ArgumentException>例外場合、<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>のプロパティ、`dateTime`引数が<xref:System.DateTimeKind.Local?displayProperty=nameWithType>が、`sourceTimeZone`引数がない<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>します。 参照の等価性と値の等価性テストではなく、メソッドがテスト ソースのタイム ゾーンは、ローカル タイム ゾーンまたは universal のタイム ゾーンが、かどうかを判断する、<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29>メソッド。 なお<xref:System.TimeZoneInfo>ローカル タイム ゾーンを表すし、は、呼び出すことによって取得されるオブジェクト、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッドの参照の等価性がない<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>します。 さらに、<xref:System.TimeZoneInfo>ローカル パスまたは universal のタイム ゾーンを表すし、によって返されるコレクションを反復することで取得するオブジェクト、<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>メソッドの参照の等価性がない<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>または<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>します。 代わりに、呼び出すことができます、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29>メソッド。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29>ハワイ標準時を現地時刻に変換します。  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> パラメーターの <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> ですが、<paramref name="sourceTimeZone" /> パラメーターが <see cref="F:System.DateTimeKind.Local" /> と等しくありません。  
  
または 
<paramref name="dateTime" /> パラメーターの <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Utc" /> ですが、<paramref name="sourceTimeZone" /> パラメーターが <see cref="P:System.TimeZoneInfo.Utc" /> と等しくありません。  
  
または 
<paramref name="dateTime" /> パラメーターが無効な時刻です (つまり、タイム ゾーンの調整規則が原因で、存在しない時刻を表しています)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> パラメーターが <see langword="null" /> です。  
  
- または - 
<paramref name="destinationTimeZone" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>メソッドには、任意で有効の調整規則が適用されます、`destinationTimeZoneId`タイム ゾーン。  
  
 このオーバー ロードの呼び出しとほぼ同じですが、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>その it では、オブジェクト参照ではなく、その識別子を使用して、変換先のタイム ゾーンを指定できます。 ただし、メソッド。 それに対応するタイム ゾーン オブジェクトを取得することがなく、時刻を変換する必要があり、変換された時間が standard または夏時間かどうかを把握する必要はありません、このメソッドは最も役立ちます。  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29>メソッドの値からソース タイム ゾーンの決定、`dateTime`パラメーターの<xref:System.DateTime.Kind%2A>プロパティとして、次の表に示します。  
  
|Kind プロパティ値|ソースのタイム ゾーン|メソッドの動作|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|時間を現地時刻に変換します`destinationTimeZone`します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|時刻を世界協定時刻 (UTC) に変換します`destinationTimeZone`します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|あると見なされます<xref:System.TimeZoneInfo.Local%2A>します。|時間を現地時刻に変換します`destinationTimeZone`します。|  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は次の表に示すように設定されています。  
  
|条件|Kind プロパティ値が返されました|  
|---------------|----------------------------------|  
|`destinationTimeZone` が `TimeZoneInfo.Utc.Id` です。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|その他の`destinationTimeZone`値。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 場合の値、`dateTime`パラメーターは、あいまいな現地時刻、その標準時刻として解釈されます。 場合、`dateTime`パラメーターが無効なローカル時刻で、このメソッドは、<xref:System.ArgumentException>します。  
  
 場合の変換`dateTime`結果の日付と時刻の値よりも前<xref:System.DateTime.MinValue?displayProperty=nameWithType>かそれより遅い<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、このメソッドが戻る<xref:System.DateTime.MinValue?displayProperty=nameWithType>または<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、それぞれします。  
  
 このメソッドは、識別子を持つがで指定されたタイム ゾーンに関する情報を取得、 `destinationTimeZoneId` Windows システムとの間に、レジストリからパラメーター、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux と macOS でします。 使用して作成されたタイム ゾーン オブジェクトを取得できない、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッド。 `destinationTimeZoneId`パラメーターがの長さが、正常に一致する; の場合には、タイム ゾーンの識別子と正確に一致する必要がありますの比較は、`destinationTimeZoneId`とタイム ゾーン識別子は大文字です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <exception cref="T:System.Security.SecurityException">プロセスには、タイム ゾーン情報を格納するレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="destinationTimeZoneId" /> ID がローカル システムで見つかりませんでした。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">変換する日付と時刻。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>メソッドには、任意で有効の調整規則が適用されます、`destinationTimeZoneId`タイム ゾーン。  
  
 このオーバー ロードを呼び出すことは、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>その it では、オブジェクト参照ではなく、その識別子を使用して、変換先のタイム ゾーンを指定できます。 ただし、メソッド。 それに対応するタイム ゾーン オブジェクトを取得することがなく、時刻を変換する必要があり、変換された時間が standard または夏時間かどうかを把握する必要はありません、このメソッドは最も役立ちます。  
  
 `dateTimeOffset`パラメーターが日付を表すと世界協定時刻 (UTC) からの時点と時刻のオフセットがあいまいな時刻または無効な時刻のいずれかを表すことはできません。  
  
 このメソッドは、識別子を持つがで指定されたタイム ゾーンを取得、 `destinationTimeZoneId` Windows システムとの間に、レジストリからパラメーター、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux と macOS でします。 使用して作成されたタイム ゾーン オブジェクトを取得できない、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッド。 `destinationTimeZoneId`パラメーターがの長さが、正常に一致する; の場合には、タイム ゾーンの識別子と正確に一致する必要がありますの比較は、`destinationTimeZoneId`とタイム ゾーン識別子は大文字です。  
  
 変換で、`dateTimeOffset`変換先のタイム ゾーンで有効な任意の調整規則は考慮の時刻に変換先のタイム ゾーン、メソッドの値。  
  
 場合の変換`dateTimeOffset`結果の日付と時刻の値よりも前<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>かそれより遅い<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>、このメソッドが戻る<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>または<xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>、それぞれします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <exception cref="T:System.Security.SecurityException">プロセスには、タイム ゾーン情報を格納するレジストリ キーからの読み取りに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="destinationTimeZoneId" /> ID がローカル システムで見つかりませんでした。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZoneId">変換元タイム ゾーンの ID。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>あるタイム ゾーンの時刻を別のタイム ゾーンの時刻にタイム ゾーン ID に基づいて変換します。</summary>
        <returns>変換元タイム ゾーンでの <paramref name="dateTime" /> パラメーターに対応する、変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>メソッドには、任意で有効の調整規則が適用されます、`destinationTimeZoneId`タイム ゾーン。  
  
 似ていますが、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>使用するメソッド、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>の代わりにそれらの識別子を使用して、ソースと変換先のタイム ゾーンを指定する、<xref:System.TimeZoneInfo>オブジェクト。 それに対応するタイム ゾーン オブジェクトを取得することがなく、時刻を変換する必要があり、変換された時間が standard または夏時間かどうかを把握する必要はありません、このメソッドは最も役立ちます。  
  
 このメソッドを持つ識別子は、タイム ゾーンを取得、`sourceTimeZoneId`と`destinationTimeZoneId`Windows システムとの間のレジストリからパラメーターを[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux と macOS でします。 使用して作成されたタイム ゾーン オブジェクトを取得できない、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッド。  
  
 値、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターに対応する必要があります、`sourceTimeZoneId`パラメーターとして、次の表に示します。  
  
|DateTime.Kind 値|sourceTimeZone 値|メソッドの動作|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等しい`TimeZoneInfo.Utc.Id`します。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等しくない`TimeZoneInfo.Utc.Id`します。|スローされます、<xref:System.ArgumentException>します。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等しい`TimeZoneInfo.Local.Id`します。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等しくない`TimeZoneInfo.Local.Id`します。|スローされます、<xref:System.ArgumentException>します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|任意です。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
  
 呼び出しに依存するため、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッド、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>メソッドに対応するタイム ゾーンを検索する検索を実行する`sourceTimeZoneId`と`destinationTimeZoneId`します。  
  
 場合の値、`dateTime`パラメーターは、ソースのタイム ゾーンであいまいな時刻、その標準時刻として解釈されます。 場合、`dateTime`パラメーターが無効な時刻ソース タイム ゾーンで、このメソッドをスローする<xref:System.ArgumentException>します。  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値に設定されて<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>変換先のタイム ゾーンは、世界協定時刻 (UTC) でない限り、この場合に設定されている<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>ローカル システム時刻を世界の 8 つの都市に対応する時刻を表示するメソッド。  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> パラメーターの <see cref="P:System.DateTime.Kind" /> プロパティは変換元タイム ゾーンと対応していません。  
  
または 
 <paramref name="dateTime" /> はソース タイム ゾーンで無効な時間です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="destinationTimeZoneId" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが破損しています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、タイム ゾーン データが格納されているレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="sourceTimeZoneId" /> ID がローカル システムで見つかりませんでした。  
  
- または - 
<paramref name="destinationTimeZoneId" /> ID がローカル システムで見つかりませんでした。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">世界協定時刻 (UTC)。</param>
        <param name="destinationTimeZone"><paramref name="dateTime" /> の変換先タイム ゾーン。</param>
        <summary>世界協定時刻 (UTC) を、指定されたタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。 <paramref name="destinationTimeZone" /> が <see cref="P:System.TimeZoneInfo.Utc" /> の場合、<see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Utc" />。それ以外の場合、<see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>メソッドには、任意で有効の調整規則が適用されます、`destinationTimeZone`タイム ゾーン。  
  
 このメソッドの正確な動作の値に依存、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターとして、次の表に示します。  
  
|DateTime.Kind プロパティ|変換|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|スローされます、<xref:System.ArgumentException>します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> または <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|世界協定時刻 (UTC) からに変換します。|  
  
 場合の変換`dateTime`結果の日付と時刻の値よりも前<xref:System.DateTime.MinValue?displayProperty=nameWithType>かそれより遅い<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、このメソッドが戻る<xref:System.DateTime.MinValue?displayProperty=nameWithType>または<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、それぞれします。  
  
   
  
## Examples  
 次の例では、中部標準時を世界協定時刻 (UTC) に変換します。  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> の <see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Local" /> です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> は <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻を世界協定時刻 (UTC) に変換します。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <summary>指定の日付と時刻を世界協定時刻 (UTC) に変換します。</summary>
        <returns><paramref name="dateTime" /> パラメーターに対応する世界協定時刻 (UTC)。 <see cref="T:System.DateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティは、常に <see cref="F:System.DateTimeKind.Utc" /> に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実行される正確な変換の値によって異なります、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターとして、次の表に示します。  
  
|DateTime.Kind プロパティ|変換|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|世界協定時刻 (UTC) から現地時刻に変換します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|前提としています`dateTime`が現地時刻と現地時刻から UTC に変換します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|返します`dateTime`変更されません。|  
  
 場合`dateTime`対応このメソッドに、あいまいな現地時刻には標準のローカル時刻である前提としています。 場合`dateTime`メソッドがスローされます、無効なローカル時刻に対応する<xref:System.ArgumentException>します。  
  
> [!NOTE]
>  タイム ゾーンに複数の調整規則では、このオーバー ロードが含まれています、現在のコンピューターのローカルの場合、<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>メソッドとは異なる結果を返す場合、<xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType>と<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType>メソッド。 <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> 現在の調整規則をタイム ゾーン変換のかどうかに常に適用`dateTime`がその日付の範囲内に存在します。 実行すると、 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]、<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType>かどうか、タイム ゾーン変換を現在の調整規則を適用も`dateTime`がその日付の範囲内に存在します。  
  
 場合に相当する UTC`dateTime`よりも前<xref:System.DateTime.MinValue?displayProperty=nameWithType>またはそれ以降を<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、このメソッドが戻る<xref:System.DateTime.MinValue>または<xref:System.DateTime.MaxValue>、それぞれします。  
  
   
  
## Examples  
 次の例は、の変換を示しています。 時間の値が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>、および<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>、それぞれします。 また、あいまいと無効な時間の変換を示しています。  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> は <see langword="true" /> を返します。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZone"><paramref name="dateTime" /> のタイム ゾーン。</param>
        <summary>指定されたタイム ゾーンの時刻を世界協定時刻 (UTC) に変換します。</summary>
        <returns><paramref name="dateTime" /> パラメーターに対応する世界協定時刻 (UTC)。 <see cref="T:System.DateTime" /> オブジェクトの <see cref="P:System.DateTime.Kind" /> プロパティは、常に <see cref="F:System.DateTimeKind.Utc" /> に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターと等しい<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>と`sourceTimeZone`パラメーターと等しい<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>、このメソッドが戻る`dateTime`せず、任意の変換を実行します。  
  
 場合`dateTime`対応このメソッドがあいまいな時刻では、ソースのタイム ゾーンの標準時が前提としています。 場合`dateTime`スローに無効な時刻、このメソッドに対応する<xref:System.ArgumentException>します。  
  
 場合に相当する世界協定時刻 (UTC)`dateTime`よりも前<xref:System.DateTime.MinValue?displayProperty=nameWithType>またはそれ以降を<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、このメソッドが戻る<xref:System.DateTime.MinValue>または<xref:System.DateTime.MaxValue>、それぞれします。  
  
   
  
## Examples  
 次の例では、ローカル システムから現在の日付を取得および世界協定時刻 (UTC) に変換します東京標準時に変換し、最後に東京 (標準時) からを UTC に変換します。 2 つの UTC 時刻が同じであるに注意してください。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />
          <see langword=".Kind" /> は <see cref="F:System.DateTimeKind.Utc" /> ですが、<paramref name="sourceTimeZone" /> は <see cref="P:System.TimeZoneInfo.Utc" /> と一致しません。  
  
または 
 <paramref name="dateTime" /><see langword=".Kind" /> は <see cref="F:System.DateTimeKind.Local" /> ですが、<paramref name="sourceTimeZone" /> は <see cref="P:System.TimeZoneInfo.Local" /> と一致しません。  
  
- または - 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> は <see langword="true" /> を返します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> は <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ローカル コンピューターにないタイム ゾーンを定義します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">このタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表すオブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <summary>指定された ID、世界協定時刻 (UTC) からのオフセット、表示名、および標準時の表示名を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーン。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29>メソッドは (夏時間をサポートしていないタイム ゾーン) の調整がないタイム ゾーンを作成するために適しています。 夏時間の調整が含まれるタイム ゾーンを定義するいずれかの操作を使用して、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>または<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>メソッド。  
  
 次の表は、パラメーターに提供されている間のリレーションシップ、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>メソッドとプロパティの<xref:System.TimeZoneInfo>メソッドの呼び出しによって返されるオブジェクト。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo プロパティ|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 通常、タイム ゾーンの標準時名とその識別子は、同じです。 ただし、タイム ゾーンの識別子の長さは、32 文字を超えることはできません。 渡された文字列、`displayName`パラメーターがごく標準的な形式に従います。 表示名の最初の部分は、世界協定時刻では、頭字語 GMT (グリニッジ標準時)、かっこで囲まれたで示されるから、タイム ゾーンの基本のオフセットです。 タイム ゾーン自体、または 1 つまたは複数の市区町村、領域、またはタイム ゾーン、国またはその両方を識別する文字列が続きます。 次に例を示します。  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 次の例では、南極モーソンおよびホルム湾の地域のカスタムのタイム ゾーンを作成します。 新しいタイム ゾーンの時刻にローカル時刻に変換した結果が表示されます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> パラメーターが空の文字列 ("") です。  
  
または 
<paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、-14 時間を下回っています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">方法 : 調整規則のないタイム ゾーンを作成する</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">このタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表すオブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <param name="daylightDisplayName">新しいタイム ゾーンの夏時間名。</param>
        <param name="adjustmentRules">特定の期間のベース UTC オフセットを増やす配列。</param>
        <summary>指定された ID、世界協定時刻 (UTC) からのオフセット、表示名、標準時名、夏時間名、および夏時間規則を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>メソッドは夏時間をサポートするタイム ゾーンを作成するために適しています。 夏時間をサポートしていないタイム ゾーンを定義するいずれかの操作を使用して、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>または<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>メソッド。  
  
 次の表は、パラメーターに提供されている間のリレーションシップ、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>メソッドとのメンバー、<xref:System.TimeZoneInfo>メソッドの呼び出しによって返されるオブジェクト。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo メンバー|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|配列の<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>によって返されるオブジェクト、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッド。|  
  
 通常、タイム ゾーンの標準時名とその識別子は、同じです。 ただし、タイム ゾーンの識別子の長さは、32 文字を超えることはできません。 渡された文字列、`displayName`パラメーターがごく標準的な形式に従います。 表示名の最初の部分は、世界協定時刻では、頭字語 GMT (グリニッジ標準時)、かっこで囲まれたで示されるから、タイム ゾーンの基本のオフセットです。 タイム ゾーン自体、または 1 つまたは複数の市区町村、領域、またはタイム ゾーン、国またはその両方を識別する文字列が続きます。 次に例を示します。  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset`パラメーターがカスタムのタイム ゾーンのオフセットから世界協定時刻 (UTC) のすべてのタイム ゾーンの調整規則を定義します。 つまり、<xref:System.TimeZoneInfo>オブジェクト モデルで UTC からのタイム ゾーンのオフセットは、タイム ゾーンの有効期間を通じて一定とが存在する特定の調整規則の独立しました。 タイム ゾーンを UTC からのオフセットが変更を反映するためには、新しいタイム ゾーン オブジェクトを作成する必要があります。  
  
 次の手順では、タイム ゾーンの調整規則が定義されています。  
  
1.  いずれかを呼び出し、<xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>または<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A>最初と最後の調整規則ごとの切り替え時間を定義するメソッド。  
  
2.  呼び出す、<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>各調整規則のメソッド。  
  
3.  として渡される配列に調整規則を割り当てることができます、`adjustmentRules`パラメーター。  
  
   
  
## Examples  
 次の例では、南極パーマー基地およびアンヴァース島のカスタムのタイム ゾーンを作成します。 新しいタイム ゾーンの時刻にローカル時刻を変換し、結果が表示されます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> パラメーターが空の文字列 ("") です。  
  
- または - 
<paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、-14 時間を下回っています。</exception>
        <exception cref="T:System.InvalidTimeZoneException"><paramref name="adjustmentRules" /> パラメーターに指定された調整規則が重複しています。  
  
または 
<paramref name="adjustmentRules" /> パラメーターに指定された調整規則が時系列順ではありません。  
  
または 
<paramref name="adjustmentRules" /> の 1 つ以上の要素が <see langword="null" /> です。  
  
- または - 
複数の調整規則を適用できる日付があります。  
  
または 
<paramref name="baseUtcOffset" /> パラメーターと、<paramref name="adjustmentRules" /> 配列内にある 1 つ以上のオブジェクトの <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 値の合計が、14 時間を上回っているか、-14 時間を下回っています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">方法 : 調整規則のあるタイム ゾーンを作成する</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">現在のタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表す <see cref="T:System.TimeSpan" /> オブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <param name="daylightDisplayName">新しいタイム ゾーンの夏時間名。</param>
        <param name="adjustmentRules">特定の期間のベース UTC オフセットを増やす <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> オブジェクトの配列。</param>
        <param name="disableDaylightSavingTime">新しいオブジェクトの <paramref name="adjustmentRules" /> に含まれている夏時間関連の情報をすべて破棄する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定された ID、世界協定時刻 (UTC) からのオフセット、表示名、標準時名、夏時間名、夏時間規則、および返されるオブジェクトに夏時間情報を反映するかどうかを示す値を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーン。 <paramref name="disableDaylightSavingTime" /> パラメーターが <see langword="true" /> の場合、返されるオブジェクトに夏時間データはありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロードを使用することができます、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>夏時間のサポートは、実行時に条件によって決まりますできますカスタム タイム ゾーンを作成します。  
  
 次の表は、パラメーターに提供されている間のリレーションシップ、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>メソッドとのメンバー、<xref:System.TimeZoneInfo>メソッドの呼び出しによって返されるオブジェクト。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo プロパティ|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> 場合`disableDaylightSavingTime`は`false`;<xref:System.String.Empty?displayProperty=nameWithType>場合`disableDaylightSavingTime`は`true`します。|  
|`adjustmentRules`|配列の<xref:System.TimeZoneInfo.AdjustmentRule>によって返されるオブジェクト、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッド場合`disableDaylightSavingTime`は`false`; によって返される空の配列、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッド場合`disableDaylightSavingTime`は`true`します。|  
|`disableDaylightSavingTime`|いない<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>します。|  
  
 通常、タイム ゾーンの標準時名とその識別子は、同じです。 ただし、タイム ゾーンの識別子の長さは、32 文字を超えることはできません。 渡された文字列、`displayName`パラメーターがごく標準的な形式に従います。 表示名の最初の部分は、世界協定時刻では、頭字語 GMT (グリニッジ標準時)、かっこで囲まれたで示されるから、タイム ゾーンの基本のオフセットです。 タイム ゾーン自体、または 1 つまたは複数の市区町村、領域、またはタイム ゾーン、国またはその両方を識別する文字列が続きます。 例:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 次の手順では、タイム ゾーンの調整規則が定義されています。  
  
1.  いずれかを呼び出し、<xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>または<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A>最初と最後の調整規則ごとの遷移の規則を定義するメソッド。  
  
2.  呼び出す、<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>各調整規則のメソッド。  
  
3.  として渡される配列に調整規則を割り当てることができます、`adjustmentRules`パラメーター。  
  
 場合`disableDaylightSavingTime`パラメーターが`false`、このメソッドの操作のと同じですが、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>オーバー ロードします。 場合`disableDaylightSavingTime`は`true`、返されたオブジェクトに調整規則が含まれていないと、<xref:System.TimeZoneInfo.DaylightName%2A>プロパティの値が空の文字列。  
  
   
  
## Examples  
 次の例では、南極パーマー基地およびアンヴァース島のカスタムのタイム ゾーンを作成します。 設定、`disableDaylightSavingTime`への呼び出しでパラメーター、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType>メソッドを`true`します。 新しいタイム ゾーンの夏時間名、1 つが存在する場合、新しいタイム ゾーンに夏時間の情報がないことを確認する調整規則の数が表示されます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> パラメーターが空の文字列 ("") です。  
  
- または - 
<paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、-14 時間を下回っています。</exception>
        <exception cref="T:System.InvalidTimeZoneException"><paramref name="adjustmentRules" /> パラメーターに指定された調整規則が重複しています。  
  
- または - 
<paramref name="adjustmentRules" /> パラメーターに指定された調整規則が時系列順ではありません。  
  
または 
<paramref name="adjustmentRules" /> の 1 つ以上の要素が <see langword="null" /> です。  
  
または 
複数の調整規則を適用できる日付があります。  
  
または 
<paramref name="baseUtcOffset" /> パラメーターと、<paramref name="adjustmentRules" /> 配列内にある 1 つ以上のオブジェクトの <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 値の合計が、14 時間を上回っているか、-14 時間を下回っています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">方法 : 調整規則のないタイム ゾーンを作成する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">方法 : 調整規則のあるタイム ゾーンを作成する</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のタイム ゾーンの夏時間の表示名を取得します。</summary>
        <value>タイム ゾーンの夏時間の表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示名は、Windows オペレーティング システムと共にインストールされたカルチャに基づいてローカライズされます。  
  
 A<xref:System.TimeZoneInfo.DaylightName%2A>プロパティの値でない<xref:System.String.Empty?displayProperty=nameWithType>または`null`必ずしもタイム ゾーンが夏時間をサポートしています。 タイム ゾーンが夏時間をサポートするかどうかを判断するには、値を確認、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティ。  
  
 ほとんどの場合、`DaylightName`タイム ゾーンのシステム定義のプロパティが<xref:System.String.Empty?displayProperty=nameWithType>または`null`します。 ただし、<xref:System.TimeZoneInfo.DaylightName%2A>にカスタムのタイム ゾーンのプロパティを設定できます<xref:System.String.Empty?displayProperty=nameWithType>します。 これは、カスタム タイム ゾーンがによって作成されたときに発生します、<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType>または<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType>オーバー ロードと`disableDaylightSavingTime`パラメーターが`true`します。 そのため、コードとは限りませんがの値、<xref:System.TimeZoneInfo.DaylightName%2A>プロパティは`null`または空です。  
  
 <xref:System.TimeZoneInfo.DaylightName%2A>プロパティは、<xref:System.TimeZone.DaylightName%2A>のプロパティ、<xref:System.TimeZone>クラス。  
  
   
  
## Examples  
 次の例は、という名前のメソッドを定義します。`DisplayDateWithTimeZoneName`を使用して、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>タイム ゾーンの標準時名または夏時間名を表示するかどうかを判断するメソッド。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンを表す標準表示名を取得します。</summary>
        <value>タイム ゾーンの標準表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示名は、Windows オペレーティング システムと共にインストールされたカルチャに基づいてローカライズされます。  
  
 Windows システムのタイム ゾーンのタイム ゾーンの表示名では、ごく標準的な形式に従います。 表示名の最初の部分は、世界協定時刻では、頭字語 GMT (グリニッジ標準時)、かっこで囲まれたで示されるから、タイム ゾーンの基本のオフセットです。 世界協定時刻は、オフセットなし gmt はかっこで囲みます。  タイム ゾーンまたは 1 つ以上の都市や地域など、タイム ゾーンの国を識別する文字列が続きます。 次に例を示します。  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 次の例では、取得、<xref:System.TimeZoneInfo>ローカル タイム ゾーンを表し、その表示名、標準時名、および夏時間名を出力するオブジェクト。 米国内のシステムの出力が表示されます。太平洋標準時ゾーンでの実行例を次に示します。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しいかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のオブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと別のオブジェクトが等しいかどうかを判断します。</summary>
        <returns><paramref name="obj" /> が現在のインスタンスと等しい <see cref="T:System.TimeZoneInfo" /> オブジェクトである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドに変換またはキャスト`obj`を<xref:System.TimeZoneInfo>オブジェクトし、現在のインスタンスと比較します。 等しいかどうかテストは、値の比較に基づいています。 現在<xref:System.TimeZoneInfo>インスタンスと`obj`は次の条件であると見なされます。  
  
-   実行時の型の`obj`は<xref:System.TimeZoneInfo>します。  
  
-   2 つのオブジェクトが同じである<xref:System.TimeZoneInfo.Id%2A>プロパティの値。  
  
-   2 つのオブジェクトでは、同じ調整規則があります。  
  
 `obj` が `null` の場合、このメソッドは `false` を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.Equals%28System.Object%29>ローカル タイム ゾーンは太平洋標準時または東部標準時であるかどうかを判断するメソッド。  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">現在のオブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと別の <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しいかどうかを判断します。</summary>
        <returns>2 つの <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等しいかどうかは、値の比較に基づいています。 2 つ<xref:System.TimeZoneInfo>オブジェクトは、次の条件下で等しいと見なされます。  
  
-   値、<xref:System.TimeZoneInfo.Id%2A>プロパティは同じです。  
  
-   同じ調整規則があります。  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 次の式を評価して得た結果をブール値を返します。  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 場合、`other`パラメーターは初期化されていない<xref:System.TimeZoneInfo>オブジェクトに、このメソッドが返す`false`します。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29>ローカル タイム ゾーンは太平洋標準時または東部標準時であるかどうかを判断するメソッド。  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。<see cref="P:System.TimeZoneInfo.Id" /> プロパティの値です。</param>
        <summary>その識別子に基づいて、新しい <see cref="T:System.TimeZoneInfo" /> オブジェクトをインスタンス化されます。</summary>
        <returns>ID が <paramref name="id" /> パラメーターの値であるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id`パラメーターがの長さが、正常に一致する; の場合には、タイム ゾーンの識別子と正確に一致する必要がありますの比較は、`id`とタイム ゾーン識別子は大文字です。 読み取り専用コレクションを使用するカスタムのプロシージャを作成する部分一致に基づくタイム ゾーン オブジェクトを取得する場合は、<xref:System.TimeZoneInfo>によって返されるオブジェクト、<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>メソッド。  
  
 Windows システムでは、`FindSystemTimeZoneById`一致を試みます`id`レジストリの hkey_local_machine \software\microsoft\windows nt \currentversion\time Zones 分岐のサブキーの名前にします。 利用可能なタイム ゾーン情報を使用して、Linux と macOS で、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)します。 場合は、レジストリまたはライブラリには、希望するタイム ゾーンの情報がないを作成、特定のタイム ゾーンのオーバー ロードのいずれかを呼び出すか、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドを呼び出して、または<xref:System.TimeZoneInfo.FromSerializedString%2A>を逆シリアル化、<xref:System.TimeZoneInfo>オブジェクトを必要なタイム ゾーンを表します。 ただし、これらのメソッド呼び出しによって作成されたタイム ゾーンはシステム定義の時刻ではなくを使用して取得することはできません、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッド。 このカスタムのタイム ゾーンは、によって返されるオブジェクトの参照を介してのみアクセスできる、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>または<xref:System.TimeZoneInfo.FromSerializedString%2A>メソッドの呼び出し。  
  
このメソッドは、新しい返します<xref:System.TimeZoneInfo>各メソッド呼び出しのインスタンスはキャッシュされたオブジェクトを返すことはできません。 これを呼び出すアプリケーションのパフォーマンスに影響が、`FindSystemTimeZoneById`繰り返し同じ識別子を持つメソッド。   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>東京標準タイム ゾーンを取得します。 これは、<xref:System.TimeZoneInfo>東京のローカル時刻を時刻に変換し、東京 (標準時) または東京夏時間があるかどうかを判断するオブジェクトを使用しています。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">システムに、タイム ゾーンの情報を保持するための十分なメモリがありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">指定されたタイム ゾーン ID <paramref name="id" /> が見つかりませんでした。 つまり、<paramref name="id" /> と同じ名前のタイム ゾーン識別子が存在していないか、または識別子は存在するものの、それにはタイム ゾーンのデータが含まれていません。</exception>
        <exception cref="T:System.Security.SecurityException">プロセスには、タイム ゾーン情報を格納するレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">方法 : TimeZoneInfo オブジェクトをインスタンス化する</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">シリアル化された <see cref="T:System.TimeZoneInfo" /> オブジェクトの文字列表現。</param>
        <summary>文字列を逆シリアル化して、シリアル化された元の <see cref="T:System.TimeZoneInfo" /> オブジェクトを再作成します。</summary>
        <returns>シリアル化された元のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 別の Windows またはレジストリに含まれていないタイム ゾーンを作成するために必要なすべてのコードを提供するために、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux と macOS でします。 カスタムのタイム ゾーンといずれかを定義できますを使用して、<xref:System.TimeZoneInfo.ToSerializedString%2A>メソッドでは、スタンドアロン実行可能ファイルまたはアプリケーションのセットアップ プログラムを文字列としてのタイム ゾーンの保存に使用します。 アプリケーションの記憶域の場所からこの文字列を取得し、インスタンス化を使用して、<xref:System.TimeZoneInfo.FromSerializedString%2A>メソッド。  
  
   
  
## Examples  
 次の例では、/南極を取得しようとしました。 ローカル システムからのタイム ゾーン。 失敗した場合、コードは、アプリケーション ディレクトリ内のテキスト ファイルからタイム ゾーンに関する情報を取得しようとします。 この試行が失敗した場合、コードは、タイム ゾーンを作成し、タイム ゾーンに関する情報をテキスト ファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="source" /> パラメーターが <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> パラメーターが null 文字列です。</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">ソース パラメーターを逆シリアル化して <see cref="T:System.TimeZoneInfo" /> オブジェクトに戻すことはできません。</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">方法 : 埋め込みリソースからタイム ゾーンを復元する</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトに適用する <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> オブジェクトの配列を取得します。</summary>
        <returns>このタイム ゾーンのオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドの配列を取得する<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>オブジェクト。 配列内の各オブジェクトがそのデルタと同様に、そのタイム ゾーン調整の有効な開始と終了日を定義します (調整を変更する時間のによって使用される正確な量)。 さらに、2 つのプロパティが返す<xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType>標準時との間の切り替えが発生したときを定義するオブジェクト。  
  
 タイム ゾーンに複数の調整規則がある場合は、通常、順序がから最も古い (インデックス 0) の最新版に (インデックス位置にある<xref:System.Array.Length%2A>- 1)。  
  
 タイム ゾーン調整の規則が存在しない場合、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドは空の配列を返します (配列の<xref:System.Array.Length%2A>は 0 です)。  
  
 によって返される配列の要素への変更、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドは、特定のタイム ゾーンに属している調整規則には反映されません。 (履歴の遷移と夏時間の間の反映など) のタイム ゾーンの調整規則を変更する必要があります、適切な調整規則では、新しいタイム ゾーンを作成ではなく既存のものを変更します。  
  
   
  
## Examples  
 次の例は、ローカル システム情報を表示します完了について、コンソールにそれらの調整規則で定義されているすべてのタイム ゾーンを取得します。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">システムには、調整規則のメモリ内コピーを作成するのに十分なメモリがありません。</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
        <returns>特定の日付と時刻を割り当て可能な、世界協定時刻 (UTC) オフセットを表すオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの正確な動作の間のリレーションシップに依存、<xref:System.DateTime.Kind%2A>プロパティおよび<xref:System.TimeZoneInfo>オブジェクトとして、次の表に示します。  
  
|TimeZoneInfo オブジェクトの種類|Kind プロパティ値|動作|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|オフセットを返しますのあいまいな時刻`dateTime`します。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|変換`dateTime`を現地時刻、および、その時間のオフセットをあいまいな時刻を返します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|任意の値。|スローされます、<xref:System.ArgumentException>します。|  
|タイム ゾーン。|<xref:System.DateTimeKind.Local> または <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|変換`dateTime`指定されたタイム ゾーンに、その時刻があいまいかどうかを判断します。|  
|タイム ゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定かどうか`dateTime`が指定されたタイム ゾーンであいまいです。|  
  
 順序<xref:System.TimeSpan>このメソッドによって返される配列内のオブジェクトが定義されていません。 要素は、そのタイム ゾーンの値を比較することで、タイム ゾーンの標準時間からオフセットを表しますを決定するただし、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティ。 あいまいな時刻をタイム ゾーンの標準時刻にマップするを参照してください。[方法。あいまいな時刻を解決](~/docs/standard/datetime/resolve-ambiguous-times.md)します。  
  
   
  
## Examples  
 次の例は、という名前のメソッドを定義します。`ShowPossibleUtcTimes`を使用して、<xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29>あいまいな時刻を対応する世界協定時刻 (UTC) が可能にマップする方法。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 メソッドには、次のコードを使用して呼び出すことができます。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> はあいまいな時刻ではありません。</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">方法 : あいまいな時刻を解決する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">方法 : ユーザーがあいまいな時刻を解決できるようにする</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日付と時刻。</param>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
        <returns>特定の日付と時刻を割り当て可能な、世界協定時刻 (UTC) オフセットを表すオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの正確な動作の間のリレーションシップに依存、<xref:System.DateTimeOffset.Offset%2A>のプロパティ、`dateTimeOffset`パラメーターおよび<xref:System.TimeZoneInfo>オブジェクト。 場合の値、<xref:System.DateTimeOffset.Offset%2A>プロパティに対応可能なオフセットの現在のタイム ゾーンの協定世界時 (UTC) からの日付と時刻をメソッドを返す可能性のあるオフセット。 それ以外の場合、変換`dateTimeOffset`の現在のタイム ゾーン、しを返します。 そのオフセットを、使用可能な時間の日付と時刻にします。  
  
 順序<xref:System.TimeSpan>このメソッドによって返される配列内のオブジェクトが定義されていません。 要素は、そのタイム ゾーンの値を比較することで、タイム ゾーンの標準時間からオフセットを表しますを決定するただし、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティ。 あいまいな時刻をタイム ゾーンの標準時刻にマップするを参照してください。[方法。あいまいな時刻を解決](~/docs/standard/datetime/resolve-ambiguous-times.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> はあいまいな時刻ではありません。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">方法 : あいまいな時刻を解決する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">方法 : ユーザーがあいまいな時刻を解決できるようにする</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ハッシュ関数として機能し、ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造に使用されます。</summary>
        <returns>この <see cref="T:System.TimeZoneInfo" /> オブジェクトのハッシュ コードとして機能する 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、<xref:System.TimeZoneInfo.GetHashCode%2A>メソッドを参照してください<xref:System.Object.GetHashCode%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ローカル システムで情報を使用できるすべてのタイム ゾーンのコレクションを、並べ替えられた状態で返します。</summary>
        <returns><see cref="T:System.TimeZoneInfo" /> オブジェクトの読み取り専用のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>メソッドは、Windows システムとの間に、レジストリの hkey_local_machine \software\microsoft\windows nt \currentversion\time Zones キーのサブキーからすべての利用可能なタイム ゾーン情報を取得、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone) Linux と macOS でします。 正常に取得し、個人の特定の文字列プロパティの値を解析できない場合<xref:System.TimeZoneInfo>オブジェクトの場合、このメソッドでは、その値を設定を空の文字列 ("")。  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>メソッドのコレクションを返します<xref:System.TimeZoneInfo>オブジェクトで定義されているタイム ゾーンの場合にのみ、または ICU ライブラリ。 オーバー ロードを使用して作成されたタイム ゾーンを含まない、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッド。 これらは、タイム ゾーンの作成方法によって返されるオブジェクトの参照を介してのみアクセスできます。  
  
 このメソッドによって返されるコレクションには、現在のカルチャを使用して表示名で UTC オフセットがあり、同じの UTC オフセットを使用するタイム ゾーンは並べ替え。 表示名については、次を参照してください。<xref:System.TimeZoneInfo.DisplayName%2A>します。  
  
 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>このメソッドによって返されるオブジェクトをサポートしています、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスを反復処理できるを使用して、 `foreach` (で C# の場合) または`For Each…Next`(Visual Basic) でのステートメント。 ループの各反復処理は、次を提供します。<xref:System.TimeZoneInfo>コレクション内のオブジェクト。  
  
 コレクション<xref:System.TimeZoneInfo>オブジェクトは、ローカル コンピューターで定義されているタイム ゾーンを表します。 はすべての期間内にすべてのタイム ゾーンの完全な情報を必ずしも指定しません。 タイム ゾーンがローカル コンピューターに見つからない場合は、オーバー ロードを使用してカスタムのタイム ゾーンを作成することができます、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッド。 詳細については、「[方法 :調整規則のないタイム ゾーンを作成](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md)と[方法。タイム ゾーン調整規則を作成](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)です。  
  
 呼び出すことによって、ローカル コンピューター上に個別のタイム ゾーンが定義されているかどうかを確認することも、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッドをパラメーターとして取得するタイム ゾーンの識別子。  
  
   
  
## Examples  
 次の例では、コンピューターで定義されているタイム ゾーンを表すタイム ゾーン オブジェクトのコレクションを取得し、それらについての情報をテキスト ファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">すべてのタイム ゾーン情報を格納するにはメモリが不足しています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、タイム ゾーン情報が含まれているレジストリ キーから読み取る権限がありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 (UTC) とのオフセットまたは差を計算します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">オフセットの計算対象となる日付と時刻。</param>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 (UTC) とのオフセットまたは差を計算します。</summary>
        <returns>2 つのタイム ゾーンの時差を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返される期間には、現在のタイム ゾーン調整規則の適用により、相違点が含まれています。 異なり、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティでは、世界協定時刻 (UTC) とタイム ゾーンの標準時刻の差を返し、そのため、アカウントを調整規則を考慮はされません。  
  
 場合、`dateTime`パラメーターの<xref:System.DateTime.Kind%2A>プロパティは、タイム ゾーン オブジェクトに対応していない、このメソッドは、結果を返す前に、必要な変換を実行します。 たとえば場合に発生、<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>がタイム ゾーン オブジェクトがローカル タイム ゾーンではありません。 場合`dateTime`があいまい、または変換後の時刻があいまいな場合は、このメソッドは、標準時とあいまいな時刻を解釈します。 場合`dateTime`が無効です、このメソッドが戻る、 <xref:System.TimeSpan> UTC とタイム ゾーンの標準時刻の差を表すオブジェクト。  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType>メソッドは操作に似ています、<xref:System.TimeZone.GetUtcOffset%2A>のメソッド、<xref:System.TimeZone>クラス。  
  
   
  
## Examples  
 次の例の使用を示しています、<xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29>メソッドの異なるタイム ゾーンと日付の値が異なる<xref:System.DateTime.Kind%2A>プロパティの値。  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">オフセットの計算対象となる日付と時刻。</param>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 (UTC) とのオフセットまたは差を計算します。</summary>
        <returns>世界協定時刻 (UTC) と現在のタイム ゾーンとの時差を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返される期間には、現在のタイム ゾーン調整規則の適用により、相違点が含まれています。 異なり、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティでは、世界協定時刻 (UTC) とタイム ゾーンの標準時刻の差を返し、そのため、アカウントを調整規則を考慮はされません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在のオブジェクトと別の <see cref="T:System.TimeZoneInfo" /> オブジェクトが同じ調整規則を持っているかどうかを判断します。</summary>
        <returns>2 つのタイム ゾーンが同じ調整規則と同じベース オフセットを持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ように、<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>メソッド、<xref:System.TimeZoneInfo.HasSameRules%2A>メソッドでは、2 つのタイム ゾーンが同じベース オフセットを持っているかどうかを示します (で定義されている、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティ) と同じ調整規則。 異なり、<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>メソッド、<xref:System.TimeZoneInfo.HasSameRules%2A>タイム ゾーン id は比較しません (で定義されている、<xref:System.TimeZoneInfo.Id%2A>プロパティ)。  
  
   
  
## Examples  
 Windows 上のレジストリで定義されているタイム ゾーンの数では通常、および[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux と macOS には、世界協定時刻 (UTC) と同じ調整規則から同じオフセットを持っています。 次の例では、コンソールにこれらのタイム ゾーンの一覧が表示されます。  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="other" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーン ID を取得します。</summary>
        <value>タイム ゾーン ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイム ゾーン id は、特定のタイム ゾーンを一意に識別するキーの文字列です。 Windows システムでは、Windows システムとの間に、レジストリの hkey_local_machine \software\microsoft\windows \currentversion\time ゾーン ブランチのサブキーに対応する、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux と macOS でします。 パラメーターとして渡すことが、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>をインスタンス化するメソッド、<xref:System.TimeZoneInfo>特定のタイム ゾーンを表すオブジェクト。  
  
> [!IMPORTANT]
>  Windows レジストリにキー名には、最大 255 文字できますが、カスタム タイム ゾーンに割り当てることの識別子が 32 文字以下にすることをお勧めします。 識別子が長いほど、不適切なキーの名前となる可能性が高く、取得するときに指定します。  
  
 値、<xref:System.TimeZoneInfo.Id%2A>プロパティは、通常は、常にではありませんと同一の<xref:System.TimeZoneInfo.StandardName%2A>プロパティ。 協定のタイム ゾーンの識別子は、UTC です。  
  
   
  
## Examples  
 次の例では、各ローカル コンピューターで定義されているタイム ゾーンの識別子が表示されます。  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 (UTC) に割り当て可能かどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻の値。</param>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 (UTC) に割り当て可能かどうかを判断します。</summary>
        <returns><see langword="true" /> パラメーターがあいまいな場合は <paramref name="dateTime" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 あいまいな時刻は、現在のタイム ゾーンの時間の範囲内にあります。 つまり、標準時または調整規則の適用に起因する時間のいずれかであることができます。 通常、クロックが夏時間から標準時間に戻るに設定されている場合があいまいな時刻が発生します。 図の例のセクションを参照してください。  
  
 世界協定時刻 (UTC) には、あいまいな時刻がありません。ゾーンが夏時間をサポートしていないどちらでもない時刻の操作を行います。 そのため、これらのタイム ゾーンがあるない調整規則を呼び出すと、<xref:System.TimeZoneInfo.IsAmbiguousTime%2A>メソッドの戻り値を常に`false`します。  
  
 夏時間を観察するタイム ゾーンの場合、このメソッドの動作の詳細がの間のリレーションシップに依存、<xref:System.DateTime.Kind%2A>プロパティおよび<xref:System.TimeZoneInfo>オブジェクトとして、次の表に示します。  
  
|TimeZoneInfo オブジェクトの種類|Kind プロパティ値|動作|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定かどうか、`dateTime`パラメーターがあいまいです。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|変換`dateTime`現地時刻に、その時刻があいまいかどうかを判断します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|`false` を返します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|場合`dateTime`標準時は、UTC に変換し、返しますを前提としています、あいまいな`false`します。|  
|タイム ゾーン。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|変換`dateTime`を指定されたタイム ゾーンの時刻に、その時刻があいまいかどうかを判断します。|  
|タイム ゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|決定かどうか`dateTime`があいまいです。|  
  
   
  
## Examples  
 太平洋標準時ゾーンで夏時間が午前 2 時に終了します。 2007 年 11 月 4 日。 次の例は、午前 12時 59分時から 1 分間隔で、時間を渡します 2007、年 11 月 4 日午前 2時 01分 2007 年 11 月 4 日に、<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29>のメソッド、<xref:System.TimeZoneInfo>太平洋標準時タイム ゾーンを表すオブジェクト。 コンソール出力は、午前 1 時からそのすべての回数を示します 2007、年 11 月 4 日午前 1時 59分に 2007 年 11 月 4 日には、あいまいになります。  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> で、<paramref name="dateTime" /> は無効な時刻です。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日付と時刻。</param>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 (UTC) に割り当て可能かどうかを判断します。</summary>
        <returns><paramref name="dateTimeOffset" /> パラメーターが現在のタイム ゾーンであいまいな場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 あいまいな時刻は、現在のタイム ゾーンの時間の範囲内にあります。 これは、標準時または調整規則の適用に起因する時間のいずれかのどちらをできることを意味します。 通常、クロックが夏時間から標準時間に戻るに設定されている場合があいまいな時刻が発生します。 世界協定時刻 (UTC) には、あいまいな時刻がありません。ゾーンが夏時間をサポートしていないどちらでもない時刻の操作を行います。  
  
 メソッドの正確な動作の間のリレーションシップに依存、<xref:System.DateTimeOffset.Offset%2A>のプロパティ、`dateTimeOffset`パラメーターと現在のタイム ゾーン。 場合の値、<xref:System.DateTimeOffset.Offset%2A>メソッドを決定する可能性のある現在のタイム ゾーンの UTC からのオフセットをプロパティには、かどうかは、日付し、時刻があいまいです。 それ以外の場合、変換`dateTimeOffset`を現在のタイム ゾーンの時刻に決定するかどうかは、日付し、時刻があいまいです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間の範囲内かどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻の値。</param>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間範囲内かどうかを示します。</summary>
        <returns><paramref name="dateTime" /> パラメーターが夏時間の範囲内の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>によって表されるタイム ゾーン間のリレーションシップが影響を受ける、<xref:System.TimeZoneInfo>オブジェクトと<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターとして、次の表に示します。  
  
|TimeZoneInfo オブジェクト|DateTime.Kind プロパティ|結果|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|決定かどうか`dateTime`夏時間が。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|変換します`dateTime`から世界協定時刻 (UTC) から現地時刻を夏時間があるかどうかを決定します。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|前提と`dateTime`現地時刻を表し、夏時間かどうかを判断します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`、 `DateTimeKind.Unspecified`、または `DateTimeKind.Utc`|返します`false`(UTC は夏時間をサポートしていません)。|  
|その他の<xref:System.TimeZoneInfo>オブジェクト。|`DateTimeKind.Local`|同等の時刻を現地時刻に変換します、<xref:System.TimeZoneInfo>オブジェクト、後者が夏時間かどうかを判断します。|  
|その他の<xref:System.TimeZoneInfo>オブジェクト。|`DateTimeKind.Utc`|同等の時刻を UTC に変換します、<xref:System.TimeZoneInfo>オブジェクト、後者が夏時間かどうかを判断します。|  
|その他の<xref:System.TimeZoneInfo>オブジェクト。|`DateTimeKind.Unspecified`|決定かどうか`dateTime`夏時間が。|  
  
 によって表されるタイム ゾーンの場合、<xref:System.TimeZoneInfo>オブジェクトが夏時間をサポートしていないメソッドを常に返します`false`します。 さまざまなタイム ゾーンを含む<xref:System.TimeZoneInfo.Utc%2A>夏時間を確認しません。  値を取得するタイム ゾーンが夏時間をサポートするかどうかを判断するには、その<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティ。  
  
 場合、`dateTime`パラメーターは、あいまいな時刻を現在のオブジェクトのタイム ゾーンを指定します、<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>メソッドは解釈`dateTime`標準時として返す`false`場合その<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>または<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. 場合、<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、このメソッドは正しいのあいまいな時刻を選択し、夏時間があるかどうかを示します。  
  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType>メソッドが返すことができます`false`のあいまいな日時 (つまり、日付と時刻を標準時または特定のタイム ゾーンの夏時間のいずれかを表すことができます)、<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType>メソッドと組み合わせることができますが、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>時間が夏時間にあるかどうかを判断するメソッド。 あいまいな時刻は夏時間と標準時では、可能性のある 1 つあるため、<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29>日付と時刻が夏時間をする可能性があるかどうかを判断するメソッドを最初に呼び出すことができます。 メソッドを返す場合`false`、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>判断するメソッドを呼び出すことができるかどうか、<xref:System.DateTime>値は、夏時間の期間。 次の例では、この方法を示します。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 場合、`dateTime`パラメーターが無効な時刻を指定します、メソッド呼び出しがスローされた、<xref:System.ArgumentException>場合の値、`dateTime`パラメーターの<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、それ以外のメソッドを返します`false`します。  
  
 呼び出す、<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>タイム ゾーンを使用するかどうかを判断するメソッド<xref:System.TimeZoneInfo.StandardName%2A>値またはその<xref:System.TimeZoneInfo.DaylightName%2A>タイム ゾーンの名前を表示するときの値します。 図の例のセクションを参照してください。  
  
   
  
## Examples  
 次の例は、という名前のメソッドを定義します。`DisplayDateWithTimeZoneName`を使用して、<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>タイム ゾーンの標準時名または夏時間名を表示するかどうかを判断するメソッド。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> で、<paramref name="dateTime" /> は無効な時刻です。</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日付と時刻の値。</param>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間範囲内かどうかを示します。</summary>
        <returns><paramref name="dateTimeOffset" /> パラメーターが夏時間の範囲内の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType>によって表されるタイム ゾーン間のリレーションシップが影響を受ける、<xref:System.TimeZoneInfo>オブジェクトと<xref:System.DateTimeOffset.Offset%2A>のプロパティ、`dateTimeOffset`パラメーター。 場合`dateTimeOffset`に対応していない現在のタイム ゾーンのオフセット世界協定時刻 (UTC) から現在のタイム ゾーンの時刻にタイム メソッドに変換します。 また、日付し、時刻をかどうかが夏時間を決定します。  
  
 によって表されるタイム ゾーンの場合、<xref:System.TimeZoneInfo>オブジェクトが夏時間をサポートしていないメソッドを常に返します`false`します。 値を取得するタイム ゾーンが夏時間をサポートするかどうかを判断するには、その<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻の値。</param>
        <summary>指定された日付と時刻が無効かどうかを示します。</summary>
        <returns><paramref name="dateTime" /> が無効の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 無効な時刻は、現在のタイム ゾーン調整規則の適用により世界協定時刻 (UTC) をマップできない時間の範囲内にあります。 通常、無効な時刻は、時刻は夏時間の前方に移動したときに発生します。 図の例のセクションを参照してください。  
  
 値、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターに影響するかどうか`dateTime`として次の表は、無効な時刻を表します。  
  
|DateTime.Kind プロパティ|TimeZoneInfo オブジェクト (該当する場合)|動作|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|時間が有効かどうかを判断します。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> または、ローカル以外のタイム ゾーンを選択します。|変換`dateTime`の時刻に、<xref:System.TimeZoneInfo>オブジェクトを返します`false`します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|該当なし。|前提としています`dateTime`の時間、<xref:System.TimeZoneInfo>オブジェクトし、が正しくないかどうかを決定します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|該当なし。|`false` を返します。|  
  
   
  
## Examples  
 太平洋標準時ゾーンで夏時間が午前 2 時に開始します。 2006 年年 4 月 2 日。 次のコードは、午前 1 時 59 分: から 1 分間隔で、時間を渡します で、2006 年 4 月 2日 3時 01分 am 2006 年 4 月 2 日に、<xref:System.TimeZoneInfo.IsInvalidTime%2A>のメソッド、<xref:System.TimeZoneInfo>太平洋標準時タイム ゾーンを表すオブジェクト。 コンソール出力が午前 2 時からそのすべての回数を示します 2006 年 4 月 2日午前 2時 59分までの 2006 年 4 月 2 日は無効です。  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカル タイム ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得します。</summary>
        <value>ローカル タイム ゾーンを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ローカル タイム ゾーンは、コードを実行しているコンピューターのタイム ゾーンです。  
  
> [!IMPORTANT]
>  使用してローカル タイム ゾーンを常にアクセスする必要があります、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>にゾーンのローカル時刻を割り当てるのではなく、プロパティ、<xref:System.TimeZoneInfo>オブジェクト変数です。 これにより、<xref:System.TimeZoneInfo>オブジェクト変数への呼び出しによって無効になることから、<xref:System.TimeZoneInfo.ClearCachedData%2A>メソッド。  
  
 Windows システムでは、<xref:System.TimeZoneInfo>によって返されるオブジェクト、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>プロパティの設定の反映、**夏時間の時計を自動的に調整**コントロール パネルの チェック ボックスをオン**日付と時刻**アプリケーション。 チェック ボックスがオフの場合は、ローカル タイム ゾーンのキャッシュされたコピーは夏時間の情報を含まない。 これによって、次のことが起こります。  
  
-   ローカル タイム ゾーンの<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドは長さが 0 の配列を返します。  
  
-   ローカル タイム ゾーンの<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティが返す`false`します。  
  
-   ローカル タイム ゾーンにあいまいであるか、無効な時間がありません (すべての呼び出しを<xref:System.TimeZoneInfo.IsAmbiguousTime%2A>または<xref:System.TimeZoneInfo.IsInvalidTime%2A>返す`false`)。  
  
-   すべての呼び出しを<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A>個々 のローカル時間で false を返します。  
  
 これが true でないただしを使用して、ローカル タイム ゾーンへの参照を取得する場合、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッド。  
  
 <xref:System.TimeZoneInfo.Local%2A>プロパティに対応して、<xref:System.TimeZone.CurrentTimeZone%2A>のプロパティ、<xref:System.TimeZone>クラス。  
  
   
  
## Examples  
 次の例では、取得、<xref:System.TimeZoneInfo>ローカル タイム ゾーンを表し、その表示名、標準時名、および夏時間名を出力するオブジェクト。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">方法 : 定義済みの UTC オブジェクトおよびローカル タイム ゾーン オブジェクトにアクセスする</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンの標準時の表示名を取得します。</summary>
        <value>タイム ゾーンの標準時間の表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示名は、Windows オペレーティング システムと共にインストールされたカルチャに基づいてローカライズされます。  
  
 <xref:System.TimeZoneInfo.StandardName%2A>プロパティのと同じですが、<xref:System.TimeZone.StandardName%2A>のプロパティ、<xref:System.TimeZone>クラス。  
  
 かどうか、オペレーティング システムの言語は英語の値、<xref:System.TimeZoneInfo.StandardName%2A>プロパティは、通常は、常にではありませんと同一の<xref:System.TimeZoneInfo.Id%2A>プロパティ。  
  
   
  
## Examples  
 次の例は、という名前のメソッドを定義します。`DisplayDateWithTimeZoneName`を使用して、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>タイム ゾーンの標準時名または夏時間名を表示するかどうかを判断するメソッド。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンに夏時間規則があるかどうかを示す値を取得します。</summary>
        <value>タイム ゾーンが夏時間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティによって返される、ローカル タイム ゾーン、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>プロパティには、コントロール パネルの設定が反映されます**日付と時刻**アプリケーションのチェック ボックスを定義するかどうか、システムに自動的に。夏時間の調整します。 選択されていないかどうか、またはこのプロパティの値は、タイム ゾーンのチェック ボックスが表示されない場合`false`します。  
  
   
  
## Examples  
 次の例では、ローカル システムで利用できるすべてのタイム ゾーンのコレクションを取得し、夏時間をサポートしないものの名前を表示します。  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクト。 このパラメーターの機能は、現在実装されていません。</param>
        <summary>オブジェクトの逆シリアル化の完了後に実行します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.TimeZoneInfo" /> オブジェクトには、無効なデータまたは破損したデータが含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先の <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先 (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトをシリアル化するために必要なすべてのデータを格納します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトをシリアル化された文字列に変換します。</summary>
        <returns>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、Windows システムのレジストリで定義されていないタイム ゾーンに依存するアプリケーションまたは[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux および macOScan で使用できます、 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> として必要なタイムゾーンをインスタンス化するメソッド<xref:System.TimeZoneInfo>オブジェクト。 アプリケーションを呼び出すことができますし、<xref:System.TimeZoneInfo.ToSerializedString%2A>タイム ゾーン オブジェクトを文字列に変換するメソッド。  
  
 <xref:System.TimeZoneInfo>オブジェクトは、アプリケーションが必要なときにどのように取得場所、場所にも格納する必要があります。 使用可能な場所は次のとおりです。  
  
-   Windows システム上のレジストリ。  
  
-   アプリケーション リソース ファイル。  
  
-   外部ファイル、テキスト ファイルなどです。  
  
   
  
## Examples  
 次の例では、/南極を取得しようとしました。 ローカル システムからのタイム ゾーン。 失敗した場合、コードは、アプリケーション ディレクトリ内のテキスト ファイルからタイム ゾーンに関する情報を取得しようとします。 この試行が失敗した場合、コードは、タイム ゾーンを作成し、それに関する情報をテキスト ファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">方法 : 埋め込みリソースにタイム ゾーンを保存する</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトの表示名を返します。</summary>
        <returns>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトの <see cref="P:System.TimeZoneInfo.DisplayName" /> プロパティの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コレクションを割り当てることが含まれる場合<xref:System.TimeZoneInfo>などのオブジェクト リスト コントロールに、<xref:System.Windows.Forms.ListBox>コントロール、コントロールを自動的に呼び出す、<xref:System.TimeZoneInfo.ToString%2A>メソッドの一覧で表される各オブジェクトを表す文字列を抽出します。 結果として、文字列としてオブジェクトのわかりやすい説明を格納する必要はありませんし、ユーザーはその文字列を使用してコレクションからオブジェクトを抽出する必要はありません。 「[方法: コンピューターに存在するタイム ゾーンを列挙](~/docs/standard/datetime/enumerate-time-zones.md)の詳細。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>世界協定時刻 (UTC) ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得します。</summary>
        <value>世界協定時刻 (UTC) ゾーンを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、組み込みオブジェクトです。これについては<xref:System.TimeZoneInfo>オブジェクトは、Windows システムとの間に、レジストリからは取得されません、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)Linux と macOS でします。  
  
> [!IMPORTANT]
>  使用して、世界協定時刻 (UTC) ゾーンを常にアクセスする必要があります、<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>に UTC タイム ゾーンを割り当てるのではなく、プロパティ、<xref:System.TimeZoneInfo>オブジェクト変数です。 これにより、<xref:System.TimeZoneInfo>オブジェクト変数への呼び出しによって無効になることから、<xref:System.TimeZoneInfo.ClearCachedData%2A>メソッド。  
  
 世界協定時刻については、以前のグリニッジ標準時 (GMT) と呼ばれていました。  
  
   
  
## Examples  
 次の例では、取得、<xref:System.TimeZoneInfo>世界協定時刻 (UTC) を表し、その表示名、標準時名、および夏時間名を出力するオブジェクト。  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">方法 : 定義済みの UTC オブジェクトおよびローカル タイム ゾーン オブジェクトにアクセスする</related>
      </Docs>
    </Member>
  </Members>
</Type>