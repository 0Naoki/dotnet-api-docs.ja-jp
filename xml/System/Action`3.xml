<Type Name="Action&lt;T1,T2,T3&gt;" FullName="System.Action&lt;T1,T2,T3&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36d4fcf318fb44ecc0422ce215027fb8c19a005c" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46694643" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`3&lt;- T1, - T2, - T3&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3)(arg1 As T1, arg2 As T2, arg3 As T3)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの最初のパラメーターの型。</typeparam>
    <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーターの型。</typeparam>
    <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーターの型。</typeparam>
    <param name="arg1">このデリゲートによってカプセル化されるメソッドの最初のパラメーター。</param>
    <param name="arg2">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーター。</param>
    <param name="arg3">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーター。</param>
    <summary>3 個のパラメーターを持ち、値を返さないメソッドをカプセル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Action%603>カスタム デリゲートを明示的に宣言することがなく、パラメーターとして、メソッドに渡すデリゲート。 カプセル化されるメソッドは、このデリゲートで定義されているメソッド シグネチャに対応する必要があります。 これは、カプセル化されるメソッドは、値を渡し、3 つのパラメーターが必要し、値を返す必要がないことを意味します。 (C# のメソッドが返す必要があります`void`します。 Visual basic で定義する必要があります、 `Sub`.`End Sub` 構築します。 これは、ことができますが無視される値を返すメソッド。)通常、このようなメソッドは、操作の実行に使用されます。  
  
> [!NOTE]
>  3 つのパラメーターがあり、値を返すメソッドを参照するには、ジェネリックを使用<xref:System.Func%604>代わりにデリゲートします。  
  
 使用すると、<xref:System.Action%603>デリゲートがありませんを明示的に 3 つのパラメーターを持つメソッドをカプセル化するデリゲートを定義します。 たとえば、次のコードで明示的にという名前のデリゲートが宣言`StringCopy`への参照を割り当てると、`CopyStrings`メソッドのデリゲートのインスタンスにします。  
  
 [!code-csharp[System.Action~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Delegate.cs#1)]
 [!code-vb[System.Action~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Delegate.vb#1)]  
  
 次の例では、インスタンス化してこのコードを簡略化、<xref:System.Action%603>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てる代わりにデリゲートします。  
  
 [!code-csharp[System.Action~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Action3.cs#2)]
 [!code-vb[System.Action~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Action3.vb#2)]  
  
 使用することも、<xref:System.Action%603>次の例に示すように、c# の場合は、匿名メソッドを持つデリゲートします。 (匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。  
  
 [!code-csharp[System.Action~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Anon.cs#3)]  
  
 ラムダ式を割り当てることができます、<xref:System.Action%603>次の例に示すように、インスタンスを委任します。 (ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。  
  
 [!code-csharp[System.Action~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Lambda.cs#4)]
 [!code-vb[System.Action~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`4" />
  </Docs>
</Type>