<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4104fd3573b1019e77761503a22437044c8581f" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70461318" /></Metadata><TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
    <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
    <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
    <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
    <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
    <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
    <typeparam name="T7">組の 7 番目のコンポーネントの型。</typeparam>
    <typeparam name="TRest">組の残りのコンポーネントの型を定義する汎用 <see langword="Tuple" /> オブジェクト。</typeparam>
    <summary>*n* 組 (*n* は 8 以上) を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 組は、特定の数と値のシーケンスを持つデータ構造です。 クラス<xref:System.Tuple%608>は、8個以上のコンポーネントを持つ*n*タプルを表します。  
  
 <xref:System.Tuple%608> 静的 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、厳密に8個のコンポーネントを持つオブジェクトをインスタンス化できます。 次の例では、20未満の素数を含む8タプル (octuple) を作成します。 型の推定を使用して各コンポーネントの型を決定することに注意してください。  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 <xref:System.Tuple%608.%23ctor%2A>コンストラクターを呼び出すことにより、8個以上のコンポーネントを含む n タプルオブジェクトをインスタンス化することもできます。 次の例では<xref:System.Tuple%608.%23ctor%2A> 、コンストラクターを使用して、前の例で作成した組と等価の8組を作成します。  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  9個以上のコンポーネントを含む n タプルを作成するには、 <xref:System.Tuple%608.%23ctor%2A>コンストラクターを呼び出す必要があります。 <xref:System.Tuple>クラスの静的ファクトリメソッドでは、8個を超えるコンポーネント`Tuple`を持つオブジェクトの作成はサポートされていません。  
  
 <xref:System.Tuple%608.%23ctor%2A>コンストラクターを使用して8つ以上のコンポーネントを持つ n タプルをインスタンス化するには`Tuple` 、 `rest`パラメーターとして汎用オブジェクトを指定して、タプルの8番目から*n*番目のコンポーネントを定義します。 ジェネリック`Tuple`オブジェクトをこの方法で入れ子にすることにより、そのコンポーネントの数に実際の制限がないタプルを作成できます。  
  
 次の例では、1860から2000の各 national 国勢調査のミシガン市の人口データを含む17組を作成します。 組の最初の要素は都市名です。 2番目のコンポーネントはデータ系列の開始日で、3番目のコンポーネントは開始日の母集団です。 後続の各コンポーネントでは、10分間隔で作成されます。 17組は、オブジェクトの<xref:System.Tuple%603> <xref:System.Tuple%608>内部にオブジェクトを入れ子にすることによって作成されます。 (つまり、 <xref:System.Tuple%603>オブジェクトは<xref:System.Tuple%608>クラスコンストラクターの`rest`パラメーターの値として指定されます)。この<xref:System.Tuple%608>オブジェクトは、外側<xref:System.Tuple%608>のオブジェクトに入れ子になっています。 (つまり、 <xref:System.Tuple%608>オブジェクトは、外部<xref:System.Tuple%608>オブジェクトのクラスコンストラクターの`rest`パラメーターの値として指定されます)。  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 <xref:System.Tuple%607.Item1%2A>読み取り専用、 <xref:System.Tuple%607.Item3%2A> 、 <xref:System.Tuple%607.Item6%2A> 、、、、および <xref:System.Tuple%607.Item7%2A> の各インスタンスプロパティを使用して、組の最初の7つのコンポーネントの値を取得できます。 <xref:System.Tuple%607.Item4%2A> <xref:System.Tuple%607.Item2%2A> <xref:System.Tuple%607.Item5%2A> 追加のコンポーネントはすべて入れ子になっており、 <xref:System.Tuple%608.Rest%2A>プロパティから取得できます。 前の例では<xref:System.Tuple%608.Item1%2A> 、プロパティを通じ<xref:System.Tuple%608.Item7%2A>て、タプルの最初から7番目のコンポーネントを取得しています。 8 ~ 14 番目のコンポーネントは、2番目のレベルで入れ子になっているタプルに含まれて`Rest.Item1`おり`Rest.Item7` 、ではプロパティによって表されます。 15 ~ 17 番目のコンポーネントは、3番目のレベルで入れ子になっているタプルに含まれて`Rest.Rest.Item1`おり`Rest.Rest.Item3` 、ただし、プロパティで表されます。  
  
 組は、主に次の4つの方法で使用されます。  
  
-   データの1つのセットを表す場合は。 たとえば、組はデータベースレコードを表すことができ、そのコンポーネントはレコードの個々のフィールドを表すことができます。  
  
-   データセットに簡単にアクセスして操作できるようにするため。  
  
-   パラメーター (でC#は) またはパラメーター (Visual Basic) を使用`ByRef`せずに、メソッドから複数の値を返す場合は。 `out` たとえば、前の例では、 <xref:System.Tuple%607>オブジェクトで計算された統計情報と市区町村名が返されます。  
  
-   1つのパラメーターを使用して複数の値をメソッドに渡す場合は。 たとえば、 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>メソッドには、起動時にスレッドが実行するメソッドに1つの値を指定できる1つのパラメーターがあります。 メソッドの引数と<xref:System.Tuple%607>してオブジェクトを指定する場合は、スレッドのスタートアップルーチンに7つのデータ項目を指定できます。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'Rest -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; (item1, item2, item3, item4, item5, item6, item7, rest)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1">組の 1 番目のコンポーネントの値。</param>
        <param name="item2">組の 2 番目のコンポーネントの値。</param>
        <param name="item3">組の 3 番目のコンポーネントの値。</param>
        <param name="item4">組の 4 番目のコンポーネントの値。</param>
        <param name="item5">組の 5 番目のコンポーネントの値。</param>
        <param name="item6">組の 6 番目のコンポーネントの値。</param>
        <param name="item7">組の 7 番目のコンポーネントの値。</param>
        <param name="rest">組の残りのコンポーネントの値を格納する汎用 <see langword="Tuple" /> オブジェクト。</param>
        <summary><see cref="T:System.Tuple`8" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、静的<xref:System.Tuple.Create%2A?displayProperty=nameWithType>メソッドを使用して、そのコンポーネントの型を明示的に指定しなくても、8タプル (octuple) オブジェクトをインスタンス化することができます。 次の例では<xref:System.Tuple.Create%2A?displayProperty=nameWithType> 、メソッドを使用して、20未満の素数を含む8組のオブジェクトをインスタンス化します。  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 これは、 <xref:System.Tuple%607.%23ctor%2A>クラスコンストラクターへの次の呼び出しに相当します。  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 ただし、静的<xref:System.Tuple.Create%2A?displayProperty=nameWithType>メソッドを使用して、8個を超えるコンポーネントを含むタプルオブジェクトを作成することはできません。  
  
 <xref:System.Tuple%608.%23ctor%2A>コンストラクターを使用して、8個以上のコンポーネントを含む n タプルを作成する場合`rest`は、パラメーターを使用して、1 ~ 7 個のコンポーネントからなる入れ子になった n タプルを作成します。 入れ子のレベルを連続して使用することで、ほぼ無制限の数のコンポーネントを持つ n タプルを作成できます。 たとえば、25組を作成するには、次のよう<xref:System.Tuple%608>に3つの入れ子のレベルを持つオブジェクトをインスタンス化します。  
  
-   最も外側<xref:System.Tuple%608>のオブジェクトには、最初から7番目のコンポーネントが含まれています。 このプロパティは、入れ子の<xref:System.Tuple%608>最初のレベルでオブジェクトへのアクセスを提供します。 <xref:System.Tuple%608.Rest%2A>  
  
-   最も外側の<xref:System.Tuple%608>入れ子になったオブジェクトには、8番<xref:System.Tuple%608.Rest%2A>目から14番目のコンポーネント<xref:System.Tuple%608>が含まれており、そのプロパティは、入れ子の第2レベルでオブジェクトへのアクセスを提供します。  
  
-   入れ子の第2レベルの<xref:System.Tuple%608.Rest%2A> <xref:System.Tuple%604> オブジェクトには 15 ~ 20 番目のコンポーネントが含まれ、そのプロパティは入れ子の第3レベルのオブジェクトへのアクセスを <xref:System.Tuple%608> 提供します。  
  
-   最も内側の組は<xref:System.Tuple%604> 、21秒から5番目のコンポーネントを含むオブジェクトです。  
  
   
  
## Examples  
 次の例では、1860から2000の各国勢調査のミシガン市の人口データを含む17組を作成します。 組の最初の要素は都市名です。 2番目のコンポーネントは、一連のデータの開始日です。3番目のコンポーネントは、開始日の母集団です。 後続の各コンポーネントでは、10分間隔で作成されます。 この例では、入れ子になっている2つの層を使用して17組を作成します。3番目のコンポーネントには、1860 ~ 1900 の母集団データを格納する7タプルを定義します。また、1910から1970の母集団データを含む入れ子になった7タプルと入れ子になった3タプルを定義します。1980 ~ 2000 の母集団データを格納する。  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rest" /> がジェネリック <see langword="Tuple" /> オブジェクトではありません。</exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
        <returns>現在のインスタンスが指定したオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次のすべての条件を満たしている場合、パラメーターは現在のインスタンスと等しいと見なされます。 `obj`  
  
-   これは<xref:System.Tuple%608>オブジェクトです。  
  
-   これには、現在のインスタンスと同じ種類のコンポーネントの合計数が含まれています。  
  
-   そのコンポーネント (入れ子になったコンポーネントを含む) は、現在のインスタンスのコンポーネントと同じです。 等値は、各コンポーネントの既定の等値比較子によって決定されます。  
  
   
  
## Examples  
 次の例では<xref:System.Tuple%608> 、素数を含む5つのオブジェクトを定義します。 次に、最初のオブジェクトと残りの各オブジェクトを比較します。 出力に示されているように、同じ値<xref:System.Tuple%608>を持つコンポーネントの数が同じであるため、最初と最後のオブジェクトだけが等しくなります。  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 1 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Item1%2A>コンポーネントの種類は、次の2つの方法のいずれかで動的に決定できます。  
  
-   プロパティによっ`GetType`て返される値に対してメソッドを呼び出します。 <xref:System.Tuple%608.Item1%2A>  
  
-   オブジェクトを<xref:System.Type>表すオブジェクトを取得し、その<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドによって返される配列から最初の要素を取得する。 <xref:System.Tuple%608>  
  
   
  
## Examples  
 次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。 17組の最初のコンポーネントは都市名です。 この例では<xref:System.Tuple%608.Item1%2A> 、プロパティを使用して、カタログ作成データを表示する前に、テーブルヘッダーに市区町村名を表示します。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 2 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Item2%2A>コンポーネントの種類は、次の2つの方法のいずれかで動的に決定できます。  
  
-   プロパティによっ`GetType`て返される値に対してメソッドを呼び出します。 <xref:System.Tuple%608.Item2%2A>  
  
-   オブジェクトを<xref:System.Type>表すオブジェクトを取得し、その<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドによって返される配列から2番目の要素を取得する。 <xref:System.Tuple%608>  
  
   
  
## Examples  
 次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。 17組の2番目のコンポーネントは、データ系列の最初の年です。 この例では、 <xref:System.Tuple%608.Item2%2A>プロパティの値を変数に割り当て、その変数を使用して、データが表示される年を表します。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 3 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Item3%2A>コンポーネントの種類は、次の2つの方法のいずれかで動的に決定できます。  
  
-   プロパティによっ`GetType`て返される値に対してメソッドを呼び出します。 <xref:System.Tuple%608.Item3%2A>  
  
-   オブジェクトを<xref:System.Type>表すオブジェクトを取得し、その<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドによって返される配列から3番目の要素を取得する。 <xref:System.Tuple%608>  
  
   
  
## Examples  
 次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。 17組の3番目のコンポーネントは、1860の母集団です。 この例では<xref:System.Tuple%608.Item3%2A> 、プロパティを使用して、母集団の値を表示し、1860と1870の間の母集団変化率を計算します。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 4 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 4 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Item4%2A>コンポーネントの種類は、次の2つの方法のいずれかで動的に決定できます。  
  
-   プロパティによっ`GetType`て返される値に対してメソッドを呼び出します。 <xref:System.Tuple%608.Item4%2A>  
  
-   オブジェクトを<xref:System.Type>表すオブジェクトを取得し、その<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドによって返される配列から4番目の要素を取得する。 <xref:System.Tuple%608>  
  
   
  
## Examples  
 次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。 17組の4番目のコンポーネントは、1870の母集団です。 この例では<xref:System.Tuple%608.Item4%2A> 、プロパティを使用して、母集団の値を表示し、1870と1880の間の母集団変化率を計算します。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 5 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 5 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Item5%2A>コンポーネントの種類は、次の2つの方法のいずれかで動的に決定できます。  
  
-   プロパティによっ`GetType`て返される値に対してメソッドを呼び出します。 <xref:System.Tuple%608.Item5%2A>  
  
-   オブジェクトを<xref:System.Type>表すオブジェクトを取得し、その<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドによって返される配列から5番目の要素を取得する。 <xref:System.Tuple%608>  
  
   
  
## Examples  
 次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。 17組の5番目のコンポーネントは、1880の母集団です。 この例では<xref:System.Tuple%608.Item5%2A> 、プロパティを使用して、母集団の値を表示し、1880と1890の間の母集団変化率を計算します。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item6 : 'T6" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 6 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 6 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Item6%2A>コンポーネントの種類は、次の2つの方法のいずれかで動的に決定できます。  
  
-   プロパティによっ`GetType`て返される値に対してメソッドを呼び出します。 <xref:System.Tuple%608.Item6%2A>  
  
-   オブジェクトを<xref:System.Type>表すオブジェクトを取得し、その<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドによって返される配列から6番目の要素を取得する。 <xref:System.Tuple%608>  
  
   
  
## Examples  
 次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。 17組の6番目のコンポーネントは、1890の母集団です。 この例では<xref:System.Tuple%608.Item6%2A> 、プロパティを使用して、母集団の値を表示し、1890と1900の間の母集団変化率を計算します。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item7 : 'T7" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 7 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 7 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Item7%2A>コンポーネントの種類は、次の2つの方法のいずれかで動的に決定できます。  
  
-   プロパティによっ`GetType`て返される値に対してメソッドを呼び出します。 <xref:System.Tuple%608.Item7%2A>  
  
-   オブジェクトを<xref:System.Type>表すオブジェクトを取得し、その<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドによって返される配列から7番目の要素を取得する。 <xref:System.Tuple%608>  
  
   
  
## Examples  
 次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。 17組の7番目のコンポーネントは、1900の母集団です。 この例では<xref:System.Tuple%608.Item7%2A> 、プロパティを使用して、母集団の値を表示し、1900と1910の間の母集団変化率を計算します。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberSignature Language="F#" Value="member this.Rest : 'Rest" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Rest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの残りのコンポーネントを取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの残りのコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Tuple%608.Rest%2A>は、タプルの`Tuple` *8 番目*のコンポーネントにアクセスできるようにする、入れ子になったオブジェクトを返します。 タプル内のコンポーネントの合計数に応じて、8番目から14番目までのコンポーネントの値を、入れ子に`Tuple`なった<xref:System.Tuple%608.Item1%2A>オブジェクト<xref:System.Tuple%608.Item7%2A>のプロパティから取得できます。 入れ子になっ<xref:System.Tuple%608>たオブジェクト<xref:System.Tuple%608.Rest%2A>のプロパティを使用して、次`Tuple`のレベルの入れ子でオブジェクトを取得できます。  
  
 型名から数字を抽出することによっ`Tuple` <xref:System.Tuple%608.Rest%2A>て、プロパティによって返される入れ子になったオブジェクト内のコンポーネントの数を動的に決定できます。 具体的な例を次に示します。  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。 17組の7番目のコンポーネントは、1900の母集団です。 この例では<xref:System.Tuple%608.Rest%2A> 、プロパティを使用して、8番目から14番目コンポーネントの値を<xref:System.Tuple%608.Rest%2A>取得し、入れ子<xref:System.Tuple%608>になったオブジェクトのプロパティを使用して残りのコンポーネントの値を取得します。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">現在のインスタンスと比較するオブジェクト。</param>
        <param name="comparer">比較用のカスタムの規則を提供するオブジェクト。</param>
        <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`8" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
        <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対位置を示す符号付き整数値 (次の表を参照)。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 説明 
 </description></listheader><item><term> 負の整数 
 </term><description> このインスタンスの位置が <paramref name="other" /> よりも前です。  
  
 </description></item><item><term> 0 
 </term><description> このインスタンスと <paramref name="other" /> の位置は、並べ替え順序において同じです。  
  
 </description></item><item><term> 正の整数 
 </term><description> このインスタンスの位置が <paramref name="other" /> よりも後ろです。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス実装です。 これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralComparable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 このメソッドを使用すると、オブジェクト<xref:System.Tuple%608>のカスタマイズされた比較を定義できます。 たとえば、このメソッドを使用して、特定<xref:System.Tuple%608>のコンポーネントの値に基づいてオブジェクトを並べ替えることができます。  
  
 このメソッドは直接呼び出すことができますが、コレクションのメンバーを順序付けるパラメーターを含む<xref:System.Collections.IComparer>コレクションの並べ替えメソッドによって最も一般的に呼び出されます。 たとえば、 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> コンストラクターを使用 <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> してインスタンス化され<xref:System.Collections.SortedList.Add%2A>た<xref:System.Collections.SortedList>オブジェクトのメソッドとメソッドによって呼び出されます。  
  
> [!CAUTION]
>  メソッド<xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A>は、並べ替え操作で使用することを目的としています。 比較の主な目的が2つのオブジェクトが等しいかどうかを判断する場合は、この値を使用しないでください。 2つのオブジェクトが等しいかどうかを<xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A>判断するには、メソッドを呼び出します。  
  
   
  
## Examples  
 次の例では、米国<xref:System.Tuple%608>の4都市の人口データを格納するオブジェクトの配列を1940から2000に作成します。 Octuple の最初のコンポーネントは、市区町村名です。 残りの6つのコンポーネントは、1940から2000までの10年間隔での母集団を表します。  
  
 クラス`PopulationComparer`には、 <xref:System.Collections.IComparer> octuples の配列をそのコンポーネントのいずれかで並べ替えることができるようにする実装が用意されています。 コンストラクターの`PopulationComparer`クラスには、並べ替え順序を定義するコンポーネントの位置<xref:System.Boolean>と、組オブジェクトを昇順と降順のどちらで並べ替えるかを示す値という2つの値が用意されています。  
  
 次に、配列内の要素を並べ替えられていない順序で表示し、3番目のコンポーネント (1950 の母集団) によってそれらを並べ替えて、8番目のコンポーネント (2000 では母集団) で並べ替え、それらを表示します。  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="other" /> は <see cref="T:System.Tuple`8" /> オブジェクトではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">このインスタンスと比較するオブジェクト。</param>
        <param name="comparer">2 つのオブジェクトが等しいかどうかの評価に使用するメソッドを定義するオブジェクト。</param>
        <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`8" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
        <returns>現在のインスタンスが指定したオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 C# <xref:System.Tuple%608> `other` `null`実装は、がではない場合にのみ呼び出されます。また、(では) を正常にキャスト (では) または (Visual Basic)、コンポーネントの合計数が同じオブジェクト ( <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>現在`Tuple`のインスタンスと同じ型の入れ子になったオブジェクト)。 メソッド<xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29>は、まず、 <xref:System.Tuple%608.Item1%2A> <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>実装と比較<xref:System.Tuple%608>するオブジェクトの値を渡します。 このメソッド呼び出しから制御`true`が戻った場合、メソッドが再度呼び出さ<xref:System.Tuple%608.Item2%2A>れ、2つ<xref:System.Tuple%608>のオブジェクトの値が渡されます。 これは、メソッド呼び出しが特定`false`の値のペアを比較したときに返される<xref:System.Tuple%608.Rest%2A>か、2つの値がメソッドに渡されるまで続行されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
        <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 メソッドは、 `comparer`オブジェクトの<xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType>実装の呼び出しを単にラップします。  
  
 ハッシュコードの計算に使用されるアルゴリズムは、等しいと見なされる 2 <xref:System.Tuple%608>つのオブジェクトに対して同じハッシュコードを返す必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトと指定したオブジェクトを比較して、現在のオブジェクトが、並べ替え順序において、指定したオブジェクトの前後または同じ位置のいずれにあるかを示す整数を返します。</summary>
        <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対位置を示す符号付き整数値 (次の表を参照)。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 説明 
 </description></listheader><item><term> 負の整数 
 </term><description> このインスタンスの位置が <paramref name="obj" /> よりも前です。  
  
 </description></item><item><term> 0 
 </term><description> このインスタンスと <paramref name="obj" /> の位置は、並べ替え順序において同じです。  
  
 </description></item><item><term> 正の整数 
 </term><description> このインスタンスの位置が <paramref name="obj" /> よりも後ろです。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%608> のインスタンスが <xref:System.IComparable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 このメソッドは、 <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> <xref:System.Tuple%608>クラスの実装を提供します。 メソッドは直接呼び出すことができますが、通常は、コレクションのメンバーを並べ替えるために、 <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>や<xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>などのコレクションの並べ替えメソッドの既定のオーバーロードによって呼び出されます。  
  
> [!CAUTION]
>  メソッド<xref:System.Tuple%608.System%23IComparable%23CompareTo%2A>は、並べ替え操作で使用することを目的としています。 比較の主な目的が2つのオブジェクトが等しいかどうかを判断する場合は、この値を使用しないでください。 2つのオブジェクトが等しいかどうかを<xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType>判断するには、メソッドを呼び出します。  
  
 このメソッドは、既定のオブジェクト比較子を使用して、各コンポーネントを比較します。  
  
   
  
## Examples  
 次の例では、素数の範囲を含む整数を持つ、octuples の配列を作成します。 この例では、配列の要素を並べ替えられていない順序で表示し、配列を並べ替え、並べ替えた順序で配列を表示します。 出力には、配列が並べ替えら<xref:System.Tuple%608.Item1%2A>れたこと、または組の最初のコンポーネントが表示されます。 この例では、メソッドが<xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29>直接呼び出されないことに注意してください。 このメソッドは、配列内の<xref:System.Array.Sort%28System.Array%29>各要素に対してメソッドによって暗黙的に呼び出されます。  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="obj" /> は <see cref="T:System.Tuple`8" /> オブジェクトではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">指定した <see langword="Tuple" /> 要素のインデックス。 <paramref name="index" /> の範囲は、<see langword="Item1" /> について 0 から、<see langword="Tuple" /> の要素の数より 1 少ない数までです。</param>
        <summary>指定した <see langword="Tuple" /> 要素の値を取得します。</summary>
        <value>指定した位置にある <see langword="Tuple" /> 要素の値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType>は、明示的なインターフェイスの実装です。 このメソッドを呼び出すには、 <xref:System.Tuple%608>オブジェクト<xref:System.Runtime.CompilerServices.ITuple>をインターフェイスオブジェクトにキャストまたは変換する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /> 以上です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Tuple" /> にある要素の数を取得します。</summary>
        <value><see langword="Tuple" /> にある要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A>は、明示的なインターフェイスの実装です。 このメソッドを呼び出すには、 <xref:System.Tuple%608>型を<xref:System.Runtime.CompilerServices.ITuple>インターフェイスオブジェクトにキャストまたは変換する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Tuple`8" /> インスタンスの値を表す文字列を返します。</summary>
        <returns>この <see cref="T:System.Tuple`8" /> オブジェクトの文字列表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって返される文字列の形式は、(*Item1*, *Item2*, *Item3*, *tuple.item4* `Item5, Item6, Item7`,, *Item8*...) です。ここで、 *Item1*、 *Item2*、 *Item3*、 *tuple.item4*、 *tuple.item5* *、Tuple.item6*および*tuple.item7*は<xref:System.Tuple%608.Item1%2A> <xref:System.Tuple%608.Item2%2A> 、 <xref:System.Tuple%608.Item3%2A>  、、 <xref:System.Tuple%608.Item7%2A>  、、、 、およびの各プロパティの値を表します。 <xref:System.Tuple%608.Item6%2A>  <xref:System.Tuple%608.Item4%2A> <xref:System.Tuple%608.Item5%2A> *Item8*は<xref:System.Tuple%608> 、オブジェクトの`Next.Item1`プロパティの値を表します。 入れ子になった追加のコンポーネントの値は、 *Item8*に従います。 いずれかのプロパティ値が`null`の場合は、として<xref:System.String.Empty?displayProperty=nameWithType>表されます。  
  
   
  
## Examples  
 次の例では、1860から1900までの、デトロイト市のミシガンの人口データを含む17組を作成します。 次に、 <xref:System.Tuple%608.ToString%2A>メソッドを使用して、組のデータを表示します。  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
