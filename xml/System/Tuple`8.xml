<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="748dd4b2ec95cbd704aabcd790b51dc2d7fe169a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729886" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">組の 1 番目のコンポーネントの型。</typeparam>
    <typeparam name="T2">組の 2 番目のコンポーネントの型。</typeparam>
    <typeparam name="T3">組の 3 番目のコンポーネントの型。</typeparam>
    <typeparam name="T4">組の 4 番目のコンポーネントの型。</typeparam>
    <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
    <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
    <typeparam name="T7">組の 7 番目のコンポーネントの型。</typeparam>
    <typeparam name="TRest">組の残りのコンポーネントの型を定義する汎用 <see langword="Tuple" /> オブジェクト。</typeparam>
    <summary>*n* 組 (*n* は 8 以上) を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 組は、特定の数と一連の値を持つデータ構造です。 <xref:System.Tuple%608>クラスを表します、 *n*-8 個以上のコンポーネントが含まれる組です。  
  
 インスタンス化することができます、 <xref:System.Tuple%608> 、静的なを呼び出すことによって正確に 8 個の要素を持つオブジェクト<xref:System.Tuple.Create%2A?displayProperty=nameWithType>メソッドです。 次の例では、8 組 (組) を含む 20 未満の素数を作成します。 各コンポーネントの種類を確認する型の推定を使用することに注意してください。  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 呼び出して 8 個以上のコンポーネントを持つ n タプル オブジェクトをインスタンス化することもできます、<xref:System.Tuple%608.%23ctor%2A>コンス トラクターです。 次の例では、<xref:System.Tuple%608.%23ctor%2A>コンス トラクターを前の例で作成される組と等価の 8 タプルを作成します。  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  9 つまたは複数のコンポーネントでは、n タプルを作成するに呼び出す必要があります、<xref:System.Tuple%608.%23ctor%2A>コンス トラクターです。 静的ファクトリ メソッド、<xref:System.Tuple>クラスの作成をサポートしない`Tuple`8 つ以上のコンポーネントを持つオブジェクト。  
  
 N タプルの 8 個以上のコンポーネントを持つインスタンスを作成する、<xref:System.Tuple%608.%23ctor%2A>コンス トラクター、ジェネリック型を指定する`Tuple`オブジェクトとして、 `rest` 8 ~ を定義するパラメーター *n*組の番目のコンポーネントです。 汎用的な入れ子により`Tuple`この方法でオブジェクトをそのコンポーネントの数に実用的な制限がない組を作成することができます。  
  
 次の例では、デトロイト市、ミシガンの国勢 1860 から 2000 の母集団のデータを格納している 17 組を作成します。 組の最初のコンポーネントは、市区町村名です。 2 番目のコンポーネントは、データ系列の開始日と 3 番目のコンポーネントは、開始日に作成します。 後続の各コンポーネントは、10 年間の間隔で人口を提供します。 17 組が入れ子により作成された、<xref:System.Tuple%603>の内部オブジェクト、<xref:System.Tuple%608>オブジェクト。 (である、<xref:System.Tuple%603>の値として提供されているオブジェクト、`rest`内のパラメーター、<xref:System.Tuple%608>クラスのコンス トラクターです)。これは、<xref:System.Tuple%608>は外部で、さらに、入れ子にされたオブジェクトは、<xref:System.Tuple%608>オブジェクト。 (である、<xref:System.Tuple%608>の値として提供されているオブジェクト、`rest`外部パラメーター<xref:System.Tuple%608>オブジェクトのクラスのコンス トラクターです)。  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 組の最初の 7 つのコンポーネントの値を取得するには、読み取り専用を使用して<xref:System.Tuple%607.Item1%2A>、 <xref:System.Tuple%607.Item2%2A>、 <xref:System.Tuple%607.Item3%2A>、 <xref:System.Tuple%607.Item4%2A>、 <xref:System.Tuple%607.Item5%2A>、 <xref:System.Tuple%607.Item6%2A>、および<xref:System.Tuple%607.Item7%2A>インスタンス プロパティです。 その他のコンポーネントが入れ子になっておよびから取得できる、<xref:System.Tuple%608.Rest%2A>プロパティです。 前の例で、<xref:System.Tuple%608.Item1%2A>を通じて<xref:System.Tuple%608.Item7%2A>プロパティは、最初の組の 7 番目のコンポーネントからを取得します。 8 ~ 14 番目のコンポーネントが 2 番目のレベルで入れ子になっている組に含まれ、によって表される、`Rest.Item1`を通じて`Rest.Item7`プロパティです。 15 番目までの 17 番目のコンポーネントが 3 番目のレベルで入れ子になっている組に含まれ、によって表される、`Rest.Rest.Item1`も`Rest.Rest.Item3`プロパティです。  
  
 組は、4 つの方法でよく使用されます。  
  
-   単一のデータのセットを表します。 たとえば、組は、データベースのレコードを表すことができ、そのコンポーネントは、レコードの個別のフィールドを表すことができます。  
  
-   簡単にアクセスしたり、操作、データ セットを提供します。  
  
-   使用せず、メソッドから複数の値を返す`out`パラメーター (c#) または`ByRef`パラメーター (Visual Basic の場合)。 たとえば、前の例を返します、計算された統計情報を市区町村名と共に、<xref:System.Tuple%607>オブジェクト。  
  
-   メソッドに渡される複数の値、1 つのパラメーターを使用します。 たとえば、<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>メソッドには、スレッドが起動時に実行される方法を 1 つの値を提供できる 1 つのパラメーターです。 指定した場合、<xref:System.Tuple%607>オブジェクト、メソッド引数として、データの 7 つの項目を含む、スレッドのスタートアップ ルーチンを指定することができます。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1">組の 1 番目のコンポーネントの値。</param>
        <param name="item2">組の 2 番目のコンポーネントの値。</param>
        <param name="item3">組の 3 番目のコンポーネントの値。</param>
        <param name="item4">組の 4 番目のコンポーネントの値。</param>
        <param name="item5">組の 5 番目のコンポーネントの値。</param>
        <param name="item6">組の 6 番目のコンポーネントの値。</param>
        <param name="item7">組の 7 番目のコンポーネントの値。</param>
        <param name="rest">組の残りのコンポーネントの値を格納する汎用 <see langword="Tuple" /> オブジェクト。</param>
        <summary>
          <see cref="T:System.Tuple`8" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的なを使用することもできます。<xref:System.Tuple.Create%2A?displayProperty=nameWithType>メソッドを明示的にそのコンポーネントの種類を指定せずに、8 組 (組) オブジェクトをインスタンス化します。 次の例では、 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> 20 未満の素数を格納している 8 タプル オブジェクトをインスタンス化するメソッド。  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 これは、次の呼び出しに、<xref:System.Tuple%607.%23ctor%2A>クラスのコンス トラクターです。  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 ただし、静的な<xref:System.Tuple.Create%2A?displayProperty=nameWithType>8 つ以上のコンポーネントと組オブジェクトを作成する方法を使用できません。  
  
 使用する場合、 <xref:System.Tuple%608.%23ctor%2A> 8 個以上のコンポーネント、n タプルを作成するコンス トラクターを使用する、`rest`からを作成する、入れ子になった n 組を持つ 7 つのコンポーネントを 1 つのパラメーターです。 連続するレベルの入れ子を使用すると、コンポーネントの実質的に無制限の数を持つ n タプルを作成できます。 たとえば、25 タプルを作成するには、インスタンス化する、<xref:System.Tuple%608>次のように、入れ子の 3 つのレベルを持つオブジェクトします。  
  
-   最も外側<xref:System.Tuple%608>オブジェクトには、最初 7 番目のコンポーネントを通じてにはが含まれています。 その<xref:System.Tuple%608.Rest%2A>プロパティへのアクセスを提供する、<xref:System.Tuple%608>入れ子の最初のレベルにあるオブジェクト。  
  
-   最も外側にある、入れ子になった<xref:System.Tuple%608>オブジェクトには、8 ~ 14 番目のコンポーネントが含まれています。 およびその<xref:System.Tuple%608.Rest%2A>プロパティへのアクセスを提供する、 <xref:System.Tuple%608> 2 つ目の入れ子のレベルにあるオブジェクト。  
  
-   <xref:System.Tuple%608>入れ子の 2 番目のレベルのオブジェクトには、15 ~ 21 コンポーネントが含まれています。 およびその<xref:System.Tuple%608.Rest%2A>プロパティへのアクセスを提供する、 <xref:System.Tuple%604> 3 つ目の入れ子のレベルにあるオブジェクト。  
  
-   最も内側の組は、<xref:System.Tuple%604>約 20 秒から 25 個目のコンポーネントを含むオブジェクトです。  
  
   
  
## Examples  
 次の例では、市区町村デトロイトのミシガン、各年の国勢調査 1860 から 2000年への母集団のデータを格納している 17 組を作成します。 組の最初のコンポーネントは、市区町村名です。 2 番目のコンポーネントは、データの系列の開始日と 3 番目のコンポーネントは、開始日に作成します。 後続の各コンポーネントは、10 年間の間隔で人口を提供します。 例では、入れ子の 2 つのレイヤーを使用して、17 組を作成しますが 3 番目の 7 番目のコンポーネントからデータが含まれます population 1900 年から 1860、入れ子になった 7 タプル、1970 年を通じて 1910 の母集団のデータを含む 7 組を定義すると、3 つ組が内部に入れ子になった。カタログの作成データを格納します。  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rest" /> がジェネリック <see langword="Tuple" /> オブジェクトではありません。</exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
        <returns>
          現在のインスタンスが指定したオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `obj`パラメーターは、次の条件を満たしている場合に、現在のインスタンスと等しくなりますと見なされます。  
  
-   <xref:System.Tuple%608>オブジェクト。  
  
-   現在のインスタンスと同じ種類のコンポーネントの同じの合計数があります。  
  
-   (その入れ子になったコンポーネントを含む) のコンポーネントが現在のインスタンスと同じです。 等しいかどうかは、各コンポーネントの既定の等値比較子によって決定されます。  
  
   
  
## Examples  
 次の例では、5 つを定義します<xref:System.Tuple%608>素数を格納するオブジェクト。 残りのオブジェクトの各に最初のオブジェクトを比較します。 最初と最後の出力に示す<xref:System.Tuple%608>オブジェクトは、同じ値を持つコンポーネントの同じ数値があるためです。  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 1 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型を動的に決定することができます、<xref:System.Tuple%608.Item1%2A>コンポーネントを 2 つの方法のいずれかで。  
  
-   呼び出して、`GetType`メソッドによって返される値を<xref:System.Tuple%608.Item1%2A>プロパティです。  
  
-   取得することによって、<xref:System.Type>を表すオブジェクト、<xref:System.Tuple%608>オブジェクト、および、によって返される配列から最初の要素を取得するその<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドです。  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。 17 組の最初のコンポーネントは、市区町村名です。 この例では、<xref:System.Tuple%608.Item1%2A>母集団のデータを表示する前にテーブル ヘッダーに都市名を表示するプロパティです。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 2 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型を動的に決定することができます、<xref:System.Tuple%608.Item2%2A>コンポーネントを 2 つの方法のいずれかで。  
  
-   呼び出して、`GetType`メソッドによって返される値を<xref:System.Tuple%608.Item2%2A>プロパティです。  
  
-   取得することによって、<xref:System.Type>を表すオブジェクト、<xref:System.Tuple%608>オブジェクト、およびによって返される配列から 2 番目の要素を取得するその<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドです。  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。 17 タプルの 2 番目のコンポーネントは、データ系列の最初の年です。 例の値を割り当てて、<xref:System.Tuple%608.Item2%2A>変数、および、使用のデータが表示される年を表すその変数のプロパティです。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 3 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型を動的に決定することができます、<xref:System.Tuple%608.Item3%2A>コンポーネントを 2 つの方法のいずれかで。  
  
-   呼び出して、`GetType`メソッドによって返される値を<xref:System.Tuple%608.Item3%2A>プロパティです。  
  
-   取得することによって、<xref:System.Type>を表すオブジェクト、<xref:System.Tuple%608>オブジェクト、およびによって返される配列から 3 番目の要素を取得するその<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドです。  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。 17 タプルの 3 番目のコンポーネントは、1860 の人口です。 この例では、 <xref:System.Tuple%608.Item3%2A> population の変更の 1860 と 1870 間の年間の割合を計算する人口の値を表示するプロパティです。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 4 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 4 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型を動的に決定することができます、<xref:System.Tuple%608.Item4%2A>コンポーネントを 2 つの方法のいずれかで。  
  
-   呼び出して、`GetType`メソッドによって返される値を<xref:System.Tuple%608.Item4%2A>プロパティです。  
  
-   取得することによって、<xref:System.Type>を表すオブジェクト、<xref:System.Tuple%608>オブジェクト、およびによって返される配列から 4 番目の要素を取得するその<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドです。  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。 17 タプルの 4 番目のコンポーネントは、1870 の人口です。 この例では、 <xref:System.Tuple%608.Item4%2A> population の変更の 1870 と 1880 間の年間の割合を計算する人口の値を表示するプロパティです。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 5 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 5 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型を動的に決定することができます、<xref:System.Tuple%608.Item5%2A>コンポーネントを 2 つの方法のいずれかで。  
  
-   呼び出して、`GetType`メソッドによって返される値を<xref:System.Tuple%608.Item5%2A>プロパティです。  
  
-   取得することによって、<xref:System.Type>を表すオブジェクト、<xref:System.Tuple%608>オブジェクト、および、によって返される配列から 5 番目の要素を取得するその<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドです。  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。 17 タプルの 5 番目のコンポーネントは、1880 年の人口です。 この例では、 <xref:System.Tuple%608.Item5%2A> population の変更の 1880 と 1890 間の年間の割合を計算する人口の値を表示するプロパティです。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 6 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 6 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型を動的に決定することができます、<xref:System.Tuple%608.Item6%2A>コンポーネントを 2 つの方法のいずれかで。  
  
-   呼び出して、`GetType`メソッドによって返される値を<xref:System.Tuple%608.Item6%2A>プロパティです。  
  
-   取得することによって、<xref:System.Type>を表すオブジェクト、<xref:System.Tuple%608>オブジェクト、および、によって返される配列から 6 番目の要素を取得するその<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドです。  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。 17 タプルの 6 番目のコンポーネントは、1890 の人口です。 この例では、 <xref:System.Tuple%608.Item6%2A> population の変更の 1900 と 1890 間の年間の割合を計算する人口の値を表示するプロパティです。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 7 番目のコンポーネントの値を取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの 7 番目のコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 型を動的に決定することができます、<xref:System.Tuple%608.Item7%2A>コンポーネントを 2 つの方法のいずれかで。  
  
-   呼び出して、`GetType`メソッドによって返される値を<xref:System.Tuple%608.Item7%2A>プロパティです。  
  
-   取得することによって、<xref:System.Type>を表すオブジェクト、<xref:System.Tuple%608>オブジェクト、および、によって返される配列から 7 番目の要素を取得するその<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>メソッドです。  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。 17 タプルの 7 番目のコンポーネントは、1900 年の人口です。 この例では、 <xref:System.Tuple%608.Item7%2A> population の変更の 1900 と 1910 間の年間の割合を計算する人口の値を表示するプロパティです。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトの残りのコンポーネントを取得します。</summary>
        <value>現在の <see cref="T:System.Tuple`8" /> オブジェクトの残りのコンポーネントの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Rest%2A>プロパティを返します、入れ子になった`Tuple`ただし 8 へのアクセスは許可されているオブジェクト*n*組の番目のコンポーネントです。 に、組内のコンポーネントの合計数によっては 8 ~ 14 番目のコンポーネントの値を取得できる、入れ子になったから`Tuple`オブジェクトの<xref:System.Tuple%608.Item1%2A>を通じて<xref:System.Tuple%608.Item7%2A>プロパティです。 使用してできます、 <xref:System.Tuple%608.Rest%2A> 、入れ子になったのプロパティ<xref:System.Tuple%608>を取得するオブジェクト、 `Tuple` [次へ] の入れ子のレベルにあるオブジェクト。  
  
 入れ子になったコンポーネントの数は、動的に決定する`Tuple`によって返されるオブジェクト、<xref:System.Tuple%608.Rest%2A>桁をその型の名前から抽出してプロパティです。 具体的な例を次に示します。  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。 17 タプルの 7 番目のコンポーネントは、1900 年の人口です。 この例では、 <xref:System.Tuple%608.Rest%2A> 14 番目のコンポーネントとそのを通じて 8 番目の値を取得するプロパティを使用して、<xref:System.Tuple%608.Rest%2A>の入れ子になったプロパティ<xref:System.Tuple%608>残りの要素の値を取得するオブジェクト。  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">現在のインスタンスと比較するオブジェクト。</param>
        <param name="comparer">比較用のカスタムの規則を提供するオブジェクト。</param>
        <summary>指定された比較子を使用して現在の <see cref="T:System.Tuple`8" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</summary>
        <returns>並べ替え順序における、このインスタンスと <paramref name="other" /> の相対位置を示す符号付き整数値 (次の表を参照)。  
  
 <list type="table"><listheader><term> 値  
  
 </term><description>説明  
  
 </description></listheader><item><term> 負の整数  
  
 </term><description> このインスタンスの位置が <paramref name="other" /> よりも前です。  
  
 </description></item><item><term> 0  
  
 </term><description> このインスタンスと <paramref name="other" /> の位置は、並べ替え順序において同じです。  
  
 </description></item><item><term> 正の整数  
  
 </term><description> このインスタンスの位置は <paramref name="other" /> よりも後ろです。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス実装です。 これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralComparable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 このメソッドでは、カスタマイズした比較を定義できます。<xref:System.Tuple%608>オブジェクト。 たとえば、順序に、このメソッドを使用することができます<xref:System.Tuple%608>オブジェクトが特定のコンポーネントの値に基づきます。  
  
 コレクションを並べ替えることによって最もよく呼び出されますが、このメソッドは、直接呼び出すことができるなどのメソッドを<xref:System.Collections.IComparer>パラメーター コレクションのメンバーの順序付けをします。 たとえば、メソッドによって呼び出されます、<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType>メソッドおよび<xref:System.Collections.SortedList.Add%2A>のメソッド、<xref:System.Collections.SortedList>を使用してインスタンス化されるオブジェクト、<xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType>コンス トラクターです。  
  
> [!CAUTION]
>  <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A>並べ替え操作で使用するためのメソッドです。 これはありません、比較の主な目的は 2 つのオブジェクトが等しいかどうかを判断するときに使用する必要があります。 2 つのオブジェクトが等しいかどうかを判断するを呼び出して、<xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A>メソッドです。  
  
   
  
## Examples  
 次の例の配列を作成する<xref:System.Tuple%608>4 米国の都市 1940年から 2000年の人口データが含まれているオブジェクト。 組の最初のコンポーネントは、市区町村名です。 残りの 6 つのコンポーネントでは、1940年から 2000年までの 10 年間の間隔で人口を表します。  
  
 `PopulationComparer`クラスを提供する<xref:System.Collections.IComparer>により、そのコンポーネントのいずれかでソートするには、構成される組の配列を実装します。 2 つの値が用意されて、`PopulationComparer`コンス トラクター内のクラス: 並べ替え順序を定義するコンポーネントの位置と<xref:System.Boolean>組オブジェクトを昇順または降順で並べ替える必要があるかどうかを示す値。  
  
 例では、し、並べ替えられていない順序で配列の要素が表示されます、3 番目のコンポーネント (1950 年カタログ作成) で並べ替えてと、それらを表示し、8 番目のコンポーネント (2000年のカタログ作成) で並べ替えてして表示にします。  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> は <see cref="T:System.Tuple`8" /> オブジェクトではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">このインスタンスと比較するオブジェクト。</param>
        <param name="comparer">2 つのオブジェクトが等しいかどうかの評価に使用するメソッドを定義するオブジェクト。</param>
        <summary>指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`8" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
        <returns>
          現在のインスタンスが指定したオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>実装が呼び出される場合にのみ`other`は`null`、キャスト (c#) またはに (Visual Basic) の変換が正常にすることができるかどうかと、<xref:System.Tuple%608>コンポーネントの合計数が同じオブジェクト (に含めて入れ子になった`Tuple`オブジェクト)、現在のインスタンスと同じ型のです。 <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29>メソッドの最初のパス、<xref:System.Tuple%608.Item1%2A>の値、<xref:System.Tuple%608>と比較するオブジェクト、<xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>実装します。 このメソッドの呼び出しが返された場合`true`、メソッドが再度呼び出され、渡された、 <xref:System.Tuple%608.Item2%2A> 、2 つの値<xref:System.Tuple%608>オブジェクト。 これは、メソッド呼び出しから戻るまで続きます`false`特定の値、または 2 つのペアを比較するときに<xref:System.Tuple%608.Rest%2A>値、メソッドに渡されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算する <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドを持つオブジェクト。</param>
        <summary>指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 メソッドは、単にへの呼び出しをラップ、`comparer`オブジェクトの<xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType>実装します。  
  
 2 つのハッシュ コードの計算に使用するアルゴリズムが同じハッシュ コードを返す必要があります<xref:System.Tuple%608>同等であると見なされるオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.Tuple`8" /> オブジェクトと指定したオブジェクトを比較して、現在のオブジェクトが、並べ替え順序において、指定したオブジェクトの前後または同じ位置のいずれにあるかを示す整数を返します。</summary>
        <returns>並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対位置を示す符号付き整数値 (次の表を参照)。  
  
 <list type="table"><listheader><term> 値  
  
 </term><description>説明  
  
 </description></listheader><item><term> 負の整数  
  
 </term><description> このインスタンスの位置が <paramref name="obj" /> よりも前です。  
  
 </description></item><item><term> 0  
  
 </term><description> このインスタンスと <paramref name="obj" /> の位置は、並べ替え順序において同じです。  
  
 </description></item><item><term> 正の整数  
  
 </term><description> このインスタンスの位置は <paramref name="obj" /> よりも後ろです。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%608> のインスタンスが <xref:System.IComparable> インターフェイスにキャストされる場合のみ、使用できます。  
  
 このメソッドを提供、<xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType>の実装、<xref:System.Tuple%608>クラスです。 コレクションの並べ替えの既定のオーバー ロードによって最もよく呼び出さは直接メソッドを呼び出すことができます、メソッドなど<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>と<xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>コレクションのメンバーの順序付けをします。  
  
> [!CAUTION]
>  <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A>並べ替え操作で使用するためのメソッドです。 これはありません、比較の主な目的は 2 つのオブジェクトが等しいかどうかを判断するときに使用する必要があります。 2 つのオブジェクトが等しいかどうかを判断するを呼び出して、<xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType>メソッドです。  
  
 このメソッドは、各コンポーネントを比較するのにオブジェクトの既定の比較子を使用します。  
  
   
  
## Examples  
 次の例では、コンポーネントが含まれる素数の範囲を含む整数は、構成される組の配列を作成します。 例では、並べ替えられて、配列の要素を表示するには、配列を並べ替えますおよび並べ替え順序で配列を表示します。 出力は、配列がして並べ替えられていることを示しています。 <xref:System.Tuple%608.Item1%2A>、または組の最初のコンポーネントです。 例では、直接呼び出しませんなお、<xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29>メソッドです。 このメソッドはによって暗黙的に呼び出されます、<xref:System.Array.Sort%28System.Array%29>配列内の各要素のメソッドです。  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> は <see cref="T:System.Tuple`8" /> オブジェクトではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Runtime.CompilerServices.ITuple.Item[int] { System::Object ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">指定した <see langword="Tuple" /> 要素のインデックス。 <c>index</c> の範囲は、<see langword="Item1" /> について 0 から、<see langword="Tuple" /> の要素の数より 1 少ない数までです。</param>
        <summary>指定した <see langword="Tuple" /> 要素の値を取得します。</summary>
        <value>指定した位置にある <see langword="Tuple" /> 要素の値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType>プロパティは、明示的なインターフェイス実装です。 これを呼び出すには、キャストまたは変換する必要があります、<xref:System.Tuple%608>オブジェクトを<xref:System.Runtime.CompilerServices.ITuple>インターフェイス オブジェクト。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 - または -  
  
 <paramref name="index" /> が <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /> 以上です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System.Runtime.CompilerServices.ITuple.Length { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Tuple" /> にある要素の数を取得します。</summary>
        <value>
          <see langword="Tuple" /> にある要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A>プロパティは、明示的なインターフェイス実装です。 これを呼び出すには、キャストまたは変換する必要があります、<xref:System.Tuple%608>型を<xref:System.Runtime.CompilerServices.ITuple>インターフェイス オブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Tuple`8" /> インスタンスの値を表す文字列を返します。</summary>
        <returns>この <see cref="T:System.Tuple`8" /> オブジェクトの文字列表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The string returned by this method takes the form (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6, Item7`, *Item8*…), where *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, *Item6*, and *Item7* represent the values of the <xref:System.Tuple%608.Item1%2A>, <xref:System.Tuple%608.Item2%2A>, <xref:System.Tuple%608.Item3%2A>, <xref:System.Tuple%608.Item4%2A>, <xref:System.Tuple%608.Item5%2A>, <xref:System.Tuple%608.Item6%2A>, and <xref:System.Tuple%608.Item7%2A> properties. *Item8*の値を表す、<xref:System.Tuple%608>オブジェクトの`Next.Item1`プロパティです。 その他の入れ子になったコンポーネントの値に従って*Item8*です。 プロパティ値のいずれかが場合`null`、として表されます<xref:System.String.Empty?displayProperty=nameWithType>です。  
  
   
  
## Examples  
 次の例では、デトロイト市、ミシガン 1860 1900 年からの母集団のデータを格納している 17 組を作成します。 次を使用して、<xref:System.Tuple%608.ToString%2A>組のデータを表示するメソッド。  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>