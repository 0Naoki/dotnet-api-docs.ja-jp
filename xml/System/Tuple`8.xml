<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`8.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5748dd4b2ec95cbd704aabcd790b51dc2d7fe169a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">748dd4b2ec95cbd704aabcd790b51dc2d7fe169a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's first component.</source>
          <target state="translated">組の 1 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's second component.</source>
          <target state="translated">組の 2 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's third component.</source>
          <target state="translated">組の 3 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">組の 4 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">組の 5 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">組の 6 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's seventh component.</source>
          <target state="translated">組の 7 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that defines the types of the tuple's remaining components.</source>
          <target state="translated">組の残りのコンポーネントの型を定義する汎用 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Tuple`8">
          <source>Represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is 8 or greater.</source>
          <target state="translated"><bpt id="p1">*</bpt>n<ept id="p1">*</ept> 組 (<bpt id="p2">*</bpt>n<ept id="p2">*</ept> は 8 以上) を表します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">組は、特定の数と一連の値を持つデータ構造です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> class represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple that has eight or more components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>クラスを表します、 <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-8 個以上のコンポーネントが含まれる組です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with exactly eight components by calling the static <ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">インスタンス化することができます、 <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> 、静的なを呼び出すことによって正確に 8 個の要素を持つオブジェクト<ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.</source>
          <target state="translated">次の例では、8 組 (組) を含む 20 未満の素数を作成します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Note that it uses type inference to determine the type of each component.</source>
          <target state="translated">各コンポーネントの種類を確認する型の推定を使用することに注意してください。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can also instantiate an n-tuple object with eight or more components by calling the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">呼び出して 8 個以上のコンポーネントを持つ n タプル オブジェクトをインスタンス化することもできます、<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>コンス トラクターを前の例で作成される組と等価の 8 タプルを作成します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To create an n-tuple with nine or more components, you must call the  <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">9 つまたは複数のコンポーネントでは、n タプルを作成するに呼び出す必要があります、<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The static factory methods of the <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> class do not support the creation of <ph id="ph2">`Tuple`</ph> objects with more than eight components.</source>
          <target state="translated">静的ファクトリ メソッド、<ph id="ph1">&lt;xref:System.Tuple&gt;</ph>クラスの作成をサポートしない<ph id="ph2">`Tuple`</ph>8 つ以上のコンポーネントを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To instantiate an n-tuple that has eight or more components with the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor, you supply a generic <ph id="ph2">`Tuple`</ph> object as the <ph id="ph3">`rest`</ph> parameter to define the eighth through <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated">N タプルの 8 個以上のコンポーネントを持つインスタンスを作成する、<ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph>コンス トラクター、ジェネリック型を指定する<ph id="ph2">`Tuple`</ph>オブジェクトとして、 <ph id="ph3">`rest`</ph> 8 ~ を定義するパラメーター <bpt id="p1">*</bpt>n<ept id="p1">*</ept>組の番目のコンポーネントです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>By nesting generic <ph id="ph1">`Tuple`</ph> objects in this way, you can create a tuple that has no practical limitation on the number of its components.</source>
          <target state="translated">汎用的な入れ子により<ph id="ph1">`Tuple`</ph>この方法でオブジェクトをそのコンポーネントの数に実用的な制限がない組を作成することができます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガンの国勢 1860 から 2000 の母集団のデータを格納している 17 組を作成します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">組の最初のコンポーネントは、市区町村名です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The second component is the start date of the data series, and the third component is the population at the start date.</source>
          <target state="translated">2 番目のコンポーネントは、データ系列の開始日と 3 番目のコンポーネントは、開始日に作成します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">後続の各コンポーネントは、10 年間の間隔で人口を提供します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The 17-tuple is created by nesting a <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object inside a <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">17 組が入れ子により作成された、<ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph>の内部オブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> class constructor.) This <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object is, in turn, nested in an outer <ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">(である、<ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph>の値として提供されているオブジェクト、<ph id="ph2">`rest`</ph>内のパラメーター、<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>クラスのコンス トラクターです)。これは、<ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph>は外部で、さらに、入れ子にされたオブジェクトは、<ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the outer <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object's class constructor.)</source>
          <target state="translated">(である、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>の値として提供されているオブジェクト、<ph id="ph2">`rest`</ph>外部パラメーター<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>オブジェクトのクラスのコンス トラクターです)。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can retrieve the value of the tuple's first seven components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> instance properties.</source>
          <target state="translated">組の最初の 7 つのコンポーネントの値を取得するには、読み取り専用を使用して<ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>インスタンス プロパティです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any additional components are nested and can be retrieved from the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property.</source>
          <target state="translated">その他のコンポーネントが入れ子になっておよびから取得できる、<ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>In the previous example, the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties retrieve the first through seventh components of the tuple.</source>
          <target state="translated">前の例で、<ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>を通じて<ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>プロパティは、最初の組の 7 番目のコンポーネントからを取得します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the <ph id="ph1">`Rest.Item1`</ph> through <ph id="ph2">`Rest.Item7`</ph> properties.</source>
          <target state="translated">8 ~ 14 番目のコンポーネントが 2 番目のレベルで入れ子になっている組に含まれ、によって表される、<ph id="ph1">`Rest.Item1`</ph>を通じて<ph id="ph2">`Rest.Item7`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the <ph id="ph1">`Rest.Rest.Item1`</ph> though <ph id="ph2">`Rest.Rest.Item3`</ph> properties.</source>
          <target state="translated">15 番目までの 17 番目のコンポーネントが 3 番目のレベルで入れ子になっている組に含まれ、によって表される、<ph id="ph1">`Rest.Rest.Item1`</ph>も<ph id="ph2">`Rest.Rest.Item3`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">組は、4 つの方法でよく使用されます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To represent a single set of data.</source>
          <target state="translated">単一のデータのセットを表します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">たとえば、組は、データベースのレコードを表すことができ、そのコンポーネントは、レコードの個別のフィールドを表すことができます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">簡単にアクセスしたり、操作、データ セットを提供します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">使用せず、メソッドから複数の値を返す<ph id="ph1">`out`</ph>パラメーター (c#) または<ph id="ph2">`ByRef`</ph>パラメーター (Visual Basic の場合)。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">たとえば、前の例を返します、計算された統計情報を市区町村名と共に、<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">メソッドに渡される複数の値、1 つのパラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドには、スレッドが起動時に実行される方法を 1 つの値を提供できる 1 つのパラメーターです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object as the method argument, you can supply the thread’s startup routine with seven items of data.</source>
          <target state="translated">指定した場合、<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>オブジェクト、メソッド引数として、データの 7 つの項目を含む、スレッドのスタートアップ ルーチンを指定することができます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">組の 1 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">組の 2 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">組の 3 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">組の 4 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">組の 5 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">組の 6 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's seventh component.</source>
          <target state="translated">組の 7 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that contains the values of the tuple's remaining components.</source>
          <target state="translated">組の残りのコンポーネントの値を格納する汎用 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components.</source>
          <target state="translated">静的なを使用することもできます。<ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドを明示的にそのコンポーネントの種類を指定せずに、8 組 (組) オブジェクトをインスタンス化します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple object that contains prime numbers that are less than 20.</source>
          <target state="translated">次の例では、 <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> 20 未満の素数を格納している 8 タプル オブジェクトをインスタンス化するメソッド。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">これは、次の呼び出しに、<ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph>クラスのコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>However, the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method cannot be used to create a tuple object with more than eight components.</source>
          <target state="translated">ただし、静的な<ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph>8 つ以上のコンポーネントと組オブジェクトを作成する方法を使用できません。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>When using the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an n-tuple with eight or more components, you use the <ph id="ph2">`rest`</ph> parameter to create a nested n-tuple that has from one to seven components.</source>
          <target state="translated">使用する場合、 <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> 8 個以上のコンポーネント、n タプルを作成するコンス トラクターを使用する、<ph id="ph2">`rest`</ph>からを作成する、入れ子になった n 組を持つ 7 つのコンポーネントを 1 つのパラメーターです。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components.</source>
          <target state="translated">連続するレベルの入れ子を使用すると、コンポーネントの実質的に無制限の数を持つ n タプルを作成できます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>For example, to create a 25-tuple, you instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with three levels of nesting, as follows:</source>
          <target state="translated">たとえば、25 タプルを作成するには、インスタンス化する、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>次のように、入れ子の 3 つのレベルを持つオブジェクトします。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the first through seventh components.</source>
          <target state="translated">最も外側<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>オブジェクトには、最初 7 番目のコンポーネントを通じてにはが含まれています。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Its <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object at the first level of nesting.</source>
          <target state="translated">その<ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>プロパティへのアクセスを提供する、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>入れ子の最初のレベルにあるオブジェクト。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost nested <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the eighth through fourteenth components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting.</source>
          <target state="translated">最も外側にある、入れ子になった<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>オブジェクトには、8 ~ 14 番目のコンポーネントが含まれています。 およびその<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>プロパティへのアクセスを提供する、 <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> 2 つ目の入れ子のレベルにあるオブジェクト。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> object at the third level of nesting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>入れ子の 2 番目のレベルのオブジェクトには、15 ~ 21 コンポーネントが含まれています。 およびその<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>プロパティへのアクセスを提供する、 <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> 3 つ目の入れ子のレベルにあるオブジェクト。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The innermost tuple is a <ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph> object that contains the twenty-second through twenty-fifth components.</source>
          <target state="translated">最も内側の組は、<ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph>約 20 秒から 25 個目のコンポーネントを含むオブジェクトです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000.</source>
          <target state="translated">次の例では、市区町村デトロイトのミシガン、各年の国勢調査 1860 から 2000年への母集団のデータを格納している 17 組を作成します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">組の最初のコンポーネントは、市区町村名です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The second component is the start date of the series of data, and the third component is the population at the start date.</source>
          <target state="translated">2 番目のコンポーネントは、データの系列の開始日と 3 番目のコンポーネントは、開始日に作成します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">後続の各コンポーネントは、10 年間の間隔で人口を提供します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000.</source>
          <target state="translated">例では、入れ子の 2 つのレイヤーを使用して、17 組を作成しますが 3 番目の 7 番目のコンポーネントからデータが含まれます population 1900 年から 1860、入れ子になった 7 タプル、1970 年を通じて 1910 の母集団のデータを含む 7 組を定義すると、3 つ組が内部に入れ子になった。カタログの作成データを格納します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> is not a generic <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> がジェネリック <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> オブジェクトではありません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">このインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のインスタンスが指定したオブジェクトと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance if it meets all the following conditions:</source>
          <target state="translated"><ph id="ph1">`obj`</ph>パラメーターは、次の条件を満たしている場合に、現在のインスタンスと等しくなりますと見なされます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It has the same total number of components that are of the same types as the current instance.</source>
          <target state="translated">現在のインスタンスと同じ種類のコンポーネントの同じの合計数があります。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Its components (including its nested components) are equal to those of the current instance.</source>
          <target state="translated">(その入れ子になったコンポーネントを含む) のコンポーネントが現在のインスタンスと同じです。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Equality is determined by the default equality comparer for each component.</source>
          <target state="translated">等しいかどうかは、各コンポーネントの既定の等値比較子によって決定されます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The following example defines five <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contain prime numbers.</source>
          <target state="translated">次の例では、5 つを定義します<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>素数を格納するオブジェクト。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It then compares the first object with each of the remaining objects.</source>
          <target state="translated">残りのオブジェクトの各に最初のオブジェクトを比較します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>As the output shows, only the first and the last <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects are equal, because they have an identical number of components with identical values.</source>
          <target state="translated">最初と最後の出力に示す<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>オブジェクトは、同じ値を持つコンポーネントの同じ数値があるためです。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトのハッシュ コードを計算します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 1 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 1 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト、および、によって返される配列から最初の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The first component of the 17-tuple is the city name.</source>
          <target state="translated">17 組の最初のコンポーネントは、市区町村名です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property to display the city name in the table header before displaying the population data.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>母集団のデータを表示する前にテーブル ヘッダーに都市名を表示するプロパティです。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 2 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 2 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト、およびによって返される配列から 2 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The second component of the 17-tuple is the first year of the data series.</source>
          <target state="translated">17 タプルの 2 番目のコンポーネントは、データ系列の最初の年です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The example assigns the value of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property to a variable, and then uses that variable to represent the year whose data is displayed.</source>
          <target state="translated">例の値を割り当てて、<ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>変数、および、使用のデータが表示される年を表すその変数のプロパティです。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 3 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 3 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the third element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト、およびによって返される配列から 3 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The third component of the 17-tuple is the population in 1860.</source>
          <target state="translated">17 タプルの 3 番目のコンポーネントは、1860 の人口です。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1860 and 1870.</source>
          <target state="translated">この例では、 <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> population の変更の 1860 と 1870 間の年間の割合を計算する人口の値を表示するプロパティです。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 4 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 4 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fourth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト、およびによって返される配列から 4 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The fourth component of the 17-tuple is the population in 1870.</source>
          <target state="translated">17 タプルの 4 番目のコンポーネントは、1870 の人口です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1870 and 1880.</source>
          <target state="translated">この例では、 <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> population の変更の 1870 と 1880 間の年間の割合を計算する人口の値を表示するプロパティです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 5 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 5 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fifth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト、および、によって返される配列から 5 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The fifth component of the 17-tuple is the population in 1880.</source>
          <target state="translated">17 タプルの 5 番目のコンポーネントは、1880 年の人口です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1880 and 1890.</source>
          <target state="translated">この例では、 <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> population の変更の 1880 と 1890 間の年間の割合を計算する人口の値を表示するプロパティです。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 6 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 6 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the sixth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト、および、によって返される配列から 6 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The sixth component of the 17-tuple is the population in 1890.</source>
          <target state="translated">17 タプルの 6 番目のコンポーネントは、1890 の人口です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1890 and 1900.</source>
          <target state="translated">この例では、 <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> population の変更の 1900 と 1890 間の年間の割合を計算する人口の値を表示するプロパティです。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item7">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 7 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの 7 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the seventh element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト、および、によって返される配列から 7 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">17 タプルの 7 番目のコンポーネントは、1900 年の人口です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1900 and 1910.</source>
          <target state="translated">この例では、 <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> population の変更の 1900 と 1910 間の年間の割合を計算する人口の値を表示するプロパティです。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Rest">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの残りのコンポーネントを取得します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの残りのコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property returns a nested <ph id="ph2">`Tuple`</ph> object that allows access to the eighth though <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>プロパティを返します、入れ子になった<ph id="ph2">`Tuple`</ph>ただし 8 へのアクセスは許可されているオブジェクト<bpt id="p1">*</bpt>n<ept id="p1">*</ept>組の番目のコンポーネントです。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested <ph id="ph1">`Tuple`</ph> object's <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">に、組内のコンポーネントの合計数によっては 8 ~ 14 番目のコンポーネントの値を取得できる、入れ子になったから<ph id="ph1">`Tuple`</ph>オブジェクトの<ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>を通じて<ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of a nested <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the <ph id="ph3">`Tuple`</ph> object at the next level of nesting.</source>
          <target state="translated">使用してできます、 <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> 、入れ子になったのプロパティ<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>を取得するオブジェクト、 <ph id="ph3">`Tuple`</ph> [次へ] の入れ子のレベルにあるオブジェクト。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can dynamically determine the number of components in a nested <ph id="ph1">`Tuple`</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property by extracting the digit from its type name.</source>
          <target state="translated">入れ子になったコンポーネントの数は、動的に決定する<ph id="ph1">`Tuple`</ph>によって返されるオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>桁をその型の名前から抽出してプロパティです。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example provides an illustration.</source>
          <target state="translated">具体的な例を次に示します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン、2000 1860 からの母集団のデータを格納している 17 組オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">17 タプルの 7 番目のコンポーネントは、1900 年の人口です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property to retrieve the values of the eighth through fourteenth components, and it uses the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of the nested <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the values of the remaining components.</source>
          <target state="translated">この例では、 <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> 14 番目のコンポーネントとそのを通じて 8 番目の値を取得するプロパティを使用して、<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>の入れ子になったプロパティ<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>残りの要素の値を取得するオブジェクト。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">現在のインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">比較用のカスタムの規則を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">指定された比較子を使用して現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">並べ替え順序における、このインスタンスと <ph id="ph1">&lt;paramref name="other" /&gt;</ph> の相対位置を示す符号付き整数値 (次の表を参照)。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>説明</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 負の整数</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの位置が <ph id="ph3">&lt;paramref name="other" /&gt;</ph> よりも前です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスと <ph id="ph3">&lt;paramref name="other" /&gt;</ph> の位置は、並べ替え順序において同じです。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 正の整数</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの位置は <ph id="ph3">&lt;paramref name="other" /&gt;</ph> よりも後ろです。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス実装です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">このメソッドでは、カスタマイズした比較を定義できます。<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">たとえば、順序に、このメソッドを使用することができます<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>オブジェクトが特定のコンポーネントの値に基づきます。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">コレクションを並べ替えることによって最もよく呼び出されますが、このメソッドは、直接呼び出すことができるなどのメソッドを<ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph>パラメーター コレクションのメンバーの順序付けをします。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">たとえば、メソッドによって呼び出されます、<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph>のメソッド、<ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>を使用してインスタンス化されるオブジェクト、<ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph>並べ替え操作で使用するためのメソッドです。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">これはありません、比較の主な目的は 2 つのオブジェクトが等しいかどうかを判断するときに使用する必要があります。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">2 つのオブジェクトが等しいかどうかを判断するを呼び出して、<ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contains population data for four U.S. cities from 1940 to 2000.</source>
          <target state="translated">次の例の配列を作成する<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>4 米国の都市 1940年から 2000年の人口データが含まれているオブジェクト。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The octuple's first component is the city name.</source>
          <target state="translated">組の最初のコンポーネントは、市区町村名です。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining six components represent the population at 10-year intervals from 1940 to 2000.</source>
          <target state="translated">残りの 6 つのコンポーネントでは、1940年から 2000年までの 10 年間の間隔で人口を表します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of octuples to be sorted by any one of its components.</source>
          <target state="translated"><ph id="ph1">`PopulationComparer`</ph>クラスを提供する<ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph>により、そのコンポーネントのいずれかでソートするには、構成される組の配列を実装します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">2 つの値が用意されて、<ph id="ph1">`PopulationComparer`</ph>コンス トラクター内のクラス: 並べ替え順序を定義するコンポーネントの位置と<ph id="ph2">&lt;xref:System.Boolean&gt;</ph>組オブジェクトを昇順または降順で並べ替える必要があるかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.</source>
          <target state="translated">例では、し、並べ替えられていない順序で配列の要素が表示されます、3 番目のコンポーネント (1950 年カタログ作成) で並べ替えてと、それらを表示し、8 番目のコンポーネント (2000年のカタログ作成) で並べ替えてして表示にします。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトではありません。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">このインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">2 つのオブジェクトが等しいかどうかの評価に使用するメソッドを定義するオブジェクト。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">指定された比較メソッドに基づいて、現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のインスタンスが指定したオブジェクトと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object that has the same total number of components (including those in nested <ph id="ph5">`Tuple`</ph> objects) of the same types as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>実装が呼び出される場合にのみ<ph id="ph2">`other`</ph>は<ph id="ph3">`null`</ph>、キャスト (c#) またはに (Visual Basic) の変換が正常にすることができるかどうかと、<ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph>コンポーネントの合計数が同じオブジェクト (に含めて入れ子になった<ph id="ph5">`Tuple`</ph>オブジェクト)、現在のインスタンスと同じ型のです。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph>メソッドの最初のパス、<ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>の値、<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>と比較するオブジェクト、<ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">このメソッドの呼び出しが返された場合<ph id="ph1">`true`</ph>、メソッドが再度呼び出され、渡された、 <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> 、2 つの値<ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of values, or the two <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">これは、メソッド呼び出しから戻るまで続きます<ph id="ph1">`false`</ph>特定の値、または 2 つのペアを比較するときに<ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph>値、メソッドに渡されます。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトのハッシュ コードを計算する <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> メソッドを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">指定した計算メソッドを使用して、現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトのハッシュ コードを計算します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">メソッドは、単にへの呼び出しをラップ、<ph id="ph1">`comparer`</ph>オブジェクトの<ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">2 つのハッシュ コードの計算に使用するアルゴリズムが同じハッシュ コードを返す必要があります<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>同等であると見なされるオブジェクト。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">現在のインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトと指定したオブジェクトを比較して、現在のオブジェクトが、並べ替え順序において、指定したオブジェクトの前後または同じ位置のいずれにあるかを示す整数を返します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">並べ替え順序における、このインスタンスと <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> の相対位置を示す符号付き整数値 (次の表を参照)。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>説明</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 負の整数</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの位置が <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> よりも前です。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスと <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> の位置は、並べ替え順序において同じです。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 正の整数</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの位置は <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> よりも後ろです。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> class.</source>
          <target state="translated">このメソッドを提供、<ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph>の実装、<ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">コレクションの並べ替えの既定のオーバー ロードによって最もよく呼び出さは直接メソッドを呼び出すことができます、メソッドなど<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>コレクションのメンバーの順序付けをします。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph>並べ替え操作で使用するためのメソッドです。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">これはありません、比較の主な目的は 2 つのオブジェクトが等しいかどうかを判断するときに使用する必要があります。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">2 つのオブジェクトが等しいかどうかを判断するを呼び出して、<ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method uses the default object comparer to compare each component.</source>
          <target state="translated">このメソッドは、各コンポーネントを比較するのにオブジェクトの既定の比較子を使用します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of octuples whose components are integers that contain a range of prime numbers.</source>
          <target state="translated">次の例では、コンポーネントが含まれる素数の範囲を含む整数は、構成される組の配列を作成します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order.</source>
          <target state="translated">例では、並べ替えられて、配列の要素を表示するには、配列を並べ替えますおよび並べ替え順序で配列を表示します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, or the tuple's first component.</source>
          <target state="translated">出力は、配列がして並べ替えられていることを示しています。 <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>、または組の最初のコンポーネントです。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">例では、直接呼び出しませんなお、<ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">このメソッドはによって暗黙的に呼び出されます、<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph>配列内の各要素のメソッドです。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトではありません。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 要素のインデックス。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 for <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> to one less than the number of elements in the <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> の範囲は、<ph id="ph1">&lt;see langword="Item1" /&gt;</ph> について 0 から、<ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> の要素の数より 1 少ない数までです。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 要素の値を取得します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">指定した位置にある <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 要素の値。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph>プロパティは、明示的なインターフェイス実装です。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">これを呼び出すには、キャストまたは変換する必要があります、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>オブジェクトを<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>インターフェイス オブジェクト。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> にある要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> にある要素の数。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph>プロパティは、明示的なインターフェイス実装です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> type to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">これを呼び出すには、キャストまたは変換する必要があります、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>型を<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>インターフェイス オブジェクト。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> instance.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> インスタンスの値を表す文字列を返します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> オブジェクトの文字列表現。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt>Item8<ept id="p5">*</ept>…), where <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, and <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt>Item8<ept id="p5">*</ept>…), where <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, and <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept> represents the value of the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object's <ph id="ph2">`Next.Item1`</ph> property.</source>
          <target state="translated"><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>の値を表す、<ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>オブジェクトの<ph id="ph2">`Next.Item1`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The value of any additional nested components follow <bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>.</source>
          <target state="translated">その他の入れ子になったコンポーネントの値に従って<bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">プロパティ値のいずれかが場合<ph id="ph1">`null`</ph>、として表されます<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900.</source>
          <target state="translated">次の例では、デトロイト市、ミシガン 1860 1900 年からの母集団のデータを格納している 17 組を作成します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph> method to display the tuple's data.</source>
          <target state="translated">次を使用して、<ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph>組のデータを表示するメソッド。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>