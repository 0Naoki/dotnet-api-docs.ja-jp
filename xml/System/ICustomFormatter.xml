<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9905ea1b04870148d87d7b4065ef7e2d5ad1d34" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37728460" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1543f-101">オブジェクトの値のカスタム書式設定をサポートするメソッドを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1543f-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1543f-102"><xref:System.ICustomFormatter>インターフェイスには、1 つのメソッドが含まれています。<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1543f-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1543f-103">このインターフェイスが参照または値の型によって実装された場合、<xref:System.ICustomFormatter.Format%2A>メソッドがオブジェクトの値のカスタム形式の文字列表現を返します。</span><span class="sxs-lookup"><span data-stu-id="1543f-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="1543f-104">通常、<xref:System.ICustomFormatter>でインターフェイスが実装されている、<xref:System.IFormatProvider>インターフェイスが含まれる .NET Framework の複合文字列書式指定メソッドが 2 つの動作をカスタマイズする、<xref:System.IFormatProvider>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1543f-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="1543f-105">具体的には、<xref:System.ICustomFormatter>インターフェイスに渡されるオブジェクトの値のカスタム書式設定を提供することができます、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>と<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1543f-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="1543f-106">オブジェクトの値のカスタム表現を提供するには、次を行うことが必要です。</span><span class="sxs-lookup"><span data-stu-id="1543f-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="1543f-107">実装するクラスを定義、<xref:System.ICustomFormatter>インターフェイスとその 1 つのメンバー、<xref:System.ICustomFormatter.Format%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1543f-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="1543f-108">実装するクラスを定義、<xref:System.IFormatProvider>インターフェイスとその 1 つのメンバー、<xref:System.IFormatProvider.GetFormat%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1543f-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="1543f-109"><xref:System.IFormatProvider.GetFormat%2A>メソッドのインスタンスを返します、<xref:System.ICustomFormatter>実装します。</span><span class="sxs-lookup"><span data-stu-id="1543f-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="1543f-110">1 つのクラスが両方を実装する多くの場合、<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>します。</span><span class="sxs-lookup"><span data-stu-id="1543f-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="1543f-111">その場合、クラスの`GetFormat`実装では、それ自体のインスタンスだけを返します。</span><span class="sxs-lookup"><span data-stu-id="1543f-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="1543f-112">渡す、<xref:System.IFormatProvider>実装として、`provider`の引数、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドまたは同等のメソッド。</span><span class="sxs-lookup"><span data-stu-id="1543f-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="1543f-113">.NET Framework のメソッドではなく、独自のカスタム書式設定が使用されます。</span><span class="sxs-lookup"><span data-stu-id="1543f-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1543f-114">次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。</span><span class="sxs-lookup"><span data-stu-id="1543f-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="1543f-115">この例では、1 つのクラスで`IBinaryFormatter`、両方を実装<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>します。</span><span class="sxs-lookup"><span data-stu-id="1543f-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="1543f-116">その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッドを判断するかどうか、`formatType`パラメーターを表します、<xref:System.ICustomFormatter>型。</span><span class="sxs-lookup"><span data-stu-id="1543f-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="1543f-117">その場合、`BinaryFormatter`のインスタンスを返します。 それ以外を返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="1543f-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="1543f-118">その<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装は、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定します ("B"の"O"のバイナリに 8 進数、および 16 進数の"H") および書式設定、`arg`パラメーター適切にします。</span><span class="sxs-lookup"><span data-stu-id="1543f-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="1543f-119">の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装、1 つが存在する場合またはそのパラメーターのない`ToString`メソッド、1 つでない場合。</span><span class="sxs-lookup"><span data-stu-id="1543f-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="1543f-120">`arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="1543f-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="1543f-121">`BinaryFormatter` 渡すことによってカスタムの書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="1543f-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="1543f-122">
        <para>共通言語ランタイムが使用しようとした場合、<see cref="T:System.ICustomFormatter" />複合書式指定文字列の書式指定項目はすべての実装。その結果、期待する必要があります、<see cref="T:System.ICustomFormatter" />オブジェクトを書式設定サービスを提供する実装が呼び出されるまたは処理するには、値が想定されていません。このような場合、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、そのオブジェクトまたは値の適切な書式指定メソッドを呼び出す必要があります。2 種類がありますの<see cref="T:System.ICustomFormatter" />実装: 組み込みと拡張機能。組み込みの実装は、アプリケーション定義のオブジェクトのカスタム書式を提供する実装です。この場合、実装は、次を含める必要があります:-オブジェクトの書式を定義する書式指定文字列を定義します。書式指定文字列は省略可能です。通常、"G"または"g"書式指定文字列は、[全般] (または最もよく使用される) の形式を定義します。ただし、自由に選択した任意の書式指定文字列を定義します。大文字または小文字、かどうかを決定する必要があります。 -オブジェクトの型に渡されることを確認するテスト、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、アプリケーション定義の型。そうでない場合は、オブジェクトを呼び出す必要があります<see cref="T:System.IFormattable" />実装、1 つ存在する場合、またはその<see cref="M:System.Object.ToString" />メソッド、そうでない場合。これらのメソッド呼び出しが発生する例外を処理する準備をする必要があります。 実装は、書式指定文字列をサポートしている場合は、null 形式の文字列を処理するコードです。最も一般的なアプローチでは、一般書式指定子で、null の書式指定文字列を置き換えます。 実装をサポートする任意の書式指定文字列を処理するコードです。 サポートしていない書式指定文字列を処理するコードです。最も一般的なアプローチをスローする、<see cref="T:System.FormatException" />既定の書式設定を行うことができます。拡張機能の実装は、既に書式設定がサポートする型のカスタム書式を提供する実装です。たとえば、定義する、 <c>CustomerNumberFormatter</c>整数型の特定の桁をハイフンに書式設定します。この場合、実装は、次を含める必要があります:-オブジェクトの書式設定を拡張する書式指定文字列の定義。これらの書式指定文字列が必要ですが、型の既存の書式指定文字列と、競合する必要があります。たとえば、拡張する場合の書式設定、<see cref="T:System.Int32" />型、"C"、"D"、"E"、"F"および"G"書式指定子、他のユーザーの間では実装しないでください。 -テストに渡されるオブジェクトの型を<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、型の書式設定、拡張機能をサポートしています。そうでない場合は、オブジェクトを呼び出す<see cref="T:System.IFormattable" />が存在する、またはオブジェクトをパラメーターなしの場合は、実装<see cref="M:System.Object.ToString" />メソッド、そうでない場合。これらのメソッド呼び出しが発生する例外を処理する準備をする必要があります。 拡張機能をサポートする任意の書式指定文字列を処理するコードです。 拡張機能がサポートされていない任意の書式指定文字列を処理するコードです。これらは型に渡される必要があります<see cref="T:System.IFormattable" />実装します。これらのメソッド呼び出しが発生する例外を処理する準備をする必要があります。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="1543f-122">
          <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  -   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  -   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  -   Code to handle any format strings that your implementation supports.  -   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  -   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  -   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle any format strings that your extension supports.  -   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="1543f-123">書式設定の仕様を含む書式文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1543f-123">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="1543f-124">書式指定するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1543f-124">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="1543f-125">現在のインスタンスに関する書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1543f-125">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1543f-126">指定した形式およびカルチャ固有の書式設定情報を使用して、指定したオブジェクトの値をそれと等価の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1543f-126">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1543f-127">
            <paramref name="arg" /> と <paramref name="format" /> の指定に従って書式指定した <paramref name="formatProvider" /> の値の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1543f-127">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1543f-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> はコールバック メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1543f-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="1543f-129">など、カスタムの書式設定をサポートするメソッドを呼び出して<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>または<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1543f-129">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1543f-130">各書式項目の 1 回呼び出された、[複合書式指定文字列](~/docs/standard/base-types/composite-formatting.md)します。</span><span class="sxs-lookup"><span data-stu-id="1543f-130">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="1543f-131">たとえば、次のステートメントで、<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>メソッドで 3 回は呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1543f-131">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="1543f-132">`arg`パラメーターは 0 から始まる位置が特定の書式項目のインデックスに対応するオブジェクトの一覧でオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="1543f-132">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="1543f-133">`format`パラメーターには、形式の文字列が含まれています、`formatString`書式指定項目のコンポーネント。</span><span class="sxs-lookup"><span data-stu-id="1543f-133">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="1543f-134">書式指定項目がにない場合`formatString`コンポーネントの値は、`format`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="1543f-134">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="1543f-135">場合`format`は`null`の種類に応じて、`arg`好みの既定の書式指定を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="1543f-135">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="1543f-136">`formatProvider`パラメーターは、<xref:System.IFormatProvider>の書式設定を提供する実装`arg`します。</span><span class="sxs-lookup"><span data-stu-id="1543f-136">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="1543f-137">通常のインスタンスは、<xref:System.ICustomFormatter>実装します。</span><span class="sxs-lookup"><span data-stu-id="1543f-137">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="1543f-138">場合`formatProvider`は`null`、そのパラメーターを無視します。</span><span class="sxs-lookup"><span data-stu-id="1543f-138">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="1543f-139">実装、<xref:System.ICustomFormatter.Format%2A>メソッドは、.NET Framework がサポートしていない書式設定を提供できるように、次の機能を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="1543f-139">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="1543f-140">形式の方法が、形式をサポートしていない場合は、書式設定を実装する対象のオブジェクトかどうかを決定、<xref:System.IFormattable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="1543f-140">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="1543f-141">これを呼び出す場合、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>そのインターフェイスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="1543f-141">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="1543f-142">それ以外の場合、既定値を呼び出す<xref:System.Object.ToString%2A?displayProperty=nameWithType>基になるオブジェクトのメソッド。</span><span class="sxs-lookup"><span data-stu-id="1543f-142">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="1543f-143">次のコードは、このパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="1543f-143">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="1543f-144">次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。</span><span class="sxs-lookup"><span data-stu-id="1543f-144">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="1543f-145">その<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装は、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定します ("B"の"O"のバイナリに 8 進数、および 16 進数の"H") および書式設定、`arg`パラメーター適切にします。</span><span class="sxs-lookup"><span data-stu-id="1543f-145">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="1543f-146">の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装、1 つが存在する場合またはそのパラメーターのない`ToString`メソッド、1 つでない場合。</span><span class="sxs-lookup"><span data-stu-id="1543f-146">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="1543f-147">`arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="1543f-147">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="1543f-148">`BinaryFormatter` 渡すことによってカスタムの書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="1543f-148">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>