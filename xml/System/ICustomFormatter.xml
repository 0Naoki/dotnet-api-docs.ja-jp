<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f54e2e84e8387855c2add6a214afa57814e391c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431015" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクトの値のカスタム書式設定をサポートするメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter>インターフェイスには、1 つのメソッドが含まれています。<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>です。 このインターフェイスが参照または値の型によって実装された場合、<xref:System.ICustomFormatter.Format%2A>メソッドがオブジェクトの値のカスタム形式の文字列形式を返します。  
  
 通常、<xref:System.ICustomFormatter>でインターフェイスが実装されて、<xref:System.IFormatProvider>インターフェイスが含まれている .NET Framework の複合文字列書式指定メソッドが 2 つの動作をカスタマイズする、<xref:System.IFormatProvider>パラメーター。 具体的には、<xref:System.ICustomFormatter>インターフェイスに渡されるオブジェクトの値のカスタム書式を提供することができます、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>と<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドです。  
  
 オブジェクトの値のカスタム形式を提供するには、ことを次の操作が必要です。  
  
1.  実装するクラスを定義、<xref:System.ICustomFormatter>インターフェイスとその 1 つのメンバー、<xref:System.ICustomFormatter.Format%2A>メソッドです。  
  
2.  実装するクラスを定義、<xref:System.IFormatProvider>インターフェイスとその 1 つのメンバー、<xref:System.IFormatProvider.GetFormat%2A>メソッドです。 <xref:System.IFormatProvider.GetFormat%2A>メソッドのインスタンスを返します、<xref:System.ICustomFormatter>実装します。 多くの場合、1 つのクラスを実装しています<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>です。 その場合、クラスの`GetFormat`実装では、それ自体のインスタンスだけを返します。  
  
3.  渡す、<xref:System.IFormatProvider>実装として、`provider`の引数、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドまたは同等のメソッドです。  
  
 .NET Framework のメソッドではなく、独自のカスタム書式設定が使用されます。  
  
   
  
## Examples  
 次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。 この例では、1 つのクラスで`IBinaryFormatter`、両方を実装する<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>です。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッドを判断するかどうか、`formatType`パラメーターを表します、<xref:System.ICustomFormatter>型です。 その場合、`BinaryFormatter`のインスタンスを返します。 それ以外を返します`null`です。 その<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装では、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定 ("B"の"O"のバイナリに 8 進数、および 16 進数の"H") および書式設定、`arg`パラメーター適切にします。 それ以外の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装では、1 つ存在する場合、またはそのパラメーターのない`ToString`メソッドを 1 つでない場合。 `arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 渡すことによってカスタム書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例のようにします。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>共通言語ランタイムが使用しようとした場合、<see cref="T:System.ICustomFormatter" />複合書式指定文字列内のすべての書式項目を実装します。その結果、期待する必要があります、<see cref="T:System.ICustomFormatter" />オブジェクトを書式指定サービスを提供する実装が呼び出されるまたは処理するはその値が想定されていません。このような場合、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、そのオブジェクトまたは値の適切な書式設定メソッドを呼び出す必要があります。2 種類がありますの<see cref="T:System.ICustomFormatter" />実装: 組み込みおよび拡張機能です。組み込み実装では、アプリケーション定義のオブジェクトのカスタム書式を提供します。この場合、実装には、次を含める必要があります:-オブジェクトの書式を定義する書式指定文字列を定義します。書式指定文字列は省略できます。通常、"G"または"g"書式指定文字列は、[全般] (または最もよく使用される) の形式を定義します。ただし、選択した任意の書式指定文字列を定義するために解放されます。大文字または小文字いるかどうかを決定する必要があります。 に渡されるオブジェクトの型を確認するは、テスト、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、アプリケーション定義の型。そうでない場合は、オブジェクトを呼び出す必要があります<see cref="T:System.IFormattable" />実装では、1 つ存在する場合、またはその<see cref="M:System.Object.ToString" />メソッド、そうでない場合。これらのメソッド呼び出しがスローされた例外を処理する準備をする必要があります。 実装には、書式指定文字列をサポートしている場合は、null 形式の文字列を処理するコードです。最も一般的な方法では、一般書式指定子で、null の書式指定文字列を置き換えます。 実装をサポートする任意の書式指定文字列を処理するコードです。 サポートしていない書式指定文字列を処理するコードです。最も一般的な方法をスローする、<see cref="T:System.FormatException" />既定の書式設定を指定できますが、します。拡張機能の実装は、既に書式設定がサポートする型のカスタム書式を提供する実装です。たとえば、定義する、 <c>CustomerNumberFormatter</c>整数型の特定の数字の間でハイフンの書式を設定します。この場合、実装には、次を含める必要があります:-オブジェクトの書式を拡張する書式指定文字列を定義します。これらの書式指定文字列が必要ですが、型の既存の書式指定文字列と競合する必要があります。たとえば、拡張する場合の書式設定、<see cref="T:System.Int32" />型、"C"、"D"、"E"、"F"および"G"書式指定子、他のユーザー間では実装しないでください。 は、テストに渡されるオブジェクトの型を<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、型の書式設定、拡張機能をサポートしています。そうでない場合は、オブジェクトを呼び出す<see cref="T:System.IFormattable" />実装では、1 つ存在するか、オブジェクトのパラメーターなしの場合<see cref="M:System.Object.ToString" />メソッド、そうでない場合。これらのメソッド呼び出しがスローされた例外を処理する準備をする必要があります。 拡張機能をサポートする任意の書式指定文字列を処理するコードです。 拡張機能をサポートしない任意の書式指定文字列を処理するコードです。これらに渡される型の<see cref="T:System.IFormattable" />実装します。これらのメソッド呼び出しがスローされた例外を処理する準備をする必要があります。</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">書式設定の仕様を含む書式文字列。</param>
        <param name="arg">書式指定するオブジェクト。</param>
        <param name="formatProvider">現在のインスタンスに関する書式情報を提供するオブジェクト。</param>
        <summary>指定した形式およびカルチャ固有の書式設定情報を使用して、指定したオブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns>
          <paramref name="arg" /> と <paramref name="format" /> の指定に従って書式指定した <paramref name="formatProvider" /> の値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> はコールバック メソッドです。 など、カスタム書式指定をサポートするメソッドによって呼び出されます<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>または<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>です。 各書式項目の実装を 1 回呼び出されます、[複合書式指定文字列](~/docs/standard/base-types/composite-formatting.md)です。 たとえば、次のステートメントで、<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>メソッドには 3 回は呼び出されます。  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg`パラメーターが 0 で始まる位置が、特定の書式指定項目のインデックスに対応するオブジェクトの一覧内のオブジェクト。  
  
 `format`パラメーターは書式指定文字列に含まれる、`formatString`書式指定項目のコンポーネントです。 書式項目を持たない場合`formatString`コンポーネント、値の`format`は`null`します。 場合`format`は`null`の種類に応じて、`arg`任意の既定の書式指定を使用することができます。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>書式を提供する実装`arg`です。 インスタンスでは、通常、<xref:System.ICustomFormatter>実装します。 場合`formatProvider`は`null`、そのパラメーターを無視します。  
  
 実装、<xref:System.ICustomFormatter.Format%2A>メソッドは、次の機能を含める必要がありますので、.NET Framework がサポートしていない書式設定を指定することができます。 形式の方法が、形式をサポートしていない場合は、対象のオブジェクトの形式を実装するかどうかを判断、<xref:System.IFormattable>インターフェイスです。 呼び出しは、その場合、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>そのインターフェイスのメソッドです。 それ以外の場合、既定値を呼び出す<xref:System.Object.ToString%2A?displayProperty=nameWithType>基になるオブジェクトのメソッドです。 次のコードでは、このパターンを示します。  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。 その<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装では、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定 ("B"の"O"のバイナリに 8 進数、および 16 進数の"H") および書式設定、`arg`パラメーター適切にします。 それ以外の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装では、1 つ存在する場合、またはそのパラメーターのない`ToString`メソッドを 1 つでない場合。 `arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 渡すことによってカスタム書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例のようにします。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>