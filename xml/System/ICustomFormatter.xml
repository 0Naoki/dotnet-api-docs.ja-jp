<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6002c7bffa27e626bfd04916c139d411974b86fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728676" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="52cf6-101">オブジェクトの値のカスタム書式設定をサポートするメソッドを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="52cf6-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52cf6-102"><xref:System.ICustomFormatter>インターフェイスには、1 つのメソッドが含まれています。<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="52cf6-103">このインターフェイスが参照または値の型によって実装された場合、<xref:System.ICustomFormatter.Format%2A>メソッドがオブジェクトの値のカスタム形式の文字列形式を返します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="52cf6-104">通常、<xref:System.ICustomFormatter>でインターフェイスが実装されて、<xref:System.IFormatProvider>インターフェイスが含まれている .NET Framework の複合文字列書式指定メソッドが 2 つの動作をカスタマイズする、<xref:System.IFormatProvider>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="52cf6-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="52cf6-105">具体的には、<xref:System.ICustomFormatter>インターフェイスに渡されるオブジェクトの値のカスタム書式を提供することができます、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>と<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="52cf6-106">オブジェクトの値のカスタム形式を提供するには、ことを次の操作が必要です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="52cf6-107">実装するクラスを定義、<xref:System.ICustomFormatter>インターフェイスとその 1 つのメンバー、<xref:System.ICustomFormatter.Format%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="52cf6-108">実装するクラスを定義、<xref:System.IFormatProvider>インターフェイスとその 1 つのメンバー、<xref:System.IFormatProvider.GetFormat%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="52cf6-109"><xref:System.IFormatProvider.GetFormat%2A>メソッドのインスタンスを返します、<xref:System.ICustomFormatter>実装します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="52cf6-110">多くの場合、1 つのクラスを実装しています<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="52cf6-111">その場合、クラスの`GetFormat`実装では、それ自体のインスタンスだけを返します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="52cf6-112">渡す、<xref:System.IFormatProvider>実装として、`provider`の引数、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドまたは同等のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="52cf6-113">.NET Framework のメソッドではなく、独自のカスタム書式設定が使用されます。</span><span class="sxs-lookup"><span data-stu-id="52cf6-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52cf6-114">次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。</span><span class="sxs-lookup"><span data-stu-id="52cf6-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="52cf6-115">この例では、1 つのクラスで`IBinaryFormatter`、両方を実装する<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="52cf6-116">その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッドを判断するかどうか、`formatType`パラメーターを表します、<xref:System.ICustomFormatter>型です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="52cf6-117">その場合、`BinaryFormatter`のインスタンスを返します。 それ以外を返します`null`です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="52cf6-118">その<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装では、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定 ("B"の"O"のバイナリに 8 進数、および 16 進数の"H") および書式設定、`arg`パラメーター適切にします。</span><span class="sxs-lookup"><span data-stu-id="52cf6-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="52cf6-119">それ以外の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装では、1 つ存在する場合、またはそのパラメーターのない`ToString`メソッドを 1 つでない場合。</span><span class="sxs-lookup"><span data-stu-id="52cf6-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="52cf6-120">`arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="52cf6-121">`BinaryFormatter` 渡すことによってカスタム書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例のようにします。</span><span class="sxs-lookup"><span data-stu-id="52cf6-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="52cf6-122">共通言語ランタイムが使用しようとした場合、<see cref="T:System.ICustomFormatter" />複合書式指定文字列内のすべての書式項目を実装します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="52cf6-122">The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string.</span>
        </span>
        <span data-ttu-id="52cf6-123">その結果、期待する必要があります、<see cref="T:System.ICustomFormatter" />オブジェクトを書式指定サービスを提供する実装が呼び出されるまたは処理するはその値が想定されていません。</span>
        <span class="sxs-lookup">
          <span data-stu-id="52cf6-123">As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</span>
        </span>
        <span data-ttu-id="52cf6-124">このような場合、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、そのオブジェクトまたは値の適切な書式設定メソッドを呼び出す必要があります。</span>
        <span class="sxs-lookup">
          <span data-stu-id="52cf6-124">In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.</span>
        </span>
        <span data-ttu-id="52cf6-125">2 種類がありますの<see cref="T:System.ICustomFormatter" />実装: 組み込みおよび拡張機能です。</span>
        <span class="sxs-lookup">
          <span data-stu-id="52cf6-125">There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.</span>
        </span>
        <span data-ttu-id="52cf6-126">組み込み実装では、アプリケーション定義のオブジェクトのカスタム書式を提供します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="52cf6-126">Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</span>
        </span>
        <span data-ttu-id="52cf6-127">この場合、実装する必要があります以下に示します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="52cf6-127">In this case, your implementation should include the following:</span>
        </span>  
  
-   <span data-ttu-id="52cf6-128">オブジェクトの書式を定義する書式指定文字列を定義します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-128">A definition of format strings that define the formatting of the object.</span></span><span data-ttu-id="52cf6-129">書式指定文字列は省略できます。</span><span class="sxs-lookup"><span data-stu-id="52cf6-129">Format strings are optional.</span></span><span data-ttu-id="52cf6-130">通常、"G"または"g"書式指定文字列は、[全般] (または最もよく使用される) の形式を定義します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-130">Typically, a "G" or "g" format string defines the general (or most commonly used) format.</span></span><span data-ttu-id="52cf6-131">ただし、選択した任意の書式指定文字列を定義するために解放されます。</span><span class="sxs-lookup"><span data-stu-id="52cf6-131">However, you are free to define any format strings that you choose.</span></span><span data-ttu-id="52cf6-132">大文字または小文字いるかどうかを決定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="52cf6-132">You are also free to decide whether they are case-sensitive or case-insensitive.</span></span>  
  
-   <span data-ttu-id="52cf6-133">渡されるオブジェクトの型を確認するテスト、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、アプリケーション定義の型。</span><span class="sxs-lookup"><span data-stu-id="52cf6-133">A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type.</span></span><span data-ttu-id="52cf6-134">そうでない場合は、オブジェクトを呼び出す必要があります<see cref="T:System.IFormattable" />実装では、1 つ存在する場合、またはその<see cref="M:System.Object.ToString" />メソッド、そうでない場合。</span><span class="sxs-lookup"><span data-stu-id="52cf6-134">If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not.</span></span><span data-ttu-id="52cf6-135">これらのメソッド呼び出しがスローされた例外を処理する準備をする必要があります。</span><span class="sxs-lookup"><span data-stu-id="52cf6-135">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
-   <span data-ttu-id="52cf6-136">実装は、書式指定文字列をサポートしている場合は、null 形式の文字列を処理するコードです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-136">Code to handle a null format string, if your implementation supports format strings.</span></span><span data-ttu-id="52cf6-137">最も一般的な方法では、一般書式指定子で、null の書式指定文字列を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="52cf6-137">The most common approach is to replace a null format string with the general format specifier.</span></span>  
  
-   <span data-ttu-id="52cf6-138">実装をサポートする任意の書式指定文字列を処理するコードです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-138">Code to handle any format strings that your implementation supports.</span></span>  
  
-   <span data-ttu-id="52cf6-139">サポートしていない書式指定文字列を処理するコードです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-139">Code to handle format strings that you do not support.</span></span><span data-ttu-id="52cf6-140">最も一般的な方法をスローする、<see cref="T:System.FormatException" />既定の書式設定を指定できますが、します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-140">The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.</span></span><span data-ttu-id="52cf6-141">拡張機能の実装は、既に書式設定がサポートする型のカスタム書式を提供する実装です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-141">Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</span></span><span data-ttu-id="52cf6-142">たとえば、定義する、 <c>CustomerNumberFormatter</c>整数型の特定の数字の間でハイフンの書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-142">For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits.</span></span><span data-ttu-id="52cf6-143">この場合、実装する必要があります以下に示します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-143">In this case, your implementation should include the following:</span></span>  
  
-   <span data-ttu-id="52cf6-144">オブジェクトの書式を拡張する書式指定文字列を定義します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-144">A definition of format strings that extend the formatting of the object.</span></span><span data-ttu-id="52cf6-145">これらの書式指定文字列が必要ですが、型の既存の書式指定文字列と競合する必要があります。</span><span class="sxs-lookup"><span data-stu-id="52cf6-145">These format strings are required, but they must not conflict with the type's existing format strings.</span></span><span data-ttu-id="52cf6-146">たとえば、拡張する場合の書式設定、<see cref="T:System.Int32" />型、"C"、"D"、"E"、"F"および"G"書式指定子、他のユーザー間では実装しないでください。</span><span class="sxs-lookup"><span data-stu-id="52cf6-146">For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</span></span>  
  
-   <span data-ttu-id="52cf6-147">テストに渡されるオブジェクトの型を<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、型の書式設定、拡張機能をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="52cf6-147">A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports.</span></span><span data-ttu-id="52cf6-148">そうでない場合は、オブジェクトを呼び出す<see cref="T:System.IFormattable" />実装では、1 つ存在するか、オブジェクトのパラメーターなしの場合<see cref="M:System.Object.ToString" />メソッド、そうでない場合。</span><span class="sxs-lookup"><span data-stu-id="52cf6-148">If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not.</span></span><span data-ttu-id="52cf6-149">これらのメソッド呼び出しがスローされた例外を処理する準備をする必要があります。</span><span class="sxs-lookup"><span data-stu-id="52cf6-149">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
-   <span data-ttu-id="52cf6-150">拡張機能をサポートする任意の書式指定文字列を処理するコードです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-150">Code to handle any format strings that your extension supports.</span></span>  
  
-   <span data-ttu-id="52cf6-151">拡張機能をサポートしない任意の書式指定文字列を処理するコードです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-151">Code to handle any format strings that your extension does not support.</span></span><span data-ttu-id="52cf6-152">これらに渡される型の<see cref="T:System.IFormattable" />実装します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-152">These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation.</span></span><span data-ttu-id="52cf6-153">これらのメソッド呼び出しがスローされた例外を処理する準備をする必要があります。</span><span class="sxs-lookup"><span data-stu-id="52cf6-153">You should be prepared to handle any exceptions these method calls might throw.</span></span></para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="52cf6-154">書式設定の仕様を含む書式文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52cf6-154">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="52cf6-155">書式指定するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52cf6-155">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="52cf6-156">現在のインスタンスに関する書式情報を提供するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52cf6-156">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52cf6-157">指定した形式およびカルチャ固有の書式設定情報を使用して、指定したオブジェクトの値をそれと等価の文字列形式に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52cf6-157">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52cf6-158">
            <paramref name="arg" /> と <paramref name="format" /> の指定に従って書式指定した <paramref name="formatProvider" /> の値の文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="52cf6-158">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52cf6-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> はコールバック メソッドです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="52cf6-160">など、カスタム書式指定をサポートするメソッドによって呼び出されます<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>または<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-160">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="52cf6-161">各書式項目の実装を 1 回呼び出されます、[複合書式指定文字列](~/docs/standard/base-types/composite-formatting.md)です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-161">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="52cf6-162">たとえば、次のステートメントで、<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>メソッドには 3 回は呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="52cf6-162">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="52cf6-163">`arg`パラメーターが 0 で始まる位置が、特定の書式指定項目のインデックスに対応するオブジェクトの一覧内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="52cf6-163">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="52cf6-164">`format`パラメーターは書式指定文字列に含まれる、`formatString`書式指定項目のコンポーネントです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-164">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="52cf6-165">書式項目を持たない場合`formatString`コンポーネント、値の`format`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-165">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="52cf6-166">場合`format`は`null`の種類に応じて、`arg`任意の既定の書式指定を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="52cf6-166">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="52cf6-167">`formatProvider`パラメーターは、<xref:System.IFormatProvider>書式を提供する実装`arg`です。</span><span class="sxs-lookup"><span data-stu-id="52cf6-167">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="52cf6-168">インスタンスでは、通常、<xref:System.ICustomFormatter>実装します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-168">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="52cf6-169">場合`formatProvider`は`null`、そのパラメーターを無視します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-169">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="52cf6-170">実装、<xref:System.ICustomFormatter.Format%2A>メソッドは、次の機能を含める必要がありますので、.NET Framework がサポートしていない書式設定を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="52cf6-170">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="52cf6-171">形式の方法が、形式をサポートしていない場合は、対象のオブジェクトの形式を実装するかどうかを判断、<xref:System.IFormattable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-171">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="52cf6-172">呼び出しは、その場合、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>そのインターフェイスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-172">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="52cf6-173">それ以外の場合、既定値を呼び出す<xref:System.Object.ToString%2A?displayProperty=nameWithType>基になるオブジェクトのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="52cf6-173">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="52cf6-174">次のコードでは、このパターンを示します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-174">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="52cf6-175">次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。</span><span class="sxs-lookup"><span data-stu-id="52cf6-175">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="52cf6-176">その<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装では、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定 ("B"の"O"のバイナリに 8 進数、および 16 進数の"H") および書式設定、`arg`パラメーター適切にします。</span><span class="sxs-lookup"><span data-stu-id="52cf6-176">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="52cf6-177">それ以外の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装では、1 つ存在する場合、またはそのパラメーターのない`ToString`メソッドを 1 つでない場合。</span><span class="sxs-lookup"><span data-stu-id="52cf6-177">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="52cf6-178">`arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="52cf6-178">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="52cf6-179">`BinaryFormatter` 渡すことによってカスタム書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例のようにします。</span><span class="sxs-lookup"><span data-stu-id="52cf6-179">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>