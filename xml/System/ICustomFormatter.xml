<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a314918c1d567aa8e851e722e13a8cf0a79fc268" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48638255" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクトの値のカスタム書式設定をサポートするメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter>インターフェイスには、1 つのメソッドが含まれています。<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>します。 このインターフェイスが参照または値の型によって実装された場合、<xref:System.ICustomFormatter.Format%2A>メソッドがオブジェクトの値のカスタム形式の文字列表現を返します。  
  
 通常、<xref:System.ICustomFormatter>でインターフェイスが実装されている、<xref:System.IFormatProvider>インターフェイスが含まれる .NET Framework の複合文字列書式指定メソッドが 2 つの動作をカスタマイズする、<xref:System.IFormatProvider>パラメーター。 具体的には、<xref:System.ICustomFormatter>インターフェイスに渡されるオブジェクトの値のカスタム書式設定を提供することができます、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>と<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッド。  
  
 オブジェクトの値のカスタム表現を提供するには、次を行うことが必要です。  
  
1.  実装するクラスを定義、<xref:System.ICustomFormatter>インターフェイスとその 1 つのメンバー、<xref:System.ICustomFormatter.Format%2A>メソッド。  
  
2.  実装するクラスを定義、<xref:System.IFormatProvider>インターフェイスとその 1 つのメンバー、<xref:System.IFormatProvider.GetFormat%2A>メソッド。 <xref:System.IFormatProvider.GetFormat%2A>メソッドのインスタンスを返します、<xref:System.ICustomFormatter>実装します。 1 つのクラスが両方を実装する多くの場合、<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>します。 その場合、クラスの`GetFormat`実装では、それ自体のインスタンスだけを返します。  
  
3.  渡す、<xref:System.IFormatProvider>実装として、`provider`の引数、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドまたは同等のメソッド。  
  
 .NET Framework のメソッドではなく、独自のカスタム書式設定が使用されます。  
  
   
  
## Examples  
 次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。 この例では、1 つのクラスで`IBinaryFormatter`、両方を実装<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>します。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッドを判断するかどうか、`formatType`パラメーターを表します、<xref:System.ICustomFormatter>型。 その場合、`BinaryFormatter`のインスタンスを返します。 それ以外を返します`null`します。 その<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装は、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定します ("B"の"O"のバイナリに 8 進数、および 16 進数の"H") および書式設定、`arg`パラメーター適切にします。 の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装、1 つが存在する場合またはそのパラメーターのない`ToString`メソッド、1 つでない場合。 `arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 渡すことによってカスタムの書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例を示します。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>共通言語ランタイムが使用しようとした場合、<see cref="T:System.ICustomFormatter" />複合書式指定文字列の書式指定項目はすべての実装。 その結果、期待する必要があります、<see cref="T:System.ICustomFormatter" />オブジェクトを書式設定サービスを提供する実装が呼び出されるまたは処理するには、値が想定されていません。 このような場合、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、そのオブジェクトまたは値の適切な書式指定メソッドを呼び出す必要があります。  
  
2 種類がありますの<see cref="T:System.ICustomFormatter" />実装: 組み込みと拡張機能。  
  
組み込みの実装は、アプリケーション定義のオブジェクトのカスタム書式を提供する実装です。 この場合、実装を次に示します。 
-オブジェクトの書式を定義する書式指定文字列の定義。 書式指定文字列は省略可能です。 通常、"G"または"g"書式指定文字列は、[全般] (または最もよく使用される) の形式を定義します。 ただし、自由に選択した任意の書式指定文字列を定義します。 大文字または小文字、かどうかを決定する必要があります。  
  
-オブジェクトの型に渡されることを確認するテスト、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、アプリケーション定義の型。 そうでない場合は、オブジェクトを呼び出す必要があります<see cref="T:System.IFormattable" />実装、1 つ存在する場合、またはその<see cref="M:System.Object.ToString" />メソッド、そうでない場合。 これらのメソッド呼び出しが発生する例外を処理する準備をする必要があります。  
  
実装は、書式指定文字列をサポートしている場合は、null 形式の文字列を処理するコードです。 最も一般的なアプローチでは、一般書式指定子で、null の書式指定文字列を置き換えます。  
  
実装をサポートする任意の書式指定文字列を処理するコードです。  
  
サポートしていない書式指定文字列を処理するコードです。 最も一般的なアプローチをスローする、<see cref="T:System.FormatException" />既定の書式設定を行うことができます。  
  
拡張機能の実装は、既に書式設定がサポートする型のカスタム書式を提供する実装です。 たとえば、定義する、 <c>CustomerNumberFormatter</c>整数型の特定の桁をハイフンに書式設定します。 この場合、実装を次に示します。 
-オブジェクトの書式設定を拡張する書式指定文字列の定義。 これらの書式指定文字列が必要ですが、型の既存の書式指定文字列と、競合する必要があります。 たとえば、拡張する場合の書式設定、<see cref="T:System.Int32" />型、"C"、"D"、"E"、"F"および"G"書式指定子、他のユーザーの間では実装しないでください。  
  
-テストに渡されるオブジェクトの型を<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />メソッドは、型の書式設定、拡張機能をサポートしています。 そうでない場合は、オブジェクトを呼び出す<see cref="T:System.IFormattable" />が存在する、またはオブジェクトをパラメーターなしの場合は、実装<see cref="M:System.Object.ToString" />メソッド、そうでない場合。 これらのメソッド呼び出しが発生する例外を処理する準備をする必要があります。  
  
拡張機能をサポートする任意の書式指定文字列を処理するコードです。  
  
拡張機能がサポートされていない任意の書式指定文字列を処理するコードです。 これらは型に渡される必要があります<see cref="T:System.IFormattable" />実装します。 これらのメソッド呼び出しが発生する例外を処理する準備をする必要があります。</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">書式設定の仕様を含む書式文字列。</param>
        <param name="arg">書式指定するオブジェクト。</param>
        <param name="formatProvider">現在のインスタンスに関する書式情報を提供するオブジェクト。</param>
        <summary>指定した形式およびカルチャ固有の書式設定情報を使用して、指定したオブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns><paramref name="arg" /> と <paramref name="format" /> の指定に従って書式指定した <paramref name="formatProvider" /> の値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> はコールバック メソッドです。 など、カスタムの書式設定をサポートするメソッドを呼び出して<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>または<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>します。 各書式項目の 1 回呼び出された、[複合書式指定文字列](~/docs/standard/base-types/composite-formatting.md)します。 たとえば、次のステートメントで、<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>メソッドで 3 回は呼び出されます。  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg`パラメーターは 0 から始まる位置が特定の書式項目のインデックスに対応するオブジェクトの一覧でオブジェクトです。  
  
 `format`パラメーターには、形式の文字列が含まれています、`formatString`書式指定項目のコンポーネント。 書式指定項目がにない場合`formatString`コンポーネントの値は、`format`は`null`します。 場合`format`は`null`の種類に応じて、`arg`好みの既定の書式指定を使用することができます。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>の書式設定を提供する実装`arg`します。 通常のインスタンスは、<xref:System.ICustomFormatter>実装します。 場合`formatProvider`は`null`、そのパラメーターを無視します。  
  
 実装、<xref:System.ICustomFormatter.Format%2A>メソッドは、.NET Framework がサポートしていない書式設定を提供できるように、次の機能を含める必要があります。 形式の方法が、形式をサポートしていない場合は、書式設定を実装する対象のオブジェクトかどうかを決定、<xref:System.IFormattable>インターフェイス。 これを呼び出す場合、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>そのインターフェイスのメソッド。 それ以外の場合、既定値を呼び出す<xref:System.Object.ToString%2A?displayProperty=nameWithType>基になるオブジェクトのメソッド。 次のコードは、このパターンを示しています。  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。 その<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>実装は、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定します ("B"の"O"のバイナリに 8 進数、および 16 進数の"H") および書式設定、`arg`パラメーター適切にします。 の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装、1 つが存在する場合またはそのパラメーターのない`ToString`メソッド、1 つでない場合。 `arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 渡すことによってカスタムの書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例を示します。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
      </Docs>
    </Member>
  </Members>
</Type>