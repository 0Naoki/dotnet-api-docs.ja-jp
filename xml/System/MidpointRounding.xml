<Type Name="MidpointRounding" FullName="System.MidpointRounding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9926ce630a6274a8d0961d8731a1aaab35eb083c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum MidpointRounding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MidpointRounding extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.MidpointRounding" />
  <TypeSignature Language="VB.NET" Value="Public Enum MidpointRounding" />
  <TypeSignature Language="C++ CLI" Value="public enum class MidpointRounding" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b817d-101">数値の丸め処理を行うメソッドで、2 つの数値の中間に位置する数値を処理する方法を指定します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b817d-101">Specifies how mathematical rounding methods should process a number that is midway between two numbers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b817d-102">使用して<xref:System.MidpointRounding>の適切なオーバー ロードを持つ<xref:System.Math.Round%2A?displayProperty=nameWithType>丸め処理の詳細に制御を提供します。</span><span class="sxs-lookup"><span data-stu-id="b817d-102">Use <xref:System.MidpointRounding> with appropriate overloads of <xref:System.Math.Round%2A?displayProperty=nameWithType> to provide more control of the rounding process.</span></span>  
  
 <span data-ttu-id="b817d-103">丸め操作は、暗黙的または指定された有効桁数を持つ;、元の数を受け取ります有効桁数に 1 を加えた; にある次の桁を調べます元の番号として同じ有効桁数を持つ最も近い数を返します。</span><span class="sxs-lookup"><span data-stu-id="b817d-103">A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number.</span></span> <span data-ttu-id="b817d-104">、正の数値の場合は 0 ~ 4 では、次の桁に最も近いを負の無限大方向です。</span><span class="sxs-lookup"><span data-stu-id="b817d-104">For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity.</span></span> <span data-ttu-id="b817d-105">次の桁が 6 ~ 9 の場合は、最も近い値は正の無限大方向です。</span><span class="sxs-lookup"><span data-stu-id="b817d-105">If the next digit is from 6 through 9, the nearest number is toward positive infinity.</span></span> <span data-ttu-id="b817d-106">負の数値の場合は 0 ~ 4 では、次の桁に最も近い数を正の無限大に向かってです。</span><span class="sxs-lookup"><span data-stu-id="b817d-106">For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity.</span></span> <span data-ttu-id="b817d-107">次の桁が 6 ~ 9 の場合は、最も近い数値が負の無限大方向です。</span><span class="sxs-lookup"><span data-stu-id="b817d-107">If the next digit is from 6 through 9, the nearest number is toward negative infinity.</span></span>  
  
 <span data-ttu-id="b817d-108">以前の場合、<xref:System.MidpointRounding>列挙型では、丸め処理の結果には影響しません。</span><span class="sxs-lookup"><span data-stu-id="b817d-108">In the previous cases, the <xref:System.MidpointRounding> enumeration does not affect the result of the rounding operation.</span></span> <span data-ttu-id="b817d-109">ただし場合は、[次へ] が 5、2 つの起こり得る結果の中間にあるすべての残りの桁がゼロまたは残りの数字がない、最も近い値があいまいです。</span><span class="sxs-lookup"><span data-stu-id="b817d-109">However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous.</span></span> <span data-ttu-id="b817d-110">ここで、<xref:System.MidpointRounding>列挙体を使用すると、丸め処理がゼロまたは最も近い偶数から最も近い値を返すかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="b817d-110">In this case, the <xref:System.MidpointRounding> enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.</span></span>  
  
 <span data-ttu-id="b817d-111">次の表の値と組み合わせて、いくつか負または正の数値を丸めた結果を示して<xref:System.MidpointRounding>です。</span><span class="sxs-lookup"><span data-stu-id="b817d-111">The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of <xref:System.MidpointRounding>.</span></span> <span data-ttu-id="b817d-112">数値を丸めるに使用される精度とは 0 で、整数部の桁数に影響を与える、丸め処理後の数を意味します。</span><span class="sxs-lookup"><span data-stu-id="b817d-112">The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation.</span></span> <span data-ttu-id="b817d-113">たとえば、数値-2.5 の場合、小数点後の数字は 5 です。</span><span class="sxs-lookup"><span data-stu-id="b817d-113">For example, for the number -2.5, the digit after the decimal point is 5.</span></span> <span data-ttu-id="b817d-114">その数字に中間点があるために、使用できます、<xref:System.MidpointRounding>丸め処理の結果を決定する値。</span><span class="sxs-lookup"><span data-stu-id="b817d-114">Because that digit is the midpoint, you can use a <xref:System.MidpointRounding> value to determine the result of rounding.</span></span> <span data-ttu-id="b817d-115">AwayFromZero が指定されている場合、最も近い有効桁数がゼロから遠い方の数 0 になっているために、-3 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b817d-115">If AwayFromZero is specified, -3 is returned because it is the nearest number away from zero with a precision of zero.</span></span> <span data-ttu-id="b817d-116">ToEven が指定されている場合は、最も近い偶数の有効桁数が 0 になっているため-2 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b817d-116">If ToEven is specified, -2 is returned because it is the nearest even number with a precision of zero.</span></span>  
  
|<span data-ttu-id="b817d-117">元の番号</span><span class="sxs-lookup"><span data-stu-id="b817d-117">Original number</span></span>|<span data-ttu-id="b817d-118">AwayFromZero</span><span class="sxs-lookup"><span data-stu-id="b817d-118">AwayFromZero</span></span>|<span data-ttu-id="b817d-119">ToEven</span><span class="sxs-lookup"><span data-stu-id="b817d-119">ToEven</span></span>|  
|---------------------|------------------|------------|  
|<span data-ttu-id="b817d-120">3.5</span><span class="sxs-lookup"><span data-stu-id="b817d-120">3.5</span></span>|<span data-ttu-id="b817d-121">4</span><span class="sxs-lookup"><span data-stu-id="b817d-121">4</span></span>|<span data-ttu-id="b817d-122">4</span><span class="sxs-lookup"><span data-stu-id="b817d-122">4</span></span>|  
|<span data-ttu-id="b817d-123">2.8</span><span class="sxs-lookup"><span data-stu-id="b817d-123">2.8</span></span>|<span data-ttu-id="b817d-124">3</span><span class="sxs-lookup"><span data-stu-id="b817d-124">3</span></span>|<span data-ttu-id="b817d-125">3</span><span class="sxs-lookup"><span data-stu-id="b817d-125">3</span></span>|  
|<span data-ttu-id="b817d-126">2.5</span><span class="sxs-lookup"><span data-stu-id="b817d-126">2.5</span></span>|<span data-ttu-id="b817d-127">3</span><span class="sxs-lookup"><span data-stu-id="b817d-127">3</span></span>|<span data-ttu-id="b817d-128">2</span><span class="sxs-lookup"><span data-stu-id="b817d-128">2</span></span>|  
|<span data-ttu-id="b817d-129">2.1</span><span class="sxs-lookup"><span data-stu-id="b817d-129">2.1</span></span>|<span data-ttu-id="b817d-130">2</span><span class="sxs-lookup"><span data-stu-id="b817d-130">2</span></span>|<span data-ttu-id="b817d-131">2</span><span class="sxs-lookup"><span data-stu-id="b817d-131">2</span></span>|  
|<span data-ttu-id="b817d-132">-2.1</span><span class="sxs-lookup"><span data-stu-id="b817d-132">-2.1</span></span>|<span data-ttu-id="b817d-133">-2</span><span class="sxs-lookup"><span data-stu-id="b817d-133">-2</span></span>|<span data-ttu-id="b817d-134">-2</span><span class="sxs-lookup"><span data-stu-id="b817d-134">-2</span></span>|  
|<span data-ttu-id="b817d-135">-2.5</span><span class="sxs-lookup"><span data-stu-id="b817d-135">-2.5</span></span>|<span data-ttu-id="b817d-136">-3</span><span class="sxs-lookup"><span data-stu-id="b817d-136">-3</span></span>|<span data-ttu-id="b817d-137">-2</span><span class="sxs-lookup"><span data-stu-id="b817d-137">-2</span></span>|  
|<span data-ttu-id="b817d-138">-2.8</span><span class="sxs-lookup"><span data-stu-id="b817d-138">-2.8</span></span>|<span data-ttu-id="b817d-139">-3</span><span class="sxs-lookup"><span data-stu-id="b817d-139">-3</span></span>|<span data-ttu-id="b817d-140">-3</span><span class="sxs-lookup"><span data-stu-id="b817d-140">-3</span></span>|  
|<span data-ttu-id="b817d-141">-3.5</span><span class="sxs-lookup"><span data-stu-id="b817d-141">-3.5</span></span>|<span data-ttu-id="b817d-142">-4</span><span class="sxs-lookup"><span data-stu-id="b817d-142">-4</span></span>|<span data-ttu-id="b817d-143">-4</span><span class="sxs-lookup"><span data-stu-id="b817d-143">-4</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="b817d-144">次のコード例を示しています、<xref:System.Math.Round%2A>メソッドと組み合わせて、<xref:System.MidpointRounding.ToEven>列挙します。</span><span class="sxs-lookup"><span data-stu-id="b817d-144">The following code example demonstrates the <xref:System.Math.Round%2A> method in conjunction with the <xref:System.MidpointRounding.ToEven> enumeration.</span></span>  
  
 [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]
 [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]
 [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AwayFromZero">
      <MemberSignature Language="C#" Value="AwayFromZero" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.MidpointRounding AwayFromZero = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.MidpointRounding.AwayFromZero" />
      <MemberSignature Language="VB.NET" Value="AwayFromZero" />
      <MemberSignature Language="C++ CLI" Value="AwayFromZero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MidpointRounding</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="b817d-145">数値が 2 つの数値の中間に位置するときに、ゼロから遠い方の近似値に丸められます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b817d-145">When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ToEven">
      <MemberSignature Language="C#" Value="ToEven" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.MidpointRounding ToEven = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.MidpointRounding.ToEven" />
      <MemberSignature Language="VB.NET" Value="ToEven" />
      <MemberSignature Language="C++ CLI" Value="ToEven" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MidpointRounding</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="b817d-146">数値が 2 つの数値の中間に位置するときに、最も近い偶数方向に丸められます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b817d-146">When a number is halfway between two others, it is rounded toward the nearest even number.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>