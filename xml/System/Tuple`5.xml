<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`5.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52bd6fcdfbecc0ab95c64d6c8c2550070fd64052d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bd6fcdfbecc0ab95c64d6c8c2550070fd64052d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>The type of the tuple's first component.</source>
          <target state="translated">組の 1 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>The type of the tuple's second component.</source>
          <target state="translated">組の 2 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>The type of the tuple's third component.</source>
          <target state="translated">組の 3 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">組の 4 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">組の 5 番目のコンポーネントの型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Tuple`5">
          <source>Represents a 5-tuple, or quintuple.</source>
          <target state="translated">5つ 組、すなわちクインチュープルを表します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">組は、特定の数と一連の値を持つデータ構造です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> class represents a 5-tuple, or quintuple, which is a tuple that has five components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>クラスを表します。 5 組、または 5 倍、5 つのコンポーネントが含まれる組です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> object by calling either the <ph id="ph2">&lt;xref:System.Tuple%605.%23ctor%2A&gt;</ph> constructor or the static <ph id="ph3">&lt;xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">インスタンス化することができます、<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>を呼び出して、オブジェクト、<ph id="ph2">&lt;xref:System.Tuple%605.%23ctor%2A&gt;</ph>コンス トラクターまたは静的な<ph id="ph3">&lt;xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>You can retrieve the value of the tuple's components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%605.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%605.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%605.Item4%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Tuple%605.Item5%2A&gt;</ph> instance properties.</source>
          <target state="translated">組のコンポーネントの値を取得するには、読み取り専用を使用して<ph id="ph1">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Tuple%605.Item2%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Tuple%605.Item3%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Tuple%605.Item4%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Tuple%605.Item5%2A&gt;</ph>インスタンス プロパティです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">組は、4 つの方法でよく使用されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>To represent a single set of data.</source>
          <target state="translated">単一のデータのセットを表します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">たとえば、組は、データベースのレコードを表すことができ、そのコンポーネントは、レコードの個別のフィールドを表すことができます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">簡単にアクセスしたり、操作、データ セットを提供します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects that contain the names of running backs in American football, the number of games in which they played, and the number of carries, total yards gained, and touchdowns scored during those games.</source>
          <target state="translated">次の例の配列を定義する<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>番号で、再生、ゲームや、実行の数の合計、得られたヤード American football では、実行中の名前を格納するオブジェクトとタッチダウンが、これらのゲーム中にスコア付けします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>The array is passed to the <ph id="ph1">`ComputeStatistics`</ph> method, which calculates each running back's number of carries per game, average yards per game, average yards per carry, and average number of touchdowns per attempt.</source>
          <target state="translated">渡されたが、配列、<ph id="ph1">`ComputeStatistics`</ph>メソッドで、各実行バックのゲームの平均ヤード、キャリーごとのゲーム、平均メートル単位あたりの実行の数とタッチダウン接続試行ごとの平均数を計算します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">使用せず、メソッドから複数の値を返す<ph id="ph1">`out`</ph>パラメーター (c#) または<ph id="ph2">`ByRef`</ph>パラメーター (Visual Basic の場合)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>For example, the previous example returns its computed statistics, along with the name of the player, in an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects.</source>
          <target state="translated">たとえば、前の例は、の配列で、player の名前と共に、計算された統計情報を返します<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">メソッドに渡される複数の値、1 つのパラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドには、スレッドが起動時に実行される方法を 1 つの値を提供できる 1 つのパラメーターです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`5">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> object as the method argument, you can supply the thread’s startup routine with five items of data.</source>
          <target state="translated">指定した場合、<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>オブジェクト、メソッド引数として、データの 5 つの項目を含む、スレッドのスタートアップ ルーチンを指定することができます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">組の 1 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">組の 2 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">組の 3 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">組の 4 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">組の 5 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 5-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated">静的なを使用することもできます。<ph id="ph1">&lt;xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType&gt;</ph>メソッドを明示的にそのコンポーネントの種類を指定せずに、5 タプル オブジェクトをインスタンス化します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 5-tuple whose first component is of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and its remaining four components are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">次の例では、 <ph id="ph1">&lt;xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=nameWithType&gt;</ph> 5 組の最初のコンポーネントは、型のインスタンスを作成するメソッド<ph id="ph2">&lt;xref:System.String&gt;</ph>され、残りの 4 つのコンポーネントの型<ph id="ph3">&lt;xref:System.Int32&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%605.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">これは、次の呼び出しに、<ph id="ph1">&lt;xref:System.Tuple%605.%23ctor%2A&gt;</ph>クラスのコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">このインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のインスタンスが指定したオブジェクトと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance under the following conditions:</source>
          <target state="translated"><ph id="ph1">`obj`</ph>パラメーターは、次の条件下で現在のインスタンスと等しいと見なされます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>Its five components are of the same types as the current instance.</source>
          <target state="translated">5 つのコンポーネントでは、現在のインスタンスと同じ型です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>Its five components are equal to those of the current instance.</source>
          <target state="translated">5 つのコンポーネントは、現在のインスタンスのものと同じです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>Equality is determined by the default object equality comparer for each component.</source>
          <target state="translated">等しいかどうかは、各コンポーネントの既定のオブジェクトの等値比較子によって判断されます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>The following example defines an array of 5-tuple objects that contain data about the temperatures of patients in two test groups.</source>
          <target state="translated">次の例では、2 つのテスト グループの患者の温度に関するデータを含む 5 組オブジェクトの配列を定義します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>The first component of the array provides the number of the test group, and the second through fifth components provide the temperatures of a patient at hourly intervals.</source>
          <target state="translated">配列の最初のコンポーネントがテスト グループの数を提供し、2 番目 5 番目のコンポーネントからが 1 時間ごとに、患者の温度を提供します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%605.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method is called to compare every <ph id="ph2">&lt;xref:System.Tuple%605&gt;</ph> object with every other <ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>を比較するメソッドが呼び出された各<ph id="ph2">&lt;xref:System.Tuple%605&gt;</ph>以外のすべてのオブジェクト<ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.Equals(System.Object)">
          <source>The output illustrates that the <ph id="ph1">&lt;xref:System.Tuple%605.Equals%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> only when all five components of the <ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph> objects have equal values.</source>
          <target state="translated">出力はことを示しています、<ph id="ph1">&lt;xref:System.Tuple%605.Equals%2A&gt;</ph>メソッドを返します。<ph id="ph2">`true`</ph>される場合にのみの 5 つのコンポーネントをすべて、<ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph>オブジェクトが同じ値を持ちます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.GetHashCode">
          <source>Returns the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's first component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 1 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's first component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 1 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%605&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%605&gt;</ph>オブジェクト、および、によって返される配列から最初の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item1">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population.</source>
          <target state="translated">次の例の配列を定義する<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>コンポーネントが含まれるが United States、1990 および 2000 で作成が、この 10 年間でその population の変更およびその人口の変化率の状態の名前を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item1">
          <source>It then iterates through the array and displays the value of each component in a tuple.</source>
          <target state="translated">配列を反復処理し、組内の各コンポーネントの値を表示します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's second component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 2 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's second component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 2 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>オブジェクト、およびによって返される配列から 2 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item2">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population.</source>
          <target state="translated">次の例の配列を定義する<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>コンポーネントが含まれるが United States、1990 および 2000 で作成が、この 10 年間でその population の変更およびその人口の変化率の状態の名前を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item2">
          <source>It then iterates through the array and displays the value of each component in a tuple.</source>
          <target state="translated">配列を反復処理し、組内の各コンポーネントの値を表示します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's third component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 3 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's third component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 3 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>オブジェクト、およびによって返される配列から 2 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item3">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population.</source>
          <target state="translated">次の例の配列を定義する<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>コンポーネントが含まれるが United States、1990 および 2000 で作成が、この 10 年間でその population の変更およびその人口の変化率の状態の名前を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item3">
          <source>It then iterates through the array and displays the value of each component in a tuple.</source>
          <target state="translated">配列を反復処理し、組内の各コンポーネントの値を表示します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's fourth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 4 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's fourth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 4 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>オブジェクト、およびによって返される配列から 2 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item4">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population.</source>
          <target state="translated">次の例の配列を定義する<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>コンポーネントが含まれるが United States、1990 および 2000 で作成が、この 10 年間でその population の変更およびその人口の変化率の状態の名前を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item4">
          <source>It then iterates through the array and displays the value of each component in a tuple.</source>
          <target state="translated">配列を反復処理し、組内の各コンポーネントの値を表示します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's fifth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 5 番目のコンポーネントの値を取得します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object's fifth component.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの 5 番目のコンポーネントの値。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">型を動的に決定することができます、<ph id="ph1">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph>コンポーネントを 2 つの方法のいずれかで。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph> property.</source>
          <target state="translated">呼び出して、<ph id="ph1">`GetType`</ph>メソッドによって返される値を<ph id="ph2">&lt;xref:System.Tuple%604.Item2%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>オブジェクト、およびによって返される配列から 2 番目の要素を取得するその<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item5">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects whose components contain the name of a state in the United Dates, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population.</source>
          <target state="translated">次の例の配列を定義する<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>コンポーネントが含まれる米国の日付、1990 および 2000 で作成が、この 10 年間でその population の変更およびその人口の割合の変化に状態の名前を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.Item5">
          <source>It then iterates through the array and displays the value of each component in a tuple.</source>
          <target state="translated">配列を反復処理し、組内の各コンポーネントの値を表示します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">現在のインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">比較用のカスタムの規則を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">指定された比較子を使用して現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">並べ替え順序における、このインスタンスと <ph id="ph1">&lt;paramref name="other" /&gt;</ph> の相対位置を示す符号付き整数値 (次の表を参照)。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>説明</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 負の整数</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの位置が <ph id="ph3">&lt;paramref name="other" /&gt;</ph> よりも前です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスと <ph id="ph3">&lt;paramref name="other" /&gt;</ph> の位置は、並べ替え順序において同じです。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 正の整数</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの位置は <ph id="ph3">&lt;paramref name="other" /&gt;</ph> よりも後ろです。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">コレクションを並べ替えることによって最もよく呼び出されますが、このメソッドは、直接呼び出すことができるなどのメソッドを<ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph>パラメーター コレクションのメンバーの順序付けをします。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">たとえば、メソッドによって呼び出されます、<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph>のメソッド、<ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>を使用してインスタンス化されるオブジェクト、<ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%605.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph>並べ替え操作で使用するためのメソッドです。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">これはありません、比較の主な目的は 2 つのオブジェクトが等しいかどうかを判断するときに使用する必要があります。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%605.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method.</source>
          <target state="translated">2 つのオブジェクトが等しいかどうかを判断するを呼び出して、<ph id="ph1">&lt;xref:System.Tuple%605.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects that contain career statistical data for running backs in American professional football.</source>
          <target state="translated">次の例の配列を作成する<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>American プロ フットボールでは、実行の統計データを格納するオブジェクト。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The 5-tuple's components consist of the player's name, the number of games in which he played, the number of carries or attempts, the total number of yards gained, and the number of touchdowns scored.</source>
          <target state="translated">5 組のコンポーネントは、プレーヤーの名前、ゲームの数で構成されているプレイする、または、試行の数をクリックし、ヤード数の合計が得られたタッチダウンの数します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <ph id="ph1">&lt;xref:System.Tuple%605.ToString%2A&gt;</ph> to display each tuple in sorted order.</source>
          <target state="translated">例では、並べ替えられていない配列内の各組のコンポーネントを表示、配列を並べ替え、を呼び出して<ph id="ph1">&lt;xref:System.Tuple%605.ToString%2A&gt;</ph>を並べ替え順序でそれぞれの組を表示します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To sort the array, the example defines a generic <ph id="ph1">`YardsGained`</ph> class that implements the <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> interface and sorts the <ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph> objects in descending order by the value of their fourth component (yards gained) rather than by their first component.</source>
          <target state="translated">ジェネリック型を定義している例では、並べ替えるには、配列、<ph id="ph1">`YardsGained`</ph>を実装するクラス、<ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph>インターフェイスと並べ替え、<ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph>オブジェクトの最初のコンポーネントではなく、4 番目のコンポーネント (ヤード得られた) の値では、降順にします。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%605.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">例では、直接呼び出しませんなお、<ph id="ph1">&lt;xref:System.Tuple%605.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method for each element in the array.</source>
          <target state="translated">このメソッドはによって暗黙的に呼び出されます、<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>配列内の各要素のメソッドです。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトではありません。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">このインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">2 つのオブジェクトが等しいかどうかの評価に使用するメソッドを定義するオブジェクト。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">指定された比較メソッドに基づいて、現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のインスタンスが指定したオブジェクトと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%605&gt;</ph> object whose components are of the same types as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>実装が呼び出される場合にのみ<ph id="ph2">`other`</ph>は<ph id="ph3">`null`</ph>、キャスト (c#) またはに (Visual Basic) の変換が正常にすることができるかどうかと、<ph id="ph4">&lt;xref:System.Tuple%605&gt;</ph>コンポーネントが含まれるは、現在のインスタンスと同じ型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%605.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph>メソッドの最初のパス、<ph id="ph2">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph>の値、<ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph>と比較するオブジェクト、<ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%605.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph> objects.</source>
          <target state="translated">このメソッドの呼び出しが返された場合<ph id="ph1">`true`</ph>、メソッドが再度呼び出され、渡された、 <ph id="ph2">&lt;xref:System.Tuple%605.Item2%2A&gt;</ph> 、2 つの値<ph id="ph3">&lt;xref:System.Tuple%605&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of <ph id="ph2">`Item`</ph> values, or the two <ph id="ph3">&lt;xref:System.Tuple%605.Item5%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">これは、メソッド呼び出しから戻るまで続きます<ph id="ph1">`false`</ph>の特定のペアを比較するときに<ph id="ph2">`Item`</ph>値、または 2 つ<ph id="ph3">&lt;xref:System.Tuple%605.Item5%2A&gt;</ph>値、メソッドに渡されます。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The following example defines a <ph id="ph1">`DoubleComparer`</ph> class that implements the <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> interface.</source>
          <target state="translated">次の例では、<ph id="ph1">`DoubleComparer`</ph> インターフェイスを実装する <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> クラスを定義しています。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The example instantiates two <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects by using a random number generator to populate their second through fifth components, casts the first instance to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface, and then uses a <ph id="ph3">`DoubleComparer`</ph> object to test the two <ph id="ph4">&lt;xref:System.Tuple%605&gt;</ph> objects for approximate equality.</source>
          <target state="translated">例では、2 つのインスタンスを作成<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>キャストに最初のインスタンスが 2 番目 5 番目のコンポーネントからを設定する乱数ジェネレーターを使用して、オブジェクト、<ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>インターフェイス、および、使用、<ph id="ph3">`DoubleComparer`</ph>オブジェクト、2 つのテストを<ph id="ph4">&lt;xref:System.Tuple%605&gt;</ph>オブジェクトのおおよその等価性。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトのハッシュ コードを計算する <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> メソッドを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">指定した計算メソッドを使用して、現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトのハッシュ コードを計算します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">メソッドは、単にへの呼び出しをラップ、<ph id="ph1">`comparer`</ph>オブジェクトの<ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">2 つのハッシュ コードの計算に使用するアルゴリズムが同じハッシュ コードを返す必要があります<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>同等であると見なされるオブジェクト。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">現在のインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトと指定したオブジェクトを比較して、現在のオブジェクトが、並べ替え順序において、指定したオブジェクトの前後または同じ位置のいずれにあるかを示す整数を返します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">並べ替え順序における、このインスタンスと <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> の相対位置を示す符号付き整数値 (次の表を参照)。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>説明</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 負の整数</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの位置が <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> よりも前です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスと <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> の位置は、並べ替え順序において同じです。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 正の整数</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの位置は <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> よりも後ろです。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%605&gt;</ph> class.</source>
          <target state="translated">このメソッドを提供、<ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph>の実装、<ph id="ph2">&lt;xref:System.Tuple%605&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">コレクションの並べ替えの既定のオーバー ロードによって最もよく呼び出さは直接メソッドを呼び出すことができます、メソッドなど<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>コレクションのメンバーの順序付けをします。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%605.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605.System%23IComparable%23CompareTo%2A&gt;</ph>並べ替え操作で使用するためのメソッドです。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">これはありません、比較の主な目的は 2 つのオブジェクトが等しいかどうかを判断するときに使用する必要があります。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%605.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">2 つのオブジェクトが等しいかどうかを判断するを呼び出して、<ph id="ph1">&lt;xref:System.Tuple%605.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%605.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method uses the default object  comparer to compare each component.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph>メソッドでは、既定のオブジェクトの比較子を使用して、各コンポーネントを比較します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> objects that contain career statistics for running backs in American professional football.</source>
          <target state="translated">次の例の配列を作成する<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>American プロ フットボールでは、実行の統計を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>The five components consist of the player's name, the number of games in which he played, the number of carries or attempts, the total number of yards gained, and the number of touchdowns scored.</source>
          <target state="translated">5 つのコンポーネントは、プレーヤーの名前、ゲームの番号で構成されているプレイする、または、試行の数をクリックし、ヤード数の合計が得られたタッチダウンの数します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <ph id="ph1">&lt;xref:System.Tuple%605.ToString%2A&gt;</ph> to display each tuple in sorted order.</source>
          <target state="translated">例では、並べ替えられていない配列内の各組のコンポーネントを表示、配列を並べ替え、を呼び出して<ph id="ph1">&lt;xref:System.Tuple%605.ToString%2A&gt;</ph>を並べ替え順序でそれぞれの組を表示します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by name, which is the first component.</source>
          <target state="translated">出力は、最初のコンポーネントは、名前で配列が並べ替えられていることを示します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%605.System%23IComparable%23CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">例では、直接呼び出しませんなお、<ph id="ph1">&lt;xref:System.Tuple%605.System%23IComparable%23CompareTo%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">このメソッドはによって暗黙的に呼び出されます、<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph>配列内の各要素のメソッドです。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトではありません。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 要素のインデックス。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 to 4.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> は 0 から 4 までです。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 要素の値を取得します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">指定した位置にある <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 要素の値。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%605.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph>プロパティは、明示的なインターフェイス実装です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">これを呼び出すには、キャストまたは変換する必要があります、<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>オブジェクトを<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>インターフェイス オブジェクト。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than 4.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 より小さいか、4 を超えています。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> にある要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
          <source>5, the number of elements in a <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクト内の要素数、5。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%605.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%605.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph>プロパティは、明示的なインターフェイス実装です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">これを呼び出すには、キャストまたは変換する必要があります、<ph id="ph1">&lt;xref:System.Tuple%605&gt;</ph>オブジェクトを<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>インターフェイス オブジェクト。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> instance.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> インスタンスの値を表す文字列を返します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Tuple`5.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> object.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Tuple`5" /&gt;</ph> オブジェクトの文字列表現。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5`</ph>), where <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, and <ph id="ph2">`Item5`</ph> represent the values of the <ph id="ph3">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%605.Item2%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%605.Item3%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%605.Item4%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%605.Item5%2A&gt;</ph> properties, respectively.</source>
          <target state="translated">このメソッドによって返される文字列の形式は (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>、 <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>、 <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>、 <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>、 <ph id="ph1">`Item5`</ph>) ここで、 <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>、 <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>、 <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>、 <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>、および<ph id="ph2">`Item5`</ph>の値を表す、 <ph id="ph3">&lt;xref:System.Tuple%605.Item1%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Tuple%605.Item2%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Tuple%605.Item3%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Tuple%605.Item4%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Tuple%605.Item5%2A&gt;</ph>プロパティ、それぞれします。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">プロパティ値のいずれかが場合<ph id="ph1">`null`</ph>、として表されます<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.ToString">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.Tuple%605.ToString%2A&gt;</ph> method.</source>
          <target state="translated">次の例を示しています、<ph id="ph1">&lt;xref:System.Tuple%605.ToString%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`5.ToString">
          <source>It displays an array of 5-tuple objects that contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the annual rate of population change.</source>
          <target state="translated">米国の州をその人口 1990 年と 2000 では、状態の名前を格納する 5 組オブジェクトの配列が表示されます、population の変更でこの 10 年間の期間と、年間 population の変更の速度です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>