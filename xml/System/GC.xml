<Type Name="GC" FullName="System.GC">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc70883d1f178e5912deca211e366c1112bd5e7e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39926583" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class GC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GC extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.GC" />
  <TypeSignature Language="VB.NET" Value="Public Class GC" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC abstract sealed" />
  <TypeSignature Language="F#" Value="type GC = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="2f41d-101">未使用メモリを自動的に収集するサービスであるシステム ガベージ コレクターを制御します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2f41d-101">Controls the system garbage collector, a service that automatically reclaims unused memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-102">ガベージ コレクターは、割り当てとマネージ メモリの解放を制御する共通言語ランタイム コンポーネントです。</span><span class="sxs-lookup"><span data-stu-id="2f41d-102">The garbage collector is a common language runtime component that controls the allocation and release of managed memory.</span></span> <span data-ttu-id="2f41d-103">このクラスのメソッドは、オブジェクトとそのオブジェクトによって割り当てられたリソースがリリースされたときに、ガベージ コレクションが実行されるときに影響します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-103">The methods in this class influence when garbage collection is performed on an object and when resources allocated by an object are released.</span></span> <span data-ttu-id="2f41d-104">このクラスのプロパティは、システムおよび年齢のカテゴリ、または生成、オブジェクトに割り当てられたメモリの使用可能なメモリの合計金額についての情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-104">Properties in this class provide information about the total amount of memory available in the system and the age category, or generation, of memory allocated to an object.</span></span>  
  
 <span data-ttu-id="2f41d-105">ガベージ コレクターは、追跡し、マネージ メモリに割り当てられたオブジェクトを解放します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-105">The garbage collector tracks and reclaims objects allocated in managed memory.</span></span> <span data-ttu-id="2f41d-106">定期的に、ガベージ コレクターを有効な参照がないオブジェクトに割り当てられたメモリを解放するガベージ コレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-106">Periodically, the garbage collector performs garbage collection to reclaim memory allocated to objects for which there are no valid references.</span></span> <span data-ttu-id="2f41d-107">ガベージ コレクションは、利用可能なメモリを使用してメモリの要求を満たすことができないときに自動的に行われます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-107">Garbage collection happens automatically when a request for memory cannot be satisfied using available free memory.</span></span> <span data-ttu-id="2f41d-108">また、アプリケーションが使用してガベージ コレクションを強制することができます、<xref:System.GC.Collect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-108">Alternatively, an application can force garbage collection using the <xref:System.GC.Collect%2A> method.</span></span>  
  
 <span data-ttu-id="2f41d-109">ガベージ コレクションは、次の手順で構成されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-109">Garbage collection consists of the following steps:</span></span>  
  
1.  <span data-ttu-id="2f41d-110">ガベージ コレクターは、マネージ コードで参照されているマネージ オブジェクトを検索します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-110">The garbage collector searches for managed objects that are referenced in managed code.</span></span>  
  
2.  <span data-ttu-id="2f41d-111">ガベージ コレクターは、参照されていないオブジェクトの終了を試みます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-111">The garbage collector tries to finalize objects that are not referenced.</span></span>  
  
3.  <span data-ttu-id="2f41d-112">ガベージ コレクターは、参照されていないオブジェクトを解放し、そのメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-112">The garbage collector frees objects that are not referenced and reclaims their memory.</span></span>  
  
 <span data-ttu-id="2f41d-113">このトピックには、次のセクションがあります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-113">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="2f41d-114">[ガベージ コレクターとアンマネージ リソース](#unmanaged) </span><span class="sxs-lookup"><span data-stu-id="2f41d-114">[The garbage collector and unmanaged resources](#unmanaged) </span></span>  
 <span data-ttu-id="2f41d-115">[オブジェクトの世代と世代](#generations) </span><span class="sxs-lookup"><span data-stu-id="2f41d-115">[Object aging and generations](#generations) </span></span>  
 [<span data-ttu-id="2f41d-116">ガベージ コレクションを禁止しています</span><span class="sxs-lookup"><span data-stu-id="2f41d-116">Disallowing garbage collection</span></span>](#NoGCRegion)  
  
<a name="unmanaged"></a>   
## <a name="the-garbage-collector-and-unmanaged-resources"></a><span data-ttu-id="2f41d-117">ガベージ コレクターとアンマネージ リソース</span><span class="sxs-lookup"><span data-stu-id="2f41d-117">The garbage collector and unmanaged resources</span></span>  
 <span data-ttu-id="2f41d-118">マネージ コードで、オブジェクトへの 1 つまたは複数の参照を見つけた場合、ガベージ コレクター、コレクションの実行時オブジェクトは無料ではありません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-118">During a collection, the garbage collector will not free an object if it finds one or more references to the object in managed code.</span></span> <span data-ttu-id="2f41d-119">ただし、ガベージ コレクターは、アンマネージ コードからオブジェクトへの参照を認識しないと、これから明示的に禁止されていない限り、アンマネージ コード内だけで使用されているオブジェクトを解放することがあります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-119">However, the garbage collector does not recognize references to an object from unmanaged code, and might free objects that are being used exclusively in unmanaged code unless explicitly prevented from doing so.</span></span> <span data-ttu-id="2f41d-120"><xref:System.GC.KeepAlive%2A>メソッドは、ガベージ コレクターがアンマネージ コードでまだ使用されているオブジェクトを収集することを防止するメカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-120">The <xref:System.GC.KeepAlive%2A> method provides a mechanism that prevents the garbage collector from collecting objects that are still in use in unmanaged code.</span></span>  
  
 <span data-ttu-id="2f41d-121">マネージ メモリの割り当てとは別に、ガベージ コレクターの実装ではファイル ハンドルやデータベース接続などのオブジェクトによって保持されているリソースに関する情報は維持されません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-121">Aside from managed memory allocations, implementations of the garbage collector do not maintain information about resources held by an object, such as file handles or database connections.</span></span> <span data-ttu-id="2f41d-122">型は、型のインスタンスがクリアされる前にリリースする必要があるアンマネージ リソースを使用する場合、型はファイナライザーを実装できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-122">When a type uses unmanaged resources that must be released before instances of the type are reclaimed, the type can implement a finalizer.</span></span>  
  
 <span data-ttu-id="2f41d-123">ほとんどの場合、ファイナライザーをオーバーライドすることによって実装されます、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッドです。 ただし、c# または C++ で記述された型を実装のオーバーライドにするコンパイラが有効にするデストラクター<xref:System.Object.Finalize%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-123">In most cases, finalizers are implemented by overriding the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method; however, types written in C# or C++ implement destructors, which compilers turn into an override of <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2f41d-124">ほとんどの場合、オブジェクトに、ファイナライザーがある場合、ガベージ コレクターでそのオブジェクトを解放する前に、</span><span class="sxs-lookup"><span data-stu-id="2f41d-124">In most cases, if an object has a finalizer, the garbage collector calls it prior to freeing the object.</span></span> <span data-ttu-id="2f41d-125">ただし、ガベージ コレクターはすべての状況でファイナライザーを呼び出す必要はありません。たとえば、<xref:System.GC.SuppressFinalize%2A>メソッドが呼び出されることを明示的にオブジェクトのファイナライザーを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-125">However, the garbage collector is not required to call finalizers in all situations; for example, the <xref:System.GC.SuppressFinalize%2A> method explicitly prevents an object's finalizer from being called.</span></span> <span data-ttu-id="2f41d-126">また、ガベージ コレクターでは、特定のスレッドを使用して、オブジェクトの終了または相互に参照がガベージ コレクション用に使用できるオブジェクトのファイナライザーが呼び出されて、順序は保証する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-126">Also, the garbage collector is not required to use a specific thread to finalize objects, or guarantee the order in which finalizers are called for objects that reference each other but are otherwise available for garbage collection.</span></span>  
  
 <span data-ttu-id="2f41d-127">特定の時点でリソースを解放する必要があります場所では、クラスに実装できる、<xref:System.IDisposable>インターフェイスが含まれています、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>リソース管理とクリーンアップ タスクを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-127">In scenarios where resources must be released at a specific time, classes can implement the <xref:System.IDisposable> interface, which contains the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method that performs resource management and cleanup tasks.</span></span> <span data-ttu-id="2f41d-128">実装するクラス<xref:System.IDisposable.Dispose%2A>する必要がありますを指定、クラスのコントラクトの一部としてクラスのコンシューマーが、オブジェクトをクリーンアップするメソッドを呼び出す場合。</span><span class="sxs-lookup"><span data-stu-id="2f41d-128">Classes that implement <xref:System.IDisposable.Dispose%2A> must specify, as part of their class contract, if and when class consumers call the method to clean up the object.</span></span> <span data-ttu-id="2f41d-129">ガベージ コレクターは、既定では、呼び出しません、<xref:System.IDisposable.Dispose%2A>メソッドです。 ただし、の実装、<xref:System.IDisposable.Dispose%2A>メソッド呼び出すことができます、<xref:System.GC>ガベージ コレクターの終了処理の動作をカスタマイズするクラス。</span><span class="sxs-lookup"><span data-stu-id="2f41d-129">The garbage collector does not, by default, call the <xref:System.IDisposable.Dispose%2A> method; however, implementations of the <xref:System.IDisposable.Dispose%2A> method can call methods in the <xref:System.GC> class to customize the finalization behavior of the garbage collector.</span></span>  
  
 <span data-ttu-id="2f41d-130">オブジェクトのファイナライザーと dispose パターンの詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-130">For more information on object finalization and the dispose pattern, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
<a name="generations"></a>   
## <a name="object-aging-and-generations"></a><span data-ttu-id="2f41d-131">オブジェクトの世代と世代</span><span class="sxs-lookup"><span data-stu-id="2f41d-131">Object aging and generations</span></span>  
 <span data-ttu-id="2f41d-132">共通言語ランタイムのガベージ コレクターには、世代を使用してオブジェクトの世代がサポートしています。</span><span class="sxs-lookup"><span data-stu-id="2f41d-132">The garbage collector in the common language runtime supports object aging using generations.</span></span> <span data-ttu-id="2f41d-133">世代は、メモリ内のオブジェクトの相対的な経過時間の測定単位です。</span><span class="sxs-lookup"><span data-stu-id="2f41d-133">A generation is a unit of measure of the relative age of objects in memory.</span></span> <span data-ttu-id="2f41d-134">世代番号、またはオブジェクトの有効期間は、オブジェクトが属している世代を示します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-134">The generation number, or age, of an object indicates the generation to which an object belongs.</span></span> <span data-ttu-id="2f41d-135">最近作成されたオブジェクトは新しいジェネレーションの一部であるあり、アプリケーション ライフ サイクルの前半で作成されたオブジェクトのサイクルよりも低い世代番号になります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-135">Objects created more recently are part of newer generations, and have lower generation numbers than objects created earlier in the application life cycle.</span></span> <span data-ttu-id="2f41d-136">最新のジェネレーションのオブジェクトは、ジェネレーション 0 では。</span><span class="sxs-lookup"><span data-stu-id="2f41d-136">Objects in the most recent generation are in generation 0.</span></span> <span data-ttu-id="2f41d-137">ガベージ コレクターのこの実装では、オブジェクトの 3 つの世代、世代 0、1、および 2 をサポートします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-137">This implementation of the garbage collector supports three generations of objects, generations 0, 1, and 2.</span></span> <span data-ttu-id="2f41d-138">値を取得することができます、<xref:System.GC.MaxGeneration%2A>システムでサポートされている最大生成数を決定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="2f41d-138">You can retrieve the value of the <xref:System.GC.MaxGeneration%2A> property to determine the maximum generation number supported by the system.</span></span>  
  
 <span data-ttu-id="2f41d-139">オブジェクトの世代では、すべてのジェネレーションを評価するガベージ コレクターを必要とするのではなく、世代の特定のセットにガベージ コレクションの対象アプリケーションができます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-139">Object aging allows applications to target garbage collection at a specific set of generations rather than requiring the garbage collector to evaluate all generations.</span></span> <span data-ttu-id="2f41d-140">オーバー ロード、<xref:System.GC.Collect%2A>メソッドが含まれる、`generation`パラメーターを使用すると、最も古いジェネレーションのガベージ コレクションを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-140">Overloads of the <xref:System.GC.Collect%2A> method that include a `generation` parameter allow you to specify the oldest generation to be garbage collected.</span></span>  
  
<a name="NoGCRegion"></a>   
## <a name="disallowing-garbage-collection"></a><span data-ttu-id="2f41d-141">ガベージ コレクションを禁止しています</span><span class="sxs-lookup"><span data-stu-id="2f41d-141">Disallowing garbage collection</span></span>  
 <span data-ttu-id="2f41d-142">以降では、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]、ガベージ コレクターは、GC 領域待機時間モードなしでガベージ コレクションはパフォーマンスに悪影響をアプリのクリティカル パスの実行中に使用できるをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="2f41d-142">Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the garbage collector supports a no GC region latency mode that can be used during the execution of critical paths in which garbage collection can adversely affect an app's performance.</span></span> <span data-ttu-id="2f41d-143">GC 領域の無待機モードでは、競合することがなく、ガベージ コレクターから割り当て可能なメモリの容量を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-143">The no GC region latency mode requires that you specify an amount of memory that can be allocated without interference from the garbage collector.</span></span> <span data-ttu-id="2f41d-144">ランタイムでは、そのメモリを割り当てることができる場合、ランタイムは実行しませんガベージ コレクションのクリティカル パスにコードの実行中。</span><span class="sxs-lookup"><span data-stu-id="2f41d-144">If the runtime can allocate that memory, the runtime will not perform a garbage collection while code in the critical path is executing.</span></span>  
  
 <span data-ttu-id="2f41d-145">オーバー ロードのいずれかを呼び出していない GC 領域のクリティカル パスの先頭を定義する、<xref:System.GC.TryStartNoGCRegion%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-145">You define the beginning of the critical path of the no GC region by calling one of the overloads of the <xref:System.GC.TryStartNoGCRegion%2A>.</span></span> <span data-ttu-id="2f41d-146">呼び出して、クリティカル パスの末尾を指定する、<xref:System.GC.EndNoGCRegion%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-146">You specify the end of its critical path by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 <span data-ttu-id="2f41d-147">呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-147">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="2f41d-148">つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-148">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-149">次の例では、いくつかの GC メソッドを使用して、生成および使用されていないオブジェクトのブロックのメモリ情報を取得し、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-149">The following example uses several GC methods to get generation and memory information about a block of unused objects and print it to the console.</span></span> <span data-ttu-id="2f41d-150">使用されていないオブジェクトを収集し、し、結果として得られるメモリの合計が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-150">The unused objects are then collected, and the resulting memory totals are displayed.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.GCSettings" />
  </Docs>
  <Members>
    <Member MemberName="AddMemoryPressure">
      <MemberSignature Language="C#" Value="public static void AddMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AddMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member AddMemoryPressure : int64 -&gt; unit" Usage="System.GC.AddMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated">
          <span data-ttu-id="2f41d-151">割り当てられたアンマネージ メモリの増加量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-151">The incremental amount of unmanaged memory that has been allocated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-152">アンマネージ メモリが大規模に割り当てられたため、ガベージ コレクションをスケジュールするときに考慮する必要があることが、ランタイムに通知されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-152">Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-153">ガベージ コレクションのスケジュールを決定するには、ランタイムは考慮マネージ メモリの量が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-153">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="2f41d-154">小さなマネージ オブジェクトが大量のアンマネージ メモリを割り当てる場合、ランタイムはマネージ メモリだけを考慮し、したがってガベージ コレクションのスケジュールの緊急度を過小評価します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-154">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="2f41d-155"><xref:System.GC.AddMemoryPressure%2A>メソッドは、システム メモリにこの追加の負荷のランタイムを通知します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-155">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory.</span></span>  
  
 <span data-ttu-id="2f41d-156">最も簡単な使用パターン、マネージ オブジェクト コンス トラクターで、アンマネージ メモリの割り当てし、解放する、`Dispose`または`Finalize`メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-156">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="2f41d-157">呼び出す、<xref:System.GC.AddMemoryPressure%2A>アンマネージ メモリを割り当てた後にメソッドを呼び出すと、<xref:System.GC.RemoveMemoryPressure%2A>メソッドを解放するとします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-157">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="2f41d-158">場所、アンマネージ メモリの割り当てはマネージ オブジェクトの有効期間中に大幅に変更より複雑なシナリオで呼び出すことができます、<xref:System.GC.AddMemoryPressure%2A>と<xref:System.GC.RemoveMemoryPressure%2A>実行時に増分変更を通知するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-158">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f41d-159">追加する圧力の量だけを削除することを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-159">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="2f41d-160">そのために失敗するの長時間実行されるアプリケーションでシステムのパフォーマンスが低下することができます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-160">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-161">
            <paramref name="bytesAllocated" /> が 0 以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-161">
              <paramref name="bytesAllocated" /> is less than or equal to 0.</span>
          </span>
          <span data-ttu-id="2f41d-162">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-162">-or-</span>
          </span>
          <span data-ttu-id="2f41d-163">32 ビットのコンピューターで、<paramref name="bytesAllocated" /> の値が <see cref="F:System.Int32.MaxValue" /> の値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-163">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2f41d-164">ガベージ コレクションの優先順位を操作するときに、アンマネージ コードを呼び出す機能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-164">for the ability to call unmanaged code when manipulating garbage-collection priority.</span>
          </span>
          <span data-ttu-id="2f41d-165">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-165">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2f41d-166">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-166">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-167">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-167">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CancelFullGCNotification">
      <MemberSignature Language="C#" Value="public static void CancelFullGCNotification ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelFullGCNotification() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CancelFullGCNotification" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelFullGCNotification ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelFullGCNotification();" />
      <MemberSignature Language="F#" Value="static member CancelFullGCNotification : unit -&gt; unit" Usage="System.GC.CancelFullGCNotification " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-168">ガベージ コレクションの通知の登録をキャンセルします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-168">Cancels the registration of a garbage collection notification.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-169">このメソッドを使用して登録されたガベージ コレクションの通知をキャンセル、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-169">This method cancels a garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="2f41d-170">後続の呼び出しでパラメーター値のしきい値を調整する前にこのメソッドを呼び出す必要はありません、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-170">You do not have to call this method before adjusting threshold parameter values in subsequent calls to the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-171">次の例では、ガベージ コレクションの登録をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-171">The following example cancels a garbage collection registration.</span></span> <span data-ttu-id="2f41d-172">この例が示されている例の一部、[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)トピック。</span><span class="sxs-lookup"><span data-stu-id="2f41d-172">This example is part of a larger example provided for the [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#7](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#7)]
 [!code-csharp[GCNotification#7](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#7)]
 [!code-vb[GCNotification#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f41d-173">同時実行ガベージ コレクションが有効の場合、このメンバーは使用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-173">This member is not available when concurrent garbage collection is enabled.</span>
          </span>
          <span data-ttu-id="2f41d-174">同時実行ガベージ コレクションを無効にする方法については、[&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) 実行時設定をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-174">See the [&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) runtime setting for information about how to disable concurrent garbage collection.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="2f41d-175">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-175">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-176">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-176">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2f41d-177">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-177">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-178">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-178">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Collect">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-179">強制的にガベージ コレクションを行います。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-179">Forces garbage collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect();" />
      <MemberSignature Language="F#" Value="static member Collect : unit -&gt; unit" Usage="System.GC.Collect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-180">すべてのジェネレーションのガベージ コレクションを直ちに強制実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-180">Forces an immediate garbage collection of all generations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-181">このメソッドを使用して、アクセスできるすべてのメモリを解放しようとしてください。</span><span class="sxs-lookup"><span data-stu-id="2f41d-181">Use this method to try to reclaim all memory that is inaccessible.</span></span> <span data-ttu-id="2f41d-182">すべてのジェネレーションのブロッキング ガベージ コレクションが実行します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-182">It performs a blocking garbage collection of all generations.</span></span>  
  
 <span data-ttu-id="2f41d-183">コレクションはどのくらいの時間が長かった、メモリ内に関係なく、すべてのオブジェクトと見なされますただし、マネージ コードで参照されるオブジェクトは収集されません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-183">All objects, regardless of how long they have been in memory, are considered for collection; however, objects that are referenced in managed code are not collected.</span></span> <span data-ttu-id="2f41d-184">使用可能なメモリの最大量を再利用しようとするのにシステムを強制するのにには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-184">Use this method to force the system to try to reclaim the maximum amount of available memory.</span></span>  
  
 <span data-ttu-id="2f41d-185">以降では、 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]、大きなオブジェクト ヒープ (LOH) を設定して圧縮することができます、<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>プロパティを<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>呼び出す前に、<xref:System.GC.Collect%2A>メソッドでは、次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-185">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], you can compact the large object heap (LOH) by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-186">次の例では、使用する方法、<xref:System.GC.Collect%2A>メモリのすべてのジェネレーションのコレクションを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-186">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on all generations of memory.</span></span> <span data-ttu-id="2f41d-187">コードが使用されていないオブジェクトは、数を生成しを呼び出して、<xref:System.GC.Collect%2A>メソッドをメモリから消去します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-187">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.Collect Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.Collect Example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.Collect Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation);" />
      <MemberSignature Language="F#" Value="static member Collect : int -&gt; unit" Usage="System.GC.Collect generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation">
          <span data-ttu-id="2f41d-188">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-188">The number of the oldest generation to be garbage collected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-189">ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを直ちに強制実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-189">Forces an immediate garbage collection from generation 0 through a specified generation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-190">このメソッドを使用して、アクセスできないメモリの解放を試みます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-190">Use this method to try to reclaim memory that is inaccessible.</span></span> <span data-ttu-id="2f41d-191">ただし、このメソッドを使用していないわけでは指定したジェネレーション内のすべてのアクセスできないメモリが解放されること。</span><span class="sxs-lookup"><span data-stu-id="2f41d-191">However, using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="2f41d-192">世代番号のオブジェクトはガベージ コレクターによって収集しないオブジェクトの世代が実装されている場合、指定された世代より高い。</span><span class="sxs-lookup"><span data-stu-id="2f41d-192">If object aging is implemented, the garbage collector does not collect objects with a generation number that is higher than the specified generation.</span></span> <span data-ttu-id="2f41d-193">オブジェクトの世代が実装されていない場合、ガベージ コレクターはガベージ コレクション中にすべてのオブジェクトと見なします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-193">If object aging is not implemented, the garbage collector considers all objects during the garbage collection.</span></span>  
  
 <span data-ttu-id="2f41d-194">使用して、<xref:System.GC.MaxGeneration%2A>プロパティの最大有効値を決定する、`generation`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="2f41d-194">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of the `generation` parameter.</span></span>  
  
 <span data-ttu-id="2f41d-195">ガベージ コレクターがその世代に関係なくすべてのオブジェクトには、このパラメーターをとらないメソッドのバージョンを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-195">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span> <span data-ttu-id="2f41d-196">に基づいてオブジェクトの再利用、ガベージ コレクターが、<xref:System.GCCollectionMode>設定を使用して、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-196">To have the garbage collector reclaim objects based on a <xref:System.GCCollectionMode> setting, use the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-197">次の例では、使用する方法、<xref:System.GC.Collect%2A>メモリの個々 のレイヤーのコレクションを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-197">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on individual layers of memory.</span></span> <span data-ttu-id="2f41d-198">コードが使用されていないオブジェクトは、数を生成しを呼び出して、<xref:System.GC.Collect%2A>メソッドをメモリから消去します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-198">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-199">
            <paramref name="generation" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-199">
              <paramref name="generation" /> is not valid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode -&gt; unit" Usage="System.GC.Collect (generation, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
      </Parameters>
      <Docs>
        <param name="generation">
          <span data-ttu-id="2f41d-200">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-200">The number of the oldest generation to be garbage collected.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2f41d-201">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-201">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-202">
            <see cref="T:System.GCCollectionMode" /> 値によって指定したタイミングで、ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを強制的に実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-202">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-203">使用して、`mode`かどうかガベージ コレクションが発生のみまたはすぐに時間は、オブジェクトの再利用する最適なかどうかを指定するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2f41d-203">Use the `mode` parameter to specify whether garbage collection should occur immediately or only if the time is optimal to reclaim objects.</span></span> <span data-ttu-id="2f41d-204">このメソッドを使用しても、指定したジェネレーション内のすべてのアクセスできないメモリが解放されることとは限りません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-204">Using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="2f41d-205">アプリケーションで重要な期間中にガベージ コレクションの割り込みの動作を調整する設定、<xref:System.Runtime.GCSettings.LatencyMode%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2f41d-205">To adjust the intrusiveness of garbage collection during critical periods in your application, set the <xref:System.Runtime.GCSettings.LatencyMode%2A> property.</span></span>  
  
 <span data-ttu-id="2f41d-206">ガベージ コレクターはジェネレーションの番号で指定されている上位のオブジェクトを収集しません、`generation`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="2f41d-206">The garbage collector does not collect objects with a generation number higher than specified by the `generation` parameter.</span></span> <span data-ttu-id="2f41d-207">使用して、<xref:System.GC.MaxGeneration%2A>プロパティの最大有効値を決定する`generation`します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-207">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of `generation`.</span></span>  
  
 <span data-ttu-id="2f41d-208">ガベージ コレクターがその世代に関係なくすべてのオブジェクトには、このパラメーターをとらないメソッドのバージョンを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-208">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span>  
  
 <span data-ttu-id="2f41d-209">オブジェクトの指定ジェネレーションまでのオブジェクトの再利用、使用して、ガベージ コレクターが、<xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-209">To have the garbage collector reclaim objects up to a specified generation of objects, use the <xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="2f41d-210">Generation の最大値を指定する場合は、すべてのオブジェクトが収集されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-210">When you specify the maximum generation, all objects are collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-211">次の例には、第 2 世代のオブジェクトをガベージ コレクションが強制実行、<xref:System.GCCollectionMode.Optimized>設定します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-211">The following example forces a garbage collection for generation 2 objects with the <xref:System.GCCollectionMode.Optimized> setting.</span></span>  
  
 [!code-csharp[System.GC.GCCollectionMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GCCollectionMode/cs/Program.cs#1)]
 [!code-vb[System.GC.GCCollectionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GCCollectionMode/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-212">
            <paramref name="generation" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-212">
              <paramref name="generation" /> is not valid.</span>
          </span>
          <span data-ttu-id="2f41d-213">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-213">-or-</span>
          </span>
          <span data-ttu-id="2f41d-214">
            <paramref name="mode" /> は <see cref="T:System.GCCollectionMode" /> 値のいずれでもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-214">
              <paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
        <Parameter Name="blocking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="generation">
          <span data-ttu-id="2f41d-215">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-215">The number of the oldest generation to be garbage collected.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2f41d-216">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-216">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span>
          </span>
        </param>
        <param name="blocking">
          <span data-ttu-id="2f41d-217">ブロッキング ガベージ コレクションを実行する場合は <see langword="true" />。可能な限りバックグラウンド ガベージ コレクションを実行する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-217">
              <see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-218">ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを、 <see cref="T:System.GCCollectionMode" /> 値で指定したタイミングで強制実行します。コレクションをブロックする必要があるかどうかを指定する値を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-218">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with a value specifying whether the collection should be blocking.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-219">次の表の相互作用をまとめたものです、`mode`と`blocking`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="2f41d-219">The following table summarizes the interaction of the `mode` and `blocking` parameters:</span></span>  
  
|`mode`|<span data-ttu-id="2f41d-220">`blocking` は `true` です</span><span class="sxs-lookup"><span data-stu-id="2f41d-220">`blocking` is `true`</span></span>|<span data-ttu-id="2f41d-221">`blocking` は `false` です</span><span class="sxs-lookup"><span data-stu-id="2f41d-221">`blocking` is `false`</span></span>|  
|-|-|-|  
|<span data-ttu-id="2f41d-222"><xref:System.GCCollectionMode.Forced> または <xref:System.GCCollectionMode.Default></span><span class="sxs-lookup"><span data-stu-id="2f41d-222"><xref:System.GCCollectionMode.Forced> or <xref:System.GCCollectionMode.Default></span></span>|<span data-ttu-id="2f41d-223">ブロッキング コレクションはできるだけ早く実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-223">A blocking collection is performed as soon as possible.</span></span> <span data-ttu-id="2f41d-224">バック グラウンド コレクションが進行中の場合と`generation`0 または 1 の場合は、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29>メソッドは直ちにブロッキング コレクションをトリガーし、コレクションが完了したらを返します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-224">If a background collection is in progress and `generation` is 0 or 1, the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method immediately triggers a blocking collection and returns when the collection is finished.</span></span> <span data-ttu-id="2f41d-225">バック グラウンド コレクションが進行中の場合と`generation`が 2 で、メソッドを待機するまで、バック グラウンド コレクションが完了したら、ジェネレーション 2 のブロッキング コレクションでは、トリガーおよびを返します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-225">If a background collection is in progress and `generation` is 2, the method waits until the background collection is finished, triggers a blocking generation 2 collection, and then returns.</span></span>|<span data-ttu-id="2f41d-226">コレクションはできるだけ早く実行されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-226">A collection is performed as soon as possible.</span></span> <span data-ttu-id="2f41d-227"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> メソッドはバックグラウンド コレクションを要求しますが、それは保証されず、状況によってはブロッキング コレクションが実行される場合もあります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-227">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="2f41d-228">バックグラウンド コレクションが既に実行中の場合、メソッドはすぐに制御を返します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-228">If a background collection is already in progress, the method returns immediately.</span></span>|  
|<xref:System.GCCollectionMode.Optimized>|<span data-ttu-id="2f41d-229">ガベージ コレクターおよび `generation` パラメーターの状態によっては、ブロッキング コレクションが実行される場合があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-229">A blocking collection may be performed, depending on the state of the garbage collector and the `generation` parameter.</span></span> <span data-ttu-id="2f41d-230">ガベージ コレクターは最適なパフォーマンスを提供しようとします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-230">The garbage collector tries to provide optimal performance.</span></span>|<span data-ttu-id="2f41d-231">ガベージ コレクターの状態によっては、コレクションが実行される場合があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-231">A collection may be performed, depending on the state of the garbage collector.</span></span> <span data-ttu-id="2f41d-232"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> メソッドはバックグラウンド コレクションを要求しますが、それは保証されず、状況によってはブロッキング コレクションが実行される場合もあります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-232">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="2f41d-233">ガベージ コレクターは最適なパフォーマンスを提供しようとします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-233">The garbage collector tries to provide optimal performance.</span></span> <span data-ttu-id="2f41d-234">バックグラウンド コレクションが既に実行中の場合、メソッドはすぐに制御を返します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-234">If a background collection is already in progress, the method returns immediately.</span></span>|  
  
 <span data-ttu-id="2f41d-235">呼び出し、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29>メソッドがフル ブロッキング ガベージ コレクションを実行する設定して、大きなオブジェクト ヒープを圧縮することもできます、<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>プロパティを<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>呼び出す前に、<xref:System.GC.Collect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-235">If a call to the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method performs a full blocking garbage collection, you can also compact the large object heap by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-236">
            <paramref name="generation" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-236">
              <paramref name="generation" /> is not valid.</span>
          </span>
          <span data-ttu-id="2f41d-237">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-237">-or-</span>
          </span>
          <span data-ttu-id="2f41d-238">
            <paramref name="mode" /> は <see cref="T:System.GCCollectionMode" /> 値のいずれでもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-238">
              <paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking, bool compacting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean, compacting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking, compacting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
        <Parameter Name="blocking" Type="System.Boolean" />
        <Parameter Name="compacting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="generation">
          <span data-ttu-id="2f41d-239">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-239">The number of the oldest generation to be garbage collected.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2f41d-240">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-240">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span>
          </span>
        </param>
        <param name="blocking">
          <span data-ttu-id="2f41d-241">ブロッキング ガベージ コレクションを実行する場合は <see langword="true" />。可能な限りバックグラウンド ガベージ コレクションを実行する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-241">
              <see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span>
          </span>
        </param>
        <param name="compacting">
          <span data-ttu-id="2f41d-242">小さなオブジェクト ヒープの圧縮を行う場合は <see langword="true" />、スイープのみ行う場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-242">
              <see langword="true" /> to compact the small object heap; <see langword="false" /> to sweep only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-243">ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを、 <see cref="T:System.GCCollectionMode" /> 値で指定したタイミングで強制実行します。コレクションをブロックおよび圧縮する必要があるかどうかを指定する値を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-243">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with values that specify whether the collection should be blocking and compacting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-244">場合`blocking`は`false`GC は、バック グラウンドまたはブロッキング ガベージ コレクションを実行するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-244">If `blocking` is `false`, the GC decides whether to perform a background or a blocking garbage collection.</span></span> <span data-ttu-id="2f41d-245">場合`compacting`は`true`、ブロッキング ガベージ コレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-245">If `compacting` is `true`, it performs a blocking garbage collection.</span></span>  
  
 <span data-ttu-id="2f41d-246">場合`compacting`は`true`ランタイムが、小さなオブジェクト ヒープ (SOH) を圧縮します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-246">If `compacting` is `true`, the runtime compacts the small object heap (SOH).</span></span> <span data-ttu-id="2f41d-247">しない限り、大きなオブジェクト ヒープ (LOH) は圧縮されません、<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>プロパティに設定されて<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-247">The large object heap (LOH) is not compacted unless the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2f41d-248">すべてブロッキング ガベージ コレクション、いないだけフル ブロッキング ガベージ コレクションを含むことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2f41d-248">Note that this includes all blocking garbage collections, not just full blocking garbage collections.</span></span>  
  
 <span data-ttu-id="2f41d-249">呼び出すことができます、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>メソッドに次のコード フラグメントに示すように、マネージ ヒープを最小サイズできるに減らします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-249">You can call the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method to reduce the managed heap to the smallest size possible, as the following code fragment illustrates.</span></span>  
  
 [!code-csharp[System.GC.Collect#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect/cs/collect4.cs#1)]
 [!code-vb[System.GC.Collect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect/vb/collect4.vb#1)]  
  
 <span data-ttu-id="2f41d-250">指定する`true`の`compacting`引数は、圧縮、フル ブロッキング ガベージ コレクションを保証します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-250">Specifying `true` for the `compacting` argument guarantees a compacting, full blocking garbage collection.</span></span> <span data-ttu-id="2f41d-251">設定、<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>プロパティを<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>により、LOH と SOH を最適化します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-251">Setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> ensures that both the LOH and SOH are compacted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionCount">
      <MemberSignature Language="C#" Value="public static int CollectionCount (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CollectionCount(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CollectionCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionCount (generation As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CollectionCount(int generation);" />
      <MemberSignature Language="F#" Value="static member CollectionCount : int -&gt; int" Usage="System.GC.CollectionCount generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation">
          <span data-ttu-id="2f41d-252">ガベージ コレクションの回数を確認するオブジェクトのジェネレーション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-252">The generation of objects for which the garbage collection count is to be determined.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-253">指定したジェネレーションのオブジェクトに対するガベージ コレクションの発生回数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-253">Returns the number of times garbage collection has occurred for the specified generation of objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-254">プロセスの起動後に、指定したジェネレーションに対して発生したガベージ コレクションの回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-254">The number of times garbage collection has occurred for the specified generation since the process was started.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-255">独自のリソース管理を実装する場合は、定期的に呼び出すことによってガベージ コレクションを強制的には必要、<xref:System.GC.Collect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-255">If you implement your own resource management, you might need to force garbage collection periodically by calling the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="2f41d-256">これは負荷の高い操作であるため、ガベージ コレクションが最近発生したときに、呼び出しをスキップしてパフォーマンスを向上できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-256">Because this is an expensive operation, you can improve performance by skipping the call when a garbage collection has occurred recently.</span></span> <span data-ttu-id="2f41d-257">によって返される値を保存<xref:System.GC.CollectionCount%2A>呼び出した直後後<xref:System.GC.Collect%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-257">Save the value returned by <xref:System.GC.CollectionCount%2A> immediately after calling <xref:System.GC.Collect%2A>.</span></span> <span data-ttu-id="2f41d-258">呼び出す必要があります、次回<xref:System.GC.Collect%2A>、によって返される現在の値を比較<xref:System.GC.CollectionCount%2A>保存値。</span><span class="sxs-lookup"><span data-stu-id="2f41d-258">The next time you need to call <xref:System.GC.Collect%2A>, compare the current value returned by <xref:System.GC.CollectionCount%2A> to the saved value.</span></span> <span data-ttu-id="2f41d-259">2 つの値が等しい場合は、それまでの間でコレクションが発生していないと、呼び出しするが妥当<xref:System.GC.Collect%2A>もう一度です。</span><span class="sxs-lookup"><span data-stu-id="2f41d-259">If the two values are equal, no collection has occurred in the interim and it is reasonable to call <xref:System.GC.Collect%2A> again.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-260">
            <paramref name="generation" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-260">
              <paramref name="generation" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndNoGCRegion">
      <MemberSignature Language="C#" Value="public static void EndNoGCRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndNoGCRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.EndNoGCRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndNoGCRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndNoGCRegion();" />
      <MemberSignature Language="F#" Value="static member EndNoGCRegion : unit -&gt; unit" Usage="System.GC.EndNoGCRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-261">GC 領域の無待機モードを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-261">Ends the no GC region latency mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-262"><xref:System.GC.EndNoGCRegion%2A>メソッドがスローされます、<xref:System.InvalidOperationException>ガベージ コレクターが GC 領域の無待機モードでない場合。</span><span class="sxs-lookup"><span data-stu-id="2f41d-262">The <xref:System.GC.EndNoGCRegion%2A> method throws an <xref:System.InvalidOperationException> if the garbage collector is not in no GC region latency mode.</span></span> <span data-ttu-id="2f41d-263">これは、次の条件のいずれかで発生します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-263">This occurs under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="2f41d-264"><xref:System.GC.TryStartNoGCRegion%2A>メソッドが既に呼び出されていません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-264">The <xref:System.GC.TryStartNoGCRegion%2A> method was not called previously.</span></span>  
  
-   <span data-ttu-id="2f41d-265">呼び出し、<xref:System.GC.TryStartNoGCRegion%2A>メソッドが返される`false`します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-265">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method returned `false`.</span></span>  
  
-   <span data-ttu-id="2f41d-266">呼び出し、<xref:System.GC.TryStartNoGCRegion%2A>メソッドが例外をスローしました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-266">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method threw an exception.</span></span>  
  
 <span data-ttu-id="2f41d-267">次のようにコードを使用してこれらの理由からいずれかの例外を回避できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-267">You can prevent an exception for any of these reasons by using code such as the following:</span></span>  
  
 [!code-csharp[System.GC.EndNoGCRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.endnogcregion/cs/endnogcregion1.cs#1)]
 [!code-vb[System.GC.EndNoGCRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.endnogcregion/vb/endnogcregion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f41d-268">ガベージ コレクターが、GC 領域の無待機モードではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-268">The garbage collector is not in no GC region latency mode.</span>
          </span>
          <span data-ttu-id="2f41d-269">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-269">-or-</span>
          </span>
          <span data-ttu-id="2f41d-270">ガベージ コレクションが発生したために、GC 領域の無待機モードは前に終了されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-270">The no GC region latency mode was ended previously because a garbage collection was induced.</span>
          </span>
          <span data-ttu-id="2f41d-271">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-271">-or-</span>
          </span>
          <span data-ttu-id="2f41d-272">メモリ割り当てが、<see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> メソッドの呼び出しで指定された量を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-272">A memory allocation exceeded the amount specified in the call to the <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:System.GC.TryStartNoGCRegion(System.Int64)" />
        <altmember cref="P:System.Runtime.GCSettings.LatencyMode" />
      </Docs>
    </Member>
    <Member MemberName="GetAllocatedBytesForCurrentThread">
      <MemberSignature Language="C#" Value="public static long GetAllocatedBytesForCurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetAllocatedBytesForCurrentThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetAllocatedBytesForCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllocatedBytesForCurrentThread () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetAllocatedBytesForCurrentThread();" />
      <MemberSignature Language="F#" Value="static member GetAllocatedBytesForCurrentThread : unit -&gt; int64" Usage="System.GC.GetAllocatedBytesForCurrentThread " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGeneration">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-273">オブジェクトの現在のジェネレーション番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-273">Returns the current generation number of an object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : obj -&gt; int" Usage="System.GC.GetGeneration obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="2f41d-274">ジェネレーションの情報を検索する対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-274">The object that generation information is retrieved for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-275">指定したオブジェクトの現在のジェネレーション番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-275">Returns the current generation number of the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-276">
            <paramref name="obj" /> の現在のジェネレーション番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-276">The current generation number of <paramref name="obj" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-277">このメソッドを使用して、オブジェクトの有効期間を特定しでその情報を使用して、<xref:System.GC.Collect%2A>同じ世代のオブジェクトをガベージ コレクターが収集を強制する方法。</span><span class="sxs-lookup"><span data-stu-id="2f41d-277">Use this method to determine the age of an object, and then use that information with the <xref:System.GC.Collect%2A> method to force the garbage collector to collect objects in the same generation.</span></span> <span data-ttu-id="2f41d-278">たとえば、グループとして作成されると同時にアクセスできなくなりますオブジェクトのセットがある場合は、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-278">For example, use this method when you have a set of objects that are created as a group and that become inaccessible at the same time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-279">次の例では、使用する方法、<xref:System.GC.GetGeneration%2A>オブジェクトの有効期間を決定する方法。</span><span class="sxs-lookup"><span data-stu-id="2f41d-279">The following example demonstrates how to use the <xref:System.GC.GetGeneration%2A> method to determine the age of an object.</span></span> <span data-ttu-id="2f41d-280">例では、メモリをクリーンアップしてより前を比較し、コンソールでメモリの合計のコレクションを投稿するガベージ コレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-280">The example then performs garbage collections to clean up memory and compare the pre and post collection memory totals in the console.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (WeakReference wo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(class System.WeakReference wo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.WeakReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (wo As WeakReference) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(WeakReference ^ wo);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : WeakReference -&gt; int" Usage="System.GC.GetGeneration wo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wo" Type="System.WeakReference" />
      </Parameters>
      <Docs>
        <param name="wo">
          <span data-ttu-id="2f41d-281">ジェネレーション番号を確認する対象のオブジェクトを参照する <see cref="T:System.WeakReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-281">A <see cref="T:System.WeakReference" /> that refers to the target object whose generation number is to be determined.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-282">指定した弱い参照の対象となる現在のジェネレーション番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-282">Returns the current generation number of the target of a specified weak reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-283">
            <paramref name="wo" /> の対象となる現在のジェネレーション番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-283">The current generation number of the target of <paramref name="wo" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2f41d-284">次の例では、使用、<xref:System.GC.GetGeneration%2A>弱い参照オブジェクトの有効期間を決定する方法。</span><span class="sxs-lookup"><span data-stu-id="2f41d-284">The following example demonstrates the use of the <xref:System.GC.GetGeneration%2A> method to determine the age of a weak reference object.</span></span>  
  
 [!code-cpp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CPP/systemgcgetgenerationweak.cpp#1)]
 [!code-csharp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CS/systemgcgetgenerationweak.cs#1)]
 [!code-vb[System.GC.GetGenerationWeak Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/VB/systemgcgetgenerationweak.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2f41d-285">
            <paramref name="wo" /> に対して既にガベージ コレクションが実行されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-285">Garbage collection has already been performed on <paramref name="wo" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetTotalMemory">
      <MemberSignature Language="C#" Value="public static long GetTotalMemory (bool forceFullCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalMemory(bool forceFullCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalMemory(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalMemory (forceFullCollection As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTotalMemory(bool forceFullCollection);" />
      <MemberSignature Language="F#" Value="static member GetTotalMemory : bool -&gt; int64" Usage="System.GC.GetTotalMemory forceFullCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceFullCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceFullCollection">
          <span data-ttu-id="2f41d-286">ガベージ コレクションの発生を待ってから制御を戻す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-286">
              <see langword="true" /> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-287">現在割り当てられていると思われるバイト数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-287">Retrieves the number of bytes currently thought to be allocated.</span>
          </span>
          <span data-ttu-id="2f41d-288">パラメーターは、このメソッドが制御を戻す前に短い時間だけ待機して、システムがガベージ コレクションを行い、オブジェクトの終了操作を実行できるようにするかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-288">A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-289">マネージド メモリに現在割り当てられているバイト数の最もよい近似値となる数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-289">A number that is the best available approximation of the number of bytes currently allocated in managed memory.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-290">場合、`forceFullCollection`パラメーターが`true`システムがガベージを収集し、オブジェクトをファイナライズ中に、このメソッドが返す前に、短い間隔を待機します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-290">If the `forceFullCollection` parameter is `true`, this method waits a short interval before returning while the system collects garbage and finalizes objects.</span></span> <span data-ttu-id="2f41d-291">間隔の時間は、完了したガベージ コレクション サイクルの数によって決まります、内部的に指定された制限とサイクル間で回復するメモリ量の変更は。</span><span class="sxs-lookup"><span data-stu-id="2f41d-291">The duration of the interval is an internally specified limit determined by the number of garbage collection cycles completed and the change in the amount of memory recovered between cycles.</span></span> <span data-ttu-id="2f41d-292">ガベージ コレクターでは、アクセスできないすべてのメモリが収集されることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-292">The garbage collector does not guarantee that all inaccessible memory is collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-293">次の例では、使用する方法、<xref:System.GC.GetTotalMemory%2A>メソッドを取得し、マネージ メモリに現在割り当てられているバイト数を表示します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-293">The following example demonstrates how to use the <xref:System.GC.GetTotalMemory%2A> method to get and display the number of bytes currently allocated in managed memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public static void KeepAlive (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void KeepAlive(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.KeepAlive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub KeepAlive (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void KeepAlive(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member KeepAlive : obj -&gt; unit" Usage="System.GC.KeepAlive obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="2f41d-294">参照するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-294">The object to reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-295">指定したオブジェクトを参照することにより、現在のルーチンの開始時からこのメソッドが呼び出される時点までの間、そのオブジェクトをガベージ コレクションの対象から外します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-295">References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-296">目的、<xref:System.GC.KeepAlive%2A>メソッドは、ガベージ コレクターによって解放される途中での危険にさらされているオブジェクトへの参照が存在することを確認します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-296">The purpose of the <xref:System.GC.KeepAlive%2A> method is to ensure the existence of a reference to an object that is at risk of being prematurely reclaimed by the garbage collector.</span></span> <span data-ttu-id="2f41d-297">これが発生する一般的なシナリオは、マネージ コードまたはデータ、オブジェクトへの参照はありませんが、オブジェクトがアンマネージ Dll は、Win32 Api などのアンマネージ コードで使用中では場合、または COM を使用する方法</span><span class="sxs-lookup"><span data-stu-id="2f41d-297">A common scenario where this might happen is when there are no references to the object in managed code or data, but the object is still in use in unmanaged code such as Win32 APIs, unmanaged DLLs, or methods using COM.</span></span>  
  
 <span data-ttu-id="2f41d-298">このメソッドが参照、`obj`パラメーター、そのオブジェクト ガベージ コレクションの対象外から行うルーチンの開始、実行の順にポイントにこのメソッドが呼び出された場合。</span><span class="sxs-lookup"><span data-stu-id="2f41d-298">This method references the `obj` parameter, making that object ineligible for garbage collection from the start of the routine to the point, in execution order, where this method is called.</span></span> <span data-ttu-id="2f41d-299">最後に、命令の範囲の先頭しないには、このメソッドのコードで`obj`できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-299">Code this method at the end, not the beginning, of the range of instructions where `obj` must be available.</span></span>  
  
 <span data-ttu-id="2f41d-300"><xref:System.GC.KeepAlive%2A>メソッド演算を実行しないと、パラメーターとして渡されるオブジェクトの有効期間を拡張する以外の副作用を生成しません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-300">The <xref:System.GC.KeepAlive%2A> method performs no operation and produces no side effects other than extending the lifetime of the object passed in as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-301">次のコード例の先頭にオブジェクトを作成するその`Main`メソッド、終了するまでもう一度オブジェクトを参照していないと場合、<xref:System.GC.KeepAlive%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-301">The following code example creates an object at the beginning of its `Main` method and does not refer to the object again until the end, when the <xref:System.GC.KeepAlive%2A> method is called.</span></span> <span data-ttu-id="2f41d-302">30 秒間のみ、オブジェクトが解決しない、`Main`への呼び出しに関係なく、メソッド、<xref:System.GC.Collect%2A>と<xref:System.GC.WaitForPendingFinalizers%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-302">The object persists for the 30-second duration of the `Main` method, despite calls to the <xref:System.GC.Collect%2A> and <xref:System.GC.WaitForPendingFinalizers%2A> methods.</span></span>  
  
 [!code-cpp[System.GC.KeepAlive Example2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CPP/gckeepalive.cpp#1)]
 [!code-csharp[System.GC.KeepAlive Example2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CS/gckeepalive.cs#1)]
 [!code-vb[System.GC.KeepAlive Example2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/VB/gckeepalive.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxGeneration">
      <MemberSignature Language="C#" Value="public static int MaxGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxGeneration" />
      <MemberSignature Language="DocId" Value="P:System.GC.MaxGeneration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxGeneration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxGeneration { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxGeneration : int" Usage="System.GC.MaxGeneration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-303">システムが現在サポートしている最大のジェネレーション番号を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-303">Gets the maximum number of generations that the system currently supports.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2f41d-304">0 からサポートされるジェネレーションの最大番号までの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-304">A value that ranges from zero to the maximum number of supported generations.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-305">世代番号、またはオブジェクトの年齢、オブジェクトの有効期間の実装定義の相対尺度は、します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-305">The generation number, or age, of an object is an implementation-defined relative measure of an object's lifespan.</span></span> <span data-ttu-id="2f41d-306">最近作成されたオブジェクトは、ジェネレーション 0 と最も古いオブジェクトは、によって返される、世代小さいジェネレーション、<xref:System.GC.MaxGeneration%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2f41d-306">The most recently created objects are in generation 0 and the oldest objects are in a generation less than or equal to the generation returned by the <xref:System.GC.MaxGeneration%2A> property.</span></span>  
  
 <span data-ttu-id="2f41d-307">ガベージ コレクターが想定する新しいメモリはより古いメモリ ガベージ コレクションの対象となる可能性が高くなります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-307">The garbage collector assumes that newer memory is more likely to be eligible for garbage collection than older memory.</span></span> <span data-ttu-id="2f41d-308">そのため、ガベージ コレクターが世代番号をメモリの再利用するたびに調整することによって、パフォーマンスが向上し、<xref:System.GC.MaxGeneration%2A>プロパティの値が時間の経過と共に拡大できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-308">Therefore, the garbage collector improves its performance by adjusting generation numbers each time it reclaims memory, and the <xref:System.GC.MaxGeneration%2A> property value can grow over time.</span></span>  
  
 <span data-ttu-id="2f41d-309">オブジェクトの世代が実装されている場合、<xref:System.GC.MaxGeneration%2A>プロパティは、システムで使用される最大のジェネレーション番号を返します。 それ以外の場合、このプロパティは 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-309">If object aging is implemented, the <xref:System.GC.MaxGeneration%2A> property returns the maximum generation number used by the system; otherwise, this property returns zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-310">次の例では、現在使用中の最大のジェネレーション番号を表示する MaxGeneration プロパティを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-310">The following example demonstrates how to use the MaxGeneration property to display the largest generation number currently in use.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="2f41d-311">
            <para>この実装によって返される値、<see cref="P:System.GC.MaxGeneration" />プロパティが実行中のアプリケーションの有効期間にわたって変わらないことが保証されます。使用して、<see cref="P:System.GC.MaxGeneration" />を呼び出すときに指定できる最大の値を決定するプロパティ、<see cref="M:System.GC.Collect(System.Int32)" />生成パラメーターを受け取るメソッド。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-311">
              <para>For this implementation, the value returned by the <see cref="P:System.GC.MaxGeneration" /> property is guaranteed to remain constant for the lifetime of an executing application.  Use the <see cref="P:System.GC.MaxGeneration" /> property to determine the maximum value you can specify when calling the <see cref="M:System.GC.Collect(System.Int32)" /> method that takes a generation parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.GC.GetGeneration(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForFullGCNotification">
      <MemberSignature Language="C#" Value="public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForFullGCNotification(int32 maxGenerationThreshold, int32 largeObjectHeapThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForFullGCNotification (maxGenerationThreshold As Integer, largeObjectHeapThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForFullGCNotification(int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="F#" Value="static member RegisterForFullGCNotification : int * int -&gt; unit" Usage="System.GC.RegisterForFullGCNotification (maxGenerationThreshold, largeObjectHeapThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxGenerationThreshold" Type="System.Int32" />
        <Parameter Name="largeObjectHeapThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxGenerationThreshold">
          <span data-ttu-id="2f41d-312">ジェネレーション 2 に割り当てられたオブジェクト数に基づいて通知を発行するタイミングを指定する、1 ～ 99 の数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-312">A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</span>
          </span>
        </param>
        <param name="largeObjectHeapThreshold">
          <span data-ttu-id="2f41d-313">大きなオブジェクトのヒープに割り当てられたオブジェクト数に基づいて通知を発行するタイミングを指定する、1 ～ 99 の数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-313">A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-314">フル ガベージ コレクションの可能性が高い状態のとき、およびガベージ コレクションが完了したときに、ガベージ コレクションの通知を発行する必要があることを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-314">Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-315">各の生成には、ガベージ コレクターは、その世代に割り当てのしきい値を設定します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-315">For each generation, the garbage collector sets a threshold for allocations into that generation.</span></span> <span data-ttu-id="2f41d-316">割り当てのサイズがこのしきい値を超えたときにその世代に対してガベージ コレクションがトリガーされます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-316">When the size of allocations exceeds this threshold, a garbage collection is triggered on that generation.</span></span> <span data-ttu-id="2f41d-317">例では、ジェネレーション 2 のしきい値は 20 MB (20 MB が第 1 世代のコレクションは存続し、ジェネレーション 2 に昇格を意味します)、および 20 MB を超える場合は、第 1 世代が行われなかったし、ジェネレーション 2 にメッセージが表示されます、次のガベージ コレクションが試行されます第 2 世代のコレクション。</span><span class="sxs-lookup"><span data-stu-id="2f41d-317">For example, if generation 2’s threshold is 20MB (which means that 20MB survives generation 1 collections and is promoted into generation 2), and more than 20MB has survived generation 1 and is prompted into generation 2, the next garbage collection will be attempted as a generation 2 collection.</span></span> <span data-ttu-id="2f41d-318">同様に、大きなオブジェクト ヒープ (LOH) の場合のしきい値は 20 MB と、アプリが 20 MB を超える大きなオブジェクトを割り当て、(このため、LOH は gen2 ガベージ コレクションでのみ収集されます)、次のガベージ コレクションを第 2 世代のコレクションとして試行もは。</span><span class="sxs-lookup"><span data-stu-id="2f41d-318">Similarly, if the large object heap's (LOH's) threshold is 20MB and your app has allocated more than 20MB of large objects, the next garbage collection will also be attempted as a generation 2 collection (since the LOH is only collected in gen2 garbage collections).</span></span>  
  
 <span data-ttu-id="2f41d-319">`maxGenerationThreshold`と`largeObjectHeapThreshold`しきい値を制御、フル ガベージ コレクションが発生する前にどの程度事前に通知されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-319">The `maxGenerationThreshold` and `largeObjectHeapThreshold` thresholds control how much in advance you are notified before a full garbage collection occurs.</span></span> <span data-ttu-id="2f41d-320">しきい値が大きいほど、詳細の割り当てを通知し、次の完全なガベージ コレクションの間に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-320">The greater the threshold, the more allocations that can occur between notification and the next full garbage collection.</span></span>  
  
 <span data-ttu-id="2f41d-321">ランタイムがフル ガベージ コレクションを行い、そのコレクションを回避するときに通知するように要求できる場合、アプリケーションのパフォーマンスは、共通言語ランタイムによってフル ガベージ コレクションに悪影響があれば、自分で、コレクションを強制しないで (を使用して、<xref:System.GC.Collect%2A>メソッド) の条件にも有利な場合。</span><span class="sxs-lookup"><span data-stu-id="2f41d-321">If you have situations in which a full garbage collection by the common language runtime would adversely affect your application's performance, you can ask to be notified when the runtime is about to do a full garbage collection and circumvent that collection by inducing a collection yourself (using the <xref:System.GC.Collect%2A> method) when conditions are still favorable.</span></span> <span data-ttu-id="2f41d-322">ガベージ コレクションのスケジュールを自分で変更だけでなく完全な GC の通知では、次のシナリオに便利です。</span><span class="sxs-lookup"><span data-stu-id="2f41d-322">In addition to changing the garbage collection schedule yourself, full GC notification is useful in following the scenarios:</span></span>  
  
-   <span data-ttu-id="2f41d-323">フル ガベージ コレクションのアプローチを監視して、(たとえば、いくつかのキャッシュ エントリを解放する) では、ライブ データのサイズを小さくいずれかが近づいていることを通知するときにします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-323">You monitor for the approach of a full garbage collection and, when you are notified that one is approaching, you reduce live data size (for example, by releasing some cache entries).</span></span> <span data-ttu-id="2f41d-324">その結果、ガベージ コレクションが発生したときより多くのメモリを解放できないは。</span><span class="sxs-lookup"><span data-stu-id="2f41d-324">As a result, when the garbage collection occurs, it is able to reclaim more memory.</span></span>  
  
-   <span data-ttu-id="2f41d-325">いくつかの統計を収集するようにフル ガベージ コレクションの完了を監視します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-325">You monitor for the completion of a full garbage collection so that you can collect some statistics.</span></span>  <span data-ttu-id="2f41d-326">たとえば、ライブ データのサイズを把握するように GC の終了時にヒープのサイズを測定する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-326">For example, you might want to measure the size of the heap at GC completion so that you know the size of live data.</span></span> <span data-ttu-id="2f41d-327">(フル GC では、後に、ヒープはその最小サイズで) です。</span><span class="sxs-lookup"><span data-stu-id="2f41d-327">(After a full GC, the heap is at its smallest size.)</span></span>  
  
 <span data-ttu-id="2f41d-328">フル ガベージ コレクションが表す内容の詳細については、次を参照してください。[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-328">For more information about what represents a full garbage collection, see [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md).</span></span>  
  
 <span data-ttu-id="2f41d-329">ガベージ コレクションの通知を登録するときにフル ガベージ コレクションが近づいているとき、および完了を通知できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-329">When you register for a garbage collection notification, you can be notified when a full garbage collection is approaching and when it is completed.</span></span> <span data-ttu-id="2f41d-330">このパターンでは、メモリ不足の通知のオペレーティング システムを監視する方法に似ています。</span><span class="sxs-lookup"><span data-stu-id="2f41d-330">This pattern resembles how the operating system monitors for low memory notifications.</span></span>  
  
 <span data-ttu-id="2f41d-331">指定するために、次のガイドラインを使用して、`maxGenerationThreshold`と`largeObjectHeapThreshold`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="2f41d-331">Use the following guidelines for specifying the `maxGenerationThreshold` and `largeObjectHeapThreshold` parameters:</span></span>  
  
-   <span data-ttu-id="2f41d-332">しきい値の値が大きいほど、通知と、フル ガベージ コレクションの複数の割り当てが発生します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-332">The larger the threshold value, the more allocations will occur between the notification and the full garbage collection.</span></span>  
  
     <span data-ttu-id="2f41d-333">しきい値より大きい値では、コレクションが近づいているを確認するランタイムの機会を提供します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-333">A larger threshold value provides more opportunities for the runtime to check for an approaching collection.</span></span> <span data-ttu-id="2f41d-334">これに通知されること可能性が高くなります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-334">This increases the likelihood that you will be notified.</span></span> <span data-ttu-id="2f41d-335">ただし、ランタイムは、次のコレクションを誘発する前に複数の割り当てになるためには、しきい値が高すぎるを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-335">However, you should not set the threshold too high because that results in a more allocations before the runtime induces the next collection.</span></span>  
  
     <span data-ttu-id="2f41d-336">強制実行するコレクションを自分で上限のしきい値を使用して通知すると、ランタイムの次のコレクションで解放されるよりも、少数のオブジェクトは解放されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-336">When you induce a collection yourself upon notification using a high threshold value, fewer objects are reclaimed than would be reclaimed by the runtime's next collection.</span></span>  
  
-   <span data-ttu-id="2f41d-337">しきい値の値が小さいほど、通知と、フル ガベージ コレクションの割り当てが少ない。</span><span class="sxs-lookup"><span data-stu-id="2f41d-337">The smaller the threshold value, the fewer the allocations between notification and the full garbage collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-338">次の例では、ガベージ コレクションの通知を登録し、ガベージ コレクションの通知の状態を監視するスレッドを開始する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-338">The following example shows how to register a garbage collection notification and start a thread to monitor the status of the garbage collection notification.</span></span> <span data-ttu-id="2f41d-339">このコード例が示されている例の一部[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)トピック。</span><span class="sxs-lookup"><span data-stu-id="2f41d-339">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#2](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#2)]
 [!code-csharp[GCNotification#2](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#2)]
 [!code-vb[GCNotification#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-340">
            <paramref name="maxGenerationThreshold" /> または <paramref name="largeObjectHeapThreshold" /> は 1 ～ 99 の範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-340">
              <paramref name="maxGenerationThreshold" /> or <paramref name="largeObjectHeapThreshold" /> is not between 1 and 99.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="2f41d-341">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-341">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-342">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-342">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2f41d-343">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-343">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-344">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-344">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="RemoveMemoryPressure">
      <MemberSignature Language="C#" Value="public static void RemoveMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RemoveMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member RemoveMemoryPressure : int64 -&gt; unit" Usage="System.GC.RemoveMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated">
          <span data-ttu-id="2f41d-345">解放されたアンマネージ メモリの量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-345">The amount of unmanaged memory that has been released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-346">アンマネージ メモリが解放され、ガベージ コレクションのスケジュールにこのメモリを考慮する必要がなくなったことをランタイムに通知します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-346">Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-347">ガベージ コレクションのスケジュールを決定するには、ランタイムは考慮マネージ メモリの量が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-347">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="2f41d-348">小さなマネージ オブジェクトが大量のアンマネージ メモリを割り当てる場合、ランタイムはマネージ メモリだけを考慮し、したがってガベージ コレクションのスケジュールの緊急度を過小評価します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-348">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="2f41d-349"><xref:System.GC.AddMemoryPressure%2A>メソッドは、システム メモリにこの追加の負荷のランタイムを通知し、<xref:System.GC.RemoveMemoryPressure%2A>メソッドは、追加の負荷が解放されていることをランタイムに通知します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-349">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory, and the <xref:System.GC.RemoveMemoryPressure%2A> method informs the runtime that the additional pressure has been released.</span></span>  
  
 <span data-ttu-id="2f41d-350">最も簡単な使用パターン、マネージ オブジェクト コンス トラクターで、アンマネージ メモリの割り当てし、解放する、`Dispose`または`Finalize`メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-350">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="2f41d-351">呼び出す、<xref:System.GC.AddMemoryPressure%2A>アンマネージ メモリを割り当てた後にメソッドを呼び出すと、<xref:System.GC.RemoveMemoryPressure%2A>メソッドを解放するとします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-351">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="2f41d-352">場所、アンマネージ メモリの割り当てはマネージ オブジェクトの有効期間中に大幅に変更より複雑なシナリオで呼び出すことができます、<xref:System.GC.AddMemoryPressure%2A>と<xref:System.GC.RemoveMemoryPressure%2A>実行時に増分変更を通知するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-352">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2f41d-353">追加する圧力の量だけを削除することを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-353">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="2f41d-354">そのために失敗するの長時間実行されるアプリケーションでシステムのパフォーマンスが低下することができます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-354">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-355">
            <paramref name="bytesAllocated" /> が 0 以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-355">
              <paramref name="bytesAllocated" /> is less than or equal to 0.</span>
          </span>
          <span data-ttu-id="2f41d-356">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-356">-or-</span>
          </span>
          <span data-ttu-id="2f41d-357">32 ビットのコンピューターで、<paramref name="bytesAllocated" /> の値が <see cref="F:System.Int32.MaxValue" /> の値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-357">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2f41d-358">ガベージ コレクションの優先順位を操作するときに、アンマネージ コードを呼び出す機能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-358">for the ability to call unmanaged code when manipulating garbage-collection priority.</span>
          </span>
          <span data-ttu-id="2f41d-359">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-359">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2f41d-360">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-360">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-361">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-361">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReRegisterForFinalize">
      <MemberSignature Language="C#" Value="public static void ReRegisterForFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReRegisterForFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.ReRegisterForFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReRegisterForFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReRegisterForFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member ReRegisterForFinalize : obj -&gt; unit" Usage="System.GC.ReRegisterForFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="2f41d-362">ファイナライザーの呼び出しが必要なオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-362">The object that a finalizer must be called for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-363">
            <see cref="M:System.GC.SuppressFinalize(System.Object)" /> が事前に呼び出されている指定オブジェクトに対して、ファイナライザーを呼び出すことをシステムに要求します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-363">Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-364"><xref:System.GC.ReRegisterForFinalize%2A>メソッドを追加、`obj`ガベージ コレクターがオブジェクトを解放する前に、終了処理を要求するオブジェクトの一覧にパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2f41d-364">The <xref:System.GC.ReRegisterForFinalize%2A> method adds the `obj` parameter to the list of objects that request finalization before the garbage collector frees the object.</span></span> <span data-ttu-id="2f41d-365">`obj`パラメーターはこのメソッドの呼び出し元である必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-365">The `obj` parameter must be the caller of this method.</span></span>  
  
 <span data-ttu-id="2f41d-366">呼び出す、<xref:System.GC.ReRegisterForFinalize%2A>メソッドでは、ガベージ コレクターがオブジェクトのファイナライザーを呼び出すことは保証されません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-366">Calling the <xref:System.GC.ReRegisterForFinalize%2A> method does not guarantee that the garbage collector will call an object's finalizer.</span></span>  
  
 <span data-ttu-id="2f41d-367">既定では、ファイナライザーを実装するすべてのオブジェクトが終了操作を必要とするオブジェクトの一覧に追加されます。ただし、オブジェクトが既にファイナライズされているまたは呼び出すことによって終了処理を無効に可能性があります、<xref:System.GC.SuppressFinalize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-367">By default, all objects that implement finalizers are added to the list of objects that require finalization; however, an object might have already been finalized or might have disabled finalization by calling the <xref:System.GC.SuppressFinalize%2A> method.</span></span>  
  
 <span data-ttu-id="2f41d-368">ファイナライザーは、このメソッドを使用して、自体またはそれが参照するオブジェクトを復活させます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-368">A finalizer can use this method to resurrect itself or an object that it references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-369">次の例では、ReRegisterForFinalize メソッドを使用してオブジェクトを 2 回目の最終処理する方法のガベージ コレクション後時間。</span><span class="sxs-lookup"><span data-stu-id="2f41d-369">The following example demonstrates how to use the ReRegisterForFinalize method to finalize an object a second time after garbage collection.</span></span>  
  
 [!code-cpp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CS/class1.cs#1)]
 [!code-vb[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f41d-370">
            <paramref name="obj" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-370">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressFinalize">
      <MemberSignature Language="C#" Value="public static void SuppressFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.SuppressFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SuppressFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SuppressFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member SuppressFinalize : obj -&gt; unit" Usage="System.GC.SuppressFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="2f41d-371">実行すべきではないファイナライザーを持つオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-371">The object whose finalizer must not be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-372">指定したオブジェクトに対してファイナライザーを呼び出さないことを共通言語ランタイムに要求します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-372">Requests that the common language runtime not call the finalizer for the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-373">このメソッドは、ビットのオブジェクトのヘッダーを設定`obj`ファイナライザーを呼び出すときに、ランタイムがチェックされます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-373">This method sets a bit in the object header of `obj`, which the runtime checks when calling finalizers.</span></span> <span data-ttu-id="2f41d-374">によって表される、ファイナライザー、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>オブジェクトがガベージ コレクト前に、アンマネージ リソースを解放するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-374">A finalizer, which is represented by the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, is used to release unmanaged resources before an object is garbage-collected.</span></span> <span data-ttu-id="2f41d-375">場合`obj`への呼び出し、ファイナライザーを持たない、<xref:System.GC.SuppressFinalize%2A>メソッドが影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-375">If `obj` does not have a finalizer, the call to the <xref:System.GC.SuppressFinalize%2A> method has no effect.</span></span>  
  
 <span data-ttu-id="2f41d-376">実装するオブジェクト、<xref:System.IDisposable>インターフェイスは、このメソッドを呼び出してから、オブジェクトの<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>を呼び出し、ガベージ コレクターを防ぐために実装<xref:System.Object.Finalize%2A?displayProperty=nameWithType>必要のないオブジェクトにします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-376">Objects that implement the <xref:System.IDisposable> interface can call this method from the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to prevent the garbage collector from calling <xref:System.Object.Finalize%2A?displayProperty=nameWithType> on an object that does not require it.</span></span> <span data-ttu-id="2f41d-377">ファイナライザーがによって既に解放されているアンマネージ リソースを解放するを防ぐためにこれは、通常、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>実装します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-377">Typically, this is done to prevent the finalizer from releasing unmanaged resources that have already been freed by the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-378">次の例では、使用する方法、<xref:System.GC.SuppressFinalize%2A>冗長ガベージ コレクションが呼び出されるようにリソース クラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-378">The following example demonstrates how to use the <xref:System.GC.SuppressFinalize%2A> method in a resource class to prevent a redundant garbage collection from being called.</span></span> <span data-ttu-id="2f41d-379">この例では、 [dispose パターン](~/docs/standard/design-guidelines/dispose-pattern.md)両方を解放するマネージ リソース (実装するには、オブジェクト<xref:System.IDisposable>) リソースとアンマネージ リソース。</span><span class="sxs-lookup"><span data-stu-id="2f41d-379">The example uses the [dispose pattern](~/docs/standard/design-guidelines/dispose-pattern.md) to free both managed resources (that is, objects that implement <xref:System.IDisposable>) and unmanaged resources.</span></span>  
  
 [!code-csharp[System.GC.SuppressFinalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.suppressfinalize/cs/suppressfinalize1.cs#1)]
 [!code-vb[System.GC.SuppressFinalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.suppressfinalize/vb/suppressfinalize1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f41d-380">
            <paramref name="obj" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-380">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryStartNoGCRegion">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-381">クリティカル パスの実行中はガベージ コレクションが行われないよう、試行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-381">Attempts to disallow garbage collection during the execution of a critical path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="2f41d-382">呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-382">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="2f41d-383">つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-383">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion totalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="totalSize">
          <span data-ttu-id="2f41d-384">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-384">The amount of memory in bytes to allocate without triggering a garbage collection.</span>
          </span>
          <span data-ttu-id="2f41d-385">短期セグメントのサイズ以下でなければなりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-385">It must be less than or equal to the size of an ephemeral segment.</span>
          </span>
          <span data-ttu-id="2f41d-386">短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-386">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-387">指定した量のメモリを使用可能な場合、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-387">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-388">ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-388">
              <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-389"><xref:System.GC.TryStartNoGCRegion%28System.Int64%29>メソッドによって、アプリ コードのクリティカル領域の実行中にガベージ コレクションが禁止されている GC 領域待機時間モード、ガベージ コレクターに配置しようとしました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-389">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="2f41d-390">ランタイムは、最初に要求されたメモリ量を割り当てることができませんが、ガベージ コレクターは追加メモリを解放するためにフル ブロッキング ガベージ コレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-390">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="2f41d-391">ガベージ コレクターには GC 領域の無待機モードがない場合は、実際に 2 をここでは、メモリの量を割り当てることができません \*`totalSize`バイト (割り当てを試みます`totalSize`小さなオブジェクト ヒープのバイト数と`totalSize`のバイト数大きなオブジェクト ヒープ) のです。</span><span class="sxs-lookup"><span data-stu-id="2f41d-391">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` bytes (it attempts to allocate `totalSize` bytes for the small object heap and `totalSize` bytes for the large object heap).</span></span>  
  
 <span data-ttu-id="2f41d-392">`totalSize` クリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-392">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="2f41d-393">これには、アプリの代わりに、ランタイムでは、割り当てと同様に、アプリによる割り当てが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-393">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2f41d-394">呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-394">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="2f41d-395">つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-395">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="2f41d-396">呼び出すことによって、GC 領域の無待機モードを終了する、<xref:System.GC.EndNoGCRegion%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-396">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-397">
            <paramref name="totalSize" /> は、短期セグメント サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-397">
              <paramref name="totalSize" /> exceeds the ephemeral segment size.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f41d-398">プロセスは既に、非 GC 領域待機時間モードになっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-398">The process is already in no GC region latency mode.</span>
          </span>
        </exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="totalSize">
          <span data-ttu-id="2f41d-399">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-399">The amount of memory in bytes to allocate without triggering a garbage collection.</span>
          </span>
          <span data-ttu-id="2f41d-400">短期セグメントのサイズ以下でなければなりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-400">It must be less than or equal to the size of an ephemeral segment.</span>
          </span>
          <span data-ttu-id="2f41d-401">短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-401">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span>
          </span>
        </param>
        <param name="disallowFullBlockingGC">
          <span data-ttu-id="2f41d-402">ガベージ コレクターが最初に <c>totalSize</c> バイトを割り当てられなかったときにフル ブロッキング ガベージ コレクションを省略する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-402">
              <see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <c>totalSize</c> bytes; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-403">指定した量のメモリを使用可能な場合は、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。また、最初に十分な量のメモリを使用できない場合に、ガベージ コレクターがフル ブロッキング ガベージ コレクションを実行するかどうかを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-403">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-404">ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-404">
              <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-405"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29>メソッドによって、アプリ コードのクリティカル領域の実行中にガベージ コレクションが禁止されている GC 領域待機時間モード、ガベージ コレクターに配置しようとしました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-405">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="2f41d-406">かどうか、ランタイムは最初に要求されたメモリ量を割り当てることができませんが、`disallowFullBlockingGC`引数が`false`、ガベージ コレクターは、追加のメモリを解放するためにフル ブロッキング ガベージ コレクションを実行しますそれ以外の場合、割り当て失敗し、メソッドが返されます`false`します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-406">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="2f41d-407">ガベージ コレクターには GC 領域の無待機モードがない場合は、実際に 2 をここでは、メモリの量を割り当てることができません \* `totalSize` (割り当てを試みます`totalSize`小さなオブジェクト ヒープと`totalSize`ラージ オブジェクトヒープの場合)。</span><span class="sxs-lookup"><span data-stu-id="2f41d-407">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` (it attempts to allocate `totalSize` for the small object heap and `totalSize` for the large object heap).</span></span>  
  
 <span data-ttu-id="2f41d-408">`totalSize` クリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-408">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="2f41d-409">これには、アプリの代わりに、ランタイムでは、割り当てと同様に、アプリによる割り当てが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-409">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="2f41d-410">設定`disallowFullBlockingGC`に`true`フル ブロッキング ガベージを防ぐために十分なメモリが最初に使用可能な場合は、コレクションは負荷分散のシナリオで最も役に立つ: 1 つのシステムがこのメソッドを呼び出すし、返された場合は、要求を受け入れる準備ができてと報告`true`、返された場合は、他のシステムに要求をリダイレクトするロード バランサーあり`false`します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-410">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="2f41d-411">呼び出すことによって要求は処理されません。 場合に、フル ブロッキング ガベージ コレクションを実行できる、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-411">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2f41d-412">呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-412">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="2f41d-413">つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-413">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="2f41d-414">呼び出すことによって、GC 領域の無待機モードを終了する、<xref:System.GC.EndNoGCRegion%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-414">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-415">
            <paramref name="totalSize" /> は、短期セグメント サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-415">
              <paramref name="totalSize" /> exceeds the ephemeral segment size.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f41d-416">プロセスは既に、非 GC 領域待機時間モードになっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-416">The process is already in no GC region latency mode.</span>
          </span>
        </exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="lohSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="totalSize">
          <span data-ttu-id="2f41d-417">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-417">The amount of memory in bytes to allocate without triggering a garbage collection.</span>
          </span>
          <span data-ttu-id="2f41d-418">
            <c>totalSize</c> – <c>lohSize</c> は短期セグメントのサイズ以下でなければなりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-418">
              <c>totalSize</c> –<c>lohSize</c> must be less than or equal to the size of an ephemeral segment.</span>
          </span>
          <span data-ttu-id="2f41d-419">短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-419">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span>
          </span>
        </param>
        <param name="lohSize">
          <span data-ttu-id="2f41d-420">
            <c>totalSize</c> のうち、大きなオブジェクト ヒープ (LOH) の割り当てに使用するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-420">The number of bytes in <c>totalSize</c> to use for large object heap (LOH) allocations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-421">大きなオブジェクト ヒープおよび小さなオブジェクト ヒープに対して、指定した量のメモリを使用可能な場合、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-421">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-422">ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-422">
              <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-423"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29>メソッドによって、アプリ コードのクリティカル領域の実行中にガベージ コレクションが禁止されている GC 領域待機時間モード、ガベージ コレクターに配置しようとしました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-423">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="2f41d-424">ランタイムは、最初に要求されたメモリ量を割り当てることができませんが、ガベージ コレクターは追加メモリを解放するためにフル ブロッキング ガベージ コレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-424">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="2f41d-425">ガベージ コレクターには GC 領域の無待機モード入力しない場合は割り当てられません`lohSize`、LOH の場合は、 `totalSize` –`lohSize`小さなオブジェクト ヒープ (SOH)。</span><span class="sxs-lookup"><span data-stu-id="2f41d-425">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` – `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="2f41d-426">`lohSize` LOH のクリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要がありますと`totalSize`– `lohSize` soh のクリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-426">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` – `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="2f41d-427">これには、アプリの代わりに、ランタイムでは、割り当てと同様に、アプリによる割り当てが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-427">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2f41d-428">呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-428">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="2f41d-429">つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-429">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="2f41d-430">呼び出すことによって、GC 領域の無待機モードを終了する、<xref:System.GC.EndNoGCRegion%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-430">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-431">
            <paramref name="totalSize" /> – <paramref name="lohSize" /> は、短期セグメント サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-431">
              <paramref name="totalSize" /> – <paramref name="lohSize" /> exceeds the ephemeral segment size.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f41d-432">プロセスは既に、非 GC 領域待機時間モードになっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-432">The process is already in no GC region latency mode.</span>
          </span>
        </exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="lohSize" Type="System.Int64" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="totalSize">
          <span data-ttu-id="2f41d-433">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-433">The amount of memory in bytes to allocate without triggering a garbage collection.</span>
          </span>
          <span data-ttu-id="2f41d-434">
            <c>totalSize</c> – <c>lohSize</c> は短期セグメントのサイズ以下でなければなりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-434">
              <c>totalSize</c> –<c>lohSize</c> must be less than or equal to the size of an ephemeral segment.</span>
          </span>
          <span data-ttu-id="2f41d-435">短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-435">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span>
          </span>
        </param>
        <param name="lohSize">
          <span data-ttu-id="2f41d-436">
            <c>totalSize</c> のうち、大きなオブジェクト ヒープ (LOH) の割り当てに使用するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-436">The number of bytes in <c>totalSize</c> to use for large object heap (LOH) allocations.</span>
          </span>
        </param>
        <param name="disallowFullBlockingGC">
          <span data-ttu-id="2f41d-437">ガベージ コレクターが指定されたメモリを最初に小さなオブジェクト ヒープ (SOH) および LOH に割り当てられないときにフル ブロッキング ガベージ コレクションを省略する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-437">
              <see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-438">大きなオブジェクト ヒープおよび小さなオブジェクト ヒープに対して、指定した量のメモリを使用可能な場合は、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。また、最初に十分な量のメモリを使用できない場合に、ガベージ コレクターがフル ブロッキング ガベージ コレクションを実行するかどうかを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-438">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-439">ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-439">
              <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-440"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29>メソッドによって、アプリ コードのクリティカル領域の実行中にガベージ コレクションが禁止されている GC 領域待機時間モード、ガベージ コレクターに配置しようとしました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-440">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="2f41d-441">かどうか、ランタイムは最初に要求されたメモリ量を割り当てることができませんが、`disallowFullBlockingGC`引数が`false`、ガベージ コレクターは、追加のメモリを解放するためにフル ブロッキング ガベージ コレクションを実行しますそれ以外の場合、割り当て失敗し、メソッドが返されます`false`します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-441">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="2f41d-442">ガベージ コレクターには GC 領域の無待機モード入力しない場合は割り当てられません`lohSize`、LOH の場合は、 `totalSize` –`lohSize`小さなオブジェクト ヒープ (SOH)。</span><span class="sxs-lookup"><span data-stu-id="2f41d-442">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` – `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="2f41d-443">`lohSize` LOH のクリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要がありますと`totalSize`– `lohSize` soh のクリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="2f41d-443">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` – `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="2f41d-444">これには、アプリの代わりに、ランタイムでは、割り当てと同様に、アプリによる割り当てが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-444">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="2f41d-445">設定`disallowFullBlockingGC`に`true`フル ブロッキング ガベージを防ぐために十分なメモリが最初に使用可能な場合は、コレクションは負荷分散のシナリオで最も役に立つ: 1 つのシステムがこのメソッドを呼び出すし、返された場合は、要求を受け入れる準備ができてと報告`true`、返された場合は、他のシステムに要求をリダイレクトするロード バランサーあり`false`します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-445">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="2f41d-446">呼び出すことによって要求は処理されません。 場合に、フル ブロッキング ガベージ コレクションを実行できる、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-446">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2f41d-447">呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-447">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="2f41d-448">つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。</span><span class="sxs-lookup"><span data-stu-id="2f41d-448">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="2f41d-449">呼び出すことによって、GC 領域の無待機モードを終了する、<xref:System.GC.EndNoGCRegion%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-449">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-450">
            <paramref name="totalSize" /> – <paramref name="lohSize" /> は、短期セグメント サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-450">
              <paramref name="totalSize" /> – <paramref name="lohSize" /> exceeds the ephemeral segment size.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f41d-451">プロセスは既に、非 GC 領域待機時間モードになっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-451">The process is already in no GC region latency mode.</span>
          </span>
        </exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCApproach">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-452">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための、登録済みの通知の状態を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-452">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-453">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための、登録済みの通知の状態を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-453">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-454">登録済みのガベージ コレクションの通知の状態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-454">The status of the registered garbage collection notification.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-455">使用して、<xref:System.GCNotificationStatus>列挙型を使用して登録されている現在のガベージ コレクションの通知の状態を確認するには、このメソッドによって返される、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-455">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="2f41d-456">使用することも、<xref:System.GC.WaitForFullGCComplete%2A>フル ガベージ コレクションが完了したかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-456">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="2f41d-457">列挙体が返されるときに<xref:System.GCNotificationStatus.Succeeded>、割り当てられていると、コレクションを強制しないで、自分で使用できない追加のオブジェクトなどのタスクを行うことができます、<xref:System.GC.Collect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-457">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="2f41d-458">通知が保証されません、フル ガベージ コレクションが発生する、条件が発生する、フル ガベージ コレクションの高いしきい値に達したことだけに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2f41d-458">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="2f41d-459">このメソッドは、ガベージ コレクションの通知を取得するための無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-459">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="2f41d-460">通知を取得できないかどうかを返すメソッドのタイムアウト期間を指定する場合を使用して、<xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-460">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="2f41d-461">呼び出すことができます、タイムアウトを指定せずには、このメソッドを呼び出すの場合、<xref:System.GC.CancelFullGCNotification%2A>メソッド優先よりも長い時間待機している場合。</span><span class="sxs-lookup"><span data-stu-id="2f41d-461">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="2f41d-462">このメソッドの呼び出しを実行してください、<xref:System.GC.WaitForFullGCComplete%2A>フル ガベージ コレクションがあったかどうかを確認するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-462">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="2f41d-463">このメソッドを呼び出すだけで、不確定な結果が発生します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-463">Calling this method alone causes indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-464">次の例では、このメソッドを使用してフル ブロッキング ガベージ コレクションが近づいているかどうかを決定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-464">The following example shows how to use this method to determine whether a full, blocking garbage collection is approaching.</span></span> <span data-ttu-id="2f41d-465">通知の状態のときに<xref:System.GCNotificationStatus.Succeeded>、ユーザー メソッド`OnFullGCApproachNotify`コレクションが近づいているへの応答アクションを実行すると呼びます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-465">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCApproachNotify` is called to perform actions in response to the approaching collection.</span></span> <span data-ttu-id="2f41d-466">このコード例が示されている例の一部[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)トピック。</span><span class="sxs-lookup"><span data-stu-id="2f41d-466">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#3](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#3)]
 [!code-csharp[GCNotification#3](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#3)]
 [!code-vb[GCNotification#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="2f41d-467">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-467">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-468">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-468">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2f41d-469">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-469">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-470">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-470">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="2f41d-471">通知の状態が取得されるまで待機する時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-471">The length of time to wait before a notification status can be obtained.</span>
          </span>
          <span data-ttu-id="2f41d-472">無期限に待機するには -1 を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-472">Specify -1 to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-473">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための登録済みの通知の状態を、指定したタイムアウト時間で返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-473">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-474">登録済みのガベージ コレクションの通知の状態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-474">The status of the registered garbage collection notification.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-475">使用して、<xref:System.GCNotificationStatus>列挙型を使用して登録されている現在のガベージ コレクションの通知の状態を確認するには、このメソッドによって返される、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-475">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="2f41d-476">使用することも、<xref:System.GC.WaitForFullGCComplete%2A>フル ガベージ コレクションが完了したかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-476">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="2f41d-477">指定された値に関係なく、ガベージ コレクションの通知ステータスを取得するたびにすぐにこのメソッドが戻る注`millisecondsTimeout`します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-477">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="2f41d-478">前に、ガベージ コレクションの通知の状態を取得しないかどうかは`millisecondsTimeout`回、このメソッドが戻る<xref:System.GCNotificationStatus.NotApplicable>します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-478">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="2f41d-479">列挙体が返されるときに<xref:System.GCNotificationStatus.Succeeded>、割り当てられていると、コレクションを強制しないで、自分で使用できない追加のオブジェクトなどのタスクを行うことができます、<xref:System.GC.Collect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-479">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="2f41d-480">通知が保証されません、フル ガベージ コレクションが発生する、条件が発生する、フル ガベージ コレクションの高いしきい値に達したことだけに注意してください。</span><span class="sxs-lookup"><span data-stu-id="2f41d-480">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="2f41d-481">呼び出すことができます、<xref:System.GC.CancelFullGCNotification%2A>メソッド タイムアウト間隔の経過を待つことができない場合。</span><span class="sxs-lookup"><span data-stu-id="2f41d-481">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="2f41d-482">このメソッドの呼び出しを実行してください、<xref:System.GC.WaitForFullGCComplete%2A>フル ガベージ コレクションがあったかどうかを確認するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-482">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="2f41d-483">このメソッドを呼び出すだけで、不確定な結果が発生します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-483">Calling this method alone causes indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f41d-484">
            <paramref name="millisecondsTimeout" /> は負でない数値、<see cref="F:System.Int32.MaxValue" /> 以下の数値、または -1 であることが必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-484">
              <paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="2f41d-485">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-485">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-486">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-486">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2f41d-487">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-487">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-488">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-488">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCComplete">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-489">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための、登録済みの通知の状態を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-489">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-490">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための、登録済みの通知の状態を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-490">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-491">登録済みのガベージ コレクションの通知の状態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-491">The status of the registered garbage collection notification.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-492">使用して、<xref:System.GCNotificationStatus>列挙型を使用して登録されている現在のガベージ コレクションの通知の状態を確認するには、このメソッドによって返される、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-492">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="2f41d-493">使用することも、<xref:System.GC.WaitForFullGCApproach%2A>フル ガベージ コレクションが近づいているかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-493">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="2f41d-494">列挙体が返されるときに<xref:System.GCNotificationStatus.Succeeded>、作業を再開して、コレクションの数を取得するなどのタスクを行うことができます、<xref:System.GC.CollectionCount%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2f41d-494">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="2f41d-495">このメソッドは、ガベージ コレクションの通知を取得するための無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-495">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="2f41d-496">通知を取得できないかどうかを返すメソッドのタイムアウト期間を指定する場合を使用して、<xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="2f41d-496">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="2f41d-497">呼び出すことができます、タイムアウトを指定せずには、このメソッドを呼び出すの場合、<xref:System.GC.CancelFullGCNotification%2A>メソッド優先よりも長い時間待機している場合。</span><span class="sxs-lookup"><span data-stu-id="2f41d-497">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="2f41d-498">このメソッドの呼び出しの前の呼び出しにする必要があります、<xref:System.GC.WaitForFullGCApproach%2A>フル ガベージ コレクションがあったかどうかを確認するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-498">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="2f41d-499">このメソッドを呼び出すだけで不確定な結果を生成できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-499">Calling this method alone can produce indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-500">次の例では、このメソッドを使用して、フル ガベージ コレクションが完了したかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-500">The following example shows how to use this method to determine whether a full garbage collection has completed.</span></span> <span data-ttu-id="2f41d-501">通知の状態のときに<xref:System.GCNotificationStatus.Succeeded>、ユーザー メソッド`OnFullGCCompletedNotify`が呼び出され、完了したコレクションへの応答で操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-501">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCCompletedNotify` is called to perform actions in response to the completed collection.</span></span> <span data-ttu-id="2f41d-502">このコード例が示されている例の一部[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)トピック。</span><span class="sxs-lookup"><span data-stu-id="2f41d-502">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#4](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#4)]
 [!code-csharp[GCNotification#4](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#4)]
 [!code-vb[GCNotification#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="2f41d-503">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-503">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-504">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-504">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2f41d-505">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-505">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-506">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-506">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="2f41d-507">通知の状態が取得されるまで待機する時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-507">The length of time to wait before a notification status can be obtained.</span>
          </span>
          <span data-ttu-id="2f41d-508">無期限に待機するには -1 を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-508">Specify -1 to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f41d-509">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための登録済みの通知の状態を、指定したタイムアウト時間で返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-509">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f41d-510">登録済みのガベージ コレクションの通知の状態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-510">The status of the registered garbage collection notification.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-511">使用して、<xref:System.GCNotificationStatus>列挙型を使用して登録されている現在のガベージ コレクションの通知の状態を確認するには、このメソッドによって返される、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-511">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="2f41d-512">使用することも、<xref:System.GC.WaitForFullGCApproach%2A>フル ガベージ コレクションが近づいているかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-512">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="2f41d-513">指定された値に関係なく、ガベージ コレクションの通知ステータスを取得するたびにすぐにこのメソッドが戻る注`millisecondsTimeout`します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-513">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="2f41d-514">前に、ガベージ コレクションの通知の状態を取得しないかどうかは`millisecondsTimeout`回、このメソッドが戻る<xref:System.GCNotificationStatus.NotApplicable>します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-514">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="2f41d-515">列挙体が返されるときに<xref:System.GCNotificationStatus.Succeeded>、作業を再開して、コレクションの数を取得するなどのタスクを行うことができます、<xref:System.GC.CollectionCount%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2f41d-515">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="2f41d-516">呼び出すことができます、<xref:System.GC.CancelFullGCNotification%2A>メソッド タイムアウト間隔の経過を待つことができない場合。</span><span class="sxs-lookup"><span data-stu-id="2f41d-516">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="2f41d-517">このメソッドの呼び出しの前の呼び出しにする必要があります、<xref:System.GC.WaitForFullGCApproach%2A>フル ガベージ コレクションがあったかどうかを確認するメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-517">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="2f41d-518">このメソッドを呼び出すだけで不確定な結果を生成できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-518">Calling this method alone can produce indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f41d-519">
            <paramref name="millisecondsTimeout" /> は負でない数値、<see cref="F:System.Int32.MaxValue" /> 以下の数値、または -1 であることが必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-519">
              <paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="2f41d-520">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-520">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-521">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-521">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2f41d-522">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-522">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2f41d-523">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-523">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForPendingFinalizers">
      <MemberSignature Language="C#" Value="public static void WaitForPendingFinalizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitForPendingFinalizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForPendingFinalizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitForPendingFinalizers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitForPendingFinalizers();" />
      <MemberSignature Language="F#" Value="static member WaitForPendingFinalizers : unit -&gt; unit" Usage="System.GC.WaitForPendingFinalizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f41d-524">ファイナライザーのキューを処理するスレッドがそのキューを空にするまで、現在のスレッドを中断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f41d-524">Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f41d-525">ガベージ コレクターによって再要求できるオブジェクトで見つかったときに、オブジェクトの終了処理の要件を決定するには、各オブジェクトを確認します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-525">When the garbage collector finds objects that can be reclaimed, it checks each object to determine the object's finalization requirements.</span></span> <span data-ttu-id="2f41d-526">オブジェクトがファイナライザーを実装してし、を呼び出して終了処理を無効になってがいないかどうか<xref:System.GC.SuppressFinalize%2A>、終了準備完了としてマークされているオブジェクトの一覧でオブジェクトが配置されます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-526">If an object implements a finalizer and has not disabled finalization by calling <xref:System.GC.SuppressFinalize%2A>, the object is placed in a list of objects that are marked as ready for finalization.</span></span> <span data-ttu-id="2f41d-527">ガベージ コレクター、<xref:System.Object.Finalize%2A>一覧からエントリを削除します。 このリスト内のオブジェクトのメソッド。</span><span class="sxs-lookup"><span data-stu-id="2f41d-527">The garbage collector calls the <xref:System.Object.Finalize%2A> methods for the objects in this list and removes the entries from the list.</span></span> <span data-ttu-id="2f41d-528">このメソッドはブロックされるまでのすべてのファイナライザーの実行が終了します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-528">This method blocks until all finalizers have run to completion.</span></span>  
  
 <span data-ttu-id="2f41d-529">このメソッドが終了される保証はありませんので、ファイナライザーが実行されるスレッドは指定しません。</span><span class="sxs-lookup"><span data-stu-id="2f41d-529">The thread on which finalizers are run is unspecified, so there is no guarantee that this method will terminate.</span></span> <span data-ttu-id="2f41d-530">ただし、中に別のスレッドによってこのスレッドを中断できる、<xref:System.GC.WaitForPendingFinalizers%2A>メソッドが進行中です。</span><span class="sxs-lookup"><span data-stu-id="2f41d-530">However, this thread can be interrupted by another thread while the <xref:System.GC.WaitForPendingFinalizers%2A> method is in progress.</span></span> <span data-ttu-id="2f41d-531">たとえば、一定期間を待機し、このスレッドがまだ中断されている場合、このスレッドを中断する別のスレッドを開始できます。</span><span class="sxs-lookup"><span data-stu-id="2f41d-531">For example, you can start another thread that waits for a period of time and then interrupts this thread if this thread is still suspended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f41d-532">次の例では、使用する方法、<xref:System.GC.WaitForPendingFinalizers%2A>メソッドを収集されたすべてのオブジェクトの最終処理が完了するまで、現在のスレッドを中断します。</span><span class="sxs-lookup"><span data-stu-id="2f41d-532">The following example demonstrates how to use the <xref:System.GC.WaitForPendingFinalizers%2A> method to suspend the current thread until finalization of all the collected objects is complete.</span></span>  
  
 [!code-cpp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CS/class1.cs#1)]
 [!code-vb[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>