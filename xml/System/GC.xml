<Type Name="GC" FullName="System.GC">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="49d7f123c5b7e13096e48237964ba4928d5d2ae9" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52244364" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class GC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GC extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.GC" />
  <TypeSignature Language="VB.NET" Value="Public Class GC" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC abstract sealed" />
  <TypeSignature Language="F#" Value="type GC = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>未使用メモリを自動的に収集するサービスであるシステム ガベージ コレクターを制御します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ガベージ コレクターは、割り当てとマネージ メモリの解放を制御する共通言語ランタイム コンポーネントです。 このクラスのメソッドは、オブジェクトとそのオブジェクトによって割り当てられたリソースがリリースされたときに、ガベージ コレクションが実行されるときに影響します。 このクラスのプロパティは、システムおよび年齢のカテゴリ、または生成、オブジェクトに割り当てられたメモリの使用可能なメモリの合計金額についての情報を提供します。  
  
 ガベージ コレクターは、追跡し、マネージ メモリに割り当てられたオブジェクトを解放します。 定期的に、ガベージ コレクターを有効な参照がないオブジェクトに割り当てられたメモリを解放するガベージ コレクションを実行します。 ガベージ コレクションは、利用可能なメモリを使用してメモリの要求を満たすことができないときに自動的に行われます。 また、アプリケーションが使用してガベージ コレクションを強制することができます、<xref:System.GC.Collect%2A>メソッド。  
  
 ガベージ コレクションは、次の手順で構成されます。  
  
1.  ガベージ コレクターは、マネージ コードで参照されているマネージ オブジェクトを検索します。  
  
2.  ガベージ コレクターは、参照されていないオブジェクトの終了を試みます。  
  
3.  ガベージ コレクターは、参照されていないオブジェクトを解放し、そのメモリを解放します。  
  
 このトピックには、次のセクションがあります。  
  
 [ガベージ コレクターとアンマネージ リソース](#unmanaged)   
 [オブジェクトの世代と世代](#generations)   
 [ガベージ コレクションを禁止しています](#NoGCRegion)  
  
<a name="unmanaged"></a>   
## <a name="the-garbage-collector-and-unmanaged-resources"></a>ガベージ コレクターとアンマネージ リソース  
 マネージ コードで、オブジェクトへの 1 つまたは複数の参照を見つけた場合、ガベージ コレクター、コレクションの実行時オブジェクトは無料ではありません。 ただし、ガベージ コレクターは、アンマネージ コードからオブジェクトへの参照を認識しないと、これから明示的に禁止されていない限り、アンマネージ コード内だけで使用されているオブジェクトを解放することがあります。 <xref:System.GC.KeepAlive%2A>メソッドは、ガベージ コレクターがアンマネージ コードでまだ使用されているオブジェクトを収集することを防止するメカニズムを提供します。  
  
 マネージ メモリの割り当てとは別に、ガベージ コレクターの実装ではファイル ハンドルやデータベース接続などのオブジェクトによって保持されているリソースに関する情報は維持されません。 型は、型のインスタンスがクリアされる前にリリースする必要があるアンマネージ リソースを使用する場合、型はファイナライザーを実装できます。  
  
 ほとんどの場合、ファイナライザーをオーバーライドすることによって実装されます、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッドです。 ただし、c# または C++ で記述された型を実装のオーバーライドにするコンパイラが有効にするデストラクター<xref:System.Object.Finalize%2A?displayProperty=nameWithType>します。 ほとんどの場合、オブジェクトに、ファイナライザーがある場合、ガベージ コレクターでそのオブジェクトを解放する前に、 ただし、ガベージ コレクターはすべての状況でファイナライザーを呼び出す必要はありません。たとえば、<xref:System.GC.SuppressFinalize%2A>メソッドが呼び出されることを明示的にオブジェクトのファイナライザーを防ぎます。 また、ガベージ コレクターでは、特定のスレッドを使用して、オブジェクトの終了または相互に参照がガベージ コレクション用に使用できるオブジェクトのファイナライザーが呼び出されて、順序は保証する必要はありません。  
  
 特定の時点でリソースを解放する必要があります場所では、クラスに実装できる、<xref:System.IDisposable>インターフェイスが含まれています、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>リソース管理とクリーンアップ タスクを実行するメソッド。 実装するクラス<xref:System.IDisposable.Dispose%2A>する必要がありますを指定、クラスのコントラクトの一部としてクラスのコンシューマーが、オブジェクトをクリーンアップするメソッドを呼び出す場合。 ガベージ コレクターは、既定では、呼び出しません、<xref:System.IDisposable.Dispose%2A>メソッドです。 ただし、の実装、<xref:System.IDisposable.Dispose%2A>メソッド呼び出すことができます、<xref:System.GC>ガベージ コレクターの終了処理の動作をカスタマイズするクラス。  
  
 オブジェクトのファイナライザーと dispose パターンの詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。  
  
<a name="generations"></a>   
## <a name="object-aging-and-generations"></a>オブジェクトの世代と世代  
 共通言語ランタイムのガベージ コレクターには、世代を使用してオブジェクトの世代がサポートしています。 世代は、メモリ内のオブジェクトの相対的な経過時間の測定単位です。 世代番号、またはオブジェクトの有効期間は、オブジェクトが属している世代を示します。 最近作成されたオブジェクトは新しいジェネレーションの一部であるあり、アプリケーション ライフ サイクルの前半で作成されたオブジェクトのサイクルよりも低い世代番号になります。 最新のジェネレーションのオブジェクトは、ジェネレーション 0 では。 ガベージ コレクターのこの実装では、オブジェクトの 3 つの世代、世代 0、1、および 2 をサポートします。 値を取得することができます、<xref:System.GC.MaxGeneration%2A>システムでサポートされている最大生成数を決定するプロパティ。  
  
 オブジェクトの世代では、すべてのジェネレーションを評価するガベージ コレクターを必要とするのではなく、世代の特定のセットにガベージ コレクションの対象アプリケーションができます。 オーバー ロード、<xref:System.GC.Collect%2A>メソッドが含まれる、`generation`パラメーターを使用すると、最も古いジェネレーションのガベージ コレクションを指定できます。  
  
<a name="NoGCRegion"></a>   
## <a name="disallowing-garbage-collection"></a>ガベージ コレクションを禁止しています  
 以降では、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]、ガベージ コレクターは、GC 領域待機時間モードなしでガベージ コレクションはパフォーマンスに悪影響をアプリのクリティカル パスの実行中に使用できるをサポートしています。 GC 領域の無待機モードでは、競合することがなく、ガベージ コレクターから割り当て可能なメモリの容量を指定する必要があります。 ランタイムでは、そのメモリを割り当てることができる場合、ランタイムは実行しませんガベージ コレクションのクリティカル パスにコードの実行中。  
  
 オーバー ロードのいずれかを呼び出していない GC 領域のクリティカル パスの先頭を定義する、<xref:System.GC.TryStartNoGCRegion%2A>します。 呼び出して、クリティカル パスの末尾を指定する、<xref:System.GC.EndNoGCRegion%2A>メソッド。  
  
 呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。 つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。  
  
   
  
## Examples  
 次の例では、いくつかの GC メソッドを使用して、生成および使用されていないオブジェクトのブロックのメモリ情報を取得し、コンソールに出力します。 使用されていないオブジェクトを収集し、し、結果として得られるメモリの合計が表示されます。  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.GCSettings" />
    <related type="Article" href="~/docs/standard/garbage-collection/index.md">ガベージ コレクション</related>
    <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2">ガベージ コレクションの基礎</related>
  </Docs>
  <Members>
    <Member MemberName="AddMemoryPressure">
      <MemberSignature Language="C#" Value="public static void AddMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AddMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member AddMemoryPressure : int64 -&gt; unit" Usage="System.GC.AddMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated">割り当てられたアンマネージ メモリの増加量。</param>
        <summary>アンマネージ メモリが大規模に割り当てられたため、ガベージ コレクションをスケジュールするときに考慮する必要があることが、ランタイムに通知されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ガベージ コレクションのスケジュールを決定するには、ランタイムは考慮マネージ メモリの量が割り当てられます。 小さなマネージ オブジェクトが大量のアンマネージ メモリを割り当てる場合、ランタイムはマネージ メモリだけを考慮し、したがってガベージ コレクションのスケジュールの緊急度を過小評価します。 <xref:System.GC.AddMemoryPressure%2A>メソッドは、システム メモリにこの追加の負荷のランタイムを通知します。  
  
 最も簡単な使用パターン、マネージ オブジェクト コンス トラクターで、アンマネージ メモリの割り当てし、解放する、`Dispose`または`Finalize`メソッド。 呼び出す、<xref:System.GC.AddMemoryPressure%2A>アンマネージ メモリを割り当てた後にメソッドを呼び出すと、<xref:System.GC.RemoveMemoryPressure%2A>メソッドを解放するとします。  
  
 場所、アンマネージ メモリの割り当てはマネージ オブジェクトの有効期間中に大幅に変更より複雑なシナリオで呼び出すことができます、<xref:System.GC.AddMemoryPressure%2A>と<xref:System.GC.RemoveMemoryPressure%2A>実行時に増分変更を通知するメソッド。  
  
> [!CAUTION]
>  追加する圧力の量だけを削除することを確認する必要があります。 そのために失敗するの長時間実行されるアプリケーションでシステムのパフォーマンスが低下することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bytesAllocated" /> が 0 以下です。  
  
- または - 
32 ビットのコンピューターで、<paramref name="bytesAllocated" /> の値が <see cref="F:System.Int32.MaxValue" /> の値を超えています。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">ガベージ コレクションの優先順位を操作するときに、アンマネージ コードを呼び出す機能。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <Member MemberName="CancelFullGCNotification">
      <MemberSignature Language="C#" Value="public static void CancelFullGCNotification ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelFullGCNotification() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CancelFullGCNotification" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelFullGCNotification ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelFullGCNotification();" />
      <MemberSignature Language="F#" Value="static member CancelFullGCNotification : unit -&gt; unit" Usage="System.GC.CancelFullGCNotification " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ガベージ コレクションの通知の登録をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して登録されたガベージ コレクションの通知をキャンセル、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。 後続の呼び出しでパラメーター値のしきい値を調整する前にこのメソッドを呼び出す必要はありません、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。  
  
   
  
## Examples  
 次の例では、ガベージ コレクションの登録をキャンセルします。 この例が示されている例の一部、[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)トピック。  
  
 [!code-cpp[GCNotification#7](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#7)]
 [!code-csharp[GCNotification#7](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#7)]
 [!code-vb[GCNotification#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">同時実行ガベージ コレクションが有効の場合、このメンバーは使用できません。 同時実行ガベージ コレクションを無効にする方法については、[&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) 実行時設定をご覧ください。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89">ガベージ コレクションの通知</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Collect">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>強制的にガベージ コレクションを行います。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect();" />
      <MemberSignature Language="F#" Value="static member Collect : unit -&gt; unit" Usage="System.GC.Collect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのジェネレーションのガベージ コレクションを直ちに強制実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、アクセスできるすべてのメモリを解放しようとしてください。 すべてのジェネレーションのブロッキング ガベージ コレクションが実行します。  
  
 コレクションはどのくらいの時間が長かった、メモリ内に関係なく、すべてのオブジェクトと見なされますただし、マネージ コードで参照されるオブジェクトは収集されません。 使用可能なメモリの最大量を再利用しようとするのにシステムを強制するのにには、このメソッドを使用します。  
  
 以降では、 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]、大きなオブジェクト ヒープ (LOH) を設定して圧縮することができます、<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>プロパティを<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>呼び出す前に、<xref:System.GC.Collect%2A>メソッドでは、次の例として示します。  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.GC.Collect%2A>メモリのすべてのジェネレーションのコレクションを実行するメソッド。 コードが使用されていないオブジェクトは、数を生成しを呼び出して、<xref:System.GC.Collect%2A>メソッドをメモリから消去します。  
  
 [!code-cpp[System.GC.Collect Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.Collect Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.Collect Example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.Collect Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/019008fe-4708-4e65-bebf-04fd9941e149">発生したコレクション</related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation);" />
      <MemberSignature Language="F#" Value="static member Collect : int -&gt; unit" Usage="System.GC.Collect generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</param>
        <summary>ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを直ちに強制実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、アクセスできないメモリの解放を試みます。 ただし、このメソッドを使用していないわけでは指定したジェネレーション内のすべてのアクセスできないメモリが解放されること。  
  
 世代番号のオブジェクトはガベージ コレクターによって収集しないオブジェクトの世代が実装されている場合、指定された世代より高い。 オブジェクトの世代が実装されていない場合、ガベージ コレクターはガベージ コレクション中にすべてのオブジェクトと見なします。  
  
 使用して、<xref:System.GC.MaxGeneration%2A>プロパティの最大有効値を決定する、`generation`パラメーター。  
  
 ガベージ コレクターがその世代に関係なくすべてのオブジェクトには、このパラメーターをとらないメソッドのバージョンを使用します。 に基づいてオブジェクトの再利用、ガベージ コレクターが、<xref:System.GCCollectionMode>設定を使用して、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType>メソッドのオーバー ロードします。  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.GC.Collect%2A>メモリの個々 のレイヤーのコレクションを実行するメソッド。 コードが使用されていないオブジェクトは、数を生成しを呼び出して、<xref:System.GC.Collect%2A>メソッドをメモリから消去します。  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="generation" /> が無効です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/019008fe-4708-4e65-bebf-04fd9941e149">発生したコレクション</related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode -&gt; unit" Usage="System.GC.Collect (generation, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
      </Parameters>
      <Docs>
        <param name="generation">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</param>
        <param name="mode">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</param>
        <summary>
          <see cref="T:System.GCCollectionMode" /> 値によって指定したタイミングで、ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを強制的に実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、`mode`かどうかガベージ コレクションが発生のみまたはすぐに時間は、オブジェクトの再利用する最適なかどうかを指定するパラメーター。 このメソッドを使用しても、指定したジェネレーション内のすべてのアクセスできないメモリが解放されることとは限りません。  
  
 アプリケーションで重要な期間中にガベージ コレクションの割り込みの動作を調整する設定、<xref:System.Runtime.GCSettings.LatencyMode%2A>プロパティ。  
  
 ガベージ コレクターはジェネレーションの番号で指定されている上位のオブジェクトを収集しません、`generation`パラメーター。 使用して、<xref:System.GC.MaxGeneration%2A>プロパティの最大有効値を決定する`generation`します。  
  
 ガベージ コレクターがその世代に関係なくすべてのオブジェクトには、このパラメーターをとらないメソッドのバージョンを使用します。  
  
 オブジェクトの指定ジェネレーションまでのオブジェクトの再利用、使用して、ガベージ コレクターが、<xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType>メソッドのオーバー ロードします。 Generation の最大値を指定する場合は、すべてのオブジェクトが収集されます。  
  
   
  
## Examples  
 次の例には、第 2 世代のオブジェクトをガベージ コレクションが強制実行、<xref:System.GCCollectionMode.Optimized>設定します。  
  
 [!code-csharp[System.GC.GCCollectionMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GCCollectionMode/cs/Program.cs#1)]
 [!code-vb[System.GC.GCCollectionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GCCollectionMode/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="generation" /> が無効です。  
  
- または - 
 <paramref name="mode" /> は <see cref="T:System.GCCollectionMode" /> 値のいずれでもありません。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/019008fe-4708-4e65-bebf-04fd9941e149">発生したコレクション</related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
        <Parameter Name="blocking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="generation">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</param>
        <param name="mode">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</param>
        <param name="blocking">ブロッキング ガベージ コレクションを実行する場合は <see langword="true" />。可能な限りバックグラウンド ガベージ コレクションを実行する場合は <see langword="false" />。</param>
        <summary>ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを、 <see cref="T:System.GCCollectionMode" /> 値で指定したタイミングで強制実行します。コレクションをブロックする必要があるかどうかを指定する値を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表の相互作用をまとめたものです、`mode`と`blocking`パラメーター。  
  
|`mode`|`blocking` は `true` です|`blocking` は `false` です|  
|-|-|-|  
|<xref:System.GCCollectionMode.Forced> または <xref:System.GCCollectionMode.Default>|ブロッキング コレクションはできるだけ早く実行されます。 バック グラウンド コレクションが進行中の場合と`generation`0 または 1 の場合は、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29>メソッドは直ちにブロッキング コレクションをトリガーし、コレクションが完了したらを返します。 バック グラウンド コレクションが進行中の場合と`generation`が 2 で、メソッドを待機するまで、バック グラウンド コレクションが完了したら、ジェネレーション 2 のブロッキング コレクションでは、トリガーおよびを返します。|コレクションはできるだけ早く実行されます。 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> メソッドはバックグラウンド コレクションを要求しますが、それは保証されず、状況によってはブロッキング コレクションが実行される場合もあります。 バックグラウンド コレクションが既に実行中の場合、メソッドはすぐに制御を返します。|  
|<xref:System.GCCollectionMode.Optimized>|ガベージ コレクターおよび `generation` パラメーターの状態によっては、ブロッキング コレクションが実行される場合があります。 ガベージ コレクターは最適なパフォーマンスを提供しようとします。|ガベージ コレクターの状態によっては、コレクションが実行される場合があります。 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> メソッドはバックグラウンド コレクションを要求しますが、それは保証されず、状況によってはブロッキング コレクションが実行される場合もあります。 ガベージ コレクターは最適なパフォーマンスを提供しようとします。 バックグラウンド コレクションが既に実行中の場合、メソッドはすぐに制御を返します。|  
  
 呼び出し、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29>メソッドがフル ブロッキング ガベージ コレクションを実行する設定して、大きなオブジェクト ヒープを圧縮することもできます、<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>プロパティを<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>呼び出す前に、<xref:System.GC.Collect%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="generation" /> が無効です。  
  
- または - 
 <paramref name="mode" /> は <see cref="T:System.GCCollectionMode" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking, bool compacting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean, compacting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking, compacting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
        <Parameter Name="blocking" Type="System.Boolean" />
        <Parameter Name="compacting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="generation">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</param>
        <param name="mode">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</param>
        <param name="blocking">ブロッキング ガベージ コレクションを実行する場合は <see langword="true" />。可能な限りバックグラウンド ガベージ コレクションを実行する場合は <see langword="false" />。</param>
        <param name="compacting">小さなオブジェクト ヒープの圧縮を行う場合は <see langword="true" />、スイープのみ行う場合は <see langword="false" />。</param>
        <summary>ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを、 <see cref="T:System.GCCollectionMode" /> 値で指定したタイミングで強制実行します。コレクションをブロックおよび圧縮する必要があるかどうかを指定する値を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`blocking`は`false`GC は、バック グラウンドまたはブロッキング ガベージ コレクションを実行するかどうかを決定します。 場合`compacting`は`true`、ブロッキング ガベージ コレクションを実行します。  
  
 場合`compacting`は`true`ランタイムが、小さなオブジェクト ヒープ (SOH) を圧縮します。 しない限り、大きなオブジェクト ヒープ (LOH) は圧縮されません、<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>プロパティに設定されて<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>します。 すべてブロッキング ガベージ コレクション、いないだけフル ブロッキング ガベージ コレクションを含むことに注意してください。  
  
 呼び出すことができます、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>メソッドに次のコード フラグメントに示すように、マネージ ヒープを最小サイズできるに減らします。  
  
 [!code-csharp[System.GC.Collect#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect/cs/collect4.cs#1)]
 [!code-vb[System.GC.Collect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect/vb/collect4.vb#1)]  
  
 指定する`true`の`compacting`引数は、圧縮、フル ブロッキング ガベージ コレクションを保証します。 設定、<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>プロパティを<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>により、LOH と SOH を最適化します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionCount">
      <MemberSignature Language="C#" Value="public static int CollectionCount (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CollectionCount(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CollectionCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionCount (generation As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CollectionCount(int generation);" />
      <MemberSignature Language="F#" Value="static member CollectionCount : int -&gt; int" Usage="System.GC.CollectionCount generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation">ガベージ コレクションの回数を確認するオブジェクトのジェネレーション。</param>
        <summary>指定したジェネレーションのオブジェクトに対するガベージ コレクションの発生回数を返します。</summary>
        <returns>プロセスの起動後に、指定したジェネレーションに対して発生したガベージ コレクションの回数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 独自のリソース管理を実装する場合は、定期的に呼び出すことによってガベージ コレクションを強制的には必要、<xref:System.GC.Collect%2A>メソッド。 これは負荷の高い操作であるため、ガベージ コレクションが最近発生したときに、呼び出しをスキップしてパフォーマンスを向上できます。 によって返される値を保存<xref:System.GC.CollectionCount%2A>呼び出した直後後<xref:System.GC.Collect%2A>します。 呼び出す必要があります、次回<xref:System.GC.Collect%2A>、によって返される現在の値を比較<xref:System.GC.CollectionCount%2A>保存値。 2 つの値が等しい場合は、それまでの間でコレクションが発生していないと、呼び出しするが妥当<xref:System.GC.Collect%2A>もう一度です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="generation" /> が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndNoGCRegion">
      <MemberSignature Language="C#" Value="public static void EndNoGCRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndNoGCRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.EndNoGCRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndNoGCRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndNoGCRegion();" />
      <MemberSignature Language="F#" Value="static member EndNoGCRegion : unit -&gt; unit" Usage="System.GC.EndNoGCRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GC 領域の無待機モードを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.EndNoGCRegion%2A>メソッドがスローされます、<xref:System.InvalidOperationException>ガベージ コレクターが GC 領域の無待機モードでない場合。 これは、次の条件のいずれかで発生します。  
  
-   <xref:System.GC.TryStartNoGCRegion%2A>メソッドが既に呼び出されていません。  
  
-   呼び出し、<xref:System.GC.TryStartNoGCRegion%2A>メソッドが返される`false`します。  
  
-   呼び出し、<xref:System.GC.TryStartNoGCRegion%2A>メソッドが例外をスローしました。  
  
 次のようにコードを使用してこれらの理由からいずれかの例外を回避できます。  
  
 [!code-csharp[System.GC.EndNoGCRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.endnogcregion/cs/endnogcregion1.cs#1)]
 [!code-vb[System.GC.EndNoGCRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.endnogcregion/vb/endnogcregion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ガベージ コレクターが、GC 領域の無待機モードではありません。  
  
- または - 
ガベージ コレクションが発生したために、GC 領域の無待機モードは前に終了されました。  
  
- または - 
メモリ割り当てが、<see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> メソッドの呼び出しで指定された量を超えています。</exception>
        <altmember cref="M:System.GC.TryStartNoGCRegion(System.Int64)" />
        <altmember cref="P:System.Runtime.GCSettings.LatencyMode" />
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81">待機モード</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllocatedBytesForCurrentThread">
      <MemberSignature Language="C#" Value="public static long GetAllocatedBytesForCurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetAllocatedBytesForCurrentThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetAllocatedBytesForCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllocatedBytesForCurrentThread () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetAllocatedBytesForCurrentThread();" />
      <MemberSignature Language="F#" Value="static member GetAllocatedBytesForCurrentThread : unit -&gt; int64" Usage="System.GC.GetAllocatedBytesForCurrentThread " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>その有効期間の開始以降、現在のスレッドに割り当てられた総バイト数を取得します。</summary>
        <returns>その有効期間の開始以降、現在のスレッドに割り当てられた総バイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

`GetAllocatedBytesForCurrentThread`メソッドは、ガベージ コレクションで残ったバイトの合計数ではないスレッドの有効期間中に、マネージ ヒープで割り当てられたバイト数の合計数を返します。 また、返される値では、任意のネイティブの割り当ては含まれません。

このメソッドは scenarious 時間間隔またはイベント間のメモリの割り当てに差を測定するための監視に最も役立ちます。

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGeneration">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクトの現在のジェネレーション番号を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : obj -&gt; int" Usage="System.GC.GetGeneration obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">ジェネレーションの情報を検索する対象のオブジェクト。</param>
        <summary>指定したオブジェクトの現在のジェネレーション番号を返します。</summary>
        <returns>
          <paramref name="obj" /> の現在のジェネレーション番号。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、オブジェクトの有効期間を特定しでその情報を使用して、<xref:System.GC.Collect%2A>同じ世代のオブジェクトをガベージ コレクターが収集を強制する方法。 たとえば、グループとして作成されると同時にアクセスできなくなりますオブジェクトのセットがある場合は、このメソッドを使用します。  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.GC.GetGeneration%2A>オブジェクトの有効期間を決定する方法。 例では、メモリをクリーンアップしてより前を比較し、コンソールでメモリの合計のコレクションを投稿するガベージ コレクションを実行します。  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (WeakReference wo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(class System.WeakReference wo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.WeakReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (wo As WeakReference) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(WeakReference ^ wo);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : WeakReference -&gt; int" Usage="System.GC.GetGeneration wo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wo" Type="System.WeakReference" />
      </Parameters>
      <Docs>
        <param name="wo">ジェネレーション番号を確認する対象のオブジェクトを参照する <see cref="T:System.WeakReference" />。</param>
        <summary>指定した弱い参照の対象となる現在のジェネレーション番号を返します。</summary>
        <returns>
          <paramref name="wo" /> の対象となる現在のジェネレーション番号。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、使用、<xref:System.GC.GetGeneration%2A>弱い参照オブジェクトの有効期間を決定する方法。  
  
 [!code-cpp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CPP/systemgcgetgenerationweak.cpp#1)]
 [!code-csharp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CS/systemgcgetgenerationweak.cs#1)]
 [!code-vb[System.GC.GetGenerationWeak Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/VB/systemgcgetgenerationweak.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="wo" /> に対して既にガベージ コレクションが実行されています。</exception>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetTotalMemory">
      <MemberSignature Language="C#" Value="public static long GetTotalMemory (bool forceFullCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalMemory(bool forceFullCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalMemory(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalMemory (forceFullCollection As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTotalMemory(bool forceFullCollection);" />
      <MemberSignature Language="F#" Value="static member GetTotalMemory : bool -&gt; int64" Usage="System.GC.GetTotalMemory forceFullCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceFullCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceFullCollection">ガベージ コレクションの発生を待ってから制御を戻す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>現在割り当てられていると思われるバイト数を取得します。 パラメーターは、このメソッドが制御を戻す前に短い時間だけ待機して、システムがガベージ コレクションを行い、オブジェクトの終了操作を実行できるようにするかどうかを示します。</summary>
        <returns>マネージド メモリに現在割り当てられているバイト数の最もよい近似値となる数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、`forceFullCollection`パラメーターが`true`システムがガベージを収集し、オブジェクトをファイナライズ中に、このメソッドが返す前に、短い間隔を待機します。 間隔の時間は、完了したガベージ コレクション サイクルの数によって決まります、内部的に指定された制限とサイクル間で回復するメモリ量の変更は。 ガベージ コレクターでは、アクセスできないすべてのメモリが収集されることは保証されません。  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.GC.GetTotalMemory%2A>メソッドを取得し、マネージ メモリに現在割り当てられているバイト数を表示します。  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public static void KeepAlive (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void KeepAlive(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.KeepAlive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub KeepAlive (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void KeepAlive(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member KeepAlive : obj -&gt; unit" Usage="System.GC.KeepAlive obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">参照するオブジェクト。</param>
        <summary>指定したオブジェクトを参照することにより、現在のルーチンの開始時からこのメソッドが呼び出される時点までの間、そのオブジェクトをガベージ コレクションの対象から外します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目的、<xref:System.GC.KeepAlive%2A>メソッドは、ガベージ コレクターによって解放される途中での危険にさらされているオブジェクトへの参照が存在することを確認します。 これが発生する一般的なシナリオは、マネージ コードまたはデータ、オブジェクトへの参照はありませんが、オブジェクトがアンマネージ Dll は、Win32 Api などのアンマネージ コードで使用中では場合、または COM を使用する方法  
  
 このメソッドが参照、`obj`パラメーター、そのオブジェクト ガベージ コレクションの対象外から行うルーチンの開始、実行の順にポイントにこのメソッドが呼び出された場合。 最後に、命令の範囲の先頭しないには、このメソッドのコードで`obj`できる必要があります。  
  
 <xref:System.GC.KeepAlive%2A>メソッド演算を実行しないと、パラメーターとして渡されるオブジェクトの有効期間を拡張する以外の副作用を生成しません。  
  
   
  
## Examples  
 次のコード例の先頭にオブジェクトを作成するその`Main`メソッド、終了するまでもう一度オブジェクトを参照していないと場合、<xref:System.GC.KeepAlive%2A>メソッドが呼び出されます。 30 秒間のみ、オブジェクトが解決しない、`Main`への呼び出しに関係なく、メソッド、<xref:System.GC.Collect%2A>と<xref:System.GC.WaitForPendingFinalizers%2A>メソッド。  
  
 [!code-cpp[System.GC.KeepAlive Example2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CPP/gckeepalive.cpp#1)]
 [!code-csharp[System.GC.KeepAlive Example2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CS/gckeepalive.cs#1)]
 [!code-vb[System.GC.KeepAlive Example2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/VB/gckeepalive.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxGeneration">
      <MemberSignature Language="C#" Value="public static int MaxGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxGeneration" />
      <MemberSignature Language="DocId" Value="P:System.GC.MaxGeneration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxGeneration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxGeneration { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxGeneration : int" Usage="System.GC.MaxGeneration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムが現在サポートしている最大のジェネレーション番号を取得します。</summary>
        <value>0 からサポートされるジェネレーションの最大番号までの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 世代番号、またはオブジェクトの年齢、オブジェクトの有効期間の実装定義の相対尺度は、します。 最近作成されたオブジェクトは、ジェネレーション 0 と最も古いオブジェクトは、によって返される、世代小さいジェネレーション、<xref:System.GC.MaxGeneration%2A>プロパティ。  
  
 ガベージ コレクターが想定する新しいメモリはより古いメモリ ガベージ コレクションの対象となる可能性が高くなります。 そのため、ガベージ コレクターが世代番号をメモリの再利用するたびに調整することによって、パフォーマンスが向上し、<xref:System.GC.MaxGeneration%2A>プロパティの値が時間の経過と共に拡大できます。  
  
 オブジェクトの世代が実装されている場合、<xref:System.GC.MaxGeneration%2A>プロパティは、システムで使用される最大のジェネレーション番号を返します。 それ以外の場合、このプロパティは 0 を返します。  
  
   
  
## Examples  
 次の例では、現在使用中の最大のジェネレーション番号を表示する MaxGeneration プロパティを使用する方法を示します。  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>この実装によって返される値、<see cref="P:System.GC.MaxGeneration" />プロパティが実行中のアプリケーションの有効期間にわたって変わらないことが保証されます。  
  
使用して、<see cref="P:System.GC.MaxGeneration" />を呼び出すときに指定できる最大の値を決定するプロパティ、<see cref="M:System.GC.Collect(System.Int32)" />生成パラメーターを受け取るメソッド。</para>
        </block>
        <altmember cref="M:System.GC.GetGeneration(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForFullGCNotification">
      <MemberSignature Language="C#" Value="public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForFullGCNotification(int32 maxGenerationThreshold, int32 largeObjectHeapThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForFullGCNotification (maxGenerationThreshold As Integer, largeObjectHeapThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForFullGCNotification(int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="F#" Value="static member RegisterForFullGCNotification : int * int -&gt; unit" Usage="System.GC.RegisterForFullGCNotification (maxGenerationThreshold, largeObjectHeapThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxGenerationThreshold" Type="System.Int32" />
        <Parameter Name="largeObjectHeapThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxGenerationThreshold">ジェネレーション 2 に割り当てられたオブジェクト数に基づいて通知を発行するタイミングを指定する、1 ～ 99 の数値。</param>
        <param name="largeObjectHeapThreshold">大きなオブジェクトのヒープに割り当てられたオブジェクト数に基づいて通知を発行するタイミングを指定する、1 ～ 99 の数値。</param>
        <summary>フル ガベージ コレクションの可能性が高い状態のとき、およびガベージ コレクションが完了したときに、ガベージ コレクションの通知を発行する必要があることを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各の生成には、ガベージ コレクターは、その世代に割り当てのしきい値を設定します。 割り当てのサイズがこのしきい値を超えたときにその世代に対してガベージ コレクションがトリガーされます。 例では、ジェネレーション 2 のしきい値は 20 MB (20 MB が第 1 世代のコレクションは存続し、ジェネレーション 2 に昇格を意味します)、および 20 MB を超える場合は、第 1 世代が行われなかったし、ジェネレーション 2 にメッセージが表示されます、次のガベージ コレクションが試行されます第 2 世代のコレクション。 同様に、大きなオブジェクト ヒープ (LOH) の場合のしきい値は 20 MB と、アプリが 20 MB を超える大きなオブジェクトを割り当て、(このため、LOH は gen2 ガベージ コレクションでのみ収集されます)、次のガベージ コレクションを第 2 世代のコレクションとして試行もは。  
  
 `maxGenerationThreshold`と`largeObjectHeapThreshold`しきい値を制御、フル ガベージ コレクションが発生する前にどの程度事前に通知されます。 しきい値が大きいほど、詳細の割り当てを通知し、次の完全なガベージ コレクションの間に発生することができます。  
  
 ランタイムがフル ガベージ コレクションを行い、そのコレクションを回避するときに通知するように要求できる場合、アプリケーションのパフォーマンスは、共通言語ランタイムによってフル ガベージ コレクションに悪影響があれば、自分で、コレクションを強制しないで (を使用して、<xref:System.GC.Collect%2A>メソッド) の条件にも有利な場合。 ガベージ コレクションのスケジュールを自分で変更だけでなく完全な GC の通知では、次のシナリオに便利です。  
  
-   フル ガベージ コレクションのアプローチを監視して、(たとえば、いくつかのキャッシュ エントリを解放する) では、ライブ データのサイズを小さくいずれかが近づいていることを通知するときにします。 その結果、ガベージ コレクションが発生したときより多くのメモリを解放できないは。  
  
-   いくつかの統計を収集するようにフル ガベージ コレクションの完了を監視します。  たとえば、ライブ データのサイズを把握するように GC の終了時にヒープのサイズを測定する場合があります。 (フル GC では、後に、ヒープはその最小サイズで) です。  
  
 フル ガベージ コレクションが表す内容の詳細については、次を参照してください。[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)します。  
  
 ガベージ コレクションの通知を登録するときにフル ガベージ コレクションが近づいているとき、および完了を通知できます。 このパターンでは、メモリ不足の通知のオペレーティング システムを監視する方法に似ています。  
  
 指定するために、次のガイドラインを使用して、`maxGenerationThreshold`と`largeObjectHeapThreshold`パラメーター。  
  
-   しきい値の値が大きいほど、通知と、フル ガベージ コレクションの複数の割り当てが発生します。  
  
     しきい値より大きい値では、コレクションが近づいているを確認するランタイムの機会を提供します。 これに通知されること可能性が高くなります。 ただし、ランタイムは、次のコレクションを誘発する前に複数の割り当てになるためには、しきい値が高すぎるを設定する必要があります。  
  
     強制実行するコレクションを自分で上限のしきい値を使用して通知すると、ランタイムの次のコレクションで解放されるよりも、少数のオブジェクトは解放されます。  
  
-   しきい値の値が小さいほど、通知と、フル ガベージ コレクションの割り当てが少ない。  
  
   
  
## Examples  
 次の例では、ガベージ コレクションの通知を登録し、ガベージ コレクションの通知の状態を監視するスレッドを開始する方法を示します。 このコード例が示されている例の一部[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)トピック。  
  
 [!code-cpp[GCNotification#2](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#2)]
 [!code-csharp[GCNotification#2](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#2)]
 [!code-vb[GCNotification#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxGenerationThreshold" /> または <paramref name="largeObjectHeapThreshold" /> は 1 ～ 99 の範囲外です。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89">ガベージ コレクションの通知</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveMemoryPressure">
      <MemberSignature Language="C#" Value="public static void RemoveMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RemoveMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member RemoveMemoryPressure : int64 -&gt; unit" Usage="System.GC.RemoveMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated">解放されたアンマネージ メモリの量。</param>
        <summary>アンマネージ メモリが解放され、ガベージ コレクションのスケジュールにこのメモリを考慮する必要がなくなったことをランタイムに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ガベージ コレクションのスケジュールを決定するには、ランタイムは考慮マネージ メモリの量が割り当てられます。 小さなマネージ オブジェクトが大量のアンマネージ メモリを割り当てる場合、ランタイムはマネージ メモリだけを考慮し、したがってガベージ コレクションのスケジュールの緊急度を過小評価します。 <xref:System.GC.AddMemoryPressure%2A>メソッドは、システム メモリにこの追加の負荷のランタイムを通知し、<xref:System.GC.RemoveMemoryPressure%2A>メソッドは、追加の負荷が解放されていることをランタイムに通知します。  
  
 最も簡単な使用パターン、マネージ オブジェクト コンス トラクターで、アンマネージ メモリの割り当てし、解放する、`Dispose`または`Finalize`メソッド。 呼び出す、<xref:System.GC.AddMemoryPressure%2A>アンマネージ メモリを割り当てた後にメソッドを呼び出すと、<xref:System.GC.RemoveMemoryPressure%2A>メソッドを解放するとします。  
  
 場所、アンマネージ メモリの割り当てはマネージ オブジェクトの有効期間中に大幅に変更より複雑なシナリオで呼び出すことができます、<xref:System.GC.AddMemoryPressure%2A>と<xref:System.GC.RemoveMemoryPressure%2A>実行時に増分変更を通知するメソッド。  
  
> [!CAUTION]
>  追加する圧力の量だけを削除することを確認する必要があります。 そのために失敗するの長時間実行されるアプリケーションでシステムのパフォーマンスが低下することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bytesAllocated" /> が 0 以下です。  
  
- または - 
32 ビットのコンピューターで、<paramref name="bytesAllocated" /> の値が <see cref="F:System.Int32.MaxValue" /> の値を超えています。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">ガベージ コレクションの優先順位を操作するときに、アンマネージ コードを呼び出す機能。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <Member MemberName="ReRegisterForFinalize">
      <MemberSignature Language="C#" Value="public static void ReRegisterForFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReRegisterForFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.ReRegisterForFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReRegisterForFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReRegisterForFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member ReRegisterForFinalize : obj -&gt; unit" Usage="System.GC.ReRegisterForFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">ファイナライザーの呼び出しが必要なオブジェクト。</param>
        <summary>
          <see cref="M:System.GC.SuppressFinalize(System.Object)" /> が事前に呼び出されている指定オブジェクトに対して、ファイナライザーを呼び出すことをシステムに要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.ReRegisterForFinalize%2A>メソッドを追加、`obj`ガベージ コレクターがオブジェクトを解放する前に、終了処理を要求するオブジェクトの一覧にパラメーター。 `obj`パラメーターはこのメソッドの呼び出し元である必要があります。  
  
 呼び出す、<xref:System.GC.ReRegisterForFinalize%2A>メソッドでは、ガベージ コレクターがオブジェクトのファイナライザーを呼び出すことは保証されません。  
  
 既定では、ファイナライザーを実装するすべてのオブジェクトが終了操作を必要とするオブジェクトの一覧に追加されます。ただし、オブジェクトが既にファイナライズされているまたは呼び出すことによって終了処理を無効に可能性があります、<xref:System.GC.SuppressFinalize%2A>メソッド。  
  
 ファイナライザーは、このメソッドを使用して、自体またはそれが参照するオブジェクトを復活させます。  
  
   
  
## Examples  
 次の例では、ReRegisterForFinalize メソッドを使用してオブジェクトを 2 回目の最終処理する方法のガベージ コレクション後時間。  
  
 [!code-cpp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CS/class1.cs#1)]
 [!code-vb[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressFinalize">
      <MemberSignature Language="C#" Value="public static void SuppressFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.SuppressFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SuppressFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SuppressFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member SuppressFinalize : obj -&gt; unit" Usage="System.GC.SuppressFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">実行すべきではないファイナライザーを持つオブジェクト。</param>
        <summary>指定したオブジェクトに対してファイナライザーを呼び出さないよう共通言語ランタイムに要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`obj`のオブジェクト ヘッダー内のビットを設定しています。このビットは、ファイナライザー呼び出しの際にチェックされます。 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> によって表されるファイナライザーは、オブジェクトがガベージ コレクションされる前に、アンマネージ リソースを解放します。 `obj`がファイナライザーを持たない場合、<xref:System.GC.SuppressFinalize%2A>メソッドには何の効果もありません。  
  
 <xref:System.IDisposable>インターフェイスを実装するオブジェクトは、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>メソッド内でこのメソッドを呼び出すことができます。そのようにして、ガベージ コレクターが不必要にな<xref:System.Object.Finalize%2A?displayProperty=nameWithType>を呼び出すことを避けられます。 通常、これは、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>によってすでに解放されているアンマネージ リソースをファイナライザーが解放しようとするのを防ぐために実装されます。  
  
   
  
## Examples  
 次の例では、冗長なガベージ コレクション呼び出しを防ぐため、リソース クラスにおいて<xref:System.GC.SuppressFinalize%2A>を使用する方法を示します。 [dispose パターン](~/docs/standard/design-guidelines/dispose-pattern.md)を用いて、マネージ リソース(<xref:System.IDisposable>を実装するオブジェクト)とアンマネージ リソースの両方を解放しています。  
  
 [!code-csharp[System.GC.SuppressFinalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.suppressfinalize/cs/suppressfinalize1.cs#1)]
 [!code-vb[System.GC.SuppressFinalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.suppressfinalize/vb/suppressfinalize1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.Object.Finalize" />
        <related type="Article" href="https://msdn.microsoft.com/library/31a6c13b-d6a2-492b-9a9f-e5238c983bcb">Dispose パターン</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryStartNoGCRegion">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クリティカル パスの実行中はガベージ コレクションが行われないよう、試行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。 つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion totalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="totalSize">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。 短期セグメントのサイズ以下でなければなりません。 短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</param>
        <summary>指定した量のメモリを使用可能な場合、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。</summary>
        <returns>ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.TryStartNoGCRegion%28System.Int64%29>メソッドによって、アプリ コードのクリティカル領域の実行中にガベージ コレクションが禁止されている GC 領域待機時間モード、ガベージ コレクターに配置しようとしました。  ランタイムは、最初に要求されたメモリ量を割り当てることができませんが、ガベージ コレクターは追加メモリを解放するためにフル ブロッキング ガベージ コレクションを実行します。 ガベージ コレクターには GC 領域の無待機モードがない場合は、実際に 2 をここでは、メモリの量を割り当てることができません *`totalSize`バイト (割り当てを試みます`totalSize`小さなオブジェクト ヒープのバイト数と`totalSize`のバイト数大きなオブジェクト ヒープ) のです。  
  
 `totalSize` クリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要があります。 これには、アプリの代わりに、ランタイムでは、割り当てと同様に、アプリによる割り当てが含まれます。  
  
> [!IMPORTANT]
>  呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。 つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。  
  
 呼び出すことによって、GC 領域の無待機モードを終了する、<xref:System.GC.EndNoGCRegion%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="totalSize" /> は、短期セグメント サイズを超えています。</exception>
        <exception cref="T:System.InvalidOperationException">プロセスは既に、非 GC 領域待機時間モードになっています。</exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2">ガベージ コレクションの基礎</related>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81">待機モード</related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="totalSize">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。 短期セグメントのサイズ以下でなければなりません。 短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</param>
        <param name="disallowFullBlockingGC">ガベージ コレクターが最初に <see langword="true" /> バイトを割り当てられなかったときにフル ブロッキング ガベージ コレクションを省略する場合は <paramref name="totalSize" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定した量のメモリを使用可能な場合は、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。また、最初に十分な量のメモリを使用できない場合に、ガベージ コレクターがフル ブロッキング ガベージ コレクションを実行するかどうかを制御します。</summary>
        <returns>ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29>メソッドによって、アプリ コードのクリティカル領域の実行中にガベージ コレクションが禁止されている GC 領域待機時間モード、ガベージ コレクターに配置しようとしました。  かどうか、ランタイムは最初に要求されたメモリ量を割り当てることができませんが、`disallowFullBlockingGC`引数が`false`、ガベージ コレクターは、追加のメモリを解放するためにフル ブロッキング ガベージ コレクションを実行しますそれ以外の場合、割り当て失敗し、メソッドが返されます`false`します。 ガベージ コレクターには GC 領域の無待機モードがない場合は、実際に 2 をここでは、メモリの量を割り当てることができません * `totalSize` (割り当てを試みます`totalSize`小さなオブジェクト ヒープと`totalSize`ラージ オブジェクトヒープの場合)。  
  
 `totalSize` クリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要があります。 これには、アプリの代わりに、ランタイムでは、割り当てと同様に、アプリによる割り当てが含まれます。  
  
 設定`disallowFullBlockingGC`に`true`フル ブロッキング ガベージを防ぐために十分なメモリが最初に使用可能な場合は、コレクションは負荷分散のシナリオで最も役に立つ: 1 つのシステムがこのメソッドを呼び出すし、返された場合は、要求を受け入れる準備ができてと報告`true`、返された場合は、他のシステムに要求をリダイレクトするロード バランサーあり`false`します。 呼び出すことによって要求は処理されません。 場合に、フル ブロッキング ガベージ コレクションを実行できる、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>メソッド。  
  
> [!IMPORTANT]
>  呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。 つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。  
  
 呼び出すことによって、GC 領域の無待機モードを終了する、<xref:System.GC.EndNoGCRegion%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="totalSize" /> は、短期セグメント サイズを超えています。</exception>
        <exception cref="T:System.InvalidOperationException">プロセスは既に、非 GC 領域待機時間モードになっています。</exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2">ガベージ コレクションの基礎</related>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81">待機モード</related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="lohSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="totalSize">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。 <paramref name="totalSize" /> – <paramref name="lohSize" /> は、短期セグメントのサイズ以下でなければなりません。 短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</param>
        <param name="lohSize">
          <paramref name="totalSize" /> のうち、に大きなオブジェクト ヒープ (LOH) の割り当てに使用するバイト数。</param>
        <summary>大きなオブジェクト ヒープおよび小さなオブジェクト ヒープに対して、指定した量のメモリを使用可能な場合、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。</summary>
        <returns>ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29>メソッドによって、アプリ コードのクリティカル領域の実行中にガベージ コレクションが禁止されている GC 領域待機時間モード、ガベージ コレクターに配置しようとしました。  ランタイムは、最初に要求されたメモリ量を割り当てることができませんが、ガベージ コレクターは追加メモリを解放するためにフル ブロッキング ガベージ コレクションを実行します。 ガベージ コレクターには GC 領域の無待機モード入力しない場合は割り当てられません`lohSize`、LOH の場合は、 `totalSize` –`lohSize`小さなオブジェクト ヒープ (SOH)。  
  
 `lohSize` LOH のクリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要がありますと`totalSize`– `lohSize` soh のクリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要があります。 これには、アプリの代わりに、ランタイムでは、割り当てと同様に、アプリによる割り当てが含まれます。  
  
> [!IMPORTANT]
>  呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。 つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。  
  
 呼び出すことによって、GC 領域の無待機モードを終了する、<xref:System.GC.EndNoGCRegion%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="totalSize" /> – <paramref name="lohSize" /> は、短期セグメント サイズを超えています。</exception>
        <exception cref="T:System.InvalidOperationException">プロセスは既に、非 GC 領域待機時間モードになっています。</exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2">ガベージ コレクションの基礎</related>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81">待機モード</related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="lohSize" Type="System.Int64" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="totalSize">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。 <paramref name="totalSize" /> – <paramref name="lohSize" /> は、短期セグメントのサイズ以下でなければなりません。 短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</param>
        <param name="lohSize">
          <paramref name="totalSize" /> のうち、に大きなオブジェクト ヒープ (LOH) の割り当てに使用するバイト数。</param>
        <param name="disallowFullBlockingGC">ガベージ コレクターが指定されたメモリを最初に小さなオブジェクト ヒープ (SOH) および LOH に割り当てられないときにフル ブロッキング ガベージ コレクションを省略する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>大きなオブジェクト ヒープおよび小さなオブジェクト ヒープに対して、指定した量のメモリを使用可能な場合は、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。また、最初に十分な量のメモリを使用できない場合に、ガベージ コレクターがフル ブロッキング ガベージ コレクションを実行するかどうかを制御します。</summary>
        <returns>ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29>メソッドによって、アプリ コードのクリティカル領域の実行中にガベージ コレクションが禁止されている GC 領域待機時間モード、ガベージ コレクターに配置しようとしました。  かどうか、ランタイムは最初に要求されたメモリ量を割り当てることができませんが、`disallowFullBlockingGC`引数が`false`、ガベージ コレクターは、追加のメモリを解放するためにフル ブロッキング ガベージ コレクションを実行しますそれ以外の場合、割り当て失敗し、メソッドが返されます`false`します。 ガベージ コレクターには GC 領域の無待機モード入力しない場合は割り当てられません`lohSize`、LOH の場合は、 `totalSize` –`lohSize`小さなオブジェクト ヒープ (SOH)。  
  
 `lohSize` LOH のクリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要がありますと`totalSize`– `lohSize` soh のクリティカル パスで発生するすべてのメモリ割り当てを処理するために十分な大きさである必要があります。 これには、アプリの代わりに、ランタイムでは、割り当てと同様に、アプリによる割り当てが含まれます。  
  
 設定`disallowFullBlockingGC`に`true`フル ブロッキング ガベージを防ぐために十分なメモリが最初に使用可能な場合は、コレクションは負荷分散のシナリオで最も役に立つ: 1 つのシステムがこのメソッドを呼び出すし、返された場合は、要求を受け入れる準備ができてと報告`true`、返された場合は、他のシステムに要求をリダイレクトするロード バランサーあり`false`します。 呼び出すことによって要求は処理されません。 場合に、フル ブロッキング ガベージ コレクションを実行できる、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>メソッド。  
  
> [!IMPORTANT]
>  呼び出しを入れ子にすることはできません、<xref:System.GC.TryStartNoGCRegion%2A>メソッド、およびするが呼び出す必要がありますのみ、<xref:System.GC.EndNoGCRegion%2A>場合は、ランタイムが GC 領域の無待機モードでは現在のメソッド。 つまり、呼び出す必要はありません<xref:System.GC.TryStartNoGCRegion%2A>複数回 (最初のメソッド呼び出しの後の後続の呼び出しは成功しません) への呼び出しは期待できませんと<xref:System.GC.EndNoGCRegion%2A>最初の呼び出しのためにだけ、<xref:System.GC.TryStartNoGCRegion%2A>に成功しました。  
  
 呼び出すことによって、GC 領域の無待機モードを終了する、<xref:System.GC.EndNoGCRegion%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="totalSize" /> – <paramref name="lohSize" /> は、短期セグメント サイズを超えています。</exception>
        <exception cref="T:System.InvalidOperationException">プロセスは既に、非 GC 領域待機時間モードになっています。</exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="https://msdn.microsoft.com/library/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2">ガベージ コレクションの基礎</related>
        <related type="Article" href="https://msdn.microsoft.com/library/96278bb7-6eab-4612-8594-ceebfc887d81">待機モード</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCApproach">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための、登録済みの通知の状態を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための、登録済みの通知の状態を返します。</summary>
        <returns>登録済みのガベージ コレクションの通知の状態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.GCNotificationStatus>列挙型を使用して登録されている現在のガベージ コレクションの通知の状態を確認するには、このメソッドによって返される、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。 使用することも、<xref:System.GC.WaitForFullGCComplete%2A>フル ガベージ コレクションが完了したかどうかを判断するメソッド。  
  
 列挙体が返されるときに<xref:System.GCNotificationStatus.Succeeded>、割り当てられていると、コレクションを強制しないで、自分で使用できない追加のオブジェクトなどのタスクを行うことができます、<xref:System.GC.Collect%2A>メソッド。 通知が保証されません、フル ガベージ コレクションが発生する、条件が発生する、フル ガベージ コレクションの高いしきい値に達したことだけに注意してください。  
  
 このメソッドは、ガベージ コレクションの通知を取得するための無期限に待機します。 通知を取得できないかどうかを返すメソッドのタイムアウト期間を指定する場合を使用して、<xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType>メソッドのオーバー ロードします。 呼び出すことができます、タイムアウトを指定せずには、このメソッドを呼び出すの場合、<xref:System.GC.CancelFullGCNotification%2A>メソッド優先よりも長い時間待機している場合。  
  
 このメソッドの呼び出しを実行してください、<xref:System.GC.WaitForFullGCComplete%2A>フル ガベージ コレクションがあったかどうかを確認するメソッド。 このメソッドを呼び出すだけで、不確定な結果が発生します。  
  
   
  
## Examples  
 次の例では、このメソッドを使用してフル ブロッキング ガベージ コレクションが近づいているかどうかを決定する方法を示します。 通知の状態のときに<xref:System.GCNotificationStatus.Succeeded>、ユーザー メソッド`OnFullGCApproachNotify`コレクションが近づいているへの応答アクションを実行すると呼びます。 このコード例が示されている例の一部[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)トピック。  
  
 [!code-cpp[GCNotification#3](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#3)]
 [!code-csharp[GCNotification#3](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#3)]
 [!code-vb[GCNotification#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89">ガベージ コレクションの通知</related>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">通知の状態が取得されるまで待機する時間。 無期限に待機するには -1 を指定します。</param>
        <summary>共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための登録済みの通知の状態を、指定したタイムアウト時間で返します。</summary>
        <returns>登録済みのガベージ コレクションの通知の状態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.GCNotificationStatus>列挙型を使用して登録されている現在のガベージ コレクションの通知の状態を確認するには、このメソッドによって返される、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。 使用することも、<xref:System.GC.WaitForFullGCComplete%2A>フル ガベージ コレクションが完了したかどうかを判断するメソッド。  
  
 指定された値に関係なく、ガベージ コレクションの通知ステータスを取得するたびにすぐにこのメソッドが戻る注`millisecondsTimeout`します。 前に、ガベージ コレクションの通知の状態を取得しないかどうかは`millisecondsTimeout`回、このメソッドが戻る<xref:System.GCNotificationStatus.NotApplicable>します。  
  
 列挙体が返されるときに<xref:System.GCNotificationStatus.Succeeded>、割り当てられていると、コレクションを強制しないで、自分で使用できない追加のオブジェクトなどのタスクを行うことができます、<xref:System.GC.Collect%2A>メソッド。 通知が保証されません、フル ガベージ コレクションが発生する、条件が発生する、フル ガベージ コレクションの高いしきい値に達したことだけに注意してください。  
  
 呼び出すことができます、<xref:System.GC.CancelFullGCNotification%2A>メソッド タイムアウト間隔の経過を待つことができない場合。  
  
 このメソッドの呼び出しを実行してください、<xref:System.GC.WaitForFullGCComplete%2A>フル ガベージ コレクションがあったかどうかを確認するメソッド。 このメソッドを呼び出すだけで、不確定な結果が発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> は負でない数値、<see cref="F:System.Int32.MaxValue" /> 以下の数値、または -1 である必要があります。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89">ガベージ コレクションの通知</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCComplete">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための、登録済みの通知の状態を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための、登録済みの通知の状態を返します。</summary>
        <returns>登録済みのガベージ コレクションの通知の状態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.GCNotificationStatus>列挙型を使用して登録されている現在のガベージ コレクションの通知の状態を確認するには、このメソッドによって返される、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。 使用することも、<xref:System.GC.WaitForFullGCApproach%2A>フル ガベージ コレクションが近づいているかどうかを判断するメソッド。  
  
 列挙体が返されるときに<xref:System.GCNotificationStatus.Succeeded>、作業を再開して、コレクションの数を取得するなどのタスクを行うことができます、<xref:System.GC.CollectionCount%2A>プロパティ。  
  
 このメソッドは、ガベージ コレクションの通知を取得するための無期限に待機します。 通知を取得できないかどうかを返すメソッドのタイムアウト期間を指定する場合を使用して、<xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType>メソッドのオーバー ロードします。 呼び出すことができます、タイムアウトを指定せずには、このメソッドを呼び出すの場合、<xref:System.GC.CancelFullGCNotification%2A>メソッド優先よりも長い時間待機している場合。  
  
 このメソッドの呼び出しの前の呼び出しにする必要があります、<xref:System.GC.WaitForFullGCApproach%2A>フル ガベージ コレクションがあったかどうかを確認するメソッド。 このメソッドを呼び出すだけで不確定な結果を生成できます。  
  
   
  
## Examples  
 次の例では、このメソッドを使用して、フル ガベージ コレクションが完了したかどうかを確認する方法を示します。 通知の状態のときに<xref:System.GCNotificationStatus.Succeeded>、ユーザー メソッド`OnFullGCCompletedNotify`が呼び出され、完了したコレクションへの応答で操作を実行します。 このコード例が示されている例の一部[ガベージ コレクションの通知](~/docs/standard/garbage-collection/notifications.md)トピック。  
  
 [!code-cpp[GCNotification#4](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#4)]
 [!code-csharp[GCNotification#4](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#4)]
 [!code-vb[GCNotification#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89">ガベージ コレクションの通知</related>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">通知の状態が取得されるまで待機する時間。 無期限に待機するには -1 を指定します。</param>
        <summary>共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための登録済みの通知の状態を、指定したタイムアウト時間で返します。</summary>
        <returns>登録済みのガベージ コレクションの通知の状態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.GCNotificationStatus>列挙型を使用して登録されている現在のガベージ コレクションの通知の状態を確認するには、このメソッドによって返される、<xref:System.GC.RegisterForFullGCNotification%2A>メソッド。 使用することも、<xref:System.GC.WaitForFullGCApproach%2A>フル ガベージ コレクションが近づいているかどうかを判断するメソッド。  
  
 指定された値に関係なく、ガベージ コレクションの通知ステータスを取得するたびにすぐにこのメソッドが戻る注`millisecondsTimeout`します。 前に、ガベージ コレクションの通知の状態を取得しないかどうかは`millisecondsTimeout`回、このメソッドが戻る<xref:System.GCNotificationStatus.NotApplicable>します。  
  
 列挙体が返されるときに<xref:System.GCNotificationStatus.Succeeded>、作業を再開して、コレクションの数を取得するなどのタスクを行うことができます、<xref:System.GC.CollectionCount%2A>プロパティ。  
  
 呼び出すことができます、<xref:System.GC.CancelFullGCNotification%2A>メソッド タイムアウト間隔の経過を待つことができない場合。  
  
 このメソッドの呼び出しの前の呼び出しにする必要があります、<xref:System.GC.WaitForFullGCApproach%2A>フル ガベージ コレクションがあったかどうかを確認するメソッド。 このメソッドを呼び出すだけで不確定な結果を生成できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="millisecondsTimeout" /> は負でない数値、<see cref="F:System.Int32.MaxValue" /> 以下の数値、または -1 である必要があります。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/e12d8e74-31e3-4035-a87d-f3e66f0a9b89">ガベージ コレクションの通知</related>
      </Docs>
    </Member>
    <Member MemberName="WaitForPendingFinalizers">
      <MemberSignature Language="C#" Value="public static void WaitForPendingFinalizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitForPendingFinalizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForPendingFinalizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitForPendingFinalizers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitForPendingFinalizers();" />
      <MemberSignature Language="F#" Value="static member WaitForPendingFinalizers : unit -&gt; unit" Usage="System.GC.WaitForPendingFinalizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ファイナライザーのキューを処理するスレッドがそのキューを空にするまで、現在のスレッドを中断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ガベージ コレクターによって再要求できるオブジェクトで見つかったときに、オブジェクトの終了処理の要件を決定するには、各オブジェクトを確認します。 オブジェクトがファイナライザーを実装してし、を呼び出して終了処理を無効になってがいないかどうか<xref:System.GC.SuppressFinalize%2A>、終了準備完了としてマークされているオブジェクトの一覧でオブジェクトが配置されます。 ガベージ コレクター、<xref:System.Object.Finalize%2A>一覧からエントリを削除します。 このリスト内のオブジェクトのメソッド。 このメソッドはブロックされるまでのすべてのファイナライザーの実行が終了します。  
  
 このメソッドが終了される保証はありませんので、ファイナライザーが実行されるスレッドは指定しません。 ただし、中に別のスレッドによってこのスレッドを中断できる、<xref:System.GC.WaitForPendingFinalizers%2A>メソッドが進行中です。 たとえば、一定期間を待機し、このスレッドがまだ中断されている場合、このスレッドを中断する別のスレッドを開始できます。  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.GC.WaitForPendingFinalizers%2A>メソッドを収集されたすべてのオブジェクトの最終処理が完了するまで、現在のスレッドを中断します。  
  
 [!code-cpp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CS/class1.cs#1)]
 [!code-vb[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>