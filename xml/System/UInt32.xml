<Type Name="UInt32" FullName="System.UInt32">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cdec82d17f99270114554fc7f7cbdea88ca4528b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30730486" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct UInt32 : IComparable, IComparable&lt;uint&gt;, IConvertible, IEquatable&lt;uint&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit unsigned int32 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;unsigned int32&gt;, class System.IConvertible, class System.IEquatable`1&lt;unsigned int32&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.UInt32" />
  <TypeSignature Language="VB.NET" Value="Public Structure UInt32&#xA;Implements IComparable, IComparable(Of UInteger), IConvertible, IEquatable(Of UInteger), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class UInt32 : IComparable, IComparable&lt;System::UInt32&gt;, IConvertible, IEquatable&lt;System::UInt32&gt;, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.UInt32&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.UInt32&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>32 ビット符号なし整数を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `UInt32`値型は、0 から 4,294,967,295 までの値を符号なし整数を表します。  
  
> [!IMPORTANT]
>  <xref:System.UInt32>型が CLS 準拠ではありません。 CLS 準拠の代替の型は<xref:System.Int64>します。 <xref:System.Int32> 置換する代わりに使用できる、<xref:System.UInt32>値の範囲は 0 ~<xref:System.Int32.MaxValue>します。 CLS 準拠の詳細については、次を参照してください。[言語非依存および言語非依存コンポーネント](~/docs/standard/language-independence-and-language-independent-components.md)です。  
  
 `UInt32` この型のインスタンスを比較するインスタンスの値を変換するメソッドを提供、<xref:System.String>表現、および convert、<xref:System.String>この型のインスタンスに数値の形式です。  
  
 方法については仕様コード コントロールの書式設定、<xref:System.String>値の型の表現を参照してください[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。  
  
 ]]></format>
    </remarks>
    <threadsafe>この種類のすべてのメンバーでは、スレッド セーフです。 インスタンスの状態を変更する表示されるメンバーは、新しい値で初期化された新しいインスタンスを実際に返します。 として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによってです。</threadsafe>
    <altmember cref="T:System.Int32" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したオブジェクトまたは <see cref="T:System.UInt32" /> とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のオブジェクト、または <see langword="null" />。</param>
        <summary>指定したオブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term> 戻り値  
  
 </term><description>説明  
  
 </description></listheader><item><term> 0 より小さい値  
  
 </term><description> このインスタンスは、<paramref name="value" /> よりも小さいです。  
  
 </description></item><item><term> 0  
  
 </term><description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description></item><item><term> 0 より大きい値  
  
 </term><description> このインスタンスは <paramref name="value" /> よりも大きいです。  
  
 - または -  
  
 <paramref name="value" /> は <see langword="null" />です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任意のインスタンス<xref:System.UInt32>、その値に関係なくが大きいと見なされますより`null`です。  
  
 `value`パラメーターでなければなりません`null`またはのインスタンス<xref:System.UInt32>です。 それ以外の場合、例外がスローされます。  
  
   
  
## Examples  
 次のコード例を示しています、<xref:System.UInt32.CompareTo%2A>メソッドです。  
  
 [!code-cpp[UInt32 Example#3](~/samples/snippets/cpp/VS_Snippets_CLR/UInt32 Example/CPP/source.cpp#3)]
 [!code-csharp[UInt32 Example#3](~/samples/snippets/csharp/VS_Snippets_CLR/UInt32 Example/CS/source.cs#3)]
 [!code-vb[UInt32 Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/UInt32 Example/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> が <see cref="T:System.UInt32" /> ではありません。</exception>
        <altmember cref="M:System.UInt32.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.CompareTo(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">比較対象の符号なし整数。</param>
        <summary>指定した 32 ビット符号なし整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term> 戻り値  
  
 </term><description>説明  
  
 </description></listheader><item><term> 0 より小さい値  
  
 </term><description> このインスタンスは、<paramref name="value" /> よりも小さいです。  
  
 </description></item><item><term> 0  
  
 </term><description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description></item><item><term> 0 より大きい値  
  
 </term><description> このインスタンスは <paramref name="value" /> よりも大きいです。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを実装する、<xref:System.IComparable%601?displayProperty=nameWithType>インターフェイスし、実行よりもわずかに向上、<xref:System.UInt32.CompareTo%2A?displayProperty=nameWithType>メソッドに変換があるないため、`value`オブジェクトへのパラメーターです。  
  
 プログラミング言語に応じてコードに考えられる場合があります、<xref:System.UInt32.CompareTo%2A>メソッドのパラメーターの型のビット数が少ないがここではインスタンスの型よりもします。 これには一部のプログラミング言語は、ビット数のインスタンスと型としてパラメーターを表す暗黙の拡大変換を実行するため。  
  
 たとえば、インスタンスの型が<xref:System.Int32>パラメーターの型と<xref:System.Byte>です。 Microsoft c# コンパイラは、パラメーターの値を表す命令を生成、<xref:System.Int32>オブジェクトを生成、<xref:System.Int32.CompareTo%2A?displayProperty=nameWithType>の値を比較するメソッド、<xref:System.Int32>インスタンスおよび<xref:System.Int32>パラメーター形式です。  
  
 コンパイラが数値型に暗黙の拡大変換を実行するかどうかを決定する、プログラミング言語のドキュメントを参照してください。  
  
   
  
## Examples  
 次のコード例に示しますジェネリックと非ジェネリック バージョンの<xref:System.UInt32.CompareTo%2A>いくつかの値と参照型のメソッドです。  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.UInt32.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>対象のインスタンスが、指定したオブジェクトまたは <see cref="T:System.UInt32" /> に等しいかどうかを示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> が <see cref="T:System.UInt32" /> のインスタンスで、このインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例を示しています、<xref:System.UInt32.Equals%2A>メソッドです。  
  
 [!code-cpp[UInt32_Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/UInt32_Equals/CPP/uint32_equals.cpp#1)]
 [!code-csharp[UInt32_Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/UInt32_Equals/CS/uint32_equals.cs#1)]
 [!code-vb[UInt32_Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/UInt32_Equals/VB/uint32_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>コンパイラのオーバー ロードの解決は、2 つの動作の見かけ上の相違点についてアカウント可能性があります<see cref="M:System.UInt32.Equals(System.UInt32)" />メソッドのオーバー ロードします。 場合の間の暗黙的な変換、<paramref name="obj" />引数および<see cref="T:System.UInt32" />が定義されている引数として型指定されていないと、 <see cref="T:System.Object" />、コンパイラが暗黙的な変換と呼び出しを実行、<see cref="M:System.UInt32.Equals(System.UInt32)" />メソッドです。 それ以外の場合を呼び出すことが、<see cref="M:System.UInt32.Equals(System.Object)" />メソッドで、常に返します<see langword="false" />場合その<paramref name="obj" />引数ではありません、<see cref="T:System.UInt32" />値。 次の例は、次の 2 つのメソッド オーバー ロード間の動作の違いを示しています。 場合、<see cref="T:System.Byte" />と<see cref="T:System.UInt16" />値は、最初の比較を返します<see langword="true" />拡大変換と呼び出し、コンパイラが自動的に実行するため、<see cref="M:System.UInt32.Equals(System.UInt32)" />メソッド、2 つ目の比較を返しますが<see langword="false" />コンパイラを呼び出すため、<see cref="M:System.UInt32.Equals(System.Object)" />メソッドです。  
  
 [!code-csharp[System.UInt32.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.equals/cs/equalsoverl.cs#1)]
 [!code-vb[System.UInt32.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.equals/vb/equalsoverl.vb#1)]</para>
        </block>
        <altmember cref="M:System.UInt32.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (uint obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(unsigned int32 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.Equals(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::UInt32 obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較する値。</param>
        <summary>このインスタンスが、指定した <see cref="T:System.UInt32" /> に等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> の値がこのインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを実装する、<xref:System.IEquatable%601?displayProperty=nameWithType>インターフェイス、および実行よりもわずかに向上、<xref:System.UInt32.Equals%28System.Object%29>メソッドに変換があるないため、`obj`オブジェクトへのパラメーターです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>コンパイラのオーバー ロードの解決は、2 つの動作の見かけ上の相違点についてアカウント可能性があります<see cref="M:System.UInt32.Equals(System.UInt32)" />メソッドのオーバー ロードします。 場合の間の暗黙的な変換、<paramref name="obj" />引数および<see cref="T:System.UInt32" />が定義されている引数として型指定されていないと、 <see cref="T:System.Object" />、コンパイラが暗黙的な変換と呼び出しを実行、<see cref="M:System.UInt32.Equals(System.UInt32)" />メソッドです。 それ以外の場合を呼び出すことが、<see cref="M:System.UInt32.Equals(System.Object)" />メソッドで、常に返します<see langword="false" />場合その<paramref name="obj" />引数ではありません、<see cref="T:System.UInt32" />値。 次の例は、次の 2 つのメソッド オーバー ロード間の動作の違いを示しています。 場合、<see cref="T:System.Byte" />と<see cref="T:System.UInt16" />値は、最初の比較を返します<see langword="true" />拡大変換と呼び出し、コンパイラが自動的に実行するため、<see cref="M:System.UInt32.Equals(System.UInt32)" />メソッド、2 つ目の比較を返しますが<see langword="false" />コンパイラを呼び出すため、<see cref="M:System.UInt32.Equals(System.Object)" />メソッドです。  
  
 [!code-csharp[System.UInt32.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.equals/cs/equalsoverl.cs#1)]
 [!code-vb[System.UInt32.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.equals/vb/equalsoverl.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.TypeCode" /> 値型の <see cref="T:System.UInt32" /> を返します。</summary>
        <returns>列挙型定数 <see cref="F:System.TypeCode.UInt32" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const uint MaxValue = 4294967295;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int32 MaxValue = unsigned int32(4294967295)" />
      <MemberSignature Language="DocId" Value="F:System.UInt32.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As UInteger  = 4294967295" />
      <MemberSignature Language="C++ CLI" Value="public: System::UInt32 MaxValue = 4294967295;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <MemberValue>4294967295</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.UInt32" /> の最大有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値が 4,294,967,295 です。つまり、16 進数 0 xffffffff です。  
  
   
  
## Examples  
 次の例では、<xref:System.UInt32.MinValue>と<xref:System.UInt32.MaxValue>ことを確認するフィールド、<xref:System.Int64>値の範囲内では、<xref:System.UInt32>型変換を実行する前に入力します。 この確認により、<xref:System.OverflowException>実行時にします。  
  
 [!code-csharp[System.UInt32.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.UInt32.MaxValue/cs/MaxValue1.cs#1)]
 [!code-vb[System.UInt32.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.UInt32.MaxValue/vb/MaxValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.UInt32.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const uint MinValue = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int32 MinValue = unsigned int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.UInt32.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As UInteger  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: System::UInt32 MinValue = 0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.UInt32" /> の最小有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は 0 です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.UInt32.MinValue>の最小有効値を表示するフィールド、<xref:System.UInt32>変数。  
  
 [!code-cpp[UInt32 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR/UInt32 Example/CPP/source.cpp#2)]
 [!code-csharp[UInt32 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR/UInt32 Example/CS/source.cs#2)]
 [!code-vb[UInt32 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/UInt32 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.UInt32.MaxValue" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。</summary>
        <altmember cref="Overload:System.UInt32.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static uint Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。</param>
        <summary>数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。</summary>
        <returns>
          <paramref name="s" /> に格納されている数値と等しい 32 ビット符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s`パラメーターが、次の形式の数値の文字列形式にする必要があります。  
  
 [*ws*][*sign*]*digits*[*ws*]  
  
 角かっこ ([ および ]) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|-------------|-----------------|  
|*ws*|省略可能なホワイト スペースです。|  
|*sign*|省略可能な符号の場合。 有効な符号文字がによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>現在のカルチャのプロパティです。 ただし、負の記号のみで使える 0;それ以外の場合がスローされます、<xref:System.OverflowException>です。|  
|*digits*|0 から 9 までの数字のシーケンス。 先頭の 0 は無視されます。|  
  
> [!NOTE]
>  指定された文字列、`s`パラメーターを使用して解釈されます、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>スタイル。 任意の桁区切り記号または 10 進区切り記号を含めることはできませんとに小数部を持つことはできません。  
  
 `s`パラメーターは書式設定情報を使用して解析、<xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType>現在のシステムのカルチャに初期化されるオブジェクト。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>」を参照してください。 特定のカルチャの書式情報を使用して、文字列を解析するを使用して、<xref:System.UInt32.Parse%28System.String%2CSystem.IFormatProvider%29>メソッドです。  
  
   
  
## Examples  
 次の例では、<xref:System.UInt32.Parse%28System.String%29>文字列値の配列を解析します。  
  
 [!code-csharp[System.UInt32.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.parse/cs/parse1.cs#1)]
 [!code-vb[System.UInt32.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.parse/vb/parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int64.Parse(System.String)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> パラメーターが適切な書式ではありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> パラメーターが <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="M:System.UInt32.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static uint Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。 文字列は、<c>style</c> パラメーターで指定されたスタイルを使用して解釈されます。</param>
        <param name="style">
          <c>s</c> に許可されている書式を指定する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <summary>指定したスタイルの数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 32 ビット符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `style`パラメーター スタイル要素を定義します (空白、正または負の記号、桁区切り記号や小数点記号) では許可されて、`s`解析操作が成功するためのパラメーターです。 `style` ビット フラグの組み合わせを指定する必要があります、<xref:System.Globalization.NumberStyles>列挙します。 `style`パラメーター オーバー ロードに役立つときにこのメソッドは、`s`によって表される数システム (10 進または 16 進数) と 16 進数値の文字列形式を含む`s`、実行時にのみ、または空白文字を許可しない場合し、で記号がわかっている`s`です。  
  
 値に応じて`style`、`s`パラメーターは、次の要素を含めることがあります。  
  
 [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  
  
 角かっこ ([ および ]) 内の要素は省略可能です。 場合`style`が含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>、`s`パラメーターは、次の要素を含めることがあります。  
  
 [*ws*]*hexdigits*[*ws*]  
  
 次の表では、各要素について説明します。  
  
|要素|説明|  
|-------------|-----------------|  
|*ws*|省略可能なホワイト スペースです。 先頭の空白文字が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。|  
|*$*|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType>現在のカルチャのプロパティです。 現在のカルチャの通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。|  
|*sign*|省略可能な符号の場合。 先頭の符号が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。 かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。 ただし、負の記号のみで使える 0;それ以外の場合がスローされます、<xref:System.OverflowException>です。|  
|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|0 ~ 9 桁の数字のシーケンス。 *Fractional_digits*数字の 0 が有効ではのみです。|  
|*、*|カルチャ固有のグループの区切り記号です。 現在のカルチャの桁区切り記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。|  
|*.*|カルチャに固有の小数点記号です。 現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。 数字の 0 は、解析操作を成功させるため桁の小数部として表示できます。場合*fractional_digits*他の任意の数字が含まれています、<xref:System.FormatException>がスローされます。|  
|E|"E"または"E"文字は、値を指数表記で表されていることを示します。 `s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。|  
|*hexdigits*|一連の 0 f からまたは f 0 から 16 進数の数字|  
  
 数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>スタイル) が正常に解析します。 ほとんど残りの<xref:System.Globalization.NumberStyles>メンバーが存在する可能性がありますが、入力文字列内に存在する必要がない要素を制御します。 次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在可能な要素に影響を与える`s`です。  
  
|`NumberStyles` の値|使用できる要素`s`数字だけでなく|  
|--------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*桁*要素のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 (.) と*小数部の桁*要素。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、と共に、指数表記法を示す*exponential_digits*です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws*の先頭の要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号*の先頭の要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号*数値の値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|グループの区切り記号 (,) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 ($) の要素。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `s` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws*開始または終了の位置にある要素`s`、*記号*の開始時`s`、および小数点 (*.*) シンボル。 `s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`、 `sign`、桁区切り記号 (*、*)、および小数点 (*.*) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `s` 16 進数を表すことはできません。|  
  
 異なり、他の<xref:System.Globalization.NumberStyles>の値の許可は必要ありません、内の特定のスタイル要素のプレゼンス`s`、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>スタイル値つまりの個別の数値文字`s`は常に 16 進数の文字として解釈されます。 有効な 16 進数の文字は 0 ~ 9、A ~ F、a ~ f です。 "0 x"などのプレフィックスを指定することはできません。 のみ他のフラグと組み合わせることができます、`style`パラメーターは<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>です。 (、<xref:System.Globalization.NumberStyles>列挙には、複合数値スタイルが含まれています<xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>、両方の空白のフラグが含まれている。)。  
  
 のみ他のフラグと組み合わせることができます、`style`パラメーターは<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>です。 (、<xref:System.Globalization.NumberStyles>列挙には、複合数値スタイルが含まれています<xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>、両方の空白のフラグが含まれている。)。  
  
> [!NOTE]
>  場合`s`文字列表現は、16 進数は、そのことはできません前に、装飾 (など`0x`または`&h`) の 16 進数として区別します。 これにより、変換に失敗します。  
  
 `s`パラメーターは書式設定情報を使用して解析、<xref:System.Globalization.NumberFormatInfo>現在のシステムのカルチャに初期化されるオブジェクト。 書式情報を含むが、解析操作で使用されるカルチャを指定するには、呼び出し、<xref:System.UInt32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>オーバー ロードします。  
  
   
  
## Examples  
 次の例の番号を使用して、文字列配列の各要素を解析しようとしました。<xref:System.Globalization.NumberStyles>値。  
  
 [!code-csharp[System.UInt32.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.parse/cs/parseex2.cs#2)]
 [!code-vb[System.UInt32.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.parse/vb/parseex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int64.Parse(System.String)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 - または -  
  
 <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> は <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。  
  
 - または -  
  
 <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
        <altmember cref="M:System.UInt32.ToString" />
        <altmember cref="Overload:System.UInt32.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static uint Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式による数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 32 ビット符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s`パラメーターには、フォームの番号が含まれています。  
  
 [*ws*][*sign*]*digits*[*ws*]  
  
 角かっこ ([および]) は省略可能の項目です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|-------------|-----------------|  
|*ws*|省略可能なホワイト スペースです。|  
|*sign*|オプションの符号または負の符号場合`s`値 0 を表します。|  
|*digits*|0 から 9 までの数字のシーケンス。|  
  
 S パラメーターを使用して解釈されます、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>スタイル。 符号なし整数値の 10 進数字以外には、先頭と末尾のスペースが先頭の符号と共にのみを使用できます。 (マイナス記号が存在する場合`s`の値は 0、またはメソッドでのスローを表す必要があります、 <xref:System.OverflowException>)。使用できるカルチャに固有の書式情報とスタイル要素を明示的に定義する`s`を使用して、<xref:System.UInt32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>メソッドです。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>の書式に関するカルチャ固有の情報を提供するオブジェクト`s`です。 3 つの方法を使用する、`provider`パラメーター、解析操作にカスタムの書式情報を提供します。  
  
-   実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。 (その実装の<xref:System.IFormatProvider.GetFormat%2A>単にそれ自体を返します)。  
  
-   渡すことができます、<xref:System.Globalization.CultureInfo>使用する書式のカルチャを指定するオブジェクト。 その<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティは、書式指定情報を提供します。  
  
-   カスタムを渡すことができます<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドはインスタンス化を返す必要があります、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>現在のカルチャが使用されます。  
  
   
  
## Examples  
 次の例は、ボタンは、Web フォームのイベント ハンドラーをクリックします。 によって返される配列を使用して、<xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType>プロパティをユーザーのロケールを決定します。 インスタンス化し、<xref:System.Globalization.CultureInfo>そのロケールに対応するオブジェクト。 <xref:System.Globalization.NumberFormatInfo>に属しているオブジェクト<xref:System.Globalization.CultureInfo>にオブジェクトが渡され、<xref:System.UInt32.Parse%28System.String%2CSystem.IFormatProvider%29>をユーザーに変換するメソッドの入力、<xref:System.UInt32>値。  
  
 [!code-csharp[ParseMethod#6](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#6)]
 [!code-vb[ParseMethod#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#6)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int64.Parse(System.String)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> のスタイルが正しくありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> は <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。</exception>
        <altmember cref="M:System.UInt32.ToString" />
        <altmember cref="Overload:System.UInt32.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static uint Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As UInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static uint Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。 文字列は、<c>style</c> パラメーターで指定されたスタイルを使用して解釈されます。</param>
        <param name="style">
          <c>s</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したスタイルおよびカルチャ固有の書式にある数値の文字列表記を、それと等価な 32 ビット符号なし整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 32 ビット符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `style`パラメーター スタイル要素を定義します (空白や正または負符号) では許可されて、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。  
  
 値に応じて`style`、`s`パラメーターは、次の要素を含めることがあります。  
  
 [*ws*][*$*][*sign*]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  
  
 角かっこ ([ および ]) 内の要素は省略可能です。 場合`style`が含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>、`s`パラメーターは、次の要素を含めることがあります。  
  
 [*ws*]*hexdigits*[*ws*]  
  
 次の表では、各要素について説明します。  
  
|要素|説明|  
|-------------|-----------------|  
|*ws*|省略可能なホワイト スペースです。 先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。|  
|*$*|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.IFormatProvider.GetFormat%2A>のメソッド、`provider`パラメーター。 通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。|  
|*sign*|省略可能な符号の場合。 (メソッドをスロー、<xref:System.OverflowException>場合`s`に負の符号が含まれており、0 以外の数値を表します)。先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>フラグの末尾を表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。 かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。|  
|*digits*|0 ~ 9 桁の数字のシーケンス。|  
|*.*|カルチャに固有の小数点記号です。 現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。|  
|*fractional_digits*|数字 0 ~ 9 の 1 つ以上の出現場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ、またはそうでない場合は 0 の数字の 1 つまたは複数回出現します。 小数部の桁が表示できる`s`場合にのみ、`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。|  
|E|"E"または"E"文字は、値を指数表記で表されていることを示します。 `s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。|  
|*exponential_digits*|0 ~ 9 桁の数字のシーケンス。 `s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。|  
|*hexdigits*|一連の 0 f からまたは f 0 から 16 進数の数字|  
  
 10 進数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>スタイル) が正常に解析します。 ほとんど残りの<xref:System.Globalization.NumberStyles>メンバーが存在する可能性がありますが、この入力文字列内に存在する必要はありません要素を制御します。 次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在可能な要素に影響を与える`s`です。  
  
|非複合`NumberStyles`値|使用できる要素`s`数字だけでなく|  
|------------------------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>|10 進数字のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>|小数点 (*.*) および*fractional_digits*要素。 ただし、スタイルが含まれていない場合、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグを*fractional_digits*のみ 1 つ以上の数字が 0 ので構成されている必要があります。 それ以外の場合、<xref:System.OverflowException>がスローされます。|  
|<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>|"E"または"E"文字は、と共に、指数表記法を示す*exponential_digits*です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>|*Ws*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>|前に符号*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>|後に記号*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>|かっこの前に、と後*桁*を負の値を示します。|  
|<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>|桁区切り記号 (*、*) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>|通貨 (*$*) 要素です。|  
  
 場合、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>フラグを使用すると、 `s` 16 進値でなければなりません。 のみの他のフラグと組み合わせることができますが<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>です。 (、<xref:System.Globalization.NumberStyles>列挙には、複合数値スタイルが含まれています<xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>、両方の空白のフラグが含まれている。)。  
  
> [!NOTE]
>  場合、`s`パラメーターは、16 進数の文字列形式は、その前に、装飾することはできません (など`0x`または`&h`) の 16 進数として区別します。 これにより、解析操作が例外をスローします。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>の書式に関するカルチャ固有の情報を提供するオブジェクト`s`です。 3 つの方法を使用する、`provider`パラメーター、解析操作にカスタムの書式情報を提供します。  
  
-   実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。 (その実装の<xref:System.IFormatProvider.GetFormat%2A>単にそれ自体を返します)。  
  
-   渡すことができます、<xref:System.Globalization.CultureInfo>使用する書式のカルチャを指定するオブジェクト。 その<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティは、書式指定情報を提供します。  
  
-   カスタムを渡すことができます<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドはインスタンス化を返す必要があります、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。  
  
   
  
## Examples  
 次の例では、<xref:System.UInt32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>数値の文字列形式をさまざまなを 32 ビット符号なし整数値に変換します。  
  
 [!code-csharp[System.UInt32.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.parse/cs/parseex4.cs#4)]
 [!code-vb[System.UInt32.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.parse/vb/parseex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int64.Parse(System.String)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 - または -  
  
 <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> の書式が、<paramref name="style" /> に準拠した書式ではありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> は <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。  
  
 - または -  
  
 <paramref name="s" /> は 0 以外の小数部の桁を含んでいます。</exception>
        <altmember cref="M:System.UInt32.ToString" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          現在のインスタンスの値がゼロでない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToBoolean%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Byte" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToByte%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Char" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToChar%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>この変換はサポートされていません。 値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Decimal" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToDecimal%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Double" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToDouble%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Int16" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt16%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Int32" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt32%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Int64" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt64%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.SByte" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToSByte%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Single" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToSingle%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">この <see cref="T:System.UInt32" /> 値の変換後の型。</param>
        <param name="provider">戻り値の書式に関するカルチャ固有の情報を提供する <see cref="T:System.IFormatProvider" /> の実装。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <paramref name="type" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、 `static` (`Shared` Visual Basic で)<xref:System.Convert.ChangeType%2A?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.UInt16" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt16%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>変更されていない、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.UInt64" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt64%28System.UInt32%29?displayProperty=nameWithType>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
        <returns>0 から 9 までの一連の数字から構成され、符号または先行ゼロを含まない、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt32.ToString>メソッドの形式、 <xref:System.UInt32> ("G"、または [全般]) の既定の値の形式を使用して、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。 別の形式またはカルチャを指定する場合は、他のオーバー ロードを使用して、<xref:System.UInt32.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|-------------------|-----------------|----------------------|  
|既定値 ("G") 書式|特定のカルチャ|<xref:System.UInt32.ToString%28System.IFormatProvider%29>|  
|特定の形式|(現在) の既定のカルチャ|<xref:System.UInt32.ToString%28System.String%29>|  
|特定の形式|特定のカルチャ|<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
   
  
## Examples  
 次の例を表示、<xref:System.UInt32>既定により値<xref:System.UInt32.ToString>メソッドです。 文字列形式も表示されます、<xref:System.UInt32>をいくつかの標準書式指定子を使用して結果の値。 例は、EN-US カルチャの書式指定規則を使用して表示されます。  
  
 [!code-csharp[System.UInt32.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.UInt32.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.UInt32.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>0 から 9 までの一連の数字で構成され、符号も先行ゼロも含まない、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt32.ToString%28System.IFormatProvider%29>メソッドの形式、 <xref:System.UInt32> ("G"、または [全般]) の既定の値の形式を使用して、<xref:System.Globalization.NumberFormatInfo>特定のカルチャ オブジェクト。 別の形式または現在のカルチャを指定する場合は、他のオーバー ロードを使用して、<xref:System.UInt32.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|-------------------|-----------------|----------------------|  
|既定値 ("G") 書式|(現在) の既定のカルチャ|<xref:System.UInt32.ToString>|  
|特定の形式|(現在) の既定のカルチャ|<xref:System.UInt32.ToString%28System.String%29>|  
|特定の形式|特定のカルチャ|<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>カルチャに固有の書式情報を提供するオブジェクト。 ただしのプロパティのいずれも、<xref:System.Globalization.NumberFormatInfo>一般数値書式指定子 ("G") でフォーマットするときに使用されます。  
  
   
  
## Examples  
 次の例では、インバリアント カルチャのいずれかを含む、いくつかの書式プロバイダーを使用して、16 ビット符号付き整数値を書式設定します。 例の出力が書式設定された文字列がによって返されることを示しています、<xref:System.UInt32.ToString%28System.IFormatProvider%29>メソッドは、書式プロバイダーに関係なく同じです。  
  
 [!code-csharp[System.UInt32.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.UInt32.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.tostring/vb/tostring2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.UInt32.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">数値書式指定文字列。</param>
        <summary>このインスタンスの数値を、指定した書式を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt32.ToString%28System.String%29>メソッドの形式、<xref:System.UInt32>値を使用して指定された形式で、<xref:System.Globalization.NumberFormatInfo>を現在のカルチャの規則を表すオブジェクト。 既定値 ("G"、または [全般]) を使用する場合は、書式を設定または別のカルチャを指定して、他のオーバー ロードを使用して、<xref:System.UInt32.ToString%2A>メソッドは、次のように。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|-------------------|-----------------|----------------------|  
|既定値 ("G") 書式|(現在) の既定のカルチャ|<xref:System.UInt32.ToString>|  
|既定値 ("G") 書式|特定のカルチャ|<xref:System.UInt32.ToString%28System.IFormatProvider%29>|  
|特定の形式|特定のカルチャ|<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 `format`パラメーターに任意の有効なできます[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)、または任意の組み合わせ[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。 場合`format`と等しい<xref:System.String.Empty?displayProperty=nameWithType>または`null`、現在の戻り値<xref:System.UInt32>オブジェクトは、一般書式指定子 ("G") でフォーマットします。 場合`format`その他の値、メソッドがスローされますが、<xref:System.FormatException>です。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。  
  
-   .NET Framework における書式設定のサポートに関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。  
  
 によって返される文字列の形式が決定されます、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。 によって、`format`パラメーター、このオブジェクトは、桁区切り記号などのシンボルと、出力文字列に小数点記号を制御します。 現在のカルチャ以外のカルチャの書式情報を提供するには、呼び出し、<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>オーバー ロードします。  
  
   
  
## Examples  
 次の例では、各標準書式指定文字列と一部のカスタム書式指定文字列を使用して、32 ビット符号なし整数値を表示します。  
  
 [!code-csharp[System.UInt32.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.UInt32.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.tostring/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> パラメーターが無効です。</exception>
        <altmember cref="M:System.UInt32.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">数値書式指定文字列。</param>
        <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドの形式、<xref:System.UInt32>値を使用して指定された形式で、<xref:System.Globalization.NumberFormatInfo>特定のカルチャ オブジェクト。 既定の形式またはカルチャの設定を使用する場合は、他のオーバー ロードを使用して、<xref:System.UInt32.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|-------------------|-----------------|----------------------|  
|既定値 ("G") 書式|(現在) の既定のカルチャ|<xref:System.UInt32.ToString>|  
|既定値 ("G") 書式|特定のカルチャ|<xref:System.UInt32.ToString%28System.IFormatProvider%29>|  
|特定の形式|(現在) の既定のカルチャ|<xref:System.UInt32.ToString%28System.String%29>|  
  
 `format`パラメーターに任意の有効なできます[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)、または任意の組み合わせ[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。 場合`format`と等しい<xref:System.String.Empty?displayProperty=nameWithType>または`null`、現在の戻り値<xref:System.UInt32>オブジェクトは、一般書式指定子 ("G") でフォーマットします。 場合`format`その他の値、メソッドがスローされますが、<xref:System.FormatException>です。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)です。  
  
-   書式設定に関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>このメソッドによって返される文字列の書式に関するカルチャ固有の情報を提供するオブジェクト。 ときに、<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドが呼び出され、呼び出し、`provider`パラメーターの<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッド渡します、<xref:System.Type>を表すオブジェクト、<xref:System.Globalization.NumberFormatInfo>型です。 <xref:System.IFormatProvider.GetFormat%2A>メソッドが戻ります、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在の書式設定情報を提供する<xref:System.UInt32>桁区切り記号や小数点記号などの値。 3 つの方法を使用する、`provider`書式設定情報を指定するパラメーター、<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>メソッド。  
  
-   渡すことができます、<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。 その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。  
  
-   実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。 (その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。  
  
-   実装するカスタム オブジェクトを渡すことができます<xref:System.IFormatProvider>です。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化し、返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、に基づいて返される文字列の書式設定、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。  
  
   
  
## Examples  
 次の例は、標準の数値書式指定子と特定の番号を使用して、32 ビット符号なし整数値を表示<xref:System.Globalization.CultureInfo>オブジェクト。  
  
 [!code-csharp[System.UInt32.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.tostring/cs/tostring4.cs#4)]
 [!code-vb[System.UInt32.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.tostring/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> パラメーターが無効です。</exception>
        <altmember cref="M:System.UInt32.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列表記を、それと等価の 32 ビット符号なし整数に変換します。 戻り値は変換が成功したか失敗したかを示します。</summary>
        <altmember cref="Overload:System.UInt32.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out uint result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] unsigned int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] System::UInt32 % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out uint result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] unsigned int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.TryParse(System.String,System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] System::UInt32 % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。</param>
        <param name="result">このメソッドから制御が返されたとき、変換に成功した場合は、<c>s</c> に格納された数値と等価な 32 ビット符号なし整数値が格納されます。変換に失敗した場合は 0 が格納されます。 <c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または <see cref="F:System.UInt32.MinValue" /> より小さいか <see cref="F:System.UInt32.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</param>
        <summary>数値の文字列表記を、それと等価の 32 ビット符号なし整数に変換します。 戻り値は変換が成功したか失敗したかを示します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt32.TryParse%2A>などのメソッドは、<xref:System.UInt32.Parse%2A>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。 このメソッドをテストする例外処理を使用する必要がある、<xref:System.FormatException>場合`s`無効なため、正常に解析することはできません。  
  
 `s`パラメーターが、次の形式の 10 進数の文字列形式にする必要があります。  
  
 [*ws*][*sign*]*digits*[*ws*]  
  
 角かっこ ([ および ]) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|-------------|-----------------|  
|*ws*|省略可能なホワイト スペースです。|  
|*sign*|省略可能な符号の場合。 有効な符号文字がによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>現在のカルチャのプロパティです。|  
|*digits*|10 進数字の 0 から 9 までのシーケンス。|  
  
 `s`パラメーターを使用して解釈されます、<xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType>スタイル。 10 進数字以外には、先頭と末尾のスペースが先頭の符号と共にのみを使用できます。 使用できるカルチャに固有の書式情報を持つスタイル要素を明示的に定義する`s`を呼び出し、<xref:System.UInt32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt32%40%29>メソッドです。  
  
> [!NOTE]
>  指定された文字列、`s`パラメーターは、任意の桁区切り記号または 10 進区切り記号を含めることはできず、小数部を持つことはできません。  
  
 `s`で書式設定情報を使用してパラメーターを解析する<xref:System.Globalization.NumberFormatInfo>現在のシステム カルチャ オブジェクト。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>」を参照してください。  
  
 このオーバー ロード内のすべての桁を解釈し、`s`として小数点以下桁数のパラメーターです。 16 進数の文字列表現を解析するには、呼び出し、<xref:System.UInt32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt32%40%29>オーバー ロードを代用します。  
  
   
  
## Examples  
 次の例では、<xref:System.UInt32.TryParse%28System.String%2CSystem.UInt32%40%29>文字列配列の各要素に対して 1 回のメソッドです。  
  
 [!code-csharp[System.UInt32.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.UInt32.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int64.TryParse(System.String,System.Int64@)" />
        <altmember cref="M:System.UInt32.Parse(System.String)" />
        <altmember cref="M:System.UInt32.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out uint result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] unsigned int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::UInt32 % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out uint result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] unsigned int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::UInt32 % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。 文字列は、<c>style</c> パラメーターで指定されたスタイルを使用して解釈されます。</param>
        <param name="style">
          <c>s</c> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="result">変換が成功した場合、このメソッドが返されるときに、<c>s</c> に格納された数値と等しい 32 ビット符号なし整数値を格納します。変換に失敗した場合は 0 を格納します。 <c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> であるか、 <c>style</c> に準拠した形式ではない、または <see cref="F:System.UInt32.MinValue" /> より小さいか <see cref="F:System.UInt32.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</param>
        <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 32 ビット符号なし整数に変換します。 戻り値は変換が成功したか失敗したかを示します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt32%40%29>などのメソッドは、<xref:System.UInt32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。 このメソッドをテストする例外処理を使用する必要がある、<xref:System.FormatException>場合`s`無効なため、正常に解析されたことはできません。  
  
 `style`パラメーター スタイル要素を定義します (空白や正または負符号) では許可されて、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。 値に応じて`style`、`s`パラメーターは、次の要素を含めることがあります。  
  
 [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  
  
 角かっこ ([および]) は省略可能の項目です。 またはの場合、`style`パラメーターが含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>、`s`パラメーターは、次の要素を含めることがあります。  
  
 [*ws*]*hexdigits*[*ws*]  
  
 次の表では、各要素について説明します。  
  
|要素|説明|  
|-------------|-----------------|  
|*ws*|省略可能なホワイト スペースです。 先頭の空白文字が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>フラグ、またはの末尾`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>フラグ。|  
|*$*|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.IFormatProvider.GetFormat%2A>のメソッド、`provider`パラメーター。 通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>フラグ。|  
|*sign*|省略可能な符号の場合。 先頭の符号が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>フラグ。 かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>フラグ。 ただし、負の符号が存在する場合、`s`解析操作が成功するためのゼロの値を表すことができますのみです。|  
|*digits*|0 ~ 9 桁の数字のシーケンス。|  
|*、*|カルチャ固有のグループの区切り記号。 指定されたカルチャの桁区切り記号`provider`に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>フラグ。|  
|*.*|カルチャに固有の小数点記号です。 指定されたカルチャの小数点記号`provider`に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。|  
|*fractional_digits*|数字の 0 の 1 つ以上の出現します。 小数部の桁が表示できる`s`場合にのみ、`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>フラグ。|  
|E|"E"または"E"文字は、値を指数表記で表されていることを示します。 `s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。|  
|*exponential_digits*|0 ~ 9 桁の数字のシーケンス。 `s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>フラグ。|  
|*hexdigits*|一連の 0 f からまたは f 0 から 16 進数の数字|  
  
 10 進数字のみを含む文字列 (に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>フラグ) が正常に解析します。 ほとんど残りの<xref:System.Globalization.NumberStyles>メンバーが存在する可能性がありますが、この入力文字列内に存在する必要はありません要素を制御します。 次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在可能な要素に影響を与える`s`です。  
  
|非複合`NumberStyles`値|数字以外の値で使用できる要素|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|10 進数字のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 (*.*) および*fractional_digits*要素。 ただし、 *fractional_digits*のみ 1 つ以上の数字 0、またはメソッドを返しますので構成されている必要があります`false`です。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、と共に、指数表記法を示す*exponential_digits*です。 場合`s`の数値を表す、0 以外の小数部のコンポーネント、指数表記で持つことができません。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws*の先頭の要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号*の前に要素*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号*要素の後に*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号*ゼロの数値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|桁区切り記号 (*、*) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 (*$*) 要素です。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `s` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws*開始または終了の位置にある要素`s`、*記号*の開始時`s`、および小数点 (*.*) シンボル。 `s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|*Ws*、*記号*、桁区切り記号 (*、*)、および小数点 (*.*) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `s` 16 進数を表すことはできません。|  
  
 場合、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>フラグを使用すると、 `s` 16 進値でなければなりません。 その他のフラグのみで使用可能な`style`は<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>です。 (、<xref:System.Globalization.NumberStyles>列挙体には、複合スタイル<xref:System.Globalization.NumberStyles.HexNumber>、両方の空白のフラグが含まれている)。  
  
> [!NOTE]
>  場合`s`文字列表現は、16 進数は、そのことはできません前に、装飾 (など`0x`または`&h`) の 16 進数として区別します。 これにより、変換に失敗します。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>の書式に関するカルチャ固有の情報を提供するオブジェクト`s`です。 `provider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。 その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。 (その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです)。  
  
-   実装するカスタム オブジェクト<xref:System.IFormatProvider>です。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化し、返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。  
  
   
  
## Examples  
 次の例では、<xref:System.UInt32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt32%40%29>さまざまな文字列の数を持つメソッドと<xref:System.Globalization.NumberStyles>値。  
  
 [!code-csharp[System.UInt32.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint32.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.UInt32.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint32.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int64.TryParse(System.String,System.Int64@)" />
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 - または -  
  
 <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <altmember cref="M:System.UInt32.Parse(System.String)" />
        <altmember cref="M:System.UInt32.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>