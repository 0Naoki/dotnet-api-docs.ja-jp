<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParamArrayAttribute.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bbdd51cde6603fd337db607533c7be2ebff268a2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbdd51cde6603fd337db607533c7be2ebff268a2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ParamArrayAttribute">
          <source>Indicates that a method will allow a variable number of arguments in its invocation.</source>
          <target state="translated">可変個数の引数を指定して呼び出せるメソッドであることを示します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ParamArrayAttribute">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph> indicates that a method parameter is a parameter array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph>メソッドのパラメーターが、パラメーター配列であることを示します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>A parameter array allows the specification of an unknown number of arguments.</source>
          <target state="translated">パラメーター配列では、不明な数の引数を指定をできます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>A parameter array must be the last parameter in a formal parameter list, and it must be a single-dimension array.</source>
          <target state="translated">パラメーター配列は、仮パラメーター リストの最後のパラメーターである必要があり、1 次元配列をする必要があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>When the method is called, a parameter array permits arguments to a method to be specified in either of two ways:</source>
          <target state="translated">メソッドが呼び出されると、パラメーター配列は 2 つの方法のいずれかで指定するメソッドの引数を許可します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>As a single expression of a type that is implicitly convertible to the parameter array type.</source>
          <target state="translated">型の 1 つの式パラメーターの配列型に暗黙的に変換します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The parameter array functions as a value parameter.</source>
          <target state="translated">パラメーター配列は、値を持つパラメーターとして機能します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>As zero or more arguments, where each argument is an expression of a type that is implictly convertible to the type of the parameter array element.</source>
          <target state="translated">0 個以上の引数、パラメーター配列の要素の型に暗黙的に変換できる型の式の各引数であります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The example in the next section illustrates both calling conventions.</source>
          <target state="translated">次のセクションの例では、両方の呼び出し規約を示しています。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph> is not used directly in code.</source>
          <target state="translated">通常、<ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph>コード内で直接は使用されません。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>Instead, individual language keywords, such as <ph id="ph1">`ParamArray`</ph> in Visual Basic and <ph id="ph2">`params`</ph> in C#, are used as wrappers for the <ph id="ph3">&lt;xref:System.ParamArrayAttribute&gt;</ph> class.</source>
          <target state="translated">代わりに、個々 の言語キーワードなど<ph id="ph1">`ParamArray`</ph>Visual basic と<ph id="ph2">`params`</ph>、C# の場合は、用のラッパーとして使用されます、<ph id="ph3">&lt;xref:System.ParamArrayAttribute&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>Some languages, such as C#, may even require the use of the language keyword and prohibit the use of <ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph>.</source>
          <target state="translated">C# の場合などの一部の言語の言語のキーワードを使用する必要し、の使用を禁止する可能性がありますも<ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>During overload resolution, when compilers that support parameter arrays encounter a method overload that does not exist but has one fewer parameter than an overload that includes a parameter array, they will replace the method with the overload that includes the parameter array.</source>
          <target state="translated">オーバー ロードの解決中にパラメーター配列をサポートするコンパイラ メソッド オーバー ロードが存在しませんが、パラメーター配列を含むオーバー ロードより少ない 1 つのパラメーターを検出するときに、メソッドと置き換わりますパラメーター配列を含むオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>For example, a call to the <ph id="ph1">`String.Split()`</ph> instance method (which does not exist in the <ph id="ph2">&lt;xref:System.String&gt;</ph> class) is resolved as a call to the <ph id="ph3">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">呼び出しなど、<ph id="ph1">`String.Split()`</ph>インスタンス メソッド (に存在しない、<ph id="ph2">&lt;xref:System.String&gt;</ph>クラス) への呼び出しとして解決される、<ph id="ph3">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The compiler will also pass an empty array of the required type to the method.</source>
          <target state="translated">コンパイラは渡すことも、必要な型の空の配列メソッドにします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>This means that the method must always be prepared to handle an array whose length is zero when it processes the elements in the parameter array.</source>
          <target state="translated">つまり、メソッドはパラメーター配列内の要素を処理するときの長さが 0 の配列を処理する常に準備する必要があります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The example provides an illustration.</source>
          <target state="translated">具体的な例を次に示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>For more information about using attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](~/docs/standard/attributes/index.md)</ept>.</source>
          <target state="translated">属性の使用方法の詳細については、次を参照してください。<bpt id="p1">[</bpt>属性<ept id="p1">](~/docs/standard/attributes/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that includes a <ph id="ph2">`Display`</ph> method, which is intended to display one or more formatted temperature values.</source>
          <target state="translated">次の例では定義、<ph id="ph1">`Temperature`</ph>クラスを含む、<ph id="ph2">`Display`</ph>メソッドで、1 つまたは複数の書式設定された温度値を表示するためのものでは、します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The method has a single parameter, <ph id="ph1">`formats`</ph>, which is defined as a parameter array.</source>
          <target state="translated">メソッドには、単一のパラメーター <ph id="ph1">`formats`</ph>、パラメーター配列として定義されています。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The following example illustrates three different calls to the <ph id="ph1">`Temperature.Display`</ph> method.</source>
          <target state="translated">次の例では、次の 3 つの異なる呼び出し、<ph id="ph1">`Temperature.Display`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>In the first, the method is passed an array of format strings.</source>
          <target state="translated">最初の例で、書式指定文字列の配列をメソッドに渡されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>In the second, the method is passed four individual format strings as arguments.</source>
          <target state="translated">2 番目の場合、メソッドは 4 つの個別の書式指定文字列を引数として渡されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>In the third, the method is called with no arguments.</source>
          <target state="translated">3 番目に、メソッドは、引数なしで呼び出されます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>As the output from the example illustrates, the Visual Basic and C# compilers translate this into a call to the <ph id="ph1">`Display`</ph> method with an empty string array.</source>
          <target state="translated">Visual Basic と c# コンパイラこれの翻訳をへの呼び出しに、例からの出力が示すように、<ph id="ph1">`Display`</ph>空の文字列配列を持つメソッドです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ParamArrayAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ParamArrayAttribute" /&gt;</ph> class with default properties.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ParamArrayAttribute" /&gt;</ph> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>