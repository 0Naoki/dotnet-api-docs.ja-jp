<Type Name="ParamArrayAttribute" FullName="System.ParamArrayAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2abb5d715f4827ef791ba2f842f5cfac33d4ca8c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429273" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ParamArrayAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ParamArrayAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ParamArrayAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ParamArrayAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParamArrayAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ParamArrayAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f5226-101">可変個数の引数を指定して呼び出せるメソッドであることを示します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5226-101">Indicates that a method will allow a variable number of arguments in its invocation.</span>
      </span>
      <span data-ttu-id="f5226-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5226-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5226-103"><xref:System.ParamArrayAttribute>メソッドのパラメーターが、パラメーター配列であることを示します。</span><span class="sxs-lookup"><span data-stu-id="f5226-103">The <xref:System.ParamArrayAttribute> indicates that a method parameter is a parameter array.</span></span> <span data-ttu-id="f5226-104">パラメーター配列では、不明な数の引数を指定をできます。</span><span class="sxs-lookup"><span data-stu-id="f5226-104">A parameter array allows the specification of an unknown number of arguments.</span></span> <span data-ttu-id="f5226-105">パラメーター配列は、仮パラメーター リストの最後のパラメーターである必要があり、1 次元配列をする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5226-105">A parameter array must be the last parameter in a formal parameter list, and it must be a single-dimension array.</span></span> <span data-ttu-id="f5226-106">メソッドが呼び出されると、パラメーター配列は 2 つの方法のいずれかで指定するメソッドの引数を許可します。</span><span class="sxs-lookup"><span data-stu-id="f5226-106">When the method is called, a parameter array permits arguments to a method to be specified in either of two ways:</span></span>  
  
-   <span data-ttu-id="f5226-107">型の 1 つの式パラメーターの配列型に暗黙的に変換します。</span><span class="sxs-lookup"><span data-stu-id="f5226-107">As a single expression of a type that is implicitly convertible to the parameter array type.</span></span> <span data-ttu-id="f5226-108">パラメーター配列は、値を持つパラメーターとして機能します。</span><span class="sxs-lookup"><span data-stu-id="f5226-108">The parameter array functions as a value parameter.</span></span>  
  
-   <span data-ttu-id="f5226-109">0 個以上の引数、パラメーター配列の要素の型に暗黙的に変換できる型の式の各引数であります。</span><span class="sxs-lookup"><span data-stu-id="f5226-109">As zero or more arguments, where each argument is an expression of a type that is implictly convertible to the type of the parameter array element.</span></span>  
  
 <span data-ttu-id="f5226-110">次のセクションの例では、両方の呼び出し規約を示しています。</span><span class="sxs-lookup"><span data-stu-id="f5226-110">The example in the next section illustrates both calling conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5226-111">通常、<xref:System.ParamArrayAttribute>コード内で直接は使用されません。</span><span class="sxs-lookup"><span data-stu-id="f5226-111">Typically, the <xref:System.ParamArrayAttribute> is not used directly in code.</span></span> <span data-ttu-id="f5226-112">代わりに、個々 の言語キーワードなど`ParamArray`Visual basic と`params`、C# の場合は、用のラッパーとして使用されます、<xref:System.ParamArrayAttribute>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f5226-112">Instead, individual language keywords, such as `ParamArray` in Visual Basic and `params` in C#, are used as wrappers for the <xref:System.ParamArrayAttribute> class.</span></span> <span data-ttu-id="f5226-113">C# の場合などの一部の言語の言語のキーワードを使用する必要し、の使用を禁止する可能性がありますも<xref:System.ParamArrayAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="f5226-113">Some languages, such as C#, may even require the use of the language keyword and prohibit the use of <xref:System.ParamArrayAttribute>.</span></span>  
  
 <span data-ttu-id="f5226-114">オーバー ロードの解決中にパラメーター配列をサポートするコンパイラ メソッド オーバー ロードが存在しませんが、パラメーター配列を含むオーバー ロードより少ない 1 つのパラメーターを検出するときに置き換えられますメソッドを含むオーバー ロードで、パラメーターの配列。</span><span class="sxs-lookup"><span data-stu-id="f5226-114">During overload resolution, when compilers that support parameter arrays encounter a method overload that does not exist but has one fewer parameter than an overload that includes a parameter array, they will replace the method with the overload that includes the parameter array.</span></span> <span data-ttu-id="f5226-115">呼び出しなど、`String.Split()`インスタンス メソッド (に存在しない、<xref:System.String>クラス) への呼び出しとして解決される、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="f5226-115">For example, a call to the `String.Split()` instance method (which does not exist in the <xref:System.String> class) is resolved as a call to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f5226-116">コンパイラは渡すことも、必要な型の空の配列メソッドにします。</span><span class="sxs-lookup"><span data-stu-id="f5226-116">The compiler will also pass an empty array of the required type to the method.</span></span> <span data-ttu-id="f5226-117">つまり、メソッドはパラメーター配列内の要素を処理するときの長さが 0 の配列を処理する常に準備する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5226-117">This means that the method must always be prepared to handle an array whose length is zero when it processes the elements in the parameter array.</span></span> <span data-ttu-id="f5226-118">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f5226-118">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="f5226-119">属性の使用方法の詳細については、次を参照してください。[属性](~/docs/standard/attributes/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="f5226-119">For more information about using attributes, see [Attributes](~/docs/standard/attributes/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5226-120">次の例では定義、`Temperature`クラスを含む、`Display`メソッドで、1 つまたは複数の書式設定された温度値を表示するためのものでは、します。</span><span class="sxs-lookup"><span data-stu-id="f5226-120">The following example defines a `Temperature` class that includes a `Display` method, which is intended to display one or more formatted temperature values.</span></span> <span data-ttu-id="f5226-121">メソッドには、単一のパラメーター `formats`、パラメーター配列として定義されています。</span><span class="sxs-lookup"><span data-stu-id="f5226-121">The method has a single parameter, `formats`, which is defined as a parameter array.</span></span>  
  
 [!code-csharp[System.ParamArrayAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.ParamArrayAttribute/cs/Example.cs#1)]
 [!code-vb[System.ParamArrayAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.ParamArrayAttribute/vb/Example.vb#1)]  
  
 <span data-ttu-id="f5226-122">次の例では、次の 3 つの異なる呼び出し、`Temperature.Display`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="f5226-122">The following example illustrates three different calls to the `Temperature.Display` method.</span></span> <span data-ttu-id="f5226-123">最初の例で、書式指定文字列の配列をメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="f5226-123">In the first, the method is passed an array of format strings.</span></span> <span data-ttu-id="f5226-124">2 番目の場合、メソッドは 4 つの個別の書式指定文字列を引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="f5226-124">In the second, the method is passed four individual format strings as arguments.</span></span> <span data-ttu-id="f5226-125">3 番目に、メソッドは、引数なしで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5226-125">In the third, the method is called with no arguments.</span></span> <span data-ttu-id="f5226-126">Visual Basic と c# コンパイラこれの翻訳をへの呼び出しに、例からの出力が示すように、`Display`空の文字列配列を持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="f5226-126">As the output from the example illustrates, the Visual Basic and C# compilers translate this into a call to the `Display` method with an empty string array.</span></span>  
  
 [!code-csharp[System.ParamArrayAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.ParamArrayAttribute/cs/Example.cs#2)]
 [!code-vb[System.ParamArrayAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.ParamArrayAttribute/vb/Example.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParamArrayAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ParamArrayAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ParamArrayAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5226-127">
            <see cref="T:System.ParamArrayAttribute" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5226-127">Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>