<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="810fe50283e801c3e7dde603475dc30ccd6ad1c8" /><Meta Name="ms.sourcegitcommit" Value="7845f124909a0999a19cc65f40feab5e75cd9b8d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65064615" /></Metadata><TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidOperationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクトの現在の状態に対して無効なメソッド呼び出しが行われた場合にスローされる例外。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.InvalidOperationException>は、メソッドを呼び出すことができなかった場合に、無効な引数以外の理由によって発生します。 通常は、オブジェクトの状態がメソッド呼び出しをサポートできない場合にスローされます。 たとえば、 <xref:System.InvalidOperationException>次のようなメソッドによって例外がスローされます。  
  
-   <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType>列挙子の作成後にコレクションのオブジェクトを変更する場合はです。 詳細については、「[コレクションの反復処理中の変更](#Iterating)」を参照してください。  
  
-   <xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType>メソッド呼び出しが行われる前にリソースセットが閉じられている場合は。  
  
-   <xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>を指定すると、追加するオブジェクトが不適切に構造化された XML ドキュメントになります。  
  
-   メインまたは UI スレッドではないスレッドから UI を操作しようとするメソッド。  
  
> [!IMPORTANT]
>  この例外はさまざまな状況でスローされる可能性があるため、 <xref:System.Exception.Message%2A>プロパティによって返される例外メッセージを読み取ることが重要です。 <xref:System.InvalidOperationException>  
  
 このセクションの内容:  
  
 [InvalidOperationException 例外の一般的な原因](#Causes)   
 [Ui 以外のスレッドから UI スレッドを更新する](#UI)  
 [反復処理中のコレクションの変更](#Iterating)  
 [オブジェクトを比較できない配列またはコレクションの並べ替え](#Sorting)  
 [Null である&lt;null&gt;許容の T を基になる型にキャストしています](#Nullable)   
 [空のコレクションでの system.string メソッドの呼び出し](#Empty)  
 [1つの要素を含まないシーケンスで列挙可能な単一または SingleOrDefault を呼び出す](#Single)  
 [動的なクロスアプリケーションドメインフィールドアクセス](#Emit)  
[InvalidOperationException 例外のスロー](#Throwing)  
[その他の情報](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a>InvalidOperationException 例外の一般的な原因  
 次のセクションでは、アプリで<xref:System.InvalidOperationException>例外がスローされる一般的なケースについて説明します。 この問題をどのように処理するかは、特定の状況によって異なります。 ただし、ほとんどの場合、例外は開発者エラーに<xref:System.InvalidOperationException>よって発生するので、例外を予測して回避することができます。  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a>Ui 以外のスレッドから UI スレッドを更新する  
 多くの場合、ワーカースレッドを使用して、アプリケーションのユーザーインターフェイスに表示されるデータの収集を含むバックグラウンド作業を実行します。 ただし. .NET Framework 用のほとんどの GUI (グラフィカルユーザーインターフェイス) アプリケーションフレームワーク (Windows フォーム、Windows Presentation Foundation (WPF) など) を使用すると、UI を作成および管理するスレッド (メインまたは UI スレッド) からのみ、GUI オブジェクトにアクセスできます。 Ui <xref:System.InvalidOperationException>スレッド以外のスレッドから ui 要素にアクセスしようとすると、がスローされます。  例外メッセージのテキストを次の表に示します。  
  
|アプリケーションの種類|メッセージ|  
|----------------------|-------------|  
|WPF アプリ|**別のスレッドが所有しているため、呼び出し元のスレッドはこのオブジェクトにアクセスできません。**|  
|UWP アプリ|**アプリケーションが、別のスレッドにマーシャリングされたインターフェイスを呼び出しました。**|  
|Windows フォームアプリ|**スレッド間の操作が無効です:コントロールが作成されたスレッド以外のスレッドから、コントロール ' TextBox1 ' がアクセスされました。**|  
  
 .NET Framework の UI フレームワークは、ui 要素のメンバーへの呼び出しが UI スレッドで実行されているかどうかを確認するメソッドと、UI スレッドでの呼び出しをスケジュールするその他のメソッドを含む、*ディスパッチャー*パターンを実装します。  
  
-   WPF アプリで<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType>メソッドを呼び出して、UI 以外のスレッドでメソッドが実行されているかどうかを確認します。 メソッドが`true` UI `false`スレッドで実行されている場合はを返し、それ以外の場合はを返します。 UI スレッドで呼び出しをスケジュールする<xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType>には、メソッドのいずれかのオーバーロードを呼び出します。  
  
-   UWP アプリで、 [CoreDispatcher](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx)メソッドを呼び出して、UI 以外のスレッドでメソッドが実行されているかどうかを確認します。 [CoreDispatcher](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx)メソッドを呼び出して、UI スレッドを更新するデリゲートを実行します。 「  
  
-   Windows フォームアプリで、 <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType>プロパティを使用して、メソッドが非 UI スレッドで実行されているかどうかを確認します。 <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType>メソッドのオーバーロードの1つを呼び出して、UI スレッドを更新するデリゲートを実行します。  
  
 次の例は、 <xref:System.InvalidOperationException>作成したスレッド以外のスレッドから UI 要素を更新しようとしたときにスローされる例外を示しています。  各例では、次の2つのコントロールを作成する必要があります。  
  
-   という名前`textBox1`のテキストボックスコントロール。  Windows フォームアプリでは、 <xref:System.Windows.Forms.TextBox.Multiline%2A>プロパティをに`true`設定する必要があります。  
  
-   という名前`threadExampleBtn`のボタンコントロール。 この例では、ボタン`ThreadsExampleBtn_Click`の`Click`イベントのハンドラーを提供しています。  
  
 どちらの場合も、 `threadExampleBtn_Click`イベントハンドラーは`DoSomeWork`メソッドを2回呼び出します。 最初の呼び出しは同期的に実行され、成功します。 ただし、2回目の呼び出しは、スレッドプールのスレッドで非同期的に実行されるので、UI 以外のスレッドから UI を更新しようとします。 この結果、例外<xref:System.InvalidOperationException>が発生します。  
  
 WPF と UWP アプリ  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 次のバージョン`DoSomeWork`のメソッドでは、WPF アプリで例外が除去されます。  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 次のバージョン`DoSomeWork`のメソッドは、UWP アプリで例外を除去します。  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 Windows フォーム アプリ  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 次のバージョン`DoSomeWork`のメソッドでは、Windows フォームアプリで例外が除去されます。  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a>反復処理中のコレクションの変更  
 Visual Basic 内のC# `For Each`ステートメントまたはステートメント内のステートメントは、コレクションのメンバーを反復処理し、個々の要素を読み取りまたは変更するために使用されます`foreach` 。 ただし、コレクションの項目を追加または削除するために使用することはできません。 これを行うと<xref:System.InvalidOperationException> 、"**コレクションが変更されました。" のようなメッセージが表示され、例外がスローされます。列挙操作を実行できない可能性があります。**"  
  
 次の例では、整数の集合を反復処理して、各整数の2乗をコレクションに追加します。 この例では<xref:System.InvalidOperationException> 、メソッドの<xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType>最初の呼び出しを使用してをスローします。  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 アプリケーションロジックに応じて、次の2つの方法のいずれかで例外を除去できます。  
  
-   反復処理中にコレクションに要素を追加する必要がある場合`for` `foreach`は、またはでは`For Each`なくステートメントを使用して、インデックスで反復処理できます。 次の例では、for ステートメントを使用して、コレクション内の数値の2乗をコレクションに追加します。  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     反復処理の回数を設定する必要があることに注意してください。ループ内のカウンターを使用して、ループを適切に終了するに`Count`は、前に繰り返すか、-1 から0を反復処理します。配列内の要素のうち、変数を使用し、それを使用してループの上限を設定します。 それ以外の場合、反復処理のたびに要素がコレクションに追加されると、無限ループが発生します。  
  
-   反復処理中にコレクションに要素を追加する必要がない場合は、コレクションの反復処理が終了したときに追加する一時コレクションに追加する要素を格納できます。  次の例では、この方法を使用してコレクション内の数値の2乗を一時コレクションに追加し、コレクションを1つの配列オブジェクトに結合します。  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a>オブジェクトを比較できない配列またはコレクションの並べ替え  
 <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>メソッド<xref:System.IComparable%601> <xref:System.IComparable>やメソッドなどの汎用的な並べ替え方法では、通常、並べ替えの対象となるオブジェクトの少なくとも1つが、インターフェイスまたはインターフェイスを実装する必要があります。 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> それ以外の場合、コレクションまたは配列は並べ替えられず、メソッド<xref:System.InvalidOperationException>は例外をスローします。 次の例では`Person` 、クラスを定義`Person`し、2つ<xref:System.Collections.Generic.List%601>のオブジェクトをジェネリックオブジェクトに格納して、並べ替えを試みます。 この例の出力が示すように、 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>メソッドを呼び出すと、が<xref:System.InvalidOperationException>スローされます。  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 例外は、次の3つの方法のいずれかで排除できます。  
  
-   並べ替えようとしている型を所有できる場合 (つまり、ソースコードを制御する場合)、 <xref:System.IComparable%601> <xref:System.IComparable>またはインターフェイスを実装するように変更できます。 これを行うに<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> <xref:System.IComparable.CompareTo%2A>は、メソッドまたはメソッドのいずれかを実装する必要があります。 既存の型にインターフェイス実装を追加することは、互換性に影響する変更点ではありません。  
  
     次の例では、この方法を<xref:System.IComparable%601>使用して`Person` 、クラスの実装を提供しています。 コレクションまたは配列の一般的な並べ替えメソッドを呼び出すこともできます。この例の出力に示されているように、コレクションは正常に並べ替えられます。  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   並べ替えようとしている型のソースコードを変更できない場合は、 <xref:System.Collections.Generic.IComparer%601>インターフェイスを実装する特別な目的の並べ替えクラスを定義できます。  パラメーター<xref:System.Collections.Generic.IComparer%601>を含む`Sort`メソッドのオーバーロードを呼び出すことができます。 この方法は、複数の条件に基づいてオブジェクトを並べ替えることができる特殊な並べ替えクラスを開発する場合に特に便利です。  
  
     次の例では、コレクションの並べ替え`PersonComparer` `Person`に使用されるカスタムクラスを開発することによって、アプローチを使用します。  次に、このクラスのインスタンスを<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType>メソッドに渡します。  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   並べ替えようとしている型のソースコードを変更できない場合は、並べ替えを実行<xref:System.Comparison%601>するデリゲートを作成できます。 デリゲートシグネチャはです。  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     次の例では、 `PersonComparison` <xref:System.Comparison%601>デリゲートシグネチャと一致するメソッドを定義することによって、アプローチを使用します。  次に、このデリゲートを<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType>メソッドに渡します。  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a>Null である\<null 許容型 > を基になる型にキャストしています  
 基になる型<xref:System.Nullable%601> `null`に値をキャストしようとすると、 <xref:System.InvalidOperationException>例外がスローされ、"**null 許容のオブジェクトには値が必要です**" というエラーメッセージが表示されます。  
  
 次の例では<xref:System.InvalidOperationException> 、値を`Nullable(Of Integer)`含む配列を反復処理しようとすると、例外がスローされます。  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 例外を回避するには、次のようにします。  
  
-   プロパティを<xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType>使用して、以外`null`の要素のみを選択します。  
  
-   オーバーロードのいずれか<xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType>を呼び出して、 `null`値の既定値を指定します。  
  
 次の例では、両方と<xref:System.InvalidOperationException>も例外を回避します。  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a>空のコレクションでの system.string メソッドの呼び出し  
 <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType> 、<xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>、 、<xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>、 、<xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>、、およびの<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>各メソッドは、シーケンスに対して操作を実行し、1つの結果を返します。 <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>   これらのメソッドの一部のオーバーロード<xref:System.InvalidOperationException>は、シーケンスが空の場合に例外をスロー `null`し、他のオーバーロードはを返します。 また<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 、このメソッドは<xref:System.InvalidOperationException> 、シーケンスに複数の要素が含まれている場合にも例外をスローします。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>例外をスローするメソッドのほとんどはオーバーロードです。 選択したオーバーロードの動作を理解していることを確認してください。  
  
 次の表に、いくつか<xref:System.InvalidOperationException> <xref:System.Linq.Enumerable?displayProperty=nameWithType>のメソッドの呼び出しによってスローされる例外オブジェクトからの例外メッセージの一覧を示します。  
  
|メソッド|メッセージ|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|**シーケンスに要素が含まれていません**|  
|`First`|**シーケンスに一致する要素が含まれていません**|  
|`Single` <br /> `SingleOrDefault`|**シーケンスに複数の一致する要素が含まれています**|  
  
 例外を除去または処理する方法は、アプリケーションの前提条件と、呼び出す特定の方法によって異なります。  
  
-   空のシーケンスを確認せずにこれらのメソッドのいずれかを意図的に呼び出した場合は、シーケンスが空ではなく、空のシーケンスが予期しない状態になることを前提としています。 この場合、例外をキャッチまたは再スローするのが適切です。  
  
-   空のシーケンスのチェックに失敗した場合は、 <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>オーバーロードのいずれかのオーバーロードを呼び出して、シーケンスに要素が含まれているかどうかを判断できます。  
  
    > [!TIP]
    >  シーケンスを<xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>生成する前にメソッドを呼び出すと、処理されるデータに多数の要素が含まれている場合や、シーケンスを生成する操作の負荷が高い場合に、パフォーマンスが向上します。  
  
-   <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>、、または<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>などのメソッドを呼び出した場合は、シーケンスのメンバーではなく既定値を返す、、などの別のメソッドを置き換えることができます。 <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>  
  
 これらの例では、追加の詳細情報を提供します。  
  
 次の例では<xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> 、メソッドを使用して、値が4より大きいシーケンスの平均を計算します。 元の配列の値が4を超えることはないため、シーケンスに値は含まれず、メソッド<xref:System.InvalidOperationException>は例外をスローします。  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 次の例に示すように、 <xref:System.Linq.Enumerable.Any%2A>メソッドを呼び出して、シーケンスを処理するメソッドを呼び出す前に、シーケンスに要素が含まれているかどうかを判断することにより、例外を排除できます。  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>メソッドは、シーケンス内の最初の項目、または指定された条件を満たすシーケンス内の最初の要素を返します。 シーケンスが空であるために最初の要素がない場合は、 <xref:System.InvalidOperationException>例外がスローされます。  
  
 次の例では、 <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> dbQueryResults 配列に<xref:System.InvalidOperationException> 4 より大きい要素が含まれていないため、メソッドは例外をスローします。  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> の<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>代わりにメソッドを呼び出して、指定された値または既定値を返すことができます。 メソッドがシーケンス内の最初の要素を見つけられない場合は、そのデータ型の既定値を返します。  既定値は、 `null`参照型の場合は0、数値データ型<xref:System.DateTime.MinValue?displayProperty=nameWithType> <xref:System.DateTime>の場合は0、型の場合はです。  
  
> [!NOTE]
>  <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>メソッドによって返される値を解釈することは、多くの場合、型の既定値がシーケンス内の有効な値であるという事実によって複雑になります。 この場合は、メソッドを呼び出し<xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>て、 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>メソッドを呼び出す前に、シーケンスに有効なメンバーがあるかどうかを確認します。  
  
 次の例では<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> 、メソッドを呼び出し<xref:System.InvalidOperationException>て、前の例で例外がスローされないようにしています。  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a>1つの要素を含まないシーケンスで列挙可能な単一または SingleOrDefault を呼び出す  
 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>メソッドは、シーケンスの唯一の要素、または指定された条件を満たすシーケンスの唯一の要素を返します。    シーケンス内に要素が存在しない場合、または複数の要素が存在する場合、メソッドは<xref:System.InvalidOperationException>例外をスローします。  
  
 シーケンスに要素が<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>含まれていない場合に例外をスローする代わりに、メソッドを使用して既定値を返すことができます。 ただし、シーケンス<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>に複数の要素<xref:System.InvalidOperationException>が含まれている場合、メソッドは依然として例外をスローします。  
  
 次の表は、メソッドおよび<xref:System.InvalidOperationException> <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドの<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>呼び出しによってスローされた例外オブジェクトからの例外メッセージの一覧です。  
  
|メソッド|メッセージ|  
|------------|-------------|  
|`Single`|**シーケンスに一致する要素が含まれていません**|  
|`Single` <br /> `SingleOrDefault`|**シーケンスに複数の一致する要素が含まれています**|  
  
 次の例では、シーケンスに 4 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>より大きい要素<xref:System.InvalidOperationException>が含まれていないため、メソッドの呼び出しで例外がスローされます。  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 次の例では、 <xref:System.InvalidOperationException> <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドを呼び出す代わりに、シーケンスが空の場合にスローされる例外を回避しようとしています。 ただし、このシーケンスは2より大きい値を持つ複数の要素を返すため、 <xref:System.InvalidOperationException>例外もスローします。  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>メソッドを呼び出すと、指定した条件を満たすシーケンスまたはシーケンスに含まれる要素が1つだけであることが前提となります。  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>0個または1個の結果を持つシーケンスを想定していますが、これ以上はありません。 この想定が自分のパーツに意図的に作成されていて、これらの条件が満たされ<xref:System.InvalidOperationException>ていない場合は、結果のを再スローまたはキャッチすることが適切です。 それ以外の場合、または何らかの頻度で無効な条件が発生すると予想さ<xref:System.Linq.Enumerable>れる場合は、 <xref:System.Linq.Enumerable.FirstOrDefault%2A>や<xref:System.Linq.Enumerable.Where%2A>などの他の方法を使用することを検討してください。  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a>動的なクロスアプリケーションドメインフィールドアクセス  
 取得しようとしているアドレスがコード<xref:System.InvalidOperationException>を実行しているアプリケーションドメイン内にない場合、 Microsoft中間言語(MSIL)命令は例外をスローします。<xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> フィールドのアドレスには、そのフィールドが存在するアプリケーションドメインからのみアクセスできます。  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a>InvalidOperationException 例外のスロー  
 何らかの理由<xref:System.InvalidOperationException>でオブジェクトの状態が特定のメソッド呼び出しをサポートしていない場合にのみ、例外をスローする必要があります。 つまり、メソッドの呼び出しは、状況やコンテキストによっては有効ですが、他の方法では無効です。  
  
 メソッドの呼び出しエラーが無効な引数で<xref:System.ArgumentException>ある場合、またはその派生<xref:System.ArgumentNullException>クラス (または<xref:System.ArgumentOutOfRangeException>) のいずれかを代わりにスローする必要があります。  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a>その他の情報  
 <xref:System.InvalidOperationException>では、値 0x8013150 9 を持つ HRESULT COR_E_INVALIDOPERATION が使用されます。  
  
 <xref:System.InvalidOperationException>インスタンスの初期プロパティ値の一覧については、<xref:System.InvalidOperationException.%23ctor%2A>コンストラクターを参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">例外の処理とスロー</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、 <xref:System.Exception.Message%2A>新しいインスタンスのプロパティを、"要求された操作を実行できません" などのエラーを説明するシステム提供のメッセージに初期化します。 このメッセージには、現在のシステムのカルチャが考慮されます。  
  
 <xref:System.InvalidOperationException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Exception.Message%2A>|ローカライズされたエラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string -&gt; InvalidOperationException" Usage="new System.InvalidOperationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">エラーを説明するメッセージ。</param>
        <summary>指定したエラー メッセージを使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、`message`パラメーターを使用して、新しい例外の<xref:System.Exception.Message%2A?displayProperty=nameWithType>プロパティを初期化します。 `message` の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。  
  
 <xref:System.InvalidOperationException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
        <param name="context">転送元または転送先に関するコンテキスト情報。</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。 詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML シリアル化および SOAP シリアル化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string * Exception -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">例外の原因を説明するエラー メッセージ。</param>
        <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
        <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照を含める必要があります。 <xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。内部例外値がコンストラクターに渡されなかった場合、<xref:System.Exception.InnerException%2A> プロパティはnull 参照 (Visual Basic の場合は `Nothing`) を返します。  
  
 <xref:System.InvalidOperationException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部例外の参照。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">例外の処理とスロー</related>
      </Docs>
    </Member>
  </Members>
</Type>