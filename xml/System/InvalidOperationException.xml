<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7eef3c78c550cc2f6c9c891703b21cfbe65f49ec" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30730846" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="02a55-101">オブジェクトの現在の状態に対して無効なメソッド呼び出しが行われた場合にスローされる例外。</span>
      <span class="sxs-lookup">
        <span data-stu-id="02a55-101">The exception that is thrown when a method call is invalid for the object's current state.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02a55-102"><xref:System.InvalidOperationException> 無効な引数以外の理由により、メソッドの呼び出しにエラーが発生したときに、ケースで使用されます。</span><span class="sxs-lookup"><span data-stu-id="02a55-102"><xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments.</span></span> <span data-ttu-id="02a55-103">通常、オブジェクトの状態は、メソッドの呼び出しをサポートできない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="02a55-103">Typically, it is thrown when the state of an object cannot support the method call.</span></span> <span data-ttu-id="02a55-104">たとえば、<xref:System.InvalidOperationException>例外がなどのメソッドによってスローされます。</span><span class="sxs-lookup"><span data-stu-id="02a55-104">For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:</span></span>  
  
-   <span data-ttu-id="02a55-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> コレクションのオブジェクトが後に変更された場合は、列挙子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="02a55-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> if objects of a collection are modified after the enumerator is created.</span></span> <span data-ttu-id="02a55-106">詳細については、次を参照してください。[それを繰り返し処理中にコレクションを変更する](#Iterating)です。</span><span class="sxs-lookup"><span data-stu-id="02a55-106">For more information, see [Changing a collection while iterating it](#Iterating).</span></span>  
  
-   <span data-ttu-id="02a55-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> 前に、リソース セットが閉じている場合、メソッドの呼び出しが行われます。</span><span class="sxs-lookup"><span data-stu-id="02a55-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> if the resource set is closed before the method call is made.</span></span>  
  
-   <span data-ttu-id="02a55-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>、かどうか、オブジェクトを追加することになりますが正しくない構造化された XML ドキュメントです。</span><span class="sxs-lookup"><span data-stu-id="02a55-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>, if the object or objects to be added would result in an incorrectly structured XML document.</span></span>  
  
-   <span data-ttu-id="02a55-109">メイン スレッドまたは UI スレッドから UI を操作しようとするメソッド。</span><span class="sxs-lookup"><span data-stu-id="02a55-109">A method that attempts to manipulate the UI from a thread that is not the main or UI thread.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02a55-110"><xref:System.InvalidOperationException>例外はスローされる状況のさまざまなですることが重要で返される例外メッセージを読み取る、<xref:System.Exception.Message%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="02a55-110">Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property.</span></span>  
  
 <span data-ttu-id="02a55-111">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="02a55-111">In this section:</span></span>  
  
 <span data-ttu-id="02a55-112">[InvalidOperationException 例外の一般的な原因](#Causes) </span><span class="sxs-lookup"><span data-stu-id="02a55-112">[Some common causes of InvalidOperationException exceptions](#Causes) </span></span>  
 [<span data-ttu-id="02a55-113">UI 以外のスレッドから UI スレッドを更新</span><span class="sxs-lookup"><span data-stu-id="02a55-113">Updating a UI thread from a non-UI thread</span></span>](#UI)  
 [<span data-ttu-id="02a55-114">これを繰り返し処理中にコレクションを変更します。</span><span class="sxs-lookup"><span data-stu-id="02a55-114">Changing a collection while iterating it</span></span>](#Iterating)  
 [<span data-ttu-id="02a55-115">比較できないオブジェクトを持つ配列またはコレクションの並べ替え</span><span class="sxs-lookup"><span data-stu-id="02a55-115">Sorting an array or collection whose objects cannot be compared</span></span>](#Sorting)  
 <span data-ttu-id="02a55-116">[キャスト Nullable&lt;T&gt;を基になる型に null であります。](#Nullable) </span><span class="sxs-lookup"><span data-stu-id="02a55-116">[Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable) </span></span>  
 [<span data-ttu-id="02a55-117">空のコレクションに対して System.Linq.Enumerable メソッドを呼び出す</span><span class="sxs-lookup"><span data-stu-id="02a55-117">Calling a System.Linq.Enumerable method on an empty collection</span></span>](#Empty)  
 [<span data-ttu-id="02a55-118">1 つの要素のないシーケンスで Enumerable.Single または Enumerable.SingleOrDefault を呼び出す</span><span class="sxs-lookup"><span data-stu-id="02a55-118">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>](#Single)  
 [<span data-ttu-id="02a55-119">動的アプリケーション間のドメイン フィールド アクセス</span><span class="sxs-lookup"><span data-stu-id="02a55-119">Dynamic cross-application domain field access</span></span>](#Emit)  
[<span data-ttu-id="02a55-120">InvalidOperationException 例外をスロー</span><span class="sxs-lookup"><span data-stu-id="02a55-120">Throwing an InvalidOperationException exception</span></span>](#Throwing)  
[<span data-ttu-id="02a55-121">その他の情報</span><span class="sxs-lookup"><span data-stu-id="02a55-121">Miscellaneous information</span></span>](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a><span data-ttu-id="02a55-122">InvalidOperationException 例外の一般的な原因</span><span class="sxs-lookup"><span data-stu-id="02a55-122">Some common causes of InvalidOperationException exceptions</span></span>  
 <span data-ttu-id="02a55-123">次のセクションでは、表示内で共通のいくつかのケース<xref:System.InvalidOperationException>アプリ内で例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="02a55-123">The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app.</span></span> <span data-ttu-id="02a55-124">問題の対処方法は、特定の状況によって異なります。</span><span class="sxs-lookup"><span data-stu-id="02a55-124">How you handle the issue depends on the specific situation.</span></span> <span data-ttu-id="02a55-125">ほとんどの場合、ただしで例外が発生開発者のエラー、および<xref:System.InvalidOperationException>例外を予想して回避できます。</span><span class="sxs-lookup"><span data-stu-id="02a55-125">Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.</span></span>  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a><span data-ttu-id="02a55-126">UI 以外のスレッドから UI スレッドを更新</span><span class="sxs-lookup"><span data-stu-id="02a55-126">Updating a UI thread from a non-UI thread</span></span>  
 <span data-ttu-id="02a55-127">多くの場合、ワーカー スレッドを使用して、アプリケーションのユーザー インターフェイスに表示されるデータの収集を含むいくつかのバック グラウンド処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="02a55-127">Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface.</span></span> <span data-ttu-id="02a55-128">ただしです。</span><span class="sxs-lookup"><span data-stu-id="02a55-128">However.</span></span> <span data-ttu-id="02a55-129">Windows フォームや Windows Presentation Foundation (WPF) など、.NET Framework のほとんどの GUI (グラフィカル ユーザー インターフェイス) アプリケーションのフレームワークを使用する UI (メインまたは UI スレッド) を管理するスレッドからのみ GUI オブジェクトにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="02a55-129">most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread).</span></span> <span data-ttu-id="02a55-130"><xref:System.InvalidOperationException> UI スレッド以外のスレッドから UI 要素にアクセスしようとする場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="02a55-130">An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.</span></span>  <span data-ttu-id="02a55-131">例外メッセージのテキストは、次の表に表示されます。</span><span class="sxs-lookup"><span data-stu-id="02a55-131">The text of the exception message is shown in the following table.</span></span>  
  
|<span data-ttu-id="02a55-132">[アプリケーションの種類]</span><span class="sxs-lookup"><span data-stu-id="02a55-132">Application Type</span></span>|<span data-ttu-id="02a55-133">メッセージ</span><span class="sxs-lookup"><span data-stu-id="02a55-133">Message</span></span>|  
|----------------------|-------------|  
|<span data-ttu-id="02a55-134">WPF アプリ</span><span class="sxs-lookup"><span data-stu-id="02a55-134">WPF app</span></span>|<span data-ttu-id="02a55-135">**別のスレッドに所有されているために、呼び出し元のスレッドはこのオブジェクトにアクセスできません。**</span><span class="sxs-lookup"><span data-stu-id="02a55-135">**The calling thread cannot access this object because a different thread owns it.**</span></span>|  
|<span data-ttu-id="02a55-136">UWP アプリ</span><span class="sxs-lookup"><span data-stu-id="02a55-136">UWP app</span></span>|<span data-ttu-id="02a55-137">**アプリケーションでは、別のスレッドにマーシャ リングされたインターフェイスが呼び出されます。**</span><span class="sxs-lookup"><span data-stu-id="02a55-137">**The application called an interface that was marshalled for a different thread.**</span></span>|  
|<span data-ttu-id="02a55-138">Windows フォーム アプリ</span><span class="sxs-lookup"><span data-stu-id="02a55-138">Windows Forms app</span></span>|<span data-ttu-id="02a55-139">**有効でないスレッド間の操作: コントロール 'TextBox1' 上で作成されたスレッド以外のスレッドからアクセスします。**</span><span class="sxs-lookup"><span data-stu-id="02a55-139">**Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.**</span></span>|  
  
 <span data-ttu-id="02a55-140">UI フレームワークが .NET Framework の実装、*ディスパッチャー* UI 要素のメンバーへの呼び出しが UI スレッドで実行されているかどうかをチェックするメソッドと、UI スレッドで呼び出しをスケジュールするその他のメソッドを含むパターン。</span><span class="sxs-lookup"><span data-stu-id="02a55-140">UI frameworks for the .NET Framework implement a *dispatcher* pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:</span></span>  
  
-   <span data-ttu-id="02a55-141">WPF アプリで呼び出して、<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType>メソッドが UI 以外のスレッドで実行されているかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="02a55-141">In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="02a55-142">返します`true`メソッドが UI スレッドで実行されている場合と`false`それ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="02a55-142">It returns `true` if the method is running on the UI thread and `false` otherwise.</span></span> <span data-ttu-id="02a55-143">オーバー ロードの 1 つを呼び出して、 <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> UI スレッドで呼び出しをスケジュールする方法です。</span><span class="sxs-lookup"><span data-stu-id="02a55-143">Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> method to schedule the call on the UI thread.</span></span>  
  
-   <span data-ttu-id="02a55-144">UWP アプリで呼び出して、 [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx)メソッドが UI 以外のスレッドで実行されているかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="02a55-144">In UWP apps, call the [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="02a55-145">呼び出す、 [CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx)メソッドを UI スレッドを更新するデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="02a55-145">Call the  [CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) method to execute a delegate that updates the UI thread.</span></span> <span data-ttu-id="02a55-146">「</span><span class="sxs-lookup"><span data-stu-id="02a55-146">Use the</span></span>  
  
-   <span data-ttu-id="02a55-147">Windows フォーム アプリで使用して、<xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType>メソッドが UI 以外のスレッドで実行されているかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="02a55-147">In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> property to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="02a55-148">オーバー ロードの 1 つを呼び出して、<xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType>メソッドを UI スレッドを更新するデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="02a55-148">Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> method to execute a delegate that updates the UI thread.</span></span>  
  
 <span data-ttu-id="02a55-149">次の例を示しています、<xref:System.InvalidOperationException>作成されたスレッド以外のスレッドから UI 要素を更新しようとする場合にスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-149">The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.</span></span>  <span data-ttu-id="02a55-150">それぞれの例では、2 つのコントロールを作成することが必要です。</span><span class="sxs-lookup"><span data-stu-id="02a55-150">Each example requires that you create two controls:</span></span>  
  
-   <span data-ttu-id="02a55-151">という名前のテキスト ボックス コントロール`textBox1`です。</span><span class="sxs-lookup"><span data-stu-id="02a55-151">A text box control named `textBox1`.</span></span>  <span data-ttu-id="02a55-152">Windows フォーム アプリケーションで、設定する必要があります、<xref:System.Windows.Forms.TextBox.Multiline%2A>プロパティを`true`です。</span><span class="sxs-lookup"><span data-stu-id="02a55-152">In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.</span></span>  
  
-   <span data-ttu-id="02a55-153">という名前のボタン コントロール`threadExampleBtn`です。</span><span class="sxs-lookup"><span data-stu-id="02a55-153">A button  control named `threadExampleBtn`.</span></span> <span data-ttu-id="02a55-154">例では、提供、ハンドラー `ThreadsExampleBtn_Click`、ボタンの`Click`イベント。</span><span class="sxs-lookup"><span data-stu-id="02a55-154">The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event.</span></span>  
  
 <span data-ttu-id="02a55-155">各ケースで、`threadExampleBtn_Click`イベント ハンドラーの呼び出し、`DoSomeWork`メソッドを 2 回です。</span><span class="sxs-lookup"><span data-stu-id="02a55-155">In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice.</span></span> <span data-ttu-id="02a55-156">最初の呼び出しは同期的に実行し、成功するとします。</span><span class="sxs-lookup"><span data-stu-id="02a55-156">The first call runs synchronously and succeeds.</span></span> <span data-ttu-id="02a55-157">2 番目の呼び出しでは、スレッド プールのスレッドで非同期的に実行されるためしようと、非 UI スレッドから UI を更新します。</span><span class="sxs-lookup"><span data-stu-id="02a55-157">But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread.</span></span> <span data-ttu-id="02a55-158">これは、結果、<xref:System.InvalidOperationException>例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-158">This results in a <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="02a55-159">WPF および UWP アプリ</span><span class="sxs-lookup"><span data-stu-id="02a55-159">WPF and UWP apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 <span data-ttu-id="02a55-160">次のバージョンの`DoSomeWork`メソッドは、WPF アプリで例外を排除します。</span><span class="sxs-lookup"><span data-stu-id="02a55-160">The following version of the `DoSomeWork` method eliminates the exception in a WPF app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 <span data-ttu-id="02a55-161">次のバージョンの`DoSomeWork`メソッドは、UWP アプリで例外を排除します。</span><span class="sxs-lookup"><span data-stu-id="02a55-161">The following version of the `DoSomeWork` method eliminates the exception in a UWP app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 <span data-ttu-id="02a55-162">Windows フォーム アプリ</span><span class="sxs-lookup"><span data-stu-id="02a55-162">Windows Forms apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 <span data-ttu-id="02a55-163">次のバージョンの`DoSomeWork`メソッドは、Windows フォーム アプリで例外を排除します。</span><span class="sxs-lookup"><span data-stu-id="02a55-163">The following version of the `DoSomeWork` method eliminates the exception in a Windows Forms app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a><span data-ttu-id="02a55-164">これを繰り返し処理中にコレクションを変更します。</span><span class="sxs-lookup"><span data-stu-id="02a55-164">Changing a collection while iterating it</span></span>  
 <span data-ttu-id="02a55-165">`foreach` (C#) ステートメントまたは`For Each`コレクションのメンバーを反復処理および読み取り、またはその個々 の要素を変更する Visual Basic でのステートメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="02a55-165">The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements.</span></span> <span data-ttu-id="02a55-166">ただし、追加またはコレクションから項目を削除するに使用できません。</span><span class="sxs-lookup"><span data-stu-id="02a55-166">However, it can't be used to add or remove items from the collection.</span></span> <span data-ttu-id="02a55-167">スローされること、<xref:System.InvalidOperationException>に、次のようなメッセージで例外"**コレクションが変更されました。列挙操作は実行されない可能性があります。**"</span><span class="sxs-lookup"><span data-stu-id="02a55-167">Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, "**Collection was modified; enumeration operation may not execute.**"</span></span>  
  
 <span data-ttu-id="02a55-168">次の例では、各整数の 2 乗をコレクションに追加しようとする整数のコレクションを反復処理します。</span><span class="sxs-lookup"><span data-stu-id="02a55-168">The following example iterates a collection of integers attempts to add the square of each integer to the collection.</span></span> <span data-ttu-id="02a55-169">例では、スロー、<xref:System.InvalidOperationException>最初の呼び出しで、<xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="02a55-169">The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 <span data-ttu-id="02a55-170">2 つの方法のいずれかで例外を除去するには、アプリケーションのロジックに応じて。</span><span class="sxs-lookup"><span data-stu-id="02a55-170">You can eliminate the exception in one of two ways, depending on your application logic:</span></span>  
  
-   <span data-ttu-id="02a55-171">要素は、それを繰り返し処理中にコレクションに追加する必要がある場合、は、インデックスを使用して反復できます、`for`の代わりにステートメント`foreach`または`For Each`です。</span><span class="sxs-lookup"><span data-stu-id="02a55-171">If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`.</span></span> <span data-ttu-id="02a55-172">次の例では、コレクションにコレクション内の数値の正方形を追加するステートメント。</span><span class="sxs-lookup"><span data-stu-id="02a55-172">The following example uses the for statement to add the square of numbers in the collection to the collection.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     <span data-ttu-id="02a55-173">注前、後ろ、反復処理するループ appropraitely を終了するループ内のカウンターを使用するか、コレクションを反復処理するにイテレーションの数を確立する必要がありますから`Count`- 1 を 0 に、または、この例では、配列内の要素の数を変数に代入してループの上限の境界を確立するために使用するとします。</span><span class="sxs-lookup"><span data-stu-id="02a55-173">Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop.</span></span> <span data-ttu-id="02a55-174">それ以外の場合、要素は、イテレーションごとのコレクションに追加する場合、無限ループになります。</span><span class="sxs-lookup"><span data-stu-id="02a55-174">Otherwise, if an element is added to the collection on every iteration, an endless loop results.</span></span>  
  
-   <span data-ttu-id="02a55-175">そうでないことを繰り返し処理中にコレクションに要素を追加するために必要な場合は、コレクションを反復処理の終了時に追加する一時コレクションに追加する要素を格納できます。</span><span class="sxs-lookup"><span data-stu-id="02a55-175">If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.</span></span>  <span data-ttu-id="02a55-176">次の例では、このアプローチを使用して、一時的なコレクションにコレクションの数の 2 乗を追加して、1 つの配列オブジェクトにコレクションを結合します。</span><span class="sxs-lookup"><span data-stu-id="02a55-176">The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a><span data-ttu-id="02a55-177">比較できないオブジェクトを持つ配列またはコレクションの並べ替え</span><span class="sxs-lookup"><span data-stu-id="02a55-177">Sorting an array or collection whose objects cannot be compared</span></span>  
 <span data-ttu-id="02a55-178">並べ替え方法など、汎用的な<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>メソッドまたは<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>メソッド、通常が必要な実装を少なくとも 1 つのオブジェクトに並べ替えられる、<xref:System.IComparable%601>または<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="02a55-178">General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="02a55-179">されていない場合、コレクションまたは配列を並べ替えることはできませんがスローされます、<xref:System.InvalidOperationException>例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-179">If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception.</span></span> <span data-ttu-id="02a55-180">次の例では定義、`Person`クラス、2 つのストア`Person`、一般的なオブジェクト<xref:System.Collections.Generic.List%601>オブジェクト、および並べ替えますしようとします。</span><span class="sxs-lookup"><span data-stu-id="02a55-180">The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them.</span></span> <span data-ttu-id="02a55-181">例への呼び出しからの出力として、<xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>メソッドがスローされます、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="02a55-181">As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException>.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 <span data-ttu-id="02a55-182">3 つの方法のいずれかで例外を排除することができます。</span><span class="sxs-lookup"><span data-stu-id="02a55-182">You can eliminate the exception in any of three ways:</span></span>  
  
-   <span data-ttu-id="02a55-183">(ソース コードを制御する) 場合は、並べ替えるしようとしている型を所有する場合を実装することを変更、<xref:System.IComparable%601>または<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="02a55-183">If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="02a55-184">実装する必要があります、<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType>または<xref:System.IComparable.CompareTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="02a55-184">This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> or the <xref:System.IComparable.CompareTo%2A> method.</span></span> <span data-ttu-id="02a55-185">既存の型に、インターフェイスの実装を追加することは、重大な変更ではされません。</span><span class="sxs-lookup"><span data-stu-id="02a55-185">Adding an interface implementation to an existing type is not a breaking change.</span></span>  
  
     <span data-ttu-id="02a55-186">次の例では、この方法を使用する場合、<xref:System.IComparable%601>の実装、`Person`クラスです。</span><span class="sxs-lookup"><span data-stu-id="02a55-186">The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class.</span></span> <span data-ttu-id="02a55-187">コレクションまたは配列の一般的な並べ替え方法を引き続き呼び出すことができ、コレクションが正常に並べ替えます、出力の例に示す。</span><span class="sxs-lookup"><span data-stu-id="02a55-187">You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   <span data-ttu-id="02a55-188">特殊な並べ替えを実装するクラスを定義できます並べ替えるしようとして型のソース コードを変更することはできない場合、<xref:System.Collections.Generic.IComparer%601>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="02a55-188">If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface.</span></span>  <span data-ttu-id="02a55-189">オーバー ロードを呼び出すことができます、`Sort`メソッドを含む、<xref:System.Collections.Generic.IComparer%601>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="02a55-189">You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter.</span></span> <span data-ttu-id="02a55-190">この方法は複数の条件に基づいてオブジェクトを並べ替えることができます、特殊な並べ替えのクラスを開発する場合に特に便利です。</span><span class="sxs-lookup"><span data-stu-id="02a55-190">This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.</span></span>  
  
     <span data-ttu-id="02a55-191">次の例では、アプローチを使用するカスタムを開発することによって`PersonComparer`の並べ替えに使用されるクラス`Person`コレクション。</span><span class="sxs-lookup"><span data-stu-id="02a55-191">The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections.</span></span>  <span data-ttu-id="02a55-192">これは、後、このクラスのインスタンスを渡します、<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="02a55-192">It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   <span data-ttu-id="02a55-193">並べ替えるしようとして、作成することができる場合は、型のソース コードを変更することはできません、<xref:System.Comparison%601>並べ替えを実行するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="02a55-193">If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting.</span></span> <span data-ttu-id="02a55-194">デリゲートのシグネチャは、します。</span><span class="sxs-lookup"><span data-stu-id="02a55-194">The delegate signature is</span></span>  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     <span data-ttu-id="02a55-195">次の例はアプローチを使用して定義することで、`PersonComparison`と一致するメソッド、<xref:System.Comparison%601>デリゲート シグネチャ。</span><span class="sxs-lookup"><span data-stu-id="02a55-195">The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature.</span></span>  <span data-ttu-id="02a55-196">これは、後、このデリゲートを渡します、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="02a55-196">It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a><span data-ttu-id="02a55-197">キャスト Nullable\<T > を基になる型に null であります。</span><span class="sxs-lookup"><span data-stu-id="02a55-197">Casting a Nullable\<T> that is null to its underlying type</span></span>  
 <span data-ttu-id="02a55-198">キャストしようとすると、<xref:System.Nullable%601>値が`null`基になる型をスロー、<xref:System.InvalidOperationException>例外とエラー メッセージが表示されます"**null 許容のオブジェクトの値が必要です。**</span><span class="sxs-lookup"><span data-stu-id="02a55-198">Attempting to cast a <xref:System.Nullable%601> value that is `null` to its underlying type throws an <xref:System.InvalidOperationException> exception  and displays the error message, "**Nullable object must have a value.**</span></span>  
  
 <span data-ttu-id="02a55-199">次の例をスロー、<xref:System.InvalidOperationException>配列を反復処理しようとしたときに例外を含む、`Nullable(Of Integer)`値。</span><span class="sxs-lookup"><span data-stu-id="02a55-199">The following example throws an <xref:System.InvalidOperationException> exception  when it attempts to iterate an array that includes a `Nullable(Of Integer)` value.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 <span data-ttu-id="02a55-200">例外を防ぐには。</span><span class="sxs-lookup"><span data-stu-id="02a55-200">To prevent the exception:</span></span>  
  
-   <span data-ttu-id="02a55-201">使用して、<xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType>いない要素のみを選択するプロパティを`null`です。</span><span class="sxs-lookup"><span data-stu-id="02a55-201">Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> property to select only those elements that are not `null`.</span></span>  
  
-   <span data-ttu-id="02a55-202">1 つを呼び出して、<xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType>の既定値を提供するオーバー ロード、`null`値。</span><span class="sxs-lookup"><span data-stu-id="02a55-202">Call one of the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> overloads to provide a default value for a `null` value.</span></span>  
  
 <span data-ttu-id="02a55-203">次の例では、両方を回避するのには、<xref:System.InvalidOperationException>例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-203">The following example does both to avoid the  <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a><span data-ttu-id="02a55-204">空のコレクションに対して System.Linq.Enumerable メソッドを呼び出す</span><span class="sxs-lookup"><span data-stu-id="02a55-204">Calling a System.Linq.Enumerable method on an empty collection</span></span>  
 <span data-ttu-id="02a55-205"><xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>、 <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>、 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>、 <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>、 <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>、 <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>、 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>、および<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドが、シーケンスに対して操作を実行を 1 つの結果を返します。</span><span class="sxs-lookup"><span data-stu-id="02a55-205">The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods perform operations on a sequence and return a single result.</span></span>   <span data-ttu-id="02a55-206">これらのメソッドの一部のオーバー ロードをスロー、<xref:System.InvalidOperationException>シーケンスが空で、他のオーバー ロードを返す場合に例外`null`です。</span><span class="sxs-lookup"><span data-stu-id="02a55-206">Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`.</span></span> <span data-ttu-id="02a55-207"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドもスロー、<xref:System.InvalidOperationException>シーケンスに複数の要素が含まれている場合は例外です。</span><span class="sxs-lookup"><span data-stu-id="02a55-207">The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02a55-208">スローするメソッドのほとんどが<xref:System.InvalidOperationException>の例外は、オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="02a55-208">Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads.</span></span> <span data-ttu-id="02a55-209">選択したオーバー ロードの動作を理解していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="02a55-209">Be sure that you understand the behavior of the overload that you choose.</span></span>  
  
 <span data-ttu-id="02a55-210">次の表に、例外のメッセージ、<xref:System.InvalidOperationException>一部への呼び出しによってスローされた例外オブジェクト<xref:System.Linq.Enumerable?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="02a55-210">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="02a55-211">メソッド</span><span class="sxs-lookup"><span data-stu-id="02a55-211">Method</span></span>|<span data-ttu-id="02a55-212">メッセージ</span><span class="sxs-lookup"><span data-stu-id="02a55-212">Message</span></span>|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|<span data-ttu-id="02a55-213">**シーケンスに要素が含まれていません**</span><span class="sxs-lookup"><span data-stu-id="02a55-213">**Sequence contains no elements**</span></span>|  
|`First`|<span data-ttu-id="02a55-214">**シーケンスに一致する要素が含まれていません**</span><span class="sxs-lookup"><span data-stu-id="02a55-214">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="02a55-215">**シーケンスには、1 つ以上の一致する要素が含まれています。**</span><span class="sxs-lookup"><span data-stu-id="02a55-215">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="02a55-216">排除または例外を処理する方法は、特定のメソッドを呼び出すと、アプリケーションの前提条件に依存します。</span><span class="sxs-lookup"><span data-stu-id="02a55-216">How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.</span></span>  
  
-   <span data-ttu-id="02a55-217">意図的に呼び出すとこれらのメソッドのいずれかの空のシーケンスを確認せず、シーケンスが空でないことと、空のシーケンスが予期しないイベントの発生を想定しています。</span><span class="sxs-lookup"><span data-stu-id="02a55-217">When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence.</span></span> <span data-ttu-id="02a55-218">この場合、例外を再スローをキャッチまたは適しています。</span><span class="sxs-lookup"><span data-stu-id="02a55-218">In this case, catching or rethrowing the exception is appropriate .</span></span>  
  
-   <span data-ttu-id="02a55-219">不注意による空のシーケンスを確認できなかった場合、1 つのオーバー ロードを呼び出すことができます、<xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>シーケンスがすべての要素を含めるかどうかを決定するオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="02a55-219">If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> overload to determine whether a sequence contains any elements.</span></span>  
  
    > [!TIP]
    >  <span data-ttu-id="02a55-220">呼び出す、<xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>データを処理するには、要素や、シーケンスを生成する操作が高いかどうかの数が多い場合がありますが含まれる場合、シーケンスを生成する前にメソッドがパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="02a55-220">Calling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.</span></span>  
  
-   <span data-ttu-id="02a55-221">などのメソッドを呼び出すとした<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>、 <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>、または<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>など、別の方法を置き換えることができます<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>、 <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>、または<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>シーケンスのメンバーではなく既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="02a55-221">If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, that returns a default value instead of a member of the sequence.</span></span>  
  
 <span data-ttu-id="02a55-222">例では、追加の詳細情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="02a55-222">The examples provide additional detail.</span></span>  
  
 <span data-ttu-id="02a55-223">次の例では、<xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>メソッドは、4 より大きい値がシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="02a55-223">The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> method to compute the average of a sequence whose values are greater than 4.</span></span> <span data-ttu-id="02a55-224">4 を超える、元の配列からの値がないと、シーケンス内の値が含まれていないがスローされますので、<xref:System.InvalidOperationException>例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-224">Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 <span data-ttu-id="02a55-225">呼び出して例外を取り除くことができます、<xref:System.Linq.Enumerable.Any%2A>シーケンスには、次の例のように、シーケンスを処理するメソッドを呼び出す前に、すべての要素が含まれて かどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="02a55-225">The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 <span data-ttu-id="02a55-226"><xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>メソッドは、シーケンスを指定した条件を満たす、シーケンスの最初の要素で、最初の項目を返します。</span><span class="sxs-lookup"><span data-stu-id="02a55-226">The <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition.</span></span> <span data-ttu-id="02a55-227">シーケンスが空では、最初の要素設定されていない場合は、スロー、<xref:System.InvalidOperationException>例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-227">If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="02a55-228">次の例で、<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>メソッドがスローされます、<xref:System.InvalidOperationException>例外 dbQueryResults 配列が 4 より大きい要素が含まれていないためです。</span><span class="sxs-lookup"><span data-stu-id="02a55-228">In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 <span data-ttu-id="02a55-229">呼び出すことができます、<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>返される、指定したか既定値です。</span><span class="sxs-lookup"><span data-stu-id="02a55-229">You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> to return a specified or default value.</span></span> <span data-ttu-id="02a55-230">メソッドが、シーケンスの最初の要素を見つけられない場合は、そのデータ型の既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="02a55-230">If the method does not find a first element in the sequence, it returns  the default value for that data type.</span></span>  <span data-ttu-id="02a55-231">既定値は`null`参照型の 0、数値データ型と<xref:System.DateTime.MinValue?displayProperty=nameWithType>の<xref:System.DateTime>型です。</span><span class="sxs-lookup"><span data-stu-id="02a55-231">The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=nameWithType> for the <xref:System.DateTime> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02a55-232">によって返される値を解釈する、<xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>メソッドは、多くの場合、複雑に型の既定値は、シーケンス内の有効な値であることができます。</span><span class="sxs-lookup"><span data-stu-id="02a55-232">Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.</span></span> <span data-ttu-id="02a55-233">この場合は、呼び出しを<xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>シーケンスが呼び出す前に有効なメンバーを持つかどうかを決定するメソッド、<xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="02a55-233">In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="02a55-234">次の例では、<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>しないようにする方法、<xref:System.InvalidOperationException>前の例でスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-234">The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a><span data-ttu-id="02a55-235">1 つの要素のないシーケンスで Enumerable.Single または Enumerable.SingleOrDefault を呼び出す</span><span class="sxs-lookup"><span data-stu-id="02a55-235">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>  
 <span data-ttu-id="02a55-236"><xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>メソッドは、シーケンスの唯一の要素または指定した条件を満たすシーケンスの唯一の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="02a55-236">The <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.</span></span>    <span data-ttu-id="02a55-237">シーケンスの要素がないかどうか、または複数の要素がある場合がスローされます、<xref:System.InvalidOperationException>例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-237">If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="02a55-238">使用することができます、<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>シーケンスに要素が含まれていないときに例外をスローする代わりに、既定値を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="02a55-238">You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method to return a default value instead of throwing an exception when the sequence contains no elements.</span></span> <span data-ttu-id="02a55-239">ただし、<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドがスロー、<xref:System.InvalidOperationException>シーケンスに複数の要素が含まれている場合は例外です。</span><span class="sxs-lookup"><span data-stu-id="02a55-239">However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.</span></span>  
  
 <span data-ttu-id="02a55-240">次の表に、例外のメッセージ、<xref:System.InvalidOperationException>への呼び出しによってスローされた例外オブジェクト、<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>と<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="02a55-240">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="02a55-241">メソッド</span><span class="sxs-lookup"><span data-stu-id="02a55-241">Method</span></span>|<span data-ttu-id="02a55-242">メッセージ</span><span class="sxs-lookup"><span data-stu-id="02a55-242">Message</span></span>|  
|------------|-------------|  
|`Single`|<span data-ttu-id="02a55-243">**シーケンスに一致する要素が含まれていません**</span><span class="sxs-lookup"><span data-stu-id="02a55-243">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="02a55-244">**シーケンスには、1 つ以上の一致する要素が含まれています。**</span><span class="sxs-lookup"><span data-stu-id="02a55-244">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="02a55-245">次の例への呼び出しで、<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>メソッドがスローされます、<xref:System.InvalidOperationException>例外シーケンスは 4 より大きい要素があるないためです。</span><span class="sxs-lookup"><span data-stu-id="02a55-245">In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 <span data-ttu-id="02a55-246">次の例を防ぐためにしようとして、<xref:System.InvalidOperationException>代わりに呼び出すことによって、シーケンスが空の場合にスローされる例外、<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="02a55-246">The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="02a55-247">ただし、このシーケンスの値が 2 より大きい複数の要素を返すためにもスロー、<xref:System.InvalidOperationException>例外。</span><span class="sxs-lookup"><span data-stu-id="02a55-247">However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 <span data-ttu-id="02a55-248">呼び出す、<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>メソッドでは、シーケンスまたは指定した条件を満たす、シーケンスのいずれか 1 つだけの要素が含まれていると想定します。</span><span class="sxs-lookup"><span data-stu-id="02a55-248">Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.</span></span>  <span data-ttu-id="02a55-249"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 0 個または 1 つの結果は、シーケンスを想定しています。</span><span class="sxs-lookup"><span data-stu-id="02a55-249"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> assumes a sequence with zero or one result, but no more.</span></span> <span data-ttu-id="02a55-250">この想定である、意図的に、これらの条件が満たされていない場合は、再スローまたはキャッチ、結果として得られる<xref:System.InvalidOperationException>が適切です。</span><span class="sxs-lookup"><span data-stu-id="02a55-250">If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate.</span></span> <span data-ttu-id="02a55-251">それ以外の場合、無効な条件がある程度の頻度で発生する場合は、その他の使用を検討する必要がありますまたは<xref:System.Linq.Enumerable>メソッドなど<xref:System.Linq.Enumerable.FirstOrDefault%2A>または<xref:System.Linq.Enumerable.Where%2A>です。</span><span class="sxs-lookup"><span data-stu-id="02a55-251">Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.</span></span>  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a><span data-ttu-id="02a55-252">動的アプリケーション間のドメイン フィールド アクセス</span><span class="sxs-lookup"><span data-stu-id="02a55-252">Dynamic cross-application domain field access</span></span>  
 <span data-ttu-id="02a55-253"><xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft intermediate language (MSIL) の命令をスロー、<xref:System.InvalidOperationException>取得しようとしているアドレスを持つフィールドを含んでいるオブジェクトが、コードを実行しているアプリケーション ドメイン内にない場合は例外です。</span><span class="sxs-lookup"><span data-stu-id="02a55-253">The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing.</span></span> <span data-ttu-id="02a55-254">フィールドのアドレスは、格納されているアプリケーション ドメインからのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="02a55-254">The address of a field can only be accessed from the application domain in which it resides.</span></span>  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a><span data-ttu-id="02a55-255">InvalidOperationException 例外をスロー</span><span class="sxs-lookup"><span data-stu-id="02a55-255">Throwing an InvalidOperationException exception</span></span>  
 <span data-ttu-id="02a55-256">スローする必要があります、<xref:System.InvalidOperationException>例外何らかの理由により、オブジェクトの状態は、特定のメソッドの呼び出しをサポートしていない場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="02a55-256">You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call.</span></span> <span data-ttu-id="02a55-257">メソッドの呼び出しはいくつかの状況またはコンテキストで有効ですが、他のユーザーでは無効です。</span><span class="sxs-lookup"><span data-stu-id="02a55-257">That is, the method call is valid in some circumstances or contexts, but is invalid in others.</span></span>  
  
 <span data-ttu-id="02a55-258">無効な引数は、原因、メソッド呼び出しの失敗である場合<xref:System.ArgumentException>またはその派生クラスの 1 つ<xref:System.ArgumentNullException>または<xref:System.ArgumentOutOfRangeException>、代わりにスローされる必要があります。</span><span class="sxs-lookup"><span data-stu-id="02a55-258">If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead.</span></span>  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a><span data-ttu-id="02a55-259">その他の情報</span><span class="sxs-lookup"><span data-stu-id="02a55-259">Miscellaneous information</span></span>  
 <span data-ttu-id="02a55-260"><xref:System.InvalidOperationException> 値は 0x80131509 HRESULT COR_E_INVALIDOPERATION を使用します。</span><span class="sxs-lookup"><span data-stu-id="02a55-260"><xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.</span></span>  
  
 <span data-ttu-id="02a55-261">インスタンスの初期プロパティ値の一覧については<xref:System.InvalidOperationException>を参照してください、<xref:System.InvalidOperationException.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="02a55-261">For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02a55-262">
            <see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-262">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="02a55-263">
            <see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-263">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02a55-264">このコンス トラクター、 <xref:System.Exception.Message%2A> "、要求された操作を実行できません"などに、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="02a55-264">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "The requested operation cannot be performed."</span></span> <span data-ttu-id="02a55-265">このメッセージには、現在のシステムのカルチャが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="02a55-265">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="02a55-266"><xref:System.InvalidOperationException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="02a55-266">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="02a55-267">プロパティ</span><span class="sxs-lookup"><span data-stu-id="02a55-267">Property</span></span>|<span data-ttu-id="02a55-268">[値]</span><span class="sxs-lookup"><span data-stu-id="02a55-268">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="02a55-269">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="02a55-269">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="02a55-270">ローカライズされたエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="02a55-270">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="02a55-271">エラーを説明するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-271">The message that describes the error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02a55-272">指定したエラー メッセージを使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-272">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02a55-273">このコンス トラクター、<xref:System.Exception.Message%2A?displayProperty=nameWithType>の新しい例外を使用して、プロパティ、`message`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="02a55-273">This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=nameWithType> property of the new exception using the `message` parameter.</span></span> <span data-ttu-id="02a55-274">`message` の内容は、ユーザーが理解できる内容にします。</span><span class="sxs-lookup"><span data-stu-id="02a55-274">The content of `message` is intended to be understood by humans.</span></span> <span data-ttu-id="02a55-275">このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="02a55-275">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span>  
  
 <span data-ttu-id="02a55-276"><xref:System.InvalidOperationException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="02a55-276">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="02a55-277">プロパティ</span><span class="sxs-lookup"><span data-stu-id="02a55-277">Property</span></span>|<span data-ttu-id="02a55-278">[値]</span><span class="sxs-lookup"><span data-stu-id="02a55-278">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="02a55-279">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="02a55-279">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="02a55-280">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="02a55-280">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="02a55-281">シリアル化されたオブジェクト データを保持するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-281">The object that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="02a55-282">転送元または転送先に関するコンテキスト情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-282">The contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02a55-283">シリアル化したデータを使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-283">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02a55-284">このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="02a55-284">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="02a55-285">詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)です。</span><span class="sxs-lookup"><span data-stu-id="02a55-285">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="02a55-286">例外の原因を説明するエラー メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-286">The error message that explains the reason for the exception.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="02a55-287">現在の例外の原因となった例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-287">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="02a55-288">
            <c>innerException</c> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-288">If the <c>innerException</c> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02a55-289">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="02a55-289">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02a55-290">前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照が格納されます。</span><span class="sxs-lookup"><span data-stu-id="02a55-290">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="02a55-291"><xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。`Nothing` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は <xref:System.Exception.InnerException%2A>) を返します。</span><span class="sxs-lookup"><span data-stu-id="02a55-291">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="02a55-292"><xref:System.InvalidOperationException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="02a55-292">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="02a55-293">プロパティ</span><span class="sxs-lookup"><span data-stu-id="02a55-293">Property</span></span>|<span data-ttu-id="02a55-294">[値]</span><span class="sxs-lookup"><span data-stu-id="02a55-294">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="02a55-295">内部例外の参照。</span><span class="sxs-lookup"><span data-stu-id="02a55-295">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="02a55-296">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="02a55-296">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>