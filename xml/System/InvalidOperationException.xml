<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25c71127275f7f66a38c66d4f44927c80f0dbfa9" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70472848" /></Metadata><TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidOperationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c5eb8-101">オブジェクトの現在の状態に対して無効なメソッド呼び出しが行われた場合にスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-101">The exception that is thrown when a method call is invalid for the object's current state.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5eb8-102"><xref:System.InvalidOperationException>は、メソッドを呼び出すことができなかった場合に、無効な引数以外の理由によって発生します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-102"><xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments.</span></span> <span data-ttu-id="c5eb8-103">通常は、オブジェクトの状態がメソッド呼び出しをサポートできない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-103">Typically, it is thrown when the state of an object cannot support the method call.</span></span> <span data-ttu-id="c5eb8-104">たとえば、 <xref:System.InvalidOperationException>次のようなメソッドによって例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-104">For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:</span></span>  
  
-   <span data-ttu-id="c5eb8-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType>列挙子の作成後にコレクションのオブジェクトを変更する場合はです。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-105"><xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> if objects of a collection are modified after the enumerator is created.</span></span> <span data-ttu-id="c5eb8-106">詳細については、「[コレクションの反復処理中の変更](#Iterating)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-106">For more information, see [Changing a collection while iterating it](#Iterating).</span></span>  
  
-   <span data-ttu-id="c5eb8-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType>メソッド呼び出しが行われる前にリソースセットが閉じられている場合は。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-107"><xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> if the resource set is closed before the method call is made.</span></span>  
  
-   <span data-ttu-id="c5eb8-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>を指定すると、追加するオブジェクトが不適切に構造化された XML ドキュメントになります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-108"><xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>, if the object or objects to be added would result in an incorrectly structured XML document.</span></span>  
  
-   <span data-ttu-id="c5eb8-109">メインまたは UI スレッドではないスレッドから UI を操作しようとするメソッド。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-109">A method that attempts to manipulate the UI from a thread that is not the main or UI thread.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c5eb8-110">この例外はさまざまな状況でスローされる可能性があるため、 <xref:System.Exception.Message%2A>プロパティによって返される例外メッセージを読み取ることが重要です。 <xref:System.InvalidOperationException></span><span class="sxs-lookup"><span data-stu-id="c5eb8-110">Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property.</span></span>  
  
 <span data-ttu-id="c5eb8-111">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="c5eb8-111">In this section:</span></span>  
  
 <span data-ttu-id="c5eb8-112">[InvalidOperationException 例外の一般的な原因](#Causes) </span><span class="sxs-lookup"><span data-stu-id="c5eb8-112">[Some common causes of InvalidOperationException exceptions](#Causes) </span></span>  
 [<span data-ttu-id="c5eb8-113">Ui 以外のスレッドから UI スレッドを更新する</span><span class="sxs-lookup"><span data-stu-id="c5eb8-113">Updating a UI thread from a non-UI thread</span></span>](#UI)  
 [<span data-ttu-id="c5eb8-114">反復処理中のコレクションの変更</span><span class="sxs-lookup"><span data-stu-id="c5eb8-114">Changing a collection while iterating it</span></span>](#Iterating)  
 [<span data-ttu-id="c5eb8-115">オブジェクトを比較できない配列またはコレクションの並べ替え</span><span class="sxs-lookup"><span data-stu-id="c5eb8-115">Sorting an array or collection whose objects cannot be compared</span></span>](#Sorting)  
 <span data-ttu-id="c5eb8-116">[Null である&lt;null&gt;許容の T を基になる型にキャストしています](#Nullable) </span><span class="sxs-lookup"><span data-stu-id="c5eb8-116">[Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable) </span></span>  
 [<span data-ttu-id="c5eb8-117">空のコレクションでの system.string メソッドの呼び出し</span><span class="sxs-lookup"><span data-stu-id="c5eb8-117">Calling a System.Linq.Enumerable method on an empty collection</span></span>](#Empty)  
 [<span data-ttu-id="c5eb8-118">1つの要素を含まないシーケンスで列挙可能な単一または SingleOrDefault を呼び出す</span><span class="sxs-lookup"><span data-stu-id="c5eb8-118">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>](#Single)  
 [<span data-ttu-id="c5eb8-119">動的なクロスアプリケーションドメインフィールドアクセス</span><span class="sxs-lookup"><span data-stu-id="c5eb8-119">Dynamic cross-application domain field access</span></span>](#Emit)  
[<span data-ttu-id="c5eb8-120">InvalidOperationException 例外のスロー</span><span class="sxs-lookup"><span data-stu-id="c5eb8-120">Throwing an InvalidOperationException exception</span></span>](#Throwing)  
[<span data-ttu-id="c5eb8-121">その他の情報</span><span class="sxs-lookup"><span data-stu-id="c5eb8-121">Miscellaneous information</span></span>](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a><span data-ttu-id="c5eb8-122">InvalidOperationException 例外の一般的な原因</span><span class="sxs-lookup"><span data-stu-id="c5eb8-122">Some common causes of InvalidOperationException exceptions</span></span>  
 <span data-ttu-id="c5eb8-123">次のセクションでは、アプリで<xref:System.InvalidOperationException>例外がスローされる一般的なケースについて説明します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-123">The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app.</span></span> <span data-ttu-id="c5eb8-124">この問題をどのように処理するかは、特定の状況によって異なります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-124">How you handle the issue depends on the specific situation.</span></span> <span data-ttu-id="c5eb8-125">ただし、ほとんどの場合、例外は開発者エラーに<xref:System.InvalidOperationException>よって発生するので、例外を予測して回避することができます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-125">Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.</span></span>  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a><span data-ttu-id="c5eb8-126">Ui 以外のスレッドから UI スレッドを更新する</span><span class="sxs-lookup"><span data-stu-id="c5eb8-126">Updating a UI thread from a non-UI thread</span></span>  
 <span data-ttu-id="c5eb8-127">多くの場合、ワーカースレッドを使用して、アプリケーションのユーザーインターフェイスに表示されるデータの収集を含むバックグラウンド作業を実行します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-127">Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface.</span></span> <span data-ttu-id="c5eb8-128">ただし.</span><span class="sxs-lookup"><span data-stu-id="c5eb8-128">However.</span></span> <span data-ttu-id="c5eb8-129">.NET Framework 用のほとんどの GUI (グラフィカルユーザーインターフェイス) アプリケーションフレームワーク (Windows フォーム、Windows Presentation Foundation (WPF) など) を使用すると、UI を作成および管理するスレッド (メインまたは UI スレッド) からのみ、GUI オブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-129">most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread).</span></span> <span data-ttu-id="c5eb8-130">Ui <xref:System.InvalidOperationException>スレッド以外のスレッドから ui 要素にアクセスしようとすると、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-130">An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.</span></span>  <span data-ttu-id="c5eb8-131">例外メッセージのテキストを次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-131">The text of the exception message is shown in the following table.</span></span>  
  
|<span data-ttu-id="c5eb8-132">アプリケーションの種類</span><span class="sxs-lookup"><span data-stu-id="c5eb8-132">Application Type</span></span>|<span data-ttu-id="c5eb8-133">メッセージ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-133">Message</span></span>|  
|----------------------|-------------|  
|<span data-ttu-id="c5eb8-134">WPF アプリ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-134">WPF app</span></span>|<span data-ttu-id="c5eb8-135">**別のスレッドが所有しているため、呼び出し元のスレッドはこのオブジェクトにアクセスできません。**</span><span class="sxs-lookup"><span data-stu-id="c5eb8-135">**The calling thread cannot access this object because a different thread owns it.**</span></span>|  
|<span data-ttu-id="c5eb8-136">UWP アプリ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-136">UWP app</span></span>|<span data-ttu-id="c5eb8-137">**アプリケーションが、別のスレッドにマーシャリングされたインターフェイスを呼び出しました。**</span><span class="sxs-lookup"><span data-stu-id="c5eb8-137">**The application called an interface that was marshaled for a different thread.**</span></span>|  
|<span data-ttu-id="c5eb8-138">Windows フォームアプリ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-138">Windows Forms app</span></span>|<span data-ttu-id="c5eb8-139">**スレッド間の操作が無効です: コントロールが作成されたスレッド以外のスレッドから、コントロール ' TextBox1 ' がアクセスされました。**</span><span class="sxs-lookup"><span data-stu-id="c5eb8-139">**Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.**</span></span>|  
  
 <span data-ttu-id="c5eb8-140">.NET Framework の UI フレームワークは、ui 要素のメンバーへの呼び出しが UI スレッドで実行されているかどうかを確認するメソッドと、UI スレッドでの呼び出しをスケジュールするその他のメソッドを含む、*ディスパッチャー*パターンを実装します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-140">UI frameworks for the .NET Framework implement a *dispatcher* pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:</span></span>  
  
-   <span data-ttu-id="c5eb8-141">WPF アプリで<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType>メソッドを呼び出して、UI 以外のスレッドでメソッドが実行されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-141">In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> method to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="c5eb8-142">メソッドが`true` UI `false`スレッドで実行されている場合はを返し、それ以外の場合はを返します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-142">It returns `true` if the method is running on the UI thread and `false` otherwise.</span></span> <span data-ttu-id="c5eb8-143">UI スレッドで呼び出しをスケジュールする<xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType>には、メソッドのいずれかのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-143">Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> method to schedule the call on the UI thread.</span></span>  
  
-   <span data-ttu-id="c5eb8-144">UWP アプリで、 <xref:Windows.UI.Core.CoreDispatcher.HasThreadAccess?displayProperty=nameWithType>プロパティをチェックして、UI 以外のスレッドでメソッドが実行されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-144">In UWP apps, check the <xref:Windows.UI.Core.CoreDispatcher.HasThreadAccess?displayProperty=nameWithType> property to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="c5eb8-145"><xref:Windows.UI.Core.CoreDispatcher.RunAsync%2A?displayProperty=nameWithType>メソッドを呼び出して、UI スレッドを更新するデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-145">Call the <xref:Windows.UI.Core.CoreDispatcher.RunAsync%2A?displayProperty=nameWithType> method to execute a delegate that updates the UI thread.</span></span> 
  
-   <span data-ttu-id="c5eb8-146">Windows フォームアプリで、 <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType>プロパティを使用して、メソッドが非 UI スレッドで実行されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-146">In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> property to determine if a method is running on a non-UI thread.</span></span> <span data-ttu-id="c5eb8-147"><xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType>メソッドのオーバーロードの1つを呼び出して、UI スレッドを更新するデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-147">Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> method to execute a delegate that updates the UI thread.</span></span>  
  
 <span data-ttu-id="c5eb8-148">次の例は、 <xref:System.InvalidOperationException>作成したスレッド以外のスレッドから UI 要素を更新しようとしたときにスローされる例外を示しています。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-148">The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.</span></span>  <span data-ttu-id="c5eb8-149">各例では、次の2つのコントロールを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-149">Each example requires that you create two controls:</span></span>  
  
-   <span data-ttu-id="c5eb8-150">という名前`textBox1`のテキストボックスコントロール。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-150">A text box control named `textBox1`.</span></span>  <span data-ttu-id="c5eb8-151">Windows フォームアプリでは、 <xref:System.Windows.Forms.TextBox.Multiline%2A>プロパティをに`true`設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-151">In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.</span></span>  
  
-   <span data-ttu-id="c5eb8-152">という名前`threadExampleBtn`のボタンコントロール。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-152">A button  control named `threadExampleBtn`.</span></span> <span data-ttu-id="c5eb8-153">この例では、ボタン`ThreadsExampleBtn_Click`の`Click`イベントのハンドラーを提供しています。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-153">The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event.</span></span>  
  
 <span data-ttu-id="c5eb8-154">どちらの場合も、 `threadExampleBtn_Click`イベントハンドラーは`DoSomeWork`メソッドを2回呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-154">In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice.</span></span> <span data-ttu-id="c5eb8-155">最初の呼び出しは同期的に実行され、成功します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-155">The first call runs synchronously and succeeds.</span></span> <span data-ttu-id="c5eb8-156">ただし、2回目の呼び出しは、スレッドプールのスレッドで非同期的に実行されるので、UI 以外のスレッドから UI を更新しようとします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-156">But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread.</span></span> <span data-ttu-id="c5eb8-157">この結果、例外<xref:System.InvalidOperationException>が発生します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-157">This results in a <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="c5eb8-158">WPF と UWP アプリ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-158">WPF and UWP apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 <span data-ttu-id="c5eb8-159">次のバージョン`DoSomeWork`のメソッドでは、WPF アプリで例外が除去されます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-159">The following version of the `DoSomeWork` method eliminates the exception in a WPF app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 <span data-ttu-id="c5eb8-160">次のバージョン`DoSomeWork`のメソッドは、UWP アプリで例外を除去します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-160">The following version of the `DoSomeWork` method eliminates the exception in a UWP app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 <span data-ttu-id="c5eb8-161">Windows フォーム アプリ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-161">Windows Forms apps</span></span>  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 <span data-ttu-id="c5eb8-162">次のバージョン`DoSomeWork`のメソッドでは、Windows フォームアプリで例外が除去されます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-162">The following version of the `DoSomeWork` method eliminates the exception in a Windows Forms app.</span></span>  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a><span data-ttu-id="c5eb8-163">反復処理中のコレクションの変更</span><span class="sxs-lookup"><span data-stu-id="c5eb8-163">Changing a collection while iterating it</span></span>  
 <span data-ttu-id="c5eb8-164">Visual Basic 内のC# `For Each`ステートメントまたはステートメント内のステートメントは、コレクションのメンバーを反復処理し、個々の要素を読み取りまたは変更するために使用されます`foreach` 。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-164">The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements.</span></span> <span data-ttu-id="c5eb8-165">ただし、コレクションの項目を追加または削除するために使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-165">However, it can't be used to add or remove items from the collection.</span></span> <span data-ttu-id="c5eb8-166">これを行うと<xref:System.InvalidOperationException> 、"**コレクションが変更されました。" のようなメッセージが表示され、例外がスローされます。列挙操作を実行できない可能性があります。**"</span><span class="sxs-lookup"><span data-stu-id="c5eb8-166">Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, "**Collection was modified; enumeration operation may not execute.**"</span></span>  
  
 <span data-ttu-id="c5eb8-167">次の例では、整数の集合を反復処理して、各整数の2乗をコレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-167">The following example iterates a collection of integers attempts to add the square of each integer to the collection.</span></span> <span data-ttu-id="c5eb8-168">この例では<xref:System.InvalidOperationException> 、メソッドの<xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType>最初の呼び出しを使用してをスローします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-168">The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 <span data-ttu-id="c5eb8-169">アプリケーションロジックに応じて、次の2つの方法のいずれかで例外を除去できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-169">You can eliminate the exception in one of two ways, depending on your application logic:</span></span>  
  
-   <span data-ttu-id="c5eb8-170">反復処理中にコレクションに要素を追加する必要がある場合`for` `foreach`は、またはでは`For Each`なくステートメントを使用して、インデックスで反復処理できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-170">If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`.</span></span> <span data-ttu-id="c5eb8-171">次の例では、for ステートメントを使用して、コレクション内の数値の2乗をコレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-171">The following example uses the for statement to add the square of numbers in the collection to the collection.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     <span data-ttu-id="c5eb8-172">反復処理の回数を設定する必要があることに注意してください。ループ内のカウンターを使用して、ループを適切に終了するに`Count`は、前に繰り返すか、-1 から0を反復処理します。配列内の要素のうち、変数を使用し、それを使用してループの上限を設定します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-172">Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropriately, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop.</span></span> <span data-ttu-id="c5eb8-173">それ以外の場合、反復処理のたびに要素がコレクションに追加されると、無限ループが発生します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-173">Otherwise, if an element is added to the collection on every iteration, an endless loop results.</span></span>  
  
-   <span data-ttu-id="c5eb8-174">反復処理中にコレクションに要素を追加する必要がない場合は、コレクションの反復処理が終了したときに追加する一時コレクションに追加する要素を格納できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-174">If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.</span></span>  <span data-ttu-id="c5eb8-175">次の例では、この方法を使用してコレクション内の数値の2乗を一時コレクションに追加し、コレクションを1つの配列オブジェクトに結合します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-175">The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a><span data-ttu-id="c5eb8-176">オブジェクトを比較できない配列またはコレクションの並べ替え</span><span class="sxs-lookup"><span data-stu-id="c5eb8-176">Sorting an array or collection whose objects cannot be compared</span></span>  
 <span data-ttu-id="c5eb8-177"><xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>メソッド<xref:System.IComparable%601> <xref:System.IComparable>やメソッドなどの汎用的な並べ替え方法では、通常、並べ替えの対象となるオブジェクトの少なくとも1つが、インターフェイスまたはインターフェイスを実装する必要があります。 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c5eb8-177">General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="c5eb8-178">それ以外の場合、コレクションまたは配列は並べ替えられず、メソッド<xref:System.InvalidOperationException>は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-178">If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception.</span></span> <span data-ttu-id="c5eb8-179">次の例では`Person` 、クラスを定義`Person`し、2つ<xref:System.Collections.Generic.List%601>のオブジェクトをジェネリックオブジェクトに格納して、並べ替えを試みます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-179">The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them.</span></span> <span data-ttu-id="c5eb8-180">この例の出力が示すように、 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType>メソッドを呼び出すと、が<xref:System.InvalidOperationException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-180">As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException>.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 <span data-ttu-id="c5eb8-181">例外は、次の3つの方法のいずれかで排除できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-181">You can eliminate the exception in any of three ways:</span></span>  
  
-   <span data-ttu-id="c5eb8-182">並べ替えようとしている型を所有できる場合 (つまり、ソースコードを制御する場合)、 <xref:System.IComparable%601> <xref:System.IComparable>またはインターフェイスを実装するように変更できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-182">If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="c5eb8-183">これを行うに<xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> <xref:System.IComparable.CompareTo%2A>は、メソッドまたはメソッドのいずれかを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-183">This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> or the <xref:System.IComparable.CompareTo%2A> method.</span></span> <span data-ttu-id="c5eb8-184">既存の型にインターフェイス実装を追加することは、互換性に影響する変更点ではありません。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-184">Adding an interface implementation to an existing type is not a breaking change.</span></span>  
  
     <span data-ttu-id="c5eb8-185">次の例では、この方法を<xref:System.IComparable%601>使用して`Person` 、クラスの実装を提供しています。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-185">The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class.</span></span> <span data-ttu-id="c5eb8-186">コレクションまたは配列の一般的な並べ替えメソッドを呼び出すこともできます。この例の出力に示されているように、コレクションは正常に並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-186">You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   <span data-ttu-id="c5eb8-187">並べ替えようとしている型のソースコードを変更できない場合は、 <xref:System.Collections.Generic.IComparer%601>インターフェイスを実装する特別な目的の並べ替えクラスを定義できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-187">If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface.</span></span>  <span data-ttu-id="c5eb8-188">パラメーター <xref:System.Collections.Generic.IComparer%601> を含む`Sort`メソッドのオーバーロードを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-188">You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter.</span></span> <span data-ttu-id="c5eb8-189">この方法は、複数の条件に基づいてオブジェクトを並べ替えることができる特殊な並べ替えクラスを開発する場合に特に便利です。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-189">This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.</span></span>  
  
     <span data-ttu-id="c5eb8-190">次の例では、コレクションの並べ替え`PersonComparer` `Person`に使用されるカスタムクラスを開発することによって、アプローチを使用します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-190">The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections.</span></span>  <span data-ttu-id="c5eb8-191">次に、このクラスのインスタンスを<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-191">It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   <span data-ttu-id="c5eb8-192">並べ替えようとしている型のソースコードを変更できない場合は、並べ替えを実行<xref:System.Comparison%601>するデリゲートを作成できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-192">If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting.</span></span> <span data-ttu-id="c5eb8-193">デリゲートシグネチャはです。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-193">The delegate signature is</span></span>  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     <span data-ttu-id="c5eb8-194">次の例では、 `PersonComparison` <xref:System.Comparison%601>デリゲートシグネチャと一致するメソッドを定義することによって、アプローチを使用します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-194">The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature.</span></span>  <span data-ttu-id="c5eb8-195">次に、このデリゲートを<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-195">It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a><span data-ttu-id="c5eb8-196">Null である\<null 許容型 > を基になる型にキャストしています</span><span class="sxs-lookup"><span data-stu-id="c5eb8-196">Casting a Nullable\<T> that is null to its underlying type</span></span>  
 <span data-ttu-id="c5eb8-197">基になる型<xref:System.Nullable%601> `null`に値をキャストしようとすると、 <xref:System.InvalidOperationException>例外がスローされ、"**null 許容のオブジェクトには値が必要です**" というエラーメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-197">Attempting to cast a <xref:System.Nullable%601> value that is `null` to its underlying type throws an <xref:System.InvalidOperationException> exception  and displays the error message, "**Nullable object must have a value.**</span></span>  
  
 <span data-ttu-id="c5eb8-198">次の例では<xref:System.InvalidOperationException> 、値を`Nullable(Of Integer)`含む配列を反復処理しようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-198">The following example throws an <xref:System.InvalidOperationException> exception  when it attempts to iterate an array that includes a `Nullable(Of Integer)` value.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 <span data-ttu-id="c5eb8-199">例外を回避するには、次のようにします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-199">To prevent the exception:</span></span>  
  
-   <span data-ttu-id="c5eb8-200">プロパティを<xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType>使用して、以外`null`の要素のみを選択します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-200">Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> property to select only those elements that are not `null`.</span></span>  
  
-   <span data-ttu-id="c5eb8-201">オーバーロードのいずれか<xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType>を呼び出して、 `null`値の既定値を指定します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-201">Call one of the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> overloads to provide a default value for a `null` value.</span></span>  
  
 <span data-ttu-id="c5eb8-202">次の例では、両方と<xref:System.InvalidOperationException>も例外を回避します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-202">The following example does both to avoid the  <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a><span data-ttu-id="c5eb8-203">空のコレクションでの system.string メソッドの呼び出し</span><span class="sxs-lookup"><span data-stu-id="c5eb8-203">Calling a System.Linq.Enumerable method on an empty collection</span></span>  
 <span data-ttu-id="c5eb8-204"><xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType> 、 <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> 、 、 <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType> 、 、 <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType> 、 、およびの <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 各メソッドは、シーケンスに対して操作を実行し、1つの結果を返します。 <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c5eb8-204">The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods perform operations on a sequence and return a single result.</span></span>   <span data-ttu-id="c5eb8-205">これらのメソッドの一部のオーバーロード<xref:System.InvalidOperationException>は、シーケンスが空の場合に例外をスロー `null`し、他のオーバーロードはを返します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-205">Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`.</span></span> <span data-ttu-id="c5eb8-206">また<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 、このメソッドは<xref:System.InvalidOperationException> 、シーケンスに複数の要素が含まれている場合にも例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-206">The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5eb8-207"><xref:System.InvalidOperationException>例外をスローするメソッドのほとんどはオーバーロードです。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-207">Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads.</span></span> <span data-ttu-id="c5eb8-208">選択したオーバーロードの動作を理解していることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-208">Be sure that you understand the behavior of the overload that you choose.</span></span>  
  
 <span data-ttu-id="c5eb8-209">次の表に、いくつか<xref:System.InvalidOperationException> <xref:System.Linq.Enumerable?displayProperty=nameWithType>のメソッドの呼び出しによってスローされる例外オブジェクトからの例外メッセージの一覧を示します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-209">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="c5eb8-210">メソッド</span><span class="sxs-lookup"><span data-stu-id="c5eb8-210">Method</span></span>|<span data-ttu-id="c5eb8-211">メッセージ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-211">Message</span></span>|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|<span data-ttu-id="c5eb8-212">**シーケンスに要素が含まれていません**</span><span class="sxs-lookup"><span data-stu-id="c5eb8-212">**Sequence contains no elements**</span></span>|  
|`First`|<span data-ttu-id="c5eb8-213">**シーケンスに一致する要素が含まれていません**</span><span class="sxs-lookup"><span data-stu-id="c5eb8-213">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="c5eb8-214">**シーケンスに複数の一致する要素が含まれています**</span><span class="sxs-lookup"><span data-stu-id="c5eb8-214">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="c5eb8-215">例外を除去または処理する方法は、アプリケーションの前提条件と、呼び出す特定の方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-215">How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.</span></span>  
  
-   <span data-ttu-id="c5eb8-216">空のシーケンスを確認せずにこれらのメソッドのいずれかを意図的に呼び出した場合は、シーケンスが空ではなく、空のシーケンスが予期しない状態になることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-216">When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence.</span></span> <span data-ttu-id="c5eb8-217">この場合、例外をキャッチまたは再スローするのが適切です。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-217">In this case, catching or rethrowing the exception is appropriate .</span></span>  
  
-   <span data-ttu-id="c5eb8-218">空のシーケンスのチェックに失敗した場合は、 <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>オーバーロードのいずれかのオーバーロードを呼び出して、シーケンスに要素が含まれているかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-218">If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> overload to determine whether a sequence contains any elements.</span></span>  
  
    > [!TIP]
    >  <span data-ttu-id="c5eb8-219">シーケンスを<xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>生成する前にメソッドを呼び出すと、処理されるデータに多数の要素が含まれている場合や、シーケンスを生成する操作の負荷が高い場合に、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-219">Calling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.</span></span>  
  
-   <span data-ttu-id="c5eb8-220"><xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>、、または <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> などのメソッドを呼び出した場合は、シーケンスのメンバーではなく既定値を返す、、などの別のメソッドを置き換えることができます。 <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c5eb8-220">If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, that returns a default value instead of a member of the sequence.</span></span>  
  
 <span data-ttu-id="c5eb8-221">これらの例では、追加の詳細情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-221">The examples provide additional detail.</span></span>  
  
 <span data-ttu-id="c5eb8-222">次の例では<xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> 、メソッドを使用して、値が4より大きいシーケンスの平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-222">The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> method to compute the average of a sequence whose values are greater than 4.</span></span> <span data-ttu-id="c5eb8-223">元の配列の値が4を超えることはないため、シーケンスに値は含まれず、メソッド<xref:System.InvalidOperationException>は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-223">Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 <span data-ttu-id="c5eb8-224">次の例に示すように、 <xref:System.Linq.Enumerable.Any%2A>メソッドを呼び出して、シーケンスを処理するメソッドを呼び出す前に、シーケンスに要素が含まれているかどうかを判断することにより、例外を排除できます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-224">The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 <span data-ttu-id="c5eb8-225"><xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>メソッドは、シーケンス内の最初の項目、または指定された条件を満たすシーケンス内の最初の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-225">The <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition.</span></span> <span data-ttu-id="c5eb8-226">シーケンスが空であるために最初の要素がない場合は、 <xref:System.InvalidOperationException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-226">If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="c5eb8-227">次の例では、 <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> dbQueryResults 配列に<xref:System.InvalidOperationException> 4 より大きい要素が含まれていないため、メソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-227">In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 <span data-ttu-id="c5eb8-228"><xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> の <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> 代わりにメソッドを呼び出して、指定された値または既定値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-228">You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> to return a specified or default value.</span></span> <span data-ttu-id="c5eb8-229">メソッドがシーケンス内の最初の要素を見つけられない場合は、そのデータ型の既定値を返します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-229">If the method does not find a first element in the sequence, it returns  the default value for that data type.</span></span>  <span data-ttu-id="c5eb8-230">既定値は、 `null`参照型の場合は0、数値データ型<xref:System.DateTime.MinValue?displayProperty=nameWithType> <xref:System.DateTime>の場合は0、型の場合はです。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-230">The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=nameWithType> for the <xref:System.DateTime> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c5eb8-231"><xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>メソッドによって返される値を解釈することは、多くの場合、型の既定値がシーケンス内の有効な値であるという事実によって複雑になります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-231">Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.</span></span> <span data-ttu-id="c5eb8-232">この場合は、メソッドを呼び出し<xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType>て、 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>メソッドを呼び出す前に、シーケンスに有効なメンバーがあるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-232">In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="c5eb8-233">次の例では<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> 、メソッドを呼び出し<xref:System.InvalidOperationException>て、前の例で例外がスローされないようにしています。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-233">The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a><span data-ttu-id="c5eb8-234">1つの要素を含まないシーケンスで列挙可能な単一または SingleOrDefault を呼び出す</span><span class="sxs-lookup"><span data-stu-id="c5eb8-234">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</span></span>  
 <span data-ttu-id="c5eb8-235"><xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>メソッドは、シーケンスの唯一の要素、または指定された条件を満たすシーケンスの唯一の要素を返します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-235">The <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.</span></span>    <span data-ttu-id="c5eb8-236">シーケンス内に要素が存在しない場合、または複数の要素が存在する場合、メソッドは<xref:System.InvalidOperationException>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-236">If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 <span data-ttu-id="c5eb8-237">シーケンスに要素が<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>含まれていない場合に例外をスローする代わりに、メソッドを使用して既定値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-237">You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method to return a default value instead of throwing an exception when the sequence contains no elements.</span></span> <span data-ttu-id="c5eb8-238">ただし、シーケンス<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>に複数の要素<xref:System.InvalidOperationException>が含まれている場合、メソッドは依然として例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-238">However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.</span></span>  
  
 <span data-ttu-id="c5eb8-239">次の表は、メソッドおよび<xref:System.InvalidOperationException> <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドの<xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>呼び出しによってスローされた例外オブジェクトからの例外メッセージの一覧です。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-239">The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> methods.</span></span>  
  
|<span data-ttu-id="c5eb8-240">メソッド</span><span class="sxs-lookup"><span data-stu-id="c5eb8-240">Method</span></span>|<span data-ttu-id="c5eb8-241">メッセージ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-241">Message</span></span>|  
|------------|-------------|  
|`Single`|<span data-ttu-id="c5eb8-242">**シーケンスに一致する要素が含まれていません**</span><span class="sxs-lookup"><span data-stu-id="c5eb8-242">**Sequence contains no matching element**</span></span>|  
|`Single` <br /> `SingleOrDefault`|<span data-ttu-id="c5eb8-243">**シーケンスに複数の一致する要素が含まれています**</span><span class="sxs-lookup"><span data-stu-id="c5eb8-243">**Sequence contains more than one matching element**</span></span>|  
  
 <span data-ttu-id="c5eb8-244">次の例では、シーケンスに 4 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>より大きい要素<xref:System.InvalidOperationException>が含まれていないため、メソッドの呼び出しで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-244">In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 <span data-ttu-id="c5eb8-245">次の例では、 <xref:System.InvalidOperationException> <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>メソッドを呼び出す代わりに、シーケンスが空の場合にスローされる例外を回避しようとしています。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-245">The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c5eb8-246">ただし、このシーケンスは2より大きい値を持つ複数の要素を返すため、 <xref:System.InvalidOperationException>例外もスローします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-246">However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 <span data-ttu-id="c5eb8-247"><xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>メソッドを呼び出すと、指定した条件を満たすシーケンスまたはシーケンスに含まれる要素が1つだけであることが前提となります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-247">Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.</span></span>  <span data-ttu-id="c5eb8-248"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>0個または1個の結果を持つシーケンスを想定していますが、これ以上はありません。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-248"><xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> assumes a sequence with zero or one result, but no more.</span></span> <span data-ttu-id="c5eb8-249">この想定が自分のパーツに意図的に作成されていて、これらの条件が満たされ<xref:System.InvalidOperationException>ていない場合は、結果のを再スローまたはキャッチすることが適切です。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-249">If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate.</span></span> <span data-ttu-id="c5eb8-250">それ以外の場合、または何らかの頻度で無効な条件が発生すると予想さ<xref:System.Linq.Enumerable>れる場合は、 <xref:System.Linq.Enumerable.FirstOrDefault%2A>や<xref:System.Linq.Enumerable.Where%2A>などの他の方法を使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-250">Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.</span></span>  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a><span data-ttu-id="c5eb8-251">動的なクロスアプリケーションドメインフィールドアクセス</span><span class="sxs-lookup"><span data-stu-id="c5eb8-251">Dynamic cross-application domain field access</span></span>  
 <span data-ttu-id="c5eb8-252">取得しようとしているアドレスがコード<xref:System.InvalidOperationException>を実行しているアプリケーションドメイン内にない場合、 Microsoft 中間言語 (MSIL) 命令は例外をスローします。 <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c5eb8-252">The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing.</span></span> <span data-ttu-id="c5eb8-253">フィールドのアドレスには、そのフィールドが存在するアプリケーションドメインからのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-253">The address of a field can only be accessed from the application domain in which it resides.</span></span>  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a><span data-ttu-id="c5eb8-254">InvalidOperationException 例外のスロー</span><span class="sxs-lookup"><span data-stu-id="c5eb8-254">Throwing an InvalidOperationException exception</span></span>  
 <span data-ttu-id="c5eb8-255">何らかの理由<xref:System.InvalidOperationException>でオブジェクトの状態が特定のメソッド呼び出しをサポートしていない場合にのみ、例外をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-255">You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call.</span></span> <span data-ttu-id="c5eb8-256">つまり、メソッドの呼び出しは、状況やコンテキストによっては有効ですが、他の方法では無効です。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-256">That is, the method call is valid in some circumstances or contexts, but is invalid in others.</span></span>  
  
 <span data-ttu-id="c5eb8-257">メソッドの呼び出しエラーが無効な引数で<xref:System.ArgumentException>ある場合、またはその派生<xref:System.ArgumentNullException>クラス (または<xref:System.ArgumentOutOfRangeException>) のいずれかを代わりにスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-257">If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead.</span></span>  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a><span data-ttu-id="c5eb8-258">その他の情報</span><span class="sxs-lookup"><span data-stu-id="c5eb8-258">Miscellaneous information</span></span>  
 <span data-ttu-id="c5eb8-259"><xref:System.InvalidOperationException>では、値 0x8013150 9 を持つ HRESULT COR_E_INVALIDOPERATION が使用されます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-259"><xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.</span></span>  
  
 <span data-ttu-id="c5eb8-260"><xref:System.InvalidOperationException>インスタンスの初期プロパティ値の一覧については、<xref:System.InvalidOperationException.%23ctor%2A>コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-260">For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="c5eb8-261">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="c5eb8-261">Handling and Throwing Exceptions</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c5eb8-262"><see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-262">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c5eb8-263"><see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-263">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5eb8-264">このコンストラクターは、 <xref:System.Exception.Message%2A>新しいインスタンスのプロパティを、"要求された操作を実行できません" などのエラーを説明するシステム提供のメッセージに初期化します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-264">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "The requested operation cannot be performed."</span></span> <span data-ttu-id="c5eb8-265">このメッセージには、現在のシステムのカルチャが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-265">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="c5eb8-266"><xref:System.InvalidOperationException> インスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-266">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="c5eb8-267">プロパティ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-267">Property</span></span>|<span data-ttu-id="c5eb8-268">[値]</span><span class="sxs-lookup"><span data-stu-id="c5eb8-268">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="c5eb8-269">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-269">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="c5eb8-270">ローカライズされたエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-270">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string -&gt; InvalidOperationException" Usage="new System.InvalidOperationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="c5eb8-271">エラーを説明するメッセージ。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-271">The message that describes the error.</span></span></param>
        <summary><span data-ttu-id="c5eb8-272">指定したエラー メッセージを使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-272">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5eb8-273">このコンストラクターは、`message`パラメーターを使用して、新しい例外の<xref:System.Exception.Message%2A?displayProperty=nameWithType>プロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-273">This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=nameWithType> property of the new exception using the `message` parameter.</span></span> <span data-ttu-id="c5eb8-274">`message` の内容は、ユーザーが理解できる内容にします。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-274">The content of `message` is intended to be understood by humans.</span></span> <span data-ttu-id="c5eb8-275">このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-275">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span>  
  
 <span data-ttu-id="c5eb8-276"><xref:System.InvalidOperationException> インスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-276">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="c5eb8-277">プロパティ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-277">Property</span></span>|<span data-ttu-id="c5eb8-278">[値]</span><span class="sxs-lookup"><span data-stu-id="c5eb8-278">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="c5eb8-279">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-279">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="c5eb8-280">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-280">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c5eb8-281">シリアル化されたオブジェクト データを保持するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-281">The object that holds the serialized object data.</span></span></param>
        <param name="context"><span data-ttu-id="c5eb8-282">転送元または転送先に関するコンテキスト情報。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-282">The contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="c5eb8-283">シリアル化したデータを使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-283">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5eb8-284">このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-284">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="c5eb8-285">詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-285">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="c5eb8-286">XML シリアル化および SOAP シリアル化</span><span class="sxs-lookup"><span data-stu-id="c5eb8-286">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string * Exception -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="c5eb8-287">例外の原因を説明するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-287">The error message that explains the reason for the exception.</span></span></param>
        <param name="innerException"><span data-ttu-id="c5eb8-288">現在の例外の原因となった例外。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-288">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="c5eb8-289"><paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-289">If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="c5eb8-290">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.InvalidOperationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-290">Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5eb8-291">前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-291">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="c5eb8-292"><xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。内部例外値がコンストラクターに渡されなかった場合、<xref:System.Exception.InnerException%2A> プロパティはnull 参照 (Visual Basic の場合は `Nothing`) を返します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-292">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="c5eb8-293"><xref:System.InvalidOperationException> インスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-293">The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.</span></span>  
  
|<span data-ttu-id="c5eb8-294">プロパティ</span><span class="sxs-lookup"><span data-stu-id="c5eb8-294">Property</span></span>|<span data-ttu-id="c5eb8-295">[値]</span><span class="sxs-lookup"><span data-stu-id="c5eb8-295">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="c5eb8-296">内部例外の参照。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-296">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="c5eb8-297">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="c5eb8-297">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="c5eb8-298">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="c5eb8-298">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
