<Type Name="ReadOnlySpan&lt;T&gt;" FullName="System.ReadOnlySpan&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4dba55570bb7e38e1bd8f7b842609646625558bf" />
    <Meta Name="ms.sourcegitcommit" Value="c902e847cd05ac37d93eca981b0fb009aae0a790" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/28/2018" />
    <Meta Name="ms.locfileid" Value="52454771" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlySpan`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ReadOnlySpan" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="90bc9-101">内の項目の種類、<see cref="System.ReadOnlySpan`1" />します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="90bc9-101">The type of items in the <see cref="System.ReadOnlySpan`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="90bc9-102">任意のメモリの隣接した領域をタイプセーフかつメモリセーフの読み取り専用の表現で表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="90bc9-102">Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-103">`ReadOnlySpan<T>` [ref 構造体](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types)をスタックに割り当てられているし、マネージ ヒープにエスケープすることはありません。</span><span class="sxs-lookup"><span data-stu-id="90bc9-103">`ReadOnlySpan<T>` is a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) that is allocated on the stack and can never escape to the managed heap.</span></span> <span data-ttu-id="90bc9-104">Ref 構造体の型があるいくつかの制限をボックス化できない、型の変数に割り当てられている、ラムダ式内のキャプチャなど、マネージ ヒープに昇格することはできませんを確実に<xref:System.Object>に割り当てられた、`dynamic`変数、および任意のインターフェイス型を実装することはできません。</span><span class="sxs-lookup"><span data-stu-id="90bc9-104">Ref struct types have a number of restrictions to ensure that they cannot be promoted to the managed heap, including that they can't be boxed, captured in lambda expressions, assigned to variables of type <xref:System.Object>, assigned to `dynamic` variables, and they cannot implement any interface type.</span></span>

<span data-ttu-id="90bc9-105">A`ReadOnlySpan<T>`インスタンスは、配列の要素または配列の一部を参照するよく使用されます。</span><span class="sxs-lookup"><span data-stu-id="90bc9-105">A `ReadOnlySpan<T>` instance is often used to reference the elements of an array or a portion of an array.</span></span> <span data-ttu-id="90bc9-106">ただし、配列とは異なり、`ReadOnlySpan<T>`インスタンスは、ネイティブ メモリ、マネージ メモリを指すことができますか、上のメモリ管理スタック。</span><span class="sxs-lookup"><span data-stu-id="90bc9-106">Unlike an array, however, a `ReadOnlySpan<T>` instance can point to managed memory, native memory, or memory managed on the stack.</span></span>]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="90bc9-107">
            <see cref="T:System.ReadOnlySpan`1" /> の作成元になる配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-107">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-108">指定された配列全体で新しい <see cref="T:System.ReadOnlySpan`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-108">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over the entirety of a specified array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-109">このコンス トラクターは、配列が null の場合は、null を返します`ReadOnlySpan<T>`します。</span><span class="sxs-lookup"><span data-stu-id="90bc9-109">If the array is null, this constructor returns a null `ReadOnlySpan<T>`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (void* pointer, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* pointer, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(void* pointer, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : nativeptr&lt;unit&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (pointer, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pointer" Type="System.Void*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="90bc9-110">メモリで指定された数の <paramref name="T" /> オブジェクトの開始アドレスを指すポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-110">A pointer to the starting address of a specified number of <paramref name="T" /> objects in memory.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="90bc9-111">含まれる <paramref name="T" /> オブジェクトの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-111">The number of <paramref name="T" /> objects to be included.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-112">指定メモリ アドレスで始まる指定バイト数から新しい <see cref="T:System.ReadOnlySpan`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-112">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from a specified number of bytes starting at a specified memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-113">このコンス トラクターは、任意の型を作成するため、注意して使用する必要があります`T`のメモリ ブロック。</span><span class="sxs-lookup"><span data-stu-id="90bc9-113">This constructor should be used with care, since it creates arbitrarily typed `T`s from a block of memory.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90bc9-114">
            <paramref name="T" /> は参照型または参照を含むため、アンマネージ ド メモリには格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-114">
              <paramref name="T" /> is a reference type or contains references and therefore cannot be stored in unmanaged memory.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90bc9-115">
            <paramref name="length" /> が負の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-115">
              <paramref name="length" /> is negative.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="90bc9-116">
            <see cref="T:System.ReadOnlySpan`1" /> の作成元になる配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-116">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="90bc9-117">含める最初の要素を示すインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-117">The index of the first element to include.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="90bc9-118">含める要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-118">The number of elements to include.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-119">指定インデックスで始まる配列の指定要素数を含む新しい <see cref="T:System.ReadOnlySpan`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-119">Creates a new <see cref="T:System.ReadOnlySpan`1" /> that includes a specified number of elements of an array starting at a specified index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90bc9-120">
            <paramref name="array" /> は <see langword="null" /> ですが、<paramref name="start" /> または <paramref name="length" /> は 0 以外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-120">
              <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span>
          </span>
          <p />
          <span data-ttu-id="90bc9-121">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-121">--or--</span>
          </span>
          <p />
          <span data-ttu-id="90bc9-122">
            <paramref name="start" /> は配列の境界の外側にあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-122">
              <paramref name="start" /> is outside the bounds of the array.</span>
          </span>
          <p />
          <span data-ttu-id="90bc9-123">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-123">--or--</span>
          </span>
          <p />
          <span data-ttu-id="90bc9-124">
            <paramref name="start" /> と <paramref name="length" /> は配列の要素数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-124">
              <paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlySpan.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="90bc9-125">項目のコピー先のスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-125">The span to copy items into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-126">この <see cref="System.ReadOnlySpan`1" /> の内容をコピー先 <see cref="System.Span`1" /> にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-126">Copies the contents of this <see cref="System.ReadOnlySpan`1" /> into a destination <see cref="System.Span`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-127">場合、`source`と`destination`の全体が重なる`source`にコピーする前に一時的な場所にコピー元として処理が`destination`します。</span><span class="sxs-lookup"><span data-stu-id="90bc9-127">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90bc9-128">
            <paramref name="destination" /> はソース <see cref="System.ReadOnlySpan`1" /> より短くなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-128">
              <paramref name="destination" /> is shorter than the source <see cref="System.ReadOnlySpan`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ReadOnlySpan`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ReadOnlySpan&lt;T&gt; Empty { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90bc9-129">空の <see cref="T:System.ReadOnlySpan`1" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-129">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90bc9-130">空の <see cref="T:System.ReadOnlySpan`1" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-130">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="readOnlySpan.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("Equals() on ReadOnlySpan will always throw an exception. Use == instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="90bc9-131">サポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-131">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-132">サポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-132">Not supported.</span>
          </span>
          <span data-ttu-id="90bc9-133">
            <see cref="T:System.NotSupportedException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-133">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-134">サポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-134">Not supported.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-135">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="90bc9-135">Not supported.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="90bc9-136">このメソッドによって常にスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-136">Always thrown by this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ReadOnlySpan(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; ReadOnlySpan&lt;'T&gt;.Enumerator" Usage="readOnlySpan.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90bc9-137">この <see cref="T:System.ReadOnlySpan`1" /> の列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-137">Returns an enumerator for this <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-138">この読み取り専用スパンの列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-138">An enumerator for this read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-139">呼び出す代わりに、<xref:System.ReadOnlySpan%601.GetEnumerator%2A>メソッドを直接使用することができます、c#`foreach`ステートメントと Visual Basic `For Each`.`Next`コンストラクトを列挙、<xref:System.ReadOnlySpan%601>します。</span><span class="sxs-lookup"><span data-stu-id="90bc9-139">Instead of calling the <xref:System.ReadOnlySpan%601.GetEnumerator%2A> method directly, you can use the C# `foreach` statement and the Visual Basic `For Each`...`Next` construct to enumerate a <xref:System.ReadOnlySpan%601>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="readOnlySpan.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("GetHashCode() on ReadOnlySpan will always throw an exception.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90bc9-140">サポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-140">Not supported.</span>
          </span>
          <span data-ttu-id="90bc9-141">
            <see cref="T:System.NotSupportedException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-141">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-142">サポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-142">Not supported.</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="90bc9-143">サポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-143">Not supported.</span>
          </span>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="90bc9-144">このメソッドによって常にスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-144">Always thrown by this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.ReadOnlySpan&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90bc9-145">現在の読み取り専用スパンが空であることを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-145">Returns a value that indicates the current read-only span is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90bc9-146">
            <see langword="true" /> 現在のスパンが空の場合それ以外の場合<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-146">
              <see langword="true" /> when the current span is empty; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T&amp; this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[int] { T&amp; ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="90bc9-147">取得する要素の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-147">The zero-based index of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-148">読み取り専用スパンから、0 から始まる指定したインデックスにある項目を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-148">Gets an item from the read-only span at the specified zero-based index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90bc9-149">読み取り専用の範囲からの要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-149">The element from the read-only span.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="90bc9-150">
            <paramref name="index" /> が 0 未満か、<see cref="P:System.ReadOnlySpan`1.Length" /> 以上です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-150">
              <paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.ReadOnlySpan`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.ReadOnlySpan&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="90bc9-151">読み取り専用スパンにある項目数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-151">The number of items in the read-only span.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="90bc9-152">項目の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-152">The number of items.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="90bc9-153">比較対象とする最初のスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-153">The first span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="90bc9-154">比較対象とする 2 つ目のスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-154">The second span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-155">2 つの <see cref="T:System.ReadOnlySpan`1" /> インスタンスが等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-155">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-156">2 つの <see cref="T:System.ReadOnlySpan`1" /> インスタンスが等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-156">
              <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are equal; otherwise, <see langword="false" /></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-157">これは 2 つの場合、テスト<xref:System.ReadOnlySpan`1>インスタンスが同じ開始メモリ位置を指すし、が同じである<xref:System.ReadOnlySpan`1.Length>値。</span><span class="sxs-lookup"><span data-stu-id="90bc9-157">This tests if two <xref:System.ReadOnlySpan`1> instances point to the same starting memory location, and have the same <xref:System.ReadOnlySpan`1.Length> values.</span></span> <span data-ttu-id="90bc9-158">これは、2 つの内容は比較されません<xref:System.ReadOnlySpan`1>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="90bc9-158">This does not compare the contents of two <xref:System.ReadOnlySpan`1> instances.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(`0[])~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="90bc9-159">
            <see cref="T:System.ReadOnlySpan`1" /> に変換する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-159">The array to convert to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-160">配列から <see cref="T:System.ReadOnlySpan`1" /> への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-160">Defines an implicit conversion of an array to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-161">
            <paramref name="array" /> に対応する読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-161">The read-only span that corresponds to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; arraySegment) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (arraySegment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}" FrameworkAlternate="netcore-2.1;netcore-2.0;netcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arraySegment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      </Parameters>
      <Docs>
        <param name="arraySegment">
          <span data-ttu-id="90bc9-162">
            <see cref="T:System.ReadOnlySpan`1" /> に変換する配列セグメント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-162">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="90bc9-163">
            <see cref="T:System.ReadOnlySpan`1" /> に変換する配列セグメント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-163">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-164">
            <see cref="T:System.ArraySegment`1" /> から <see cref="T:System.ReadOnlySpan`1" /> への暗黙の型変換を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-164">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-165">配列セグメントに対応する読み取り専用のスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-165">A read-only span that corresponds to the array segment.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="90bc9-166">比較する最初の読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-166">The first read-only span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="90bc9-167">比較する 2 番目の読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-167">The second read-only span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-168">2 つの <see cref="T:System.ReadOnlySpan`1" /> インスタンスが等しくないかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-168">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-169">2 つの <see cref="T:System.ReadOnlySpan`1" /> インスタンスが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-169">
              <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-170">2 つ<xref:System.ReadOnlySpan%601>インスタンスが等しくない長さが異なるを持っている場合や、対応する要素の`left`と`right`さまざまなメモリの場所をポイントします。</span><span class="sxs-lookup"><span data-stu-id="90bc9-170">Two <xref:System.ReadOnlySpan%601> instances are not equal if they have different lengths or if the corresponding elements of `left` and `right` point to different memory locations.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="90bc9-171">スライスの開始位置を示すインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-171">The index at which to begin the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-172">指定のインデックスで始まる現在の読み取り専用スパンからスライスを形成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-172">Forms a slice out of the current read-only span that begins at a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-173">
            <paramref name="index" /> からスパンの終わりまで、現在のスパンの全要素で構成されるスパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-173">A span that consists of all elements of the current span from <paramref name="index" /> to the end of the span.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90bc9-174">
            <paramref name="start" /> は、読み取り専用スパンにある項目数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-174">
              <paramref name="start" /> is greater than the number of items in the read-only span.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="90bc9-175">このスライスの開始位置を示すインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-175">The index at which to begin this slice.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="90bc9-176">スライスに求められる長さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-176">The desired length for the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-177">指定インデックスから始まる現在の読み取り専用スパンから、指定の長さでスライスを形成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-177">Forms a slice out of the current read-only span starting at a specified index for a specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-178">
            <paramref name="index" /> で始まる現在のスパンからの <paramref name="length" /> 要素で構成される読み取り専用スパン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-178">A read-only span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="index" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90bc9-179">
            <paramref name="start" /> が 0 未満か、<see cref="T:System.Span`1.Length" /> 以上です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-179">
              <paramref name="start" /> is less than zero or greater than or equal to <see cref="T:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="readOnlySpan.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90bc9-180">この読み取り専用スパンの内容を新しい配列にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-180">Copies the contents of this read-only span into a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-181">現在のスパンのデータを含む配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-181">An array containing the data in the current span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-182">このメソッドは、ヒープの割り当ておよびデータのコピーを実行し、そのためは可能であれば避ける必要があります。</span><span class="sxs-lookup"><span data-stu-id="90bc9-182">This method performs a heap allocation and data copy, and therefore, should be avoided if possible.</span></span> <span data-ttu-id="90bc9-183">これは、Api をサポートする場合にも必要<xref:System.ReadOnlySpan%601>が使用できない、配列での作業の Api。</span><span class="sxs-lookup"><span data-stu-id="90bc9-183">It it sometimes necessary when APIs that support <xref:System.ReadOnlySpan%601> are not available, but APIs that work with arrays are.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="readOnlySpan.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="90bc9-184">この <see cref="T:System.ReadOnlySpan`1" /> の文字列表現を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-184">Returns the string representation of this <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-185">このインスタンスの文字列形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-185">The string representation of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-186">`ReadOnlySpan<Char>`、`ToString`メソッドを返します。 を<xref:System.String>スパンによって示される文字を格納しています。</span><span class="sxs-lookup"><span data-stu-id="90bc9-186">For a `ReadOnlySpan<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the span.</span></span> <span data-ttu-id="90bc9-187">それ以外を返します、<xref:System.String>型と範囲を含む要素の数の名前に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="90bc9-187">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the span contains.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlySpan.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="90bc9-188">コピー操作の対象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-188">The target of the copy operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="90bc9-189">この <see cref="System.ReadOnlySpan`1" /> コンテンツの <see cref="System.Span`1" /> へのコピーを試行して、操作が成功したかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-189">Attempts to copy the contents of this <see cref="System.ReadOnlySpan`1" /> into a <see cref="System.Span`1" /> and returns a value to indicate whether or not the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="90bc9-190">コピー操作が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="90bc9-190">
              <see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="90bc9-191">場合、`source`と`destination`の全体が重なる`source`にコピーする前に一時的な場所にコピー元として処理が`destination`します。</span><span class="sxs-lookup"><span data-stu-id="90bc9-191">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>

<span data-ttu-id="90bc9-192">場合、`destination`長がよりも短い`source`、項目はコピーされませんおよびメソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="90bc9-192">If the `destination` length is shorter than `source`, no items are copied and the method returns `false`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>