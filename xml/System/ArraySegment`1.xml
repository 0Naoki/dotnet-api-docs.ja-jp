<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ArraySegment`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5564bfcb761e88fd4cfd398e28d03b06bc68519e8.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">564bfcb761e88fd4cfd398e28d03b06bc68519e8</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The type of the elements in the array segment.</source>
          <target state="translated">配列セグメントの要素の型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ArraySegment`1">
          <source>Delimits a section of a one-dimensional array.</source>
          <target state="translated">1 次元配列のセクションを区切ります。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source><ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> is a wrapper around an array that delimits a range of elements in that array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> その配列内の要素の範囲を区切る配列をラップするラッパー。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>Multiple <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instances can refer to the same original array and can overlap.</source>
          <target state="translated">複数<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>インスタンスを参照する同じ元の配列と重なり合うことができます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The original array must be one-dimensional and must have zero-based indexing.</source>
          <target state="translated">元の配列は 1 次元である必要があり、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source><ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> interface starting with the <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; in previous versions of the .NET Framework, the <ph id="ph4">&lt;xref:System.ArraySegment%601&gt;</ph> structure did not implement this interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> 実装する、<ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph>インターフェイスから始まる、<ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>以外の場合は、.NET Framework の以前のバージョンで、<ph id="ph4">&lt;xref:System.ArraySegment%601&gt;</ph>構造体は、このインターフェイスを実装しませんでした。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> structure is useful whenever the elements of an array will be manipulated in distinct segments.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>構造体は、配列の要素が個別のセグメントで操作する場合に役立ちます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>For example:</source>
          <target state="translated">例:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>You can pass an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> object that represents only a portion of an array as an argument to a method, rather than call a relatively expensive method like <ph id="ph2">&lt;xref:System.Array.Copy%2A&gt;</ph> to pass a copy of a portion of an array.</source>
          <target state="translated">渡すことができます、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>などの比較的高価なメソッド呼び出しではなく、メソッドに引数として、配列の一部だけを表すオブジェクト<ph id="ph2">&lt;xref:System.Array.Copy%2A&gt;</ph>配列の一部のコピーを渡す。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>In a multithreaded app, you can use the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> structure to have each thread operate on only a portion of the array.</source>
          <target state="translated">マルチ スレッド アプリケーションでは、使用することができます、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>各スレッドが、配列の一部分のみで動作する構造体。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>For task-based asynchronous operations, you can use an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> object to ensure that each task operates on a distinct segment of the array.</source>
          <target state="translated">タスク ベースの非同期操作を使用できます、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>各タスクが、配列の個別のセグメントで動作することを確認するオブジェクト。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The following example divides an array into individual segments with up to ten elements.</source>
          <target state="translated">次の例では、配列を最大 10 個の要素を持つ個々 のセグメントに分割します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>Each element in the segment is multiplied by its segment number.</source>
          <target state="translated">セグメント内の各要素には、そのセグメント数が乗算されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The result shows that using the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> class to manipulate elements in this way changes the values of its underlying array.</source>
          <target state="translated">結果を使用する、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>この方法で要素を操作するクラスがその基になる配列の値を変更します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>Note, however, that although the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> structure can be used to divide an array into distinct segments, the segments are not completely independent of one another.</source>
          <target state="translated">ただし、ですが、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>配列を個別のセグメントに分割する構造体を使用することができます、セグメントは相互に完全に独立します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The <ph id="ph1">&lt;xref:System.ArraySegment%601.Array%2A&gt;</ph> property returns the entire original array, not a copy of the array; therefore, changes made to the array returned by the <ph id="ph2">&lt;xref:System.ArraySegment%601.Array%2A&gt;</ph> property are made to the original array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArraySegment%601.Array%2A&gt;</ph>プロパティには、全体の元の配列、配列のコピーではなくが返されます。 そのため、に加えられた変更は返される配列で、<ph id="ph2">&lt;xref:System.ArraySegment%601.Array%2A&gt;</ph>プロパティは、元の配列に加えられました。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>If this is undesirable, you should perform operations on a copy of the array, rather than an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> object that represents a portion of the array.</source>
          <target state="translated">これが望ましくない場合は、配列のコピーで操作を実行する必要がありますではなく、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>配列の一部分を表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The <ph id="ph1">&lt;xref:System.ArraySegment%601.Equals%2A&gt;</ph> method and the equality and inequality operators test for reference equality when they compare two <ph id="ph2">&lt;xref:System.ArraySegment%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArraySegment%601.Equals%2A&gt;</ph> 2 つを比較するときの参照の等価性メソッドと等値演算子および非等値演算子がテスト<ph id="ph2">&lt;xref:System.ArraySegment%601&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>For two <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> objects to be considered equal, they must meet all of the following conditions:</source>
          <target state="translated">2 つの<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>と見なされるにオブジェクトが等しい、次の条件をすべてを満たしている必要があります。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>Reference the same array.</source>
          <target state="translated">同じ配列の参照。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>Begin at the same index in the array.</source>
          <target state="translated">配列内の同じインデックスから始まります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>Have the same number of elements.</source>
          <target state="translated">同じ数の要素があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>If you want to retrieve an element by its index in the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> object, you must cast it to an <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> object and retrieve it or modify it by using the <ph id="ph3">&lt;xref:System.Collections.Generic.IList%601.Item%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">内のインデックスで要素を取得するかどうか、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>オブジェクトにキャストする必要があります、<ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>オブジェクトしそれを取得またはを使用して変更、<ph id="ph3">&lt;xref:System.Collections.Generic.IList%601.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The following example retrieves the element in an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> object that delimits a section of a string array.</source>
          <target state="translated">次の例は、内の要素を取得、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>オブジェクトを文字列配列のセクションを区切ります。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ArraySegment`1">
          <source>The following code example passes an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> structure to a method.</source>
          <target state="translated">次のコード例のパス、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>メソッドに構造体。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.ArraySegment`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 構造体の新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source>The array to wrap.</source>
          <target state="translated">ラップする配列。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> structure that delimits all the elements in the specified array.</source>
          <target state="translated">指定した配列内のすべての要素を区切る <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 構造体の新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source>This constructor creates an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> that delimits all the elements of <ph id="ph2">`array`</ph>.</source>
          <target state="translated">このコンス トラクターを作成、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>のすべての要素を区切る<ph id="ph2">`array`</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source>That is, the <ph id="ph1">&lt;xref:System.ArraySegment%601.Offset%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ArraySegment%601&gt;</ph> is 0 and its <ph id="ph3">&lt;xref:System.ArraySegment%601.Count%2A&gt;</ph> property is the length of <ph id="ph4">`array`</ph>.</source>
          <target state="translated">つまり、<ph id="ph1">&lt;xref:System.ArraySegment%601.Offset%2A&gt;</ph>のプロパティ、 <ph id="ph2">&lt;xref:System.ArraySegment%601&gt;</ph> 0 は、およびその<ph id="ph3">&lt;xref:System.ArraySegment%601.Count%2A&gt;</ph>プロパティの長さは、<ph id="ph4">`array`</ph>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source>To create an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> that delimits only part of an array, use the <ph id="ph2">&lt;xref:System.ArraySegment%601.%23ctor%28%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">作成する、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>配列の一部だけを区切るを使用して、<ph id="ph2">&lt;xref:System.ArraySegment%601.%23ctor%28%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source>The original array must be one-dimensional and must have zero-based indexing.</source>
          <target state="translated">元の配列は 1 次元である必要があり、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source>Multiple <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instances can refer to the same original array and can overlap.</source>
          <target state="translated">複数<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>インスタンスを参照する同じ元の配列と重なり合うことができます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source>The following code example passes an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> structure to a method.</source>
          <target state="translated">次のコード例のパス、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>メソッドに構造体。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[])">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source>The array containing the range of elements to delimit.</source>
          <target state="translated">区切る要素範囲を含む配列。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source>The zero-based index of the first element in the range.</source>
          <target state="translated">範囲の最初の要素の 0 から始まるインデックス番号。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source>The number of elements in the range.</source>
          <target state="translated">範囲内の要素の数。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> structure that delimits the specified range of the elements in the specified array.</source>
          <target state="translated">指定した配列内で指定した要素範囲を区切る <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 構造体の新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source>The original array must be one-dimensional and must have zero-based indexing.</source>
          <target state="translated">元の配列は 1 次元である必要があり、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source>Multiple <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instances can refer to the same original array and can overlap.</source>
          <target state="translated">複数<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>インスタンスを参照する同じ元の配列と重なり合うことができます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source>The following code example passes an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> structure to a method.</source>
          <target state="translated">次のコード例のパス、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>メソッドに構造体。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid range in <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> は <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の有効な範囲を指定していません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.Array">
          <source>Gets the original array containing the range of elements that the array segment delimits.</source>
          <target state="translated">配列セグメントで区切る要素範囲を含む元の配列を取得します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.Array">
          <source>The original array that was passed to the constructor, and that contains the range delimited by the <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph>.</source>
          <target state="translated">コンストラクターに渡され、<ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> で区切られた範囲を含む元の配列。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.Array">
          <source>The <ph id="ph1">&lt;xref:System.ArraySegment%601.Array%2A&gt;</ph> property returns the original array, not a copy of the array; therefore, changes made through the property are made directly to the original array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArraySegment%601.Array%2A&gt;</ph>プロパティには、配列のコピーではなく、元の配列が返されます。 プロパティに加えられた変更が元の配列に直接行われたため、します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.Array">
          <source>The following code example passes an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> to a method.</source>
          <target state="translated">次のコード例のパス、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>メソッドにします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.Count">
          <source>Gets the number of elements in the range delimited by the array segment.</source>
          <target state="translated">配列セグメントで区切られた範囲に含まれる要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.Count">
          <source>The number of elements in the range delimited by the <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> で区切られた範囲内の要素の数。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.Count">
          <source>The following code example passes an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> structure to a method.</source>
          <target state="translated">次のコード例のパス、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>メソッドに構造体。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.ArraySegment`1">
          <source>Determines whether two objects are equal.</source>
          <target state="translated">2 つのオブジェクトが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
          <source>The structure to compare with the current instance.</source>
          <target state="translated">現在のインスタンスと比較する構造体。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> structure is equal to the current instance.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 構造体が現在のインスタンスと等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> structure is equal to the current instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 構造体が現在のインスタンスと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
          <source>Two <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> objects are considered to be equal if all the following conditions are met:</source>
          <target state="translated">2 つ<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>オブジェクトは、次の条件が満たされた場合は、等しいと見なされます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
          <source>They reference the same array.</source>
          <target state="translated">これらは参照、同じ配列です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
          <source>They begin at the same index in the array.</source>
          <target state="translated">これらは、配列内の同じインデックスから始まります。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
          <source>They have the same number of elements.</source>
          <target state="translated">同じ数の要素があります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.Equals(System.Object)">
          <source>The object to be compared with the current instance.</source>
          <target state="translated">現在のインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.Equals(System.Object)">
          <source>Determines whether the specified object is equal to the current instance.</source>
          <target state="translated">指定したオブジェクトが現在のインスタンスと等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is a <ph id="ph2">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> structure and is equal to the current instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したオブジェクトが <ph id="ph2">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 構造体であり、現在のインスタンスと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.Equals(System.Object)">
          <source>Two <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> objects are considered to be equal if all the following conditions are met:</source>
          <target state="translated">2 つ<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>オブジェクトは、次の条件が満たされた場合は、等しいと見なされます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.Equals(System.Object)">
          <source>They reference the same array.</source>
          <target state="translated">これらは参照、同じ配列です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.Equals(System.Object)">
          <source>They begin at the same index in the array.</source>
          <target state="translated">これらは、配列内の同じインデックスから始まります。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.Equals(System.Object)">
          <source>They have the same number of elements.</source>
          <target state="translated">同じ数の要素があります。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.GetHashCode">
          <source>Returns the hash code for the current instance.</source>
          <target state="translated">現在のインスタンスのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.Offset">
          <source>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</source>
          <target state="translated">配列セグメントで区切られた範囲に含まれる最初の要素の位置を取得します。この位置は、元の配列の先頭からの相対位置です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.Offset">
          <source>The position of the first element in the range delimited by the <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph>, relative to the start of the original array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> で区切られた範囲に含まれる最初の要素の位置。この位置は、元の配列の先頭からの相対位置です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.Offset">
          <source>The following code example passes an <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> structure to a method.</source>
          <target state="translated">次のコード例のパス、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>メソッドに構造体。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>The  structure on the left side of the equality operator.</source>
          <target state="translated">等値演算子の左辺にある構造体。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>The structure on the right side of the equality operator.</source>
          <target state="translated">等値演算子の右辺にある構造体。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> structures are equal.</source>
          <target state="translated">2 つの <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 構造体が等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="a" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="b" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が <ph id="ph2">&lt;paramref name="a" /&gt;</ph> に等しい場合は <ph id="ph3">&lt;paramref name="b" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>Two <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> objects are considered to be equal if all the following conditions are met:</source>
          <target state="translated">2 つ<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>オブジェクトは、次の条件が満たされた場合は、等しいと見なされます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>They reference the same array.</source>
          <target state="translated">これらは参照、同じ配列です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>They begin at the same index.</source>
          <target state="translated">これらは、同じインデックスから始まります。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>They have the same number of elements.</source>
          <target state="translated">同じ数の要素があります。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.ArraySegment%601.Equals%28System.ArraySegment%7B%600%7D%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">この演算子を同等の方法は、します。 <ph id="ph1">&lt;xref:System.ArraySegment%601.Equals%28System.ArraySegment%7B%600%7D%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>The structure on the left side of the inequality operator.</source>
          <target state="translated">非等値演算子の左辺にある構造体。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>The structure on the right side of the inequality operator.</source>
          <target state="translated">非等値演算子の右辺にある構造体。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> structures are unequal.</source>
          <target state="translated">2 つの <ph id="ph1">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> 構造体が等しくないかどうかを示します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="a" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="b" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が <ph id="ph2">&lt;paramref name="a" /&gt;</ph> と等しくない場合は <ph id="ph3">&lt;paramref name="b" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>Two <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> objects are considered to be unequal if they are of the same closed generic type but any of the following conditions is true:</source>
          <target state="translated">2 つ<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>オブジェクトが等しくないとそれらが同じのクローズ ジェネリック型が、次の条件のいずれかが当てはまる場合と見なされます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>They do not reference the same array.</source>
          <target state="translated">同じ配列は参照されません。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>They have different starting indexes.</source>
          <target state="translated">別の開始インデックスがあります。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>They have a different number of elements.</source>
          <target state="translated">異なる数の要素があります。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.ArraySegment%601.Equals%28System.ArraySegment%7B%600%7D%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">この演算子を同等の方法は、します。 <ph id="ph1">&lt;xref:System.ArraySegment%601.Equals%28System.ArraySegment%7B%600%7D%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>The object to add to the array segment.</source>
          <target state="translated">配列セグメントに追加するオブジェクト。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>Adds an item to the array segment.</source>
          <target state="translated">項目を配列セグメントに追加します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>The array segment is read-only.</source>
          <target state="translated">配列セグメントが読み取り専用です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Clear">
          <source>Removes all items from the array segment.</source>
          <target state="translated">配列セグメントからすべての項目を削除します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Clear">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Clear">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Clear">
          <source>The array segment is read-only.</source>
          <target state="translated">配列セグメントが読み取り専用です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Contains(`0)">
          <source>The object to locate in the array segment.</source>
          <target state="translated">配列セグメント内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Contains(`0)">
          <source>Determines whether the array segment contains a specific value.</source>
          <target state="translated">配列セグメントに特定の値が格納されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the array segment; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="item" /&gt;</ph> が配列セグメント内で見つかった場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Contains(`0)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Contains(`0)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>The one-dimensional array that is the destination of the elements copied from the array segment.</source>
          <target state="translated">配列セグメントからコピーされる要素のコピー先である 1 次元配列。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>The array must have zero-based indexing.</source>
          <target state="translated">配列には、0 から始まるインデックスが設定されている必要があります。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>Copies the elements of the array segment to an array, starting at the specified array index.</source>
          <target state="translated">指定した配列インデックスを開始位置として、配列セグメントの要素を配列にコピーします。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> が多次元です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source array segment is greater than the available space from <ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の配列セグメントの要素の数が、コピー先の <ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> の <ph id="ph2">&lt;paramref name="array" /&gt;</ph> から末尾までに格納できる数よりも大きくなっています。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#CopyTo(`0[],System.Int32)">
          <source>Type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> をコピー先の <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の型に自動的にキャストすることはできません。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Gets a value that indicates whether the array segment  is read-only.</source>
          <target state="translated">配列セグメントが読み取り専用かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the array segment is read-only; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">配列セグメントが読み取り専用の場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Remove(`0)">
          <source>The object to remove from the array segment.</source>
          <target state="translated">配列セグメントから削除するオブジェクト。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Remove(`0)">
          <source>Removes the first occurrence of a specific object from the array segment.</source>
          <target state="translated">指定したオブジェクトが配列セグメント内にあるときに、最初に出現したものを削除します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> was successfully removed from the array segment; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="item" /&gt;</ph> が配列セグメントから正常に削除された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is not found in the array segment.</source>
          <target state="translated">このメソッドは、配列セグメントに <ph id="ph2">&lt;paramref name="item" /&gt;</ph> が見つからない場合にも <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Remove(`0)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Remove(`0)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Remove(`0)">
          <source>The array segment is read-only.</source>
          <target state="translated">配列セグメントが読み取り専用です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through the array segment.</source>
          <target state="translated">配列セグメントを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator that can be used to iterate through the array segment.</source>
          <target state="translated">配列セグメントの反復処理に使用できる列挙子。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#IndexOf(`0)">
          <source>The object to locate in the array segment.</source>
          <target state="translated">配列セグメント内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#IndexOf(`0)">
          <source>Determines the index of a specific item in the array segment.</source>
          <target state="translated">配列セグメント内での指定した項目のインデックスを調べます。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#IndexOf(`0)">
          <source>The index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> if found in the list; otherwise, -1.</source>
          <target state="translated">リストに存在する場合は <ph id="ph1">&lt;paramref name="item" /&gt;</ph> のインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#IndexOf(`0)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#IndexOf(`0)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Insert(System.Int32,`0)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> を挿入する位置の、0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Insert(System.Int32,`0)">
          <source>The object to insert into the array segment.</source>
          <target state="translated">配列セグメントに挿入するオブジェクト。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Insert(System.Int32,`0)">
          <source>Inserts an item into the array segment at the specified index.</source>
          <target state="translated">配列セグメント内の指定したインデックス位置に項目を挿入します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Insert(System.Int32,`0)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Insert(System.Int32,`0)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the array segment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が配列セグメントの有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Insert(System.Int32,`0)">
          <source>The array segment is read-only.</source>
          <target state="translated">配列セグメントが読み取り専用です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">取得または設定する要素の、0 から始まるインデックス番号。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">指定したインデックスにある要素を取得または設定します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">指定したインデックス位置にある要素。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> interface, as the following example shows.</source>
          <target state="translated">使用できる場合にのみ、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph>インスタンスにキャスト、<ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>次の例のように、インターフェイスです。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>The property is set and the array segment is read-only.</source>
          <target state="translated">このプロパティが設定されていますが、配列セグメントが読み取り専用です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#RemoveAt(System.Int32)">
          <source>The zero-based index of the item to remove.</source>
          <target state="translated">削除する項目の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#RemoveAt(System.Int32)">
          <source>Removes the array segment item at the specified index.</source>
          <target state="translated">指定したインデックス位置にある配列セグメントの項目を削除します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#RemoveAt(System.Int32)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#RemoveAt(System.Int32)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the array segment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が配列セグメントの有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#Generic#IList&amp;lt;T&amp;gt;#RemoveAt(System.Int32)">
          <source>The array segment is read-only.</source>
          <target state="translated">配列セグメントが読み取り専用です。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>The zero-based index of the element to get.</source>
          <target state="translated">取得する要素の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>Gets the element at the specified index of the array segment.</source>
          <target state="translated">配列セグメントの指定したインデックスにある要素を取得します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">指定したインデックス位置にある要素。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyList%601&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyList%601&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.ArraySegment`1" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList&amp;lt;T&amp;gt;#Item(System.Int32)">
          <source>The property is set.</source>
          <target state="translated">プロパティが設定されています。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through an array segment.</source>
          <target state="translated">配列セグメントを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator that can be used to iterate through the array segment.</source>
          <target state="translated">配列セグメントの反復処理に使用できる列挙子。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.ArraySegment%601&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>