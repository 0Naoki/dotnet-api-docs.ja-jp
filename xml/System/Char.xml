<Type Name="Char" FullName="System.Char">
  <TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Char" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IComparable(Of Char), IConvertible, IEquatable(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Char&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="13511-101">文字を UTF-16 コード単位で表します。</span><span class="sxs-lookup"><span data-stu-id="13511-101">Represents a character as a UTF-16 code unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]を使用して、 <xref:System.Char> Unicode 文字を表現する構造体。</span><span class="sxs-lookup"><span data-stu-id="13511-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] uses the <xref:System.Char> structure to represent a Unicode character.</span></span> <span data-ttu-id="13511-103">Unicode 規格は、コード ポイントと呼ばれる一意の 21 ビット スカラー番号でそれぞれの Unicode 文字を識別し、コード ポイントを 1 つ以上の 16 ビット値のシーケンスにエンコードする方法を指定する utf-16 エンコード形式を定義します。</span><span class="sxs-lookup"><span data-stu-id="13511-103">The Unicode Standard identifies each Unicode character with a unique 21-bit scalar number called a code point, and defines the UTF-16 encoding form that specifies how a code point is encoded into a sequence of one or more 16-bit values.</span></span> <span data-ttu-id="13511-104">各 16 ビット値が 16 進数の 0x0000 から 0 xffff までの範囲しに格納されて、<xref:System.Char>構造体。</span><span class="sxs-lookup"><span data-stu-id="13511-104">Each 16-bit value ranges from hexadecimal 0x0000 through 0xFFFF and is stored in a <xref:System.Char> structure.</span></span>  <span data-ttu-id="13511-105">値、<xref:System.Char>オブジェクトは、16 ビット数値 (序数) の値。</span><span class="sxs-lookup"><span data-stu-id="13511-105">The value of a <xref:System.Char> object is its 16-bit numeric (ordinal) value.</span></span>  
  
 <span data-ttu-id="13511-106">次のセクションでは、確認の間のリレーションシップ、<xref:System.Char>オブジェクト、および文字で実行される一般的なタスクについて説明し、<xref:System.Char>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="13511-106">The following sections examine the relationship between a <xref:System.Char> object and a character and discuss some common tasks performed with <xref:System.Char> instances.</span></span>  
  
 <span data-ttu-id="13511-107">[Char 型のオブジェクト、Unicode 文字、および文字列](#Relationship) </span><span class="sxs-lookup"><span data-stu-id="13511-107">[Char objects, Unicode characters, and strings](#Relationship) </span></span>  
 <span data-ttu-id="13511-108">[文字および文字カテゴリ](#Categories) </span><span class="sxs-lookup"><span data-stu-id="13511-108">[Characters and character categories](#Categories) </span></span>  
 <span data-ttu-id="13511-109">[文字要素と text 要素](#Elements) </span><span class="sxs-lookup"><span data-stu-id="13511-109">[Characters and text elements](#Elements) </span></span>  
 <span data-ttu-id="13511-110">[一般的な操作](#Operations) </span><span class="sxs-lookup"><span data-stu-id="13511-110">[Common operations](#Operations) </span></span>  
 [<span data-ttu-id="13511-111">Char 値との相互運用機能</span><span class="sxs-lookup"><span data-stu-id="13511-111">Char values and interop</span></span>](#Interop)  
  
<a name="Relationship"></a>   
## <a name="char-objects-unicode-characters-and-strings"></a><span data-ttu-id="13511-112">Char 型のオブジェクト、Unicode 文字、および文字列</span><span class="sxs-lookup"><span data-stu-id="13511-112">Char objects, Unicode characters, and strings</span></span>  
 <span data-ttu-id="13511-113">A<xref:System.String>オブジェクトは、シーケンシャル コレクションの<xref:System.Char>テキストの文字列を表す構造体。</span><span class="sxs-lookup"><span data-stu-id="13511-113">A <xref:System.String> object is a sequential collection of <xref:System.Char> structures that represents a string of text.</span></span> <span data-ttu-id="13511-114">ほとんどの Unicode 文字を 1 つで表せる<xref:System.Char>オブジェクト、基本文字としてエンコードされる文字がサロゲート ペアと組み合わせ文字シーケンスが複数で表される<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-114">Most Unicode characters can be represented by a single <xref:System.Char> object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple <xref:System.Char> objects.</span></span> <span data-ttu-id="13511-115">このため、<xref:System.Char>構造体、<xref:System.String>オブジェクトは、必ずしも単一の Unicode 文字に相当することはありません。</span><span class="sxs-lookup"><span data-stu-id="13511-115">For this reason, a <xref:System.Char> structure in a <xref:System.String> object is not necessarily equivalent to a single Unicode character.</span></span>  
  
 <span data-ttu-id="13511-116">複数の 16 ビットのコード単位を使用して、次の場合、1 つの Unicode 文字を表現します。</span><span class="sxs-lookup"><span data-stu-id="13511-116">Multiple 16-bit code units are used to represent single Unicode characters in the following cases:</span></span>  
  
-   <span data-ttu-id="13511-117">グリフの 1 つの文字または、基本文字の後に 1 つまたは複数の結合文字で構成されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="13511-117">Glyphs, which may consist of a single character or of a base character followed by one or more combining characters.</span></span> <span data-ttu-id="13511-118">たとえば、ä 文字が a で表されます<xref:System.Char>オブジェクト単位は U +0 0061 a の後にコードを持つ<xref:System.Char>がコードの単位が u+0308 オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-118">For example, the character ä is represented by a <xref:System.Char> object whose code unit is U+0061 followed by a <xref:System.Char> object whose code unit is U+0308.</span></span> <span data-ttu-id="13511-119">(文字 ä は、1 つで定義することも<xref:System.Char>U +0 00E4 のコード単位を持つオブジェクトです)。2 つの文字 ä で構成されている次の例を示しています<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-119">(The character ä can also be defined by a single <xref:System.Char> object that has a code unit of U+00E4.) The following example illustrates that the character ä consists of two <xref:System.Char> objects.</span></span>  
  
     [!code-csharp[System.Char.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/grapheme1.cs#1)]
     [!code-vb[System.Char.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/grapheme1.vb#1)]  
  
-   <span data-ttu-id="13511-120">Unicode 基本多言語面 (BMP) 以外の文字。</span><span class="sxs-lookup"><span data-stu-id="13511-120">Characters outside the Unicode Basic Multilingual Plane (BMP).</span></span> <span data-ttu-id="13511-121">Unicode には、0 の平面を表します bmp ファイルだけでなく 16 個の平面がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="13511-121">Unicode supports sixteen planes in addition to the BMP, which represents plane 0.</span></span> <span data-ttu-id="13511-122">Unicode コード ポイントは、utf-32 の平面が含まれる 21 ビットの値で表されます。</span><span class="sxs-lookup"><span data-stu-id="13511-122">A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane.</span></span> <span data-ttu-id="13511-123">たとえば、U +0 1D160 は、音符シンボル 8 分の文字を表します。</span><span class="sxs-lookup"><span data-stu-id="13511-123">For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character.</span></span> <span data-ttu-id="13511-124">Utf-16 エンコーディングは 16 ビットだけがあるために、BMP 以外の文字は、utf-16 のサロゲート ペアで表されます。</span><span class="sxs-lookup"><span data-stu-id="13511-124">Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16.</span></span> <span data-ttu-id="13511-125">次の例では、U + D834 U + DD60 は U +0 1D160、音符シンボル 8 分の文字の utf-32 相当にことを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-125">The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60.</span></span> <span data-ttu-id="13511-126">U + D834 が上位サロゲートです。高サロゲート u+d800 から U+DBFF の範囲です。</span><span class="sxs-lookup"><span data-stu-id="13511-126">U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF.</span></span> <span data-ttu-id="13511-127">U + DD60 が下位サロゲートです。低サロゲート u+dc00 から U+DFFF までの範囲です。</span><span class="sxs-lookup"><span data-stu-id="13511-127">U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.</span></span>  
  
     [!code-csharp[System.Char.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/surrogate1.cs#2)]
     [!code-vb[System.Char.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/surrogate1.vb#2)]  
  
<a name="Categories"></a>   
## <a name="characters-and-character-categories"></a><span data-ttu-id="13511-128">文字および文字カテゴリ</span><span class="sxs-lookup"><span data-stu-id="13511-128">Characters and character categories</span></span>  
 <span data-ttu-id="13511-129">各 Unicode 文字または有効なサロゲート ペアは、Unicode カテゴリに属しています。</span><span class="sxs-lookup"><span data-stu-id="13511-129">Each Unicode character or valid surrogate pair belongs to a Unicode category.</span></span> <span data-ttu-id="13511-130">.NET Framework の Unicode カテゴリがのメンバーによって表される、<xref:System.Globalization.UnicodeCategory>列挙などの値と<xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>と<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>、例を示します。</span><span class="sxs-lookup"><span data-stu-id="13511-130">In the .NET Framework, Unicode categories are represented by members of the <xref:System.Globalization.UnicodeCategory> enumeration and include values such as <xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>, and <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>, for example.</span></span>  
  
 <span data-ttu-id="13511-131">文字の Unicode カテゴリを確認するを呼び出す、<xref:System.Char.GetUnicodeCategory%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-131">To determine the Unicode category of a character, you call the <xref:System.Char.GetUnicodeCategory%2A> method.</span></span> <span data-ttu-id="13511-132">たとえば、次の例では、<xref:System.Char.GetUnicodeCategory%2A>文字列内の各文字の Unicode カテゴリを表示します。</span><span class="sxs-lookup"><span data-stu-id="13511-132">For example, the following example calls the <xref:System.Char.GetUnicodeCategory%2A> to display the Unicode category of each character in a string.</span></span>  
  
 [!code-csharp[System.Char.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/GetUnicodeCategory3.cs#6)]
 [!code-vb[System.Char.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/GetUnicodeCategory3.vb#6)]  
  
 <span data-ttu-id="13511-133">(U +0 0000 から U + 00 ff)、ASCII の範囲外の文字を内部的には、<xref:System.Char.GetUnicodeCategory%2A>メソッドによって報告された Unicode カテゴリによって異なります、<xref:System.Globalization.CharUnicodeInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="13511-133">Internally, for characters outside the ASCII range (U+0000 through U+00FF), the <xref:System.Char.GetUnicodeCategory%2A> method depends on Unicode categories reported by the <xref:System.Globalization.CharUnicodeInfo> class.</span></span> <span data-ttu-id="13511-134">以降で、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字を分類に基づいて[、Unicode Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)です。</span><span class="sxs-lookup"><span data-stu-id="13511-134">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="13511-135">.NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[、Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)です。</span><span class="sxs-lookup"><span data-stu-id="13511-135">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
<a name="Elements"></a>   
## <a name="characters-and-text-elements"></a><span data-ttu-id="13511-136">文字要素と text 要素</span><span class="sxs-lookup"><span data-stu-id="13511-136">Characters and text elements</span></span>  
 <span data-ttu-id="13511-137">複数によって 1 つの文字を表すことができますので<xref:System.Char>オブジェクトの場合は常に個別を使用する意味のあるいない<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-137">Because a single character can be represented by multiple <xref:System.Char> objects, it is not always meaningful to work with individual <xref:System.Char> objects.</span></span> <span data-ttu-id="13511-138">たとえば、次の例では、Aegean 数字 0 ~ 9 を utf-16 でエンコードされたコード単位を表す Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-138">For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units.</span></span> <span data-ttu-id="13511-139">誤ってと同義なるため<xref:System.Char>オブジェクト、文字と正確に報告されて、結果の文字列が 20 文字であります。</span><span class="sxs-lookup"><span data-stu-id="13511-139">Because it erroneously equates <xref:System.Char> objects with characters, it inaccurately reports that the resulting string has 20 characters.</span></span>  
  
 [!code-csharp[System.Char.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2.cs#3)]
 [!code-vb[System.Char.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2.vb#3)]  
  
 <span data-ttu-id="13511-140">想定を回避するのには、次を行うことができますを<xref:System.Char>オブジェクトは 1 つの文字を表します。</span><span class="sxs-lookup"><span data-stu-id="13511-140">You can do the following to avoid the assumption that a <xref:System.Char> object represents a single character.</span></span>  
  
-   <span data-ttu-id="13511-141">使用する、<xref:System.String>全体を表し、言語的内容を分析する個別の文字の操作ではなくオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-141">You can work with a <xref:System.String> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.</span></span>  
  
-   <span data-ttu-id="13511-142">使用することができます、<xref:System.Globalization.StringInfo>個人ではなくテキスト要素を使用するクラス<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-142">You can use the <xref:System.Globalization.StringInfo> class to work with text elements instead of individual <xref:System.Char> objects.</span></span> <span data-ttu-id="13511-143">次の例では、<xref:System.Globalization.StringInfo>エーゲで構成される文字列内のテキスト要素の数をカウントする番号が 0 から 9 です。</span><span class="sxs-lookup"><span data-stu-id="13511-143">The following example uses the <xref:System.Globalization.StringInfo> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine.</span></span> <span data-ttu-id="13511-144">見なすので、サロゲート ペアを単一の文字、文字列が 10 文字が含まれているが正しく報告されます。</span><span class="sxs-lookup"><span data-stu-id="13511-144">Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.</span></span>  
  
     [!code-csharp[System.Char.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2a.cs#4)]
     [!code-vb[System.Char.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2a.vb#4)]  
  
-   <span data-ttu-id="13511-145">文字列を 1 つまたは複数の結合文字を持つ基本文字が含まれている場合は、呼び出す、<xref:System.String.Normalize%2A?displayProperty=nameWithType>部分文字列を 1 つの utf-16 でエンコードされたコード単位に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-145">If a string contains a base character that has one or more combining characters, you can call the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the substring to a single UTF-16 encoded code unit.</span></span> <span data-ttu-id="13511-146">次の例では、<xref:System.String.Normalize%2A?displayProperty=nameWithType>を変換する方法、基本文字 U + 0061 (LATIN SMALL LETTER A) と組み合わせ文字 u+0308 (結合 DIAERESIS) U +0 00E4 (ラテン小さい文字 A で DIAERESIS)。</span><span class="sxs-lookup"><span data-stu-id="13511-146">The following example calls the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS).</span></span>  
  
     [!code-csharp[System.Char.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/normalized.cs#5)]
     [!code-vb[System.Char.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/normalized.vb#5)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a><span data-ttu-id="13511-147">一般的な操作</span><span class="sxs-lookup"><span data-stu-id="13511-147">Common operations</span></span>  
 <span data-ttu-id="13511-148"><xref:System.Char>構造体を比較するメソッドを提供する<xref:System.Char>、オブジェクトが現在の値を変換<xref:System.Char>オブジェクトを別の型のオブジェクトとの Unicode カテゴリを確認、<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-148">The <xref:System.Char> structure provides methods to compare <xref:System.Char> objects, convert the value of the current <xref:System.Char> object to an object of another type, and determine the Unicode category of a <xref:System.Char> object:</span></span>  
  
|<span data-ttu-id="13511-149">目的</span><span class="sxs-lookup"><span data-stu-id="13511-149">To do this</span></span>|<span data-ttu-id="13511-150">これらを使用して`System.Char`メソッド</span><span class="sxs-lookup"><span data-stu-id="13511-150">Use these `System.Char` methods</span></span>|  
|----------------|-------------------------------------|  
|<span data-ttu-id="13511-151">比較<xref:System.Char>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="13511-151">Compare <xref:System.Char> objects</span></span>|<span data-ttu-id="13511-152"><xref:System.Char.CompareTo%2A> および <xref:System.Char.Equals%2A></span><span class="sxs-lookup"><span data-stu-id="13511-152"><xref:System.Char.CompareTo%2A> and <xref:System.Char.Equals%2A></span></span>|  
|<span data-ttu-id="13511-153">コード ポイントを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-153">Convert a code point to a string</span></span>|<xref:System.Char.ConvertFromUtf32%2A>|  
|<span data-ttu-id="13511-154">変換、<xref:System.Char>オブジェクトまたはサロゲート ペアの<xref:System.Char>コード ポイントにオブジェクト</span><span class="sxs-lookup"><span data-stu-id="13511-154">Convert a <xref:System.Char> object or a surrogate pair of <xref:System.Char> objects to a code point</span></span>|<span data-ttu-id="13511-155">1 つの文字。 <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="13511-155">For a single character: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span></span><br /><br /> <span data-ttu-id="13511-156">サロゲート ペアまたは文字列の文字の場合。 <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="13511-156">For a surrogate pair or a character in a string: <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span></span>|  
|<span data-ttu-id="13511-157">文字の Unicode カテゴリを取得します。</span><span class="sxs-lookup"><span data-stu-id="13511-157">Get the Unicode category of a character</span></span>|<xref:System.Char.GetUnicodeCategory%2A>|  
|<span data-ttu-id="13511-158">制御文字の文字は、数字、文字、句読点などの特定の Unicode カテゴリでは、かどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="13511-158">Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on</span></span>|<span data-ttu-id="13511-159"><xref:System.Char.IsControl%2A>、 <xref:System.Char.IsDigit%2A>、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLetter%2A>、 <xref:System.Char.IsLetterOrDigit%2A>、 <xref:System.Char.IsLower%2A>、 <xref:System.Char.IsLowSurrogate%2A>、 <xref:System.Char.IsNumber%2A>、 <xref:System.Char.IsPunctuation%2A>、 <xref:System.Char.IsSeparator%2A>、 <xref:System.Char.IsSurrogate%2A>、 <xref:System.Char.IsSurrogatePair%2A>、 <xref:System.Char.IsSymbol%2A>、 <xref:System.Char.IsUpper%2A>、および <xref:System.Char.IsWhiteSpace%2A></span><span class="sxs-lookup"><span data-stu-id="13511-159"><xref:System.Char.IsControl%2A>, <xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>, <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>, <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>, <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, and <xref:System.Char.IsWhiteSpace%2A></span></span>|  
|<span data-ttu-id="13511-160">変換、<xref:System.Char>数値型の数値を表すオブジェクトを</span><span class="sxs-lookup"><span data-stu-id="13511-160">Convert a <xref:System.Char> object that represents a number to a numeric value type</span></span>|<xref:System.Char.GetNumericValue%2A>|  
|<span data-ttu-id="13511-161">文字列内の文字を変換、<xref:System.Char>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="13511-161">Convert a character in a string into a <xref:System.Char> object</span></span>|<span data-ttu-id="13511-162"><xref:System.Char.Parse%2A> および <xref:System.Char.TryParse%2A></span><span class="sxs-lookup"><span data-stu-id="13511-162"><xref:System.Char.Parse%2A> and <xref:System.Char.TryParse%2A></span></span>|  
|<span data-ttu-id="13511-163">変換、<xref:System.Char>オブジェクトを<xref:System.String>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="13511-163">Convert a <xref:System.Char> object to a <xref:System.String> object</span></span>|<xref:System.Char.ToString%2A>|  
|<span data-ttu-id="13511-164">大文字と小文字の変更、<xref:System.Char>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="13511-164">Change the case of a <xref:System.Char> object</span></span>|<span data-ttu-id="13511-165"><xref:System.Char.ToLower%2A>、<xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>、および <xref:System.Char.ToUpperInvariant%2A></span><span class="sxs-lookup"><span data-stu-id="13511-165"><xref:System.Char.ToLower%2A>, <xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>, and <xref:System.Char.ToUpperInvariant%2A></span></span>|  
  
<a name="Interop"></a>   
## <a name="char-values-and-interop"></a><span data-ttu-id="13511-166">Char 値との相互運用機能</span><span class="sxs-lookup"><span data-stu-id="13511-166">Char values and interop</span></span>  
<span data-ttu-id="13511-167">ときに、マネージ<xref:System.Char>Unicode utf-16 でエンコードされたコードの単位として表される型がアンマネージ コードに渡される、相互運用マーシャラーが既定で ANSI に設定する文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-167">When a managed <xref:System.Char> type, which is represented as a Unicode UTF-16 encoded code unit, is passed to unmanaged code, the interop marshaler converts the character set to ANSI by default.</span></span> <span data-ttu-id="13511-168">適用することができます、<xref:System.Runtime.InteropServices.DllImportAttribute>属性をプラットフォーム呼び出しの宣言と<xref:System.Runtime.InteropServices.StructLayoutAttribute>コントロールは、どの文字セット、マーシャ リングする COM 相互運用機能の宣言に属性<xref:System.Char>用途を入力します。</span><span class="sxs-lookup"><span data-stu-id="13511-168">You can apply the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to platform invoke declarations and the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to a COM interop declaration to control which character set a marshaled <xref:System.Char> type uses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-169">次のコード例では、メソッドの一部を示しています<xref:System.Char>です。</span><span class="sxs-lookup"><span data-stu-id="13511-169">The following code example demonstrates some of the methods in <xref:System.Char>.</span></span>  
  
 [!code-cpp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char [Type Level]/CPP/charstructure.cpp#23)]
 [!code-csharp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char [Type Level]/CS/charstructure.cs#23)]
 [!code-vb[System.Char &#91;Type Level&#93;#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char [Type Level]/VB/charstructure.vb#23)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="13511-170">この種類のすべてのメンバーでは、スレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="13511-170">All members of this type are thread safe.</span></span> <span data-ttu-id="13511-171">インスタンスの状態を変更する表示されるメンバーは、新しい値で初期化された新しいインスタンスを実際に返します。</span><span class="sxs-lookup"><span data-stu-id="13511-171">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="13511-172">として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによってです。</span><span class="sxs-lookup"><span data-stu-id="13511-172">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-173">このインスタンスと指定したオブジェクトまたは値型とを比較し、並べ替え順序において、このインスタンスの位置が指定したオブジェクトまたは値型の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-173">Compares this instance to a specified object or value type, and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or value type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(char value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13511-174">比較対象の <see cref="T:System.Char" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-174">A <see cref="T:System.Char" /> object to compare.</span></span></param>
        <summary><span data-ttu-id="13511-175">このインスタンスと指定した <see cref="T:System.Char" /> オブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Char" /> オブジェクトの前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-175">Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="13511-176">並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="13511-176">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>  
  
 <span data-ttu-id="13511-177"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="13511-177"><list type="table"><listheader><term> Return Value</span></span>  
  
 <span data-ttu-id="13511-178"></term><description>説明</span><span class="sxs-lookup"><span data-stu-id="13511-178"></term><description> Description</span></span>  
  
 <span data-ttu-id="13511-179"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="13511-179"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="13511-180"></term><description> このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="13511-180"></term><description> This instance precedes <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="13511-181"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="13511-181"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="13511-182"></term><description> 並べ替え順序で、このインスタンスの位置が <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="13511-182"></term><description> This instance has the same position in the sort order as <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="13511-183"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="13511-183"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="13511-184"></term><description> このインスタンスの位置は <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="13511-184"></term><description> This instance follows <paramref name="value" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-185">このメソッドを実装する、<xref:System.IComparable%601?displayProperty=nameWithType>インターフェイスし、実行よりもわずかに向上、<xref:System.Char.CompareTo%2A?displayProperty=nameWithType>メソッドに変換があるないため、`value`オブジェクトへのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="13511-185">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Char.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="13511-186">このメソッドによって実行される比較はこのインスタンスのエンコードされた値に基づいて、 `value`、辞書の特性にありません。</span><span class="sxs-lookup"><span data-stu-id="13511-186">The comparison performed by this method is based on the encoded values of this instance and `value`, not their lexicographical characteristics.</span></span>  
  
 <span data-ttu-id="13511-187">場合、<xref:System.Char.CompareTo%2A>メソッド パラメーターの型がビット数が少ない範囲が狭い、インスタンスの型よりも一部のプログラミング言語が多くのビット値にパラメーターの値を変換する暗黙の拡大変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="13511-187">If the <xref:System.Char.CompareTo%2A> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</span></span>  
  
 <span data-ttu-id="13511-188">たとえば、インスタンスの型が<xref:System.Int32>パラメーターの型と<xref:System.Byte>です。</span><span class="sxs-lookup"><span data-stu-id="13511-188">For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>.</span></span> <span data-ttu-id="13511-189">Microsoft c# コンパイラは、パラメーターの値を表す命令を生成、<xref:System.Int32>オブジェクトを生成、<xref:System.Int32.CompareTo%2A?displayProperty=nameWithType>の値を比較するメソッド、<xref:System.Int32>インスタンスおよび<xref:System.Int32>パラメーター形式です。</span><span class="sxs-lookup"><span data-stu-id="13511-189">The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.</span></span>  
  
 <span data-ttu-id="13511-190">通常は、暗黙の拡大変換は、数値型で実行されます。</span><span class="sxs-lookup"><span data-stu-id="13511-190">Typically, implicit widening conversions are performed on numeric types.</span></span> <span data-ttu-id="13511-191">コンパイラが拡大変換を実行するかどうかを決定する、プログラミング言語のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="13511-191">Consult your programming language's documentation to determine if its compiler performs widening conversions.</span></span> <span data-ttu-id="13511-192">コンパイラが、パラメーターのボックスを起動する命令を生成する、インスタンスとパラメーター型が一致しないと適切な変換が使用できない場合、<xref:System.Char.CompareTo%2A>を受け取るオーバー ロード、<xref:System.Object>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="13511-192">If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <xref:System.Char.CompareTo%2A> overload that takes an <xref:System.Object> parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-193">次のコード例に示しますジェネリックと非ジェネリック バージョンの`CompareTo`いくつかの値と参照型のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-193">The following code example demonstrates generic and non-generic versions of the `CompareTo` method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13511-194">このインスタンスと比較するオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13511-194">An object to compare this instance to, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="13511-195">このインスタンスと指定したオブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Object" /> の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-195">Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="13511-196">並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="13511-196">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>  
  
 <span data-ttu-id="13511-197"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="13511-197"><list type="table"><listheader><term> Return Value</span></span>  
  
 <span data-ttu-id="13511-198"></term><description>説明</span><span class="sxs-lookup"><span data-stu-id="13511-198"></term><description> Description</span></span>  
  
 <span data-ttu-id="13511-199"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="13511-199"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="13511-200"></term><description> このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="13511-200"></term><description> This instance precedes <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="13511-201"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="13511-201"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="13511-202"></term><description> 並べ替え順序で、このインスタンスの位置が <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="13511-202"></term><description> This instance has the same position in the sort order as <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="13511-203"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="13511-203"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="13511-204"></term><description> このインスタンスの位置は <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="13511-204"></term><description> This instance follows <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="13511-205">- または -</span><span class="sxs-lookup"><span data-stu-id="13511-205">-or-</span></span>  
  
 <span data-ttu-id="13511-206"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-206"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-207"><xref:System.Char.CompareTo%2A>メソッドを実装して、<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="13511-207">The <xref:System.Char.CompareTo%2A> method implements the <xref:System.IComparable> interface.</span></span>  
  
 <span data-ttu-id="13511-208">`value`パラメーターでなければなりません`null`またはのインスタンス<xref:System.Char>です。 それ以外の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="13511-208">The `value` parameter must be `null` or an instance of <xref:System.Char>; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="13511-209">このメソッドによって実行される比較はこのインスタンスのエンコードされた値に基づいて、 `value`、辞書の特性に限りません。</span><span class="sxs-lookup"><span data-stu-id="13511-209">The comparison performed by this method is based on the encoded values of this instance and `value`, not necessarily their lexicographical characteristics.</span></span> <span data-ttu-id="13511-210">任意のインスタンス<xref:System.Char>、その値に関係なくが大きいと見なされますより`null`です。</span><span class="sxs-lookup"><span data-stu-id="13511-210">Any instance of <xref:System.Char>, regardless of its value, is considered greater than `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-211">次のコード例を示します<xref:System.Char.CompareTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-211">The following code example demonstrates <xref:System.Char.CompareTo%2A>.</span></span>  
  
 [!code-cpp[System.Char.CompareTo#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.CompareTo/CPP/compareto.cpp#19)]
 [!code-csharp[System.Char.CompareTo#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.CompareTo/CS/compareto.cs#19)]
 [!code-vb[System.Char.CompareTo#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.CompareTo/VB/compareto.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="13511-212"><paramref name="value" /> は <see cref="T:System.Char" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="13511-212"><paramref name="value" /> is not a <see cref="T:System.Char" /> object.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFromUtf32">
      <MemberSignature Language="C#" Value="public static string ConvertFromUtf32 (int utf32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ConvertFromUtf32(int32 utf32) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertFromUtf32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertFromUtf32 (utf32 As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ConvertFromUtf32(int utf32);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf32" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf32"><span data-ttu-id="13511-213">21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="13511-213">A 21-bit Unicode code point.</span></span></param>
        <summary><span data-ttu-id="13511-214">指定された Unicode コード ポイントを UTF-16 エンコードの文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-214">Converts the specified Unicode code point into a UTF-16 encoded string.</span></span></summary>
        <returns><span data-ttu-id="13511-215"><paramref name="utf32" /> パラメーターに指定されたコード ポイントに対応する、単一の <see cref="T:System.Char" /> オブジェクトから成る文字列または <see cref="T:System.Char" /> オブジェクトのサロゲート ペアから成る文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-215">A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-216">このメソッドを使用して、メソッドなど、文字列をテストする前に、21 ビット Unicode コード ポイントを utf-16 でエンコードされた文字列に変換<xref:System.Char.IsLowSurrogate%28System.Char%29>と<xref:System.Char.IsHighSurrogate%28System.Char%29>です。</span><span class="sxs-lookup"><span data-stu-id="13511-216">Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <xref:System.Char.IsLowSurrogate%28System.Char%29> and <xref:System.Char.IsHighSurrogate%28System.Char%29>.</span></span>  
  
 <span data-ttu-id="13511-217">有効なコード ポイントの外側、平面 (bmp: Basic Multilingual) は、常に有効なサロゲート ペアを生成します。</span><span class="sxs-lookup"><span data-stu-id="13511-217">A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair.</span></span> <span data-ttu-id="13511-218">ただし、BMP 内の有効なコード ポイントが生成されない Unicode 標準に従って有効な結果の変換で言語的な処理が使用されていないためです。</span><span class="sxs-lookup"><span data-stu-id="13511-218">However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion.</span></span> <span data-ttu-id="13511-219">そのため、使用して、<xref:System.Text.UTF32Encoding?displayProperty=nameWithType>に変換するクラスでは、utf-32 データを一括一括 utf-16 データにします。</span><span class="sxs-lookup"><span data-stu-id="13511-219">For that reason, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class to convert bulk UTF-32 data into bulk UTF-16 data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-220">次のコード例を示しています、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-220">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-221"><paramref name="utf32" /> は U+0 から U+10FFFF までの範囲の有効な 21 ビット Unicode コード ポイントではありません。これには、U+D800 から U+DFFF までの範囲のサロゲート ペアは含まれません。</span><span class="sxs-lookup"><span data-stu-id="13511-221"><paramref name="utf32" /> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</span></span></exception>
        <altmember cref="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertToUtf32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-222">UTF-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-222">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (highSurrogate As Char, lowSurrogate As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(char highSurrogate, char lowSurrogate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="13511-223">上位サロゲートのコード単位 (U+D800 から U+DBFF までのコード単位)。</span><span class="sxs-lookup"><span data-stu-id="13511-223">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="13511-224">下位サロゲートのコード単位 (U+DC00 から U+DFFF までのコード単位)。</span><span class="sxs-lookup"><span data-stu-id="13511-224">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</span></span></param>
        <summary><span data-ttu-id="13511-225">UTF-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-225">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="13511-226"><paramref name="highSurrogate" /> パラメーターおよび <paramref name="lowSurrogate" /> パラメーターによって表される 21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="13511-226">The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-227">サロゲート ペアを 21 ビット Unicode コード ポイントに変換するのにには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="13511-227">Use this method to convert a surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="13511-228">Utf-32 データに utf-16 データに変換する、<xref:System.Text.UTF32Encoding?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="13511-228">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="13511-229">通常は、utf-16 エンコードと、16 ビット コードの単位として 1 つの Unicode 文字を表します。</span><span class="sxs-lookup"><span data-stu-id="13511-229">Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit.</span></span> <span data-ttu-id="13511-230">ただし、2 つの 16 ビットのコード単位として表現されている 1 つの抽象文字を許可するサロゲート ペアもサポートします。</span><span class="sxs-lookup"><span data-stu-id="13511-230">However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units.</span></span> <span data-ttu-id="13511-231">これらの 2 つ<xref:System.Char>オブジェクトは、その範囲の最初の (高) サロゲート U+DBFF には、u+d800 から U+DFFF の 2 つ目の (低) のサロゲートを u+dc00 からにコード単位に必要があります。</span><span class="sxs-lookup"><span data-stu-id="13511-231">These two <xref:System.Char> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate.</span></span> <span data-ttu-id="13511-232">サロゲート ペアは、utf-16 でのみサポートされますエンコードします。</span><span class="sxs-lookup"><span data-stu-id="13511-232">Surrogate pairs are supported only by UTF-16 encoding.</span></span> <span data-ttu-id="13511-233">このメソッドは、utf-32 エンコーディングを使用する文字に変換する utf-16 サロゲート ペアで表される文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="13511-233">This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-234">次のコード例を示しています、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-234">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-235"><paramref name="highSurrogate" /> が U+D800 から U+DBFF までの範囲内にないか、または <paramref name="lowSurrogate" /> が U+DC00 から U+DFFF までの範囲内にありません。</span><span class="sxs-lookup"><span data-stu-id="13511-235"><paramref name="highSurrogate" /> is not in the range U+D800 through U+DBFF, or <paramref name="lowSurrogate" /> is not in the range U+DC00 through U+DFFF.</span></span></exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-236">文字またはサロゲート ペアを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-236">A string that contains a character or surrogate pair.</span></span></param>
        <param name="index"><span data-ttu-id="13511-237"><c>s</c> に含まれる文字またはサロゲート ペアのインデックス位置。</span><span class="sxs-lookup"><span data-stu-id="13511-237">The index position of the character or surrogate pair in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-238">文字列中の指定位置にある UTF-16 エンコード文字またはサロゲート ペアの値を、Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-238">Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="13511-239"><paramref name="s" /> パラメーター内の、<paramref name="index" /> パラメーターによって指定された位置にある文字またはサロゲート ペアが表す、21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="13511-239">The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-240">このメソッドを使用して、文字またはサロゲート ペアを 21 ビット Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-240">Use this method to convert a character or surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="13511-241">Utf-32 データに utf-16 データに変換する、<xref:System.Text.UTF32Encoding?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="13511-241">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-242">次のコード例を示しています、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-242">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-243"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-243"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-244"><paramref name="index" /> が、<paramref name="s" /> 内にない位置を示しています。</span><span class="sxs-lookup"><span data-stu-id="13511-244"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13511-245">指定されたインデックスの位置には、サロゲート ペアが含まれています。ペアの最初の文字が有効な上位サロゲートではないか、または 2 番目の文字が有効な下位サロゲートではありません。</span><span class="sxs-lookup"><span data-stu-id="13511-245">The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</span></span></exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-246">対象のインスタンスが、指定したオブジェクトまたは <see cref="T:System.Char" /> 値に等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="13511-246">Returns a value that indicates whether this instance is equal to a specified object or <see cref="T:System.Char" /> value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (char obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(char obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(char obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="13511-247">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-247">An object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="13511-248">対象のインスタンスが、指定した <see cref="T:System.Char" /> オブジェクトに等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="13511-248">Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-249"><paramref name="obj" /> パラメーターがこのインスタンスの値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-249"><see langword="true" /> if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-250">このメソッドを実装する、<xref:System.IEquatable%601?displayProperty=nameWithType>インターフェイス、および実行よりもわずかに向上<xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType>ボックス化を解除する必要はありませんので、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="13511-250">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> because it does not need to unbox the `obj` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="13511-251">このインスタンスと比較するオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13511-251">An object to compare with this instance or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="13511-252">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="13511-252">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-253"><paramref name="obj" /> が <see cref="T:System.Char" /> のインスタンスで、このインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-253"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-254">このメソッドによって実行される比較はこのインスタンスのエンコードされた値に基づいて、 `obj`、辞書の特性に限りません。</span><span class="sxs-lookup"><span data-stu-id="13511-254">The comparison performed by this method is based on the encoded values of this instance and `obj`, not necessarily their lexicographical characteristics.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-255">次のコード例を示します<xref:System.Char.Equals%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-255">The following code example demonstrates <xref:System.Char.Equals%2A>.</span></span>  
  
 [!code-cpp[System.Char.Equals#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Equals/CPP/equals.cpp#20)]
 [!code-csharp[System.Char.Equals#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Equals/CS/equals.cs#20)]
 [!code-vb[System.Char.Equals#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Equals/VB/equals.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13511-256">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="13511-256">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="13511-257">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="13511-257">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-258">指定された Unicode 文字の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-258">Converts a specified numeric Unicode character to a double-precision floating-point number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (c As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-259">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-259">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="13511-260">指定された Unicode の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-260">Converts the specified numeric Unicode character to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="13511-261">この文字が数字を表す場合は <paramref name="c" />  の数値。それ以外の場合は -1.0。</span><span class="sxs-lookup"><span data-stu-id="13511-261">The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-262">`c`パラメーターである必要があります、<xref:System.Char>数値の形式です。</span><span class="sxs-lookup"><span data-stu-id="13511-262">The `c` parameter must be the <xref:System.Char> representation of a numeric value.</span></span> <span data-ttu-id="13511-263">たとえば場合、`c`が「5」の場合、戻り値は 5 です。</span><span class="sxs-lookup"><span data-stu-id="13511-263">For example, if `c` is "5", the return value is 5.</span></span> <span data-ttu-id="13511-264">ただし場合、 `c` "z"は、戻り値は-1.0。</span><span class="sxs-lookup"><span data-stu-id="13511-264">However, if `c` is "z", the return value is -1.0.</span></span>  
  
 <span data-ttu-id="13511-265">次のいずれかのメンバーである場合にのみ、文字が、関連付けられた数値の値を持つ<xref:System.Globalization.UnicodeCategory>カテゴリ: `DecimalDigitNumber`、 `LetterNumber`、または`OtherNumber`です。</span><span class="sxs-lookup"><span data-stu-id="13511-265">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>  
  
 <span data-ttu-id="13511-266"><xref:System.Char.GetNumericValue%2A>メソッドと見なします`c`単一言語の文字に対応しており、その文字が 10 進数字に変換できるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="13511-266">The <xref:System.Char.GetNumericValue%2A> method assumes that `c` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit.</span></span> <span data-ttu-id="13511-267">ただし、Unicode 規格の一部の数値が 2 で表されます<xref:System.Char>サロゲート ペアを形成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-267">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="13511-268">たとえば、番号付けシステム エーゲは U +0 10133 を通じて 10107 U +0 のコード ポイントで構成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-268">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="13511-269">次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="13511-269">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="13511-270">例から出力として、<xref:System.Char.GetNumericValue%28System.Char%29>上位サロゲートまたは下位サロゲートのこの文字のいずれかが渡された場合、メソッドは-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="13511-270">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</span></span>  
  
 [!code-csharp[System.Char.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#2)]
 [!code-vb[System.Char.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="13511-271">次の例で<xref:System.Char.GetNumericValue%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-271">The following example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-272"><see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="13511-272">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="13511-273"><c>s</c> 内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="13511-273">The character position in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-274">指定した文字列の指定位置にある Unicode の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-274">Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="13511-275">この文字が数字の場合は、<paramref name="index" /> の <paramref name="s" /> の位置のこの文字の数値。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="13511-275">The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-276">`s`パラメーターが数値の文字列形式にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="13511-276">The `s` parameter must be the string representation of a numeric value.</span></span> <span data-ttu-id="13511-277">たとえば場合、位置にある文字`index`で`s`が「5」の場合、戻り値は 5 です。</span><span class="sxs-lookup"><span data-stu-id="13511-277">For example, if the character at position `index` in `s` is "5", the return value is 5.</span></span> <span data-ttu-id="13511-278">ただし場合、文字位置にある`index`で`s`"z"は、戻り値は-1。</span><span class="sxs-lookup"><span data-stu-id="13511-278">However, if the character at position `index` in `s` is "z", the return value is -1.</span></span>  
  
 <span data-ttu-id="13511-279">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-279">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-280">次のいずれかのメンバーである場合にのみ、文字が、関連付けられた数値の値を持つ<xref:System.Globalization.UnicodeCategory>カテゴリ: `DecimalDigitNumber`、 `LetterNumber`、または`OtherNumber`です。</span><span class="sxs-lookup"><span data-stu-id="13511-280">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>  
  
 <span data-ttu-id="13511-281">場合、<xref:System.Char>オブジェクト位置にある`index`、有効なサロゲート ペアの最初の文字、<xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29>メソッドは、サロゲート ペアが数字を形成するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="13511-281">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="13511-282">たとえば、番号付けシステム エーゲは U +0 10133 を通じて 10107 U +0 のコード ポイントで構成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-282">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="13511-283">次の例では、 <xref:System.Char.ConvertFromUtf32%2A> Aegean の個々 の数を表す文字列をインスタンス化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="13511-283">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number.</span></span> <span data-ttu-id="13511-284">例から出力として、 <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> Aegean 数の上位サロゲート渡される場合、メソッドが適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="13511-284">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number.</span></span> <span data-ttu-id="13511-285">ただし、下位サロゲート、渡される場合メソッド分離に下位サロゲートのみを考慮し、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="13511-285">However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</span></span>  
  
 [!code-csharp[System.Char.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#3)]
 [!code-vb[System.Char.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="13511-286">次のコード例を示します<xref:System.Char.GetNumericValue%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-286">The following code example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-287"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-287"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-288"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-288"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13511-289"><see cref="T:System.TypeCode" /> 値型の <see cref="T:System.Char" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="13511-289">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</span></span></summary>
        <returns><span data-ttu-id="13511-290">列挙型定数 <see cref="F:System.TypeCode.Char" />。</span><span class="sxs-lookup"><span data-stu-id="13511-290">The enumerated constant, <see cref="F:System.TypeCode.Char" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-291">Unicode 文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="13511-291">Categorizes a Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (c As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-292">分類する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-292">The Unicode character to categorize.</span></span></param>
        <summary><span data-ttu-id="13511-293">指定された Unicode 文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="13511-293">Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="13511-294"><paramref name="c" /> が含まれているグループを識別する <see cref="T:System.Globalization.UnicodeCategory" /> 値。</span><span class="sxs-lookup"><span data-stu-id="13511-294">A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-295"><xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは常に返しません同じ<xref:System.Globalization.UnicodeCategory>値として、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドの特定の文字をパラメーターとして渡されるとします。</span><span class="sxs-lookup"><span data-stu-id="13511-295">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="13511-296"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドが現在のバージョンの Unicode 標準を反映するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="13511-296">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="13511-297">これに対し、ですが、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは通常、Unicode 規格の現在のバージョンを反映して、標準の以前のバージョンに基づく文字のカテゴリを返す可能性がありますまたは旧バージョンとの互換性を保つために、現在の標準からとは異なるカテゴリを返すこと可能性があります。</span><span class="sxs-lookup"><span data-stu-id="13511-297">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="13511-298">その結果、ことをお勧めを使用すること、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドの代わりに<xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="13511-298">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="13511-299">以降で、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字を分類に基づいて[Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)です。</span><span class="sxs-lookup"><span data-stu-id="13511-299">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="13511-300">.NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)です。</span><span class="sxs-lookup"><span data-stu-id="13511-300">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-301">次のコード例を示します<xref:System.Char.GetUnicodeCategory%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-301">The following code example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-302"><see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="13511-302">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="13511-303"><c>s</c> 内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="13511-303">The character position in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-304">指定した文字列の指定位置にある文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="13511-304">Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="13511-305"><see cref="T:System.Globalization.UnicodeCategory" /> の中で <paramref name="index" /> の位置の文字が含まれるグループを識別する <paramref name="s" /> 列挙定数。</span><span class="sxs-lookup"><span data-stu-id="13511-305">A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-306">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-306">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-307"><xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは常に返しません同じ<xref:System.Globalization.UnicodeCategory>値として、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドの特定の文字をパラメーターとして渡されるとします。</span><span class="sxs-lookup"><span data-stu-id="13511-307">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="13511-308"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドが現在のバージョンの Unicode 標準を反映するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="13511-308">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="13511-309">これに対し、ですが、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは通常、Unicode 規格の現在のバージョンを反映して、標準の以前のバージョンに基づく文字のカテゴリを返す可能性がありますまたは旧バージョンとの互換性を保つために、現在の標準からとは異なるカテゴリを返すこと可能性があります。</span><span class="sxs-lookup"><span data-stu-id="13511-309">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="13511-310">その結果、ことをお勧めを使用すること、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドの代わりに<xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="13511-310">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="13511-311">以降で、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字を分類に基づいて[Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)です。</span><span class="sxs-lookup"><span data-stu-id="13511-311">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="13511-312">.NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)です。</span><span class="sxs-lookup"><span data-stu-id="13511-312">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-313">次の例で<xref:System.Char.GetUnicodeCategory%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-313">The following example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-314"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-314"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-315"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-315"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsControl">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-316">指定した Unicode 文字が、制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-316">Indicates whether a specified Unicode character is categorized as a control character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-317">制御文字が書式設定および ACK、BEL、CR、FF、LF、VT. などその他の非印刷文字</span><span class="sxs-lookup"><span data-stu-id="13511-317">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="13511-318">Unicode 規格と制御文字を \U009F に \U0080 \U001F、\U007F でに \U0000 から、コード ポイントが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="13511-318">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="13511-319">Unicode 標準に従ってこれらの値は、使用がそれ以外の場合アプリケーションによって定義されている場合を除き、制御文字として解釈するは。</span><span class="sxs-lookup"><span data-stu-id="13511-319">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="13511-320">メンバーである有効なコントロール文字、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-320">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-321">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-321">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-322">指定した Unicode 文字が、制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-322">Indicates whether the specified Unicode character is categorized as a control character.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-323"><paramref name="c" /> が制御文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-323"><see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-324">制御文字が書式設定および ACK、BEL、CR、FF、LF、VT. などその他の非印刷文字</span><span class="sxs-lookup"><span data-stu-id="13511-324">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="13511-325">T、Unicode 規格と制御文字を \U009F に \U0080 \U001F、\U007F でに \U0000 から、コード ポイントが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="13511-325">T The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="13511-326">Unicode 標準に従ってこれらの値は、使用がそれ以外の場合アプリケーションによって定義されている場合を除き、制御文字として解釈するは。</span><span class="sxs-lookup"><span data-stu-id="13511-326">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="13511-327">メンバーである有効なコントロール文字、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-327">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-328">次の例では、各コントロールの文字の Unicode コード ポイントが一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="13511-328">The following example lists the Unicode code point of each of the control characters.</span></span>  
  
 [!code-cpp[System.Char.IsControl#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol1.cpp#1)]
 [!code-csharp[System.Char.IsControl#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl1.cs#1)]
 [!code-vb[System.Char.IsControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-329">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-329">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-330"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-330">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-331">指定した文字列の指定位置にある文字が制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-331">Indicates whether the character at the specified position in a specified string is categorized as a control character.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-332"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が制御文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-332"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-333">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-333">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-334">制御文字が書式設定および ACK、BEL、CR、FF、LF、VT. などその他の非印刷文字</span><span class="sxs-lookup"><span data-stu-id="13511-334">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="13511-335">Unicode 規格と制御文字を \U009F に \U0080 \U001F、\U007F でに \U0000 から、コード ポイントが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="13511-335">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="13511-336">Unicode 標準に従ってこれらの値は、使用がそれ以外の場合アプリケーションによって定義されている場合を除き、制御文字として解釈するは。</span><span class="sxs-lookup"><span data-stu-id="13511-336">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="13511-337">メンバーである有効なコントロール文字、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-337">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-338">次の例では、文字列の文字を列挙し、いずれかが制御文字であるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="13511-338">The following example enumerates the characters in a string and determines whether any are control characters.</span></span>  
  
 [!code-cpp[System.Char.IsControl#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol2.cpp#2)]
 [!code-csharp[System.Char.IsControl#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl2.cs#2)]
 [!code-vb[System.Char.IsControl#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-339"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-339"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-340"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-340"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-341">Unicode 文字が 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-341">Indicates whether a Unicode character is categorized as a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-342">有効な数字のメンバーである、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-342">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-343">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-343">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-344">指定した Unicode 文字が、10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-344">Indicates whether the specified Unicode character is categorized as a decimal digit.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-345"><paramref name="c" /> が 10 進数の数字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-345"><see langword="true" /> if <paramref name="c" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-346">このメソッドを判断するかどうか、<xref:System.Char>基数 10 の数字です。</span><span class="sxs-lookup"><span data-stu-id="13511-346">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="13511-347">これとは対照的<xref:System.Char.IsNumber%2A>を決定するかどうか、`Char`数値 Unicode カテゴリのです。</span><span class="sxs-lookup"><span data-stu-id="13511-347">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a `Char` is of any numeric Unicode category.</span></span> <span data-ttu-id="13511-348">番号には、分数、添字、上付き文字、ローマ数字、通貨分子、丸付き数字、およびスクリプトに固有の数字などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-348">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>  
  
 <span data-ttu-id="13511-349">有効な数字のメンバーである、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-349">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-350">次のコード例を示します<xref:System.Char.IsDigit%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-350">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-351">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-351">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-352"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-352">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-353">指定した文字列の指定位置にある文字が 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-353">Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-354"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が 10 進数の数字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-354"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-355">このメソッドを判断するかどうか、<xref:System.Char>基数 10 の数字です。</span><span class="sxs-lookup"><span data-stu-id="13511-355">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="13511-356">これとは対照的<xref:System.Char.IsNumber%2A>を決定するかどうか、<xref:System.Char>数値 Unicode カテゴリのです。</span><span class="sxs-lookup"><span data-stu-id="13511-356">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="13511-357">番号には、分数、添字、上付き文字、ローマ数字、通貨分子、丸付き数字、およびスクリプトに固有の数字などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-357">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>  
  
 <span data-ttu-id="13511-358">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-358">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-359">有効な数字のメンバーである、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-359">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-360">次のコード例を示します<xref:System.Char.IsDigit%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-360">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-361"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-361"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-362"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-362"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsHighSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-363">指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-363">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-364">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-364">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-365">指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-365">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-366"><paramref name="c" /> パラメーターの数値が U+D800 から U+DBFF の範囲内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-366"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-367">16 ビットのコード ポイントを使用して単一の文字を表す、に加えて utf-16 エンコード文字が許可されて抽象表現されている 2 つの 16 ビットのコード ポイントを使用して、これと呼ばれるサロゲート ペア。</span><span class="sxs-lookup"><span data-stu-id="13511-367">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="13511-368">このペアの最初の要素は、高のサロゲートです。</span><span class="sxs-lookup"><span data-stu-id="13511-368">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="13511-369">そのコード ポイントの範囲は、u+d800 から U+DBFF です。</span><span class="sxs-lookup"><span data-stu-id="13511-369">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="13511-370">個々 のサロゲートはそれ自体以外の解釈がありません。サロゲート ペアの一部として使用する場合にのみ意味がします。</span><span class="sxs-lookup"><span data-stu-id="13511-370">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-371">次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-371">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-372">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-372">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-373"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-373">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-374">文字列中の指定された位置にある <see cref="T:System.Char" /> オブジェクトが、上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-374">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-375"><paramref name="s" /> パラメーターに指定された文字の数値が U+D800 から U+DBFF の範囲内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-375"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-376">`index`パラメーターは 0 から始まる。</span><span class="sxs-lookup"><span data-stu-id="13511-376">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="13511-377">16 ビットのコード ポイントを使用して単一の文字を表す、に加えて utf-16 エンコード文字が許可されて抽象表現されている 2 つの 16 ビットのコード ポイントを使用して、これと呼ばれるサロゲート ペア。</span><span class="sxs-lookup"><span data-stu-id="13511-377">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="13511-378">このペアの最初の要素は、高のサロゲートです。</span><span class="sxs-lookup"><span data-stu-id="13511-378">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="13511-379">そのコード ポイントの範囲は、u+d800 から U+DBFF です。</span><span class="sxs-lookup"><span data-stu-id="13511-379">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="13511-380">個々 のサロゲートはそれ自体以外の解釈がありません。サロゲート ペアの一部として使用する場合にのみ意味がします。</span><span class="sxs-lookup"><span data-stu-id="13511-380">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-381">次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-381">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-382"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-382"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-383"><paramref name="index" /> が、<paramref name="s" /> 内にない位置を示しています。</span><span class="sxs-lookup"><span data-stu-id="13511-383"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-384">Unicode 文字が Unicode の文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-384">Indicates whether a Unicode character is categorized as a Unicode letter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-385">このメソッドを判断するかどうか、 <xref:System.Char> Unicode 文字の任意のカテゴリのメンバーであります。</span><span class="sxs-lookup"><span data-stu-id="13511-385">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="13511-386">Unicode 文字を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="13511-386">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="13511-387">U+0041 (LATIN CAPITAL LETTER A) U +0 005A 経由などの大文字 (LATIN CAPITAL LETTER Z)、または U +0 0400 (キリル CAPITAL LETTER IE WITH GRAVE) U +0 042F (キリル文字の大文字文字で表されるや) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="13511-387">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="13511-388">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-388">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-389">U +0 0061 (LATIN SMALL LETTER A) U +0 007A 経由などの小文字 (ラテン小さい文字 Z)、または U +0 03AC (ギリシャ語小さい文字アルファ使用トノス) U +0 03CE を通じて (ギリシャ語小さい文字オメガでトノス)。</span><span class="sxs-lookup"><span data-stu-id="13511-389">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="13511-390">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-390">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-391">タイトルの大文字と小文字、U + 01 C 5 など (ラテン CAPITAL LETTER D の小さい文字 Z でキャロン) または U +0 1FFC (ギリシャ語 CAPITAL LETTER オメガで PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="13511-391">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="13511-392">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-392">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-393">U +0 02B0 などの修飾子 (修飾子文字の小さな H) U +0 02C 1 (修飾子文字 REVERSED GLOTTAL 停止)、または U +0 1D2C (修飾子文字の大文字 A) U +0 1D 61 (修飾子文字の小さなカイ) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="13511-393">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="13511-394">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-394">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-395">U + 05 D 0 (ヘブライ語文字 ALEF) U +0 05EA を通じてなどその他の文字 (ヘブライ語文字 TAV) U +0 0621 (アラビア語文字 HAMZA) U +0 063A を通じて (アラビア語文字 GHAIN)、または U +0 4E00 (\<CJK 漢字、最初 >) U +0 9 FC 3 を通じて (\<CJK 漢字、最後 >)。</span><span class="sxs-lookup"><span data-stu-id="13511-395">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="13511-396">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-396">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-397">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-397">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-398">指定した Unicode 文字が Unicode 文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-398">Indicates whether the specified Unicode character is categorized as a Unicode letter.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-399"><see langword="true" /> が文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-399"><see langword="true" /> if <paramref name="c" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-400">このメソッドを判断するかどうか、 <xref:System.Char> Unicode 文字の任意のカテゴリのメンバーであります。</span><span class="sxs-lookup"><span data-stu-id="13511-400">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="13511-401">Unicode 文字を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="13511-401">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="13511-402">U+0041 (LATIN CAPITAL LETTER A) U +0 005A 経由などの大文字 (LATIN CAPITAL LETTER Z)、または U +0 0400 (キリル CAPITAL LETTER IE WITH GRAVE) U +0 042F (キリル文字の大文字文字で表されるや) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="13511-402">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="13511-403">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-403">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-404">U +0 0061 (LATIN SMALL LETTER A) U +0 007A 経由などの小文字 (ラテン小さい文字 Z)、または U +0 03AC (ギリシャ語小さい文字アルファ使用トノス) U +0 03CE を通じて (ギリシャ語小さい文字オメガでトノス)。</span><span class="sxs-lookup"><span data-stu-id="13511-404">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="13511-405">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-405">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-406">タイトルの大文字と小文字、U + 01 C 5 など (ラテン CAPITAL LETTER D の小さい文字 Z でキャロン) または U +0 1FFC (ギリシャ語 CAPITAL LETTER オメガで PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="13511-406">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="13511-407">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-407">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-408">U +0 02B0 などの修飾子 (修飾子文字の小さな H) U +0 02C 1 (修飾子文字 REVERSED GLOTTAL 停止)、または U +0 1D2C (修飾子文字の大文字 A) U +0 1D 61 (修飾子文字の小さなカイ) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="13511-408">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="13511-409">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-409">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-410">U + 05 D 0 (ヘブライ語文字 ALEF) U +0 05EA を通じてなどその他の文字 (ヘブライ語文字 TAV) U +0 0621 (アラビア語文字 HAMZA) U +0 063A を通じて (アラビア語文字 GHAIN)、または U +0 4E00 (\<CJK 漢字、最初 >) U +0 9 FC 3 を通じて (\<CJK 漢字、最後 >)。</span><span class="sxs-lookup"><span data-stu-id="13511-410">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="13511-411">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-411">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-412">次のコード例を示します<xref:System.Char.IsLetter%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-412">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-413">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-413">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-414"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-414">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-415">指定した文字列の指定位置にある文字が、Unicode 文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-415">Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-416"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-416"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-417">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-417">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-418">このメソッドは、文字列で指定したインデックス位置にある文字の Unicode 文字の任意のカテゴリのメンバーであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="13511-418">This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter.</span></span> <span data-ttu-id="13511-419">Unicode 文字を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="13511-419">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="13511-420">U+0041 (LATIN CAPITAL LETTER A) U +0 005A 経由などの大文字 (LATIN CAPITAL LETTER Z)、または U +0 0400 (キリル CAPITAL LETTER IE WITH GRAVE) U +0 042F (キリル文字の大文字文字で表されるや) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="13511-420">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="13511-421">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-421">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-422">U +0 0061 (LATIN SMALL LETTER A) U +0 007A 経由などの小文字 (ラテン小さい文字 Z)、または U +0 03AC (ギリシャ語小さい文字アルファ使用トノス) U +0 03CE を通じて (ギリシャ語小さい文字オメガでトノス)。</span><span class="sxs-lookup"><span data-stu-id="13511-422">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="13511-423">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-423">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-424">タイトルの大文字と小文字、U + 01 C 5 など (ラテン CAPITAL LETTER D の小さい文字 Z でキャロン) または U +0 1FFC (ギリシャ語 CAPITAL LETTER オメガで PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="13511-424">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="13511-425">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-425">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-426">U +0 02B0 などの修飾子 (修飾子文字の小さな H) U +0 02C 1 (修飾子文字 REVERSED GLOTTAL 停止)、または U +0 1D2C (修飾子文字の大文字 A) U +0 1D 61 (修飾子文字の小さなカイ) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="13511-426">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="13511-427">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-427">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="13511-428">U + 05 D 0 (ヘブライ語文字 ALEF) U +0 05EA を通じてなどその他の文字 (ヘブライ語文字 TAV) U +0 0621 (アラビア語文字 HAMZA) U +0 063A を通じて (アラビア語文字 GHAIN)、または U +0 4E00 (\<CJK 漢字、最初 >) U +0 9 FC 3 を通じて (\<CJK 漢字、最後 >)。</span><span class="sxs-lookup"><span data-stu-id="13511-428">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="13511-429">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-429">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-430">次のコード例を示します<xref:System.Char.IsLetter%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-430">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-431"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-431"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-432"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-432"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetterOrDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-433">Unicode 文字が文字または 10 進数の数字であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-433">Indicates whether a Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-434">有効な文字および 10 進数では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`、 `LowercaseLetter`、 `TitlecaseLetter`、 `ModifierLetter`、 `OtherLetter`、または`DecimalDigitNumber`です。</span><span class="sxs-lookup"><span data-stu-id="13511-434">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-435">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-435">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-436">指定した Unicode 文字が文字または 10 進数の数字なのかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-436">Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-437"><see langword="true" /> が文字または 10 進数の数字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-437"><see langword="true" /> if <paramref name="c" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-438">有効な文字および 10 進数では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`、 `LowercaseLetter`、 `TitlecaseLetter`、 `ModifierLetter`、 `OtherLetter`、または`DecimalDigitNumber`です。</span><span class="sxs-lookup"><span data-stu-id="13511-438">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-439">次のコード例を示します<xref:System.Char.IsLetterOrDigit%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-439">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-440">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-440">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-441"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-441">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-442">指定した文字列の指定位置にある文字が文字または 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-442">Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-443"><see langword="true" /> の <paramref name="index" /> の位置にある文字が文字または 10 進数の数字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-443"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-444">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-444">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-445">有効な文字および 10 進数では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`、 `LowercaseLetter`、 `TitlecaseLetter`、 `ModifierLetter`、 `OtherLetter`、または`DecimalDigitNumber`です。</span><span class="sxs-lookup"><span data-stu-id="13511-445">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-446">次のコード例を示します<xref:System.Char.IsLetterOrDigit%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-446">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-447"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-447"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-448"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-448"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-449">Unicode 文字が小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-449">Indicates whether a Unicode character is categorized as a lowercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-450">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-450">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-451">指定した Unicode 文字が小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-451">Indicates whether the specified Unicode character is categorized as a lowercase letter.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-452"><see langword="true" /> が小文字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-452"><see langword="true" /> if <paramref name="c" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-453">次のカテゴリのメンバーである有効な小文字<xref:System.Globalization.UnicodeCategory>:`LowercaseLetter`です。</span><span class="sxs-lookup"><span data-stu-id="13511-453">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-454">次のコード例を示します<xref:System.Char.IsLower%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-454">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-455">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-455">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-456"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-456">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-457">指定した文字列の指定位置にある文字が、小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-457">Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-458"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が小文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-458"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-459">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-459">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-460">次のカテゴリのメンバーである有効な小文字<xref:System.Globalization.UnicodeCategory>:`LowercaseLetter`です。</span><span class="sxs-lookup"><span data-stu-id="13511-460">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-461">次のコード例を示します<xref:System.Char.IsLower%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-461">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-462"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-462"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-463"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-463"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLowSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-464">指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-464">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-465">評価する文字。</span><span class="sxs-lookup"><span data-stu-id="13511-465">The character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-466">指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-466">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-467"><paramref name="c" /> パラメーターの数値が U+DC00 から U+DFFF の範囲内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-467"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-468">16 ビットのコード ポイントを使用して単一の文字を表す、に加えて utf-16 エンコード文字が許可されて抽象表現されている 2 つの 16 ビットのコード ポイントを使用して、これと呼ばれるサロゲート ペア。</span><span class="sxs-lookup"><span data-stu-id="13511-468">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="13511-469">このペアの 2 番目の要素は、下位のサロゲートです。</span><span class="sxs-lookup"><span data-stu-id="13511-469">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="13511-470">そのコード ポイントの範囲は u+dc00 から U+DFFF です。</span><span class="sxs-lookup"><span data-stu-id="13511-470">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="13511-471">個々 のサロゲートはそれ自体以外の解釈がありません。サロゲート ペアの一部として使用する場合にのみ意味がします。</span><span class="sxs-lookup"><span data-stu-id="13511-471">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-472">次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-472">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-473">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-473">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-474"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-474">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-475">文字列のうち、指定された位置にある <see cref="T:System.Char" /> オブジェクトが、下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-475">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-476"><see langword="true" /> パラメーターに指定された文字の数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-476"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-477">`index`パラメーターは 0 から始まる。</span><span class="sxs-lookup"><span data-stu-id="13511-477">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="13511-478">16 ビットのコード ポイントを使用して単一の文字を表す、に加えて utf-16 エンコード文字が許可されて抽象表現されている 2 つの 16 ビットのコード ポイントを使用して、これと呼ばれるサロゲート ペア。</span><span class="sxs-lookup"><span data-stu-id="13511-478">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="13511-479">このペアの 2 番目の要素は、下位のサロゲートです。</span><span class="sxs-lookup"><span data-stu-id="13511-479">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="13511-480">そのコード ポイントの範囲は u+dc00 から U+DFFF です。</span><span class="sxs-lookup"><span data-stu-id="13511-480">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="13511-481">個々 のサロゲートはそれ自体以外の解釈がありません。サロゲート ペアの一部として使用する場合にのみ意味がします。</span><span class="sxs-lookup"><span data-stu-id="13511-481">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-482">次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-482">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-483"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-483"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-484"><paramref name="index" /> が、<paramref name="s" /> 内にない位置を示しています。</span><span class="sxs-lookup"><span data-stu-id="13511-484"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNumber">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-485">Unicode 文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-485">Indicates whether a Unicode character is categorized as a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-486">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-486">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-487">指定された Unicode 文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-487">Indicates whether the specified Unicode character is categorized as a number.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-488"><paramref name="c" /> が数字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-488"><see langword="true" /> if <paramref name="c" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-489">このメソッドを判断するかどうか、<xref:System.Char>数値 Unicode カテゴリのです。</span><span class="sxs-lookup"><span data-stu-id="13511-489">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="13511-490">桁の数字のほかに、番号には、文字、分数、添字、上付き文字、ローマ数字、通貨分子、および丸付き数字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-490">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="13511-491">このメソッドとは対照的、<xref:System.Char.IsDigit%2A>を決定するメソッドかどうか、<xref:System.Char>基数 10 の数字です。</span><span class="sxs-lookup"><span data-stu-id="13511-491">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="13511-492"><xref:System.Char.IsNumber%28System.Char%29>メソッドは、文字列が (たとえば、メソッドを呼び出して、文字列内の各文字の) の数値の文字から成るかどうかを決定するものではありません。</span><span class="sxs-lookup"><span data-stu-id="13511-492">The <xref:System.Char.IsNumber%28System.Char%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="13511-493">呼び出しのオーバー ロードのいずれかの文字列が数値文字で構成されているかどうかを判断するのには`TryParse`メソッド (など<xref:System.Int32.TryParse%2A?displayProperty=nameWithType>または<xref:System.Double.TryParse%2A?displayProperty=nameWithType>整数または浮動小数点型のです。</span><span class="sxs-lookup"><span data-stu-id="13511-493">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>  
  
 <span data-ttu-id="13511-494">有効な数字のメンバーである、 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>、 <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>、または<xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-494">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>  
  
 <span data-ttu-id="13511-495"><xref:System.Char.IsNumber%28System.Char%29>メソッドと見なします`c`単一言語の文字に対応しており、その文字が数字を表すかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="13511-495">The <xref:System.Char.IsNumber%28System.Char%29> method assumes that `c` corresponds to a single linguistic character and checks whether that character represents a number.</span></span> <span data-ttu-id="13511-496">ただし、Unicode 規格の一部の数値が 2 で表されます<xref:System.Char>サロゲート ペアを形成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-496">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="13511-497">たとえば、番号付けシステム エーゲは U +0 10133 を通じて 10107 U +0 のコード ポイントで構成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-497">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="13511-498">次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="13511-498">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="13511-499">例から出力として、<xref:System.Char.IsNumber%28System.Char%29>メソッドを返します。`false`上位サロゲートまたは下位サロゲートのこの文字のいずれか渡されます。</span><span class="sxs-lookup"><span data-stu-id="13511-499">As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either a high surrogate or a low surrogate of this character.</span></span>  
  
 [!code-csharp[System.Char.IsNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#1)]
 [!code-vb[System.Char.IsNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="13511-500">次の例で<xref:System.Char.IsNumber%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-500">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-501">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-501">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-502"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-502">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-503">指定した文字列の指定位置にある文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-503">Indicates whether the character at the specified position in a specified string is categorized as a number.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-504"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が数字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-504"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-505">このメソッドを判断するかどうか、<xref:System.Char>数値 Unicode カテゴリのです。</span><span class="sxs-lookup"><span data-stu-id="13511-505">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="13511-506">桁の数字のほかに、番号には、文字、分数、添字、上付き文字、ローマ数字、通貨分子、および丸付き数字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-506">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="13511-507">このメソッドとは対照的、<xref:System.Char.IsDigit%2A>を決定するメソッドかどうか、<xref:System.Char>基数 10 の数字です。</span><span class="sxs-lookup"><span data-stu-id="13511-507">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>  
  
 <span data-ttu-id="13511-508">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-508">Character positions in a string are indexed starting from zero.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="13511-509"><xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>メソッドは、文字列が (たとえば、メソッドを呼び出して、文字列内の各文字の) の数値の文字から成るかどうかを決定するものではありません。</span><span class="sxs-lookup"><span data-stu-id="13511-509">The <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="13511-510">呼び出しのオーバー ロードのいずれかの文字列が数値文字で構成されているかどうかを判断するのには`TryParse`メソッド (など<xref:System.Int32.TryParse%2A?displayProperty=nameWithType>または<xref:System.Double.TryParse%2A?displayProperty=nameWithType>整数または浮動小数点型のです。</span><span class="sxs-lookup"><span data-stu-id="13511-510">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>  
  
 <span data-ttu-id="13511-511">有効な数字のメンバーである、 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>、 <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>、または<xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-511">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>  
  
 <span data-ttu-id="13511-512">場合、<xref:System.Char>オブジェクト位置にある`index`、有効なサロゲート ペアの最初の文字、<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>メソッドは、サロゲート ペアが数字を形成するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="13511-512">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="13511-513">たとえば、番号付けシステム エーゲは U +0 10133 を通じて 10107 U +0 のコード ポイントで構成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-513">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="13511-514">次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="13511-514">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="13511-515">例から出力として、<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>メソッドを返します。`true`渡される上位サロゲート AEGEAN 番号 1 の場合。</span><span class="sxs-lookup"><span data-stu-id="13511-515">As the output from the example shows, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method returns `true` if it is passed the high surrogate of AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="13511-516">ただし、これには、下位サロゲートが渡された場合、下位サロゲートのカテゴリのみを考慮し、返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="13511-516">However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns `false`.</span></span>  
  
 [!code-csharp[System.Char.IsNumber#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#2)]
 [!code-vb[System.Char.IsNumber#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="13511-517">次の例で<xref:System.Char.IsNumber%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-517">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-518"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-518"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-519"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-519"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPunctuation">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-520">Unicode 文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-520">Indicates whether a Unicode character is categorized as a punctuation mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-521">有効な区切り記号では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`、 `DashPunctuation`、 `OpenPunctuation`、 `ClosePunctuation`、 `InititalQuotePunctuation`、 `FinalQuotePunctuation`、または`OtherPunctuation`です。</span><span class="sxs-lookup"><span data-stu-id="13511-521">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="13511-522">次の表に、Unicode コード ポイントの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-522">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="13511-523">U + U +0 0023 に 0021</span><span class="sxs-lookup"><span data-stu-id="13511-523">U+0021 to U+0023</span></span>|<span data-ttu-id="13511-524">U +0 060 C と U +0 060 D</span><span class="sxs-lookup"><span data-stu-id="13511-524">U+060C and U+060D</span></span>|<span data-ttu-id="13511-525">U + U +0 180A を 1800</span><span class="sxs-lookup"><span data-stu-id="13511-525">U+1800 to U+180A</span></span>|<span data-ttu-id="13511-526">U + U +0 301F に 3014</span><span class="sxs-lookup"><span data-stu-id="13511-526">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="13511-527">U + U +002 に 0025</span><span class="sxs-lookup"><span data-stu-id="13511-527">U+0025 to U+002A</span></span>|<span data-ttu-id="13511-528">U+061B</span><span class="sxs-lookup"><span data-stu-id="13511-528">U+061B</span></span>|<span data-ttu-id="13511-529">U+1944 および u+1945</span><span class="sxs-lookup"><span data-stu-id="13511-529">U+1944 and U+1945</span></span>|<span data-ttu-id="13511-530">U+3030</span><span class="sxs-lookup"><span data-stu-id="13511-530">U+3030</span></span>|  
|<span data-ttu-id="13511-531">U + 002 C U +0 002F</span><span class="sxs-lookup"><span data-stu-id="13511-531">U+002C to U+002F</span></span>|<span data-ttu-id="13511-532">U +0 061E と U +0 061F</span><span class="sxs-lookup"><span data-stu-id="13511-532">U+061E and U+061F</span></span>|<span data-ttu-id="13511-533">U +0 19DE と U +0 19DF</span><span class="sxs-lookup"><span data-stu-id="13511-533">U+19DE and U+19DF</span></span>|<span data-ttu-id="13511-534">U+303D</span><span class="sxs-lookup"><span data-stu-id="13511-534">U+303D</span></span>|  
|<span data-ttu-id="13511-535">U +0 003A と U +0 003B</span><span class="sxs-lookup"><span data-stu-id="13511-535">U+003A and U+003B</span></span>|<span data-ttu-id="13511-536">U + U +0 方位 066 D に 066A</span><span class="sxs-lookup"><span data-stu-id="13511-536">U+066A to U+066D</span></span>|<span data-ttu-id="13511-537">U +0 1A1E と U +0 1A1F</span><span class="sxs-lookup"><span data-stu-id="13511-537">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="13511-538">U+30A0</span><span class="sxs-lookup"><span data-stu-id="13511-538">U+30A0</span></span>|  
|<span data-ttu-id="13511-539">U +0 003F と U +0 0040</span><span class="sxs-lookup"><span data-stu-id="13511-539">U+003F and U+0040</span></span>|<span data-ttu-id="13511-540">U+06D4</span><span class="sxs-lookup"><span data-stu-id="13511-540">U+06D4</span></span>|<span data-ttu-id="13511-541">U + U +0 1B60 に 1B5A</span><span class="sxs-lookup"><span data-stu-id="13511-541">U+1B5A to U+1B60</span></span>|<span data-ttu-id="13511-542">U+30FB</span><span class="sxs-lookup"><span data-stu-id="13511-542">U+30FB</span></span>|  
|<span data-ttu-id="13511-543">U + U +0 005-D を 005B</span><span class="sxs-lookup"><span data-stu-id="13511-543">U+005B to U+005D</span></span>|<span data-ttu-id="13511-544">U + U +0 070 D に 0700</span><span class="sxs-lookup"><span data-stu-id="13511-544">U+0700 to U+070D</span></span>|<span data-ttu-id="13511-545">U + U +0 2027 に 2010</span><span class="sxs-lookup"><span data-stu-id="13511-545">U+2010 to U+2027</span></span>|<span data-ttu-id="13511-546">U + A874 U + A877 に</span><span class="sxs-lookup"><span data-stu-id="13511-546">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="13511-547">U+005F</span><span class="sxs-lookup"><span data-stu-id="13511-547">U+005F</span></span>|<span data-ttu-id="13511-548">U + U +0 07F9 に 07F7</span><span class="sxs-lookup"><span data-stu-id="13511-548">U+07F7 to U+07F9</span></span>|<span data-ttu-id="13511-549">U+2030 U +0 2043 に</span><span class="sxs-lookup"><span data-stu-id="13511-549">U+2030 to U+2043</span></span>|<span data-ttu-id="13511-550">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="13511-550">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="13511-551">U+007B</span><span class="sxs-lookup"><span data-stu-id="13511-551">U+007B</span></span>|<span data-ttu-id="13511-552">U+0964 および u+0965</span><span class="sxs-lookup"><span data-stu-id="13511-552">U+0964 and U+0965</span></span>|<span data-ttu-id="13511-553">U + U +0 2051 に 2045</span><span class="sxs-lookup"><span data-stu-id="13511-553">U+2045 to U+2051</span></span>|<span data-ttu-id="13511-554">U + FE10 U + FE19 に</span><span class="sxs-lookup"><span data-stu-id="13511-554">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="13511-555">U+007D</span><span class="sxs-lookup"><span data-stu-id="13511-555">U+007D</span></span>|<span data-ttu-id="13511-556">U+0970</span><span class="sxs-lookup"><span data-stu-id="13511-556">U+0970</span></span>|<span data-ttu-id="13511-557">U + U +0 205E に 2053</span><span class="sxs-lookup"><span data-stu-id="13511-557">U+2053 to U+205E</span></span>|<span data-ttu-id="13511-558">U + FE30 U + FE52 に</span><span class="sxs-lookup"><span data-stu-id="13511-558">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="13511-559">U+00A1</span><span class="sxs-lookup"><span data-stu-id="13511-559">U+00A1</span></span>|<span data-ttu-id="13511-560">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="13511-560">U+0DF4</span></span>|<span data-ttu-id="13511-561">U +0 207 D と U +0 207E</span><span class="sxs-lookup"><span data-stu-id="13511-561">U+207D and  U+207E</span></span>|<span data-ttu-id="13511-562">U + FE54 U + FE61 に</span><span class="sxs-lookup"><span data-stu-id="13511-562">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="13511-563">U+00AB</span><span class="sxs-lookup"><span data-stu-id="13511-563">U+00AB</span></span>|<span data-ttu-id="13511-564">U + U +0 0E5B に 0E4F</span><span class="sxs-lookup"><span data-stu-id="13511-564">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="13511-565">U +0 208 D と U +0 208E</span><span class="sxs-lookup"><span data-stu-id="13511-565">U+208D and U+208E</span></span>|<span data-ttu-id="13511-566">U+FE63</span><span class="sxs-lookup"><span data-stu-id="13511-566">U+FE63</span></span>|  
|<span data-ttu-id="13511-567">U+00AD</span><span class="sxs-lookup"><span data-stu-id="13511-567">U+00AD</span></span>|<span data-ttu-id="13511-568">U + U +0 0F12 に 0F04</span><span class="sxs-lookup"><span data-stu-id="13511-568">U+0F04 to U+0F12</span></span>|<span data-ttu-id="13511-569">U +0 の 2329 と 232A</span><span class="sxs-lookup"><span data-stu-id="13511-569">U+2329 and U+232A</span></span>|<span data-ttu-id="13511-570">U+FE68</span><span class="sxs-lookup"><span data-stu-id="13511-570">U+FE68</span></span>|  
|<span data-ttu-id="13511-571">U+00B7</span><span class="sxs-lookup"><span data-stu-id="13511-571">U+00B7</span></span>|<span data-ttu-id="13511-572">U + U +0 0F3D に 0F3A</span><span class="sxs-lookup"><span data-stu-id="13511-572">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="13511-573">U + U +0 2775 に 2768</span><span class="sxs-lookup"><span data-stu-id="13511-573">U+2768 to U+2775</span></span>|<span data-ttu-id="13511-574">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="13511-574">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="13511-575">U+00BB</span><span class="sxs-lookup"><span data-stu-id="13511-575">U+00BB</span></span>|<span data-ttu-id="13511-576">U+0F85</span><span class="sxs-lookup"><span data-stu-id="13511-576">U+0F85</span></span>|<span data-ttu-id="13511-577">U +0 27C 6 に U +0 27C 5</span><span class="sxs-lookup"><span data-stu-id="13511-577">U+27C5 to U+27C6</span></span>|<span data-ttu-id="13511-578">U + FF03 に U + ff 01</span><span class="sxs-lookup"><span data-stu-id="13511-578">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="13511-579">U+00BF</span><span class="sxs-lookup"><span data-stu-id="13511-579">U+00BF</span></span>|<span data-ttu-id="13511-580">U +0 0FD0 と U +0 0FD1</span><span class="sxs-lookup"><span data-stu-id="13511-580">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="13511-581">U + U +0 27EB に 27E6</span><span class="sxs-lookup"><span data-stu-id="13511-581">U+27E6 to U+27EB</span></span>|<span data-ttu-id="13511-582">U + FF05 U + FF0A に</span><span class="sxs-lookup"><span data-stu-id="13511-582">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="13511-583">U+037E</span><span class="sxs-lookup"><span data-stu-id="13511-583">U+037E</span></span>|<span data-ttu-id="13511-584">U + U +0 104F に 104A</span><span class="sxs-lookup"><span data-stu-id="13511-584">U+104A to U+104F</span></span>|<span data-ttu-id="13511-585">U + U +0 2998 に 2983</span><span class="sxs-lookup"><span data-stu-id="13511-585">U+2983 to U+2998</span></span>|<span data-ttu-id="13511-586">U + FF0C U + FF0F に</span><span class="sxs-lookup"><span data-stu-id="13511-586">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="13511-587">U+0387</span><span class="sxs-lookup"><span data-stu-id="13511-587">U+0387</span></span>|<span data-ttu-id="13511-588">U+10FB</span><span class="sxs-lookup"><span data-stu-id="13511-588">U+10FB</span></span>|<span data-ttu-id="13511-589">U +0 29D 8 U +0 29DB を</span><span class="sxs-lookup"><span data-stu-id="13511-589">U+29D8 to U+29DB</span></span>|<span data-ttu-id="13511-590">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="13511-590">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="13511-591">U + U +0 055F に 055A</span><span class="sxs-lookup"><span data-stu-id="13511-591">U+055A to U+055F</span></span>|<span data-ttu-id="13511-592">U + U +0 1368 に 1361</span><span class="sxs-lookup"><span data-stu-id="13511-592">U+1361 to U+1368</span></span>|<span data-ttu-id="13511-593">U +0 29 FC と U +0 29FD</span><span class="sxs-lookup"><span data-stu-id="13511-593">U+29FC and U+29FD</span></span>|<span data-ttu-id="13511-594">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="13511-594">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="13511-595">U +0 の 0589 と 058A</span><span class="sxs-lookup"><span data-stu-id="13511-595">U+0589 and U+058A</span></span>|<span data-ttu-id="13511-596">U +0 166 D と U +0 166E</span><span class="sxs-lookup"><span data-stu-id="13511-596">U+166D and U+166E</span></span>|<span data-ttu-id="13511-597">U + U +0 2CFC に 2CF9</span><span class="sxs-lookup"><span data-stu-id="13511-597">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="13511-598">U + FF3B U + FF3D に</span><span class="sxs-lookup"><span data-stu-id="13511-598">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="13511-599">U+05BE</span><span class="sxs-lookup"><span data-stu-id="13511-599">U+05BE</span></span>|<span data-ttu-id="13511-600">U +0 169B と U +0 169 C</span><span class="sxs-lookup"><span data-stu-id="13511-600">U+169B and U+169C</span></span>|<span data-ttu-id="13511-601">U +0 2CFE と U +0 2CFF</span><span class="sxs-lookup"><span data-stu-id="13511-601">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="13511-602">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="13511-602">U+FF3F</span></span>|  
|<span data-ttu-id="13511-603">U+05C0</span><span class="sxs-lookup"><span data-stu-id="13511-603">U+05C0</span></span>|<span data-ttu-id="13511-604">U + U +0 16ED に 16EB</span><span class="sxs-lookup"><span data-stu-id="13511-604">U+16EB to U+16ED</span></span>|<span data-ttu-id="13511-605">U + U +0 2E17 に 2E00</span><span class="sxs-lookup"><span data-stu-id="13511-605">U+2E00 to U+2E17</span></span>|<span data-ttu-id="13511-606">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="13511-606">U+FF5B</span></span>|  
|<span data-ttu-id="13511-607">U+05C3</span><span class="sxs-lookup"><span data-stu-id="13511-607">U+05C3</span></span>|<span data-ttu-id="13511-608">U+1735 および u+1736</span><span class="sxs-lookup"><span data-stu-id="13511-608">U+1735 and U+1736</span></span>|<span data-ttu-id="13511-609">U +0 2E1C と U +0 2E1D</span><span class="sxs-lookup"><span data-stu-id="13511-609">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="13511-610">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="13511-610">U+FF5D</span></span>|  
|<span data-ttu-id="13511-611">U+05C6</span><span class="sxs-lookup"><span data-stu-id="13511-611">U+05C6</span></span>|<span data-ttu-id="13511-612">U +0 17D 4 U +0 17D 6</span><span class="sxs-lookup"><span data-stu-id="13511-612">U+17D4 to U+17D6</span></span>|<span data-ttu-id="13511-613">U + U +0 3003 に 3001</span><span class="sxs-lookup"><span data-stu-id="13511-613">U+3001 to U+3003</span></span>|<span data-ttu-id="13511-614">U + FF5F U + FF65 に</span><span class="sxs-lookup"><span data-stu-id="13511-614">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="13511-615">U +0 05F3 と U +0 05F4</span><span class="sxs-lookup"><span data-stu-id="13511-615">U+05F3 and U+05F4</span></span>|<span data-ttu-id="13511-616">U +0 17D 8 U +0 17DA を</span><span class="sxs-lookup"><span data-stu-id="13511-616">U+17D8 to U+17DA</span></span>|<span data-ttu-id="13511-617">U + U +0 3011 に 3008</span><span class="sxs-lookup"><span data-stu-id="13511-617">U+3008 to U+3011</span></span>||  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-618">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-618">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-619">指定した Unicode 文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-619">Indicates whether the specified Unicode character is categorized as a punctuation mark.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-620"><see langword="true" /> が区切り記号の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-620"><see langword="true" /> if <paramref name="c" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-621">有効な区切り記号では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`、 `DashPunctuation`、 `OpenPunctuation`、 `ClosePunctuation`、 `InititalQuotePunctuation`、 `FinalQuotePunctuation`、または`OtherPunctuation`です。</span><span class="sxs-lookup"><span data-stu-id="13511-621">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="13511-622">次の表に、Unicode コード ポイントの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-622">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="13511-623">U + U +0 0023 に 0021</span><span class="sxs-lookup"><span data-stu-id="13511-623">U+0021 to U+0023</span></span>|<span data-ttu-id="13511-624">U +0 060 C と U +0 060 D</span><span class="sxs-lookup"><span data-stu-id="13511-624">U+060C and U+060D</span></span>|<span data-ttu-id="13511-625">U + U +0 180A を 1800</span><span class="sxs-lookup"><span data-stu-id="13511-625">U+1800 to U+180A</span></span>|<span data-ttu-id="13511-626">U + U +0 301F に 3014</span><span class="sxs-lookup"><span data-stu-id="13511-626">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="13511-627">U + U +002 に 0025</span><span class="sxs-lookup"><span data-stu-id="13511-627">U+0025 to U+002A</span></span>|<span data-ttu-id="13511-628">U+061B</span><span class="sxs-lookup"><span data-stu-id="13511-628">U+061B</span></span>|<span data-ttu-id="13511-629">U+1944 および u+1945</span><span class="sxs-lookup"><span data-stu-id="13511-629">U+1944 and U+1945</span></span>|<span data-ttu-id="13511-630">U+3030</span><span class="sxs-lookup"><span data-stu-id="13511-630">U+3030</span></span>|  
|<span data-ttu-id="13511-631">U + 002 C U +0 002F</span><span class="sxs-lookup"><span data-stu-id="13511-631">U+002C to U+002F</span></span>|<span data-ttu-id="13511-632">U +0 061E と U +0 061F</span><span class="sxs-lookup"><span data-stu-id="13511-632">U+061E and U+061F</span></span>|<span data-ttu-id="13511-633">U +0 19DE と U +0 19DF</span><span class="sxs-lookup"><span data-stu-id="13511-633">U+19DE and U+19DF</span></span>|<span data-ttu-id="13511-634">U+303D</span><span class="sxs-lookup"><span data-stu-id="13511-634">U+303D</span></span>|  
|<span data-ttu-id="13511-635">U +0 003A と U +0 003B</span><span class="sxs-lookup"><span data-stu-id="13511-635">U+003A and U+003B</span></span>|<span data-ttu-id="13511-636">U + U +0 方位 066 D に 066A</span><span class="sxs-lookup"><span data-stu-id="13511-636">U+066A to U+066D</span></span>|<span data-ttu-id="13511-637">U +0 1A1E と U +0 1A1F</span><span class="sxs-lookup"><span data-stu-id="13511-637">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="13511-638">U+30A0</span><span class="sxs-lookup"><span data-stu-id="13511-638">U+30A0</span></span>|  
|<span data-ttu-id="13511-639">U +0 003F と U +0 0040</span><span class="sxs-lookup"><span data-stu-id="13511-639">U+003F and U+0040</span></span>|<span data-ttu-id="13511-640">U+06D4</span><span class="sxs-lookup"><span data-stu-id="13511-640">U+06D4</span></span>|<span data-ttu-id="13511-641">U + U +0 1B60 に 1B5A</span><span class="sxs-lookup"><span data-stu-id="13511-641">U+1B5A to U+1B60</span></span>|<span data-ttu-id="13511-642">U+30FB</span><span class="sxs-lookup"><span data-stu-id="13511-642">U+30FB</span></span>|  
|<span data-ttu-id="13511-643">U + U +0 005-D を 005B</span><span class="sxs-lookup"><span data-stu-id="13511-643">U+005B to U+005D</span></span>|<span data-ttu-id="13511-644">U + U +0 070 D に 0700</span><span class="sxs-lookup"><span data-stu-id="13511-644">U+0700 to U+070D</span></span>|<span data-ttu-id="13511-645">U + U +0 2027 に 2010</span><span class="sxs-lookup"><span data-stu-id="13511-645">U+2010 to U+2027</span></span>|<span data-ttu-id="13511-646">U + A874 U + A877 に</span><span class="sxs-lookup"><span data-stu-id="13511-646">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="13511-647">U+005F</span><span class="sxs-lookup"><span data-stu-id="13511-647">U+005F</span></span>|<span data-ttu-id="13511-648">U + U +0 07F9 に 07F7</span><span class="sxs-lookup"><span data-stu-id="13511-648">U+07F7 to U+07F9</span></span>|<span data-ttu-id="13511-649">U+2030 U +0 2043 に</span><span class="sxs-lookup"><span data-stu-id="13511-649">U+2030 to U+2043</span></span>|<span data-ttu-id="13511-650">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="13511-650">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="13511-651">U+007B</span><span class="sxs-lookup"><span data-stu-id="13511-651">U+007B</span></span>|<span data-ttu-id="13511-652">U+0964 および u+0965</span><span class="sxs-lookup"><span data-stu-id="13511-652">U+0964 and U+0965</span></span>|<span data-ttu-id="13511-653">U + U +0 2051 に 2045</span><span class="sxs-lookup"><span data-stu-id="13511-653">U+2045 to U+2051</span></span>|<span data-ttu-id="13511-654">U + FE10 U + FE19 に</span><span class="sxs-lookup"><span data-stu-id="13511-654">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="13511-655">U+007D</span><span class="sxs-lookup"><span data-stu-id="13511-655">U+007D</span></span>|<span data-ttu-id="13511-656">U+0970</span><span class="sxs-lookup"><span data-stu-id="13511-656">U+0970</span></span>|<span data-ttu-id="13511-657">U + U +0 205E に 2053</span><span class="sxs-lookup"><span data-stu-id="13511-657">U+2053 to U+205E</span></span>|<span data-ttu-id="13511-658">U + FE30 U + FE52 に</span><span class="sxs-lookup"><span data-stu-id="13511-658">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="13511-659">U+00A1</span><span class="sxs-lookup"><span data-stu-id="13511-659">U+00A1</span></span>|<span data-ttu-id="13511-660">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="13511-660">U+0DF4</span></span>|<span data-ttu-id="13511-661">U +0 207 D と U +0 207E</span><span class="sxs-lookup"><span data-stu-id="13511-661">U+207D and  U+207E</span></span>|<span data-ttu-id="13511-662">U + FE54 U + FE61 に</span><span class="sxs-lookup"><span data-stu-id="13511-662">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="13511-663">U+00AB</span><span class="sxs-lookup"><span data-stu-id="13511-663">U+00AB</span></span>|<span data-ttu-id="13511-664">U + U +0 0E5B に 0E4F</span><span class="sxs-lookup"><span data-stu-id="13511-664">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="13511-665">U +0 208 D と U +0 208E</span><span class="sxs-lookup"><span data-stu-id="13511-665">U+208D and U+208E</span></span>|<span data-ttu-id="13511-666">U+FE63</span><span class="sxs-lookup"><span data-stu-id="13511-666">U+FE63</span></span>|  
|<span data-ttu-id="13511-667">U+00AD</span><span class="sxs-lookup"><span data-stu-id="13511-667">U+00AD</span></span>|<span data-ttu-id="13511-668">U + U +0 0F12 に 0F04</span><span class="sxs-lookup"><span data-stu-id="13511-668">U+0F04 to U+0F12</span></span>|<span data-ttu-id="13511-669">U +0 の 2329 と 232A</span><span class="sxs-lookup"><span data-stu-id="13511-669">U+2329 and U+232A</span></span>|<span data-ttu-id="13511-670">U+FE68</span><span class="sxs-lookup"><span data-stu-id="13511-670">U+FE68</span></span>|  
|<span data-ttu-id="13511-671">U+00B7</span><span class="sxs-lookup"><span data-stu-id="13511-671">U+00B7</span></span>|<span data-ttu-id="13511-672">U + U +0 0F3D に 0F3A</span><span class="sxs-lookup"><span data-stu-id="13511-672">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="13511-673">U + U +0 2775 に 2768</span><span class="sxs-lookup"><span data-stu-id="13511-673">U+2768 to U+2775</span></span>|<span data-ttu-id="13511-674">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="13511-674">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="13511-675">U+00BB</span><span class="sxs-lookup"><span data-stu-id="13511-675">U+00BB</span></span>|<span data-ttu-id="13511-676">U+0F85</span><span class="sxs-lookup"><span data-stu-id="13511-676">U+0F85</span></span>|<span data-ttu-id="13511-677">U +0 27C 6 に U +0 27C 5</span><span class="sxs-lookup"><span data-stu-id="13511-677">U+27C5 to U+27C6</span></span>|<span data-ttu-id="13511-678">U + FF03 に U + ff 01</span><span class="sxs-lookup"><span data-stu-id="13511-678">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="13511-679">U+00BF</span><span class="sxs-lookup"><span data-stu-id="13511-679">U+00BF</span></span>|<span data-ttu-id="13511-680">U +0 0FD0 と U +0 0FD1</span><span class="sxs-lookup"><span data-stu-id="13511-680">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="13511-681">U + U +0 27EB に 27E6</span><span class="sxs-lookup"><span data-stu-id="13511-681">U+27E6 to U+27EB</span></span>|<span data-ttu-id="13511-682">U + FF05 U + FF0A に</span><span class="sxs-lookup"><span data-stu-id="13511-682">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="13511-683">U+037E</span><span class="sxs-lookup"><span data-stu-id="13511-683">U+037E</span></span>|<span data-ttu-id="13511-684">U + U +0 104F に 104A</span><span class="sxs-lookup"><span data-stu-id="13511-684">U+104A to U+104F</span></span>|<span data-ttu-id="13511-685">U + U +0 2998 に 2983</span><span class="sxs-lookup"><span data-stu-id="13511-685">U+2983 to U+2998</span></span>|<span data-ttu-id="13511-686">U + FF0C U + FF0F に</span><span class="sxs-lookup"><span data-stu-id="13511-686">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="13511-687">U+0387</span><span class="sxs-lookup"><span data-stu-id="13511-687">U+0387</span></span>|<span data-ttu-id="13511-688">U+10FB</span><span class="sxs-lookup"><span data-stu-id="13511-688">U+10FB</span></span>|<span data-ttu-id="13511-689">U +0 29D 8 U +0 29DB を</span><span class="sxs-lookup"><span data-stu-id="13511-689">U+29D8 to U+29DB</span></span>|<span data-ttu-id="13511-690">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="13511-690">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="13511-691">U + U +0 055F に 055A</span><span class="sxs-lookup"><span data-stu-id="13511-691">U+055A to U+055F</span></span>|<span data-ttu-id="13511-692">U + U +0 1368 に 1361</span><span class="sxs-lookup"><span data-stu-id="13511-692">U+1361 to U+1368</span></span>|<span data-ttu-id="13511-693">U +0 29 FC と U +0 29FD</span><span class="sxs-lookup"><span data-stu-id="13511-693">U+29FC and U+29FD</span></span>|<span data-ttu-id="13511-694">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="13511-694">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="13511-695">U +0 の 0589 と 058A</span><span class="sxs-lookup"><span data-stu-id="13511-695">U+0589 and U+058A</span></span>|<span data-ttu-id="13511-696">U +0 166 D と U +0 166E</span><span class="sxs-lookup"><span data-stu-id="13511-696">U+166D and U+166E</span></span>|<span data-ttu-id="13511-697">U + U +0 2CFC に 2CF9</span><span class="sxs-lookup"><span data-stu-id="13511-697">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="13511-698">U + FF3B U + FF3D に</span><span class="sxs-lookup"><span data-stu-id="13511-698">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="13511-699">U+05BE</span><span class="sxs-lookup"><span data-stu-id="13511-699">U+05BE</span></span>|<span data-ttu-id="13511-700">U +0 169B と U +0 169 C</span><span class="sxs-lookup"><span data-stu-id="13511-700">U+169B and U+169C</span></span>|<span data-ttu-id="13511-701">U +0 2CFE と U +0 2CFF</span><span class="sxs-lookup"><span data-stu-id="13511-701">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="13511-702">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="13511-702">U+FF3F</span></span>|  
|<span data-ttu-id="13511-703">U+05C0</span><span class="sxs-lookup"><span data-stu-id="13511-703">U+05C0</span></span>|<span data-ttu-id="13511-704">U + U +0 16ED に 16EB</span><span class="sxs-lookup"><span data-stu-id="13511-704">U+16EB to U+16ED</span></span>|<span data-ttu-id="13511-705">U + U +0 2E17 に 2E00</span><span class="sxs-lookup"><span data-stu-id="13511-705">U+2E00 to U+2E17</span></span>|<span data-ttu-id="13511-706">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="13511-706">U+FF5B</span></span>|  
|<span data-ttu-id="13511-707">U+05C3</span><span class="sxs-lookup"><span data-stu-id="13511-707">U+05C3</span></span>|<span data-ttu-id="13511-708">U+1735 および u+1736</span><span class="sxs-lookup"><span data-stu-id="13511-708">U+1735 and U+1736</span></span>|<span data-ttu-id="13511-709">U +0 2E1C と U +0 2E1D</span><span class="sxs-lookup"><span data-stu-id="13511-709">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="13511-710">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="13511-710">U+FF5D</span></span>|  
|<span data-ttu-id="13511-711">U+05C6</span><span class="sxs-lookup"><span data-stu-id="13511-711">U+05C6</span></span>|<span data-ttu-id="13511-712">U +0 17D 4 U +0 17D 6</span><span class="sxs-lookup"><span data-stu-id="13511-712">U+17D4 to U+17D6</span></span>|<span data-ttu-id="13511-713">U + U +0 3003 に 3001</span><span class="sxs-lookup"><span data-stu-id="13511-713">U+3001 to U+3003</span></span>|<span data-ttu-id="13511-714">U + FF5F U + FF65 に</span><span class="sxs-lookup"><span data-stu-id="13511-714">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="13511-715">U +0 05F3 と U +0 05F4</span><span class="sxs-lookup"><span data-stu-id="13511-715">U+05F3 and U+05F4</span></span>|<span data-ttu-id="13511-716">U +0 17D 8 U +0 17DA を</span><span class="sxs-lookup"><span data-stu-id="13511-716">U+17D8 to U+17DA</span></span>|<span data-ttu-id="13511-717">U + U +0 3011 に 3008</span><span class="sxs-lookup"><span data-stu-id="13511-717">U+3008 to U+3011</span></span>||  
  
   
  
## Examples  
 <span data-ttu-id="13511-718">次のコード例を示します<xref:System.Char.IsPunctuation%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-718">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-719">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-719">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-720"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-720">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-721">指定した文字列の指定位置にある文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-721">Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-722"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が区切り記号の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-722"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-723">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-723">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-724">有効な区切り記号では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`、 `DashPunctuation`、 `OpenPunctuation`、 `ClosePunctuation`、 `InititalQuotePunctuation`、 `FinalQuotePunctuation`、または`OtherPunctuation`です。</span><span class="sxs-lookup"><span data-stu-id="13511-724">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="13511-725">次の表に、Unicode コード ポイントの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-725">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="13511-726">U + U +0 0023 に 0021</span><span class="sxs-lookup"><span data-stu-id="13511-726">U+0021 to U+0023</span></span>|<span data-ttu-id="13511-727">U +0 060 C と U +0 060 D</span><span class="sxs-lookup"><span data-stu-id="13511-727">U+060C and U+060D</span></span>|<span data-ttu-id="13511-728">U + U +0 180A を 1800</span><span class="sxs-lookup"><span data-stu-id="13511-728">U+1800 to U+180A</span></span>|<span data-ttu-id="13511-729">U + U +0 301F に 3014</span><span class="sxs-lookup"><span data-stu-id="13511-729">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="13511-730">U + U +002 に 0025</span><span class="sxs-lookup"><span data-stu-id="13511-730">U+0025 to U+002A</span></span>|<span data-ttu-id="13511-731">U+061B</span><span class="sxs-lookup"><span data-stu-id="13511-731">U+061B</span></span>|<span data-ttu-id="13511-732">U+1944 および u+1945</span><span class="sxs-lookup"><span data-stu-id="13511-732">U+1944 and U+1945</span></span>|<span data-ttu-id="13511-733">U+3030</span><span class="sxs-lookup"><span data-stu-id="13511-733">U+3030</span></span>|  
|<span data-ttu-id="13511-734">U + 002 C U +0 002F</span><span class="sxs-lookup"><span data-stu-id="13511-734">U+002C to U+002F</span></span>|<span data-ttu-id="13511-735">U +0 061E と U +0 061F</span><span class="sxs-lookup"><span data-stu-id="13511-735">U+061E and U+061F</span></span>|<span data-ttu-id="13511-736">U +0 19DE と U +0 19DF</span><span class="sxs-lookup"><span data-stu-id="13511-736">U+19DE and U+19DF</span></span>|<span data-ttu-id="13511-737">U+303D</span><span class="sxs-lookup"><span data-stu-id="13511-737">U+303D</span></span>|  
|<span data-ttu-id="13511-738">U +0 003A と U +0 003B</span><span class="sxs-lookup"><span data-stu-id="13511-738">U+003A and U+003B</span></span>|<span data-ttu-id="13511-739">U + U +0 方位 066 D に 066A</span><span class="sxs-lookup"><span data-stu-id="13511-739">U+066A to U+066D</span></span>|<span data-ttu-id="13511-740">U +0 1A1E と U +0 1A1F</span><span class="sxs-lookup"><span data-stu-id="13511-740">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="13511-741">U+30A0</span><span class="sxs-lookup"><span data-stu-id="13511-741">U+30A0</span></span>|  
|<span data-ttu-id="13511-742">U +0 003F と U +0 0040</span><span class="sxs-lookup"><span data-stu-id="13511-742">U+003F and U+0040</span></span>|<span data-ttu-id="13511-743">U+06D4</span><span class="sxs-lookup"><span data-stu-id="13511-743">U+06D4</span></span>|<span data-ttu-id="13511-744">U + U +0 1B60 に 1B5A</span><span class="sxs-lookup"><span data-stu-id="13511-744">U+1B5A to U+1B60</span></span>|<span data-ttu-id="13511-745">U+30FB</span><span class="sxs-lookup"><span data-stu-id="13511-745">U+30FB</span></span>|  
|<span data-ttu-id="13511-746">U + U +0 005-D を 005B</span><span class="sxs-lookup"><span data-stu-id="13511-746">U+005B to U+005D</span></span>|<span data-ttu-id="13511-747">U + U +0 070 D に 0700</span><span class="sxs-lookup"><span data-stu-id="13511-747">U+0700 to U+070D</span></span>|<span data-ttu-id="13511-748">U + U +0 2027 に 2010</span><span class="sxs-lookup"><span data-stu-id="13511-748">U+2010 to U+2027</span></span>|<span data-ttu-id="13511-749">U + A874 U + A877 に</span><span class="sxs-lookup"><span data-stu-id="13511-749">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="13511-750">U+005F</span><span class="sxs-lookup"><span data-stu-id="13511-750">U+005F</span></span>|<span data-ttu-id="13511-751">U + U +0 07F9 に 07F7</span><span class="sxs-lookup"><span data-stu-id="13511-751">U+07F7 to U+07F9</span></span>|<span data-ttu-id="13511-752">U+2030 U +0 2043 に</span><span class="sxs-lookup"><span data-stu-id="13511-752">U+2030 to U+2043</span></span>|<span data-ttu-id="13511-753">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="13511-753">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="13511-754">U+007B</span><span class="sxs-lookup"><span data-stu-id="13511-754">U+007B</span></span>|<span data-ttu-id="13511-755">U+0964 および u+0965</span><span class="sxs-lookup"><span data-stu-id="13511-755">U+0964 and U+0965</span></span>|<span data-ttu-id="13511-756">U + U +0 2051 に 2045</span><span class="sxs-lookup"><span data-stu-id="13511-756">U+2045 to U+2051</span></span>|<span data-ttu-id="13511-757">U + FE10 U + FE19 に</span><span class="sxs-lookup"><span data-stu-id="13511-757">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="13511-758">U+007D</span><span class="sxs-lookup"><span data-stu-id="13511-758">U+007D</span></span>|<span data-ttu-id="13511-759">U+0970</span><span class="sxs-lookup"><span data-stu-id="13511-759">U+0970</span></span>|<span data-ttu-id="13511-760">U + U +0 205E に 2053</span><span class="sxs-lookup"><span data-stu-id="13511-760">U+2053 to U+205E</span></span>|<span data-ttu-id="13511-761">U + FE30 U + FE52 に</span><span class="sxs-lookup"><span data-stu-id="13511-761">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="13511-762">U+00A1</span><span class="sxs-lookup"><span data-stu-id="13511-762">U+00A1</span></span>|<span data-ttu-id="13511-763">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="13511-763">U+0DF4</span></span>|<span data-ttu-id="13511-764">U +0 207 D と U +0 207E</span><span class="sxs-lookup"><span data-stu-id="13511-764">U+207D and  U+207E</span></span>|<span data-ttu-id="13511-765">U + FE54 U + FE61 に</span><span class="sxs-lookup"><span data-stu-id="13511-765">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="13511-766">U+00AB</span><span class="sxs-lookup"><span data-stu-id="13511-766">U+00AB</span></span>|<span data-ttu-id="13511-767">U + U +0 0E5B に 0E4F</span><span class="sxs-lookup"><span data-stu-id="13511-767">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="13511-768">U +0 208 D と U +0 208E</span><span class="sxs-lookup"><span data-stu-id="13511-768">U+208D and U+208E</span></span>|<span data-ttu-id="13511-769">U+FE63</span><span class="sxs-lookup"><span data-stu-id="13511-769">U+FE63</span></span>|  
|<span data-ttu-id="13511-770">U+00AD</span><span class="sxs-lookup"><span data-stu-id="13511-770">U+00AD</span></span>|<span data-ttu-id="13511-771">U + U +0 0F12 に 0F04</span><span class="sxs-lookup"><span data-stu-id="13511-771">U+0F04 to U+0F12</span></span>|<span data-ttu-id="13511-772">U +0 の 2329 と 232A</span><span class="sxs-lookup"><span data-stu-id="13511-772">U+2329 and U+232A</span></span>|<span data-ttu-id="13511-773">U+FE68</span><span class="sxs-lookup"><span data-stu-id="13511-773">U+FE68</span></span>|  
|<span data-ttu-id="13511-774">U+00B7</span><span class="sxs-lookup"><span data-stu-id="13511-774">U+00B7</span></span>|<span data-ttu-id="13511-775">U + U +0 0F3D に 0F3A</span><span class="sxs-lookup"><span data-stu-id="13511-775">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="13511-776">U + U +0 2775 に 2768</span><span class="sxs-lookup"><span data-stu-id="13511-776">U+2768 to U+2775</span></span>|<span data-ttu-id="13511-777">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="13511-777">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="13511-778">U+00BB</span><span class="sxs-lookup"><span data-stu-id="13511-778">U+00BB</span></span>|<span data-ttu-id="13511-779">U+0F85</span><span class="sxs-lookup"><span data-stu-id="13511-779">U+0F85</span></span>|<span data-ttu-id="13511-780">U +0 27C 6 に U +0 27C 5</span><span class="sxs-lookup"><span data-stu-id="13511-780">U+27C5 to U+27C6</span></span>|<span data-ttu-id="13511-781">U + FF03 に U + ff 01</span><span class="sxs-lookup"><span data-stu-id="13511-781">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="13511-782">U+00BF</span><span class="sxs-lookup"><span data-stu-id="13511-782">U+00BF</span></span>|<span data-ttu-id="13511-783">U +0 0FD0 と U +0 0FD1</span><span class="sxs-lookup"><span data-stu-id="13511-783">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="13511-784">U + U +0 27EB に 27E6</span><span class="sxs-lookup"><span data-stu-id="13511-784">U+27E6 to U+27EB</span></span>|<span data-ttu-id="13511-785">U + FF05 U + FF0A に</span><span class="sxs-lookup"><span data-stu-id="13511-785">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="13511-786">U+037E</span><span class="sxs-lookup"><span data-stu-id="13511-786">U+037E</span></span>|<span data-ttu-id="13511-787">U + U +0 104F に 104A</span><span class="sxs-lookup"><span data-stu-id="13511-787">U+104A to U+104F</span></span>|<span data-ttu-id="13511-788">U + U +0 2998 に 2983</span><span class="sxs-lookup"><span data-stu-id="13511-788">U+2983 to U+2998</span></span>|<span data-ttu-id="13511-789">U + FF0C U + FF0F に</span><span class="sxs-lookup"><span data-stu-id="13511-789">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="13511-790">U+0387</span><span class="sxs-lookup"><span data-stu-id="13511-790">U+0387</span></span>|<span data-ttu-id="13511-791">U+10FB</span><span class="sxs-lookup"><span data-stu-id="13511-791">U+10FB</span></span>|<span data-ttu-id="13511-792">U +0 29D 8 U +0 29DB を</span><span class="sxs-lookup"><span data-stu-id="13511-792">U+29D8 to U+29DB</span></span>|<span data-ttu-id="13511-793">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="13511-793">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="13511-794">U + U +0 055F に 055A</span><span class="sxs-lookup"><span data-stu-id="13511-794">U+055A to U+055F</span></span>|<span data-ttu-id="13511-795">U + U +0 1368 に 1361</span><span class="sxs-lookup"><span data-stu-id="13511-795">U+1361 to U+1368</span></span>|<span data-ttu-id="13511-796">U +0 29 FC と U +0 29FD</span><span class="sxs-lookup"><span data-stu-id="13511-796">U+29FC and U+29FD</span></span>|<span data-ttu-id="13511-797">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="13511-797">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="13511-798">U +0 の 0589 と 058A</span><span class="sxs-lookup"><span data-stu-id="13511-798">U+0589 and U+058A</span></span>|<span data-ttu-id="13511-799">U +0 166 D と U +0 166E</span><span class="sxs-lookup"><span data-stu-id="13511-799">U+166D and U+166E</span></span>|<span data-ttu-id="13511-800">U + U +0 2CFC に 2CF9</span><span class="sxs-lookup"><span data-stu-id="13511-800">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="13511-801">U + FF3B U + FF3D に</span><span class="sxs-lookup"><span data-stu-id="13511-801">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="13511-802">U+05BE</span><span class="sxs-lookup"><span data-stu-id="13511-802">U+05BE</span></span>|<span data-ttu-id="13511-803">U +0 169B と U +0 169 C</span><span class="sxs-lookup"><span data-stu-id="13511-803">U+169B and U+169C</span></span>|<span data-ttu-id="13511-804">U +0 2CFE と U +0 2CFF</span><span class="sxs-lookup"><span data-stu-id="13511-804">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="13511-805">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="13511-805">U+FF3F</span></span>|  
|<span data-ttu-id="13511-806">U+05C0</span><span class="sxs-lookup"><span data-stu-id="13511-806">U+05C0</span></span>|<span data-ttu-id="13511-807">U + U +0 16ED に 16EB</span><span class="sxs-lookup"><span data-stu-id="13511-807">U+16EB to U+16ED</span></span>|<span data-ttu-id="13511-808">U + U +0 2E17 に 2E00</span><span class="sxs-lookup"><span data-stu-id="13511-808">U+2E00 to U+2E17</span></span>|<span data-ttu-id="13511-809">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="13511-809">U+FF5B</span></span>|  
|<span data-ttu-id="13511-810">U+05C3</span><span class="sxs-lookup"><span data-stu-id="13511-810">U+05C3</span></span>|<span data-ttu-id="13511-811">U+1735 および u+1736</span><span class="sxs-lookup"><span data-stu-id="13511-811">U+1735 and U+1736</span></span>|<span data-ttu-id="13511-812">U +0 2E1C と U +0 2E1D</span><span class="sxs-lookup"><span data-stu-id="13511-812">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="13511-813">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="13511-813">U+FF5D</span></span>|  
|<span data-ttu-id="13511-814">U+05C6</span><span class="sxs-lookup"><span data-stu-id="13511-814">U+05C6</span></span>|<span data-ttu-id="13511-815">U +0 17D 4 U +0 17D 6</span><span class="sxs-lookup"><span data-stu-id="13511-815">U+17D4 to U+17D6</span></span>|<span data-ttu-id="13511-816">U + U +0 3003 に 3001</span><span class="sxs-lookup"><span data-stu-id="13511-816">U+3001 to U+3003</span></span>|<span data-ttu-id="13511-817">U + FF5F U + FF65 に</span><span class="sxs-lookup"><span data-stu-id="13511-817">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="13511-818">U +0 05F3 と U +0 05F4</span><span class="sxs-lookup"><span data-stu-id="13511-818">U+05F3 and U+05F4</span></span>|<span data-ttu-id="13511-819">U +0 17D 8 U +0 17DA を</span><span class="sxs-lookup"><span data-stu-id="13511-819">U+17D8 to U+17DA</span></span>|<span data-ttu-id="13511-820">U + U +0 3011 に 3008</span><span class="sxs-lookup"><span data-stu-id="13511-820">U+3008 to U+3011</span></span>||  
  
   
  
## Examples  
 <span data-ttu-id="13511-821">次のコード例を示します<xref:System.Char.IsPunctuation%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-821">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-822"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-822"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-823"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-823"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSeparator">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-824">Unicode 文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-824">Indicates whether a Unicode character is categorized as a separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-825">Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。</span><span class="sxs-lookup"><span data-stu-id="13511-825">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="13511-826">区切り記号のスペース (、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリ)、\u0020 などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-826">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="13511-827">行区切り記号 (、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリ)、\u2028 が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-827">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="13511-828">段落区切り記号 (、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリ)、\u2029 が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-828">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13511-829">Unicode 標準制御文字としての文字の \u000A (LF)、\u000C (FF) および \u000D (CR) の分類 (のメンバー、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ)、区切り文字としてではなくです。</span><span class="sxs-lookup"><span data-stu-id="13511-829">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-830">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-830">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-831">指定した Unicode 文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-831">Indicates whether the specified Unicode character is categorized as a separator character.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-832"><see langword="true" /> が区切り文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-832"><see langword="true" /> if <paramref name="c" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-833">Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。</span><span class="sxs-lookup"><span data-stu-id="13511-833">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="13511-834">区切り記号のスペース (、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリ)、\u0020 などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-834">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="13511-835">行区切り記号 (、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリ)、\u2028 が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-835">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="13511-836">段落区切り記号 (、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリ)、\u2029 が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-836">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13511-837">Unicode 標準制御文字としての文字の \u000A (LF)、\u000C (FF) および \u000D (CR) の分類 (のメンバー、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ)、区切り文字としてではなくです。</span><span class="sxs-lookup"><span data-stu-id="13511-837">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-838">次の例の一覧、<xref:System.Char>区切り文字として分類されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-838">The following example lists the <xref:System.Char> objects that are classified as separator characters.</span></span>  
  
 [!code-cpp[System.Char.IsSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator1.cpp#1)]
 [!code-csharp[System.Char.IsSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator1.cs#1)]
 [!code-vb[System.Char.IsSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-839">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-839">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-840"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-840">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-841">指定した文字列の指定位置にある文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-841">Indicates whether the character at the specified position in a specified string is categorized as a separator character.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-842"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が区切り文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-842"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-843">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-843">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-844">Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。</span><span class="sxs-lookup"><span data-stu-id="13511-844">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="13511-845">区切り記号のスペース (、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリ)、\u0020 などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-845">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="13511-846">行区切り記号 (、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリ)、\u2028 が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-846">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="13511-847">段落区切り記号 (、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリ)、\u2029 が含まれます。</span><span class="sxs-lookup"><span data-stu-id="13511-847">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13511-848">Unicode 標準制御文字としての文字の \u000A (LF)、\u000C (FF) および \u000D (CR) の分類 (のメンバー、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ)、区切り文字としてではなくです。</span><span class="sxs-lookup"><span data-stu-id="13511-848">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-849">次の例で<xref:System.Char.IsSeparator%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-849">The following example demonstrates <xref:System.Char.IsSeparator%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSeparator#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator.cpp#10)]
 [!code-csharp[System.Char.IsSeparator#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator.cs#10)]
 [!code-vb[System.Char.IsSeparator#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-850"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-850"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-851"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-851"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-852">文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-852">Indicates whether a character has a surrogate code unit.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-853">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-853">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-854">指定した文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-854">Indicates whether the specified character has a surrogate code unit.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-855"><paramref name="c" /> が上位サロゲートまたは下位サロゲートである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-855"><see langword="true" /> if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-856">サロゲートは、 <xref:System.Char> u+d800 から U+DFFF の範囲の utf-16 コード単位を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-856">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="13511-857">この範囲内のコード単位での各文字が属する、<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-857">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="13511-858">個々 のサロゲート コード単位が存在せず、それ自体の解釈がサロゲート ペアの一部として使用される場合にのみ意味します。</span><span class="sxs-lookup"><span data-stu-id="13511-858">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="13511-859">サロゲート ペアの詳細についてで Unicode 標準を参照してください、 [Unicode ホームページ](http://go.microsoft.com/fwlink/?linkid=37123)です。</span><span class="sxs-lookup"><span data-stu-id="13511-859">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?linkid=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-860">次の例で、<xref:System.Char.IsSurrogate%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-860">The following example demonstrates the <xref:System.Char.IsSurrogate%2A> method.</span></span>  
  
 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-861">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-861">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-862"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-862">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-863">指定した文字列の指定位置にある文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-863">Indicates whether the character at the specified position in a specified string has a surrogate code unit.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-864"><paramref name="index" /> の位置 <paramref name="s" /> にある文字が上位サロゲートまたは下位サロゲートである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-864"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-865">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-865">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-866">サロゲートは、 <xref:System.Char> u+d800 から U+DFFF の範囲の utf-16 コード単位を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-866">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="13511-867">この範囲内のコード単位での各文字が属する、<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="13511-867">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="13511-868">個々 のサロゲート コード単位が存在せず、それ自体の解釈がサロゲート ペアの一部として使用される場合にのみ意味します。</span><span class="sxs-lookup"><span data-stu-id="13511-868">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="13511-869">サロゲート ペアの詳細についてで Unicode 標準を参照してください、 [Unicode ホームページ](http://go.microsoft.com/fwlink/?linkid=37123)です。</span><span class="sxs-lookup"><span data-stu-id="13511-869">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?linkid=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-870">次のコード例を示します<xref:System.Char.IsSurrogate%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-870">The following code example demonstrates <xref:System.Char.IsSurrogate%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-871"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-871"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-872"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-872"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogatePair">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-873">指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-873">Indicates whether two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (highSurrogate As Char, lowSurrogate As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(char highSurrogate, char lowSurrogate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="13511-874">サロゲート ペアの上位サロゲートとして評価する文字。</span><span class="sxs-lookup"><span data-stu-id="13511-874">The character to evaluate as the high surrogate of a surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="13511-875">サロゲート ペアの下位サロゲートとして評価する文字。</span><span class="sxs-lookup"><span data-stu-id="13511-875">The character to evaluate as the low surrogate of a surrogate pair.</span></span></param>
        <summary><span data-ttu-id="13511-876">指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-876">Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-877"><see langword="true" /> パラメーターに指定された数値が U+D800 から U+DBFF の範囲内にあり、<paramref name="highSurrogate" /> パラメーターに指定された数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="lowSurrogate" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-877"><see langword="true" /> if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-878">通常、1 つの文字は、1 つの 16 ビット Unicode コード単位で表されます。</span><span class="sxs-lookup"><span data-stu-id="13511-878">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="13511-879">Utf-16 エンコードでは、サロゲート ペアは、次の 2 つの 16 ビットのコード単位で表される 1 つの抽象文字を許可するもサポートしています。</span><span class="sxs-lookup"><span data-stu-id="13511-879">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="13511-880">値は u+d800 から U+DBFF の範囲に、最初のコード単位は、高のサロゲートです。</span><span class="sxs-lookup"><span data-stu-id="13511-880">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="13511-881">値は u+dc00 から U+DFFF の範囲に、2 つ目のコード単位は、下位のサロゲートです。</span><span class="sxs-lookup"><span data-stu-id="13511-881">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="13511-882">個々 のサロゲート コード ポイントがある独自の解釈されません。</span><span class="sxs-lookup"><span data-stu-id="13511-882">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="13511-883">サロゲートおよび Unicode 規格の詳細については、次を参照してください。、 [Unicode ホームページ](http://go.microsoft.com/fwlink/?LinkId=37123)です。</span><span class="sxs-lookup"><span data-stu-id="13511-883">For more information about surrogates and the Unicode Standard, see the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-884">次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-884">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-885">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-885">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-886"><c>s</c> 内の評価する文字のペアの開始位置。</span><span class="sxs-lookup"><span data-stu-id="13511-886">The starting position of the pair of characters to evaluate within <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-887">文字列中の指定された位置で互いに隣接する 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-887">Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-888"><paramref name="s" /> パラメーターの <paramref name="index" /> 位置と <paramref name="index" /> +1 位置に隣接して文字が含まれており、<paramref name="index" /> 位置にある文字の数値が U+D800 から U+DBFF の範囲内にあり、また、<paramref name="index" /> +1 位置にある文字の数値が U+DC00 から U+DFFF の範囲内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-888"><see langword="true" /> if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-889">通常、1 つの文字は、1 つの 16 ビット Unicode コード単位で表されます。</span><span class="sxs-lookup"><span data-stu-id="13511-889">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="13511-890">Utf-16 エンコードでは、サロゲート ペアは、次の 2 つの 16 ビットのコード単位で表される 1 つの抽象文字を許可するもサポートしています。</span><span class="sxs-lookup"><span data-stu-id="13511-890">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="13511-891">値は u+d800 から U+DBFF の範囲に、最初のコード単位は、高のサロゲートです。</span><span class="sxs-lookup"><span data-stu-id="13511-891">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="13511-892">値は u+dc00 から U+DFFF の範囲に、2 つ目のコード単位は、下位のサロゲートです。</span><span class="sxs-lookup"><span data-stu-id="13511-892">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="13511-893">個々 のサロゲート コード ポイントがある独自の解釈されません。</span><span class="sxs-lookup"><span data-stu-id="13511-893">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="13511-894">サロゲートおよび Unicode 規格の詳細については、次を参照してください。、 [Unicode ホームページ](http://go.microsoft.com/fwlink/?LinkId=37123)です。</span><span class="sxs-lookup"><span data-stu-id="13511-894">For more information about surrogates and the Unicode Standard, see the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-895">次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-895">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-896"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-896"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-897"><paramref name="index" /> が、<paramref name="s" /> 内にない位置を示しています。</span><span class="sxs-lookup"><span data-stu-id="13511-897"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSymbol">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-898">Unicode 文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-898">Indicates whether a Unicode character is categorized as a symbol character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-899">有効なシンボルでは、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `MathSymbol`、 `CurrencySymbol`、 `ModifierSymbol`、および`OtherSymbol`です。</span><span class="sxs-lookup"><span data-stu-id="13511-899">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="13511-900">大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。</span><span class="sxs-lookup"><span data-stu-id="13511-900">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="13511-901">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="13511-901">Currency symbols.</span></span>  
  
-   <span data-ttu-id="13511-902">文字種の記号、数学的な英数字記号だけでなく ℅、№ などの記号のセットが含まれていると™ します。</span><span class="sxs-lookup"><span data-stu-id="13511-902">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="13511-903">文字と下付き文字などのフォームを番号します。</span><span class="sxs-lookup"><span data-stu-id="13511-903">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="13511-904">算術演算子、および矢印です。</span><span class="sxs-lookup"><span data-stu-id="13511-904">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="13511-905">幾何学模様の記号。</span><span class="sxs-lookup"><span data-stu-id="13511-905">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="13511-906">技術的な記号です。</span><span class="sxs-lookup"><span data-stu-id="13511-906">Technical symbols.</span></span>  
  
-   <span data-ttu-id="13511-907">ブライユ点字パターン。</span><span class="sxs-lookup"><span data-stu-id="13511-907">Braille patterns.</span></span>  
  
-   <span data-ttu-id="13511-908">飾り。</span><span class="sxs-lookup"><span data-stu-id="13511-908">Dingbats.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-909">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-909">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-910">指定した Unicode 文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-910">Indicates whether the specified Unicode character is categorized as a symbol character.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-911"><paramref name="c" /> が記号である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-911"><see langword="true" /> if <paramref name="c" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-912">有効なシンボルでは、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `MathSymbol`、 `CurrencySymbol`、 `ModifierSymbol`、および`OtherSymbol`です。</span><span class="sxs-lookup"><span data-stu-id="13511-912">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="13511-913">大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。</span><span class="sxs-lookup"><span data-stu-id="13511-913">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="13511-914">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="13511-914">Currency symbols.</span></span>  
  
-   <span data-ttu-id="13511-915">文字種の記号、数学的な英数字記号だけでなく ℅、№ などの記号のセットが含まれていると™ します。</span><span class="sxs-lookup"><span data-stu-id="13511-915">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="13511-916">文字と下付き文字などのフォームを番号します。</span><span class="sxs-lookup"><span data-stu-id="13511-916">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="13511-917">算術演算子、および矢印です。</span><span class="sxs-lookup"><span data-stu-id="13511-917">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="13511-918">幾何学模様の記号。</span><span class="sxs-lookup"><span data-stu-id="13511-918">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="13511-919">技術的な記号です。</span><span class="sxs-lookup"><span data-stu-id="13511-919">Technical symbols.</span></span>  
  
-   <span data-ttu-id="13511-920">ブライユ点字パターン。</span><span class="sxs-lookup"><span data-stu-id="13511-920">Braille patterns.</span></span>  
  
-   <span data-ttu-id="13511-921">飾り。</span><span class="sxs-lookup"><span data-stu-id="13511-921">Dingbats.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-922">次のコード例を示します<xref:System.Char.IsSymbol%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-922">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-923">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-923">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-924"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-924">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-925">指定した文字列の指定位置にある文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-925">Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-926"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が記号である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-926"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-927">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-927">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-928">有効なシンボルでは、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`、 `CurrencySymbol`、 `ModifierSymbol`、および`OtherSymbol`です。</span><span class="sxs-lookup"><span data-stu-id="13511-928">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="13511-929">大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。</span><span class="sxs-lookup"><span data-stu-id="13511-929">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="13511-930">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="13511-930">Currency symbols.</span></span>  
  
-   <span data-ttu-id="13511-931">文字種の記号、数学的な英数字記号だけでなく ℅、№ などの記号のセットが含まれていると™ します。</span><span class="sxs-lookup"><span data-stu-id="13511-931">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="13511-932">文字と下付き文字などのフォームを番号します。</span><span class="sxs-lookup"><span data-stu-id="13511-932">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="13511-933">算術演算子、および矢印です。</span><span class="sxs-lookup"><span data-stu-id="13511-933">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="13511-934">幾何学模様の記号。</span><span class="sxs-lookup"><span data-stu-id="13511-934">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="13511-935">技術的な記号です。</span><span class="sxs-lookup"><span data-stu-id="13511-935">Technical symbols.</span></span>  
  
-   <span data-ttu-id="13511-936">ブライユ点字パターン。</span><span class="sxs-lookup"><span data-stu-id="13511-936">Braille patterns.</span></span>  
  
-   <span data-ttu-id="13511-937">飾り。</span><span class="sxs-lookup"><span data-stu-id="13511-937">Dingbats.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-938">次のコード例を示します<xref:System.Char.IsSymbol%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-938">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-939"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-939"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-940"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-940"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-941">Unicode 文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-941">Indicates whether a Unicode character is categorized as an uppercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-942">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-942">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-943">指定した Unicode 文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-943">Indicates whether the specified Unicode character is categorized as an uppercase letter.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-944"><see langword="true" /> が大文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-944"><see langword="true" /> if <paramref name="c" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-945">有効な文字を大文字で、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>:`UppercaseLetter`です。</span><span class="sxs-lookup"><span data-stu-id="13511-945">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsLower(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-946">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-946">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-947"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-947">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-948">指定した文字列の指定位置にある文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-948">Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-949"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が大文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-949"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-950">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-950">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-951">有効な文字を大文字で、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>:`UppercaseLetter`です。</span><span class="sxs-lookup"><span data-stu-id="13511-951">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-952"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-952"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-953"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-953"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsWhiteSpace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-954">Unicode 文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-954">Indicates whether a Unicode character is categorized as white space.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-955">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="13511-955">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="13511-956">メンバー、<xref:System.Globalization.UnicodeCategory.SpaceSeparator>カテゴリでが含まれていますが、文字のスペース (u+0020)、OGHAM 領域マーク (U +0 1680)、EN クアッド (U +0 2000)、EM クアッド (U +0 2001 年)、EN スペース (U +0 2002)、全角スペース (U +0 2003)、3-EM あたりスペース (U +0 2004 年)、4-EM あたりスペース (U +0 2005)、6-EM あたり(U +0 2006) の領域、領域の図 (U +0 2007)、句読点をシン (U +0 2008)、スペース (U +0 2009 年)、スペース髪領域 (200 U + a)、幅の狭い非分割領域 (U +0 202F)、MEDIUM 数学的な領域 (U +0 205F)、および全角スペース (u+3000)。</span><span class="sxs-lookup"><span data-stu-id="13511-956">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator> category, which includes the characters SPACE (U+0020), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="13511-957">メンバー、<xref:System.Globalization.UnicodeCategory.LineSeparator>カテゴリで、行区切り記号文字だけで構成されます (u+2028)。</span><span class="sxs-lookup"><span data-stu-id="13511-957">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="13511-958">メンバー、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator>段落区切り記号文字のみから構成されるカテゴリ (u+2029)。</span><span class="sxs-lookup"><span data-stu-id="13511-958">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="13511-959">文字の集計の文字 (u+0009)、ライン フィード (u+000 a)、行の集計 (U +0 000B)、フォーム フィード (U + 000 C)、キャリッジ リターン (U+000D)、次に、行 (U +0 0085)、および非分割領域 (U +0 00A0)。</span><span class="sxs-lookup"><span data-stu-id="13511-959">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), NEXT LINE (U+0085), and NO-BREAK SPACE (U+00A0).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-960">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-960">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="13511-961">指定した Unicode 文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-961">Indicates whether the specified Unicode character is categorized as white space.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-962"><see langword="true" /> が空白である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-962"><see langword="true" /> if <paramref name="c" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-963">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="13511-963">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="13511-964">メンバー、<xref:System.Globalization.UnicodeCategory.SpaceSeparator>カテゴリで、スペース文字が含まれています (u+0020) 非分割領域 (U +0 00A0)、OGHAM 領域をマーク (U +0 1680)、EN クアッド (U +0 2000)、EM クアッド (U +0 2001 年)、EN スペース (U +0 2002)、全角スペース (U +0 2003)、3-EM あたりスペース (U +0 2004 年)、4-EM あたりスペース (U +0 2005)、6-EM あたりスペース (U +0 2006)、図の領域 (U +0 2007)、句読点をシン (U +0 2008)、スペース (U +0 2009 年)、スペース髪領域 (200 U + a)、幅の狭い非分割領域 (U +0 202F)、MEDIUM 数学的な領域 (U +0 205F)、および全角スペース (u+3000)。</span><span class="sxs-lookup"><span data-stu-id="13511-964">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="13511-965">メンバー、<xref:System.Globalization.UnicodeCategory.LineSeparator>カテゴリで、行区切り記号文字だけで構成されます (u+2028)。</span><span class="sxs-lookup"><span data-stu-id="13511-965">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="13511-966">メンバー、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator>段落区切り記号文字のみから構成されるカテゴリ (u+2029)。</span><span class="sxs-lookup"><span data-stu-id="13511-966">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="13511-967">文字のタブ文字 (u+0009)、ライン フィード (u+000 a)、行の集計 (U +0 000B)、フォーム フィード (U + 000 C)、キャリッジ リターン (U+000D)、および次の行 (U +0 0085)。</span><span class="sxs-lookup"><span data-stu-id="13511-967">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-968">次の例で、<xref:System.Char.IsWhiteSpace%28System.Char%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-968">The following example demonstrates the <xref:System.Char.IsWhiteSpace%28System.Char%29> method.</span></span>  
  
 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-969">文字列。</span><span class="sxs-lookup"><span data-stu-id="13511-969">A string.</span></span></param>
        <param name="index"><span data-ttu-id="13511-970"><c>s</c> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="13511-970">The position of the character to evaluate in <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="13511-971">指定した文字列の指定位置にある文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-971">Indicates whether the character at the specified position in a specified string is categorized as white space.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-972"><paramref name="index" /> の <paramref name="s" /> の位置にある文字が空白である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-972"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-973">文字列内の文字位置では、0 から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="13511-973">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="13511-974">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="13511-974">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="13511-975">メンバー、<xref:System.Globalization.UnicodeCategory.SpaceSeparator>カテゴリで、スペース文字が含まれています (u+0020) 非分割領域 (U +0 00A0)、OGHAM 領域をマーク (U +0 1680)、EN クアッド (U +0 2000)、EM クアッド (U +0 2001 年)、EN スペース (U +0 2002)、全角スペース (U +0 2003)、3-EM あたりスペース (U +0 2004 年)、4-EM あたりスペース (U +0 2005)、6-EM あたりスペース (U +0 2006)、図の領域 (U +0 2007)、句読点をシン (U +0 2008)、スペース (U +0 2009 年)、スペース髪領域 (200 U + a)、幅の狭い非分割領域 (U +0 202F)、MEDIUM 数学的な領域 (U +0 205F)、および全角スペース (u+3000)。</span><span class="sxs-lookup"><span data-stu-id="13511-975">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="13511-976">メンバー、<xref:System.Globalization.UnicodeCategory.LineSeparator>カテゴリで、行区切り記号文字だけで構成されます (u+2028)。</span><span class="sxs-lookup"><span data-stu-id="13511-976">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="13511-977">メンバー、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator>段落区切り記号文字のみから構成されるカテゴリ (u+2029)。</span><span class="sxs-lookup"><span data-stu-id="13511-977">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="13511-978">文字のタブ文字 (u+0009)、ライン フィード (u+000 a)、行の集計 (U +0 000B)、フォーム フィード (U + 000 C)、キャリッジ リターン (U+000D)、および次の行 (U +0 0085)。</span><span class="sxs-lookup"><span data-stu-id="13511-978">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-979">次のコード例を示します<xref:System.Char.IsWhiteSpace%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-979">The following code example demonstrates <xref:System.Char.IsWhiteSpace%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-980"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-980"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="13511-981"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="13511-981"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const char MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MaxValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13511-982"><see cref="T:System.Char" /> の最大有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="13511-982">Represents the largest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="13511-983">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="13511-983">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-984">この定数の値は、16 進数 0 xffff です。</span><span class="sxs-lookup"><span data-stu-id="13511-984">The value of this constant is hexadecimal 0xFFFF.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const char MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MinValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MinValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13511-985"><see cref="T:System.Char" /> の最小有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="13511-985">Represents the smallest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="13511-986">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="13511-986">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-987">この定数の値は、16 進数の 0x00 です。</span><span class="sxs-lookup"><span data-stu-id="13511-987">The value of this constant is hexadecimal 0x00.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static char Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-988">単一の文字を含む文字列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13511-988">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="13511-989">指定した文字列の値をそれと等価な Unicode 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-989">Converts the value of the specified string to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="13511-990"><paramref name="s" /> の単一文字と等価な Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-990">A Unicode character equivalent to the sole character in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="13511-991">次のコード例を示します<xref:System.Char.Parse%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-991">The following code example demonstrates <xref:System.Char.Parse%2A>.</span></span>  
  
 [!code-cpp[System.Char.Parse#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Parse/CPP/parse.cpp#15)]
 [!code-csharp[System.Char.Parse#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Parse/CS/parse.cs#15)]
 [!code-vb[System.Char.Parse#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Parse/VB/parse.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-992"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-992"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="13511-993"><paramref name="s" /> の長さが 1 ではありません。</span><span class="sxs-lookup"><span data-stu-id="13511-993">The length of <paramref name="s" /> is not 1.</span></span></exception>
        <altmember cref="M:System.Char.ToString" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-994">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-994">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-995">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-995">**Note** This conversion is not supported.</span></span> <span data-ttu-id="13511-996">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="13511-996">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="13511-997">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-997">This conversion is not supported.</span></span> <span data-ttu-id="13511-998">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="13511-998">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="13511-999">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-999">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1000">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1000">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1001">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1001">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1002">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1002">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1003">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1003">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1004">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1004">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1005">推奨される代替手段が呼び出されて、<xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1005">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1006">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1006">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1007">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1007">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1008">現在の <see cref="T:System.Char" /> オブジェクトの未変更の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1008">The value of the current <see cref="T:System.Char" /> object unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1009">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1009">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1010">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1010">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1011">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1011">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1012">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-1012">**Note** This conversion is not supported.</span></span> <span data-ttu-id="13511-1013">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="13511-1013">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1014">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="13511-1014">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="13511-1015">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-1015">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1016">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1016">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1017">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-1017">**Note** This conversion is not supported.</span></span> <span data-ttu-id="13511-1018">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="13511-1018">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1019">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="13511-1019">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="13511-1020">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-1020">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1021">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1021">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1022">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-1022">**Note** This conversion is not supported.</span></span> <span data-ttu-id="13511-1023">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="13511-1023">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1024">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="13511-1024">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="13511-1025">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-1025">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1026">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1026">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1027">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1027">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1028">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1028">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1029">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1029">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1030">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1030">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1031">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1031">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1032">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1032">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1033">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1033">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1034">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1034">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1035">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1035">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1036">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1036">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1037">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1037">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1038">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1038">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1039">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1039">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1040">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1040">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1041">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1041">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1042">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1042">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1043">推奨される代替手段が呼び出されて、<xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1043">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1044">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1044">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1045">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1045">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1046">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1046">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1047">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1047">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1048">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1048">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1049">推奨される代替手段が呼び出されて、<xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1049">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1050">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1050">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="13511-1051">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-1051">**Note** This conversion is not supported.</span></span> <span data-ttu-id="13511-1052">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="13511-1052">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1053">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="13511-1053">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="13511-1054">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="13511-1054">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="13511-1055"><see cref="T:System.Type" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1055">A <see cref="T:System.Type" /> object.</span></span></param>
        <param name="provider"><span data-ttu-id="13511-1056"><see cref="T:System.IFormatProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1056">An <see cref="T:System.IFormatProvider" /> object.</span></span></param>
        <summary><span data-ttu-id="13511-1057">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1057">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1058">指定した型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1058">An object of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1059">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1059">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1060">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1060">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1061">推奨される代替手段が呼び出されて、<xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1061">The recommended alternative is to call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-1062"><paramref name="type" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-1062"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="13511-1063">現在の <see cref="T:System.Char" /> オブジェクトの値を、<paramref name="type" /> パラメーターに指定された型に変換できません。</span><span class="sxs-lookup"><span data-stu-id="13511-1063">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1064"><see cref="T:System.IFormatProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1064">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="13511-1065">(<c>provider</c> パラメーターは無視されるため、<see langword="null" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="13511-1065">(Specify <see langword="null" /> because the <c>provider</c> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="13511-1066">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1066">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1067">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1067">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1068">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1068">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1069">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1069">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1070">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1070">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1071"><see cref="T:System.IFormatProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1071">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="13511-1072">(<c>provider</c> パラメーターは無視されるため、<see langword="null" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="13511-1072">(Specify <see langword="null" /> because the <c>provider</c> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="13511-1073">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1073">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1074">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1074">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1075">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1075">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1076">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1076">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1077">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1077">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1078"><see cref="T:System.IFormatProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1078">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="13511-1079">(<c>provider</c> パラメーターは無視されるため、<see langword="null" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="13511-1079">(Specify <see langword="null" /> because the <c>provider</c> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="13511-1080">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="13511-1080">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="13511-1081">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="13511-1081">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1082">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="13511-1082">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="13511-1083">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="13511-1083">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="13511-1084">推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="13511-1084">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-1085">Unicode 文字の値をそれと等価な小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1085">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-1086">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-1086">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="13511-1087">Unicode 文字の値をそれと等価な小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1087">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="13511-1088"><paramref name="c" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1088">The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1089">大文字小文字の規則は、現在のカルチャから取得されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1089">Casing rules are obtained from the current culture.</span></span>  
  
 <span data-ttu-id="13511-1090">使用して<xref:System.String.ToLower%2A?displayProperty=nameWithType>文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1090">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-1091">次の例で<xref:System.Char.ToLower%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-1091">The following example demonstrates <xref:System.Char.ToLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="13511-1092">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を置き換える文字列の大文字小文字の区別と文字の大文字と小文字のメソッドを呼び出すことは避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="13511-1092">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="13511-1093">代わりに、パラメーターを明示的に指定する必要のあるメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="13511-1093">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="13511-1094">現在のカルチャの大文字と小文字の規則を使用して小文字の文字を変換するを呼び出して、<see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />の値を持つメソッド オーバー ロード<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />の<paramref name="culture" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="13511-1094">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para>
        </block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-1095">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-1095">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="13511-1096">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1096">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="13511-1097">指定したカルチャ固有の書式情報を使用して、指定した Unicode 文字の値をそれと等価な小文字へ変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1097">Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="13511-1098"><paramref name="c" /> に基づいて変換された、<paramref name="culture" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1098">The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1099">使用して<xref:System.String.ToLower%2A?displayProperty=nameWithType>文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1099">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-1100">次のコード例を示します<xref:System.Char.ToLower%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-1100">The following code example demonstrates <xref:System.Char.ToLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-1101"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-1101"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static char ToLowerInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLowerInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLowerInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLowerInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLowerInvariant(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-1102">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-1102">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="13511-1103">インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する小文字表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1103">Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="13511-1104"><paramref name="c" /> パラメーターの小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1104">The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1105">アプリケーションは、現在のカルチャによる影響はありませんが、予測可能な方法で変更する文字の大文字と小文字に依存して場合を使用して、<xref:System.Char.ToLowerInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-1105">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the <xref:System.Char.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="13511-1106"><xref:System.Char.ToLowerInvariant%2A>メソッドは`ToLower(Char, CultureInfo.InvariantCulture)`します。</span><span class="sxs-lookup"><span data-stu-id="13511-1106">The <xref:System.Char.ToLowerInvariant%2A> method is equivalent to `ToLower(Char, CultureInfo.InvariantCulture)`.</span></span>  
  
 <span data-ttu-id="13511-1107">使用して<xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType>文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1107">Use <xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-1108">このインスタンスの値を、それと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1108">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13511-1109">このインスタンスの値を、それと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1109">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="13511-1110">このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="13511-1110">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="13511-1111">次のコード例を示します<xref:System.Char.ToString%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-1111">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (c As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-1112">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-1112">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="13511-1113">指定した Unicode 文字をそれと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1113">Converts the specified Unicode character to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="13511-1114"><paramref name="c" /> の値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="13511-1114">The string representation of the value of <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="13511-1115">次のコード例を示します<xref:System.Char.ToString%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-1115">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="13511-1116">(予約済み) カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1116">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="13511-1117">指定したカルチャ固有の書式情報を使用して、このインスタンスの値をそれと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1117">Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="13511-1118"><paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="13511-1118">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1119">`provider`パラメーターは無視されます。 この操作には参加しません。</span><span class="sxs-lookup"><span data-stu-id="13511-1119">The `provider` parameter is ignored; it does not participate in this operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-1120">次のコード例に示しますのオーバー ロード<xref:System.Char.ToString%2A>です。</span><span class="sxs-lookup"><span data-stu-id="13511-1120">The following code example demonstrates an overload of <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13511-1121">Unicode 文字の値をそれと等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1121">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-1122">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-1122">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="13511-1123">Unicode 文字の値をそれと等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1123">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="13511-1124"><paramref name="c" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1124">The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1125">大文字小文字の規則は、現在のカルチャから取得されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1125">Casing rules are obtained from the current culture.</span></span>  
  
 <span data-ttu-id="13511-1126">使用して<xref:System.String.ToUpper%2A?displayProperty=nameWithType>文字列を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1126">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-1127">次の例は、配列内の各文字を等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1127">The following example converts each character in an array to its uppercase equivalent.</span></span>  
  
 [!code-csharp[System.Char.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper1.cs#1)]
 [!code-vb[System.Char.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="13511-1128">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を置き換える文字列の大文字小文字の区別と文字の大文字と小文字のメソッドを呼び出すことは避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="13511-1128">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="13511-1129">代わりに、パラメーターを明示的に指定する必要のあるメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="13511-1129">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="13511-1130">現在のカルチャの大文字と小文字の規則を使用して大文字の文字を変換するを呼び出して、<see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />の値を持つメソッド オーバー ロード<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />の<paramref name="culture" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="13511-1130">To convert a character to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para>
        </block>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-1131">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-1131">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="13511-1132">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="13511-1132">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="13511-1133">指定したカルチャ固有の書式情報を使用して、指定した Unicode 文字の値をそれと等価な大文字へ変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1133">Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="13511-1134"><paramref name="c" /> に基づいて変換された、<paramref name="culture" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1134">The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1135">使用して<xref:System.String.ToUpper%2A?displayProperty=nameWithType>文字列を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1135">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-1136">次の例は、配列内の各文字を EN-US カルチャ、インバリアント カルチャ、および TR-TR カルチャの大文字表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1136">The following example converts each character in an array to its uppercase equivalent for the en-US culture, the invariant culture, and the tr-TR culture.</span></span> <span data-ttu-id="13511-1137">この例では、各英文字の大文字表現では、1 つのケースを除くすべてのカルチャと一致します。</span><span class="sxs-lookup"><span data-stu-id="13511-1137">In this example, the uppercase equivalent of each lowercase letter is identical for all cultures except for one case.</span></span> <span data-ttu-id="13511-1138">小文字の"i"文字"I"(u+0069) に変換 (u+0049) EN-US およびインバリアント カルチャですを""(u+0130) TR-TR カルチャでします。</span><span class="sxs-lookup"><span data-stu-id="13511-1138">The lowercase "i" character (U+0069) converts to "I" (U+0049) in the en-US and invariant cultures, but to "İ" (U+0130) in the tr-TR culture.</span></span>  
  
 [!code-csharp[System.Char.ToUpper#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper5.cs#2)]
 [!code-vb[System.Char.ToUpper#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="13511-1139"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="13511-1139"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static char ToUpperInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpperInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpperInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpperInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpperInvariant(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13511-1140">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="13511-1140">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="13511-1141">インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する大文字表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1141">Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="13511-1142"><paramref name="c" /> パラメーターの大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1142">The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1143">場合は、アプリケーションは、現在のカルチャによる影響はありませんが、予測可能な方法で変更する文字の大文字と小文字に依存してを使用して、<xref:System.Char.ToUpperInvariant%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="13511-1143">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the <xref:System.Char.ToUpperInvariant%2A> method.</span></span>  <span data-ttu-id="13511-1144"><xref:System.Char.ToUpperInvariant%2A>メソッドは`ToUpper(Char, CultureInfo.InvariantCulture)`します。</span><span class="sxs-lookup"><span data-stu-id="13511-1144">The <xref:System.Char.ToUpperInvariant%2A> method is equivalent to `ToUpper(Char, CultureInfo.InvariantCulture)`.</span></span>  
  
 <span data-ttu-id="13511-1145">使用して<xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType>文字列を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1145">Use <xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out char result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] char&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.TryParse(System.String,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] char % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Char&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="13511-1146">単一の文字を含む文字列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13511-1146">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <param name="result"><span data-ttu-id="13511-1147">変換に成功した場合、メソッドから制御が戻ったときに、<c>s</c> 内の単一文字に相当する Unicode 文字が格納されます。変換に失敗した場合は、未定義の値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1147">When this method returns, contains a Unicode character equivalent to the sole character in <c>s</c>, if the conversion succeeded, or an undefined value if the conversion failed.</span></span> <span data-ttu-id="13511-1148"><c>s</c> パラメーターが <see langword="null" /> の場合、または <c>s</c> の長さが 1 でない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="13511-1148">The conversion fails if the <c>s</c> parameter is <see langword="null" /> or the length of <c>s</c> is not 1.</span></span> <span data-ttu-id="13511-1149">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="13511-1149">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="13511-1150">指定した文字列の値をそれと等価な Unicode 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="13511-1150">Converts the value of the specified string to its equivalent Unicode character.</span></span> <span data-ttu-id="13511-1151">リターン コードは、変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="13511-1151">A return code indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns>
          <span data-ttu-id="13511-1152"><paramref name="s" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13511-1152"><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13511-1153"><xref:System.Char.TryParse%2A>などのメソッドは、<xref:System.Char.Parse%2A>メソッドを除く、<xref:System.Char.TryParse%2A>変換が失敗した場合、メソッドが例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="13511-1153">The <xref:System.Char.TryParse%2A> method is like the <xref:System.Char.Parse%2A> method, except the <xref:System.Char.TryParse%2A> method does not throw an exception if the conversion fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13511-1154">次のコード例に示しますのオーバー ロード、<xref:System.Char.TryParse%2A>いくつかの基本型のメソッドと<xref:System.DateTime.TryParseExact%2A>メソッドを<xref:System.DateTime>基本データ型。</span><span class="sxs-lookup"><span data-stu-id="13511-1154">The following code example demonstrates overloads of the <xref:System.Char.TryParse%2A> method for several base types, and the <xref:System.DateTime.TryParseExact%2A> method for the <xref:System.DateTime> base type.</span></span>  
  
 [!code-cpp[T.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.TryParse/CPP/tp.cpp#1)]
 [!code-csharp[T.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.TryParse/CS/tp.cs#1)]
 [!code-vb[T.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.TryParse/VB/tp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="M:System.Char.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>