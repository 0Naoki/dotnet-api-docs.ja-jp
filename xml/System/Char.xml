<Type Name="Char" FullName="System.Char">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e75ed4d5aaded0359b642b4a02a3b68031a419a2" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58706763" /></Metadata><TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Char" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IComparable(Of Char), IConvertible, IEquatable(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type char = struct&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Char&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cf60a-101">文字を UTF-16 コード単位で表します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-101">Represents a character as a UTF-16 code unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]を使用して、 <xref:System.Char> Unicode 文字を表現する構造体。</span><span class="sxs-lookup"><span data-stu-id="cf60a-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] uses the <xref:System.Char> structure to represent a Unicode character.</span></span> <span data-ttu-id="cf60a-103">Unicode 規格では、各 Unicode 文字をコード ポイントと呼ばれる一意の 21 ビット スカラー番号で識別し、コード ポイントを 1 つ以上の 16 ビット値のシーケンスにエンコードする方法を指定する utf-16 エンコード形式を定義します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-103">The Unicode Standard identifies each Unicode character with a unique 21-bit scalar number called a code point, and defines the UTF-16 encoding form that specifies how a code point is encoded into a sequence of one or more 16-bit values.</span></span> <span data-ttu-id="cf60a-104">各 16 ビット値が 16 進数の 0x0000 から 0 xffff の範囲とに格納されている場合は、<xref:System.Char>構造体。</span><span class="sxs-lookup"><span data-stu-id="cf60a-104">Each 16-bit value ranges from hexadecimal 0x0000 through 0xFFFF and is stored in a <xref:System.Char> structure.</span></span>  <span data-ttu-id="cf60a-105">値を<xref:System.Char>オブジェクトが、16 ビット数 (序数) 値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-105">The value of a <xref:System.Char> object is its 16-bit numeric (ordinal) value.</span></span>  
  
 <span data-ttu-id="cf60a-106">次のセクションでは、確認の間のリレーションシップを<xref:System.Char>オブジェクトと文字で実行されるいくつかの一般的なタスクについて説明しますと<xref:System.Char>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="cf60a-106">The following sections examine the relationship between a <xref:System.Char> object and a character and discuss some common tasks performed with <xref:System.Char> instances.</span></span>  
  
 <span data-ttu-id="cf60a-107">[Char 型のオブジェクト、Unicode 文字および文字列](#Relationship) </span><span class="sxs-lookup"><span data-stu-id="cf60a-107">[Char objects, Unicode characters, and strings](#Relationship) </span></span>  
 <span data-ttu-id="cf60a-108">[文字および文字のカテゴリ](#Categories) </span><span class="sxs-lookup"><span data-stu-id="cf60a-108">[Characters and character categories](#Categories) </span></span>  
 <span data-ttu-id="cf60a-109">[文字と text 要素](#Elements) </span><span class="sxs-lookup"><span data-stu-id="cf60a-109">[Characters and text elements](#Elements) </span></span>  
 <span data-ttu-id="cf60a-110">[一般的な操作](#Operations) </span><span class="sxs-lookup"><span data-stu-id="cf60a-110">[Common operations](#Operations) </span></span>  
 [<span data-ttu-id="cf60a-111">Char 値との相互運用機能</span><span class="sxs-lookup"><span data-stu-id="cf60a-111">Char values and interop</span></span>](#Interop)  
  
<a name="Relationship"></a>   
## <a name="char-objects-unicode-characters-and-strings"></a><span data-ttu-id="cf60a-112">Char 型のオブジェクト、Unicode 文字および文字列</span><span class="sxs-lookup"><span data-stu-id="cf60a-112">Char objects, Unicode characters, and strings</span></span>  
 <span data-ttu-id="cf60a-113">A<xref:System.String>オブジェクトのシーケンシャル コレクションは、<xref:System.Char>テキストの文字列を表す構造体。</span><span class="sxs-lookup"><span data-stu-id="cf60a-113">A <xref:System.String> object is a sequential collection of <xref:System.Char> structures that represents a string of text.</span></span> <span data-ttu-id="cf60a-114">ほとんどの Unicode 文字を 1 つで表現できる<xref:System.Char>オブジェクト、基本の文字としてエンコードされる文字がサロゲート ペアや組み合わせ文字シーケンスが複数で表される<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-114">Most Unicode characters can be represented by a single <xref:System.Char> object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple <xref:System.Char> objects.</span></span> <span data-ttu-id="cf60a-115">このため、<xref:System.Char>構造体、<xref:System.String>オブジェクトは、必ずしも同一では 1 つの Unicode 文字にすることはありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-115">For this reason, a <xref:System.Char> structure in a <xref:System.String> object is not necessarily equivalent to a single Unicode character.</span></span>  
  
 <span data-ttu-id="cf60a-116">次の場合に 1 つの Unicode 文字を表す複数の 16 ビットのコード単位が使用されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-116">Multiple 16-bit code units are used to represent single Unicode characters in the following cases:</span></span>  
  
-   <span data-ttu-id="cf60a-117">グリフ、または 1 つまたは複数の組み合わせ文字の後に、基本文字の単一の文字で構成されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-117">Glyphs, which may consist of a single character or of a base character followed by one or more combining characters.</span></span> <span data-ttu-id="cf60a-118">たとえば、ä 文字が a で表されます<xref:System.Char>オブジェクト単位は U + 0061 a 続くコードが<xref:System.Char>コードは u+0308 オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-118">For example, the character ä is represented by a <xref:System.Char> object whose code unit is U+0061 followed by a <xref:System.Char> object whose code unit is U+0308.</span></span> <span data-ttu-id="cf60a-119">(A の 1 つによって文字 ä を定義することも<xref:System.Char>U + 00E4 のコード単位を含むオブジェクトです)。2 つの文字 ä で構成されている次の例を示しています<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-119">(The character ä can also be defined by a single <xref:System.Char> object that has a code unit of U+00E4.) The following example illustrates that the character ä consists of two <xref:System.Char> objects.</span></span>  
  
     [!code-csharp[System.Char.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/grapheme1.cs#1)]
     [!code-vb[System.Char.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/grapheme1.vb#1)]  
  
-   <span data-ttu-id="cf60a-120">Unicode 基本多言語面 (BMP) 外の文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-120">Characters outside the Unicode Basic Multilingual Plane (BMP).</span></span> <span data-ttu-id="cf60a-121">Unicode では、だけでなく、BMP、0 面を表す 16 個の平面をサポートします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-121">Unicode supports sixteen planes in addition to the BMP, which represents plane 0.</span></span> <span data-ttu-id="cf60a-122">Unicode コード ポイントは、utf-32 の平面が含まれる 21 ビットの値によって表されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-122">A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane.</span></span> <span data-ttu-id="cf60a-123">たとえば、U + 1D160 音符シンボル 8 分の文字を表します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-123">For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character.</span></span> <span data-ttu-id="cf60a-124">Utf-16 エンコーディングは 16 ビットのみがあるため、BMP 外の文字は、utf-16 のサロゲート ペアで表されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-124">Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16.</span></span> <span data-ttu-id="cf60a-125">次の例では、U + 1D160、音符シンボル 8 番目の文字の utf-32 同等が U + D834 U + DD60 を示しています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-125">The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60.</span></span> <span data-ttu-id="cf60a-126">U + D834 が上位サロゲートです。高サロゲート u+d800 から U+DBFF の範囲です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-126">U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF.</span></span> <span data-ttu-id="cf60a-127">U + DD60 が下位サロゲートです。低サロゲート u+dc00 から U+DFFF の範囲です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-127">U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.</span></span>  
  
     [!code-csharp[System.Char.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/surrogate1.cs#2)]
     [!code-vb[System.Char.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/surrogate1.vb#2)]  
  
<a name="Categories"></a>   
## <a name="characters-and-character-categories"></a><span data-ttu-id="cf60a-128">文字および文字のカテゴリ</span><span class="sxs-lookup"><span data-stu-id="cf60a-128">Characters and character categories</span></span>  
 <span data-ttu-id="cf60a-129">各 Unicode 文字または有効なサロゲート ペアは、Unicode カテゴリに属しています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-129">Each Unicode character or valid surrogate pair belongs to a Unicode category.</span></span> <span data-ttu-id="cf60a-130">.NET Framework では、Unicode カテゴリのメンバーによって表されます、<xref:System.Globalization.UnicodeCategory>列挙値を含めると<xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>、 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>、および<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>など。</span><span class="sxs-lookup"><span data-stu-id="cf60a-130">In the .NET Framework, Unicode categories are represented by members of the <xref:System.Globalization.UnicodeCategory> enumeration and include values such as <xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>, and <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>, for example.</span></span>  
  
 <span data-ttu-id="cf60a-131">文字の Unicode カテゴリを確認するを呼び出す、<xref:System.Char.GetUnicodeCategory%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-131">To determine the Unicode category of a character, you call the <xref:System.Char.GetUnicodeCategory%2A> method.</span></span> <span data-ttu-id="cf60a-132">たとえば、次の例では、<xref:System.Char.GetUnicodeCategory%2A>文字列内の各文字の Unicode カテゴリを表示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-132">For example, the following example calls the <xref:System.Char.GetUnicodeCategory%2A> to display the Unicode category of each character in a string.</span></span>  
  
 [!code-csharp[System.Char.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/GetUnicodeCategory3.cs#6)]
 [!code-vb[System.Char.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/GetUnicodeCategory3.vb#6)]  
  
 <span data-ttu-id="cf60a-133">(U + 0000 から U + 00 ff)、ASCII 範囲外の文字を内部的には、<xref:System.Char.GetUnicodeCategory%2A>メソッドによって報告された、Unicode カテゴリによって異なります、<xref:System.Globalization.CharUnicodeInfo>クラス。</span><span class="sxs-lookup"><span data-stu-id="cf60a-133">Internally, for characters outside the ASCII range (U+0000 through U+00FF), the <xref:System.Char.GetUnicodeCategory%2A> method depends on Unicode categories reported by the <xref:System.Globalization.CharUnicodeInfo> class.</span></span> <span data-ttu-id="cf60a-134">以降では、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字を分類に基づいて[Unicode 標準、バージョン 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-134">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="cf60a-135">.NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[Unicode 標準、バージョン 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-135">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
<a name="Elements"></a>   
## <a name="characters-and-text-elements"></a><span data-ttu-id="cf60a-136">文字と text 要素</span><span class="sxs-lookup"><span data-stu-id="cf60a-136">Characters and text elements</span></span>  
 <span data-ttu-id="cf60a-137">複数で、1 つの文字を表現できるため、<xref:System.Char>オブジェクトの場合は常に意味のある個人と作業しない<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-137">Because a single character can be represented by multiple <xref:System.Char> objects, it is not always meaningful to work with individual <xref:System.Char> objects.</span></span> <span data-ttu-id="cf60a-138">たとえば、次の例では、utf-16 でエンコードされたコード ユニットを Aegean 数字 0 ~ 9 を表す Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-138">For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units.</span></span> <span data-ttu-id="cf60a-139">誤ってと同じですので、<xref:System.Char>が正確にレポートではなく、結果の文字列が 20 文字を文字のオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-139">Because it erroneously equates <xref:System.Char> objects with characters, it inaccurately reports that the resulting string has 20 characters.</span></span>  
  
 [!code-csharp[System.Char.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2.cs#3)]
 [!code-vb[System.Char.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2.vb#3)]  
  
 <span data-ttu-id="cf60a-140">前提を回避するために、次を行うことができる<xref:System.Char>オブジェクトは 1 つの文字を表します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-140">You can do the following to avoid the assumption that a <xref:System.Char> object represents a single character.</span></span>  
  
-   <span data-ttu-id="cf60a-141">使用することができます、<xref:System.String>その個々 の文字を表し、言語のコンテンツを分析するではなく全体のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-141">You can work with a <xref:System.String> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.</span></span>  
  
-   <span data-ttu-id="cf60a-142">使用することができます、<xref:System.Globalization.StringInfo>個人ではなくテキスト要素を使用するにはクラス<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-142">You can use the <xref:System.Globalization.StringInfo> class to work with text elements instead of individual <xref:System.Char> objects.</span></span> <span data-ttu-id="cf60a-143">次の例では、<xref:System.Globalization.StringInfo>番号が 0 から 9、Aegean で構成される文字列内のテキスト要素の数をカウントするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-143">The following example uses the <xref:System.Globalization.StringInfo> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine.</span></span> <span data-ttu-id="cf60a-144">1 つの文字はサロゲート ペアを考慮にされるため、文字列が 10 文字が含まれているを正しく報告します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-144">Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.</span></span>  
  
     [!code-csharp[System.Char.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2a.cs#4)]
     [!code-vb[System.Char.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2a.vb#4)]  
  
-   <span data-ttu-id="cf60a-145">文字列に 1 つまたは複数の組み合わせ文字を含む基本文字が含まれている場合を呼び出すことができます、<xref:System.String.Normalize%2A?displayProperty=nameWithType>部分文字列を 1 つの utf-16 でエンコードされたコード単位に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-145">If a string contains a base character that has one or more combining characters, you can call the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the substring to a single UTF-16 encoded code unit.</span></span> <span data-ttu-id="cf60a-146">次の例では、 <xref:System.String.Normalize%2A?displayProperty=nameWithType> U + 00E4 基本文字 U + 0061 (ラテン文字 A) と組み合わせ文字 u+0308 (結合ウムラウト) に変換するメソッド (ラテン小さな文字 A でウムラウト)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-146">The following example calls the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS).</span></span>  
  
     [!code-csharp[System.Char.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/normalized.cs#5)]
     [!code-vb[System.Char.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/normalized.vb#5)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a><span data-ttu-id="cf60a-147">一般的な操作</span><span class="sxs-lookup"><span data-stu-id="cf60a-147">Common operations</span></span>  
 <span data-ttu-id="cf60a-148"><xref:System.Char>構造体を比較するメソッドを提供する<xref:System.Char>、オブジェクトが現在の値を変換<xref:System.Char>オブジェクトを別の型のオブジェクトとの Unicode カテゴリを確認、<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-148">The <xref:System.Char> structure provides methods to compare <xref:System.Char> objects, convert the value of the current <xref:System.Char> object to an object of another type, and determine the Unicode category of a <xref:System.Char> object:</span></span>  
  
|<span data-ttu-id="cf60a-149">目的</span><span class="sxs-lookup"><span data-stu-id="cf60a-149">To do this</span></span>|<span data-ttu-id="cf60a-150">これらを使用して、`System.Char`メソッド</span><span class="sxs-lookup"><span data-stu-id="cf60a-150">Use these `System.Char` methods</span></span>|  
|----------------|-------------------------------------|  
|<span data-ttu-id="cf60a-151">比較<xref:System.Char>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="cf60a-151">Compare <xref:System.Char> objects</span></span>|<span data-ttu-id="cf60a-152"><xref:System.Char.CompareTo%2A> および <xref:System.Char.Equals%2A></span><span class="sxs-lookup"><span data-stu-id="cf60a-152"><xref:System.Char.CompareTo%2A> and <xref:System.Char.Equals%2A></span></span>|  
|<span data-ttu-id="cf60a-153">コード ポイントを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-153">Convert a code point to a string</span></span>|<xref:System.Char.ConvertFromUtf32%2A>|  
|<span data-ttu-id="cf60a-154">変換を<xref:System.Char>オブジェクトまたはのサロゲート ペア<xref:System.Char>コード ポイントにオブジェクト</span><span class="sxs-lookup"><span data-stu-id="cf60a-154">Convert a <xref:System.Char> object or a surrogate pair of <xref:System.Char> objects to a code point</span></span>|<span data-ttu-id="cf60a-155">1 つの文字。 <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cf60a-155">For a single character: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span></span><br /><br /> <span data-ttu-id="cf60a-156">サロゲート ペアまたは文字列の文字の場合。 <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cf60a-156">For a surrogate pair or a character in a string: <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span></span>|  
|<span data-ttu-id="cf60a-157">文字の Unicode カテゴリを取得します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-157">Get the Unicode category of a character</span></span>|<xref:System.Char.GetUnicodeCategory%2A>|  
|<span data-ttu-id="cf60a-158">制御文字の文字は、数字、文字、句読点などの特定の Unicode カテゴリでは、かどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-158">Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on</span></span>|<span data-ttu-id="cf60a-159"><xref:System.Char.IsControl%2A>、 <xref:System.Char.IsDigit%2A>、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLetter%2A>、 <xref:System.Char.IsLetterOrDigit%2A>、 <xref:System.Char.IsLower%2A>、 <xref:System.Char.IsLowSurrogate%2A>、 <xref:System.Char.IsNumber%2A>、 <xref:System.Char.IsPunctuation%2A>、 <xref:System.Char.IsSeparator%2A>、 <xref:System.Char.IsSurrogate%2A>、 <xref:System.Char.IsSurrogatePair%2A>、 <xref:System.Char.IsSymbol%2A>、 <xref:System.Char.IsUpper%2A>、と <xref:System.Char.IsWhiteSpace%2A></span><span class="sxs-lookup"><span data-stu-id="cf60a-159"><xref:System.Char.IsControl%2A>, <xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>, <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>, <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>, <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, and <xref:System.Char.IsWhiteSpace%2A></span></span>|  
|<span data-ttu-id="cf60a-160">変換を<xref:System.Char>数値型の数値を表すオブジェクト</span><span class="sxs-lookup"><span data-stu-id="cf60a-160">Convert a <xref:System.Char> object that represents a number to a numeric value type</span></span>|<xref:System.Char.GetNumericValue%2A>|  
|<span data-ttu-id="cf60a-161">文字列の文字変換を<xref:System.Char>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="cf60a-161">Convert a character in a string into a <xref:System.Char> object</span></span>|<span data-ttu-id="cf60a-162"><xref:System.Char.Parse%2A> および <xref:System.Char.TryParse%2A></span><span class="sxs-lookup"><span data-stu-id="cf60a-162"><xref:System.Char.Parse%2A> and <xref:System.Char.TryParse%2A></span></span>|  
|<span data-ttu-id="cf60a-163">変換を<xref:System.Char>オブジェクトを<xref:System.String>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="cf60a-163">Convert a <xref:System.Char> object to a <xref:System.String> object</span></span>|<xref:System.Char.ToString%2A>|  
|<span data-ttu-id="cf60a-164">大文字と小文字の変更、<xref:System.Char>オブジェクト</span><span class="sxs-lookup"><span data-stu-id="cf60a-164">Change the case of a <xref:System.Char> object</span></span>|<span data-ttu-id="cf60a-165"><xref:System.Char.ToLower%2A>、<xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>、および <xref:System.Char.ToUpperInvariant%2A></span><span class="sxs-lookup"><span data-stu-id="cf60a-165"><xref:System.Char.ToLower%2A>, <xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>, and <xref:System.Char.ToUpperInvariant%2A></span></span>|  
  
<a name="Interop"></a>   
## <a name="char-values-and-interop"></a><span data-ttu-id="cf60a-166">Char 値との相互運用機能</span><span class="sxs-lookup"><span data-stu-id="cf60a-166">Char values and interop</span></span>  
<span data-ttu-id="cf60a-167">ときにマネージ<xref:System.Char>Unicode utf-16 でエンコードされたコードの単位として表される、型がアンマネージ コードに渡されると、相互運用マーシャラーが既定で ANSI に設定する文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-167">When a managed <xref:System.Char> type, which is represented as a Unicode UTF-16 encoded code unit, is passed to unmanaged code, the interop marshaler converts the character set to ANSI by default.</span></span> <span data-ttu-id="cf60a-168">適用することができます、<xref:System.Runtime.InteropServices.DllImportAttribute>属性をプラットフォーム呼び出しの宣言と<xref:System.Runtime.InteropServices.StructLayoutAttribute>文字セットをマーシャ リングされたコントロールに COM 相互運用機能の宣言に属性<xref:System.Char>用途を入力します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-168">You can apply the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to platform invoke declarations and the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to a COM interop declaration to control which character set a marshaled <xref:System.Char> type uses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-169">次のコード例では、メソッドの一部を示します<xref:System.Char>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-169">The following code example demonstrates some of the methods in <xref:System.Char>.</span></span>  
  
 [!code-cpp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char [Type Level]/CPP/charstructure.cpp#23)]
 [!code-csharp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char [Type Level]/CS/charstructure.cs#23)]
 [!code-vb[System.Char &#91;Type Level&#93;#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char [Type Level]/VB/charstructure.vb#23)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="cf60a-170">この種類のすべてのメンバーは、スレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-170">All members of this type are thread safe.</span></span> <span data-ttu-id="cf60a-171">インスタンスの状態を変更する表示されるメンバーは、実際に新しい値で初期化された新しいインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-171">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="cf60a-172">として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによって。</span><span class="sxs-lookup"><span data-stu-id="cf60a-172">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-173">このインスタンスと指定したオブジェクトまたは値型とを比較し、並べ替え順序において、このインスタンスの位置が指定したオブジェクトまたは値型の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-173">Compares this instance to a specified object or value type, and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or value type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(char value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : char -&gt; int&#xA;override this.CompareTo : char -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cf60a-174">比較対象の <see cref="T:System.Char" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-174">A <see cref="T:System.Char" /> object to compare.</span></span></param>
        <summary><span data-ttu-id="cf60a-175">このインスタンスと指定した <see cref="T:System.Char" /> オブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Char" /> オブジェクトの前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-175">Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="cf60a-176">並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-176">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="cf60a-177">戻り値</span><span class="sxs-lookup"><span data-stu-id="cf60a-177">Return Value</span></span> 
 </term><description> <span data-ttu-id="cf60a-178">説明</span><span class="sxs-lookup"><span data-stu-id="cf60a-178">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="cf60a-179">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="cf60a-179">Less than zero</span></span> 
 </term><description> <span data-ttu-id="cf60a-180">このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-180">This instance precedes <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="cf60a-181">0</span><span class="sxs-lookup"><span data-stu-id="cf60a-181">Zero</span></span> 
 </term><description> <span data-ttu-id="cf60a-182">このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-182">This instance has the same position in the sort order as <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="cf60a-183">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="cf60a-183">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="cf60a-184">このインスタンスの位置が <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-184">This instance follows <paramref name="value" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-185">このメソッドを実装、<xref:System.IComparable%601?displayProperty=nameWithType>インターフェイスを実行よりも若干優れています、<xref:System.Char.CompareTo%2A?displayProperty=nameWithType>メソッドに変換することはありませんので、`value`オブジェクトに対するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="cf60a-185">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Char.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="cf60a-186">このメソッドによって実行される比較はこのインスタンスのエンコードされた値に基づいて、 `value`、辞書の特性にありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-186">The comparison performed by this method is based on the encoded values of this instance and `value`, not their lexicographical characteristics.</span></span>  
  
 <span data-ttu-id="cf60a-187">場合、<xref:System.Char.CompareTo%2A>メソッド パラメーターの型がビット数が少ない範囲が狭い、インスタンスの型よりも一部のプログラミング言語がより多くのビット値にパラメーターの値を変換する暗黙の拡大変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-187">If the <xref:System.Char.CompareTo%2A> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</span></span>  
  
 <span data-ttu-id="cf60a-188">たとえば、インスタンスの型が<xref:System.Int32>パラメーターの型と<xref:System.Byte>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-188">For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>.</span></span> <span data-ttu-id="cf60a-189">Microsoft C# コンパイラはパラメーターの値を表す命令を生成、<xref:System.Int32>オブジェクト、し、生成、<xref:System.Int32.CompareTo%2A?displayProperty=nameWithType>の値を比較するメソッド、<xref:System.Int32>インスタンスと<xref:System.Int32>パラメーター表現。</span><span class="sxs-lookup"><span data-stu-id="cf60a-189">The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.</span></span>  
  
 <span data-ttu-id="cf60a-190">通常、暗黙の拡大変換は、数値型で実行されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-190">Typically, implicit widening conversions are performed on numeric types.</span></span> <span data-ttu-id="cf60a-191">コンパイラの拡大変換が実行を決定する、プログラミング言語のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-191">Consult your programming language's documentation to determine if its compiler performs widening conversions.</span></span> <span data-ttu-id="cf60a-192">コンパイラがパラメーターのボックスし、呼び出し命令を生成するインスタンスとパラメーターの型の不一致と適切な変換が使用できない場合、<xref:System.Char.CompareTo%2A>を受け取るオーバー ロードを<xref:System.Object>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="cf60a-192">If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <xref:System.Char.CompareTo%2A> overload that takes an <xref:System.Object> parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-193">次のコード例に示しますジェネリックと非ジェネリック バージョンの`CompareTo`いくつかの値と参照型のメソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-193">The following code example demonstrates generic and non-generic versions of the `CompareTo` method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cf60a-194">このインスタンスと比較するオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-194">An object to compare this instance to, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-195">このインスタンスと指定したオブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Object" /> の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-195">Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-196">並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-196">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="cf60a-197">戻り値</span><span class="sxs-lookup"><span data-stu-id="cf60a-197">Return Value</span></span> 
 </term><description> <span data-ttu-id="cf60a-198">説明</span><span class="sxs-lookup"><span data-stu-id="cf60a-198">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="cf60a-199">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="cf60a-199">Less than zero</span></span> 
 </term><description> <span data-ttu-id="cf60a-200">このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-200">This instance precedes <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="cf60a-201">0</span><span class="sxs-lookup"><span data-stu-id="cf60a-201">Zero</span></span> 
 </term><description> <span data-ttu-id="cf60a-202">このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-202">This instance has the same position in the sort order as <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="cf60a-203">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="cf60a-203">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="cf60a-204">このインスタンスの位置が <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-204">This instance follows <paramref name="value" />.</span></span>  
  
<span data-ttu-id="cf60a-205">または</span><span class="sxs-lookup"><span data-stu-id="cf60a-205">-or-</span></span> 
 <span data-ttu-id="cf60a-206"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-206"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-207"><xref:System.Char.CompareTo%2A>メソッドの実装、<xref:System.IComparable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="cf60a-207">The <xref:System.Char.CompareTo%2A> method implements the <xref:System.IComparable> interface.</span></span>  
  
 <span data-ttu-id="cf60a-208">`value`パラメーターである必要があります`null`のインスタンスまたは<xref:System.Char>、それ以外の例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-208">The `value` parameter must be `null` or an instance of <xref:System.Char>; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="cf60a-209">このメソッドによって実行される比較はこのインスタンスのエンコードされた値に基づいて、 `value`、辞書の特性に必須ではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-209">The comparison performed by this method is based on the encoded values of this instance and `value`, not necessarily their lexicographical characteristics.</span></span> <span data-ttu-id="cf60a-210">任意のインスタンスの<xref:System.Char>、その値に関係なくと見なされますより大きい`null`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-210">Any instance of <xref:System.Char>, regardless of its value, is considered greater than `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-211">次のコード例に示します<xref:System.Char.CompareTo%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-211">The following code example demonstrates <xref:System.Char.CompareTo%2A>.</span></span>  
  
 [!code-cpp[System.Char.CompareTo#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.CompareTo/CPP/compareto.cpp#19)]
 [!code-csharp[System.Char.CompareTo#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.CompareTo/CS/compareto.cs#19)]
 [!code-vb[System.Char.CompareTo#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.CompareTo/VB/compareto.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cf60a-212"><paramref name="value" /> は <see cref="T:System.Char" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-212"><paramref name="value" /> is not a <see cref="T:System.Char" /> object.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFromUtf32">
      <MemberSignature Language="C#" Value="public static string ConvertFromUtf32 (int utf32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ConvertFromUtf32(int32 utf32) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertFromUtf32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertFromUtf32 (utf32 As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ConvertFromUtf32(int utf32);" />
      <MemberSignature Language="F#" Value="static member ConvertFromUtf32 : int -&gt; string" Usage="System.char.ConvertFromUtf32 utf32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf32" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="utf32"><span data-ttu-id="cf60a-213">21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="cf60a-213">A 21-bit Unicode code point.</span></span></param>
        <summary><span data-ttu-id="cf60a-214">指定された Unicode コード ポイントを UTF-16 エンコードの文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-214">Converts the specified Unicode code point into a UTF-16 encoded string.</span></span></summary>
        <returns><span data-ttu-id="cf60a-215"><paramref name="utf32" /> パラメーターに指定されたコード ポイントに対応する、単一の <see cref="T:System.Char" /> オブジェクトから成る文字列または <see cref="T:System.Char" /> オブジェクトのサロゲート ペアから成る文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-215">A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-216">このメソッドを使用して、メソッドなど、文字列をテストする前に、21 ビットの Unicode コード ポイントを utf-16 でエンコードされた文字列に変換する<xref:System.Char.IsLowSurrogate%28System.Char%29>と<xref:System.Char.IsHighSurrogate%28System.Char%29>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-216">Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <xref:System.Char.IsLowSurrogate%28System.Char%29> and <xref:System.Char.IsHighSurrogate%28System.Char%29>.</span></span>  
  
 <span data-ttu-id="cf60a-217">基本多言語面 (BMP) 外の有効なコード ポイントは、常に有効なサロゲート ペアを生成します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-217">A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair.</span></span> <span data-ttu-id="cf60a-218">ただし、変換で言語的な処理が使用されていないために、BMP 内の有効なコード ポイントは Unicode 標準に従って、有効な結果を生成されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-218">However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion.</span></span> <span data-ttu-id="cf60a-219">そのため、使用して、 <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> utf-32 データ一括 utf-16 データを一括で変換するクラス。</span><span class="sxs-lookup"><span data-stu-id="cf60a-219">For that reason, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class to convert bulk UTF-32 data into bulk UTF-16 data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-220">次のコード例に示します、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-220">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-221"><paramref name="utf32" /> は U+0 から U+10FFFF までの範囲の有効な 21 ビット Unicode コード ポイントではありません。これには、U+D800 から U+DFFF までの範囲のサロゲート ペアは含まれません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-221"><paramref name="utf32" /> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</span></span></exception>
        <altmember cref="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertToUtf32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-222">UTF-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-222">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (highSurrogate As Char, lowSurrogate As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : char * char -&gt; int" Usage="System.char.ConvertToUtf32 (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lowSurrogate" Type="System.Char" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="cf60a-223">上位サロゲートのコード単位 (U+D800 から U+DBFF までのコード単位)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-223">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="cf60a-224">下位サロゲートのコード単位 (U+DC00 から U+DFFF までのコード単位)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-224">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</span></span></param>
        <summary><span data-ttu-id="cf60a-225">UTF-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-225">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="cf60a-226"><paramref name="highSurrogate" /> パラメーターおよび <paramref name="lowSurrogate" /> パラメーターによって表される 21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="cf60a-226">The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-227">21 ビットの Unicode コード ポイントにサロゲート ペアを変換するのにには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-227">Use this method to convert a surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="cf60a-228">Utf-32 データに utf-16 データに変換する、<xref:System.Text.UTF32Encoding?displayProperty=nameWithType>クラス。</span><span class="sxs-lookup"><span data-stu-id="cf60a-228">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="cf60a-229">通常、utf-16 エンコードと、16 ビット コードの単位として 1 つの Unicode 文字を表します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-229">Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit.</span></span> <span data-ttu-id="cf60a-230">ただし、サロゲート ペアは、単一の抽象文字を 2 つの 16 ビット コードの単位として表すことを許可するもサポートしています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-230">However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units.</span></span> <span data-ttu-id="cf60a-231">これらの 2 つ<xref:System.Char>オブジェクトは、u+d800 ~ U+DBFF の最初の (高) のサロゲートと 2 つ目の (低) のサロゲートの U+DFFF を u+dc00 からその範囲にコードの単位に必要があります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-231">These two <xref:System.Char> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate.</span></span> <span data-ttu-id="cf60a-232">サロゲート ペアが utf-16 でのみサポートされているエンコードします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-232">Surrogate pairs are supported only by UTF-16 encoding.</span></span> <span data-ttu-id="cf60a-233">このメソッドは、utf-32 エンコーディングを使用して文字に変換される utf-16 のサロゲート ペアで表される文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-233">This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-234">次のコード例に示します、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-234">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-235"><paramref name="highSurrogate" /> が U+D800 から U+DBFF までの範囲内にないか、または <paramref name="lowSurrogate" /> が U+DC00 から U+DFFF までの範囲内にありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-235"><paramref name="highSurrogate" /> is not in the range U+D800 through U+DBFF, or <paramref name="lowSurrogate" /> is not in the range U+DC00 through U+DFFF.</span></span></exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : string * int -&gt; int" Usage="System.char.ConvertToUtf32 (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-236">文字またはサロゲート ペアを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-236">A string that contains a character or surrogate pair.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-237"><paramref name="s" /> 内の文字またはサロゲート ペアのインデックス位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-237">The index position of the character or surrogate pair in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-238">文字列中の指定位置にある UTF-16 エンコード文字またはサロゲート ペアの値を、Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-238">Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="cf60a-239"><paramref name="s" /> パラメーター内の、<paramref name="index" /> パラメーターによって指定された位置にある文字またはサロゲート ペアが表す、21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="cf60a-239">The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-240">21 ビットの Unicode コード ポイントに文字またはサロゲート ペアを変換するのにには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-240">Use this method to convert a character or surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="cf60a-241">Utf-32 データに utf-16 データに変換する、<xref:System.Text.UTF32Encoding?displayProperty=nameWithType>クラス。</span><span class="sxs-lookup"><span data-stu-id="cf60a-241">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-242">次のコード例に示します、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-242">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-243"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-243"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-244"><paramref name="index" /> が <paramref name="s" /> 内の位置ではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-244"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cf60a-245">指定されたインデックスの位置には、サロゲート ペアが含まれています。ペアの最初の文字が有効な上位サロゲートではないか、または 2 番目の文字が有効な下位サロゲートではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-245">The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</span></span></exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-246">対象のインスタンスが、指定したオブジェクトまたは <see cref="T:System.Char" /> 値に等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-246">Returns a value that indicates whether this instance is equal to a specified object or <see cref="T:System.Char" /> value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (char obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(char obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(char obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : char -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="cf60a-247">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-247">An object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="cf60a-248">対象のインスタンスが、指定した <see cref="T:System.Char" /> オブジェクトに等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-248">Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="cf60a-249"><paramref name="obj" /> パラメーターがこのインスタンスの値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-249"><see langword="true" /> if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-250">このメソッドは、<xref:System.IEquatable%601?displayProperty=nameWithType>インターフェイス、および実行よりも若干優れて<xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType>ボックス化解除する必要はないため、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="cf60a-250">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> because it does not need to unbox the `obj` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="cf60a-251">このインスタンスと比較するオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-251">An object to compare with this instance or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-252">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-252">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="cf60a-253"><paramref name="obj" /> が <see cref="T:System.Char" /> のインスタンスで、このインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-253"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-254">このメソッドによって実行される比較はこのインスタンスのエンコードされた値に基づいて、 `obj`、辞書の特性に必須ではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-254">The comparison performed by this method is based on the encoded values of this instance and `obj`, not necessarily their lexicographical characteristics.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-255">次のコード例に示します<xref:System.Char.Equals%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-255">The following code example demonstrates <xref:System.Char.Equals%2A>.</span></span>  
  
 [!code-cpp[System.Char.Equals#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Equals/CPP/equals.cpp#20)]
 [!code-csharp[System.Char.Equals#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Equals/CS/equals.cs#20)]
 [!code-vb[System.Char.Equals#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Equals/VB/equals.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="char.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf60a-256">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-256">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="cf60a-257">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="cf60a-257">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-258">指定された Unicode 文字の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-258">Converts a specified numeric Unicode character to a double-precision floating-point number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (c As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char c);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.char.GetNumericValue c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-259">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-259">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="cf60a-260">指定された Unicode の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-260">Converts the specified numeric Unicode character to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="cf60a-261">この文字が数字を表す場合は <paramref name="c" /> の数値。それ以外の場合は -1.0。</span><span class="sxs-lookup"><span data-stu-id="cf60a-261">The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-262">`c`パラメーターである必要があります、<xref:System.Char>の数値の値を表現します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-262">The `c` parameter must be the <xref:System.Char> representation of a numeric value.</span></span> <span data-ttu-id="cf60a-263">たとえば場合、`c`が「5」の場合、戻り値は 5 です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-263">For example, if `c` is "5", the return value is 5.</span></span> <span data-ttu-id="cf60a-264">ただし場合、 `c` "z"は、戻り値は-1.0。</span><span class="sxs-lookup"><span data-stu-id="cf60a-264">However, if `c` is "z", the return value is -1.0.</span></span>  
  
 <span data-ttu-id="cf60a-265">次のいずれかのメンバーである場合にのみ、文字が関連付けられている数値<xref:System.Globalization.UnicodeCategory>カテゴリ: `DecimalDigitNumber`、 `LetterNumber`、または`OtherNumber`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-265">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>  
  
 <span data-ttu-id="cf60a-266"><xref:System.Char.GetNumericValue%2A>メソッド`c`単一言語の文字に対応し、その文字が 10 進数字に変換できるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-266">The <xref:System.Char.GetNumericValue%2A> method assumes that `c` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit.</span></span> <span data-ttu-id="cf60a-267">ただし、Unicode 標準の数値が 2 で表されます<xref:System.Char>サロゲート ペアを形成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-267">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="cf60a-268">たとえば、番号付けシステム Aegean は U + U + 10133 を通じて 10107 のコード ポイントで構成されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-268">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="cf60a-269">次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-269">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="cf60a-270">例を示しますから出力として、<xref:System.Char.GetNumericValue%28System.Char%29>メソッドは、上位サロゲートまたは下位サロゲートのこの文字のいずれかが渡された場合に-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-270">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</span></span>  
  
 [!code-csharp[System.Char.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#2)]
 [!code-vb[System.Char.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-271">次の例で<xref:System.Char.GetNumericValue%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-271">The following example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.char.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-272"><see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-272">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-273"><paramref name="s" /> 内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-273">The character position in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-274">指定した文字列の指定位置にある Unicode の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-274">Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="cf60a-275">この文字が数字の場合は、<paramref name="index" /> の <paramref name="s" /> の位置のこの文字の数値。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="cf60a-275">The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-276">`s`パラメーターが数値の文字列形式にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-276">The `s` parameter must be the string representation of a numeric value.</span></span> <span data-ttu-id="cf60a-277">たとえば場合、位置にある文字`index`で`s`が「5」の場合、戻り値は 5 です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-277">For example, if the character at position `index` in `s` is "5", the return value is 5.</span></span> <span data-ttu-id="cf60a-278">ただし場合、位置にある文字`index`で`s`"z"は、戻り値は-1。</span><span class="sxs-lookup"><span data-stu-id="cf60a-278">However, if the character at position `index` in `s` is "z", the return value is -1.</span></span>  
  
 <span data-ttu-id="cf60a-279">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-279">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-280">次のいずれかのメンバーである場合にのみ、文字が関連付けられている数値<xref:System.Globalization.UnicodeCategory>カテゴリ: `DecimalDigitNumber`、 `LetterNumber`、または`OtherNumber`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-280">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>  
  
 <span data-ttu-id="cf60a-281">場合、<xref:System.Char>位置にあるオブジェクト`index`、有効なサロゲート ペアの最初の文字は、<xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29>メソッドは、サロゲート ペアが数字を形成するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-281">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="cf60a-282">たとえば、番号付けシステム Aegean は U + U + 10133 を通じて 10107 のコード ポイントで構成されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-282">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="cf60a-283">次の例では、 <xref:System.Char.ConvertFromUtf32%2A> Aegean の個々 の数を表す文字列をインスタンス化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-283">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number.</span></span> <span data-ttu-id="cf60a-284">例を示しますから出力として、 <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> Aegean の数の上位サロゲートが渡される場合、メソッドが適切な値を返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-284">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number.</span></span> <span data-ttu-id="cf60a-285">ただし、下位のサロゲート、渡される場合、下位サロゲートで分離のみを考慮し、-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-285">However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</span></span>  
  
 [!code-csharp[System.Char.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#3)]
 [!code-vb[System.Char.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-286">次のコード例に示します<xref:System.Char.GetNumericValue%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-286">The following code example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-287"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-287"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-288"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-288"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="char.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf60a-289"><see cref="T:System.TypeCode" /> 値型の <see cref="T:System.Char" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-289">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-290">列挙型定数 <see cref="F:System.TypeCode.Char" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-290">The enumerated constant, <see cref="F:System.TypeCode.Char" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-291">Unicode 文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-291">Categorizes a Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (c As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char c);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-292">分類する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-292">The Unicode character to categorize.</span></span></param>
        <summary><span data-ttu-id="cf60a-293">指定された Unicode 文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-293">Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="cf60a-294"><paramref name="c" /> が含まれているグループを識別する <see cref="T:System.Globalization.UnicodeCategory" /> 値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-294">A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-295"><xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは常に返しません同じ<xref:System.Globalization.UnicodeCategory>値として、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドの特定の文字をパラメーターとして渡されるとします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-295">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="cf60a-296"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドは現在のバージョンの Unicode 標準を反映するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-296">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="cf60a-297">これに対し、ですが、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは通常、Unicode 規格の現在のバージョンを反映、以前のバージョンの標準に基づく文字のカテゴリを返す可能性がありますまたはの順序では、現在の標準からとは異なるカテゴリが返されます旧バージョンとの互換性を維持します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-297">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="cf60a-298">使用すること勧めその結果、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドの代わりに<xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-298">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cf60a-299">以降では、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字を分類に基づいて[、Unix の標準的なバージョン 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-299">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="cf60a-300">.NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[、Unix の標準的なバージョン 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-300">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-301">次のコード例に示します<xref:System.Char.GetUnicodeCategory%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-301">The following code example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-302"><see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-302">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-303"><paramref name="s" /> 内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-303">The character position in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-304">指定した文字列の指定位置にある文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-304">Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="cf60a-305"><see cref="T:System.Globalization.UnicodeCategory" /> の中で <paramref name="index" /> の位置の文字が含まれるグループを識別する <paramref name="s" /> 列挙定数。</span><span class="sxs-lookup"><span data-stu-id="cf60a-305">A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-306">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-306">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-307"><xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは常に返しません同じ<xref:System.Globalization.UnicodeCategory>値として、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドの特定の文字をパラメーターとして渡されるとします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-307">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="cf60a-308"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドは現在のバージョンの Unicode 標準を反映するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-308">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="cf60a-309">これに対し、ですが、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>メソッドは通常、Unicode 規格の現在のバージョンを反映、以前のバージョンの標準に基づく文字のカテゴリを返す可能性がありますまたはの順序では、現在の標準からとは異なるカテゴリが返されます旧バージョンとの互換性を維持します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-309">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="cf60a-310">使用すること勧めその結果、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドの代わりに<xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-310">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cf60a-311">以降では、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字を分類に基づいて[、Unix の標準的なバージョン 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-311">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="cf60a-312">.NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[、Unix の標準的なバージョン 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-312">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-313">次の例で<xref:System.Char.GetUnicodeCategory%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-313">The following example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-314"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-314"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-315"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-315"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsControl">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-316">指定した Unicode 文字が、制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-316">Indicates whether a specified Unicode character is categorized as a control character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-317">制御文字の書式を設定し、確認、BEL、CR、FF、LF、および VT. などの他の印刷されない文字</span><span class="sxs-lookup"><span data-stu-id="cf60a-317">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="cf60a-318">\U001F、\U007F でに \U0000 と制御文字を \U009F に \U0080 から、標準の Unicode コード ポイントが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-318">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="cf60a-319">これらの値は、Unicode 標準に従っての使用がそれ以外の場合、アプリケーションによって定義されている場合を除き、制御文字として解釈されるは。</span><span class="sxs-lookup"><span data-stu-id="cf60a-319">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="cf60a-320">メンバーである有効なコントロール文字、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-320">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(char c);" />
      <MemberSignature Language="F#" Value="static member IsControl : char -&gt; bool" Usage="System.char.IsControl c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-321">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-321">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-322">指定した Unicode 文字が、制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-322">Indicates whether the specified Unicode character is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="cf60a-323"><paramref name="c" /> が制御文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-323"><see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-324">制御文字の書式を設定し、確認、BEL、CR、FF、LF、および VT. などの他の印刷されない文字</span><span class="sxs-lookup"><span data-stu-id="cf60a-324">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="cf60a-325">T、Unicode 規格では、\U001F、\U007F でに \U0000 と制御文字を \U009F に \U0080 から、コード ポイントが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-325">T The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="cf60a-326">これらの値は、Unicode 標準に従っての使用がそれ以外の場合、アプリケーションによって定義されている場合を除き、制御文字として解釈されるは。</span><span class="sxs-lookup"><span data-stu-id="cf60a-326">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="cf60a-327">メンバーである有効なコントロール文字、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-327">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-328">次の例では、各コントロールの文字の Unicode コード ポイントが一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-328">The following example lists the Unicode code point of each of the control characters.</span></span>  
  
 [!code-cpp[System.Char.IsControl#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol1.cpp#1)]
 [!code-csharp[System.Char.IsControl#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl1.cs#1)]
 [!code-vb[System.Char.IsControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsControl : string * int -&gt; bool" Usage="System.char.IsControl (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-329">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-329">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-330"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-330">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-331">指定した文字列の指定位置にある文字が制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-331">Indicates whether the character at the specified position in a specified string is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="cf60a-332"><see langword="true" /> の <paramref name="index" /> の位置にある文字が制御文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-332"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-333">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-333">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-334">制御文字の書式を設定し、確認、BEL、CR、FF、LF、および VT. などの他の印刷されない文字</span><span class="sxs-lookup"><span data-stu-id="cf60a-334">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="cf60a-335">\U001F、\U007F でに \U0000 と制御文字を \U009F に \U0080 から、標準の Unicode コード ポイントが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-335">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="cf60a-336">これらの値は、Unicode 標準に従っての使用がそれ以外の場合、アプリケーションによって定義されている場合を除き、制御文字として解釈されるは。</span><span class="sxs-lookup"><span data-stu-id="cf60a-336">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="cf60a-337">メンバーである有効なコントロール文字、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-337">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-338">次の例では、文字列内の文字を列挙し、いずれかが制御文字であるかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-338">The following example enumerates the characters in a string and determines whether any are control characters.</span></span>  
  
 [!code-cpp[System.Char.IsControl#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol2.cpp#2)]
 [!code-csharp[System.Char.IsControl#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl2.cs#2)]
 [!code-vb[System.Char.IsControl#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-339"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-339"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-340"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-340"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-341">Unicode 文字が 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-341">Indicates whether a Unicode character is categorized as a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-342">有効な数字のメンバーである、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-342">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsDigit : char -&gt; bool" Usage="System.char.IsDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-343">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-343">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-344">指定した Unicode 文字が、10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-344">Indicates whether the specified Unicode character is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="cf60a-345"><see langword="true" /> が 10 進数の数字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-345"><see langword="true" /> if <paramref name="c" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-346">このメソッドを決定かどうかを<xref:System.Char>は基数 10 進数です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-346">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="cf60a-347">これに対して<xref:System.Char.IsNumber%2A>を決定するかどうかを`Char`の任意の数値の Unicode カテゴリは。</span><span class="sxs-lookup"><span data-stu-id="cf60a-347">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a `Char` is of any numeric Unicode category.</span></span> <span data-ttu-id="cf60a-348">番号には、分数、添字、上付き文字、ローマ数字、通貨分子、丸付きの数字、およびスクリプト固有の数字などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-348">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>  
  
 <span data-ttu-id="cf60a-349">有効な数字のメンバーである、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-349">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-350">次のコード例に示します<xref:System.Char.IsDigit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-350">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsDigit : string * int -&gt; bool" Usage="System.char.IsDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-351">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-351">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-352"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-352">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-353">指定した文字列の指定位置にある文字が 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-353">Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="cf60a-354"><see langword="true" /> の <paramref name="index" /> の位置にある文字が 10 進数の数字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="cf60a-354"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-355">このメソッドを決定かどうかを<xref:System.Char>は基数 10 進数です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-355">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="cf60a-356">これに対して<xref:System.Char.IsNumber%2A>を決定するかどうかを<xref:System.Char>の任意の数値の Unicode カテゴリは。</span><span class="sxs-lookup"><span data-stu-id="cf60a-356">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="cf60a-357">番号には、分数、添字、上付き文字、ローマ数字、通貨分子、丸付きの数字、およびスクリプト固有の数字などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-357">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>  
  
 <span data-ttu-id="cf60a-358">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-358">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-359">有効な数字のメンバーである、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-359">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-360">次のコード例に示します<xref:System.Char.IsDigit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-360">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-361"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-361"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-362"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-362"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsHighSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-363">指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-363">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : char -&gt; bool" Usage="System.char.IsHighSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-364">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-364">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-365">指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-365">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
        <returns><span data-ttu-id="cf60a-366"><see langword="true" /> パラメーターの数値が U+D800 から U+DBFF の範囲内にある場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-366"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-367">16 ビットのコード ポイントを使用して 1 つの文字を表すだけでなく utf-16 エンコードにより、抽象文字を表現するサロゲート ペアと呼ばれ、2 つの 16 ビットのコード ポイントを使用しています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-367">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="cf60a-368">このペアの最初の要素は、上位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-368">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="cf60a-369">そのコード ポイントの範囲は、u+d800 から U+DBFF です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-369">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="cf60a-370">個々 のサロゲートには独自の解釈がありません。サロゲート ペアの一部として使用する場合にだけ有効になります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-370">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-371">次のコード例に示します、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-371">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : string * int -&gt; bool" Usage="System.char.IsHighSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-372">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-372">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-373"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-373">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-374">文字列中の指定された位置にある <see cref="T:System.Char" /> オブジェクトが、上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-374">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</span></span></summary>
        <returns><span data-ttu-id="cf60a-375"><see langword="true" /> パラメーターに指定された文字の数値が U+D800 から U+DBFF の範囲内にある場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-375"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-376">`index`パラメーターは 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-376">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="cf60a-377">16 ビットのコード ポイントを使用して 1 つの文字を表すだけでなく utf-16 エンコードにより、抽象文字を表現するサロゲート ペアと呼ばれ、2 つの 16 ビットのコード ポイントを使用しています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-377">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="cf60a-378">このペアの最初の要素は、上位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-378">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="cf60a-379">そのコード ポイントの範囲は、u+d800 から U+DBFF です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-379">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="cf60a-380">個々 のサロゲートには独自の解釈がありません。サロゲート ペアの一部として使用する場合にだけ有効になります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-380">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-381">次のコード例に示します、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-381">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-382"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-382"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-383"><paramref name="index" /> が <paramref name="s" /> 内の位置ではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-383"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-384">Unicode 文字が Unicode の文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-384">Indicates whether a Unicode character is categorized as a Unicode letter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-385">このメソッドを判断するかどうかを<xref:System.Char>Unicode 文字の任意のカテゴリのメンバーであります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-385">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="cf60a-386">Unicode 文字を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-386">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="cf60a-387">U+0041 (ラテン CAPITAL LETTER A) U + 005A 経由などの大文字 (LATIN CAPITAL LETTER Z)、または u+0400 (キリル大文字 IE WITH GRAVE) を通じて U + 042F (キリル文字の大文字の文字や)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-387">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="cf60a-388">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-388">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-389">U + 0061 (ラテン文字 A) U + 007A 経由などの小文字 (ラテン小さな文字 Z)、または U + 03AC (ギリシャ語小さな文字アルファとトノス) U + 03CE を通じて (ギリシャ語小さな文字オメガでトノス)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-389">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="cf60a-390">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-390">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-391">タイトルの大文字と小文字、文字 U + 01 C 5 など (LATIN CAPITAL LETTER D で小さな文字 Z で CARON) と U + 1FFC (ギリシャ語大文字オメガで PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-391">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="cf60a-392">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-392">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-393">U + 02B0 などの修飾子 (修飾子文字の小さな H) から U + 02C 1 (修飾子文字反転 GLOTTAL を停止する)、または U + 1D2C (修飾子文字の大文字 A) U + 1D 61 (修飾子文字の小さなカイ) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-393">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="cf60a-394">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-394">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-395">U + 05 D 0 (ヘブライ語文字 ALEF) U + 05EA を通じてなどその他の文字 (ヘブライ語文字 TAV) U + 0621 (アラビア語文字 HAMZA) U + 063A を通じて (アラビア語文字 GHAIN)、または U + 4E00 (\<CJK 漢字、最初 >) U + 9 FC 3 を通じて (\<CJK 漢字、最終>)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-395">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="cf60a-396">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-396">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetter : char -&gt; bool" Usage="System.char.IsLetter c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-397">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-397">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-398">指定した Unicode 文字が Unicode 文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-398">Indicates whether the specified Unicode character is categorized as a Unicode letter.</span></span></summary>
        <returns><span data-ttu-id="cf60a-399"><see langword="true" /> が文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-399"><see langword="true" /> if <paramref name="c" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-400">このメソッドを判断するかどうかを<xref:System.Char>Unicode 文字の任意のカテゴリのメンバーであります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-400">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="cf60a-401">Unicode 文字を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-401">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="cf60a-402">U+0041 (ラテン CAPITAL LETTER A) U + 005A 経由などの大文字 (LATIN CAPITAL LETTER Z)、または u+0400 (キリル大文字 IE WITH GRAVE) を通じて U + 042F (キリル文字の大文字の文字や)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-402">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="cf60a-403">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-403">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-404">U + 0061 (ラテン文字 A) U + 007A 経由などの小文字 (ラテン小さな文字 Z)、または U + 03AC (ギリシャ語小さな文字アルファとトノス) U + 03CE を通じて (ギリシャ語小さな文字オメガでトノス)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-404">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="cf60a-405">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-405">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-406">タイトルの大文字と小文字、文字 U + 01 C 5 など (LATIN CAPITAL LETTER D で小さな文字 Z で CARON) と U + 1FFC (ギリシャ語大文字オメガで PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-406">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="cf60a-407">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-407">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-408">U + 02B0 などの修飾子 (修飾子文字の小さな H) から U + 02C 1 (修飾子文字反転 GLOTTAL を停止する)、または U + 1D2C (修飾子文字の大文字 A) U + 1D 61 (修飾子文字の小さなカイ) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-408">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="cf60a-409">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-409">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-410">U + 05 D 0 (ヘブライ語文字 ALEF) U + 05EA を通じてなどその他の文字 (ヘブライ語文字 TAV) U + 0621 (アラビア語文字 HAMZA) U + 063A を通じて (アラビア語文字 GHAIN)、または U + 4E00 (\<CJK 漢字、最初 >) U + 9 FC 3 を通じて (\<CJK 漢字、最終>)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-410">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="cf60a-411">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-411">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-412">次のコード例に示します<xref:System.Char.IsLetter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-412">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetter : string * int -&gt; bool" Usage="System.char.IsLetter (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-413">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-413">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-414"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-414">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-415">指定した文字列の指定位置にある文字が、Unicode 文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-415">Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</span></span></summary>
        <returns><span data-ttu-id="cf60a-416"><paramref name="s" /> の <paramref name="index" /> の位置にある文字が文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-416"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-417">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-417">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-418">このメソッドは、文字列で指定したインデックス位置にある文字の Unicode 文字の任意のカテゴリのメンバーであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-418">This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter.</span></span> <span data-ttu-id="cf60a-419">Unicode 文字を以下に示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-419">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="cf60a-420">U+0041 (ラテン CAPITAL LETTER A) U + 005A 経由などの大文字 (LATIN CAPITAL LETTER Z)、または u+0400 (キリル大文字 IE WITH GRAVE) を通じて U + 042F (キリル文字の大文字の文字や)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-420">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="cf60a-421">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-421">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-422">U + 0061 (ラテン文字 A) U + 007A 経由などの小文字 (ラテン小さな文字 Z)、または U + 03AC (ギリシャ語小さな文字アルファとトノス) U + 03CE を通じて (ギリシャ語小さな文字オメガでトノス)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-422">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="cf60a-423">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-423">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-424">タイトルの大文字と小文字、文字 U + 01 C 5 など (LATIN CAPITAL LETTER D で小さな文字 Z で CARON) と U + 1FFC (ギリシャ語大文字オメガで PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-424">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="cf60a-425">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-425">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-426">U + 02B0 などの修飾子 (修飾子文字の小さな H) から U + 02C 1 (修飾子文字反転 GLOTTAL を停止する)、または U + 1D2C (修飾子文字の大文字 A) U + 1D 61 (修飾子文字の小さなカイ) を通じてします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-426">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="cf60a-427">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-427">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="cf60a-428">U + 05 D 0 (ヘブライ語文字 ALEF) U + 05EA を通じてなどその他の文字 (ヘブライ語文字 TAV) U + 0621 (アラビア語文字 HAMZA) U + 063A を通じて (アラビア語文字 GHAIN)、または U + 4E00 (\<CJK 漢字、最初 >) U + 9 FC 3 を通じて (\<CJK 漢字、最終>)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-428">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="cf60a-429">これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-429">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-430">次のコード例に示します<xref:System.Char.IsLetter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-430">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-431"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-431"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-432"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-432"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetterOrDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-433">Unicode 文字が文字または 10 進数の数字であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-433">Indicates whether a Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-434">有効な文字および 10 進数字では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`、 `LowercaseLetter`、 `TitlecaseLetter`、 `ModifierLetter`、 `OtherLetter`、または`DecimalDigitNumber`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-434">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : char -&gt; bool" Usage="System.char.IsLetterOrDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-435">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-435">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-436">指定した Unicode 文字が文字または 10 進数の数字なのかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-436">Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="cf60a-437"><see langword="true" /> が文字または 10 進数の数字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-437"><see langword="true" /> if <paramref name="c" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-438">有効な文字および 10 進数字では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`、 `LowercaseLetter`、 `TitlecaseLetter`、 `ModifierLetter`、 `OtherLetter`、または`DecimalDigitNumber`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-438">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-439">次のコード例に示します<xref:System.Char.IsLetterOrDigit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-439">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : string * int -&gt; bool" Usage="System.char.IsLetterOrDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-440">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-440">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-441"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-441">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-442">指定した文字列の指定位置にある文字が文字または 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-442">Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="cf60a-443"><see langword="true" /> の <paramref name="index" /> の位置にある文字が文字または 10 進数の数字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-443"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-444">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-444">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-445">有効な文字および 10 進数字では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`、 `LowercaseLetter`、 `TitlecaseLetter`、 `ModifierLetter`、 `OtherLetter`、または`DecimalDigitNumber`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-445">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-446">次のコード例に示します<xref:System.Char.IsLetterOrDigit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-446">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-447"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-447"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-448"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-448"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-449">Unicode 文字が小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-449">Indicates whether a Unicode character is categorized as a lowercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(char c);" />
      <MemberSignature Language="F#" Value="static member IsLower : char -&gt; bool" Usage="System.char.IsLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-450">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-450">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-451">指定した Unicode 文字が小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-451">Indicates whether the specified Unicode character is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="cf60a-452"><paramref name="c" /> が小文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-452"><see langword="true" /> if <paramref name="c" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-453">有効な小文字で、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>:`LowercaseLetter`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-453">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-454">次のコード例に示します<xref:System.Char.IsLower%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-454">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLower : string * int -&gt; bool" Usage="System.char.IsLower (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-455">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-455">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-456"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-456">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-457">指定した文字列の指定位置にある文字が、小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-457">Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="cf60a-458"><see langword="true" /> の <paramref name="index" /> の位置にある文字が小文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-458"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-459">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-459">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-460">有効な小文字で、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>:`LowercaseLetter`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-460">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-461">次のコード例に示します<xref:System.Char.IsLower%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-461">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-462"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-462"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-463"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-463"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLowSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-464">指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-464">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : char -&gt; bool" Usage="System.char.IsLowSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-465">評価する文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-465">The character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-466">指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-466">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
        <returns><span data-ttu-id="cf60a-467"><see langword="true" /> パラメーターの数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-467"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-468">16 ビットのコード ポイントを使用して 1 つの文字を表すだけでなく utf-16 エンコードにより、抽象文字を表現するサロゲート ペアと呼ばれ、2 つの 16 ビットのコード ポイントを使用しています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-468">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="cf60a-469">このペアの 2 番目の要素は、下位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-469">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="cf60a-470">そのコード ポイントは u+dc00 から U+DFFF の範囲にです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-470">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="cf60a-471">個々 のサロゲートには独自の解釈がありません。サロゲート ペアの一部として使用する場合にだけ有効になります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-471">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-472">次のコード例に示します、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-472">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : string * int -&gt; bool" Usage="System.char.IsLowSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-473">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-473">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-474"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-474">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-475">文字列のうち、指定された位置にある <see cref="T:System.Char" /> オブジェクトが、下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-475">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</span></span></summary>
        <returns><span data-ttu-id="cf60a-476"><see langword="true" /> パラメーターに指定された文字の数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-476"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-477">`index`パラメーターは 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-477">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="cf60a-478">16 ビットのコード ポイントを使用して 1 つの文字を表すだけでなく utf-16 エンコードにより、抽象文字を表現するサロゲート ペアと呼ばれ、2 つの 16 ビットのコード ポイントを使用しています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-478">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="cf60a-479">このペアの 2 番目の要素は、下位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-479">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="cf60a-480">そのコード ポイントは u+dc00 から U+DFFF の範囲にです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-480">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="cf60a-481">個々 のサロゲートには独自の解釈がありません。サロゲート ペアの一部として使用する場合にだけ有効になります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-481">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-482">次のコード例に示します、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-482">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-483"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-483"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-484"><paramref name="index" /> が <paramref name="s" /> 内の位置ではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-484"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNumber">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-485">Unicode 文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-485">Indicates whether a Unicode character is categorized as a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(char c);" />
      <MemberSignature Language="F#" Value="static member IsNumber : char -&gt; bool" Usage="System.char.IsNumber c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-486">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-486">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-487">指定された Unicode 文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-487">Indicates whether the specified Unicode character is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="cf60a-488"><see langword="true" /> が数字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-488"><see langword="true" /> if <paramref name="c" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-489">このメソッドを決定かどうかを<xref:System.Char>の任意の数値の Unicode カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-489">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="cf60a-490">数字のほかに、番号には、文字、分数、添字、上付き文字、ローマ数字、通貨の分子および丸付きの数値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-490">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="cf60a-491">このメソッドとは対照的です、<xref:System.Char.IsDigit%2A>メソッドを決定するかどうかを<xref:System.Char>は基数 10 進数です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-491">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cf60a-492"><xref:System.Char.IsNumber%28System.Char%29>文字列が (たとえば、メソッドを呼び出して、文字列内の各文字の) の数値文字構成かどうかを判断するメソッドは使用されません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-492">The <xref:System.Char.IsNumber%28System.Char%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="cf60a-493">文字列が数値の文字で構成されているかどうかを判断するのオーバー ロードのいずれかを呼び出して、`TryParse`メソッド (など<xref:System.Int32.TryParse%2A?displayProperty=nameWithType>または<xref:System.Double.TryParse%2A?displayProperty=nameWithType>整数または浮動小数点型のです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-493">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>  
  
 <span data-ttu-id="cf60a-494">有効な数字のメンバーである、 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>、 <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>、または<xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-494">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>  
  
 <span data-ttu-id="cf60a-495"><xref:System.Char.IsNumber%28System.Char%29>メソッド`c`単一言語の文字に対応し、その文字が数値を表しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-495">The <xref:System.Char.IsNumber%28System.Char%29> method assumes that `c` corresponds to a single linguistic character and checks whether that character represents a number.</span></span> <span data-ttu-id="cf60a-496">ただし、Unicode 標準の数値が 2 で表されます<xref:System.Char>サロゲート ペアを形成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-496">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="cf60a-497">たとえば、番号付けシステム Aegean は U + U + 10133 を通じて 10107 のコード ポイントで構成されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-497">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="cf60a-498">次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-498">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="cf60a-499">例を示しますから出力として、<xref:System.Char.IsNumber%28System.Char%29>メソッドを返します。`false`場合は、上位サロゲートまたは下位サロゲートのこの文字のいずれかを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-499">As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either a high surrogate or a low surrogate of this character.</span></span>  
  
 [!code-csharp[System.Char.IsNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#1)]
 [!code-vb[System.Char.IsNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-500">次の例で<xref:System.Char.IsNumber%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-500">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsNumber : string * int -&gt; bool" Usage="System.char.IsNumber (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-501">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-501">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-502"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-502">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-503">指定した文字列の指定位置にある文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-503">Indicates whether the character at the specified position in a specified string is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="cf60a-504"><paramref name="s" /> の <paramref name="index" /> の位置にある文字が数字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-504"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-505">このメソッドを決定かどうかを<xref:System.Char>の任意の数値の Unicode カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-505">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="cf60a-506">数字のほかに、番号には、文字、分数、添字、上付き文字、ローマ数字、通貨の分子および丸付きの数値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-506">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="cf60a-507">このメソッドとは対照的です、<xref:System.Char.IsDigit%2A>メソッドを決定するかどうかを<xref:System.Char>は基数 10 進数です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-507">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>  
  
 <span data-ttu-id="cf60a-508">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-508">Character positions in a string are indexed starting from zero.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cf60a-509"><xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>文字列が (たとえば、メソッドを呼び出して、文字列内の各文字の) の数値文字構成かどうかを判断するメソッドは使用されません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-509">The <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="cf60a-510">文字列が数値の文字で構成されているかどうかを判断するのオーバー ロードのいずれかを呼び出して、`TryParse`メソッド (など<xref:System.Int32.TryParse%2A?displayProperty=nameWithType>または<xref:System.Double.TryParse%2A?displayProperty=nameWithType>整数または浮動小数点型のです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-510">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>  
  
 <span data-ttu-id="cf60a-511">有効な数字のメンバーである、 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>、 <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>、または<xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-511">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>  
  
 <span data-ttu-id="cf60a-512">場合、<xref:System.Char>位置にあるオブジェクト`index`、有効なサロゲート ペアの最初の文字は、<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>メソッドは、サロゲート ペアが数字を形成するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-512">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="cf60a-513">たとえば、番号付けシステム Aegean は U + U + 10133 を通じて 10107 のコード ポイントで構成されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-513">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="cf60a-514">次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-514">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="cf60a-515">例を示しますから出力として、<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>メソッドを返します。`true`上位サロゲートの AEGEAN 番号 1 が渡される場合。</span><span class="sxs-lookup"><span data-stu-id="cf60a-515">As the output from the example shows, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method returns `true` if it is passed the high surrogate of AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="cf60a-516">ただし、下位のサロゲート、渡される場合、下位サロゲートのカテゴリのみを考慮し、返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-516">However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns `false`.</span></span>  
  
 [!code-csharp[System.Char.IsNumber#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#2)]
 [!code-vb[System.Char.IsNumber#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-517">次の例で<xref:System.Char.IsNumber%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-517">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-518"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-518"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-519"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-519"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPunctuation">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-520">Unicode 文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-520">Indicates whether a Unicode character is categorized as a punctuation mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-521">有効な区切り記号では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`、 `DashPunctuation`、 `OpenPunctuation`、 `ClosePunctuation`、 `InitialQuotePunctuation`、 `FinalQuotePunctuation`、または`OtherPunctuation`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-521">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="cf60a-522">次の表に示す Unicode コード ポイントに文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-522">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="cf60a-523">U+0021 U + 0023 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-523">U+0021 to U+0023</span></span>|<span data-ttu-id="cf60a-524">U + 060 C および U + 060 D</span><span class="sxs-lookup"><span data-stu-id="cf60a-524">U+060C and U+060D</span></span>|<span data-ttu-id="cf60a-525">U + U + 180A を 1800</span><span class="sxs-lookup"><span data-stu-id="cf60a-525">U+1800 to U+180A</span></span>|<span data-ttu-id="cf60a-526">U + U + 301F に 3014</span><span class="sxs-lookup"><span data-stu-id="cf60a-526">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="cf60a-527">U + U +002 に 0025</span><span class="sxs-lookup"><span data-stu-id="cf60a-527">U+0025 to U+002A</span></span>|<span data-ttu-id="cf60a-528">U+061B</span><span class="sxs-lookup"><span data-stu-id="cf60a-528">U+061B</span></span>|<span data-ttu-id="cf60a-529">U + 1944 および u+1945</span><span class="sxs-lookup"><span data-stu-id="cf60a-529">U+1944 and U+1945</span></span>|<span data-ttu-id="cf60a-530">U+3030</span><span class="sxs-lookup"><span data-stu-id="cf60a-530">U+3030</span></span>|  
|<span data-ttu-id="cf60a-531">U + 002 C U + 002F を</span><span class="sxs-lookup"><span data-stu-id="cf60a-531">U+002C to U+002F</span></span>|<span data-ttu-id="cf60a-532">U + 061E と U + 061F</span><span class="sxs-lookup"><span data-stu-id="cf60a-532">U+061E and U+061F</span></span>|<span data-ttu-id="cf60a-533">U + 19DE と U + 19DF</span><span class="sxs-lookup"><span data-stu-id="cf60a-533">U+19DE and U+19DF</span></span>|<span data-ttu-id="cf60a-534">U + 303D</span><span class="sxs-lookup"><span data-stu-id="cf60a-534">U+303D</span></span>|  
|<span data-ttu-id="cf60a-535">U + 003A と U + 003B</span><span class="sxs-lookup"><span data-stu-id="cf60a-535">U+003A and U+003B</span></span>|<span data-ttu-id="cf60a-536">U + U + 方位 066 d 066A</span><span class="sxs-lookup"><span data-stu-id="cf60a-536">U+066A to U+066D</span></span>|<span data-ttu-id="cf60a-537">U + 1A1E と U +1 a1f</span><span class="sxs-lookup"><span data-stu-id="cf60a-537">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="cf60a-538">30A0 U +</span><span class="sxs-lookup"><span data-stu-id="cf60a-538">U+30A0</span></span>|  
|<span data-ttu-id="cf60a-539">U + 003F と U + 0040</span><span class="sxs-lookup"><span data-stu-id="cf60a-539">U+003F and U+0040</span></span>|<span data-ttu-id="cf60a-540">U+06D4</span><span class="sxs-lookup"><span data-stu-id="cf60a-540">U+06D4</span></span>|<span data-ttu-id="cf60a-541">U + U + 1B60 に 1B5A</span><span class="sxs-lookup"><span data-stu-id="cf60a-541">U+1B5A to U+1B60</span></span>|<span data-ttu-id="cf60a-542">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="cf60a-542">U+30FB</span></span>|  
|<span data-ttu-id="cf60a-543">U + U + 005-D を 005B</span><span class="sxs-lookup"><span data-stu-id="cf60a-543">U+005B to U+005D</span></span>|<span data-ttu-id="cf60a-544">U + U + 070 d 0700</span><span class="sxs-lookup"><span data-stu-id="cf60a-544">U+0700 to U+070D</span></span>|<span data-ttu-id="cf60a-545">U + U + 2027 に 2010</span><span class="sxs-lookup"><span data-stu-id="cf60a-545">U+2010 to U+2027</span></span>|<span data-ttu-id="cf60a-546">U + A874 U + A877 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-546">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="cf60a-547">U+005F</span><span class="sxs-lookup"><span data-stu-id="cf60a-547">U+005F</span></span>|<span data-ttu-id="cf60a-548">U + U + 07F9 に 07F7</span><span class="sxs-lookup"><span data-stu-id="cf60a-548">U+07F7 to U+07F9</span></span>|<span data-ttu-id="cf60a-549">U+2030 U + 2043 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-549">U+2030 to U+2043</span></span>|<span data-ttu-id="cf60a-550">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="cf60a-550">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="cf60a-551">U+007B</span><span class="sxs-lookup"><span data-stu-id="cf60a-551">U+007B</span></span>|<span data-ttu-id="cf60a-552">U+0964 および u+0965</span><span class="sxs-lookup"><span data-stu-id="cf60a-552">U+0964 and U+0965</span></span>|<span data-ttu-id="cf60a-553">U + U + 2051 を 2045</span><span class="sxs-lookup"><span data-stu-id="cf60a-553">U+2045 to U+2051</span></span>|<span data-ttu-id="cf60a-554">U + FE19 に U+FE10</span><span class="sxs-lookup"><span data-stu-id="cf60a-554">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="cf60a-555">U+007D</span><span class="sxs-lookup"><span data-stu-id="cf60a-555">U+007D</span></span>|<span data-ttu-id="cf60a-556">U+0970</span><span class="sxs-lookup"><span data-stu-id="cf60a-556">U+0970</span></span>|<span data-ttu-id="cf60a-557">U + U + 205E に 2053</span><span class="sxs-lookup"><span data-stu-id="cf60a-557">U+2053 to U+205E</span></span>|<span data-ttu-id="cf60a-558">U + FE52 に U+FE30</span><span class="sxs-lookup"><span data-stu-id="cf60a-558">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="cf60a-559">U+00A1</span><span class="sxs-lookup"><span data-stu-id="cf60a-559">U+00A1</span></span>|<span data-ttu-id="cf60a-560">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="cf60a-560">U+0DF4</span></span>|<span data-ttu-id="cf60a-561">U + 207 D および U + 207E</span><span class="sxs-lookup"><span data-stu-id="cf60a-561">U+207D and  U+207E</span></span>|<span data-ttu-id="cf60a-562">U + FE54 U + FE61 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-562">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="cf60a-563">U+00AB</span><span class="sxs-lookup"><span data-stu-id="cf60a-563">U+00AB</span></span>|<span data-ttu-id="cf60a-564">U + U + 0E5B に 0E4F</span><span class="sxs-lookup"><span data-stu-id="cf60a-564">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="cf60a-565">U + 208 D および U + 208E</span><span class="sxs-lookup"><span data-stu-id="cf60a-565">U+208D and U+208E</span></span>|<span data-ttu-id="cf60a-566">U+FE63</span><span class="sxs-lookup"><span data-stu-id="cf60a-566">U+FE63</span></span>|  
|<span data-ttu-id="cf60a-567">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="cf60a-567">U+00AD</span></span>|<span data-ttu-id="cf60a-568">U + U + 0F12 に 0F04</span><span class="sxs-lookup"><span data-stu-id="cf60a-568">U+0F04 to U+0F12</span></span>|<span data-ttu-id="cf60a-569">U + の 2329 と 232A</span><span class="sxs-lookup"><span data-stu-id="cf60a-569">U+2329 and U+232A</span></span>|<span data-ttu-id="cf60a-570">U+FE68</span><span class="sxs-lookup"><span data-stu-id="cf60a-570">U+FE68</span></span>|  
|<span data-ttu-id="cf60a-571">U+00B7</span><span class="sxs-lookup"><span data-stu-id="cf60a-571">U+00B7</span></span>|<span data-ttu-id="cf60a-572">U + U + 0F3D に 0F3A</span><span class="sxs-lookup"><span data-stu-id="cf60a-572">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="cf60a-573">U + U + 2775 に 2768</span><span class="sxs-lookup"><span data-stu-id="cf60a-573">U+2768 to U+2775</span></span>|<span data-ttu-id="cf60a-574">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="cf60a-574">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="cf60a-575">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="cf60a-575">U+00BB</span></span>|<span data-ttu-id="cf60a-576">U+0F85</span><span class="sxs-lookup"><span data-stu-id="cf60a-576">U+0F85</span></span>|<span data-ttu-id="cf60a-577">U + 27C 6 U + 27C 5</span><span class="sxs-lookup"><span data-stu-id="cf60a-577">U+27C5 to U+27C6</span></span>|<span data-ttu-id="cf60a-578">U + FF01 U + FF03 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-578">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="cf60a-579">U+00BF</span><span class="sxs-lookup"><span data-stu-id="cf60a-579">U+00BF</span></span>|<span data-ttu-id="cf60a-580">U + 0FD0 と U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="cf60a-580">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="cf60a-581">U + U + 27EB に 27E6</span><span class="sxs-lookup"><span data-stu-id="cf60a-581">U+27E6 to U+27EB</span></span>|<span data-ttu-id="cf60a-582">U + FF05 U + FF0A に</span><span class="sxs-lookup"><span data-stu-id="cf60a-582">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="cf60a-583">U+037E</span><span class="sxs-lookup"><span data-stu-id="cf60a-583">U+037E</span></span>|<span data-ttu-id="cf60a-584">U + U + 104F に 104A</span><span class="sxs-lookup"><span data-stu-id="cf60a-584">U+104A to U+104F</span></span>|<span data-ttu-id="cf60a-585">U + U + 2998 に 2983</span><span class="sxs-lookup"><span data-stu-id="cf60a-585">U+2983 to U+2998</span></span>|<span data-ttu-id="cf60a-586">U + FF0C U + FF0F に</span><span class="sxs-lookup"><span data-stu-id="cf60a-586">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="cf60a-587">U+0387</span><span class="sxs-lookup"><span data-stu-id="cf60a-587">U+0387</span></span>|<span data-ttu-id="cf60a-588">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="cf60a-588">U+10FB</span></span>|<span data-ttu-id="cf60a-589">U + 29D 8 U + 29DB を</span><span class="sxs-lookup"><span data-stu-id="cf60a-589">U+29D8 to U+29DB</span></span>|<span data-ttu-id="cf60a-590">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="cf60a-590">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="cf60a-591">U + U + 055F に 055A</span><span class="sxs-lookup"><span data-stu-id="cf60a-591">U+055A to U+055F</span></span>|<span data-ttu-id="cf60a-592">U + U + 1368 に 1361</span><span class="sxs-lookup"><span data-stu-id="cf60a-592">U+1361 to U+1368</span></span>|<span data-ttu-id="cf60a-593">U + 29 FC および U + 29FD</span><span class="sxs-lookup"><span data-stu-id="cf60a-593">U+29FC and U+29FD</span></span>|<span data-ttu-id="cf60a-594">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="cf60a-594">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="cf60a-595">U + の 0589 と 058A</span><span class="sxs-lookup"><span data-stu-id="cf60a-595">U+0589 and U+058A</span></span>|<span data-ttu-id="cf60a-596">U + 166 D および U + 166E</span><span class="sxs-lookup"><span data-stu-id="cf60a-596">U+166D and U+166E</span></span>|<span data-ttu-id="cf60a-597">U + U + 2CFC に 2CF9</span><span class="sxs-lookup"><span data-stu-id="cf60a-597">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="cf60a-598">U + FF3B U + FF3D に</span><span class="sxs-lookup"><span data-stu-id="cf60a-598">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="cf60a-599">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="cf60a-599">U+05BE</span></span>|<span data-ttu-id="cf60a-600">U + 169B および U + 169 C</span><span class="sxs-lookup"><span data-stu-id="cf60a-600">U+169B and U+169C</span></span>|<span data-ttu-id="cf60a-601">U + 2CFE と U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="cf60a-601">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="cf60a-602">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="cf60a-602">U+FF3F</span></span>|  
|<span data-ttu-id="cf60a-603">U+05C0</span><span class="sxs-lookup"><span data-stu-id="cf60a-603">U+05C0</span></span>|<span data-ttu-id="cf60a-604">U + U + 16ED に 16EB</span><span class="sxs-lookup"><span data-stu-id="cf60a-604">U+16EB to U+16ED</span></span>|<span data-ttu-id="cf60a-605">U + U + 2E17 に 2E00</span><span class="sxs-lookup"><span data-stu-id="cf60a-605">U+2E00 to U+2E17</span></span>|<span data-ttu-id="cf60a-606">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="cf60a-606">U+FF5B</span></span>|  
|<span data-ttu-id="cf60a-607">U+05C3</span><span class="sxs-lookup"><span data-stu-id="cf60a-607">U+05C3</span></span>|<span data-ttu-id="cf60a-608">U+1735 および u+1736</span><span class="sxs-lookup"><span data-stu-id="cf60a-608">U+1735 and U+1736</span></span>|<span data-ttu-id="cf60a-609">U + 2E1C と U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="cf60a-609">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="cf60a-610">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="cf60a-610">U+FF5D</span></span>|  
|<span data-ttu-id="cf60a-611">U+05C6</span><span class="sxs-lookup"><span data-stu-id="cf60a-611">U+05C6</span></span>|<span data-ttu-id="cf60a-612">U + 17D 4 U + 17D 6</span><span class="sxs-lookup"><span data-stu-id="cf60a-612">U+17D4 to U+17D6</span></span>|<span data-ttu-id="cf60a-613">U + U + 3003 を 3001</span><span class="sxs-lookup"><span data-stu-id="cf60a-613">U+3001 to U+3003</span></span>|<span data-ttu-id="cf60a-614">U + FF5F U + FF65 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-614">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="cf60a-615">U + 05F3 と U + 05F4</span><span class="sxs-lookup"><span data-stu-id="cf60a-615">U+05F3 and U+05F4</span></span>|<span data-ttu-id="cf60a-616">U + 17D 8 U + 17DA を</span><span class="sxs-lookup"><span data-stu-id="cf60a-616">U+17D8 to U+17DA</span></span>|<span data-ttu-id="cf60a-617">U + U + 3011 に 3008</span><span class="sxs-lookup"><span data-stu-id="cf60a-617">U+3008 to U+3011</span></span>||  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(char c);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : char -&gt; bool" Usage="System.char.IsPunctuation c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-618">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-618">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-619">指定した Unicode 文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-619">Indicates whether the specified Unicode character is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="cf60a-620"><see langword="true" /> が区切り記号の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-620"><see langword="true" /> if <paramref name="c" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-621">有効な区切り記号では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`、 `DashPunctuation`、 `OpenPunctuation`、 `ClosePunctuation`、 `InitialQuotePunctuation`、 `FinalQuotePunctuation`、または`OtherPunctuation`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-621">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="cf60a-622">次の表に示す Unicode コード ポイントに文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-622">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="cf60a-623">U+0021 U + 0023 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-623">U+0021 to U+0023</span></span>|<span data-ttu-id="cf60a-624">U + 060 C および U + 060 D</span><span class="sxs-lookup"><span data-stu-id="cf60a-624">U+060C and U+060D</span></span>|<span data-ttu-id="cf60a-625">U + U + 180A を 1800</span><span class="sxs-lookup"><span data-stu-id="cf60a-625">U+1800 to U+180A</span></span>|<span data-ttu-id="cf60a-626">U + U + 301F に 3014</span><span class="sxs-lookup"><span data-stu-id="cf60a-626">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="cf60a-627">U + U +002 に 0025</span><span class="sxs-lookup"><span data-stu-id="cf60a-627">U+0025 to U+002A</span></span>|<span data-ttu-id="cf60a-628">U+061B</span><span class="sxs-lookup"><span data-stu-id="cf60a-628">U+061B</span></span>|<span data-ttu-id="cf60a-629">U + 1944 および u+1945</span><span class="sxs-lookup"><span data-stu-id="cf60a-629">U+1944 and U+1945</span></span>|<span data-ttu-id="cf60a-630">U+3030</span><span class="sxs-lookup"><span data-stu-id="cf60a-630">U+3030</span></span>|  
|<span data-ttu-id="cf60a-631">U + 002 C U + 002F を</span><span class="sxs-lookup"><span data-stu-id="cf60a-631">U+002C to U+002F</span></span>|<span data-ttu-id="cf60a-632">U + 061E と U + 061F</span><span class="sxs-lookup"><span data-stu-id="cf60a-632">U+061E and U+061F</span></span>|<span data-ttu-id="cf60a-633">U + 19DE と U + 19DF</span><span class="sxs-lookup"><span data-stu-id="cf60a-633">U+19DE and U+19DF</span></span>|<span data-ttu-id="cf60a-634">U + 303D</span><span class="sxs-lookup"><span data-stu-id="cf60a-634">U+303D</span></span>|  
|<span data-ttu-id="cf60a-635">U + 003A と U + 003B</span><span class="sxs-lookup"><span data-stu-id="cf60a-635">U+003A and U+003B</span></span>|<span data-ttu-id="cf60a-636">U + U + 方位 066 d 066A</span><span class="sxs-lookup"><span data-stu-id="cf60a-636">U+066A to U+066D</span></span>|<span data-ttu-id="cf60a-637">U + 1A1E と U +1 a1f</span><span class="sxs-lookup"><span data-stu-id="cf60a-637">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="cf60a-638">30A0 U +</span><span class="sxs-lookup"><span data-stu-id="cf60a-638">U+30A0</span></span>|  
|<span data-ttu-id="cf60a-639">U + 003F と U + 0040</span><span class="sxs-lookup"><span data-stu-id="cf60a-639">U+003F and U+0040</span></span>|<span data-ttu-id="cf60a-640">U+06D4</span><span class="sxs-lookup"><span data-stu-id="cf60a-640">U+06D4</span></span>|<span data-ttu-id="cf60a-641">U + U + 1B60 に 1B5A</span><span class="sxs-lookup"><span data-stu-id="cf60a-641">U+1B5A to U+1B60</span></span>|<span data-ttu-id="cf60a-642">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="cf60a-642">U+30FB</span></span>|  
|<span data-ttu-id="cf60a-643">U + U + 005-D を 005B</span><span class="sxs-lookup"><span data-stu-id="cf60a-643">U+005B to U+005D</span></span>|<span data-ttu-id="cf60a-644">U + U + 070 d 0700</span><span class="sxs-lookup"><span data-stu-id="cf60a-644">U+0700 to U+070D</span></span>|<span data-ttu-id="cf60a-645">U + U + 2027 に 2010</span><span class="sxs-lookup"><span data-stu-id="cf60a-645">U+2010 to U+2027</span></span>|<span data-ttu-id="cf60a-646">U + A874 U + A877 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-646">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="cf60a-647">U+005F</span><span class="sxs-lookup"><span data-stu-id="cf60a-647">U+005F</span></span>|<span data-ttu-id="cf60a-648">U + U + 07F9 に 07F7</span><span class="sxs-lookup"><span data-stu-id="cf60a-648">U+07F7 to U+07F9</span></span>|<span data-ttu-id="cf60a-649">U+2030 U + 2043 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-649">U+2030 to U+2043</span></span>|<span data-ttu-id="cf60a-650">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="cf60a-650">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="cf60a-651">U+007B</span><span class="sxs-lookup"><span data-stu-id="cf60a-651">U+007B</span></span>|<span data-ttu-id="cf60a-652">U+0964 および u+0965</span><span class="sxs-lookup"><span data-stu-id="cf60a-652">U+0964 and U+0965</span></span>|<span data-ttu-id="cf60a-653">U + U + 2051 を 2045</span><span class="sxs-lookup"><span data-stu-id="cf60a-653">U+2045 to U+2051</span></span>|<span data-ttu-id="cf60a-654">U + FE19 に U+FE10</span><span class="sxs-lookup"><span data-stu-id="cf60a-654">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="cf60a-655">U+007D</span><span class="sxs-lookup"><span data-stu-id="cf60a-655">U+007D</span></span>|<span data-ttu-id="cf60a-656">U+0970</span><span class="sxs-lookup"><span data-stu-id="cf60a-656">U+0970</span></span>|<span data-ttu-id="cf60a-657">U + U + 205E に 2053</span><span class="sxs-lookup"><span data-stu-id="cf60a-657">U+2053 to U+205E</span></span>|<span data-ttu-id="cf60a-658">U + FE52 に U+FE30</span><span class="sxs-lookup"><span data-stu-id="cf60a-658">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="cf60a-659">U+00A1</span><span class="sxs-lookup"><span data-stu-id="cf60a-659">U+00A1</span></span>|<span data-ttu-id="cf60a-660">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="cf60a-660">U+0DF4</span></span>|<span data-ttu-id="cf60a-661">U + 207 D および U + 207E</span><span class="sxs-lookup"><span data-stu-id="cf60a-661">U+207D and  U+207E</span></span>|<span data-ttu-id="cf60a-662">U + FE54 U + FE61 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-662">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="cf60a-663">U+00AB</span><span class="sxs-lookup"><span data-stu-id="cf60a-663">U+00AB</span></span>|<span data-ttu-id="cf60a-664">U + U + 0E5B に 0E4F</span><span class="sxs-lookup"><span data-stu-id="cf60a-664">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="cf60a-665">U + 208 D および U + 208E</span><span class="sxs-lookup"><span data-stu-id="cf60a-665">U+208D and U+208E</span></span>|<span data-ttu-id="cf60a-666">U+FE63</span><span class="sxs-lookup"><span data-stu-id="cf60a-666">U+FE63</span></span>|  
|<span data-ttu-id="cf60a-667">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="cf60a-667">U+00AD</span></span>|<span data-ttu-id="cf60a-668">U + U + 0F12 に 0F04</span><span class="sxs-lookup"><span data-stu-id="cf60a-668">U+0F04 to U+0F12</span></span>|<span data-ttu-id="cf60a-669">U + の 2329 と 232A</span><span class="sxs-lookup"><span data-stu-id="cf60a-669">U+2329 and U+232A</span></span>|<span data-ttu-id="cf60a-670">U+FE68</span><span class="sxs-lookup"><span data-stu-id="cf60a-670">U+FE68</span></span>|  
|<span data-ttu-id="cf60a-671">U+00B7</span><span class="sxs-lookup"><span data-stu-id="cf60a-671">U+00B7</span></span>|<span data-ttu-id="cf60a-672">U + U + 0F3D に 0F3A</span><span class="sxs-lookup"><span data-stu-id="cf60a-672">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="cf60a-673">U + U + 2775 に 2768</span><span class="sxs-lookup"><span data-stu-id="cf60a-673">U+2768 to U+2775</span></span>|<span data-ttu-id="cf60a-674">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="cf60a-674">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="cf60a-675">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="cf60a-675">U+00BB</span></span>|<span data-ttu-id="cf60a-676">U+0F85</span><span class="sxs-lookup"><span data-stu-id="cf60a-676">U+0F85</span></span>|<span data-ttu-id="cf60a-677">U + 27C 6 U + 27C 5</span><span class="sxs-lookup"><span data-stu-id="cf60a-677">U+27C5 to U+27C6</span></span>|<span data-ttu-id="cf60a-678">U + FF01 U + FF03 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-678">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="cf60a-679">U+00BF</span><span class="sxs-lookup"><span data-stu-id="cf60a-679">U+00BF</span></span>|<span data-ttu-id="cf60a-680">U + 0FD0 と U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="cf60a-680">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="cf60a-681">U + U + 27EB に 27E6</span><span class="sxs-lookup"><span data-stu-id="cf60a-681">U+27E6 to U+27EB</span></span>|<span data-ttu-id="cf60a-682">U + FF05 U + FF0A に</span><span class="sxs-lookup"><span data-stu-id="cf60a-682">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="cf60a-683">U+037E</span><span class="sxs-lookup"><span data-stu-id="cf60a-683">U+037E</span></span>|<span data-ttu-id="cf60a-684">U + U + 104F に 104A</span><span class="sxs-lookup"><span data-stu-id="cf60a-684">U+104A to U+104F</span></span>|<span data-ttu-id="cf60a-685">U + U + 2998 に 2983</span><span class="sxs-lookup"><span data-stu-id="cf60a-685">U+2983 to U+2998</span></span>|<span data-ttu-id="cf60a-686">U + FF0C U + FF0F に</span><span class="sxs-lookup"><span data-stu-id="cf60a-686">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="cf60a-687">U+0387</span><span class="sxs-lookup"><span data-stu-id="cf60a-687">U+0387</span></span>|<span data-ttu-id="cf60a-688">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="cf60a-688">U+10FB</span></span>|<span data-ttu-id="cf60a-689">U + 29D 8 U + 29DB を</span><span class="sxs-lookup"><span data-stu-id="cf60a-689">U+29D8 to U+29DB</span></span>|<span data-ttu-id="cf60a-690">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="cf60a-690">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="cf60a-691">U + U + 055F に 055A</span><span class="sxs-lookup"><span data-stu-id="cf60a-691">U+055A to U+055F</span></span>|<span data-ttu-id="cf60a-692">U + U + 1368 に 1361</span><span class="sxs-lookup"><span data-stu-id="cf60a-692">U+1361 to U+1368</span></span>|<span data-ttu-id="cf60a-693">U + 29 FC および U + 29FD</span><span class="sxs-lookup"><span data-stu-id="cf60a-693">U+29FC and U+29FD</span></span>|<span data-ttu-id="cf60a-694">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="cf60a-694">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="cf60a-695">U + の 0589 と 058A</span><span class="sxs-lookup"><span data-stu-id="cf60a-695">U+0589 and U+058A</span></span>|<span data-ttu-id="cf60a-696">U + 166 D および U + 166E</span><span class="sxs-lookup"><span data-stu-id="cf60a-696">U+166D and U+166E</span></span>|<span data-ttu-id="cf60a-697">U + U + 2CFC に 2CF9</span><span class="sxs-lookup"><span data-stu-id="cf60a-697">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="cf60a-698">U + FF3B U + FF3D に</span><span class="sxs-lookup"><span data-stu-id="cf60a-698">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="cf60a-699">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="cf60a-699">U+05BE</span></span>|<span data-ttu-id="cf60a-700">U + 169B および U + 169 C</span><span class="sxs-lookup"><span data-stu-id="cf60a-700">U+169B and U+169C</span></span>|<span data-ttu-id="cf60a-701">U + 2CFE と U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="cf60a-701">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="cf60a-702">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="cf60a-702">U+FF3F</span></span>|  
|<span data-ttu-id="cf60a-703">U+05C0</span><span class="sxs-lookup"><span data-stu-id="cf60a-703">U+05C0</span></span>|<span data-ttu-id="cf60a-704">U + U + 16ED に 16EB</span><span class="sxs-lookup"><span data-stu-id="cf60a-704">U+16EB to U+16ED</span></span>|<span data-ttu-id="cf60a-705">U + U + 2E17 に 2E00</span><span class="sxs-lookup"><span data-stu-id="cf60a-705">U+2E00 to U+2E17</span></span>|<span data-ttu-id="cf60a-706">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="cf60a-706">U+FF5B</span></span>|  
|<span data-ttu-id="cf60a-707">U+05C3</span><span class="sxs-lookup"><span data-stu-id="cf60a-707">U+05C3</span></span>|<span data-ttu-id="cf60a-708">U+1735 および u+1736</span><span class="sxs-lookup"><span data-stu-id="cf60a-708">U+1735 and U+1736</span></span>|<span data-ttu-id="cf60a-709">U + 2E1C と U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="cf60a-709">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="cf60a-710">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="cf60a-710">U+FF5D</span></span>|  
|<span data-ttu-id="cf60a-711">U+05C6</span><span class="sxs-lookup"><span data-stu-id="cf60a-711">U+05C6</span></span>|<span data-ttu-id="cf60a-712">U + 17D 4 U + 17D 6</span><span class="sxs-lookup"><span data-stu-id="cf60a-712">U+17D4 to U+17D6</span></span>|<span data-ttu-id="cf60a-713">U + U + 3003 を 3001</span><span class="sxs-lookup"><span data-stu-id="cf60a-713">U+3001 to U+3003</span></span>|<span data-ttu-id="cf60a-714">U + FF5F U + FF65 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-714">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="cf60a-715">U + 05F3 と U + 05F4</span><span class="sxs-lookup"><span data-stu-id="cf60a-715">U+05F3 and U+05F4</span></span>|<span data-ttu-id="cf60a-716">U + 17D 8 U + 17DA を</span><span class="sxs-lookup"><span data-stu-id="cf60a-716">U+17D8 to U+17DA</span></span>|<span data-ttu-id="cf60a-717">U + U + 3011 に 3008</span><span class="sxs-lookup"><span data-stu-id="cf60a-717">U+3008 to U+3011</span></span>||  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-718">次のコード例に示します<xref:System.Char.IsPunctuation%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-718">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : string * int -&gt; bool" Usage="System.char.IsPunctuation (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-719">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-719">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-720"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-720">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-721">指定した文字列の指定位置にある文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-721">Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="cf60a-722"><see langword="true" /> の <paramref name="index" /> の位置にある文字が区切り記号の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-722"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-723">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-723">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-724">有効な区切り記号では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`、 `DashPunctuation`、 `OpenPunctuation`、 `ClosePunctuation`、 `InitialQuotePunctuation`、 `FinalQuotePunctuation`、または`OtherPunctuation`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-724">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="cf60a-725">次の表に示す Unicode コード ポイントに文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-725">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="cf60a-726">U+0021 U + 0023 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-726">U+0021 to U+0023</span></span>|<span data-ttu-id="cf60a-727">U + 060 C および U + 060 D</span><span class="sxs-lookup"><span data-stu-id="cf60a-727">U+060C and U+060D</span></span>|<span data-ttu-id="cf60a-728">U + U + 180A を 1800</span><span class="sxs-lookup"><span data-stu-id="cf60a-728">U+1800 to U+180A</span></span>|<span data-ttu-id="cf60a-729">U + U + 301F に 3014</span><span class="sxs-lookup"><span data-stu-id="cf60a-729">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="cf60a-730">U + U +002 に 0025</span><span class="sxs-lookup"><span data-stu-id="cf60a-730">U+0025 to U+002A</span></span>|<span data-ttu-id="cf60a-731">U+061B</span><span class="sxs-lookup"><span data-stu-id="cf60a-731">U+061B</span></span>|<span data-ttu-id="cf60a-732">U + 1944 および u+1945</span><span class="sxs-lookup"><span data-stu-id="cf60a-732">U+1944 and U+1945</span></span>|<span data-ttu-id="cf60a-733">U+3030</span><span class="sxs-lookup"><span data-stu-id="cf60a-733">U+3030</span></span>|  
|<span data-ttu-id="cf60a-734">U + 002 C U + 002F を</span><span class="sxs-lookup"><span data-stu-id="cf60a-734">U+002C to U+002F</span></span>|<span data-ttu-id="cf60a-735">U + 061E と U + 061F</span><span class="sxs-lookup"><span data-stu-id="cf60a-735">U+061E and U+061F</span></span>|<span data-ttu-id="cf60a-736">U + 19DE と U + 19DF</span><span class="sxs-lookup"><span data-stu-id="cf60a-736">U+19DE and U+19DF</span></span>|<span data-ttu-id="cf60a-737">U + 303D</span><span class="sxs-lookup"><span data-stu-id="cf60a-737">U+303D</span></span>|  
|<span data-ttu-id="cf60a-738">U + 003A と U + 003B</span><span class="sxs-lookup"><span data-stu-id="cf60a-738">U+003A and U+003B</span></span>|<span data-ttu-id="cf60a-739">U + U + 方位 066 d 066A</span><span class="sxs-lookup"><span data-stu-id="cf60a-739">U+066A to U+066D</span></span>|<span data-ttu-id="cf60a-740">U + 1A1E と U +1 a1f</span><span class="sxs-lookup"><span data-stu-id="cf60a-740">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="cf60a-741">30A0 U +</span><span class="sxs-lookup"><span data-stu-id="cf60a-741">U+30A0</span></span>|  
|<span data-ttu-id="cf60a-742">U + 003F と U + 0040</span><span class="sxs-lookup"><span data-stu-id="cf60a-742">U+003F and U+0040</span></span>|<span data-ttu-id="cf60a-743">U+06D4</span><span class="sxs-lookup"><span data-stu-id="cf60a-743">U+06D4</span></span>|<span data-ttu-id="cf60a-744">U + U + 1B60 に 1B5A</span><span class="sxs-lookup"><span data-stu-id="cf60a-744">U+1B5A to U+1B60</span></span>|<span data-ttu-id="cf60a-745">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="cf60a-745">U+30FB</span></span>|  
|<span data-ttu-id="cf60a-746">U + U + 005-D を 005B</span><span class="sxs-lookup"><span data-stu-id="cf60a-746">U+005B to U+005D</span></span>|<span data-ttu-id="cf60a-747">U + U + 070 d 0700</span><span class="sxs-lookup"><span data-stu-id="cf60a-747">U+0700 to U+070D</span></span>|<span data-ttu-id="cf60a-748">U + U + 2027 に 2010</span><span class="sxs-lookup"><span data-stu-id="cf60a-748">U+2010 to U+2027</span></span>|<span data-ttu-id="cf60a-749">U + A874 U + A877 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-749">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="cf60a-750">U+005F</span><span class="sxs-lookup"><span data-stu-id="cf60a-750">U+005F</span></span>|<span data-ttu-id="cf60a-751">U + U + 07F9 に 07F7</span><span class="sxs-lookup"><span data-stu-id="cf60a-751">U+07F7 to U+07F9</span></span>|<span data-ttu-id="cf60a-752">U+2030 U + 2043 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-752">U+2030 to U+2043</span></span>|<span data-ttu-id="cf60a-753">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="cf60a-753">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="cf60a-754">U+007B</span><span class="sxs-lookup"><span data-stu-id="cf60a-754">U+007B</span></span>|<span data-ttu-id="cf60a-755">U+0964 および u+0965</span><span class="sxs-lookup"><span data-stu-id="cf60a-755">U+0964 and U+0965</span></span>|<span data-ttu-id="cf60a-756">U + U + 2051 を 2045</span><span class="sxs-lookup"><span data-stu-id="cf60a-756">U+2045 to U+2051</span></span>|<span data-ttu-id="cf60a-757">U + FE19 に U+FE10</span><span class="sxs-lookup"><span data-stu-id="cf60a-757">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="cf60a-758">U+007D</span><span class="sxs-lookup"><span data-stu-id="cf60a-758">U+007D</span></span>|<span data-ttu-id="cf60a-759">U+0970</span><span class="sxs-lookup"><span data-stu-id="cf60a-759">U+0970</span></span>|<span data-ttu-id="cf60a-760">U + U + 205E に 2053</span><span class="sxs-lookup"><span data-stu-id="cf60a-760">U+2053 to U+205E</span></span>|<span data-ttu-id="cf60a-761">U + FE52 に U+FE30</span><span class="sxs-lookup"><span data-stu-id="cf60a-761">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="cf60a-762">U+00A1</span><span class="sxs-lookup"><span data-stu-id="cf60a-762">U+00A1</span></span>|<span data-ttu-id="cf60a-763">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="cf60a-763">U+0DF4</span></span>|<span data-ttu-id="cf60a-764">U + 207 D および U + 207E</span><span class="sxs-lookup"><span data-stu-id="cf60a-764">U+207D and  U+207E</span></span>|<span data-ttu-id="cf60a-765">U + FE54 U + FE61 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-765">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="cf60a-766">U+00AB</span><span class="sxs-lookup"><span data-stu-id="cf60a-766">U+00AB</span></span>|<span data-ttu-id="cf60a-767">U + U + 0E5B に 0E4F</span><span class="sxs-lookup"><span data-stu-id="cf60a-767">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="cf60a-768">U + 208 D および U + 208E</span><span class="sxs-lookup"><span data-stu-id="cf60a-768">U+208D and U+208E</span></span>|<span data-ttu-id="cf60a-769">U+FE63</span><span class="sxs-lookup"><span data-stu-id="cf60a-769">U+FE63</span></span>|  
|<span data-ttu-id="cf60a-770">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="cf60a-770">U+00AD</span></span>|<span data-ttu-id="cf60a-771">U + U + 0F12 に 0F04</span><span class="sxs-lookup"><span data-stu-id="cf60a-771">U+0F04 to U+0F12</span></span>|<span data-ttu-id="cf60a-772">U + の 2329 と 232A</span><span class="sxs-lookup"><span data-stu-id="cf60a-772">U+2329 and U+232A</span></span>|<span data-ttu-id="cf60a-773">U+FE68</span><span class="sxs-lookup"><span data-stu-id="cf60a-773">U+FE68</span></span>|  
|<span data-ttu-id="cf60a-774">U+00B7</span><span class="sxs-lookup"><span data-stu-id="cf60a-774">U+00B7</span></span>|<span data-ttu-id="cf60a-775">U + U + 0F3D に 0F3A</span><span class="sxs-lookup"><span data-stu-id="cf60a-775">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="cf60a-776">U + U + 2775 に 2768</span><span class="sxs-lookup"><span data-stu-id="cf60a-776">U+2768 to U+2775</span></span>|<span data-ttu-id="cf60a-777">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="cf60a-777">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="cf60a-778">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="cf60a-778">U+00BB</span></span>|<span data-ttu-id="cf60a-779">U+0F85</span><span class="sxs-lookup"><span data-stu-id="cf60a-779">U+0F85</span></span>|<span data-ttu-id="cf60a-780">U + 27C 6 U + 27C 5</span><span class="sxs-lookup"><span data-stu-id="cf60a-780">U+27C5 to U+27C6</span></span>|<span data-ttu-id="cf60a-781">U + FF01 U + FF03 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-781">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="cf60a-782">U+00BF</span><span class="sxs-lookup"><span data-stu-id="cf60a-782">U+00BF</span></span>|<span data-ttu-id="cf60a-783">U + 0FD0 と U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="cf60a-783">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="cf60a-784">U + U + 27EB に 27E6</span><span class="sxs-lookup"><span data-stu-id="cf60a-784">U+27E6 to U+27EB</span></span>|<span data-ttu-id="cf60a-785">U + FF05 U + FF0A に</span><span class="sxs-lookup"><span data-stu-id="cf60a-785">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="cf60a-786">U+037E</span><span class="sxs-lookup"><span data-stu-id="cf60a-786">U+037E</span></span>|<span data-ttu-id="cf60a-787">U + U + 104F に 104A</span><span class="sxs-lookup"><span data-stu-id="cf60a-787">U+104A to U+104F</span></span>|<span data-ttu-id="cf60a-788">U + U + 2998 に 2983</span><span class="sxs-lookup"><span data-stu-id="cf60a-788">U+2983 to U+2998</span></span>|<span data-ttu-id="cf60a-789">U + FF0C U + FF0F に</span><span class="sxs-lookup"><span data-stu-id="cf60a-789">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="cf60a-790">U+0387</span><span class="sxs-lookup"><span data-stu-id="cf60a-790">U+0387</span></span>|<span data-ttu-id="cf60a-791">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="cf60a-791">U+10FB</span></span>|<span data-ttu-id="cf60a-792">U + 29D 8 U + 29DB を</span><span class="sxs-lookup"><span data-stu-id="cf60a-792">U+29D8 to U+29DB</span></span>|<span data-ttu-id="cf60a-793">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="cf60a-793">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="cf60a-794">U + U + 055F に 055A</span><span class="sxs-lookup"><span data-stu-id="cf60a-794">U+055A to U+055F</span></span>|<span data-ttu-id="cf60a-795">U + U + 1368 に 1361</span><span class="sxs-lookup"><span data-stu-id="cf60a-795">U+1361 to U+1368</span></span>|<span data-ttu-id="cf60a-796">U + 29 FC および U + 29FD</span><span class="sxs-lookup"><span data-stu-id="cf60a-796">U+29FC and U+29FD</span></span>|<span data-ttu-id="cf60a-797">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="cf60a-797">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="cf60a-798">U + の 0589 と 058A</span><span class="sxs-lookup"><span data-stu-id="cf60a-798">U+0589 and U+058A</span></span>|<span data-ttu-id="cf60a-799">U + 166 D および U + 166E</span><span class="sxs-lookup"><span data-stu-id="cf60a-799">U+166D and U+166E</span></span>|<span data-ttu-id="cf60a-800">U + U + 2CFC に 2CF9</span><span class="sxs-lookup"><span data-stu-id="cf60a-800">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="cf60a-801">U + FF3B U + FF3D に</span><span class="sxs-lookup"><span data-stu-id="cf60a-801">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="cf60a-802">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="cf60a-802">U+05BE</span></span>|<span data-ttu-id="cf60a-803">U + 169B および U + 169 C</span><span class="sxs-lookup"><span data-stu-id="cf60a-803">U+169B and U+169C</span></span>|<span data-ttu-id="cf60a-804">U + 2CFE と U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="cf60a-804">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="cf60a-805">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="cf60a-805">U+FF3F</span></span>|  
|<span data-ttu-id="cf60a-806">U+05C0</span><span class="sxs-lookup"><span data-stu-id="cf60a-806">U+05C0</span></span>|<span data-ttu-id="cf60a-807">U + U + 16ED に 16EB</span><span class="sxs-lookup"><span data-stu-id="cf60a-807">U+16EB to U+16ED</span></span>|<span data-ttu-id="cf60a-808">U + U + 2E17 に 2E00</span><span class="sxs-lookup"><span data-stu-id="cf60a-808">U+2E00 to U+2E17</span></span>|<span data-ttu-id="cf60a-809">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="cf60a-809">U+FF5B</span></span>|  
|<span data-ttu-id="cf60a-810">U+05C3</span><span class="sxs-lookup"><span data-stu-id="cf60a-810">U+05C3</span></span>|<span data-ttu-id="cf60a-811">U+1735 および u+1736</span><span class="sxs-lookup"><span data-stu-id="cf60a-811">U+1735 and U+1736</span></span>|<span data-ttu-id="cf60a-812">U + 2E1C と U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="cf60a-812">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="cf60a-813">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="cf60a-813">U+FF5D</span></span>|  
|<span data-ttu-id="cf60a-814">U+05C6</span><span class="sxs-lookup"><span data-stu-id="cf60a-814">U+05C6</span></span>|<span data-ttu-id="cf60a-815">U + 17D 4 U + 17D 6</span><span class="sxs-lookup"><span data-stu-id="cf60a-815">U+17D4 to U+17D6</span></span>|<span data-ttu-id="cf60a-816">U + U + 3003 を 3001</span><span class="sxs-lookup"><span data-stu-id="cf60a-816">U+3001 to U+3003</span></span>|<span data-ttu-id="cf60a-817">U + FF5F U + FF65 に</span><span class="sxs-lookup"><span data-stu-id="cf60a-817">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="cf60a-818">U + 05F3 と U + 05F4</span><span class="sxs-lookup"><span data-stu-id="cf60a-818">U+05F3 and U+05F4</span></span>|<span data-ttu-id="cf60a-819">U + 17D 8 U + 17DA を</span><span class="sxs-lookup"><span data-stu-id="cf60a-819">U+17D8 to U+17DA</span></span>|<span data-ttu-id="cf60a-820">U + U + 3011 に 3008</span><span class="sxs-lookup"><span data-stu-id="cf60a-820">U+3008 to U+3011</span></span>||  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-821">次のコード例に示します<xref:System.Char.IsPunctuation%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-821">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-822"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-822"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-823"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-823"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSeparator">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-824">Unicode 文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-824">Indicates whether a Unicode character is categorized as a separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-825">Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-825">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="cf60a-826">区切り記号をスペース (、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリ)、\u0020 などの文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-826">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="cf60a-827">行区切り記号 (、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリ)、\u2028 が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-827">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="cf60a-828">段落区切り記号 (、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリ)、\u2029 が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-828">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cf60a-829">Unicode 標準の文字の \u000A (LF)、\u000C (FF) および \u000D (CR) が制御文字としては分類 (のメンバー、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ)、区切り文字としてではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-829">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(char c);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : char -&gt; bool" Usage="System.char.IsSeparator c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-830">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-830">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-831">指定した Unicode 文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-831">Indicates whether the specified Unicode character is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="cf60a-832"><see langword="true" /> が区切り文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-832"><see langword="true" /> if <paramref name="c" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-833">Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-833">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="cf60a-834">区切り記号をスペース (、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリ)、\u0020 などの文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-834">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="cf60a-835">行区切り記号 (、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリ)、\u2028 が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-835">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="cf60a-836">段落区切り記号 (、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリ)、\u2029 が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-836">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cf60a-837">Unicode 標準の文字の \u000A (LF)、\u000C (FF) および \u000D (CR) が制御文字としては分類 (のメンバー、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ)、区切り文字としてではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-837">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-838">次の例の一覧、<xref:System.Char>区切り文字として分類されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-838">The following example lists the <xref:System.Char> objects that are classified as separator characters.</span></span>  
  
 [!code-cpp[System.Char.IsSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator1.cpp#1)]
 [!code-csharp[System.Char.IsSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator1.cs#1)]
 [!code-vb[System.Char.IsSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : string * int -&gt; bool" Usage="System.char.IsSeparator (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-839">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-839">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-840"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-840">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-841">指定した文字列の指定位置にある文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-841">Indicates whether the character at the specified position in a specified string is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="cf60a-842"><see langword="true" /> の <paramref name="index" /> の位置にある文字が区切り文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-842"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-843">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-843">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-844">Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-844">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="cf60a-845">区切り記号をスペース (、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリ)、\u0020 などの文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-845">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="cf60a-846">行区切り記号 (、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリ)、\u2028 が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-846">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="cf60a-847">段落区切り記号 (、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリ)、\u2029 が含まれています。</span><span class="sxs-lookup"><span data-stu-id="cf60a-847">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cf60a-848">Unicode 標準の文字の \u000A (LF)、\u000C (FF) および \u000D (CR) が制御文字としては分類 (のメンバー、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>カテゴリ)、区切り文字としてではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-848">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-849">次の例で<xref:System.Char.IsSeparator%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-849">The following example demonstrates <xref:System.Char.IsSeparator%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSeparator#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator.cpp#10)]
 [!code-csharp[System.Char.IsSeparator#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator.cs#10)]
 [!code-vb[System.Char.IsSeparator#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-850"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-850"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-851"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-851"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-852">文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-852">Indicates whether a character has a surrogate code unit.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : char -&gt; bool" Usage="System.char.IsSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-853">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-853">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-854">指定した文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-854">Indicates whether the specified character has a surrogate code unit.</span></span></summary>
        <returns><span data-ttu-id="cf60a-855"><paramref name="c" /> が上位サロゲートまたは下位サロゲートである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-855"><see langword="true" /> if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-856">サロゲートは、 <xref:System.Char> u+d800 から U+DFFF の範囲の utf-16 コード単位を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-856">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="cf60a-857">この範囲内のコード単位では、各文字が属する、<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-857">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="cf60a-858">個々 のサロゲート コード単位は、独自の解釈がありませんが、サロゲート ペアの一部として使用する場合にのみ意味を持ちます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-858">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="cf60a-859">サロゲート ペアの詳細については、Unicode Standard」を参照してください、 [Unicode ホーム ページ](https://go.microsoft.com/fwlink/?linkid=37123)します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-859">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?linkid=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-860">次の例で、<xref:System.Char.IsSurrogate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-860">The following example demonstrates the <xref:System.Char.IsSurrogate%2A> method.</span></span>  
  
 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : string * int -&gt; bool" Usage="System.char.IsSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-861">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-861">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-862"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-862">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-863">指定した文字列の指定位置にある文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-863">Indicates whether the character at the specified position in a specified string has a surrogate code unit.</span></span></summary>
        <returns><span data-ttu-id="cf60a-864"><paramref name="s" /> の <paramref name="index" /> にある文字が上位サロゲートまたは下位サロゲートである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-864"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-865">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-865">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-866">サロゲートは、 <xref:System.Char> u+d800 から U+DFFF の範囲の utf-16 コード単位を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-866">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="cf60a-867">この範囲内のコード単位では、各文字が属する、<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>カテゴリ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-867">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="cf60a-868">個々 のサロゲート コード単位は、独自の解釈がありませんが、サロゲート ペアの一部として使用する場合にのみ意味を持ちます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-868">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="cf60a-869">サロゲート ペアの詳細については、Unicode Standard」を参照してください、 [Unicode ホーム ページ](https://go.microsoft.com/fwlink/?linkid=37123)します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-869">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?linkid=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-870">次のコード例に示します<xref:System.Char.IsSurrogate%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-870">The following code example demonstrates <xref:System.Char.IsSurrogate%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-871"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-871"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-872"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-872"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogatePair">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-873">指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-873">Indicates whether two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (highSurrogate As Char, lowSurrogate As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : char * char -&gt; bool" Usage="System.char.IsSurrogatePair (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lowSurrogate" Type="System.Char" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="cf60a-874">サロゲート ペアの上位サロゲートとして評価する文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-874">The character to evaluate as the high surrogate of a surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="cf60a-875">サロゲート ペアの下位サロゲートとして評価する文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-875">The character to evaluate as the low surrogate of a surrogate pair.</span></span></param>
        <summary><span data-ttu-id="cf60a-876">指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-876">Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="cf60a-877"><see langword="true" /> パラメーターに指定された数値が U+D800 から U+DBFF の範囲内にあり、<paramref name="highSurrogate" /> パラメーターに指定された数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="lowSurrogate" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-877"><see langword="true" /> if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-878">通常、1 つの文字は、1 つの 16 ビット Unicode コード単位で表されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-878">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="cf60a-879">Utf-16 エンコーディングでは、サロゲート ペアは、2 つの 16 ビットのコード単位で表される 1 つの抽象文字を許可することもできます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-879">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="cf60a-880">値は u+d800 から U+DBFF の範囲に、最初のコード単位は、上位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-880">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="cf60a-881">値は u+dc00 から U+DFFF の範囲に、2 つ目のコードの単位は、下位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-881">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="cf60a-882">個々 のサロゲート コード ポイントがある独自の解釈なし。</span><span class="sxs-lookup"><span data-stu-id="cf60a-882">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="cf60a-883">サロゲートと、Unicode 規格の詳細については、次を参照してください。、 [Unicode ホーム ページ](https://go.microsoft.com/fwlink/?LinkId=37123)します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-883">For more information about surrogates and the Unicode Standard, see the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-884">次のコード例に示します、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-884">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : string * int -&gt; bool" Usage="System.char.IsSurrogatePair (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-885">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-885">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-886"><paramref name="s" /> 内の評価する文字のペアの開始位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-886">The starting position of the pair of characters to evaluate within <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-887">文字列中の指定された位置で互いに隣接する 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-887">Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="cf60a-888"><paramref name="s" /> パラメーターの <paramref name="index" /> 位置と <paramref name="index" /> +1 位置に隣接して文字が含まれており、<paramref name="index" /> 位置にある文字の数値が U+D800 から U+DBFF の範囲内にあり、また、<paramref name="index" /> +1 位置にある文字の数値が U+DC00 から U+DFFF の範囲内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-888"><see langword="true" /> if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-889">通常、1 つの文字は、1 つの 16 ビット Unicode コード単位で表されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-889">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="cf60a-890">Utf-16 エンコーディングでは、サロゲート ペアは、2 つの 16 ビットのコード単位で表される 1 つの抽象文字を許可することもできます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-890">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="cf60a-891">値は u+d800 から U+DBFF の範囲に、最初のコード単位は、上位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-891">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="cf60a-892">値は u+dc00 から U+DFFF の範囲に、2 つ目のコードの単位は、下位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-892">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="cf60a-893">個々 のサロゲート コード ポイントがある独自の解釈なし。</span><span class="sxs-lookup"><span data-stu-id="cf60a-893">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="cf60a-894">サロゲートと、Unicode 規格の詳細については、次を参照してください。、 [Unicode ホーム ページ](https://go.microsoft.com/fwlink/?LinkId=37123)します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-894">For more information about surrogates and the Unicode Standard, see the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-895">次のコード例に示します、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-895">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-896"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-896"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-897"><paramref name="index" /> が <paramref name="s" /> 内の位置ではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-897"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSymbol">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-898">Unicode 文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-898">Indicates whether a Unicode character is categorized as a symbol character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-899">有効なシンボルでは、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `MathSymbol`、 `CurrencySymbol`、 `ModifierSymbol`、および`OtherSymbol`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-899">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="cf60a-900">大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。</span><span class="sxs-lookup"><span data-stu-id="cf60a-900">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="cf60a-901">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-901">Currency symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-902">文字種記号は、英数字の数学記号と ℅、№ などの記号のセットを含めると™ します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-902">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="cf60a-903">数字の文字と下付き文字などの書式。</span><span class="sxs-lookup"><span data-stu-id="cf60a-903">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="cf60a-904">算術演算子と矢印。</span><span class="sxs-lookup"><span data-stu-id="cf60a-904">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="cf60a-905">幾何学の記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-905">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-906">技術的な記号です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-906">Technical symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-907">ブライユ パターン。</span><span class="sxs-lookup"><span data-stu-id="cf60a-907">Braille patterns.</span></span>  
  
-   <span data-ttu-id="cf60a-908">装飾記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-908">Dingbats.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(char c);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : char -&gt; bool" Usage="System.char.IsSymbol c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-909">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-909">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-910">指定した Unicode 文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-910">Indicates whether the specified Unicode character is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="cf60a-911"><paramref name="c" /> が記号である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-911"><see langword="true" /> if <paramref name="c" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-912">有効なシンボルでは、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `MathSymbol`、 `CurrencySymbol`、 `ModifierSymbol`、および`OtherSymbol`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-912">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="cf60a-913">大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。</span><span class="sxs-lookup"><span data-stu-id="cf60a-913">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="cf60a-914">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-914">Currency symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-915">文字種記号は、英数字の数学記号と ℅、№ などの記号のセットを含めると™ します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-915">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="cf60a-916">数字の文字と下付き文字などの書式。</span><span class="sxs-lookup"><span data-stu-id="cf60a-916">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="cf60a-917">算術演算子と矢印。</span><span class="sxs-lookup"><span data-stu-id="cf60a-917">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="cf60a-918">幾何学の記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-918">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-919">技術的な記号です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-919">Technical symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-920">ブライユ パターン。</span><span class="sxs-lookup"><span data-stu-id="cf60a-920">Braille patterns.</span></span>  
  
-   <span data-ttu-id="cf60a-921">装飾記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-921">Dingbats.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-922">次のコード例に示します<xref:System.Char.IsSymbol%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-922">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : string * int -&gt; bool" Usage="System.char.IsSymbol (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-923">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-923">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-924"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-924">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-925">指定した文字列の指定位置にある文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-925">Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="cf60a-926"><paramref name="s" /> の <paramref name="index" /> の位置にある文字が記号である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-926"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-927">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-927">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-928">有効なシンボルでは、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`、 `CurrencySymbol`、 `ModifierSymbol`、および`OtherSymbol`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-928">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="cf60a-929">大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。</span><span class="sxs-lookup"><span data-stu-id="cf60a-929">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="cf60a-930">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-930">Currency symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-931">文字種記号は、英数字の数学記号と ℅、№ などの記号のセットを含めると™ します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-931">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="cf60a-932">数字の文字と下付き文字などの書式。</span><span class="sxs-lookup"><span data-stu-id="cf60a-932">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="cf60a-933">算術演算子と矢印。</span><span class="sxs-lookup"><span data-stu-id="cf60a-933">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="cf60a-934">幾何学の記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-934">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-935">技術的な記号です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-935">Technical symbols.</span></span>  
  
-   <span data-ttu-id="cf60a-936">ブライユ パターン。</span><span class="sxs-lookup"><span data-stu-id="cf60a-936">Braille patterns.</span></span>  
  
-   <span data-ttu-id="cf60a-937">装飾記号。</span><span class="sxs-lookup"><span data-stu-id="cf60a-937">Dingbats.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-938">次のコード例に示します<xref:System.Char.IsSymbol%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-938">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-939"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-939"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-940"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-940"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-941">Unicode 文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-941">Indicates whether a Unicode character is categorized as an uppercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(char c);" />
      <MemberSignature Language="F#" Value="static member IsUpper : char -&gt; bool" Usage="System.char.IsUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-942">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-942">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-943">指定した Unicode 文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-943">Indicates whether the specified Unicode character is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="cf60a-944"><see langword="true" /> が大文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-944"><see langword="true" /> if <paramref name="c" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-945">有効な大文字で、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>:`UppercaseLetter`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-945">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsLower(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsUpper : string * int -&gt; bool" Usage="System.char.IsUpper (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-946">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-946">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-947"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-947">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-948">指定した文字列の指定位置にある文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-948">Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="cf60a-949"><paramref name="s" /> の <paramref name="index" /> の位置にある文字が大文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-949"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-950">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-950">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-951">有効な大文字で、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>:`UppercaseLetter`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-951">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-952"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-952"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-953"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-953"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsWhiteSpace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-954">Unicode 文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-954">Indicates whether a Unicode character is categorized as white space.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-955">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-955">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="cf60a-956">メンバー、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリで、スペース文字が含まれています (u+0020) 非分割領域 (U + 00A0)、OGHAM 領域のマーク (U + 1680)、EN クアッド (U + 2000)、EM クアッド (U + 2001 年)、半角スペース (U + 2002)、EM 容量 (U + 2003)、3-EM ごとの領域 (U + 2004 年)、4-EM ごとの領域 (U+ 2005)、6-EM ごとの領域 (U + 2006 年)、図の領域 (U + 2007)、句読点をシン (U + 2008 年)、スペース (U + 2009 年)、スペース髪の毛領域 (200 U + a)、幅の狭い非分割領域 (U + 202F)、MEDIUM 数学的な領域 (U + 205F)、および全角スペース (U + 3000)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-956">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="cf60a-957">メンバー、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリで、行区切り記号の文字だけで構成されます (u+2028)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-957">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="cf60a-958">メンバー、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリで、段落区切り記号の文字だけで構成されます (u+2029)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-958">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="cf60a-959">集計の文字の文字 (u+0009)、ライン フィード (u+000 a)、行の集計 (U + 000B)、フォーム (U + 000 C) のフィード、キャリッジ リターン (U+000D)、および次の行 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-959">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(char c);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : char -&gt; bool" Usage="System.char.IsWhiteSpace c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-960">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-960">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="cf60a-961">指定した Unicode 文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-961">Indicates whether the specified Unicode character is categorized as white space.</span></span></summary>
        <returns><span data-ttu-id="cf60a-962"><see langword="true" /> が空白である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-962"><see langword="true" /> if <paramref name="c" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-963">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-963">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="cf60a-964">メンバー、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリで、スペース文字が含まれています (u+0020) 非分割領域 (U + 00A0)、OGHAM 領域のマーク (U + 1680)、EN クアッド (U + 2000)、EM クアッド (U + 2001 年)、半角スペース (U + 2002)、EM 容量 (U + 2003)、3-EM ごとの領域 (U + 2004 年)、4-EM ごとの領域 (U+ 2005)、6-EM ごとの領域 (U + 2006 年)、図の領域 (U + 2007)、句読点をシン (U + 2008 年)、スペース (U + 2009 年)、スペース髪の毛領域 (200 U + a)、幅の狭い非分割領域 (U + 202F)、MEDIUM 数学的な領域 (U + 205F)、および全角スペース (U + 3000)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-964">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="cf60a-965">メンバー、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリで、行区切り記号の文字だけで構成されます (u+2028)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-965">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="cf60a-966">メンバー、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリで、段落区切り記号の文字だけで構成されます (u+2029)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-966">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="cf60a-967">集計の文字の文字 (u+0009)、ライン フィード (u+000 a)、行の集計 (U + 000B)、フォーム (U + 000 C) のフィード、キャリッジ リターン (U+000D)、および次の行 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-967">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-968">次の例で、<xref:System.Char.IsWhiteSpace%28System.Char%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-968">The following example demonstrates the <xref:System.Char.IsWhiteSpace%28System.Char%29> method.</span></span>  
  
 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : string * int -&gt; bool" Usage="System.char.IsWhiteSpace (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-969">文字列。</span><span class="sxs-lookup"><span data-stu-id="cf60a-969">A string.</span></span></param>
        <param name="index"><span data-ttu-id="cf60a-970"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="cf60a-970">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-971">指定した文字列の指定位置にある文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-971">Indicates whether the character at the specified position in a specified string is categorized as white space.</span></span></summary>
        <returns><span data-ttu-id="cf60a-972"><paramref name="s" /> の中の位置 <paramref name="index" /> にある文字が空白の場合、<see langword="true" />。それ以外の場合、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-972"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-973">文字列内の文字位置は 0 から始まるインデックスです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-973">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="cf60a-974">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-974">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="cf60a-975">メンバー、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>カテゴリで、スペース文字が含まれています (u+0020) 非分割領域 (U + 00A0)、OGHAM 領域のマーク (U + 1680)、EN クアッド (U + 2000)、EM クアッド (U + 2001 年)、半角スペース (U + 2002)、EM 容量 (U + 2003)、3-EM ごとの領域 (U + 2004 年)、4-EM ごとの領域 (U+ 2005)、6-EM ごとの領域 (U + 2006 年)、図の領域 (U + 2007)、句読点をシン (U + 2008 年)、スペース (U + 2009 年)、スペース髪の毛領域 (200 U + a)、幅の狭い非分割領域 (U + 202F)、MEDIUM 数学的な領域 (U + 205F)、および全角スペース (U + 3000)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-975">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="cf60a-976">メンバー、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>カテゴリで、行区切り記号の文字だけで構成されます (u+2028)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-976">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="cf60a-977">メンバー、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>カテゴリで、段落区切り記号の文字だけで構成されます (u+2029)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-977">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="cf60a-978">集計の文字の文字 (u+0009)、ライン フィード (u+000 a)、行の集計 (U + 000B)、フォーム (U + 000 C) のフィード、キャリッジ リターン (U+000D)、および次の行 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-978">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-979">次のコード例に示します<xref:System.Char.IsWhiteSpace%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-979">The following code example demonstrates <xref:System.Char.IsWhiteSpace%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-980"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-980"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cf60a-981"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-981"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const char MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MaxValue;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : char" Usage="System.char.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cf60a-982"><see cref="T:System.Char" /> の最大有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-982">Represents the largest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="cf60a-983">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-983">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-984">この定数の値は、16 進数 0 xffff です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-984">The value of this constant is hexadecimal 0xFFFF.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const char MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MinValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MinValue;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : char" Usage="System.char.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cf60a-985"><see cref="T:System.Char" /> の最小有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-985">Represents the smallest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="cf60a-986">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-986">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-987">この定数の値は、16 進数の 0x00 です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-987">The value of this constant is hexadecimal 0x00.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static char Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; char" Usage="System.char.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-988">単一の文字を含む文字列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-988">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="cf60a-989">指定した文字列の値をそれと等価な Unicode 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-989">Converts the value of the specified string to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="cf60a-990"><paramref name="s" /> の単一文字と等価な Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-990">A Unicode character equivalent to the sole character in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cf60a-991">次のコード例に示します<xref:System.Char.Parse%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-991">The following code example demonstrates <xref:System.Char.Parse%2A>.</span></span>  
  
 [!code-cpp[System.Char.Parse#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Parse/CPP/parse.cpp#15)]
 [!code-csharp[System.Char.Parse#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Parse/CS/parse.cs#15)]
 [!code-vb[System.Char.Parse#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Parse/VB/parse.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-992"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-992"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="cf60a-993"><paramref name="s" /> の長さが 1 ではありません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-993">The length of <paramref name="s" /> is not 1.</span></span></exception>
        <altmember cref="M:System.Char.ToString" />
        <related type="Article" href="https://msdn.microsoft.com/library/d139bc00-3c4e-4d78-ac9a-5c951b258d28"><span data-ttu-id="cf60a-994">.NET Framework におけるその他の文字列の解析</span><span class="sxs-lookup"><span data-stu-id="cf60a-994">Parsing Other Strings in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-995">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-995">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-996">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-996">**Note** This conversion is not supported.</span></span> <span data-ttu-id="cf60a-997">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-997">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-998">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-998">This conversion is not supported.</span></span> <span data-ttu-id="cf60a-999">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-999">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="cf60a-1000">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1000">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1001">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1001">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1002">このメンバーの説明については、<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1002">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1003">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1003">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1004">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1004">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1005">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1005">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1006">推奨される代替手段は、<xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1006">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1007">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1007">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1008">このメンバーの説明については、<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1008">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1009">現在の <see cref="T:System.Char" /> オブジェクトの未変更の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1009">The value of the current <see cref="T:System.Char" /> object unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1010">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1010">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1011">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1011">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1012">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1012">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1013">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1013">**Note** This conversion is not supported.</span></span> <span data-ttu-id="cf60a-1014">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1014">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1015">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1015">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="cf60a-1016">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1016">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1017">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1017">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1018">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1018">**Note** This conversion is not supported.</span></span> <span data-ttu-id="cf60a-1019">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1019">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1020">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1020">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="cf60a-1021">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1021">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1022">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1022">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1023">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1023">**Note** This conversion is not supported.</span></span> <span data-ttu-id="cf60a-1024">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1024">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1025">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1025">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="cf60a-1026">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1026">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1027">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1027">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1028">このメンバーの説明については、<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1028">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1029">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1029">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1030">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1030">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1031">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1031">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1032">推奨される代替手段は、<xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1032">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1033">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1033">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1034">このメンバーの説明については、<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1034">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1035">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1035">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1036">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1036">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1037">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1037">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1038">推奨される代替手段は、<xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1038">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1039">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1039">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1040">このメンバーの説明については、<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1040">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1041">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1041">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1042">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1042">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1043">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1043">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1044">推奨される代替手段は、<xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1044">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1045">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1045">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1046">このメンバーの説明については、<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1046">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1047">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1047">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1048">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1048">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1049">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1049">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1050">推奨される代替手段は、<xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1050">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1051">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1051">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="cf60a-1052">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1052">**Note** This conversion is not supported.</span></span> <span data-ttu-id="cf60a-1053">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1053">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1054">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1054">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="cf60a-1055">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1055">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="cf60a-1056"><see cref="T:System.Type" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1056">A <see cref="T:System.Type" /> object.</span></span></param>
        <param name="provider"><span data-ttu-id="cf60a-1057"><see cref="T:System.IFormatProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1057">An <see cref="T:System.IFormatProvider" /> object.</span></span></param>
        <summary><span data-ttu-id="cf60a-1058">このメンバーの説明については、<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1058">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1059">指定した型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1059">An object of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1060">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1060">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1061">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1061">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1062">推奨される代替手段は、<xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1062">The recommended alternative is to call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-1063"><paramref name="type" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1063"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="cf60a-1064">現在の <see cref="T:System.Char" /> オブジェクトの値を、<paramref name="type" /> パラメーターで指定された型に変換できません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1064">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1065"><see cref="T:System.IFormatProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1065">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="cf60a-1066">(<see langword="null" />  パラメーターは無視されるため、<paramref name="provider" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1066">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="cf60a-1067">このメンバーの説明については、<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1067">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1068">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1068">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1069">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1069">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1070">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1070">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1071">推奨される代替手段は、<xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1071">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1072"><see cref="T:System.IFormatProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1072">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="cf60a-1073">(<see langword="null" />  パラメーターは無視されるため、<paramref name="provider" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1073">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="cf60a-1074">このメンバーの説明については、<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1074">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1075">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1075">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1076">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1076">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1077">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1077">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1078">推奨される代替手段は、<xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1078">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1079"><see cref="T:System.IFormatProvider" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1079">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="cf60a-1080">(<see langword="null" />  パラメーターは無視されるため、<paramref name="provider" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1080">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="cf60a-1081">このメンバーの説明については、<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" /> のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1081">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1082">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1082">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1083">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1083">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cf60a-1084">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1084">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="cf60a-1085">推奨される代替手段は、<xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1085">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-1086">Unicode 文字の値をそれと等価な小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1086">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c);" />
      <MemberSignature Language="F#" Value="static member ToLower : char -&gt; char" Usage="System.char.ToLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-1087">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1087">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="cf60a-1088">Unicode 文字の値をそれと等価な小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1088">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1089"><paramref name="c" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1089">The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1090">大文字小文字の規則は、現在のカルチャから取得されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1090">Casing rules are obtained from the current culture.</span></span>  
  
 <span data-ttu-id="cf60a-1091">使用<xref:System.String.ToLower%2A?displayProperty=nameWithType>文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1091">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-1092">次の例で<xref:System.Char.ToLower%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1092">The following example demonstrates <xref:System.Char.ToLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="cf60a-1093">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を置き換える文字の大文字小文字の区別と文字列の大文字小文字の区別のメソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1093">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="cf60a-1094">代わりを明示的に指定するパラメーターを必要とするメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1094">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="cf60a-1095">現在のカルチャの大文字と小文字の規則を使用して小文字の文字を変換するを呼び出して、<see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />メソッドのオーバー ロードの値を持つ<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />の<paramref name="culture" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1095">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToLower (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-1096">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1096">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="cf60a-1097">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1097">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="cf60a-1098">指定したカルチャ固有の書式情報を使用して、指定した Unicode 文字の値をそれと等価な小文字へ変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1098">Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1099"><paramref name="culture" /> に基づいて変換された、<paramref name="c" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1099">The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1100">使用<xref:System.String.ToLower%2A?displayProperty=nameWithType>文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1100">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-1101">次のコード例に示します<xref:System.Char.ToLower%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1101">The following code example demonstrates <xref:System.Char.ToLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-1102"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1102"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static char ToLowerInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLowerInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLowerInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLowerInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLowerInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : char -&gt; char" Usage="System.char.ToLowerInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-1103">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1103">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="cf60a-1104">インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する小文字表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1104">Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1105"><paramref name="c" /> パラメーターの小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変更なしでそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1105">The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1106">アプリケーションが現在のカルチャによって影響を受ける、予測可能な方法で変更する、文字の大文字と小文字によって異なります場合を使用して、<xref:System.Char.ToLowerInvariant%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1106">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the <xref:System.Char.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="cf60a-1107"><xref:System.Char.ToLowerInvariant%2A>メソッドは`ToLower(Char, CultureInfo.InvariantCulture)`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1107">The <xref:System.Char.ToLowerInvariant%2A> method is equivalent to `ToLower(Char, CultureInfo.InvariantCulture)`.</span></span>  
  
 <span data-ttu-id="cf60a-1108">使用<xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType>文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1108">Use <xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-1109">このインスタンスの値を、それと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1109">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="char.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf60a-1110">このインスタンスの値を、それと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1110">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1111">このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1111">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cf60a-1112">次のコード例に示します<xref:System.Char.ToString%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1112">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (c As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char c);" />
      <MemberSignature Language="F#" Value="static member ToString : char -&gt; string" Usage="System.char.ToString c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-1113">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1113">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="cf60a-1114">指定した Unicode 文字をそれと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1114">Converts the specified Unicode character to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1115"><paramref name="c" /> の値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1115">The string representation of the value of <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cf60a-1116">次のコード例に示します<xref:System.Char.ToString%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1116">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="char.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="cf60a-1117">(予約済み) カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1117">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="cf60a-1118">指定したカルチャ固有の書式情報を使用して、このインスタンスの値をそれと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1118">Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1119"><paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1119">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1120">`provider`パラメーターが無視されます。 この操作では参加しません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1120">The `provider` parameter is ignored; it does not participate in this operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-1121">次のコード例に示しますのオーバー ロード<xref:System.Char.ToString%2A>します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1121">The following code example demonstrates an overload of <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf60a-1122">Unicode 文字の値をそれと等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1122">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char -&gt; char" Usage="System.char.ToUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-1123">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1123">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="cf60a-1124">Unicode 文字の値をそれと等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1124">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1125"><paramref name="c" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1125">The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1126">大文字小文字の規則は、現在のカルチャから取得されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1126">Casing rules are obtained from the current culture.</span></span>  
  
 <span data-ttu-id="cf60a-1127">使用<xref:System.String.ToUpper%2A?displayProperty=nameWithType>文字列を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1127">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-1128">次の例では、配列内の各文字を等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1128">The following example converts each character in an array to its uppercase equivalent.</span></span>  
  
 [!code-csharp[System.Char.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper1.cs#1)]
 [!code-vb[System.Char.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="cf60a-1129">説明したよう[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)既定値を置き換える文字の大文字小文字の区別と文字列の大文字小文字の区別のメソッドを呼び出さないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1129">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="cf60a-1130">代わりを明示的に指定するパラメーターを必要とするメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1130">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="cf60a-1131">現在のカルチャの大文字と小文字の規則を使用して大文字の文字を変換するを呼び出して、<see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />メソッドのオーバー ロードの値を持つ<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />の<paramref name="culture" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1131">To convert a character to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToUpper (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-1132">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1132">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="cf60a-1133">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1133">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="cf60a-1134">指定したカルチャ固有の書式情報を使用して、指定した Unicode 文字の値をそれと等価な大文字へ変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1134">Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1135"><paramref name="culture" /> に基づいて変換された、<paramref name="c" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1135">The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1136">使用<xref:System.String.ToUpper%2A?displayProperty=nameWithType>文字列を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1136">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-1137">次の例では、配列内の各文字を EN-US カルチャ、インバリアント カルチャ、および TR-TR カルチャの大文字表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1137">The following example converts each character in an array to its uppercase equivalent for the en-US culture, the invariant culture, and the tr-TR culture.</span></span> <span data-ttu-id="cf60a-1138">この例では、それぞれの小文字の文字の大文字表現は、1 つのケースを除くすべてのカルチャのと同じです。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1138">In this example, the uppercase equivalent of each lowercase letter is identical for all cultures except for one case.</span></span> <span data-ttu-id="cf60a-1139">小文字の"i"は文字"I"(u+0069) に変換 (u+0049) EN-US とインバリアント カルチャですが""を (u+0130) TR-TR カルチャ。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1139">The lowercase "i" character (U+0069) converts to "I" (U+0049) in the en-US and invariant cultures, but to "İ" (U+0130) in the tr-TR culture.</span></span>  
  
 [!code-csharp[System.Char.ToUpper#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper5.cs#2)]
 [!code-vb[System.Char.ToUpper#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cf60a-1140"><paramref name="culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1140"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static char ToUpperInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpperInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpperInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpperInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpperInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : char -&gt; char" Usage="System.char.ToUpperInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="cf60a-1141">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1141">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="cf60a-1142">インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する大文字表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1142">Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1143"><paramref name="c" /> パラメーターの大文字表現。または、<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変更なしでそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1143">The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1144">アプリケーションは現在のカルチャによって影響を受けませんが、予測可能な方法で変更する、文字の大文字と小文字によって異なります場合に、使用して、<xref:System.Char.ToUpperInvariant%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1144">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the <xref:System.Char.ToUpperInvariant%2A> method.</span></span>  <span data-ttu-id="cf60a-1145"><xref:System.Char.ToUpperInvariant%2A>メソッドは`ToUpper(Char, CultureInfo.InvariantCulture)`します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1145">The <xref:System.Char.ToUpperInvariant%2A> method is equivalent to `ToUpper(Char, CultureInfo.InvariantCulture)`.</span></span>  
  
 <span data-ttu-id="cf60a-1146">使用<xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType>文字列を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1146">Use <xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out char result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] char&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.TryParse(System.String,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] char % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.char.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Char" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf60a-1147">単一の文字を含む文字列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1147">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <param name="result"><span data-ttu-id="cf60a-1148">変換に成功した場合、メソッドから制御が戻ったときに、<paramref name="s" /> 内の単一文字に相当する Unicode 文字が格納されます。変換に失敗した場合は、未定義の値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1148">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed.</span></span> <span data-ttu-id="cf60a-1149"><paramref name="s" /> パラメーターが <see langword="null" /> の場合、または <paramref name="s" /> の長さが 1 でない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1149">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or the length of <paramref name="s" /> is not 1.</span></span> <span data-ttu-id="cf60a-1150">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1150">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="cf60a-1151">指定した文字列の値をそれと等価な Unicode 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1151">Converts the value of the specified string to its equivalent Unicode character.</span></span> <span data-ttu-id="cf60a-1152">リターン コードは、変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1152">A return code indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="cf60a-1153"><paramref name="s" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1153"><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf60a-1154"><xref:System.Char.TryParse%2A>などのメソッドは、<xref:System.Char.Parse%2A>メソッドを除く、<xref:System.Char.TryParse%2A>メソッドは、変換が失敗した場合に例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1154">The <xref:System.Char.TryParse%2A> method is like the <xref:System.Char.Parse%2A> method, except the <xref:System.Char.TryParse%2A> method does not throw an exception if the conversion fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf60a-1155">次のコード例のオーバー ロードを示します、<xref:System.Char.TryParse%2A>いくつかの基本型のメソッドと<xref:System.DateTime.TryParseExact%2A>のメソッド、<xref:System.DateTime>基本データ型。</span><span class="sxs-lookup"><span data-stu-id="cf60a-1155">The following code example demonstrates overloads of the <xref:System.Char.TryParse%2A> method for several base types, and the <xref:System.DateTime.TryParseExact%2A> method for the <xref:System.DateTime> base type.</span></span>  
  
 [!code-cpp[T.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.TryParse/CPP/tp.cpp#1)]
 [!code-csharp[T.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.TryParse/CS/tp.cs#1)]
 [!code-vb[T.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.TryParse/VB/tp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="M:System.Char.ToString" />
        <related type="Article" href="https://msdn.microsoft.com/library/d139bc00-3c4e-4d78-ac9a-5c951b258d28"><span data-ttu-id="cf60a-1156">.NET Framework におけるその他の文字列の解析</span><span class="sxs-lookup"><span data-stu-id="cf60a-1156">Parsing Other Strings in the .NET Framework</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>