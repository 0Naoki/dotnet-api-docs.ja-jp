<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3edb6c51437d6c983e7fda56d720c3632c8e72a9" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51317490" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>特定の時点を表します。通常、世界協定時刻 (UTC) を基準とする相対的な日時として表されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset>構造が含まれています、<xref:System.DateTime>値と、<xref:System.DateTimeOffset.Offset%2A>現在間の差を定義するプロパティ<xref:System.DateTimeOffset>インスタンスの日付と時刻と世界協定時刻 (UTC)。 UTC を基準とした日時を正確に定義するため、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`メンバーとして、<xref:System.DateTime>構造が。 11時 59分: 59 PM、西暦 9999 年 12 月 31 日を UTC 値を 12時 00分: 00、年 1 月 1 日の午前 0001 から西暦 (一般的な時代 (年号)) を持つ日付と時刻を表します (西暦)。  
  
 時間コンポーネントを<xref:System.DateTimeOffset>値は、タイマー刻み、100 ナノ秒単位で測定し、特定の日付では、タイマー刻みの数を西暦 0001 年 1 月 1 日午前 12時 00分時から (西暦)<xref:System.Globalization.GregorianCalendar>カレンダーです。 A<xref:System.DateTimeOffset>値が常に明確なコンテキストまたは既定の暦で表されます。 秒数を大きく前進に起因するタイマー刻みはタイマー刻みの合計数は含まれません。  
  
> [!NOTE]
>  分または秒などの他の時間間隔に変換することは、使用する必要があります、タイマー刻みの値を使用している場合、 <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>、または<xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType>変換を実行する定数。 たとえば、秒数を追加するによって表されるをタイマー刻み数が指定された、<xref:System.DateTimeOffset.Second%2A>のコンポーネントである、<xref:System.DateTimeOffset>値、式を使用することができます`dateValue.Second + nTicks/Timespan.TicksPerSecond`。  
  
 ただし、<xref:System.DateTimeOffset>値にはオフセットが含まれています、完全にタイム ゾーン対応のデータ構造ではありません。 UTC からのオフセットは、タイム ゾーンの特性の 1 つがタイム ゾーンが識別明確にはできません。 複数のタイム ゾーンは utc を基準と同じオフセットを共有できるだけでなく、夏時間の 1 つのタイム ゾーン オフセットと変更します。 つまりとすぐに、<xref:System.DateTimeOffset>値がそのタイム ゾーンから関連付け解除されると、不要になった明確にリンクできます、元のタイム ゾーンにします。  
  
 <xref:System.DateTimeOffset>構造体には、<xref:System.DateTimeOffset>オブジェクト宣言されましたが、初期化されていない場合にはにの各メンバー フィールドの既定値が含まれています。 つまり、その<xref:System.DateTimeOffset.DateTime%2A>プロパティに設定されて<xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>とその<xref:System.DateTimeOffset.Offset%2A>プロパティに設定されて<xref:System.TimeSpan.Zero?displayProperty=nameWithType>します。  
  
 新規に作成することができます<xref:System.DateTimeOffset>値のオーバー ロードされたコンス トラクターに似ていますが、コンス トラクターのオーバー ロードのいずれかを呼び出すことによって、<xref:System.DateTime>構造体。 作成することも、新しい<xref:System.DateTimeOffset>値を割り当てることで、<xref:System.DateTime>値。 これは、暗黙的な変換です。キャスト演算子 (c# で) を必要としたり (Visual Basic) での変換メソッドを呼び出すしません。 初期化することも、<xref:System.DateTimeOffset>のさまざまな静的文字列の解析を含むメソッドを呼び出して日時の文字列表現から値<xref:System.DateTimeOffset.Parse%2A>、 <xref:System.DateTimeOffset.ParseExact%2A>、<xref:System.DateTimeOffset.TryParse%2A>と<xref:System.DateTimeOffset.TryParseExact%2A>します。  
  
 メンバー、<xref:System.DateTimeOffset>構造体は、次の領域で機能を提供します。  
  
-   日付と時刻の演算です。  
  
     追加したり、日付または特定の時間間隔を減算<xref:System.DateTimeOffset>値。 使用した算術演算<xref:System.DateTimeOffset>を持つとは異なり、値<xref:System.DateTime>結果を返すときに時刻のオフセットの相違の値を調整します。 たとえば、次のコードでは<xref:System.DateTime>変数を現在の UTC 時刻から現在の現地時刻を減算します。 コードを使用し、<xref:System.DateTimeOffset>変数を同じ操作を実行します。 減算<xref:System.DateTime>値では、utc を基準とローカル タイム ゾーンの差を返しますを減算しながら<xref:System.DateTimeOffset>値を返します<xref:System.TimeSpan.Zero?displayProperty=nameWithType>します。  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   変換操作を入力します。  
  
     変換できる<xref:System.DateTimeOffset>値を<xref:System.DateTimeOffset.DateTime%2A>値、またはその逆です。  
  
-   時間の操作と抽出操作。  
  
     日付または時刻のいずれかを抽出することができます、<xref:System.DateTimeOffset>値。 特定の値を取得することもできます。 <xref:System.DateTimeOffset> 、年、月などのコンポーネント。  
  
-   日付と時刻の変換。  
  
     いずれかに変換することができます<xref:System.DateTimeOffset>間値<xref:System.DateTimeOffset>別のタイム ゾーンの時刻に同じ時点を表す値です。 のみの場合、タイム ゾーンの調整規則を適用するただし、<xref:System.DateTimeOffset.ToLocalTime%2A>メソッドで、変換、<xref:System.DateTimeOffset>日付と時刻にローカル システムのゾーン内の値。  
  
-   日付と時刻を比較します。  
  
     かどうかを決定する特定<xref:System.DateTimeOffset>じか、それとも他よりも後に値が以前より、同じ<xref:System.DateTimeOffset>値。 比較が実行されるまで、すべての値が UTC に変換されます。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">DateTime、DateTimeOffset、TimeSpan、および TimeZoneInfo の使い分け</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">サンプル: .NET Framework 4 の書式設定ユーティリティ</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <summary>
          <see cref="T:System.DateTime" /> 値を指定して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの動作の値によって異なります、<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>のプロパティ、`dateTime`パラメーター。  
  
-   場合の値<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>は<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、<xref:System.DateTimeOffset.DateTime%2A>に新しいインスタンスのプロパティが設定`dateTime`、および<xref:System.DateTimeOffset.Offset%2A>プロパティを等しく設定は<xref:System.TimeSpan.Zero>します。  
  
-   場合の値<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>は<xref:System.DateTimeKind.Local?displayProperty=nameWithType>または<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>、<xref:System.DateTimeOffset.DateTime%2A>に新しいインスタンスのプロパティが設定`dateTime`、および<xref:System.DateTimeOffset.Offset%2A>プロパティをローカル システムの現在のタイム ゾーンのオフセットへと同じに設定されます。  
  
   
  
## Examples  
 次の例を示して 方法の値、<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>のプロパティ、`dateTime`パラメーターがこのコンス トラクターによって返される日付と時刻の値に影響します。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">オフセットを適用した結果の世界協定時刻 (UTC) の日時が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
- または - 
オフセットを適用した結果の UTC 日時が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定された <see cref="T:System.DateTime" /> 値およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの動作は、程度の値に依存、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーター。  
  
-   場合の値<xref:System.DateTime.Kind%2A>は<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>の値、`offset`パラメーターが 0 にする必要がありますまたは<xref:System.ArgumentException>がスローされます。  
  
-   場合の値<xref:System.DateTime.Kind%2A>は<xref:System.DateTimeKind.Local?displayProperty=nameWithType>の値、`offset`パラメーターはその特定の日付のと同じローカル タイム ゾーンのオフセットから世界協定時刻 (UTC) である必要がありますまたは<xref:System.ArgumentException>がスローされます。  
  
-   場合の値<xref:System.DateTime.Kind%2A>は<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>、`offset`パラメーターが有効な値を持つことができます。  
  
   
  
## Examples  
 次の例は、初期化する方法を示します、<xref:System.DateTimeOffset>日時とそのタイム ゾーンが事前にわかっていない場合は、ローカル タイム ゾーンのオフセットを持つオブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime.Kind" /> は <see cref="F:System.DateTimeKind.Utc" /> と等しく、<paramref name="offset" /> は 0 と等しくありません。  
  
- または - 
 <paramref name="dateTime.Kind" /> は <see cref="F:System.DateTimeKind.Local" /> と等しく、<paramref name="offset" /> はシステムのローカル タイム ゾーンのオフセットと等しくありません。  
  
- または - 
 <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> が -14 時間より小さいか、14 時間を超えています。  
  
- または - 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> が <see cref="F:System.DateTimeOffset.MinValue" /> より小さいか <see cref="F:System.DateTimeOffset.MaxValue" /> より大きいです。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">日時を 0001 年 1 月 1 日午前 00:00:00 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定されたタイマー刻みの数とオフセットで、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、呼び出しを試みる、<xref:System.DateTimeOffset.%23ctor%2A>インスタンスを作成するコンス トラクター、<xref:System.DateTimeOffset>以外の値を現地時刻とオフセットをローカル時刻のゾーンがスローされます、<xref:System.ArgumentException>します。 このオーバー ロードを使用することができます、<xref:System.DateTimeOffset>コンス トラクターをこの制限を回避します。 次の例では、インスタンス化する現地時刻のタイマー刻み数を使用して、<xref:System.DateTimeOffset>オフセットは必ずしも表しませんローカル時刻の値。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 次の例では、初期化、 <xref:System.DateTimeOffset> -5 のオフセットで (この例では、2007 年 7 月 16 日午後 1時 32分) では任意の日付をタイマー刻みの数を使用してオブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> 未満か、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。  
  
- または - 
 <paramref name="ticks" /> が <see langword="DateTimeOffset.MinValue.Ticks" /> より小さいか、または <see langword="DateTimeOffset.MaxValue.Ticks" /> を超えています。  
  
- または - 
 <paramref name="Offset" /> が -14 時間未満か、または 14 時間を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 から <c>month</c> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定した年、月、日、時、分、秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンス化する、<xref:System.DateTimeOffset>呼び出し、別の暦の年、月、日を使用して、値、<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>コンス トラクター。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.DateTimeOffset>オブジェクトを使用して、<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター オーバー ロードします。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> は整数の分を表しません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="offset" /> が -14 時間より小さいか、14 時間を超えています。  
  
- または - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、<see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 から <c>month</c> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定した年、月、日、時、分、秒、ミリ秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンス化する、<xref:System.DateTimeOffset>呼び出し、別の暦の年、月、日を使用して、値、<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>コンス トラクター。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.DateTimeOffset>オブジェクトを使用して、<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター オーバー ロードします。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> は整数の分を表しません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。  
  
- または - 
 <paramref name="offset" /> が -14 未満か、14 を超えています。  
  
- または - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、<see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 から <c>month</c> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="calendar">
          <c>year</c>、<c>month</c>、および <c>day</c> を解釈するために使用される暦。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定した暦の指定した年、月、日、時、分、秒、ミリ秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`、 `month`、 `day`、 `hour`、 `minute`、 `second`、および`millisecond`すべてのパラメーターで指定された予定表で表される値の反映、`calendar`パラメーター。 これらの値は、このカレンダーを使用して表現できない日時を形成する場合は、例外がスローされます。  
  
   
  
## Examples  
 次の例は、両方のインスタンスを使用して、<xref:System.Globalization.HebrewCalendar>クラスおよび<xref:System.Globalization.HijriCalendar>インスタンス化するクラス、<xref:System.DateTimeOffset>値。 それぞれの予定表と構成のグレゴリオ暦カレンダーを使用してコンソールには、その日付が表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> は整数の分を表しません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> として <see langword="null" /> を使用することはできません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が <paramref name="calendar" /> パラメーターの <see langword="MinSupportedDateTime.Year" /> に満たないか、<see langword="MaxSupportedDateTime.Year" /> を超えています。  
  
- または - 
 <paramref name="month" /> が、<paramref name="calendar" /> の <paramref name="year" /> の月数に満たないか、月数を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。  
  
- または - 
 <paramref name="offset" /> が -14 時間より小さいか、14 時間を超えています。  
  
- または - 
<paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> の各パラメーターを日時の値として表すことができません。  
  
- または - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、<see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">正や負の時間間隔を表す <see cref="T:System.TimeSpan" /> オブジェクト。</param>
        <summary>このインスタンスの値に、指定された時間間隔を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="timeSpan" /> で表された時間間隔を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.DateTimeOffset.Add%2A>メソッドを 1 回の操作で時間間隔 (日、時、分、秒またはミリ秒単位) の 1 つ以上の種類を追加します。 このメソッドの動作は、加算演算子と同じです。 <xref:System.DateTimeOffset>構造体には、追加の特殊なメソッドもサポートしています (など<xref:System.DateTimeOffset.AddDays%2A>、 <xref:System.DateTimeOffset.AddHours%2A>、および<xref:System.DateTimeOffset.AddMinutes%2A>) 時間間隔。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`timeSpan`をその日付と時刻。  
  
 <xref:System.DateTimeOffset.Add%2A>メソッドでは、現在の値には影響しません<xref:System.DateTimeOffset>オブジェクトの<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンの日時を表していません、<xref:System.DateTimeOffset.Add%2A>メソッドでは、特定のタイム ゾーン調整規則の日付と時刻の演算を実行するときは考慮されません。  
  
 場合、`timeSpan`パラメーターが`null`、このメソッドは、元の値を返します<xref:System.DateTimeOffset>オブジェクトは変更されません。  
  
   
  
## Examples  
 次の例の配列を作成する<xref:System.TimeSpan>変換先の間の飛行時間を表すオブジェクト。 <xref:System.DateTimeOffset.Add%2A>メソッドは、これらの時刻に、追加、<xref:System.DateTimeOffset>フライトの初期離陸時刻を表すオブジェクト。 結果は、各転送先に到着予定時刻を反映します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">整数部と小数部から成る日数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る日数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="days" /> で表された日数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分、`days`パラメーターは、1 日の小数部の一部です。 たとえば、4.5 は 4 日、12 時間、0 分 0 秒を 0 ミリ秒に相当します。 `days`パラメーターはミリ秒単位に丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`days`をその日付と時刻。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンの日時を表していません、<xref:System.DateTimeOffset.AddDays%2A>メソッドでは、特定のタイム ゾーン調整規則の日付と時刻の演算を実行するときは考慮されません。  
  
 1 日未満の時間間隔を小数に変換すると、精度の損失が含まれます。 問題がある場合は、使用できます、<xref:System.DateTimeOffset.Add%2A>メソッドでは、1 つのメソッドの呼び出しで複数の時間間隔の種類を指定することができ、1 日の端数の時間間隔に変換する必要がなくなります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.AddDays%2A>月曜日、2008 年 3 月、週の開始の日付を表示する方法。  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">整数部と小数部から成る時間数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る時間数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="hours" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分、`hours`パラメーターが 1 時間の小数部。 たとえば、4.5 は 4 時間 30 分、0 秒を 0 ミリ秒に相当します。 `hours`パラメーターはミリ秒単位に丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`hours`をその日付と時刻。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンの日時を表していません、<xref:System.DateTimeOffset.AddHours%2A>メソッドでは、特定のタイム ゾーン調整規則の日付と時刻の演算を実行するときは考慮されません。  
  
 1 時間未満の時間間隔を小数に変換すると、有効桁数の損失が生じることができます。 (たとえば、1 分間は 0.01666 時間) です。問題がある場合は、使用できます、<xref:System.DateTimeOffset.Add%2A>メソッドでは、1 つのメソッドの呼び出しで複数の時間間隔の種類を指定することができ、時間間隔を 1 時間の部分の小数部に変換する必要がなくなります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.AddHours%2A>作業の開始時刻を表示する方法を特定の週が 1 日あたり 2 つの 8 時間シフトを office に移動します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">整数部と小数部から成るミリ秒数。 正数または負数を指定できます。</param>
        <summary>指定されたミリ秒数をこのインスタンスの値に加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表される日時に <paramref name="milliseconds" /> で表される整数のミリ秒数を加算した値をもつオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分、`milliseconds`パラメーターが 1 ミリ秒の小数部。 たとえば、4.5 は 4 ミリ秒、10,000 ティックが 1 ミリ秒と等しい場合、5000 のタイマー刻みと同じです。 ただし、 `milliseconds` ; ミリ秒の単位に丸められます.5 以上のすべての値に切り上げられます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`milliseconds`をその日付と時刻。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンの日時を表していません、<xref:System.DateTimeOffset.AddMilliseconds%2A>メソッドでは、特定のタイム ゾーン調整規則の日付と時刻の演算を実行するときは考慮されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">整数部と小数部から成る分数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る分数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="minutes" /> で表された分数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分、`minutes`パラメーターが 1 分間の小数部。 たとえば、4.5 は 4 分、30 秒、ミリ秒を 0 と同じです。 `minutes`パラメーターはミリ秒単位に丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`minutes`をその日付と時刻。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンの日時を表していません、<xref:System.DateTimeOffset.AddMinutes%2A>メソッドでは、特定のタイム ゾーン調整規則の日付と時刻の演算を実行するときは考慮されません。  
  
 1 分未満の時間間隔を小数に変換すると、有効桁数の損失が生じることができます。 (たとえば、1 秒間は 0.01666 分) です。問題がある場合は、使用できます、<xref:System.DateTimeOffset.Add%2A>メソッドでは、1 つのメソッドの呼び出しで複数の時間間隔の種類を指定することができ、時間間隔を 1 分間の小数部に変換する必要がなくなります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">整数の月数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された月数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="months" /> で表された月数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの日付と時刻の値に、1 つの時間間隔の単位 (分単位、日など) を追加するその他のメソッドとは異なり<xref:System.DateTimeOffset.AddMonths%2A>1 か月の部分の小数部を追加することを有効にしません。 か月だけでなく他の時間単位で構成される期間を追加する、<xref:System.DateTimeOffset>オブジェクトを使用して、<xref:System.DateTimeOffset.Add%2A>メソッド。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`months`をその日付と時刻。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTimeOffset.AddMonths%2A> 2007 年の各四半期の開始日を表示するメソッド。  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">整数部と小数部から成る秒数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る秒数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="seconds" /> で表された秒数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小数部分、`seconds`パラメーターが 1 秒の小数部。 秒の小数部の値は、次の表に表示されます。  
  
|2 番目の値|同等の表記|  
|------------------|----------------|  
|.1 秒|100 ミリ秒|  
|.01 秒|10 ミリ秒|  
|.001 秒|1 ミリ秒|  
  
 `seconds`パラメーターはミリ秒単位に丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`minutes`をその日付と時刻。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンの日時を表していません、<xref:System.DateTimeOffset.AddSeconds%2A>メソッドでは、特定のタイム ゾーン調整規則の日付と時刻の演算を実行するときは考慮されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">100 ナノ秒タイマー刻み数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定されたタイマー刻みの数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="ticks" /> で表されたタイマー刻みの数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 ティックは 100 ナノ秒単位または 1-10 分の 1 秒を表します。 チェック マークは、非常に小さく、正確な時間間隔であるため、精度の損失なしのタイマー刻み数として、大きな時間の単位を表現できます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`minutes`をその日付と時刻。  
  
 次の表は、特定の時間間隔でタイマー刻みの数を示します。  
  
|時間間隔|タイマー刻みの数|  
|-------------------|---------------------|  
|Second|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day|864,000,000,000|  
|週|6,048,000,000,000|  
|月|月の日数の値に依存します。|  
|非閏年|315,360,000,000,000|  
|うるう年|316,224,000,000,000|  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンの日時を表していません、<xref:System.DateTimeOffset.AddTicks%2A>メソッドでは、特定のタイム ゾーン調整規則の日付と時刻の演算を実行するときは考慮されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">年数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された年数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="years" /> で表された年数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの日付と時刻の値に、1 つの時間間隔の単位 (分単位、日など) を追加するその他のメソッドとは異なり<xref:System.DateTimeOffset.AddYears%2A>年の部分の小数部を追加することを有効にしません。 数年間からだけでなく他の時間単位で構成される期間を追加する、<xref:System.DateTimeOffset>オブジェクトを使用して、<xref:System.DateTimeOffset.Add%2A>メソッド。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`months`をその日付と時刻。  
  
   
  
## Examples  
 米国、運転免許証を発行できません担当者に 16 歳未満。 次の例には、運転免許証合法的に発行するには、個人を誕生の可能な最新の日付が表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">比較する最初のオブジェクト。</param>
        <param name="second">比較する 2 番目のオブジェクト。</param>
        <summary>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトを比較し、1 つ目のオブジェクトが 2 つ目のオブジェクトの前か後か、または等しいかを示します。</summary>
        <returns>
          <paramref name="first" /> パラメーターの値が <paramref name="second" /> パラメーターの値よりも前か後か、または等しいかを示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> 戻り値 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description><paramref name="first" /> が <paramref name="second" /> よりも前の日時です。  
  
 </description></item><item><term> 0 
 </term><description><paramref name="first" /> と <paramref name="second" /> が等価です。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="first" /> が <paramref name="second" /> より後の日時です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドでは、比較を実行するには、変換両方、`first`と`second`パラメーターを世界協定時刻 (UTC)、比較を実行する前にします。 メソッドは、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 つまり、<xref:System.DateTimeOffset.Compare%2A>メソッドは、2 つかどうかを判断します。<xref:System.DateTimeOffset>オブジェクトの 1 つの点を表しています。 日付と時刻もオフセットと直接比較します。  
  
   
  
## Examples  
 次の例への呼び出し、<xref:System.DateTimeOffset.Compare%2A>メソッドを比較する<xref:System.DateTimeOffset>オブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトとを比較し、現在のオブジェクトがもう一方の <see cref="T:System.DateTimeOffset" /> オブジェクトと比べて前か後か、または等しいかを示します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> との関係を示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> 戻り値 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="other" /> よりも前の日時です。  
  
 </description></item><item><term> 0 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> は等価です。  
  
 </description></item><item><term> 0 より大きい値  
  
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="other" /> よりも後の日時です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは比較<xref:System.DateTimeOffset>オブジェクトを比較することによって、 <xref:System.DateTimeOffset.UtcDateTime%2A> ; の値は、そのかどうかを 2 つのオブジェクトの 1 つの時点を表して、現在のオブジェクトよりも前、後かどうかや、と同じことを示します`other`パラメーター。  
  
   
  
## Examples  
 次の例への呼び出し、<xref:System.DateTimeOffset.CompareTo%2A>メソッドを比較する<xref:System.DateTimeOffset>オブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの日付要素を表す <see cref="T:System.DateTimeOffset" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTime" /> オブジェクトの日付要素を表す <see cref="T:System.DateTimeOffset" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティから、時刻部分の重要な一部の削除、<xref:System.DateTimeOffset>オブジェクトし、その重要な日付部分のみを返します。 たとえば場合、<xref:System.DateTimeOffset>オブジェクトは、日付と時刻の値を持つ"1/12/07 午後 4 時 01 + 7:30"、プロパティを返します、<xref:System.DateTime>の値"1/12/07 12時 00分: 00 AM"。 <xref:System.DateTime>値は日付のみを表示する標準またはカスタム書式指定子のいずれかを使用して、表示されます。 (図の例のセクションを参照してください)。  
  
 値、 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 、返されたプロパティ<xref:System.DateTime>オブジェクトは常に<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 値は影響されません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 その時刻部分なしの日付を表示するのには、"D"も使用できますか、"d"書式指定子。例については、例を参照してください。  
  
   
  
## Examples  
 次の例の値を取得、<xref:System.DateTimeOffset.Date%2A>特定の日付のプロパティ。 一部の標準およびカスタムの日付のみの書式指定子を使用してコンソールにその値が表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の DateTime 書式指定文字列します。</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日付/時刻書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を表す <see cref="T:System.DateTime" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.DateTime%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 このプロパティは、日付との時間コンポーネントの両方を返します、<xref:System.DateTimeOffset>オブジェクトを実行するため便利<xref:System.DateTimeOffset>に<xref:System.DateTime>変換します。 たとえば場合、<xref:System.DateTimeOffset>オブジェクトは、日付と時刻の値を持つ"1/12/07 午後 4 時 01 + 7時 30分"、プロパティの日付を返す"1/12/07 午後 4 時 01"。  
  
 値、 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.DateTimeOffset.DateTime%2A>プロパティによって返される時刻に変換する、<xref:System.DateTimeOffset.Now%2A>と<xref:System.DateTimeOffset.UtcNow%2A>プロパティを<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">DateTime と DateTimeOffset 間の変換</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される月の日付を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 1 ～ 31 の値で表される日付要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Day%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 文字列表現を作成することも、<xref:System.DateTimeOffset>呼び出すことによって、オブジェクトの日付部分、 <xref:System.DateTimeOffset.ToString%2A> "d"または"dd"カスタム書式指定子を持つメソッド。  
  
   
  
## Examples  
 次の例の日付部分の表示、 <xref:System.DateTimeOffset> 3 つの異なる方法でオブジェクト。  
  
-   値を取得することによって、<xref:System.DateTimeOffset.Day%2A>プロパティ。  
  
-   呼び出すことによって、<xref:System.DateTimeOffset.ToString%28System.String%29>メソッドを"d"書式指定子。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "dd"書式指定子を持つメソッド。  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される曜日を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの曜日を示す列挙値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定数の値、<xref:System.DayOfWeek>列挙型の範囲から<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>に<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>します。 かどうか整数にキャストすると、その値の範囲は 0 から (を示す<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) から 6 まで (を示す<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>)。  
  
 "D"書式指定子または"dddd"カスタム書式指定子を使用して、特定の日付の曜日名を表示することもできます。 例:  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 呼び出すことによって、文字列が返されることに注意してください、`ToString`のメソッド、<xref:System.DayOfWeek>このプロパティによって返される列挙型のメンバーはローカライズされていません。 現在のカルチャまたは特定のカルチャの曜日名を含む文字列を抽出する呼び出し、 <xref:System.DateTimeOffset.ToString%2A> "dddd"カスタム書式指定子を持つメソッド。 次のコードで使用して、日付の曜日名を表示するなど、`fr-fr`カルチャ。  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 次の例では、2008 年の各月の最初の日の曜日名を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される年間積算日を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの年間積算日を表す 1 ～ 366 の値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが等しいかどうか、つまり、<see cref="T:System.DateTimeOffset" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表しているかどうかを判断します。</summary>
        <returns>両方の <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較を実行する前に、このメソッドは、両方の値を変換します<xref:System.DateTimeOffset>オブジェクトを世界協定時刻 (UTC)。 メソッドは、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 つまり、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>メソッドは、2 つかどうかを判断します。<xref:System.DateTimeOffset>オブジェクトの 1 つの点を表しています。 日付と時刻もオフセットと直接比較します。 2 つかどうかを判断する<xref:System.DateTimeOffset>オブジェクトが同じ時間を表すしを使用して、同じオフセット値を持つ、<xref:System.DateTimeOffset.EqualsExact%2A>メソッド。  
  
 A<xref:System.DateTimeOffset>ないオブジェクトの`null`以降 (またはそれ以上) あると見なされますが 1 よりも`null`します。  
  
 このオーバー ロード、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>メソッドの実装、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>メソッド。 も若干優れたパフォーマンスを提供、<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>ため、オーバー ロード、`other`パラメーターは、オブジェクトから変換する必要はありません。  
  
   
  
## Examples  
 次の例への呼び出し、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>メソッドをテストする<xref:System.DateTimeOffset>オブジェクトの現在の等価性<xref:System.DateTimeOffset>オブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>
          <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定されたオブジェクトと同じ特定の時点を表しているかどうかを判断します。</summary>
        <returns>
          <paramref name="obj" /> パラメーターが <see cref="T:System.DateTimeOffset" /> オブジェクトであり、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが、両方の現在の値を変換して、比較を実行する前に<xref:System.DateTimeOffset>オブジェクトと`obj`パラメーターを世界協定時刻 (UTC)。 メソッドは、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 つまり、<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>メソッドを判断するかどうか現在<xref:System.DateTimeOffset>オブジェクトと指定したオブジェクトは、時間の 1 つの時点を表しています。 日付と時刻もオフセットと直接比較します。 2 つかどうかを判断する<xref:System.DateTimeOffset>オブジェクトが同じ時間を表すしを使用して、同じオフセット値を持つ、<xref:System.DateTimeOffset.EqualsExact%2A>メソッド。  
  
 場合`obj`は`null`、実行時の型の場合、または`obj`ない<xref:System.DateTimeOffset>、メソッドを返します`false`します。  
  
   
  
## Examples  
 次の例を示すかどうか、現在<xref:System.DateTimeOffset>オブジェクトが他のいくつかと等しい<xref:System.DateTimeOffset>、null 参照にも、オブジェクト<xref:System.DateTime>オブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">比較する最初のオブジェクト。</param>
        <param name="second">比較する 2 番目のオブジェクト。</param>
        <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが、同じ特定の時点を表しているかどうかを判断します。</summary>
        <returns>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは両方に変換して、比較を実行する前に<xref:System.DateTimeOffset>オブジェクトを世界協定時刻 (UTC)。 メソッドは、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 つまり、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>メソッドを判断するかどうか、2 つ<xref:System.DateTimeOffset>オブジェクトの 1 つの点を表しています。 日付と時刻もオフセットと直接比較します。 2 つかどうかを判断する<xref:System.DateTimeOffset>オブジェクトが同じ時間を表すしを使用して、同じオフセット値を持つ、<xref:System.DateTimeOffset.EqualsExact%2A>メソッド。  
  
   
  
## Examples  
 次の例への呼び出し、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>メソッドのさまざまなペアをテストする<xref:System.DateTimeOffset>オブジェクトの等価性。  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表しており、かつ、同じオフセットを持つかどうかを判断します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> が同じ日時の値を持ち、かつ同じ <see cref="P:System.DateTimeOffset.Offset" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数のタイム ゾーンが 1 つのオフセットの戻り値を共有するため`true`は保証されませんが、現在、`other`同じのタイム ゾーンでの表す時刻のオブジェクト。  
  
 異なり、<xref:System.DateTimeOffset.EqualsExact%2A>メソッドは、のオーバー ロード、<xref:System.DateTimeOffset.Equals%2A>メソッドは、2 つのかのみを判断<xref:System.DateTimeOffset>値は、時間に 1 つのポイントを表します。 2 つの値が同じ日付と時刻だけでなく、同じオフセットがあることは示していません。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.DateTimeOffset.EqualsExact%2A>メソッドのような比較を<xref:System.DateTimeOffset>オブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の現地時刻に変換します。</summary>
        <returns>
          <paramref name="fileTime" /> の日時を表すオブジェクト。オフセットは現地時刻のオフセットに設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻の西暦 1601 年 1 月 1 日午前 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値は、します。 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 Windows ファイル時刻を呼び出して、Windows API から直接アクセスできますが、`GetFileTime`を返す関数、`FILETIME`構造体。 1 つの関数のパラメーターは、そのファイルの時刻情報が取得されるファイルのハンドルです。 ファイル ハンドルは呼び出すことによって、`CreateFile`関数。 `FILETIME`構造体の`dwHighDateTime`メンバーがファイルの時刻の 4 つの上位バイトを格納し、その`dwLowDateTime`メンバーには、次の 4 つの下位バイトが含まれています。 次の例は、Windows ファイル時間値を取得し、それらを変換する方法を示しています。<xref:System.DateTimeOffset>値。  
  
 Windows ファイル時刻の値を作成することも<xref:System.DateTime>値を呼び出すことによって、<xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType>と<xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType>メソッドとの間<xref:System.DateTimeOffset>値を呼び出すことによって、<xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType>メソッド。  
  
   
  
## Examples  
 次の例では、Windows API を使用して、ワードパッド実行可能ファイル用の Windows ファイル時刻を取得します。  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="filetime" /> が 0 未満です。  
  
- または - 
 <paramref name="filetime" /> が <see langword="DateTimeOffset.MaxValue.Ticks" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="milliseconds">1970-01-01T00:00:00Z (1970 年 1 月 1 日、12:00 AM UTC) からの経過時間をミリ秒で示す Unix 時間。 これ以前の場合、Unix 時間は負の値になります。</param>
        <summary>1970-01-01T00:00:00Z からの経過時間をミリ秒で示す Unix 時間を <see cref="T:System.DateTimeOffset" /> 値に変換します。</summary>
        <returns>Unix 時間と同じ時間を表す日時の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A> 、返されたプロパティ値<xref:System.DateTimeOffset>インスタンスが<xref:System.TimeSpan.Zero?displayProperty=nameWithType>、世界協定時刻を表します。 呼び出すことによって、特定のタイム ゾーンの時刻に変換できます、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="milliseconds" /> が -62,135,596,800,000 未満です。  
  
- または - 
 <paramref name="milliseconds" /> が 253,402,300,799,999 を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">1970-01-01T00:00:00Z (1970 年 1 月 1 日、12:00 AM UTC) からの経過時間を秒で示す Unix 時間。 これ以前の場合、Unix 時間は負の値になります。</param>
        <summary>1970-01-01T00:00:00Z からの経過時間を秒で示す Unix 時間を <see cref="T:System.DateTimeOffset" /> 値に変換します。</summary>
        <returns>Unix 時間と同じ時間を表す日時の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A> 、返されたプロパティ値<xref:System.DateTimeOffset>インスタンスが<xref:System.TimeSpan.Zero?displayProperty=nameWithType>、世界協定時刻を表します。 呼び出すことによって、特定のタイム ゾーンの時刻に変換できます、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="seconds" /> が -62,135,596,800 未満です。  
  
- または - 
 <paramref name="seconds" /> が 253,402,300,799 を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の時間要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時間要素。 このプロパティには、0 ～ 23 の値の範囲をとる 24 時間制が使用されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Hour%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 文字列表現を作成することもできます、<xref:System.DateTimeOffset>オブジェクトの 1 時間のコンポーネントを呼び出して、 <xref:System.DateTimeOffset.ToString%2A> "H"を持つメソッドまたは"HH"カスタム書式指定子。  
  
   
  
## Examples  
 次の例の時間部分を表示する、 <xref:System.DateTimeOffset> 3 つの異なる方法でオブジェクト。  
  
-   値を取得することによって、<xref:System.DateTimeOffset.Hour%2A>プロパティ。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "H"書式指定子を持つメソッド。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "HH"を持つメソッドは書式指定子。  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの現地日時を表す <see cref="T:System.DateTimeOffset" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの現地日時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必要に応じて、<xref:System.DateTimeOffset.LocalDateTime%2A>プロパティ、現在の変換<xref:System.DateTimeOffset>オブジェクトの日付と時刻をローカル システムの日付と時刻。 変換では、2 段階の操作を示します。  
  
1.  プロパティの現在の変換<xref:System.DateTimeOffset>オブジェクトの時刻を世界協定時刻 (UTC)。  
  
2.  プロパティは、UTC を現地時刻に変換されます。  
  
 無効な時間がないと、あいまいな時刻はローカルのゾーンの標準時刻にマップされます。 (ただし、変換は、異常を作成できます場合、 <xref:System.DateTimeOffset> 、あいまいな日付と時刻値が UTC に変換できると、元の時刻とは異なるローカル時刻にバックアップし、ローカル コンピューターから派生した値が反映されます。)。プロパティでは、この変換を実行するときに、ローカル タイム ゾーンの調整規則が適用されます。  
  
 このプロパティは、日付との時間コンポーネントの両方を返します、<xref:System.DateTimeOffset>オブジェクトは<xref:System.DateTimeOffset>に<xref:System.DateTime>変換します。 このプロパティが異なるために必要な時間変換を実行するだけでなく、<xref:System.DateTimeOffset.DateTime%2A>プロパティの値を設定して、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトを<xref:System.DateTimeKind.Local?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次の例では、いくつかの変換の<xref:System.DateTimeOffset>米国内のローカル時刻の値太平洋標準時ゾーンでの実行例を次に示します。 最後の 3 回はすべてがあいまいです。プロパティは、1 つの日付と時刻を太平洋標準時ゾーンでにそれらのすべてをマップします。  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.DateTimeOffset" /> の最大有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は 9999/12/31 11時 59分: 59 PM + 00時 00分です。  
  
 <xref:System.DateTimeOffset.MaxValue>プロパティの使用を判断するかどうかの新しい値<xref:System.DateTimeOffset>オブジェクトまたは<xref:System.DateTimeOffset>算術演算によって返される値が同じで、またはこの範囲の最大値よりも前。 そうでない場合、メソッドをスローする<xref:System.ArgumentOutOfRangeException>します。 すべて<xref:System.DateTimeOffset>値は、メソッドで比較される前に、世界協定時刻 (UTC) に変換が<xref:System.DateTimeOffset.MaxValue>します。  つまり、<xref:System.DateTimeOffset>値が日付と時刻は、最大の範囲に近いが、オフセットが負の場合、例外をスローする可能性があります。 たとえば、12/31/9999 までの値 11時 00分 PM -02:00 は範囲外 1 時間であるためよりも後<xref:System.DateTimeOffset.MaxValue>を UTC に変換される場合。  
  
 などの一部の暦、<xref:System.Globalization.UmAlQuraCalendar>より前である日付範囲をサポートして<xref:System.DateTime.MaxValue>します。 このような場合にアクセスしようとして<xref:System.DateTime.MaxValue>変数の代入、または書式設定と解析操作ではスロー、<xref:System.ArgumentOutOfRangeException>します。 値を取得する代わりに<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、最新の有効な日付値を指定したカルチャの値を取得することができます、<xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="F:System.DateTime.MaxValue" /> が、現在または指定したカルチャの既定の暦の範囲外です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻のミリ秒要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 999 の整数で表されるミリ秒要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列表現を作成することも、<xref:System.DateTimeOffset>オブジェクトのミリ秒の部分を呼び出すことによって、 <xref:System.DateTimeOffset.ToString%2A> "fff"カスタム書式指定子を持つメソッド。  
  
 などのプロパティに依存する場合<xref:System.DateTimeOffset.Now%2A>または<xref:System.DateTimeOffset.UtcNow%2A>経過したミリ秒数を正確に追跡するには、時刻のミリ秒部分の有効桁数は、システム時計の解像度に依存します。 Windows NT 3.5 以降、および Windows Vista オペレーティング システムでは、時計の解像力は約 10 ~ 15 ミリ秒です。  
  
   
  
## Examples  
 次の例のミリ秒数を表示する、<xref:System.DateTimeOffset>オブジェクトのカスタム書式指定子を使用して直接アクセスすることによって、<xref:System.DateTimeOffset.Millisecond%2A>プロパティ。  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の分要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 59 の整数で表される分要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Minute%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 文字列表現を作成することも、<xref:System.DateTimeOffset>呼び出すことによってオブジェクトの分の部分、 <xref:System.DateTimeOffset.ToString%2A> "m"または"mm"カスタム書式指定子を持つメソッド。  
  
   
  
## Examples  
 次の例の分部分を表示する、 <xref:System.DateTimeOffset> 3 つの異なる方法でオブジェクト。  
  
-   値を取得することによって、<xref:System.DateTimeOffset.Minute%2A>プロパティ。  
  
-   呼び出すことによって、<xref:System.DateTimeOffset.ToString%28System.String%29>メソッド"m"書式指定子。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "mm"書式指定子を持つメソッド。  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.DateTimeOffset" /> の最小有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は 1/1/0001 12時 00分: 00 + 00時 00分です。  
  
 <xref:System.DateTimeOffset.MinValue>プロパティの使用を判断するかどうかの新しい値<xref:System.DateTimeOffset>オブジェクトまたは<xref:System.DateTimeOffset>算術演算によって返される値が同じで、またはこの範囲の最小値よりも後でします。 そうでない場合、メソッドをスローする<xref:System.ArgumentOutOfRangeException>します。 すべて<xref:System.DateTimeOffset>値は、メソッドとの比較を実行する前に、世界協定時刻 (UTC) に変換されます<xref:System.DateTimeOffset.MinValue>します。  つまり、<xref:System.DateTimeOffset>値の日付と時刻が範囲の最小の近くにいるが、オフセットが正の値、例外をスローする可能性があります。 たとえば、値 1/1/0001 1時 00分: 00 AM +02: 00 は範囲外 1 時間であるためよりも前<xref:System.DateTimeOffset.MinValue>を UTC に変換される場合。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される日付の月要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 1 ～ 12 の整数で表される月要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Month%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 文字列表現を作成することも、<xref:System.DateTimeOffset>呼び出すことによって、オブジェクトの月コンポーネント、 <xref:System.DateTimeOffset.ToString%2A> "M"または"MM"カスタム書式指定子を持つメソッド。  
  
   
  
## Examples  
 次の例の月部分の表示、 <xref:System.DateTimeOffset> 3 つの異なる方法で値。  
  
-   値を取得することによって、<xref:System.DateTimeOffset.Month%2A>プロパティ。  
  
-   呼び出すことによって、<xref:System.DateTimeOffset.ToString%28System.String%29>メソッド"M"書式指定子。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "MM"書式指定子を持つメソッド。  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現地時刻と世界協定時刻 (UTC) の差をオフセットとして持つ、現在のコンピューターの現在日時に設定された <see cref="T:System.DateTimeOffset" /> オブジェクトを取得します。</summary>
        <value>ローカル タイム ゾーンと世界協定時刻 (UTC) の差をオフセットとして持つ、現在の現地時刻に設定された <see cref="T:System.DateTimeOffset" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の現地時刻のミリ秒部分の有効桁数は、システム時計の解像度によって異なります。 Windows NT 3.5 以降、および Windows Vista オペレーティング システムでは、時計の解像力は約 10 ~ 15 ミリ秒です。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.Now%2A>プロパティを現在の日付と時刻を取得するを使用して表示します、[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)でサポートされている、<xref:System.DateTimeOffset>型。  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 次の例では、<xref:System.DateTimeOffset.Now%2A>と<xref:System.DateTimeOffset.Millisecond%2A>プロパティをシステム時計の解像度を確認します。 時刻を表示、ミリ秒の部分の値が変更された場合のみです。  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>世界協定時刻 (UTC) からの時刻のオフセットを取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時刻値と世界協定時刻 (UTC) 間の差。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、 <xref:System.TimeSpan.Hours%2A> 、返されたプロパティ<xref:System.TimeSpan>オブジェクト範囲は-14 時間を ~ 14 時間。  
  
 値、<xref:System.DateTimeOffset.Offset%2A>プロパティは、分単位の精度。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.Offset%2A>プロパティを世界協定時刻 (UTC) からのローカル時刻の差を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">時間間隔を加算するオブジェクト。</param>
        <param name="dateTimeTz">To be added.</param>
        <param name="timeSpan">加算する時間間隔。</param>
        <summary>特定の日時を持つ <see cref="T:System.DateTimeOffset" /> オブジェクトに指定された時間間隔を加算し、新しい日時を持った <see cref="T:System.DateTimeOffset" /> オブジェクトを作成します。</summary>
        <returns>
          <paramref name="dateTimeTz" /> と <paramref name="timeSpan" /> の値の合計を値とするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Addition%2A>メソッド定義の加算演算<xref:System.DateTimeOffset>値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Add%2A>メソッド代わりにします。  
  
 この演算子を同等のメソッドは<xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>します。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが、同じ特定の時点を表しているかどうかを判断します。</summary>
        <returns>両方の <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Equality%2A>メソッド定義の等値演算子の操作<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 評価する前に、`left`と`right`等しいかどうか、演算子のオペランドが両方の値を世界協定時刻 (UTC) に変換します。 操作は、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 つまり、<xref:System.DateTimeOffset.op_Equality%2A>メソッドを判断するかどうか、2 つ<xref:System.DateTimeOffset>オブジェクトの 1 つの点を表しています。 日付と時刻もオフセットと直接比較します。 2 つかどうかを判断する<xref:System.DateTimeOffset>オブジェクトが同じ時間を表すしを使用して、同じオフセット値を持つ、<xref:System.DateTimeOffset.EqualsExact%2A>メソッド。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトよりも大きい (後) かどうかを判断します。</summary>
        <returns>
          <paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値よりも後の日時を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>メソッドは、大なり演算子の操作を定義します。<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Compare%2A>メソッド代わりにします。 呼び出すことができます、<xref:System.DateTimeOffset.op_GreaterThan%2A>メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 評価する前に、`left`と`right`演算子のオペランドが両方の値を世界協定時刻 (UTC) に変換します。 操作は、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクト以上かどうかを判断します。</summary>
        <returns>
          <paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値と同じかそれよりも後であった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>メソッドより大きいまたは等しいオペレーターの操作を定義します。<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Compare%2A>メソッド代わりにします。 一部の言語を呼び出すことも、<xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A>メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 評価する前に、`left`と`right`演算子のオペランドが両方の値を世界協定時刻 (UTC) に変換します。 操作は、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換対象のオブジェクト。</param>
        <summary>
          <see cref="T:System.DateTime" /> オブジェクトから <see cref="T:System.DateTimeOffset" /> オブジェクトへの暗黙の型変換を定義します。</summary>
        <returns>変換後のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Implicit%2A>メソッドにより、自動的に変換するコンパイラを<xref:System.DateTime>オブジェクトを<xref:System.DateTimeOffset>せずに明示的なキャスト演算子 (c#) または (Visual Basic) での変換関数の呼び出しオブジェクト。 データの損失を伴わないをスローしない拡大変換を定義、<xref:System.OverflowException>します。 <xref:System.DateTimeOffset.op_Implicit%2A>メソッドは、次の指定可能なコード。  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 このメソッドは、<xref:System.DateTimeOffset.%23ctor%2A>コンス トラクター。 結果のオフセット<xref:System.DateTimeOffset>オブジェクトの値に依存、<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>のプロパティ、`dateTime`パラメーター。  
  
-   場合の値、<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、日付と時刻の<xref:System.DateTimeOffset>オブジェクトと等しく設定`dateTime`とその<xref:System.DateTimeOffset.Offset%2A>プロパティが 0 に設定します。  
  
-   場合の値、<xref:System.DateTime.Kind%2A?displayProperty=nameWithType>プロパティは<xref:System.DateTimeKind.Local?displayProperty=nameWithType>または<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>、日付と時刻の<xref:System.DateTimeOffset>オブジェクトと等しい設定`dateTime`とその<xref:System.DateTimeOffset.Offset%2A>プロパティをローカル システムの現在のタイム ゾーンのオフセットへと同じに設定されます。  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">オフセットを適用した結果の世界協定時刻 (UTC) の日時が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
- または - 
オフセットを適用した結果の UTC 日時が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが異なる時点を表しているかどうかを判断します。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値が異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Inequality%2A>メソッドの非等値演算子の動作を定義する<xref:System.DateTimeOffset>オブジェクト。 反対の結果から常に返す<xref:System.DateTimeOffset.op_Equality%2A>します。 <xref:System.DateTimeOffset.op_Inequality%2A>メソッドは、次のコードを使用できます。  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 評価する前に、`left`と`right`等しいかどうか、演算子のオペランドが両方の値を世界協定時刻 (UTC) に変換します。 操作は、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 つまり、<xref:System.DateTimeOffset.op_Inequality%2A>メソッドを判断するかどうか、2 つ<xref:System.DateTimeOffset>オブジェクトのさまざまな時点を表しています。 日付と時刻もオフセットと直接比較します。  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Compare%2A>メソッド代わりにします。 さらに、一部の言語を呼び出すことも、<xref:System.DateTimeOffset.op_Inequality%2A>メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトより小さいかどうかを判断します。</summary>
        <returns>
          <paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値より前の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThan%2A>メソッド定義の演算子よりも低いの操作<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 評価する前に、`left`と`right`演算子のオペランドが両方のオペランドを世界協定時刻 (UTC) に変換します。 操作は、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Compare%2A>メソッド代わりにします。 さらに、一部の言語を呼び出すことも、<xref:System.DateTimeOffset.op_LessThan%2A>メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトより小さいかどうかを判断します。</summary>
        <returns>
          <paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値より前の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A>メソッドの操作を定義するオペレーターに等しいまたはそれよりも小さい<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Compare%2A>メソッド代わりにします。 一部の言語を呼び出すことも、<xref:System.DateTimeOffset.op_LessThanOrEqual%2A>メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 評価する前に、`left`と`right`演算子のオペランドが両方の値を世界協定時刻 (UTC) に変換します。 操作は、次のと同等です。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 この演算子を同等のメソッドは、します。 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された <see cref="T:System.DateTimeOffset" /> オブジェクトまたは <see cref="T:System.TimeSpan" /> オブジェクトを <see cref="T:System.DateTimeOffset" /> オブジェクトから減算します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">被減数。</param>
        <param name="right">減数。</param>
        <summary>一方の <see cref="T:System.DateTimeOffset" /> オブジェクトをもう一方のオブジェクトから減算し、時間間隔を生成します。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> の差を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A>メソッド定義の減算演算<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>メソッド代わりにします。  
  
 この演算子を同等のメソッドは<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>します。]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">減算される日時オブジェクト。</param>
        <param name="dateTimeTz">To be added.</param>
        <param name="timeSpan">減算する時間間隔。</param>
        <summary>指定した日付と時刻から指定した時間間隔を減算して、新しい日付と時刻を作成します。</summary>
        <returns>
          <paramref name="dateTimeOffset" /> から <paramref name="timeSpan" /> を減算した値と等しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A>メソッド定義の減算演算<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>メソッド代わりにします。  
  
 この演算子を同等のメソッドは<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>します。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満であるか、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <summary>指定した文字列形式の日付、時刻、およびオフセットを等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns>
          <paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> 任意の順序で表示されることができますし、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に示したとおりです。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1時 02分: 03 PM"|  
|\<オフセット >|"-7: 30"|  
  
 これらの各要素は省略可能な\<オフセット > を単独で表示されることはできません。 いずれかと組み合わせて指定する必要があります\<日付 > または\<時間 >。 場合\<日付 > がありませんが、その既定値は、現在の日付。 場合\<時間 > がありませんが、その既定値は 12時 00分: 00 AM です。 場合\<日付 > が、その年のコンポーネントは、2 桁のみで構成されますの値に基づいて、現在のカルチャの現在の暦で年に変換されます、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティ。 場合\<オフセット > がありませんが、その既定値はローカル タイム ゾーンのオフセット。 \<オフセット > 表せる負または正のオフセットのいずれかから世界協定時刻 (UTC)。 いずれの場合も、\<オフセット > の記号を含める必要があります。  
  
 `input`で書式設定情報を使用して文字列を解析する<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャが初期化されるオブジェクト。 現在のカルチャの書式設定には必ずしも対応しない指定の書式設定を含む文字列を解析するには使用、<xref:System.DateTimeOffset.ParseExact%2A>メソッドと書式指定子を提供します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.Parse%28System.String%29>をいくつかの日付と時刻の文字列を解析します。 例では、2007 年 3 月 22 日からの出力を含むカルチャが英語であるシステム上のことです。  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns>
          <paramref name="formatProvider" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、任意の順序で表示されることができますし、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に表示されます。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1時 02分: 03 PM"|  
|\<オフセット >|"-7: 30"|  
  
 これらの各要素は省略可能な\<オフセット > を単独で表示されることはできません。 いずれかと組み合わせて指定する必要があります\<日付 > または\<時間 >。 場合\<日付 > がありませんが、その既定値は、現在の日付。 場合\<日付 > が、その年のコンポーネントは、2 桁のみで構成されますの年に変換されます、`provider`パラメーターの現在の暦がの値に基づいて、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティ。 場合\<時間 > がありませんが、その既定値は 12時 00分: 00 AM です。 場合\<オフセット > がありませんが、その既定値はローカル タイム ゾーンのオフセット。 \<オフセット > 表せる負または正のオフセットのいずれかから世界協定時刻 (UTC)。 いずれの場合も、\<オフセット > の記号を含める必要があります。  
  
 これら 3 つの要素の書式を定義して、`formatProvider`パラメーターで、次のいずれかになります。  
  
-   A<xref:System.Globalization.CultureInfo>で使用される書式はカルチャを表すオブジェクトを`input`パラメーター。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ定義で使用される書式`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 使用される正または負の符号\<オフセット > いずれかである必要があります + または - します。 によって定義されていない、<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>のオブジェクト、`formatProvider`パラメーター。  
  
   
  
## Examples  
 次の例では、解析日付と時刻の文字列は、fr-fr カルチャの書式設定をローカル システムを使用してそれらを表示する既定の en のカルチャを返します。  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns>
          <paramref name="formatProvider" /> と <paramref name="styles" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、任意の順序で表示されることができますし、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に表示されます。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1時 02分: 03 PM"|  
|\<オフセット >|"-7: 30"|  
  
 これらの各要素は省略可能な\<オフセット > を単独で表示されることはできません。 いずれかと組み合わせて指定する必要があります\<日付 > または\<時間 >。 場合\<日付 > がありませんが、その既定値は、現在の日付。 場合\<日付 > が、その年のコンポーネントは、2 桁のみで構成されますの年に変換されます、`provider`パラメーターの現在の暦がの値に基づいて、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティ。 場合\<時間 > がありませんが、その既定値は 12時 00分: 00 AM です。 場合\<オフセット > がありませんが、その既定値は、ローカル タイム ゾーンのオフセットまたは<xref:System.TimeSpan.Zero?displayProperty=nameWithType>場合、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>または<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>で値が指定されて、`styles`パラメーター。 場合\<オフセット > が存在する場合は、表すことができる負または正のオフセットのいずれかから世界協定時刻 (UTC)。 いずれの場合も、\<オフセット > の記号を含める必要があります。  
  
 これら 3 つの要素の書式を定義して、`formatProvider`パラメーターで、次のいずれかになります。  
  
-   A<xref:System.Globalization.CultureInfo>で使用される書式はカルチャを表すオブジェクトを`input`パラメーター。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ定義で使用される書式`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 各要素は、先頭または末尾の空白文字で囲むこともでき、\<日付 > と\<時間 > 要素 (6時 00分: 00) などの内部の空白文字を含めることができます。 のみ、\<オフセット > コンポーネントは、内部の空白文字を含めることはできません。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 使用される正または負の符号\<オフセット > いずれかである必要があります + または - します。 によって定義されていない、<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、`formatProvider`パラメーター。  
  
 次の表のメンバー、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>サポートされている列挙型。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|によって表される文字列を解析して`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>メソッドは、返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効では、この値は無視されます。 内部の空白が許可されている、\<日付 > と\<時間 > 要素。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効では、この値は無視されます。 解析された文字列内の各コンポーネントの前に空白が許可されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効では、この値は無視されます。 解析された文字列内の各コンポーネントの前に、末尾の空白文字は許可されています。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|これが既定の動作です。 制限を指定して、オーバーライドできません<xref:System.Globalization.DateTimeStyles>などの列挙値<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合は、ことを示します、`input`パラメーターがない、\<オフセット > 要素では、ローカル タイム ゾーンのオフセットを指定する必要があります。 これは、既定の動作、<xref:System.DateTimeOffset.Parse%2A>メソッド。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合は、ことを示します、`input`パラメーターがない、\<オフセット > 要素では、UTC のオフセット (00:00) を使用する必要があります。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効な場合は、この値は無視され、影響を与えません。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティでは、この値は影響を与えません。|  
  
 のみ、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>値がサポートされていません。 <xref:System.ArgumentException>でこの値が含まれている場合にスローされる、`styles`パラメーター。  
  
   
  
## Examples  
 次の例では、渡すことの効果を示しています、 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>、 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>、および<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>値を`styles`のパラメーター、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>メソッド。  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
  
- または - 
 <paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
- または - 
 サポートされていない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> に含まれています。  
  
- または - 
 同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> に含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format">
          <c>input</c> の有効な書式を定義する書式指定子。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="format" /> と <paramref name="formatProvider" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>メソッドで定義された書式である必要があります日付の文字列表現を解析し、`format`パラメーター。 必要、\<日付 >、\<時間 >、および\<オフセット > で指定された順序で表示される日付と時刻の文字列形式の要素`format`します。 場合、`input`文字列と一致しませんこの`format`パラメーター、メソッドをスローする<xref:System.FormatException>します。  これに対し、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドは、書式プロバイダーのによって認識される形式のいずれかの日付の文字列表現を解析し<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 <xref:System.DateTimeOffset.Parse%2A> できます、\<日付 >、\<時間 >、および\<オフセット > 要素の任意の順序で表示するには、日付と時刻の文字列表現。  
  
 `format`パラメーターは、1 つの標準書式指定子または必要な書式を定義する 1 つまたは複数のカスタム書式指定子を含む文字列、`input`パラメーター。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合`format`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号がない場合、メソッドがスローされます、<xref:System.FormatException>します。  
  
 場合`format`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合`format`いる必要があります`input`、時間がない日付、結果を含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合`format`いる必要はありません`input`、その結果、オフセットを含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムのタイム ゾーン オフセットが割り当てられます。  
  
 特定の日付と時刻のシンボルで使用される文字列`input`によって定義されます、`formatProvider`パラメーターの正確な形式は`input`場合`format`は標準書式指定子の文字列です。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>シンボルとに書式設定プロパティを定義します`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドをいくつかの日付と時刻の文字列を解析するには、標準とカスタム書式指定子と、インバリアント カルチャ。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

次の例に準拠するように予想される文字列の配列を解析して[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)します。 例の出力としては、文字列の先頭または末尾のスペースには、範囲外の日付と時刻の要素を含む文字列と同様に正常に解析に失敗します。

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> が空の文字列 ("") です。  
  
- または - 
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="format" /> が空の文字列です。  
  
- または - 
<paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTimeOffset.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">日付と時刻を表す文字範囲です。</param>
        <param name="format">
          <paramref name="input" /> の有効な書式を定義する書式指定子を含む文字範囲です。</param>
        <param name="formatProvider">
          <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、日付と時刻を表す文字範囲を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 日付と時刻を表すための書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="format" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

このメソッドで定義された書式である必要があります日付を表す文字範囲を解析し、`format`パラメーター。 必要、\<日付 >、\<時間 >、および\<オフセット > で指定された順序で表示される日付と時刻の文字列形式の要素`format`します。 場合`input`と一致しません、`format`パターンでは、メソッドをスローする<xref:System.FormatException>します。  これに対し、<xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>メソッドは、書式プロバイダーのによって認識される形式のいずれかの日付の文字列表現を解析し<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 <xref:System.DateTimeOffset.Parse%2A> できます、\<日付 >、\<時間 >、および\<オフセット > 要素の任意の順序で表示するには、日付と時刻の文字列表現。  
  
 `format`パラメーターは、1 文字の標準書式指定子または必要な書式を定義する 1 つまたは複数のカスタム書式指定子を含む文字範囲、`input`パラメーター。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合`format`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号がない場合、メソッドがスローされます、<xref:System.FormatException>します。  
  
 場合`format`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合`format`いる必要があります`input`、時間がない日付、結果を含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合`format`いる必要はありません`input`、その結果、オフセットを含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムのタイム ゾーン オフセットが割り当てられます。  
  
 特定の日付と時刻のシンボルで使用される文字列`input`によって定義されます、`formatProvider`パラメーターの正確な形式は`input`場合`format`は標準書式指定子。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>シンボルとに書式設定プロパティを定義します`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
- または -  
サポートされていない値が <paramref name="styles" /> パラメーターに含まれています。  
- または -  
同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> は空の文字範囲です。  
 または、<paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
 または、<paramref name="format" /> は空の文字範囲です。  
 - または -  
 <paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日付と時刻を含む文字範囲。</param>
        <param name="formats">
          <paramref name="input" /> の有効な書式を定義する書式指定子の配列。</param>
        <param name="formatProvider">
          <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、日付と時刻の文字列表現を含む文字範囲を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 日付と時刻を表すための書式は、指定した書式のいずれかと完全に一致する必要があります。</summary>
        <returns>
          <paramref name="formats" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
このメソッドは、いずれかに割り当てられているパターンに一致する日付を表す文字範囲を解析し、`formats`パラメーター。 場合`input`によって定義されたバリエーションのいずれかでこれらのパターンのいずれかと一致しません、`styles`パラメーター、メソッドはスロー、<xref:System.FormatException>します。 別に比較する`input`このオーバー ロードを同じように動作する複数の書式パターン、<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>メソッド。  
  
 `formats`パラメーターが 1 つの標準書式指定子またはの可能なパターンを定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素を格納する文字列配列、`input`パラメーター。 メソッドが呼び出されると、`input`これらのパターンのいずれかに一致する必要があります。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合に一致する要素`formats`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号がない場合、メソッドがスローされます、<xref:System.FormatException>します。  
  
> [!IMPORTANT]
>  使用して、`formats`複数の形式を指定するこのオーバー ロードのパラメーターは、日付と時刻を入力するときに発生する多くのユーザーの不満を削減できます。 具体的には、複数の入力パターンを定義する機能には、日付と時刻の表現を含めるか月、日、時間、分、および秒に先行ゼロがないことができますを処理するためにアプリケーションができます。
  
 場合に一致する要素`formats`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合に一致する要素`formats`いる必要があります`input`、時間がない日付、結果を含めることが<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合に一致する要素`formats`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal>にローカル タイム ゾーンのオフセットが割り当てられている、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 (UTC) オフセット、またはに割り当てられている 00:00、+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値が指定されている場合は、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルで使用される文字列`input`が定めた、`formatProvider`パラメーター。 正確な形式の場合も同様`input`場合、一致する要素の`formats`標準書式指定子の文字列します。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>シンボルとに書式設定プロパティを定義します`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは空白が許可されているかどうかを定義、入力文字列で、明示的なオフセットのコンポーネントがない場合、文字列の解析方法と、解析操作の一部としてサポートしている UTC の変換を示します。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>を除く列挙型がサポートされている<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>します。 次の表では、サポートされている各メンバーの効果を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>メソッドは、返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合に一致する要素`formats`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合に一致する要素`formats`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトには、UTC のオフセット (+ 00時 00分) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`で指定されていない内部の空白文字を含める`format`します。 余分な空白は、日付と時刻のコンポーネント間および (オフセット) を除く個別のコンポーネント内に表示されることができますは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`で指定されていない先頭のスペースを含める`formats`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`末尾のスペースで指定されていない対象`formats`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`で指定されていない先頭、末尾、および内部の空白文字を含める`formats`します。 すべての余分な空白文字に一致する要素で指定されていない`formats`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示します`input`します。 空白文字は、の特定の要素で指定どおり正確に表示する必要があります`formats`一致するのです。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
または、サポートされていない値が <paramref name="styles" /> に含まれています。  
- または -  
同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> は空の文字範囲です。  
または、<paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
- または -  
<paramref name="formats" /> の要素に有効な書式指定子が含まれていません。  
- または -  
<paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format">
          <c>input</c> の有効な書式を定義する書式指定子。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> に許可されている書式を示す列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="format" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドで定義された書式である必要があります日付の文字列表現を解析し、`format`パラメーター。 必要、\<日付 >、\<時間 >、および\<オフセット > で指定された順序で表示される日付と時刻の文字列形式の要素`format`します。 場合、`input`文字列がパターンと一致しません、`format`によって定義されたすべてのバリエーションのパラメーター、`styles`パラメーター、メソッドはスロー、<xref:System.FormatException>します。  これに対し、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドは、書式プロバイダーのによって認識される形式のいずれかの日付の文字列表現を解析し<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 <xref:System.DateTimeOffset.Parse%2A> できます、\<日付 >、\<時間 >、および\<オフセット > 要素の任意の順序で表示するには、日付と時刻の文字列表現。  
  
 `format`パラメーターは、1 つの標準書式指定子またはの必要なパターンを定義する 1 つまたは複数のカスタム書式指定子を含む文字列、`input`パラメーター。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合`format`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号がない場合、メソッドがスローされます、<xref:System.FormatException>します。  
  
 場合`format`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合`format`いる必要があります`input`、時間がない日付、結果を含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合`format`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal>にローカル タイム ゾーンのオフセットが割り当てられている、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 (UTC) オフセット、またはに割り当てられている 00:00、+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値が指定されている場合は、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルで使用される文字列`input`が定めた、`formatProvider`パラメーター。 正確な形式の場合も同様`input`場合は、`format`は標準書式指定子の文字列です。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>シンボルとに書式設定プロパティを定義します`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは空白が許可されているかどうかを定義、入力文字列で、明示的なオフセットのコンポーネントがない場合、文字列の解析方法と、解析操作の一部としてサポートしている UTC の変換を示します。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>を除く列挙型がサポートされている<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>します。 次の表では、サポートされている各メンバーの効果を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>メソッドは、返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合`format`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合`format`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトには、UTC のオフセット (+ 00時 00分) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`で指定されていない内部の空白文字を含める`format`します。 余分な空白は、日付と時刻のコンポーネント間、および個々 のコンポーネント内に表示されることができますは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`で指定されていない先頭のスペースを含める`format`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`末尾のスペースで指定されていない対象`format`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`で指定されていない先頭、末尾、および内部の空白文字を含める`format`します。 すべての余分な空白文字で指定されていない`format`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示します`input`します。 空白文字はの指定どおり正確に表示する必要があります`format`します。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ。|  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>標準とカスタム書式指定子、インバリアント カルチャ、およびさまざまなメソッド<xref:System.Globalization.DateTimeStyles>いくつかの日付と時刻の文字列を解析する値。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

次の例は、さまざまな<xref:System.Globalization.DateTimeStyles>に準拠するように予想される文字列の配列を解析する[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)します。 例の出力に示すよう適切な形式である文字列解析に失敗する場合。

- 空白、および適切なが含まれている<xref:System.Globalization.DateTimeStyles>フラグ (など<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>メソッドの呼び出しで指定されていません。

- 範囲外の日付と時刻の要素が含まれます。

UTC オフセットが指定されていない文字列がローカル タイム ゾーンのオフセットがあると見なされます (この場合、-07:00) しない限り、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>メソッドの呼び出しで指定されているフラグ。 その場合は、世界協定時刻であると見なされます。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
  
- または - 
サポートされていない値が <paramref name="styles" /> パラメーターに含まれています。  
  
- または - 
同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> が空の文字列 ("") です。  
  
- または - 
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="format" /> が空の文字列です。  
  
- または - 
<paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTimeOffset.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formats">
          <c>input</c> の有効な書式を定義する書式指定子の配列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> に許可されている書式を示す列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="formats" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドに割り当てられているパターンのいずれかに一致する日付の文字列表現を解析し、`formats`パラメーター。 場合、`input`文字列で定義されているバリエーションのいずれかでこれらのパターンのいずれか一致しません、`styles`パラメーター、メソッドはスロー、<xref:System.FormatException>します。 別に比較する`input`このオーバー ロードを同じように動作する複数の書式パターン、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッド。  
  
 `formats`パラメーターが 1 つの標準書式指定子またはの可能なパターンを定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素を格納する文字列配列、`input`パラメーター。 メソッドが呼び出されると、`input`これらのパターンのいずれかに一致する必要があります。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合に一致する要素`formats`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号がない場合、メソッドがスローされます、<xref:System.FormatException>します。  
  
> [!IMPORTANT]
>  使用して、`formats`複数の形式を指定するこのオーバー ロードのパラメーターは、日付と時刻を入力するときに発生する多くのユーザーの不満を削減できます。 具体的には、複数の入力パターンを定義する機能には、日付と時刻の表現を含めるか月、日、時間、分、および秒に先行ゼロがないことができますを処理するためにアプリケーションができます。 例では、この図を提供します。  
  
 場合に一致する要素`formats`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合に一致する要素`formats`いる必要があります`input`、時間がない日付、結果を含めることが<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合に一致する要素`formats`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal>にローカル タイム ゾーンのオフセットが割り当てられている、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 (UTC) オフセット、またはに割り当てられている 00:00、+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値が指定されている場合は、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルで使用される文字列`input`が定めた、`formatProvider`パラメーター。 正確な形式の場合も同様`input`場合、一致する要素の`formats`標準書式指定子の文字列します。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>シンボルとに書式設定プロパティを定義します`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは空白が許可されているかどうかを定義、入力文字列で、明示的なオフセットのコンポーネントがない場合、文字列の解析方法と、解析操作の一部としてサポートしている UTC の変換を示します。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>を除く列挙型がサポートされている<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>します。 次の表では、サポートされている各メンバーの効果を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>メソッドは、返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合に一致する要素`formats`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合に一致する要素`formats`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトには、UTC のオフセット (+ 00時 00分) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`で指定されていない内部の空白文字を含める`format`します。 余分な空白は、日付と時刻のコンポーネント間および (オフセット) を除く個別のコンポーネント内に表示されることができますは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`で指定されていない先頭のスペースを含める`formats`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`末尾のスペースで指定されていない対象`formats`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`で指定されていない先頭、末尾、および内部の空白文字を含める`formats`します。 すべての余分な空白文字に一致する要素で指定されていない`formats`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示します`input`します。 空白文字は、の特定の要素で指定どおり正確に表示する必要があります`formats`一致するのです。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ。|  
  
   
  
## Examples  
 次の例は、日付と時刻、およびオフセットの値の文字列形式の複数の入力形式を定義し、ユーザーによって入力される文字列を渡します、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッド。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
  
- または - 
 サポートされていない値が <paramref name="styles" /> に含まれています。  
  
- または - 
同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> が空の文字列 ("") です。  
  
- または - 
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
<paramref name="formats" /> の要素に有効な書式指定子が含まれていません。  
  
- または - 
<paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTimeOffset.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の秒要素を取得します。</summary>
        <value>
          <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 59 の整数値で表される秒要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Second%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 文字列表現を作成することも、<xref:System.DateTimeOffset>オブジェクトの 2 番目のコンポーネントを呼び出して、 <xref:System.DateTimeOffset.ToString%2A> "s"または"ss"カスタム書式指定子を持つメソッド。  
  
   
  
## Examples  
 次の例の 2 番目のコンポーネントの表示、 <xref:System.DateTimeOffset> 3 つの異なる方法でオブジェクト。  
  
-   値を取得することによって、<xref:System.DateTimeOffset.Second%2A>プロパティ。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "s"書式指定子を持つメソッド。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "ss"を持つメソッドは書式指定子。  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、指定された時間または期間を減算します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">減算する値を表すオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、特定の日時を表す <see cref="T:System.DateTimeOffset" /> 値を減算します。</summary>
        <returns>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクト間の間隔を指定するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、両方に変換します<xref:System.DateTimeOffset>それらを区切る時間間隔を計算する前にオブジェクトを世界協定時刻 (UTC)。 これには、UTC からのオフセットが異なる可能性がある、比較に影響が削除されます。  
  
> [!NOTE]
>  カスタム演算子をサポートする言語では、減算演算子を使用して日付と時刻の減算を実行することもできます。 詳細については、次を参照してください。、<xref:System.DateTimeOffset.op_Subtraction%2A>メソッド。  
  
 ため、どちらも現在<xref:System.DateTimeOffset>オブジェクトも`value`パラメーターは、特定のタイム ゾーンの日時を表す、<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>メソッドでは、特定のタイム ゾーンの調整規則を日付と時刻を減算するときに考慮されません。  
  
   
  
## Examples  
 次の例では、減算を使用する、<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>メソッド。  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">減算する時間間隔。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、指定された時間間隔を減算します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す日時から、<paramref name="value" /> が表す時間間隔を減算した値と等価なオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.DateTimeOffset.Subtract%2A>時間間隔 (日、時、分、秒またはミリ秒単位) を 1 回の操作での複数の種類を減算するメソッド。 その動作と同じです、<xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29>メソッドは、減算演算子を定義します。 <xref:System.DateTimeOffset>構造体には、追加の特殊なメソッドもサポートしています (など<xref:System.DateTimeOffset.AddDays%2A>、 <xref:System.DateTimeOffset.AddHours%2A>、および<xref:System.DateTimeOffset.AddMinutes%2A>) メソッドのパラメーターを負の値を割り当てることで減算を実行することができます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`timeSpan`をその日付と時刻。  
  
 <xref:System.DateTimeOffset.Subtract%2A>メソッドではの値には影響しません、<xref:System.DateTimeOffset>オブジェクトの<xref:System.DateTimeOffset.Offset%2A>プロパティ。 返された<xref:System.DateTimeOffset>オブジェクトが元のオブジェクトと同じオフセット。  
  
 ため、現在<xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンの日時を表していません、<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29>メソッドでは、特定のタイム ゾーン調整規則の減算を実行するときは考慮されません。  
  
   
  
## Examples  
 次の例では、減算を使用する、<xref:System.DateTimeOffset.Subtract%2A>メソッド。  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を同じ型の別のオブジェクトと比較します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、<paramref name="obj" /> より小さいか大きい、または等しいかどうかを示す 32 ビット符号付き整数。 メソッドの戻り値の意味を次に示します。 
 <list type="table"><listheader><term> 戻り値 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> よりも小さい (前の) 日時です。  
  
 </description></item><item><term> 0 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> と等価です。つまり、同じ特定の時点を表しています。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> よりも大きい (後の) 日時です。  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクト。 このパラメーターの機能は、現在実装されていません。</param>
        <summary>オブジェクトの逆シリアル化の完了後に実行します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先のオブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先 (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</param>
        <summary>現在の <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトをシリアル化するために必要なデータを <see cref="T:System.DateTimeOffset" /> オブジェクトに格納します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を表すタイマー刻み数を取得します。</summary>
        <value>
          <see cref="T:System.DateTimeOffset" /> オブジェクトの時刻のタイマー刻みの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Ticks%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 値、<xref:System.DateTimeOffset.Ticks%2A>プロパティは 0001 年 1 月 1 日 12時 00分: 00 の午前 0 時以降の経過時間を 100 ナノ秒間隔の数を表します (の値<xref:System.DateTimeOffset.MinValue>)。 これは、タイマー刻みうるう秒によって追加されるには含まれません。 ナノ秒は、10億分の秒です。1 秒あたり 10億のタイマー刻みがあります。 値、<xref:System.DateTimeOffset.Ticks%2A>プロパティの範囲は`DateTimeOffset.MinValue.Ticks`に`DateTimeOffset.MaxValue.Ticks`します。  
  
 タイマー刻みの数を割り当てることができます、<xref:System.DateTimeOffset>オブジェクトを使用して、<xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29>コンス トラクター オーバー ロードします。  
  
   
  
## Examples  
 次の例では、初期化、<xref:System.DateTimeOffset>オブジェクト、2008 年 7 月 1 日のおおよそのタイマー刻みの数を 1時 23分: 07 します。 日時をコンソールにその日付で表されたタイマー刻みの数が表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時刻を取得します。</summary>
        <value>現在の日付の午前 0 時からの経過時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TimeOfDay%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A>の時間コンポーネントを返します、<xref:System.DateTimeOffset>の形式でオブジェクトを<xref:System.TimeSpan>オブジェクト。 同じになります、<xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType>プロパティ。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.TimeOfDay%2A>プロパティを時間を抽出し、それをコンソールに表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻の西暦 1601 年 1 月 1 日午前 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値は、します。 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 <xref:System.DateTimeOffset.ToFileTime%2A>メソッドは現在、変換<xref:System.DateTimeOffset>オブジェクトの日付と時刻を UTC から変換を実行します。 つまり、呼び出し、<xref:System.DateTimeOffset.ToFileTime%2A>メソッドは次のメソッド呼び出しに相当します。  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻は、世界協定時刻 (UTC) の西暦 1601 年 1 月 1 日深夜 12:00 時よりも前の日時を 世界協定時刻 (UTC: Coordinated Universal Time)。</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトを、現地時刻を表す <see cref="T:System.DateTimeOffset" /> オブジェクトに変換します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を現地時刻に変換した値を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現地時刻への変換を実行するには、メソッド、最初に変換します現在<xref:System.DateTimeOffset>オブジェクトの日付と時刻を世界協定時刻 (UTC) 時刻からのオフセットを減算しています。 これは、後変換されます UTC の日付と時刻を現地時刻にローカル タイム ゾーンのオフセットを追加することで。 これを行うことで、ローカル タイム ゾーンの調整規則を任意のアカウントがかかります。  
  
 現在の値<xref:System.DateTimeOffset>オブジェクトとの値、<xref:System.DateTimeOffset>メソッドの呼び出しによって返されるオブジェクトでは、時間の同じ時点を表しています。 つまり、両方に渡された場合、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>メソッドは、メソッドを返します`true`。  
  
 変換によって、時刻の範囲外であるかどうか、<xref:System.DateTimeOffset>の種類、<xref:System.DateTimeOffset.ToLocalTime%2A>メソッドを返します。 を<xref:System.DateTimeOffset>いずれかに日付と時刻を持つオブジェクトが設定<xref:System.DateTimeOffset.MaxValue>または<xref:System.DateTimeOffset.MinValue>とオフセットのローカル タイム ゾーン オフセットを設定します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToLocalTime%2A>に変換するメソッド、<xref:System.DateTimeOffset>太平洋標準時ゾーンでのローカル時刻の値。 また、ローカル タイム ゾーンの調整規則のメソッドのサポートを示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">変換後の <see cref="T:System.DateTimeOffset" /> 値のオフセット。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を、オフセット値で指定された日時に変換します。</summary>
        <returns>元の <see cref="T:System.DateTimeOffset" /> オブジェクトと等しく (つまり、<see cref="M:System.DateTimeOffset.ToUniversalTime" /> メソッドで同じ特定の時点が返される)、かつ、<see cref="P:System.DateTimeOffset.Offset" /> プロパティが <paramref name="offset" /> に設定されているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ToOffset%2A>メソッドを呼び出す代わりに、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>メソッド。 世界協定時刻 (UTC) からのタイム ゾーン オフセットがわかっている場合は、1 つのタイム ゾーンから別の単純な変換を実行するために便利ですができます。 ただし、ため、どちらも、元<xref:System.DateTimeOffset>オブジェクトも、新しい<xref:System.DateTimeOffset>メソッドの呼び出しによって返されるオブジェクトは明確に関連する特定のタイム ゾーン、メソッドは、変換のタイム ゾーン調整規則が適用されません。  
  
   
  
## Examples  
 次の例を使用する方法を示しています、<xref:System.DateTimeOffset.ToOffset%2A>に変換するメソッド、<xref:System.DateTimeOffset>オブジェクトを<xref:System.DateTimeOffset>さまざまなオフセットを含むオブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">結果として得られる <see cref="T:System.DateTimeOffset" /> オブジェクトの <see cref="P:System.DateTimeOffset.DateTime" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> オブジェクトの <see cref="P:System.DateTimeOffset.DateTime" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> が -14 時間未満です。  
  
- または - 
 <paramref name="offset" /> が 14 時間を超えています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <returns>
          <see cref="T:System.DateTimeOffset" /> オブジェクトの文字列形式。文字列の末尾にオフセットが追加されています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの戻り値のと同じですが、<xref:System.DateTime.ToString?displayProperty=nameWithType>ことには、スペースが含まれています。 ただし、メソッドの後に、文字列の末尾にオフセットが追加されます。 つまり、形式の長い時刻パターンの短い日付パターンを使用して、出力、および`zzz`から直前の要素をスペースで区切られた各要素のカスタム書式指定文字列。 たとえば場合、 <xref:System.DateTime.ToString?displayProperty=nameWithType> 1/12/2008 の値を返します 6時 15分: 50 PM、 <xref:System.DateTimeOffset.ToString> 1/12/2008 の値を返します 6時 15分: 50 PM -08:00 の時間は 8 時間の世界協定時刻 (UTC) の背後にあります。  
  
 このメソッドは、基に、現在のカルチャの書式情報を使用します。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A>」を参照してください。 他のオーバー ロード、<xref:System.DateTimeOffset.ToString%2A>メソッドを使用するカルチャを指定を使用しての出力のパターンを定義する書式、<xref:System.DateTimeOffset>値。  
  
   
  
## Examples  
 次の例では、呼び出しを<xref:System.DateTimeOffset.ToString>メソッドおよびその出力をシステムの現在のカルチャが英語で-米国。  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString" />メソッドは、現在のカルチャで使用される暦で日付と時刻の文字列表現を返します。 場合、現在の値<see cref="T:System.DateTimeOffset" />インスタンスがよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />します。 具体的な例を次に示します。 範囲外にある日付の書式設定しようと、<see cref="T:System.Globalization.HijriCalendar" />クラスの現在のカルチャがアラビア語 (シリア)。  
  
[! コード csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [! コード vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="formatProvider" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの戻り値はの同等のオーバー ロードの場合と同じ、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>ことには、スペースが含まれています。 ただし、メソッドの後に、文字列の末尾にオフセットが追加されます。 つまり、形式の長い時刻パターンの短い日付パターンを使用して、出力、および`zzz`から直前の要素をスペースで区切られた各要素のカスタム書式指定文字列。  
  
 これら 3 つの要素の書式を定義して、`formatProvider`パラメーター。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>返される文字列に書式指定規則が適用されるカルチャを表すオブジェクト。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatProvider`は`null`、 <xref:System.Globalization.DateTimeFormatInfo> 、現在のカルチャに関連付けられているオブジェクトを使用して (を参照してください<xref:System.Globalization.CultureInfo.CurrentCulture%2A>)。  
  
   
  
## Examples  
 次の例では、表示、<xref:System.DateTimeOffset>オブジェクトを使用して<xref:System.Globalization.CultureInfo>インバリアント カルチャとその他の 4 つのカルチャを表すオブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="formatProvider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />メソッドは、によって表されるカルチャで使用される暦で日付と時刻の文字列表現を返します、<paramref name="formatProvider" />パラメーター。 そのカレンダーがによって定義されている、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />プロパティ。 場合、現在の値<see cref="T:System.DateTimeOffset" />インスタンスがよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />します。 具体的な例を次に示します。 範囲外にある日付の書式設定しようと、<see cref="T:System.Globalization.JapaneseCalendar" />クラス。  
  
[! コード csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [! コード vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">書式指定文字列。</param>
        <summary>指定した書式を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`パラメーターは、単一の書式指定子の文字を含める必要があります (を参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) またはカスタム書式パターン (を参照してください[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md))、返される文字列の書式を定義します。 場合`format`が null または空の文字列 ("")、<xref:System.DateTimeOffset>既定形式を使用して値を出力します。  
  
 次の表に、特定の書式指定子と共に使用する場合の正確な操作<xref:System.DateTimeOffset>で使用する場合は、その動作が異なる<xref:System.DateTime>します。  
  
|既存の書式指定子|新しい動作|  
|-------------------------------|------------------|  
|"K"|ラウンドト リップする日付と時刻。 <xref:System.DateTimeOffset>、"Zzz"(オフセットは、時間と分で常に表示されます) にマップされます。 "K"カスタム書式指定子は、することに注意してください。内の 1 文字としては表示できません`format`します。|  
|"U"|サポートされていません。|  
|"r"|変換、<xref:System.DateTimeOffset>オブジェクトの世界協定時刻 (UTC) にし、カスタム書式指定文字列を使用して出力`ddd, dd MMM yyyy HH:mm:ss GMT`します。|  
|"u"|変換、<xref:System.DateTimeOffset>オブジェクトを UTC にし、出力形式を使用して`yyyy-MM-dd HH:mm:ssZ`します。|  
  
 残りの標準の日付と時刻の書式指定子の動作と同じで、<xref:System.DateTimeOffset.ToString%28System.String%29>メソッドを使用する場合、<xref:System.DateTime.ToString%2A>メソッド。  
  
 このメソッドは、基に、現在のカルチャの書式情報を使用します。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A>」を参照してください。  
  
   
  
## Examples  
 次の例では、表示、<xref:System.DateTimeOffset>コンソールの標準の日付と時刻の書式指定子を使用するオブジェクト。 En を使用して、出力が書式設定のカルチャを返します。  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の長さは 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている標準書式指定子文字の 1 つではありません。  
  
- または - 
 <paramref name="format" /> には有効なカスタム書式パターンが含まれません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.String)" />メソッドは、現在のカルチャで使用される暦で日付と時刻の文字列表現を返します。 場合、現在の値<see cref="T:System.DateTimeOffset" />インスタンスがよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />します。 具体的な例を次に示します。 範囲外にある日付の書式設定しようと、<see cref="T:System.Globalization.HebrewCalendar" />クラスの現在のカルチャがヘブライ語 (イスラエル)。  
  
[! コード csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [! コード vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">書式指定文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> および <paramref name="provider" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`パラメーターは、単一の書式指定子の文字を含める必要があります (を参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) またはカスタム書式パターン (を参照してください[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). 場合`format`が null または空の文字列 ("")、<xref:System.DateTimeOffset>既定形式を使用してオブジェクトを出力します。  
  
 次の表に、特定の書式指定子と共に使用する場合の正確な操作<xref:System.DateTimeOffset>で使用する場合は、その動作が異なる<xref:System.DateTime>します。  
  
|既存の書式指定子|新しい動作|  
|-------------------------------|------------------|  
|"K"|ラウンドト リップする日付と時刻。 <xref:System.DateTimeOffset>、"Zzz"(オフセットは、時間と分で常に表示されます) にマップされます。 "K"カスタム書式指定子は、することに注意してください。内の 1 文字としては表示できません`format`します。|  
|"U"|サポートされていません。|  
|"r"|変換、<xref:System.DateTimeOffset>オブジェクトの世界協定時刻 (UTC) にし、カスタム書式指定文字列を使用して出力`ddd, dd MMM yyyy HH:mm:ss GMT`します。|  
|"u"|変換、<xref:System.DateTimeOffset>値を UTC にし、出力形式を使用して`yyyy-MM-dd HH:mm:ssZ`します。|  
  
 残りの標準の日付と時刻の書式指定子の動作と同じで、<xref:System.DateTimeOffset.ToString%28System.String%29>メソッドを使用する場合、<xref:System.DateTime.ToString%2A>メソッド。  
  
 によって、標準書式指定子だけでなく、シンボルと日付と時刻のコンポーネントの名前に対応するパターンが定義されている、`formatProvider`パラメーター。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>オブジェクトで使用される書式はカルチャを表す`input`します。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ定義で使用される書式`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatProvider`は`null`、 <xref:System.Globalization.DateTimeFormatInfo> 、現在のカルチャに関連付けられているオブジェクトを使用して (を参照してください<xref:System.Globalization.CultureInfo.CurrentCulture%2A>)。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29>を表示するメソッド、<xref:System.DateTimeOffset>いくつかの異なるカルチャのカスタム書式指定文字列を使用してオブジェクトします。  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の長さは 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている標準書式指定子文字の 1 つではありません。  
  
- または - 
 <paramref name="format" /> には有効なカスタム書式パターンがありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="formatProvider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />メソッドで使用する暦で日付と時刻の文字列表現を返します、<paramref name="formatProvider" />パラメーター。 そのカレンダーがによって定義されている、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />プロパティ。 場合、現在の値<see cref="T:System.DateTimeOffset" />インスタンスがよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />します。 具体的な例を次に示します。 範囲外にある日付の書式設定しようと、<see cref="T:System.Globalization.UmAlQuraCalendar" />クラス。  
  
[! コード csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [! コード vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">サンプル: .NET Framework 4 の書式設定ユーティリティ</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトを、世界協定時刻 (UTC) を表す <see cref="T:System.DateTimeOffset" /> 値に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を世界協定時刻 (UTC) に変換した値を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが戻る、<xref:System.DateTimeOffset>オブジェクト<xref:System.DateTimeOffset.Offset%2A>プロパティが 0 に設定されます。  
  
 現在の値<xref:System.DateTimeOffset>オブジェクトとの値、<xref:System.DateTimeOffset>メソッドの呼び出しによって返されるオブジェクトでは、時間の同じ時点を表しています。 つまり、両方に渡された場合、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>メソッドは、メソッドを返します`true`。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToUniversalTime%2A>現地時刻と他のいくつかの時刻を世界協定時刻 (UTC) に変換します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1970-01-01T00:00:00.000Z からの経過時間をミリ秒で返します。</summary>
        <returns>1970-01-01T00:00:00.000Z からの経過時間 (ミリ秒)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 時間は、1970 年経過した秒数を表す-01-01T00:00:00Z (1、1970 年 1 月、12時 00分 AM utc)。 これは考慮されませんうるう秒。 このメソッドは、Unix 時間のミリ秒数を返します。  
  
 このメソッドはまず、その Unix 時間のミリ秒数を返す前に、UTC に、現在のインスタンスを変換します。 1970 年以前の日付と時刻の値を-01-01T00:00:00Z、このメソッドは、負の値を返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1970-01-01T00:00:00Z からの経過時間を秒で返します。</summary>
        <returns>1970-01-01T00:00:00Z からの経過時間 (秒)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 時間は、1970 年経過した秒数を表す-01-01T00:00:00Z (1、1970 年 1 月、12時 00分 AM utc)。 これは考慮されませんうるう秒。  
  
 このメソッドはまず、その Unix 時間を返す前に、UTC に、現在のインスタンスを変換します。 1970 年以前の日付と時刻の値を-01-01T00:00:00Z、このメソッドは、負の値を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToUnixTimeSeconds%2A>直前に、1970年のすぐ後に同じか、値の Unix 時間を返すメソッドを-01-01T00:00:00Z します。  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="result">変換に成功した場合は、<c>input</c> の日時と等しい <see cref="T:System.DateTimeOffset" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <c>input</c> パラメーターが <see langword="null" /> の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列表現の日時を対応する <see cref="T:System.DateTimeOffset" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>などのメソッドは、<xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType>メソッド、点を除いて、変換が失敗した場合、その it が例外をスローしません。 任意の順序で表示されることができますし、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に表示されます。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1時 02分: 03 PM"|  
|\<オフセット >|"-7: 30"|  
  
 これらの各要素は省略可能な\<オフセット > を単独で表示されることはできません。 いずれかと組み合わせて指定する必要があります\<日付 > または\<時間 >。 場合\<日付 > がありませんが、その既定値は、現在の日付。 場合\<日付 > が、その年のコンポーネントは、2 桁のみで構成されますの値に基づいて、現在のカルチャの現在の暦で年に変換されます、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティ。 場合\<時間 > がありませんが、その既定値は 12時 00分: 00 AM です。 場合\<オフセット > がありませんが、その既定値はローカル タイム ゾーンのオフセット。 場合\<オフセット > が存在する場合は、表すことができる負または正のオフセットのいずれかから世界協定時刻 (UTC)。 いずれの場合も、\<オフセット > の記号またはメソッドを返します。 を含める必要があります`false`します。  
  
 `input`で書式設定情報を使用して文字列を解析、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトの現在のカルチャ用に初期化します。 を現在のカルチャは必ずしも対応しない指定の書式設定を含む文字列を解析するを使用して、<xref:System.DateTimeOffset.TryParseExact%2A>メソッドと書式指定子を提供します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>さまざまな日付と時刻の書式を持つ複数の文字列を解析します。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">サンプル: .NET Framework 4 の書式設定ユーティリティ</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> に許可されている書式を示す列挙値のビットごとの組み合わせ。</param>
        <param name="result">変換に成功した場合は、<c>input</c> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <c>input</c> パラメーターが <see langword="null" /> の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTimeOffset" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>などのメソッドは、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッド、点を除いて、変換が失敗した場合、その it が例外をスローしません。 メソッドは、任意の順序で表示されることができますし、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に表示されます。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1時 02分: 03 PM"|  
|\<オフセット >|"-7: 30"|  
  
 これらの各要素は省略可能な\<オフセット > を単独で表示されることはできません。 いずれかと組み合わせて指定する必要があります\<日付 > または\<時間 >。 場合\<日付 > がありませんが、その既定値は、現在の日付。 場合\<日付 > が、その年のコンポーネントは、2 桁のみで構成されますの年に変換されます、`provider`パラメーターの現在の暦がの値に基づいて、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティ。 場合\<時間 > がありませんが、その既定値は 12時 00分: 00 AM です。 場合\<オフセット > がありませんが、その既定値は、ローカル タイム ゾーンのオフセットまたは<xref:System.TimeSpan.Zero>場合、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>または<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>で値が指定された`styles`。 場合\<オフセット > が存在する場合は、表すことができる負または正のオフセットのいずれかから世界協定時刻 (UTC)。 いずれの場合も、\<オフセット > の記号またはメソッドを返します。 を含める必要があります`false`します。  
  
 `input`でカルチャに固有の書式設定情報を使用して文字列を解析する<xref:System.Globalization.DateTimeFormatInfo>で指定されたオブジェクト、`formatProvider`パラメーター。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>オブジェクトで使用される書式はカルチャを表す`input`します。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティで使用される書式を定義する`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 さらに、各要素が先頭または末尾の空白で区切ることができます、\<日付 > と\<時間 > コンポーネントは、(6時 00分: 00) などの内部の空白文字を含めることができます。 のみ、\<オフセット > コンポーネントは、内部の空白文字を含めることはできません。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 使用される正または負の符号\<オフセット > いずれかである必要があります + または - します。 によって定義されていない、<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、`formatprovider`パラメーターの<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。  
  
 次のメンバー、<xref:System.Globalization.DateTimeStyles>列挙型がサポートされています。  
  
|DateTimeStyles メンバー|コメント|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|によって表される文字列を解析して`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、返されるオブジェクトのと同じ<xref:System.DateTimeOffset.ToUniversalTime>メソッド。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効では、この値は無視されます。 内部の空白が許可されている、\<日付 > と\<時間 > コンポーネント。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効では、この値は無視されます。 解析された文字列内の各コンポーネントの前に、先頭の空白が許可されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効では、この値は無視されます。 解析された文字列内の各コンポーネントの前に、末尾の空白文字は許可されています。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|これが既定の動作です。 制限を指定して、オーバーライドできません<xref:System.Globalization.DateTimeStyles>などの列挙値<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合は、ことを示します、`input`パラメーターがない、\<オフセット > 要素では、ローカル タイム ゾーンのオフセットを指定する必要があります。 これは、既定の動作、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>メソッド。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合は、ことを示します、`input`パラメーターがない、\<オフセット > 要素では、UTC のオフセット (00:00) を使用する必要があります。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効な場合は、この値は無視され、影響を与えません。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティでは、この値は影響を与えません。|  
  
 のみ、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>値がサポートされていません。 <xref:System.ArgumentException>でこの値が含まれている場合にスローされる、`styles`パラメーター。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>メソッドのさまざまな<xref:System.Globalization.DateTimeStyles>さまざまな日付と時刻の書式を持ついくつかの文字列を解析する値。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
- または - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
- または - 
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日付と時刻の表現を含む文字範囲。</param>
        <param name="format">
          <paramref name="input" /> の必要な形式を定義する形式指定子。</param>
        <param name="formatProvider">
          <paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 次の場合、変換は失敗します</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、文字範囲に含まれる日付と時刻の表現を等価の <see cref="System.DateTimeOffset" /> に変換します。 日付と時刻を表すための書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

このオーバー ロードは似ています、<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>メソッドが、このメソッドは、変換が失敗した場合に例外をスローしません。 日付と時刻で指定されたパターンと一致する必要がありますの形式を解析し、`format`パラメーター。 場合`input`によって定義された空白でいくつかのバリエーションと、このパターンに一致しない、`styles`パラメーター、解析操作が失敗し、メソッドを返します`false`します。  
  
`format`パラメーターが 1 つの標準書式指定子またはの必要なパターンを定義する 1 つまたは複数のカスタム書式指定子を含む文字範囲`input`します。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合`format`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号が不足している場合は、解析操作が失敗したメソッドを返します`false`します。  
  
場合`format`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合`format`いる必要があります`input`、時間がない日付、結果を含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合`format`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal>にローカル タイム ゾーンのオフセットが割り当てられている、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 (UTC) オフセット、またはに割り当てられている 00:00、+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値が指定されている場合は、ローカル タイム ゾーンのオフセットが使用されます。  
  
特定の日付と時刻のシンボルで使用される文字列`input`が定めた、`formatProvider`パラメーター。 正確なパターンの方も`input`場合`format`は標準書式指定子の文字列です。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>シンボルを定義するプロパティと標準の形式が許可`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは空白が許可されているかどうかを定義、入力文字列で、明示的なオフセットのコンポーネントがない場合、文字列の解析方法と、解析操作の一部としてサポートしている UTC の変換を示します。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>を除く列挙型がサポートされている<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>します。 次の表では、サポートされている各メンバーの効果を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、日付と時刻の形式を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>メソッドは、返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合`format`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合`format`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトには、UTC のオフセット (+ 00時 00分) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`形式で指定されていない内部の空白文字を含める。 余分な空白は、日付と時刻のコンポーネント間、およびオフセット以外の個々 のコンポーネント内に表示されることができますは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`で指定されていない先頭のスペースを含める`format`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`末尾のスペースで指定されていない対象`format`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`で指定されていない先頭、末尾、および内部の空白文字を含める`format`します。 すべての余分な空白文字で指定されていない`format`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示します`input`します。 空白文字はの指定どおり正確に表示する必要があります`format`します。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ。|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
または、<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
または、<paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
このメソッドは、いずれかに割り当てられているパターンに一致する日付の文字列表現を解析し、`formats`配列。 場合`input`これらのパターンのいずれかで定義されたすべてのバリエーションと一致しません、`styles`パラメーター、解析操作が失敗し、メソッドを返します`false`します。 別に比較する`input`このオーバー ロードを同じように動作する、書式指定子が含まれている複数の文字列、<xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>メソッド。  
  
 `formats`パラメーターが 1 つの標準書式指定子またはの可能なパターンを定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素を格納する文字列配列`input`します。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合に一致する要素`formats`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号が不足している場合は、解析操作が失敗したメソッドを返します`false`します。  
  
> [!IMPORTANT]
>  使用して、`formats`複数の形式を指定するこのオーバー ロードのパラメーターは、日付と時刻を入力するときに発生する多くのユーザーの不満を削減できます。 具体的には、複数の入力パターンを定義する機能には、日付と時刻の表現を含めるか月、日、時間、分、および秒に先行ゼロがないことができますを処理するためにアプリケーションができます。 例では、この図を提供します。  
  
 場合に一致する要素`formats`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合に一致する要素`formats`入力には、時間がない日付、結果が含まれている必要があります<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合に一致する要素`formats`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>にローカル タイム ゾーンのオフセットが割り当てられている、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>、世界協定時刻 (UTC) オフセット、またはに割り当てられている 00:00、+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値が指定されている場合は、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時間のシンボルで使用される`input`が定めた、`formatProvider`パラメーター。 正確なパターンの方も`input`場合、一致する要素の`formats`は標準書式指定子の文字列です。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>シンボルとに書式設定プロパティを定義します`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは空白が許可されているかどうかを定義、入力文字列で、明示的なオフセットのコンポーネントがない場合、文字列の解析方法と、解析操作の一部としてサポートしている UTC の変換を示します。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>を除く列挙型がサポートされている<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>します。 次の表では、サポートされている各メンバーの効果を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>メソッドは、返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合に一致する要素`formats`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合に一致する要素`formats`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトには、UTC のオフセット (+ 00時 00分) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`内の要素で指定されていない内部の空白文字を含める`formats`します。 余分な空白は、日付と時刻のコンポーネント間および (オフセット) を除く個別のコンポーネント内に表示されることができますは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`を先頭に内の要素で指定されていない空白を含める`formats`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`末尾のスペース内の要素で指定されていない対象`formats`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`内の要素で指定されていない先頭、末尾、および内部の空白文字を含める`formats`します。 すべての余分な空白文字に一致する要素で指定されていない`formats`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示します`input`します。 空白文字は、の特定の要素で指定どおり正確に表示する必要があります`formats`一致が発生します。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
または、<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
または、<paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format">
          <c>input</c> の必要な書式を定義する書式指定子。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">input に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see langword="None" /> です。</param>
        <param name="result">変換に成功した場合は、<c>input</c> の日時と等しい <see cref="T:System.DateTimeOffset" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <c>input</c> パラメーターが <see langword="null" /> の場合、または、指定された日時の文字列形式が <c>format</c> と <c>provider</c> で定義された所定の書式に従っていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>などのメソッドは、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッド、変換が失敗した場合、このメソッドが例外をスローしない点が異なります。 指定されたパターンと一致する必要があります日時の文字列表現を解析し、`format`パラメーター。 場合、`input`文字列がによって定義された空白でいくつかのバリエーションで、このパターンと一致しません、`styles`パラメーター、解析操作が失敗し、メソッドを返します`false`します。  
  
 `format`パラメーターは、1 つの標準書式指定子またはの必要なパターンを定義する 1 つまたは複数のカスタム書式指定子を含む文字列`input`します。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合`format`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号が不足している場合は、解析操作が失敗したメソッドを返します`false`します。  
  
 場合`format`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合`format`いる必要があります`input`、時間がない日付、結果を含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合`format`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal>にローカル タイム ゾーンのオフセットが割り当てられている、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 (UTC) オフセット、またはに割り当てられている 00:00、+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値が指定されている場合は、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルで使用される文字列`input`が定めた、`formatProvider`パラメーター。 正確なパターンの方も`input`場合`format`は標準書式指定子の文字列です。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>シンボルを定義するプロパティと標準の形式が許可`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは空白が許可されているかどうかを定義、入力文字列で、明示的なオフセットのコンポーネントがない場合、文字列の解析方法と、解析操作の一部としてサポートしている UTC の変換を示します。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>を除く列挙型がサポートされている<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>します。 次の表では、サポートされている各メンバーの効果を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>メソッドは、返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合`format`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合`format`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトには、UTC のオフセット (+ 00時 00分) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`形式で指定されていない内部の空白文字を含める。 余分な空白は、日付と時刻のコンポーネント間、およびオフセット以外の個々 のコンポーネント内に表示されることができますは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`で指定されていない先頭のスペースを含める`format`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`末尾のスペースで指定されていない対象`format`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`で指定されていない先頭、末尾、および内部の空白文字を含める`format`します。 すべての余分な空白文字で指定されていない`format`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示します`input`します。 空白文字はの指定どおり正確に表示する必要があります`format`します。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ。|  
  
## Examples 

 次の例では、<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>標準とカスタム書式指定子、インバリアント カルチャ、およびさまざまなメソッド<xref:System.Globalization.DateTimeStyles>いくつかの日付と時刻の文字列を解析する値。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

次の例は、さまざまな<xref:System.Globalization.DateTimeStyles>に準拠するように予想される文字列の配列を解析する[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)します。 例の出力に示すよう適切な形式である文字列解析に失敗する場合。

- 空白、および適切なが含まれている<xref:System.Globalization.DateTimeStyles>フラグ (など<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>メソッドの呼び出しで指定されていません。

- 範囲外の日付と時刻の要素が含まれます。

UTC オフセットが指定されていない文字列がローカル タイム ゾーンのオフセットがあると見なされます (この場合、-07:00 太平洋夏時間のタイム ゾーンのオフセットを反映する) しない限り、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>メソッドの呼び出しで指定されているフラグ。 その場合は、世界協定時刻であると見なされます。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
- または - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
- または - 
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTimeOffset.TryParseExact" />返します<see langword="false" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formats">
          <c>input</c> の有効な書式を定義する配列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">input に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see langword="None" /> です。</param>
        <param name="result">変換に成功した場合は、<c>input</c> の日時と等しい <see cref="T:System.DateTimeOffset" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <c>input</c> が有効な文字列形式の日時を含んでいない場合、<c>format</c> で定義された書式に従っていない場合、または、<c>format</c> が <see langword="null" /> の場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>メソッドに割り当てられているパターンのいずれかに一致する日付の文字列表現を解析し、`formats`配列。 場合、`input`文字列は、これらのパターンのいずれかで定義されたすべてのバリエーションと一致しません、`styles`パラメーター、解析操作が失敗し、メソッドを返します`false`します。 別に比較する`input`このオーバー ロードを同じように動作する、書式指定子が含まれている複数の文字列、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッド。  
  
 `formats`パラメーターが 1 つの標準書式指定子またはの可能なパターンを定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素を格納する文字列配列`input`します。 詳細については、有効な書式設定コードは、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 場合に一致する要素`formats`が含まれています、 `z`、 `zz`、または`zzz`を示すオフセットが存在する必要があるカスタム書式指定子`input`、そのオフセットは、正または負の符号を含める必要があります。 符号が不足している場合は、解析操作が失敗したメソッドを返します`false`します。  
  
> [!IMPORTANT]
>  使用して、`formats`複数の形式を指定するこのオーバー ロードのパラメーターは、日付と時刻を入力するときに発生する多くのユーザーの不満を削減できます。 具体的には、複数の入力パターンを定義する機能には、日付と時刻の表現を含めるか月、日、時間、分、および秒に先行ゼロがないことができますを処理するためにアプリケーションができます。 例では、この図を提供します。  
  
 場合に一致する要素`formats`いる必要があります`input`が、日付、時刻ではなく、結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時が割り当てられている (0: 00:00)。 場合に一致する要素`formats`入力には、時間がない日付、結果が含まれている必要があります<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付を代入します。 場合に一致する要素`formats`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal>にローカル タイム ゾーンのオフセットが割り当てられている、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 (UTC) オフセット、またはに割り当てられている 00:00、+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値が指定されている場合は、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルで使用される文字列`input`が定めた、`formatProvider`パラメーター。 正確なパターンの方も`input`場合、一致する要素の`formats`は標準書式指定子の文字列です。 `formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを基になる`input`は解釈されます。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>シンボルとに書式設定プロパティを定義します`input`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは空白が許可されているかどうかを定義、入力文字列で、明示的なオフセットのコンポーネントがない場合、文字列の解析方法と、解析操作の一部としてサポートしている UTC の変換を示します。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>を除く列挙型がサポートされている<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>します。 次の表では、サポートされている各メンバーの効果を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>メソッドは、返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合に一致する要素`formats`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合に一致する要素`formats`いる必要はありません`input`、返されたオフセット値を含めることが<xref:System.DateTimeOffset>オブジェクトには、UTC のオフセット (+ 00時 00分) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`内の要素で指定されていない内部の空白文字を含める`formats`します。 余分な空白は、日付と時刻のコンポーネント間および (オフセット) を除く個別のコンポーネント内に表示されることができますは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`を先頭に内の要素で指定されていない空白を含める`formats`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`末尾のスペース内の要素で指定されていない対象`formats`します。 文字列を解析するときに、これらは無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`内の要素で指定されていない先頭、末尾、および内部の空白文字を含める`formats`します。 すべての余分な空白文字に一致する要素で指定されていない`formats`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示します`input`します。 空白文字は、の特定の要素で指定どおり正確に表示する必要があります`formats`一致が発生します。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ。|  
  
   
  
## Examples  
 次の例は、日付と時刻、およびオフセットの値の文字列形式の複数の入力形式を定義し、ユーザーによって入力される文字列を渡します、<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>メソッド。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
- または - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
- または - 
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTimeOffset.TryParseExact" />返します<see langword="false" />解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョン、AM/PM 指定子は無視されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの世界協定時刻 (UTC) の日時を表す <see cref="T:System.DateTimeOffset" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) の日時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A>プロパティが 2 つの変換を実行します。  
  
-   現在の日時に変換します<xref:System.DateTimeOffset>オブジェクトの世界協定時刻 (UTC)。 値を減算して、変換を実行、<xref:System.DateTimeOffset.Offset%2A>プロパティを現在の日時から<xref:System.DateTimeOffset>オブジェクト。  
  
-   変換、<xref:System.DateTimeOffset>値を<xref:System.DateTime>値。  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTimeOffset.DateTime%2A>値に設定されて<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>します。  
  
 値を取得、<xref:System.DateTimeOffset.UtcDateTime%2A>プロパティは、現在の呼び出しに相当<xref:System.DateTimeOffset>オブジェクトの`ToUniversalTime.DateTime`点を除いて、プロパティ、<xref:System.DateTime.Kind%2A>後者のプロパティ<xref:System.DateTime>値は<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次の例を使用する方法を示しています、<xref:System.DateTimeOffset.UtcDateTime%2A>プロパティを表示、<xref:System.DateTimeOffset>値とその対応する UTC 時刻。  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日時とオフセットがそれぞれ現在の世界協定時刻 (UTC) および <see cref="T:System.DateTimeOffset" /> に設定された <see cref="F:System.TimeSpan.Zero" /> オブジェクトを取得します。</summary>
        <value>日時とオフセットがぞれぞれ現在の世界協定時刻 (UTC) および <see cref="F:System.TimeSpan.Zero" /> に設定されたオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A>プロパティ システムのローカル クロック時間に基づく現在世界協定時刻 (UTC) とローカル システムのタイム ゾーンで定義されたオフセットを計算します。  
  
 現在の UTC 時刻のミリ秒部分の有効桁数は、システム時計の解像度によって異なります。 Windows NT 3.5 以降、および Windows Vista オペレーティング システムでは、時計の解像力は約 10 ~ 15 ミリ秒です。  
  
   
  
## Examples  
 次の例は、世界協定時刻 (UTC) と現地時刻間のリレーションシップを示しています。  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) での日時を表すタイマー刻み数を取得します。</summary>
        <value>
          <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) でのタイマー刻みの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.DateTimeOffset.UtcTicks%2A>プロパティは 0001 年 1 月 1 日 12時 00分: 00 の午前 0 時以降の経過時間を 100 ナノ秒間隔の数を表します (の値<xref:System.DateTimeOffset.MinValue>)。 これは、タイマー刻みうるう秒によって追加されるには含まれません。 ナノ秒は、10億分の秒です。1 秒あたり 10億のタイマー刻みがあります。 値、<xref:System.DateTimeOffset.UtcTicks%2A>プロパティの範囲は`DateTimeOffset.MinValue.Ticks`に`DateTimeOffset.MaxValue.Ticks`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表される日付の年要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 9999 の整数値で表される年要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Year%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティ。  
  
 文字列表現を作成することも、<xref:System.DateTimeOffset>呼び出すことによってオブジェクトの年の部分、 <xref:System.DateTimeOffset.ToString%2A> "y"、"yy"または"yyyy"カスタム書式指定子を持つメソッド。  
  
   
  
## Examples  
 次の例の表示の年の部分を<xref:System.DateTimeOffset>4 つの方法で値。  
  
-   値を取得することによって、<xref:System.DateTimeOffset.Year%2A>プロパティ。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "y"書式指定子を持つメソッド。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "yy"書式指定子を持つメソッド。  
  
-   呼び出すことによって、 <xref:System.DateTimeOffset.ToString%28System.String%29> "yyyy"書式指定子を持つメソッド。  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>